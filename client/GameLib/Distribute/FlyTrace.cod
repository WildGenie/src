; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	A:\From C\Desktop\Serwer\Source\Source Client\client\GameLib\FlyTrace.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	_fabsf
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
PUBLIC	??0_Container_proxy@std@@QAE@XZ			; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
PUBLIC	??1_Container_base12@std@@QAE@XZ		; std::_Container_base12::~_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	??0_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::_Iterator_base12
PUBLIC	??0_Iterator_base12@std@@QAE@ABU01@@Z		; std::_Iterator_base12::_Iterator_base12
PUBLIC	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z	; std::_Iterator_base12::operator=
PUBLIC	??1_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::~_Iterator_base12
PUBLIC	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
PUBLIC	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
PUBLIC	??0D3DXVECTOR2@@QAE@XZ				; D3DXVECTOR2::D3DXVECTOR2
PUBLIC	??0D3DXVECTOR2@@QAE@MM@Z			; D3DXVECTOR2::D3DXVECTOR2
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	??YD3DXVECTOR3@@QAEAAU0@ABU0@@Z			; D3DXVECTOR3::operator+=
PUBLIC	??ZD3DXVECTOR3@@QAEAAU0@ABU0@@Z			; D3DXVECTOR3::operator-=
PUBLIC	??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z			; D3DXVECTOR3::operator-
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	?D3DXVec3Dot@@YAMPBUD3DXVECTOR3@@0@Z		; D3DXVec3Dot
PUBLIC	?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z	; D3DXVec3Cross
PUBLIC	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z	; D3DXMatrixIdentity
PUBLIC	?Instance@?$CSingleton@VCTimer@@@@SAAAVCTimer@@XZ ; CSingleton<CTimer>::Instance
PUBLIC	??0Vector3d@@QAE@MMM@Z				; Vector3d::Vector3d
PUBLIC	?GetFrustum@CScreen@@SAAAVFrustum@@XZ		; CScreen::GetFrustum
PUBLIC	?Instance@?$CSingleton@VCStateManager@@@@SAAAVCStateManager@@XZ ; CSingleton<CStateManager>::Instance
PUBLIC	?GetEye@CCamera@@QBEABUD3DXVECTOR3@@XZ		; CCamera::GetEye
PUBLIC	?GetView@CCamera@@QBEABUD3DXVECTOR3@@XZ		; CCamera::GetView
PUBLIC	?GetViewMatrix@CCamera@@QBEABUD3DXMATRIX@@XZ	; CCamera::GetViewMatrix
PUBLIC	?Instance@?$CSingleton@VCCameraManager@@@@SAAAVCCameraManager@@XZ ; CSingleton<CCameraManager>::Instance
PUBLIC	??0CFlyTrace@@QAE@XZ				; CFlyTrace::CFlyTrace
PUBLIC	??1CFlyTrace@@UAE@XZ				; CFlyTrace::~CFlyTrace
PUBLIC	?Destroy@CFlyTrace@@QAEXXZ			; CFlyTrace::Destroy
PUBLIC	?Create@CFlyTrace@@QAEXABUTFlyingAttachData@CFlyingData@@@Z ; CFlyTrace::Create
PUBLIC	?UpdateNewPosition@CFlyTrace@@QAEXABUD3DXVECTOR3@@@Z ; CFlyTrace::UpdateNewPosition
PUBLIC	?Update@CFlyTrace@@QAEXXZ			; CFlyTrace::Update
PUBLIC	?Render@CFlyTrace@@QAEXXZ			; CFlyTrace::Render
PUBLIC	?__Initialize@CFlyTrace@@IAEXXZ			; CFlyTrace::__Initialize
PUBLIC	??0?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@QAE@XZ ; std::allocator<std::pair<float,D3DXVECTOR3> >::allocator<std::pair<float,D3DXVECTOR3> >
PUBLIC	?deallocate@?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@QAEXPAU?$pair@MUD3DXVECTOR3@@@2@I@Z ; std::allocator<std::pair<float,D3DXVECTOR3> >::deallocate
PUBLIC	?allocate@?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@QAEPAU?$pair@MUD3DXVECTOR3@@@2@I@Z ; std::allocator<std::pair<float,D3DXVECTOR3> >::allocate
PUBLIC	?max_size@?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@QBEIXZ ; std::allocator<std::pair<float,D3DXVECTOR3> >::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@SAIABV?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@Z ; std::allocator_traits<std::allocator<std::pair<float,D3DXVECTOR3> > >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> > >::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> > >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAEPAU?$pair@MUD3DXVECTOR3@@@2@I@Z ; std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> > >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAEXPAU?$pair@MUD3DXVECTOR3@@@2@I@Z ; std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> > >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> > >::max_size
PUBLIC	?deallocate@?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@QAEXPAPAU?$pair@MUD3DXVECTOR3@@@2@I@Z ; std::allocator<std::pair<float,D3DXVECTOR3> *>::deallocate
PUBLIC	?allocate@?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@QAEPAPAU?$pair@MUD3DXVECTOR3@@@2@I@Z ; std::allocator<std::pair<float,D3DXVECTOR3> *>::allocate
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAEPAPAU?$pair@MUD3DXVECTOR3@@@2@I@Z ; std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> *> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAEXPAPAU?$pair@MUD3DXVECTOR3@@@2@I@Z ; std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> *> >::deallocate
PUBLIC	??0?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAE@XZ ; std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > >::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > >
PUBLIC	?_Getblock@?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QBEII@Z ; std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > >::_Getblock
PUBLIC	??1?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAE@XZ ; std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > >::~_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > >
PUBLIC	??0?$_Deque_alloc@$0A@U?$_Deque_base_types@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@1@@Z ; std::_Deque_alloc<0,std::_Deque_base_types<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > > >::_Deque_alloc<0,std::_Deque_base_types<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > > >
PUBLIC	??1?$_Deque_alloc@$0A@U?$_Deque_base_types@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@@std@@QAE@XZ ; std::_Deque_alloc<0,std::_Deque_base_types<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > > >::~_Deque_alloc<0,std::_Deque_base_types<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > > >
PUBLIC	?_Alloc_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@@std@@QAEXXZ ; std::_Deque_alloc<0,std::_Deque_base_types<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@@std@@QAEXXZ ; std::_Deque_alloc<0,std::_Deque_base_types<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > > >::_Free_proxy
PUBLIC	?_Getal@?$_Deque_alloc@$0A@U?$_Deque_base_types@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@2@XZ ; std::_Deque_alloc<0,std::_Deque_base_types<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > > >::_Getal
PUBLIC	??0?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE@XZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >
PUBLIC	?push_front@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAEX$$QAU?$pair@MUD3DXVECTOR3@@@2@@Z ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::push_front
PUBLIC	??1?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE@XZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::~deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >
PUBLIC	?begin@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@2@XZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::begin
PUBLIC	?end@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@2@XZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::end
PUBLIC	?size@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QBEIXZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::size
PUBLIC	?max_size@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QBEIXZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::max_size
PUBLIC	?empty@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QBE_NXZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::empty
PUBLIC	?back@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAEAAU?$pair@MUD3DXVECTOR3@@@2@XZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::back
PUBLIC	?pop_back@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAEXXZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::pop_back
PUBLIC	?clear@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAEXXZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::clear
PUBLIC	?_Xlen@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@IBEXXZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Xlen
PUBLIC	?_Growmap@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@IAEXI@Z ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Growmap
PUBLIC	?_Tidy@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@IAEXXZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Tidy
PUBLIC	?DestroySystem@CFlyTrace@@SAXXZ			; CFlyTrace::DestroySystem
PUBLIC	?New@CFlyTrace@@SAPAV1@XZ			; CFlyTrace::New
PUBLIC	?Delete@CFlyTrace@@SAXPAV1@@Z			; CFlyTrace::Delete
PUBLIC	??0?$CDynamicPool@VCFlyTrace@@@@QAE@XZ		; CDynamicPool<CFlyTrace>::CDynamicPool<CFlyTrace>
PUBLIC	??1?$CDynamicPool@VCFlyTrace@@@@UAE@XZ		; CDynamicPool<CFlyTrace>::~CDynamicPool<CFlyTrace>
PUBLIC	?Destroy@?$CDynamicPool@VCFlyTrace@@@@QAEXXZ	; CDynamicPool<CFlyTrace>::Destroy
PUBLIC	?Alloc@?$CDynamicPool@VCFlyTrace@@@@QAEPAVCFlyTrace@@XZ ; CDynamicPool<CFlyTrace>::Alloc
PUBLIC	?Free@?$CDynamicPool@VCFlyTrace@@@@QAEXPAVCFlyTrace@@@Z ; CDynamicPool<CFlyTrace>::Free
PUBLIC	?Delete@?$CDynamicPool@VCFlyTrace@@@@KAXPAVCFlyTrace@@@Z ; CDynamicPool<CFlyTrace>::Delete
PUBLIC	??0?$allocator@PAVCFlyTrace@@@std@@QAE@XZ	; std::allocator<CFlyTrace *>::allocator<CFlyTrace *>
PUBLIC	?deallocate@?$allocator@PAVCFlyTrace@@@std@@QAEXPAPAVCFlyTrace@@I@Z ; std::allocator<CFlyTrace *>::deallocate
PUBLIC	?allocate@?$allocator@PAVCFlyTrace@@@std@@QAEPAPAVCFlyTrace@@I@Z ; std::allocator<CFlyTrace *>::allocate
PUBLIC	?construct@?$allocator@PAVCFlyTrace@@@std@@QAEXPAPAVCFlyTrace@@ABQAV3@@Z ; std::allocator<CFlyTrace *>::construct
PUBLIC	?max_size@?$allocator@PAVCFlyTrace@@@std@@QBEIXZ ; std::allocator<CFlyTrace *>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@PAVCFlyTrace@@@std@@@std@@SAIABV?$allocator@PAVCFlyTrace@@@2@@Z ; std::allocator_traits<std::allocator<CFlyTrace *> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<CFlyTrace *> >::_Wrap_alloc<std::allocator<CFlyTrace *> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEPAPAVCFlyTrace@@I@Z ; std::_Wrap_alloc<std::allocator<CFlyTrace *> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXPAPAVCFlyTrace@@I@Z ; std::_Wrap_alloc<std::allocator<CFlyTrace *> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<CFlyTrace *> >::max_size
PUBLIC	??0?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<CFlyTrace *> >::_Vector_val<std::_Simple_types<CFlyTrace *> >
PUBLIC	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCFlyTrace@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<CFlyTrace *,std::allocator<CFlyTrace *> > >::_Vector_alloc<0,std::_Vec_base_types<CFlyTrace *,std::allocator<CFlyTrace *> > >
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CFlyTrace *,std::allocator<CFlyTrace *> > >::_Getal
PUBLIC	??0?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAE@XZ ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::vector<CFlyTrace *,std::allocator<CFlyTrace *> >
PUBLIC	??1?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAE@XZ ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::~vector<CFlyTrace *,std::allocator<CFlyTrace *> >
PUBLIC	?capacity@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QBEIXZ ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::capacity
PUBLIC	?_Unused_capacity@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QBEIXZ ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Unused_capacity
PUBLIC	?begin@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@2@XZ ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::begin
PUBLIC	?end@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@2@XZ ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::end
PUBLIC	?size@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QBEIXZ ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::size
PUBLIC	?max_size@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QBEIXZ ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::max_size
PUBLIC	?empty@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QBE_NXZ ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::empty
PUBLIC	?back@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEAAPAVCFlyTrace@@XZ ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::back
PUBLIC	?push_back@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXABQAVCFlyTrace@@@Z ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::push_back
PUBLIC	?pop_back@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXXZ ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::pop_back
PUBLIC	?clear@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXXZ ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::clear
PUBLIC	?_Destroy@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IAEXPAPAVCFlyTrace@@0@Z ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Destroy
PUBLIC	?_Grow_to@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IBEII@Z ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Grow_to
PUBLIC	?_Inside@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IBE_NPBQAVCFlyTrace@@@Z ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Inside
PUBLIC	?_Reallocate@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IAEXI@Z ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Reallocate
PUBLIC	?_Reserve@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IAEXI@Z ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Reserve
PUBLIC	?_Tidy@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IAEXXZ ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Tidy
PUBLIC	?_Xlen@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IBEXXZ ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Xlen
PUBLIC	?_Orphan_range@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IBEXPAPAVCFlyTrace@@0@Z ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Orphan_range
PUBLIC	??_G?$CDynamicPool@VCFlyTrace@@@@UAEPAXI@Z	; CDynamicPool<CFlyTrace>::`scalar deleting destructor'
PUBLIC	??_GCFlyTrace@@UAEPAXI@Z			; CFlyTrace::`scalar deleting destructor'
PUBLIC	??$?0MABUD3DXVECTOR3@@X@?$pair@MUD3DXVECTOR3@@@std@@QAE@$$QAMABUD3DXVECTOR3@@@Z ; std::pair<float,D3DXVECTOR3>::pair<float,D3DXVECTOR3><float,D3DXVECTOR3 const &,void>
PUBLIC	??0TFlyVertex@@QAE@XZ				; TFlyVertex::TFlyVertex
PUBLIC	??0TFlyVertex@@QAE@ABUD3DXVECTOR3@@KABUD3DXVECTOR2@@@Z ; TFlyVertex::TFlyVertex
PUBLIC	??0TFlyVertexSet@@QAE@PAUTFlyVertex@@@Z		; TFlyVertexSet::TFlyVertexSet
PUBLIC	??MTFlyVertexSet@@QBE_NABU0@@Z			; TFlyVertexSet::operator<
PUBLIC	??4TFlyVertexSet@@QAEAAU0@ABU0@@Z		; TFlyVertexSet::operator=
PUBLIC	??0?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@QAE@XZ ; std::allocator<std::pair<float,TFlyVertexSet> >::allocator<std::pair<float,TFlyVertexSet> >
PUBLIC	?deallocate@?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@QAEXPAU?$pair@MUTFlyVertexSet@@@2@I@Z ; std::allocator<std::pair<float,TFlyVertexSet> >::deallocate
PUBLIC	?allocate@?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@QAEPAU?$pair@MUTFlyVertexSet@@@2@I@Z ; std::allocator<std::pair<float,TFlyVertexSet> >::allocate
PUBLIC	?max_size@?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@QBEIXZ ; std::allocator<std::pair<float,TFlyVertexSet> >::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@SAIABV?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@Z ; std::allocator_traits<std::allocator<std::pair<float,TFlyVertexSet> > >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::pair<float,TFlyVertexSet> > >::_Wrap_alloc<std::allocator<std::pair<float,TFlyVertexSet> > >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@QAEPAU?$pair@MUTFlyVertexSet@@@2@I@Z ; std::_Wrap_alloc<std::allocator<std::pair<float,TFlyVertexSet> > >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@QAEXPAU?$pair@MUTFlyVertexSet@@@2@I@Z ; std::_Wrap_alloc<std::allocator<std::pair<float,TFlyVertexSet> > >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<std::pair<float,TFlyVertexSet> > >::max_size
PUBLIC	??0?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > >::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > >
PUBLIC	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > > >::_Vector_alloc<0,std::_Vec_base_types<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > > >
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > > >::_Getal
PUBLIC	??0?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >
PUBLIC	?push_back@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAEX$$QAU?$pair@MUTFlyVertexSet@@@2@@Z ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::push_back
PUBLIC	??1?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::~vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >
PUBLIC	?capacity@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::capacity
PUBLIC	?_Unused_capacity@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Unused_capacity
PUBLIC	?begin@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@2@XZ ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::begin
PUBLIC	?end@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@2@XZ ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::end
PUBLIC	?size@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::size
PUBLIC	?max_size@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::max_size
PUBLIC	?_Destroy@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IAEXPAU?$pair@MUTFlyVertexSet@@@2@0@Z ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Destroy
PUBLIC	?_Grow_to@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IBEII@Z ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Grow_to
PUBLIC	?_Inside@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IBE_NPBU?$pair@MUTFlyVertexSet@@@2@@Z ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Inside
PUBLIC	?_Reallocate@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IAEXI@Z ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Reallocate
PUBLIC	?_Reserve@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IAEXI@Z ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Reserve
PUBLIC	?_Tidy@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IAEXXZ ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Tidy
PUBLIC	?_Xlen@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IBEXXZ ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Xlen
PUBLIC	?_Orphan_range@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IBEXPAU?$pair@MUTFlyVertexSet@@@2@0@Z ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Orphan_range
PUBLIC	??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >
PUBLIC	??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >
PUBLIC	??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBEABU?$pair@MUD3DXVECTOR3@@@1@XZ ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator*
PUBLIC	??E?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator++
PUBLIC	??8?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator==
PUBLIC	??9?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator!=
PUBLIC	?_Compat@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::_Compat
PUBLIC	?_Setcont@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAEXPBV?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@2@@Z ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::_Setcont
PUBLIC	??1?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::~_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >
PUBLIC	??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >
PUBLIC	??4?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator=
PUBLIC	??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >
PUBLIC	??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >
PUBLIC	??D?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBEAAU?$pair@MUD3DXVECTOR3@@@1@XZ ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator*
PUBLIC	??C?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBEPAU?$pair@MUD3DXVECTOR3@@@1@XZ ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator->
PUBLIC	??E?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator++
PUBLIC	??Y?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator+=
PUBLIC	??Z?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator-=
PUBLIC	??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator-
PUBLIC	??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::~_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >
PUBLIC	??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >
PUBLIC	??4?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator=
PUBLIC	??$make_pair@MUTFlyVertexSet@@@std@@YA?AU?$pair@MUTFlyVertexSet@@@0@$$QAM$$QAUTFlyVertexSet@@@Z ; std::make_pair<float,TFlyVertexSet>
PUBLIC	??4?$pair@MUTFlyVertexSet@@@std@@QAEAAU01@$$QAU01@@Z ; std::pair<float,TFlyVertexSet>::operator=
PUBLIC	?swap@?$pair@MUTFlyVertexSet@@@std@@QAEXAAU12@@Z ; std::pair<float,TFlyVertexSet>::swap
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QAE@PAU?$pair@MUTFlyVertexSet@@@1@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QBEABU?$pair@MUTFlyVertexSet@@@1@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >::operator*
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >::operator++
PUBLIC	??G?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >::operator-
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >::operator==
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >::operator!=
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >::_Compat
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QAE@PAU?$pair@MUTFlyVertexSet@@@1@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >
PUBLIC	?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QBEPAU?$pair@MUTFlyVertexSet@@@2@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >::_Unchecked
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QBEAAU?$pair@MUTFlyVertexSet@@@1@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >::operator*
PUBLIC	??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QBEPAU?$pair@MUTFlyVertexSet@@@1@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >::operator->
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >::operator++
PUBLIC	??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >::operator-
PUBLIC	??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@0@0@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > > >
PUBLIC	??$forward@U?$pair@MUD3DXVECTOR3@@@std@@@std@@YA$$QAU?$pair@MUD3DXVECTOR3@@@0@AAU10@@Z ; std::forward<std::pair<float,D3DXVECTOR3> >
PUBLIC	??$construct@U?$pair@MUD3DXVECTOR3@@@std@@U12@@?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAEXPAU?$pair@MUD3DXVECTOR3@@@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> > >::construct<std::pair<float,D3DXVECTOR3>,std::pair<float,D3DXVECTOR3> >
PUBLIC	??$destroy@U?$pair@MUD3DXVECTOR3@@@std@@@?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAEXPAU?$pair@MUD3DXVECTOR3@@@1@@Z ; std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> > >::destroy<std::pair<float,D3DXVECTOR3> >
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@QAE@PAPAVCFlyTrace@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@QBEABQAVCFlyTrace@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >::operator*
PUBLIC	??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >::operator+=
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@QAE@PAPAVCFlyTrace@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >
PUBLIC	?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@QBEPAPAVCFlyTrace@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >::_Unchecked
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@QBEAAPAVCFlyTrace@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >::operator*
PUBLIC	??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >::operator+=
PUBLIC	??Z?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >::operator-=
PUBLIC	??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >::operator-
PUBLIC	??$for_each@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@P6AXPAVCFlyTrace@@@Z@std@@YAP6AXPAVCFlyTrace@@@ZV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@0@1P6AX0@Z@Z ; std::for_each<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >,void (__cdecl*)(CFlyTrace *)>
PUBLIC	??$addressof@U?$pair@MUTFlyVertexSet@@@std@@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@AAU10@@Z ; std::addressof<std::pair<float,TFlyVertexSet> >
PUBLIC	??$forward@U?$pair@MUTFlyVertexSet@@@std@@@std@@YA$$QAU?$pair@MUTFlyVertexSet@@@0@AAU10@@Z ; std::forward<std::pair<float,TFlyVertexSet> >
PUBLIC	??$construct@U?$pair@MUTFlyVertexSet@@@std@@U12@@?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@QAEXPAU?$pair@MUTFlyVertexSet@@@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::pair<float,TFlyVertexSet> > >::construct<std::pair<float,TFlyVertexSet>,std::pair<float,TFlyVertexSet> >
PUBLIC	?pointer_to@?$pointer_traits@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@SAPAU?$pair@MUD3DXVECTOR3@@@2@AAU32@@Z ; std::pointer_traits<std::pair<float,D3DXVECTOR3> *>::pointer_to
PUBLIC	?pointer_to@?$pointer_traits@PAU?$pair@MUTFlyVertexSet@@@std@@@std@@SAPAU?$pair@MUTFlyVertexSet@@@2@AAU32@@Z ; std::pointer_traits<std::pair<float,TFlyVertexSet> *>::pointer_to
PUBLIC	??$?0U?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@1@@Z ; std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> *> >::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> *> ><std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> > > >
PUBLIC	??$?0U?$pair@MUD3DXVECTOR3@@@std@@@?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@QAE@ABV?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@1@@Z ; std::allocator<std::pair<float,D3DXVECTOR3> *>::allocator<std::pair<float,D3DXVECTOR3> *><std::pair<float,D3DXVECTOR3> >
PUBLIC	??$_Uninitialized_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@U?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@2@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@00AAU?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@0@@Z ; std::_Uninitialized_copy<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *,std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> *> > >
PUBLIC	??$_Uninitialized_default_fill_n@PAPAU?$pair@MUD3DXVECTOR3@@@std@@IU?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@2@@std@@YAXPAPAU?$pair@MUD3DXVECTOR3@@@0@IAAU?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@0@@Z ; std::_Uninitialized_default_fill_n<std::pair<float,D3DXVECTOR3> * *,unsigned int,std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> *> > >
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@YAXPAPAU?$pair@MUD3DXVECTOR3@@@0@0AAU?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> *> > >
PUBLIC	??$destroy@PAU?$pair@MUD3DXVECTOR3@@@std@@@?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAEXPAPAU?$pair@MUD3DXVECTOR3@@@1@@Z ; std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> > >::destroy<std::pair<float,D3DXVECTOR3> *>
PUBLIC	??$addressof@QAVCFlyTrace@@@std@@YAPBQAVCFlyTrace@@ABQAV1@@Z ; std::addressof<CFlyTrace * const>
PUBLIC	??$construct@PAVCFlyTrace@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXPAPAVCFlyTrace@@AAPAV2@@Z ; std::_Wrap_alloc<std::allocator<CFlyTrace *> >::construct<CFlyTrace *,CFlyTrace * &>
PUBLIC	??$construct@PAVCFlyTrace@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXPAPAVCFlyTrace@@ABQAV2@@Z ; std::_Wrap_alloc<std::allocator<CFlyTrace *> >::construct<CFlyTrace *,CFlyTrace * const &>
PUBLIC	??$destroy@PAVCFlyTrace@@@?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXPAPAVCFlyTrace@@@Z ; std::_Wrap_alloc<std::allocator<CFlyTrace *> >::destroy<CFlyTrace *>
PUBLIC	??$addressof@U?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAU?$pair@MUD3DXVECTOR3@@@0@AAU10@@Z ; std::addressof<std::pair<float,D3DXVECTOR3> >
PUBLIC	??$_Allocate@U?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAU?$pair@MUD3DXVECTOR3@@@0@IPAU10@@Z ; std::_Allocate<std::pair<float,D3DXVECTOR3> >
PUBLIC	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
PUBLIC	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@@std@@YAXPAPAVCFlyTrace@@0AAU?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CFlyTrace *> > >
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0AAU?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::pair<float,TFlyVertexSet> > > >
PUBLIC	??$_Umove@PAU?$pair@MUTFlyVertexSet@@@std@@@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IAEPAU?$pair@MUTFlyVertexSet@@@1@PAU21@00@Z ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Umove<std::pair<float,TFlyVertexSet> *>
PUBLIC	??$_Allocate@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@IPAPAU10@@Z ; std::_Allocate<std::pair<float,D3DXVECTOR3> *>
PUBLIC	??$_Umove@PAPAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IAEPAPAVCFlyTrace@@PAPAV2@00@Z ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Umove<CFlyTrace * *>
PUBLIC	??$_Allocate@U?$pair@MUTFlyVertexSet@@@std@@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@IPAU10@@Z ; std::_Allocate<std::pair<float,TFlyVertexSet> >
PUBLIC	??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>
PUBLIC	??$_Allocate@PAVCFlyTrace@@@std@@YAPAPAVCFlyTrace@@IPAPAV1@@Z ; std::_Allocate<CFlyTrace *>
PUBLIC	??$forward@M@std@@YA$$QAMAAM@Z			; std::forward<float>
PUBLIC	??$forward@ABUD3DXVECTOR3@@@std@@YAABUD3DXVECTOR3@@ABU1@@Z ; std::forward<D3DXVECTOR3 const &>
PUBLIC	??$forward@UTFlyVertexSet@@@std@@YA$$QAUTFlyVertexSet@@AAU1@@Z ; std::forward<TFlyVertexSet>
PUBLIC	??$?0MUTFlyVertexSet@@X@?$pair@MUTFlyVertexSet@@@std@@QAE@$$QAM$$QAUTFlyVertexSet@@@Z ; std::pair<float,TFlyVertexSet>::pair<float,TFlyVertexSet><float,TFlyVertexSet,void>
PUBLIC	??$?0MUTFlyVertexSet@@X@?$pair@MUTFlyVertexSet@@@std@@QAE@$$QAU01@@Z ; std::pair<float,TFlyVertexSet>::pair<float,TFlyVertexSet><float,TFlyVertexSet,void>
PUBLIC	??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@0@0U?$less@X@0@@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >,std::less<void> >
PUBLIC	??$construct@U?$pair@MUD3DXVECTOR3@@@std@@U12@@?$allocator_traits@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@1@PAU?$pair@MUD3DXVECTOR3@@@1@$$QAU31@@Z ; std::allocator_traits<std::allocator<std::pair<float,D3DXVECTOR3> > >::construct<std::pair<float,D3DXVECTOR3>,std::pair<float,D3DXVECTOR3> >
PUBLIC	??$destroy@U?$pair@MUD3DXVECTOR3@@@std@@@?$allocator_traits@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@1@PAU?$pair@MUD3DXVECTOR3@@@1@@Z ; std::allocator_traits<std::allocator<std::pair<float,D3DXVECTOR3> > >::destroy<std::pair<float,D3DXVECTOR3> >
PUBLIC	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@YAPAPAVCFlyTrace@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >
PUBLIC	??$_For_each@PAPAVCFlyTrace@@P6AXPAV1@@Z@std@@YAXPAPAVCFlyTrace@@0AAP6AXPAV1@@Z@Z ; std::_For_each<CFlyTrace * *,void (__cdecl*)(CFlyTrace *)>
PUBLIC	??$move@AAP6AXPAVCFlyTrace@@@Z@std@@YA$$QAP6AXPAVCFlyTrace@@@ZAAP6AX0@Z@Z ; std::move<void (__cdecl*&)(CFlyTrace *)>
PUBLIC	??$construct@U?$pair@MUTFlyVertexSet@@@std@@U12@@?$allocator_traits@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@1@PAU?$pair@MUTFlyVertexSet@@@1@$$QAU31@@Z ; std::allocator_traits<std::allocator<std::pair<float,TFlyVertexSet> > >::construct<std::pair<float,TFlyVertexSet>,std::pair<float,TFlyVertexSet> >
PUBLIC	??$_Unchecked@PAPAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@@Z ; std::_Unchecked<std::pair<float,D3DXVECTOR3> * *>
PUBLIC	??$_Uninit_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@U?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@2@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@00AAU?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@0@@Z ; std::_Uninit_copy<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *,std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> *> > >
PUBLIC	??$_Rechecked@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAAAPAPAU?$pair@MUD3DXVECTOR3@@@0@AAPAPAU10@PAPAU10@@Z ; std::_Rechecked<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>
PUBLIC	??$_Val_type@PAPAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@@Z ; std::_Val_type<std::pair<float,D3DXVECTOR3> * *>
PUBLIC	??$_Ptr_cat@PAU?$pair@MUD3DXVECTOR3@@@std@@PAU12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAU?$pair@MUD3DXVECTOR3@@@0@0@Z ; std::_Ptr_cat<std::pair<float,D3DXVECTOR3> *,std::pair<float,D3DXVECTOR3> *>
PUBLIC	??$_Uninit_def_fill_n@PAU?$pair@MUD3DXVECTOR3@@@std@@IPAU12@@std@@YAXPAPAU?$pair@MUD3DXVECTOR3@@@0@IAAU?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_def_fill_n<std::pair<float,D3DXVECTOR3> *,unsigned int,std::pair<float,D3DXVECTOR3> *>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@YAXPAPAU?$pair@MUD3DXVECTOR3@@@0@0AAU?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> *> > >
PUBLIC	??$destroy@PAU?$pair@MUD3DXVECTOR3@@@std@@@?$allocator_traits@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@1@PAPAU?$pair@MUD3DXVECTOR3@@@1@@Z ; std::allocator_traits<std::allocator<std::pair<float,D3DXVECTOR3> > >::destroy<std::pair<float,D3DXVECTOR3> *>
PUBLIC	??$forward@AAPAVCFlyTrace@@@std@@YAAAPAVCFlyTrace@@AAPAV1@@Z ; std::forward<CFlyTrace * &>
PUBLIC	??$construct@PAVCFlyTrace@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCFlyTrace@@@std@@@std@@SAXAAV?$allocator@PAVCFlyTrace@@@1@PAPAVCFlyTrace@@AAPAV3@@Z ; std::allocator_traits<std::allocator<CFlyTrace *> >::construct<CFlyTrace *,CFlyTrace * &>
PUBLIC	??$forward@ABQAVCFlyTrace@@@std@@YAABQAVCFlyTrace@@ABQAV1@@Z ; std::forward<CFlyTrace * const &>
PUBLIC	??$construct@PAVCFlyTrace@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCFlyTrace@@@std@@@std@@SAXAAV?$allocator@PAVCFlyTrace@@@1@PAPAVCFlyTrace@@ABQAV3@@Z ; std::allocator_traits<std::allocator<CFlyTrace *> >::construct<CFlyTrace *,CFlyTrace * const &>
PUBLIC	??$destroy@PAVCFlyTrace@@@?$allocator_traits@V?$allocator@PAVCFlyTrace@@@std@@@std@@SAXAAV?$allocator@PAVCFlyTrace@@@1@PAPAVCFlyTrace@@@Z ; std::allocator_traits<std::allocator<CFlyTrace *> >::destroy<CFlyTrace *>
PUBLIC	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
PUBLIC	??$_Ptr_cat@PAVCFlyTrace@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCFlyTrace@@0@Z ; std::_Ptr_cat<CFlyTrace *,CFlyTrace *>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@@std@@YAXPAPAVCFlyTrace@@0AAU?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CFlyTrace *> > >
PUBLIC	??$_Ptr_cat@U?$pair@MUTFlyVertexSet@@@std@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU?$pair@MUTFlyVertexSet@@@0@0@Z ; std::_Ptr_cat<std::pair<float,TFlyVertexSet>,std::pair<float,TFlyVertexSet> >
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0AAU?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::pair<float,TFlyVertexSet> > > >
PUBLIC	??$_Uninitialized_move@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@U?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@2@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@0@@Z ; std::_Uninitialized_move<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *,std::_Wrap_alloc<std::allocator<std::pair<float,TFlyVertexSet> > > >
PUBLIC	??$_Uninitialized_move@PAPAVCFlyTrace@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@@std@@YAPAPAVCFlyTrace@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@0@@Z ; std::_Uninitialized_move<CFlyTrace * *,CFlyTrace * *,std::_Wrap_alloc<std::allocator<CFlyTrace *> > >
PUBLIC	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >
PUBLIC	??$_Sort@PAU?$pair@MUTFlyVertexSet@@@std@@HU?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0HU?$less@X@0@@Z ; std::_Sort<std::pair<float,TFlyVertexSet> *,int,std::less<void> >
PUBLIC	??$construct@U?$pair@MUD3DXVECTOR3@@@std@@U12@@?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@QAEXPAU?$pair@MUD3DXVECTOR3@@@1@$$QAU21@@Z ; std::allocator<std::pair<float,D3DXVECTOR3> >::construct<std::pair<float,D3DXVECTOR3>,std::pair<float,D3DXVECTOR3> >
PUBLIC	??$destroy@U?$pair@MUD3DXVECTOR3@@@std@@@?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@QAEXPAU?$pair@MUD3DXVECTOR3@@@1@@Z ; std::allocator<std::pair<float,D3DXVECTOR3> >::destroy<std::pair<float,D3DXVECTOR3> >
PUBLIC	??$construct@U?$pair@MUTFlyVertexSet@@@std@@U12@@?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@QAEXPAU?$pair@MUTFlyVertexSet@@@1@$$QAU21@@Z ; std::allocator<std::pair<float,TFlyVertexSet> >::construct<std::pair<float,TFlyVertexSet>,std::pair<float,TFlyVertexSet> >
PUBLIC	??$_Uninit_copy@PAU?$pair@MUD3DXVECTOR3@@@std@@PAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@00AAU?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::pair<float,D3DXVECTOR3> *,std::pair<float,D3DXVECTOR3> *>
PUBLIC	??$_Fill_n@PAPAU?$pair@MUD3DXVECTOR3@@@std@@IPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@IABQAU10@@Z ; std::_Fill_n<std::pair<float,D3DXVECTOR3> * *,unsigned int,std::pair<float,D3DXVECTOR3> *>
PUBLIC	??$destroy@PAU?$pair@MUD3DXVECTOR3@@@std@@@?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@QAEXPAPAU?$pair@MUD3DXVECTOR3@@@1@@Z ; std::allocator<std::pair<float,D3DXVECTOR3> >::destroy<std::pair<float,D3DXVECTOR3> *>
PUBLIC	??$construct@PAVCFlyTrace@@AAPAV1@@?$allocator@PAVCFlyTrace@@@std@@QAEXPAPAVCFlyTrace@@AAPAV2@@Z ; std::allocator<CFlyTrace *>::construct<CFlyTrace *,CFlyTrace * &>
PUBLIC	??$destroy@PAVCFlyTrace@@@?$allocator@PAVCFlyTrace@@@std@@QAEXPAPAVCFlyTrace@@@Z ; std::allocator<CFlyTrace *>::destroy<CFlyTrace *>
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
PUBLIC	??$destroy@U?$pair@MUTFlyVertexSet@@@std@@@?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@QAEXPAU?$pair@MUTFlyVertexSet@@@1@@Z ; std::_Wrap_alloc<std::allocator<std::pair<float,TFlyVertexSet> > >::destroy<std::pair<float,TFlyVertexSet> >
PUBLIC	??$_Unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@@Z ; std::_Unchecked<std::pair<float,TFlyVertexSet> *>
PUBLIC	??$_Uninit_move@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@U?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@2@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@0@@Z ; std::_Uninit_move<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *,std::_Wrap_alloc<std::allocator<std::pair<float,TFlyVertexSet> > > >
PUBLIC	??$_Rechecked@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@std@@YAAAPAU?$pair@MUTFlyVertexSet@@@0@AAPAU10@PAU10@@Z ; std::_Rechecked<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *>
PUBLIC	??$_Unchecked@PAPAVCFlyTrace@@@std@@YAPAPAVCFlyTrace@@PAPAV1@@Z ; std::_Unchecked<CFlyTrace * *>
PUBLIC	??$_Uninit_move@PAPAVCFlyTrace@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@@std@@YAPAPAVCFlyTrace@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@0@@Z ; std::_Uninit_move<CFlyTrace * *,CFlyTrace * *,std::_Wrap_alloc<std::allocator<CFlyTrace *> > >
PUBLIC	??$_Rechecked@PAPAVCFlyTrace@@PAPAV1@@std@@YAAAPAPAVCFlyTrace@@AAPAPAV1@PAPAV1@@Z ; std::_Rechecked<CFlyTrace * *,CFlyTrace * *>
PUBLIC	??$_Unguarded_partition@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YA?AU?$pair@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@0@PAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z ; std::_Unguarded_partition<std::pair<float,TFlyVertexSet> *,std::less<void> >
PUBLIC	??$make_heap@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z ; std::make_heap<std::pair<float,TFlyVertexSet> *,std::less<void> >
PUBLIC	??$sort_heap@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z ; std::sort_heap<std::pair<float,TFlyVertexSet> *,std::less<void> >
PUBLIC	??$_Insertion_sort@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z ; std::_Insertion_sort<std::pair<float,TFlyVertexSet> *,std::less<void> >
PUBLIC	??$?0MUD3DXVECTOR3@@X@?$pair@MUD3DXVECTOR3@@@std@@QAE@$$QAU01@@Z ; std::pair<float,D3DXVECTOR3>::pair<float,D3DXVECTOR3><float,D3DXVECTOR3,void>
PUBLIC	??$destroy@U?$pair@MUTFlyVertexSet@@@std@@@?$allocator_traits@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@1@PAU?$pair@MUTFlyVertexSet@@@1@@Z ; std::allocator_traits<std::allocator<std::pair<float,TFlyVertexSet> > >::destroy<std::pair<float,TFlyVertexSet> >
PUBLIC	??$_Val_type@PAU?$pair@MUTFlyVertexSet@@@std@@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@@Z ; std::_Val_type<std::pair<float,TFlyVertexSet> *>
PUBLIC	??$_Uninit_move@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@U12@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *,std::allocator<std::pair<float,TFlyVertexSet> >,std::pair<float,TFlyVertexSet> >
PUBLIC	??$_Val_type@PAPAVCFlyTrace@@@std@@YAPAPAVCFlyTrace@@PAPAV1@@Z ; std::_Val_type<CFlyTrace * *>
PUBLIC	??$_Uninit_move@PAVCFlyTrace@@PAV1@PAV1@@std@@YAPAPAVCFlyTrace@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CFlyTrace *,CFlyTrace *,CFlyTrace *>
PUBLIC	??$_Median@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z ; std::_Median<std::pair<float,TFlyVertexSet> *,std::less<void> >
PUBLIC	??$?MMUTFlyVertexSet@@@std@@YA_NABU?$pair@MUTFlyVertexSet@@@0@0@Z ; std::operator<<float,TFlyVertexSet>
PUBLIC	??$?RAAU?$pair@MUTFlyVertexSet@@@std@@AAU01@@?$less@X@std@@QBE_NAAU?$pair@MUTFlyVertexSet@@@1@0@Z ; std::less<void>::operator()<std::pair<float,TFlyVertexSet> &,std::pair<float,TFlyVertexSet> &>
PUBLIC	??$iter_swap@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0@Z ; std::iter_swap<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *>
PUBLIC	??$?0AAPAU?$pair@MUTFlyVertexSet@@@std@@AAPAU01@X@?$pair@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@std@@QAE@AAPAU?$pair@MUTFlyVertexSet@@@1@0@Z ; std::pair<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *>::pair<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *><std::pair<float,TFlyVertexSet> * &,std::pair<float,TFlyVertexSet> * &,void>
PUBLIC	??$_Dist_type@PAU?$pair@MUTFlyVertexSet@@@std@@@std@@YAPAHPAU?$pair@MUTFlyVertexSet@@@0@@Z ; std::_Dist_type<std::pair<float,TFlyVertexSet> *>
PUBLIC	??$_Make_heap@PAU?$pair@MUTFlyVertexSet@@@std@@HU12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@PAH0@Z ; std::_Make_heap<std::pair<float,TFlyVertexSet> *,int,std::pair<float,TFlyVertexSet>,std::less<void> >
PUBLIC	??$_Sort_heap@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z ; std::_Sort_heap<std::pair<float,TFlyVertexSet> *,std::less<void> >
PUBLIC	??$_Insertion_sort1@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@U12@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@0@Z ; std::_Insertion_sort1<std::pair<float,TFlyVertexSet> *,std::less<void>,std::pair<float,TFlyVertexSet> >
PUBLIC	??$forward@UD3DXVECTOR3@@@std@@YA$$QAUD3DXVECTOR3@@AAU1@@Z ; std::forward<D3DXVECTOR3>
PUBLIC	??$destroy@U?$pair@MUTFlyVertexSet@@@std@@@?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@QAEXPAU?$pair@MUTFlyVertexSet@@@1@@Z ; std::allocator<std::pair<float,TFlyVertexSet> >::destroy<std::pair<float,TFlyVertexSet> >
PUBLIC	??$_Med3@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z ; std::_Med3<std::pair<float,TFlyVertexSet> *,std::less<void> >
PUBLIC	??$swap@MUTFlyVertexSet@@@std@@YAXAAU?$pair@MUTFlyVertexSet@@@0@0@Z ; std::swap<float,TFlyVertexSet>
PUBLIC	??$forward@AAPAU?$pair@MUTFlyVertexSet@@@std@@@std@@YAAAPAU?$pair@MUTFlyVertexSet@@@0@AAPAU10@@Z ; std::forward<std::pair<float,TFlyVertexSet> * &>
PUBLIC	??$_Move@AAU?$pair@MUTFlyVertexSet@@@std@@@std@@YA$$QAU?$pair@MUTFlyVertexSet@@@0@AAU10@@Z ; std::_Move<std::pair<float,TFlyVertexSet> &>
PUBLIC	??$_Adjust_heap@PAU?$pair@MUTFlyVertexSet@@@std@@HU12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@HH$$QAU10@U?$less@X@0@@Z ; std::_Adjust_heap<std::pair<float,TFlyVertexSet> *,int,std::pair<float,TFlyVertexSet>,std::less<void> >
PUBLIC	??$_Pop_heap@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z ; std::_Pop_heap<std::pair<float,TFlyVertexSet> *,std::less<void> >
PUBLIC	??$_Move_backward@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@00@Z ; std::_Move_backward<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *>
PUBLIC	??$_Push_heap@PAU?$pair@MUTFlyVertexSet@@@std@@HU12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@HH$$QAU10@U?$less@X@0@@Z ; std::_Push_heap<std::pair<float,TFlyVertexSet> *,int,std::pair<float,TFlyVertexSet>,std::less<void> >
PUBLIC	??$_Pop_heap_0@PAU?$pair@MUTFlyVertexSet@@@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@0@Z ; std::_Pop_heap_0<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet>,std::less<void> >
PUBLIC	??$_Move_backward@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move_backward<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *>
PUBLIC	??$_Swap_adl@M@std@@YAXAAM0@Z			; std::_Swap_adl<float>
PUBLIC	??$_Swap_adl@UTFlyVertexSet@@@std@@YAXAAUTFlyVertexSet@@0@Z ; std::_Swap_adl<TFlyVertexSet>
PUBLIC	??$_Pop_heap@PAU?$pair@MUTFlyVertexSet@@@std@@HU12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00$$QAU10@U?$less@X@0@PAH@Z ; std::_Pop_heap<std::pair<float,TFlyVertexSet> *,int,std::pair<float,TFlyVertexSet>,std::less<void> >
PUBLIC	??$move@AAU?$pair@MUTFlyVertexSet@@@std@@@std@@YA$$QAU?$pair@MUTFlyVertexSet@@@0@AAU10@@Z ; std::move<std::pair<float,TFlyVertexSet> &>
PUBLIC	??$swap@M@std@@YAXAAM0@Z			; std::swap<float>
PUBLIC	??$swap@UTFlyVertexSet@@@std@@YAXAAUTFlyVertexSet@@0@Z ; std::swap<TFlyVertexSet>
PUBLIC	??$_Move@AAM@std@@YA$$QAMAAM@Z			; std::_Move<float &>
PUBLIC	??$_Move@AAUTFlyVertexSet@@@std@@YA$$QAUTFlyVertexSet@@AAU1@@Z ; std::_Move<TFlyVertexSet &>
PUBLIC	?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
PUBLIC	??_7?$CDynamicPool@VCFlyTrace@@@@6B@		; CDynamicPool<CFlyTrace>::`vftable'
PUBLIC	?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A ; CFlyTrace::ms_kPool
PUBLIC	??_7CFlyTrace@@6B@				; CFlyTrace::`vftable'
PUBLIC	??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_R4CFlyTrace@@6B@				; CFlyTrace::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCFlyTrace@@@8				; CFlyTrace `RTTI Type Descriptor'
PUBLIC	??_R3CFlyTrace@@8				; CFlyTrace::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CFlyTrace@@8				; CFlyTrace::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CFlyTrace@@8			; CFlyTrace::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CScreen@@8			; CScreen::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCScreen@@@8				; CScreen `RTTI Type Descriptor'
PUBLIC	??_R3CScreen@@8					; CScreen::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CScreen@@8					; CScreen::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicCollisionObject@@8	; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicCollisionObject@@@8		; CGraphicCollisionObject `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicBase@@@8			; CGraphicBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicBase@@8				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicBase@@8				; CGraphicBase::`RTTI Base Class Array'
PUBLIC	??_R4?$CDynamicPool@VCFlyTrace@@@@6B@		; CDynamicPool<CFlyTrace>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCFlyTrace@@@@@8		; CDynamicPool<CFlyTrace> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCFlyTrace@@@@8		; CDynamicPool<CFlyTrace>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCFlyTrace@@@@8		; CDynamicPool<CFlyTrace>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCFlyTrace@@@@8	; CDynamicPool<CFlyTrace>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__xmm@7fffffffffffffff7fffffffffffffff
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_memmove:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	_D3DXVec3Normalize@8:PROC
EXTRN	_D3DXVec3TransformNormal@12:PROC
EXTRN	?GetCurrentSecond@CTimer@@QAEMXZ:PROC		; CTimer::GetCurrentSecond
EXTRN	?UpdateViewMatrix@CGraphicBase@@QAEXXZ:PROC	; CGraphicBase::UpdateViewMatrix
EXTRN	?ViewVolumeTest@Frustum@@QBE?AW4ViewState@@ABVVector3d@@M@Z:PROC ; Frustum::ViewVolumeTest
EXTRN	??0CScreen@@QAE@XZ:PROC				; CScreen::CScreen
EXTRN	??1CScreen@@UAE@XZ:PROC				; CScreen::~CScreen
EXTRN	?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SaveRenderState
EXTRN	?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z:PROC ; CStateManager::RestoreRenderState
EXTRN	?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SetRenderState
EXTRN	?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z:PROC ; CStateManager::SetTexture
EXTRN	?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z:PROC ; CStateManager::SetTextureStageState
EXTRN	?SaveVertexShader@CStateManager@@QAEXK@Z:PROC	; CStateManager::SaveVertexShader
EXTRN	?RestoreVertexShader@CStateManager@@QAEXXZ:PROC	; CStateManager::RestoreVertexShader
EXTRN	?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z:PROC ; CStateManager::SaveTransform
EXTRN	?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z:PROC ; CStateManager::RestoreTransform
EXTRN	?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z:PROC ; CStateManager::DrawPrimitiveUP
EXTRN	?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ:PROC ; CCameraManager::GetCurrentCamera
EXTRN	??_E?$CDynamicPool@VCFlyTrace@@@@UAEPAXI@Z:PROC	; CDynamicPool<CFlyTrace>::`vector deleting destructor'
EXTRN	??_ECFlyTrace@@UAEPAXI@Z:PROC			; CFlyTrace::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ms_frustum@CScreen@@1VFrustum@@A:BYTE		; CScreen::ms_frustum
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A DD 01H DUP (?) ; CSingleton<CTimer>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A DD 01H DUP (?) ; CSingleton<CCameraManager>::ms_singleton
_BSS	ENDS
CRT$XCU	SEGMENT
?ms_kPool$initializer$@CFlyTrace@@2P6AXXZA DD FLAT:??__E?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A@@YAXXZ ; CFlyTrace::ms_kPool$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@7fffffffffffffff7fffffffffffffff
CONST	SEGMENT
__xmm@7fffffffffffffff7fffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCFlyTrace@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCFlyTrace@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCFlyTrace@@@@@8 ; CDynamicPool<CFlyTrace>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCFlyTrace@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCFlyTrace@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCFlyTrace@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCFlyTrace@@@@8 ; CDynamicPool<CFlyTrace>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCFlyTrace@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCFlyTrace@@@@8 DD 00H		; CDynamicPool<CFlyTrace>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCFlyTrace@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCFlyTrace@@@@@8
data$r	SEGMENT
??_R0?AV?$CDynamicPool@VCFlyTrace@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CFlyTrace> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCFlyTrace@@@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCFlyTrace@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCFlyTrace@@@@6B@ DD 00H		; CDynamicPool<CFlyTrace>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCFlyTrace@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCFlyTrace@@@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicBase@@8
rdata$r	SEGMENT
??_R2CGraphicBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphicBase@@8 ; CGraphicBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicBase@@8
rdata$r	SEGMENT
??_R3CGraphicBase@@8 DD 00H				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicBase@@@8
data$r	SEGMENT
??_R0?AVCGraphicBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicBase@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R2CGraphicCollisionObject@@8 DD FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8 ; CGraphicCollisionObject::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R3CGraphicCollisionObject@@8 DD 00H			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicCollisionObject@@@8
data$r	SEGMENT
??_R0?AVCGraphicCollisionObject@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicCollisionObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicCollisionObject@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicCollisionObject@@8 DD FLAT:??_R0?AVCGraphicCollisionObject@@@8 ; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CScreen@@8
rdata$r	SEGMENT
??_R2CScreen@@8 DD FLAT:??_R1A@?0A@EA@CScreen@@8	; CScreen::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CScreen@@8
rdata$r	SEGMENT
??_R3CScreen@@8 DD 00H					; CScreen::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CScreen@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCScreen@@@8
data$r	SEGMENT
??_R0?AVCScreen@@@8 DD FLAT:??_7type_info@@6B@		; CScreen `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCScreen@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CScreen@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CScreen@@8 DD FLAT:??_R0?AVCScreen@@@8	; CScreen::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CScreen@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CFlyTrace@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CFlyTrace@@8 DD FLAT:??_R0?AVCFlyTrace@@@8 ; CFlyTrace::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CFlyTrace@@8
rdata$r	ENDS
;	COMDAT ??_R2CFlyTrace@@8
rdata$r	SEGMENT
??_R2CFlyTrace@@8 DD FLAT:??_R1A@?0A@EA@CFlyTrace@@8	; CFlyTrace::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CScreen@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CFlyTrace@@8
rdata$r	SEGMENT
??_R3CFlyTrace@@8 DD 00H				; CFlyTrace::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2CFlyTrace@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCFlyTrace@@@8
data$r	SEGMENT
??_R0?AVCFlyTrace@@@8 DD FLAT:??_7type_info@@6B@	; CFlyTrace `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCFlyTrace@@', 00H
data$r	ENDS
;	COMDAT ??_R4CFlyTrace@@6B@
rdata$r	SEGMENT
??_R4CFlyTrace@@6B@ DD 00H				; CFlyTrace::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCFlyTrace@@@8
	DD	FLAT:??_R3CFlyTrace@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@ DB 'deque<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CFlyTrace@@6B@
CONST	SEGMENT
??_7CFlyTrace@@6B@ DD FLAT:??_R4CFlyTrace@@6B@		; CFlyTrace::`vftable'
	DD	FLAT:??_ECFlyTrace@@UAEPAXI@Z
CONST	ENDS
_DATA	SEGMENT
?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A DD FLAT:??_7?$CDynamicPool@VCFlyTrace@@@@6B@ ; CFlyTrace::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ??_7?$CDynamicPool@VCFlyTrace@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCFlyTrace@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCFlyTrace@@@@6B@ ; CDynamicPool<CFlyTrace>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCFlyTrace@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IAEXI@Z$2
__ehfuncinfo$?_Reallocate@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Alloc@?$CDynamicPool@VCFlyTrace@@@@QAEPAVCFlyTrace@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Alloc@?$CDynamicPool@VCFlyTrace@@@@QAEPAVCFlyTrace@@XZ$0
__ehfuncinfo$?Alloc@?$CDynamicPool@VCFlyTrace@@@@QAEPAVCFlyTrace@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Alloc@?$CDynamicPool@VCFlyTrace@@@@QAEPAVCFlyTrace@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Render@CFlyTrace@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Render@CFlyTrace@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Render@CFlyTrace@@QAEXXZ$1
__ehfuncinfo$?Render@CFlyTrace@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Render@CFlyTrace@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CFlyTrace@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CFlyTrace@@QAE@XZ$0
__ehfuncinfo$??0CFlyTrace@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CFlyTrace@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\type_traits
;	COMDAT ??$_Move@AAUTFlyVertexSet@@@std@@YA$$QAUTFlyVertexSet@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAUTFlyVertexSet@@@std@@YA$$QAUTFlyVertexSet@@AAU1@@Z PROC ; std::_Move<TFlyVertexSet &>, COMDAT

; 1527 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1528 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1529 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Move@AAUTFlyVertexSet@@@std@@YA$$QAUTFlyVertexSet@@AAU1@@Z ENDP ; std::_Move<TFlyVertexSet &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\type_traits
;	COMDAT ??$_Move@AAM@std@@YA$$QAMAAM@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAM@std@@YA$$QAMAAM@Z PROC			; std::_Move<float &>, COMDAT

; 1527 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1528 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1529 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Move@AAM@std@@YA$$QAMAAM@Z ENDP			; std::_Move<float &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\utility
;	COMDAT ??$swap@UTFlyVertexSet@@@std@@YAXAAUTFlyVertexSet@@0@Z
_TEXT	SEGMENT
__Tmp$ = -144						; size = 144
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@UTFlyVertexSet@@@std@@YAXAAUTFlyVertexSet@@0@Z PROC ; std::swap<TFlyVertexSet>, COMDAT

; 51   : 	{	// exchange values stored at _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H

; 52   : 	_Ty _Tmp = _Move(_Left);

  00009	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR __Left$[ebp]
  00012	57		 push	 edi
  00013	8d bd 70 ff ff
	ff		 lea	 edi, DWORD PTR __Tmp$[ebp]
  00019	f3 a5		 rep movsd
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  0001b	8b 75 0c	 mov	 esi, DWORD PTR __Right$[ebp]
  0001e	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00023	8b 7d 08	 mov	 edi, DWORD PTR __Left$[ebp]
  00026	f3 a5		 rep movsd
  00028	8b 7d 0c	 mov	 edi, DWORD PTR __Right$[ebp]
  0002b	8d b5 70 ff ff
	ff		 lea	 esi, DWORD PTR __Tmp$[ebp]
  00031	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00036	f3 a5		 rep movsd
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
; File a:\vs\vc\include\utility

; 55   : 	}

  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
??$swap@UTFlyVertexSet@@@std@@YAXAAUTFlyVertexSet@@0@Z ENDP ; std::swap<TFlyVertexSet>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\utility
;	COMDAT ??$swap@M@std@@YAXAAM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@M@std@@YAXAAM0@Z PROC				; std::swap<float>, COMDAT

; 51   : 	{	// exchange values stored at _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 52   : 	_Ty _Tmp = _Move(_Left);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]

; 53   : 	_Left = _Move(_Right);

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax

; 54   : 	_Right = _Move(_Tmp);

  00011	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 55   : 	}

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??$swap@M@std@@YAXAAM0@Z ENDP				; std::swap<float>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\type_traits
;	COMDAT ??$move@AAU?$pair@MUTFlyVertexSet@@@std@@@std@@YA$$QAU?$pair@MUTFlyVertexSet@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAU?$pair@MUTFlyVertexSet@@@std@@@std@@YA$$QAU?$pair@MUTFlyVertexSet@@@0@AAU10@@Z PROC ; std::move<std::pair<float,TFlyVertexSet> &>, COMDAT

; 1519 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1520 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1521 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAU?$pair@MUTFlyVertexSet@@@std@@@std@@YA$$QAU?$pair@MUTFlyVertexSet@@@0@AAU10@@Z ENDP ; std::move<std::pair<float,TFlyVertexSet> &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
;	COMDAT ??$_Pop_heap@PAU?$pair@MUTFlyVertexSet@@@std@@HU12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00$$QAU10@U?$less@X@0@PAH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
___formal$ = 28						; size = 4
??$_Pop_heap@PAU?$pair@MUTFlyVertexSet@@@std@@HU12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00$$QAU10@U?$less@X@0@PAH@Z PROC ; std::_Pop_heap<std::pair<float,TFlyVertexSet> *,int,std::pair<float,TFlyVertexSet>,std::less<void> >, COMDAT

; 2394 : 	{	// pop *_First to *_Dest and reheap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File a:\vs\vc\include\utility

; 175  : 		first = _STD forward<_Ty1>(_Right.first);

  00003	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
; File a:\vs\vc\include\algorithm

; 2397 : 		_Move(_Val), _Pred);

  0000c	ff 75 18	 push	 DWORD PTR __Pred$[ebp]
; File a:\vs\vc\include\utility

; 175  : 		first = _STD forward<_Ty1>(_Right.first);

  0000f	8b 03		 mov	 eax, DWORD PTR [ebx]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00011	8d 79 04	 lea	 edi, DWORD PTR [ecx+4]
; File a:\vs\vc\include\algorithm

; 2397 : 		_Move(_Val), _Pred);

  00014	ff 75 14	 push	 DWORD PTR __Val$[ebp]
; File a:\vs\vc\include\utility

; 175  : 		first = _STD forward<_Ty1>(_Right.first);

  00017	89 01		 mov	 DWORD PTR [ecx], eax
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00019	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]
  0001c	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
; File a:\vs\vc\include\algorithm

; 2397 : 		_Move(_Val), _Pred);

  00021	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00026	f3 a5		 rep movsd
; File a:\vs\vc\include\algorithm

; 2397 : 		_Move(_Val), _Pred);

  00028	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0002b	2b cb		 sub	 ecx, ebx
  0002d	f7 e9		 imul	 ecx
  0002f	03 d1		 add	 edx, ecx
  00031	c1 fa 07	 sar	 edx, 7
  00034	8b c2		 mov	 eax, edx
  00036	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00039	03 c2		 add	 eax, edx
  0003b	50		 push	 eax
  0003c	6a 00		 push	 0
  0003e	53		 push	 ebx
  0003f	e8 00 00 00 00	 call	 ??$_Adjust_heap@PAU?$pair@MUTFlyVertexSet@@@std@@HU12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@HH$$QAU10@U?$less@X@0@@Z ; std::_Adjust_heap<std::pair<float,TFlyVertexSet> *,int,std::pair<float,TFlyVertexSet>,std::less<void> >
  00044	83 c4 14	 add	 esp, 20			; 00000014H
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx

; 2398 : 	}

  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
??$_Pop_heap@PAU?$pair@MUTFlyVertexSet@@@std@@HU12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00$$QAU10@U?$less@X@0@PAH@Z ENDP ; std::_Pop_heap<std::pair<float,TFlyVertexSet> *,int,std::pair<float,TFlyVertexSet>,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\utility
;	COMDAT ??$_Swap_adl@UTFlyVertexSet@@@std@@YAXAAUTFlyVertexSet@@0@Z
_TEXT	SEGMENT
__Tmp$1 = -144						; size = 144
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Swap_adl@UTFlyVertexSet@@@std@@YAXAAUTFlyVertexSet@@0@Z PROC ; std::_Swap_adl<TFlyVertexSet>, COMDAT

; 60   : 	{	// exchange values stored at _Left and _Right, using ADL

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H

; 52   : 	_Ty _Tmp = _Move(_Left);

  00009	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR __Left$[ebp]
  00012	57		 push	 edi
  00013	8d bd 70 ff ff
	ff		 lea	 edi, DWORD PTR __Tmp$1[ebp]
  00019	f3 a5		 rep movsd
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  0001b	8b 75 0c	 mov	 esi, DWORD PTR __Right$[ebp]
  0001e	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00023	8b 7d 08	 mov	 edi, DWORD PTR __Left$[ebp]
  00026	f3 a5		 rep movsd
  00028	8b 7d 0c	 mov	 edi, DWORD PTR __Right$[ebp]
  0002b	8d b5 70 ff ff
	ff		 lea	 esi, DWORD PTR __Tmp$1[ebp]
  00031	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00036	f3 a5		 rep movsd
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
; File a:\vs\vc\include\utility

; 62   : 	}

  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
??$_Swap_adl@UTFlyVertexSet@@@std@@YAXAAUTFlyVertexSet@@0@Z ENDP ; std::_Swap_adl<TFlyVertexSet>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\utility
;	COMDAT ??$_Swap_adl@M@std@@YAXAAM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Swap_adl@M@std@@YAXAAM0@Z PROC			; std::_Swap_adl<float>, COMDAT

; 60   : 	{	// exchange values stored at _Left and _Right, using ADL

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 52   : 	_Ty _Tmp = _Move(_Left);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]

; 53   : 	_Left = _Move(_Right);

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax

; 54   : 	_Right = _Move(_Tmp);

  00011	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 61   : 	swap(_Left, _Right);
; 62   : 	}

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??$_Swap_adl@M@std@@YAXAAM0@Z ENDP			; std::_Swap_adl<float>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\xutility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\xutility
;	COMDAT ??$_Move_backward@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move_backward@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move_backward<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *>, COMDAT

; 2525 : 	{	// move [_First, _Last) backwards to [..., _Dest), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2526 : 	while (_First != _Last)

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00006	39 55 08	 cmp	 DWORD PTR __First$[ebp], edx
  00009	74 33		 je	 SHORT $LN19@Move_backw
  0000b	53		 push	 ebx
  0000c	8b 5d 10	 mov	 ebx, DWORD PTR __Dest$[ebp]
  0000f	56		 push	 esi
  00010	57		 push	 edi
$LL2@Move_backw:
; File a:\vs\vc\include\utility

; 175  : 		first = _STD forward<_Ty1>(_Right.first);

  00011	8b 82 6c ff ff
	ff		 mov	 eax, DWORD PTR [edx-148]
; File a:\vs\vc\include\xutility

; 2527 : 		*--_Dest = _STD move(*--_Last);

  00017	81 ea 94 00 00
	00		 sub	 edx, 148		; 00000094H
  0001d	81 eb 94 00 00
	00		 sub	 ebx, 148		; 00000094H
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00023	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00028	8d 72 04	 lea	 esi, DWORD PTR [edx+4]
  0002b	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
; File a:\vs\vc\include\utility

; 175  : 		first = _STD forward<_Ty1>(_Right.first);

  0002e	89 03		 mov	 DWORD PTR [ebx], eax
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00030	f3 a5		 rep movsd
; File a:\vs\vc\include\xutility

; 2526 : 	while (_First != _Last)

  00032	3b 55 08	 cmp	 edx, DWORD PTR __First$[ebp]
  00035	75 da		 jne	 SHORT $LL2@Move_backw

; 2528 : 	return (_Dest);

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	8b c3		 mov	 eax, ebx
  0003b	5b		 pop	 ebx

; 2529 : 	}

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
$LN19@Move_backw:

; 2528 : 	return (_Dest);

  0003e	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2529 : 	}

  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
??$_Move_backward@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move_backward<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
;	COMDAT ??$_Pop_heap_0@PAU?$pair@MUTFlyVertexSet@@@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@0@Z
_TEXT	SEGMENT
__Val$ = -148						; size = 148
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
___formal$ = 20						; size = 4
??$_Pop_heap_0@PAU?$pair@MUTFlyVertexSet@@@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@0@Z PROC ; std::_Pop_heap_0<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet>,std::less<void> >, COMDAT

; 2404 : 	{	// pop *_First to *(_Last - 1) and reheap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
; File a:\vs\vc\include\utility

; 157  : 		{	// construct from moved compatible pair

  00009	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0000c	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00011	53		 push	 ebx

; 158  : 		}
; 159  : 
; 160  : 	template<class _Other1,
; 161  : 		class _Other2>
; 162  : 		_Myt& operator=(pair<_Other1, _Other2>&& _Right)
; 163  : 			_NOEXCEPT_OP((is_nothrow_assignable<_Ty1, _Other1&&>::value
; 164  : 				&& is_nothrow_assignable<_Ty2, _Other2&&>::value))
; 165  : 		{	// assign from moved compatible pair
; 166  : 		first = _STD forward<_Other1>(_Right.first);
; 167  : 		second = _STD forward<_Other2>(_Right.second);
; 168  : 		return (*this);
; 169  : 		}
; 170  : 
; 171  : 	_Myt& operator=(_Myt&& _Right)
; 172  : 		_NOEXCEPT_OP((is_nothrow_move_assignable<_Ty1>::value
; 173  : 			&& is_nothrow_move_assignable<_Ty2>::value))
; 174  : 		{	// assign from moved pair
; 175  : 		first = _STD forward<_Ty1>(_Right.first);

  00012	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  00015	56		 push	 esi

; 157  : 		{	// construct from moved compatible pair

  00016	f3 0f 10 82 6c
	ff ff ff	 movss	 xmm0, DWORD PTR [edx-148]
  0001e	8d b2 70 ff ff
	ff		 lea	 esi, DWORD PTR [edx-144]
  00024	57		 push	 edi

; 158  : 		}
; 159  : 
; 160  : 	template<class _Other1,
; 161  : 		class _Other2>
; 162  : 		_Myt& operator=(pair<_Other1, _Other2>&& _Right)
; 163  : 			_NOEXCEPT_OP((is_nothrow_assignable<_Ty1, _Other1&&>::value
; 164  : 				&& is_nothrow_assignable<_Ty2, _Other2&&>::value))
; 165  : 		{	// assign from moved compatible pair
; 166  : 		first = _STD forward<_Other1>(_Right.first);
; 167  : 		second = _STD forward<_Other2>(_Right.second);
; 168  : 		return (*this);
; 169  : 		}
; 170  : 
; 171  : 	_Myt& operator=(_Myt&& _Right)
; 172  : 		_NOEXCEPT_OP((is_nothrow_move_assignable<_Ty1>::value
; 173  : 			&& is_nothrow_move_assignable<_Ty2>::value))
; 174  : 		{	// assign from moved pair
; 175  : 		first = _STD forward<_Ty1>(_Right.first);

  00025	8b 03		 mov	 eax, DWORD PTR [ebx]

; 157  : 		{	// construct from moved compatible pair

  00027	8d bd 70 ff ff
	ff		 lea	 edi, DWORD PTR __Val$[ebp+4]
; File a:\vs\vc\include\algorithm

; 2397 : 		_Move(_Val), _Pred);

  0002d	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
; File a:\vs\vc\include\utility

; 157  : 		{	// construct from moved compatible pair

  00030	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR __Val$[ebp], xmm0
  00038	f3 a5		 rep movsd

; 158  : 		}
; 159  : 
; 160  : 	template<class _Other1,
; 161  : 		class _Other2>
; 162  : 		_Myt& operator=(pair<_Other1, _Other2>&& _Right)
; 163  : 			_NOEXCEPT_OP((is_nothrow_assignable<_Ty1, _Other1&&>::value
; 164  : 				&& is_nothrow_assignable<_Ty2, _Other2&&>::value))
; 165  : 		{	// assign from moved compatible pair
; 166  : 		first = _STD forward<_Other1>(_Right.first);
; 167  : 		second = _STD forward<_Other2>(_Right.second);
; 168  : 		return (*this);
; 169  : 		}
; 170  : 
; 171  : 	_Myt& operator=(_Myt&& _Right)
; 172  : 		_NOEXCEPT_OP((is_nothrow_move_assignable<_Ty1>::value
; 173  : 			&& is_nothrow_move_assignable<_Ty2>::value))
; 174  : 		{	// assign from moved pair
; 175  : 		first = _STD forward<_Ty1>(_Right.first);

  0003a	89 82 6c ff ff
	ff		 mov	 DWORD PTR [edx-148], eax
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00040	8d ba 70 ff ff
	ff		 lea	 edi, DWORD PTR [edx-144]
; File a:\vs\vc\include\algorithm

; 2397 : 		_Move(_Val), _Pred);

  00046	2b d3		 sub	 edx, ebx
  00048	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR __Val$[ebp]
  0004e	50		 push	 eax
  0004f	81 ea 94 00 00
	00		 sub	 edx, 148		; 00000094H
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00055	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]
; File a:\vs\vc\include\algorithm

; 2397 : 		_Move(_Val), _Pred);

  00058	89 55 0c	 mov	 DWORD PTR __Last$[ebp], edx
  0005b	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00060	f7 ea		 imul	 edx
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00062	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
; File a:\vs\vc\include\algorithm

; 2397 : 		_Move(_Val), _Pred);

  00067	03 55 0c	 add	 edx, DWORD PTR __Last$[ebp]
  0006a	c1 fa 07	 sar	 edx, 7
  0006d	8b c2		 mov	 eax, edx
  0006f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00072	03 c2		 add	 eax, edx
  00074	50		 push	 eax
  00075	6a 00		 push	 0
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00077	f3 a5		 rep movsd
; File a:\vs\vc\include\algorithm

; 2397 : 		_Move(_Val), _Pred);

  00079	53		 push	 ebx
  0007a	e8 00 00 00 00	 call	 ??$_Adjust_heap@PAU?$pair@MUTFlyVertexSet@@@std@@HU12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@HH$$QAU10@U?$less@X@0@@Z ; std::_Adjust_heap<std::pair<float,TFlyVertexSet> *,int,std::pair<float,TFlyVertexSet>,std::less<void> >
  0007f	83 c4 14	 add	 esp, 20			; 00000014H
  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx

; 2405 : 	_Ty _Val = _Move(*(_Last - 1));
; 2406 : 	_Pop_heap(_First, _Last - 1, _Last - 1,
; 2407 : 		_Move(_Val), _Pred, _Dist_type(_First));
; 2408 : 	}

  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c3		 ret	 0
??$_Pop_heap_0@PAU?$pair@MUTFlyVertexSet@@@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@0@Z ENDP ; std::_Pop_heap_0<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet>,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\algorithm
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
;	COMDAT ??$_Push_heap@PAU?$pair@MUTFlyVertexSet@@@std@@HU12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@HH$$QAU10@U?$less@X@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Top$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Push_heap@PAU?$pair@MUTFlyVertexSet@@@std@@HU12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@HH$$QAU10@U?$less@X@0@@Z PROC ; std::_Push_heap<std::pair<float,TFlyVertexSet> *,int,std::pair<float,TFlyVertexSet>,std::less<void> >, COMDAT

; 2313 : 	{	// percolate _Hole to _Top or where _Val belongs, using operator<

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 2316 : 		_Idx = (_Hole - 1) / 2)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  00007	56		 push	 esi
  00008	8b 75 0c	 mov	 esi, DWORD PTR __Hole$[ebp]
  0000b	57		 push	 edi
  0000c	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  0000f	99		 cdq
  00010	2b c2		 sub	 eax, edx
  00012	8b d0		 mov	 edx, eax
  00014	d1 fa		 sar	 edx, 1
  00016	39 75 10	 cmp	 DWORD PTR __Top$[ebp], esi
  00019	7d 45		 jge	 SHORT $LN41@Push_heap
  0001b	eb 03 8d 49 00	 npad	 5
$LL3@Push_heap:
; File a:\vs\vc\include\utility

; 234  : 		(!(_Right.first < _Left.first) && _Left.second < _Right.second));

  00020	8b 45 14	 mov	 eax, DWORD PTR __Val$[ebp]
; File a:\vs\vc\include\algorithm

; 2316 : 		_Idx = (_Hole - 1) / 2)

  00023	69 ca 94 00 00
	00		 imul	 ecx, edx, 148
; File a:\vs\vc\include\utility

; 234  : 		(!(_Right.first < _Left.first) && _Left.second < _Right.second));

  00029	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0002d	0f 2f 04 19	 comiss	 xmm0, DWORD PTR [ecx+ebx]
  00031	76 2d		 jbe	 SHORT $LN41@Push_heap

; 175  : 		first = _STD forward<_Ty1>(_Right.first);

  00033	8b 04 19	 mov	 eax, DWORD PTR [ecx+ebx]
; File a:\vs\vc\include\algorithm

; 2318 : 		*(_First + _Hole) = _Move(*(_First + _Idx));

  00036	69 fe 94 00 00
	00		 imul	 edi, esi, 148
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  0003c	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]
; File a:\vs\vc\include\algorithm

; 2318 : 		*(_First + _Hole) = _Move(*(_First + _Idx));

  0003f	03 fb		 add	 edi, ebx
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00041	03 f1		 add	 esi, ecx
  00043	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
; File a:\vs\vc\include\utility

; 175  : 		first = _STD forward<_Ty1>(_Right.first);

  00048	89 07		 mov	 DWORD PTR [edi], eax
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  0004a	83 c7 04	 add	 edi, 4
; File a:\vs\vc\include\algorithm

; 2316 : 		_Idx = (_Hole - 1) / 2)

  0004d	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00050	f3 a5		 rep movsd
; File a:\vs\vc\include\algorithm

; 2319 : 		_Hole = _Idx;

  00052	8b f2		 mov	 esi, edx
  00054	99		 cdq
  00055	2b c2		 sub	 eax, edx
  00057	8b d0		 mov	 edx, eax
  00059	d1 fa		 sar	 edx, 1
  0005b	39 75 10	 cmp	 DWORD PTR __Top$[ebp], esi
  0005e	7c c0		 jl	 SHORT $LL3@Push_heap
$LN41@Push_heap:
; File a:\vs\vc\include\utility

; 175  : 		first = _STD forward<_Ty1>(_Right.first);

  00060	8b 4d 14	 mov	 ecx, DWORD PTR __Val$[ebp]
; File a:\vs\vc\include\algorithm

; 2322 : 	*(_First + _Hole) = _Move(_Val);	// drop _Val into final hole

  00063	69 fe 94 00 00
	00		 imul	 edi, esi, 148
  00069	03 fb		 add	 edi, ebx
; File a:\vs\vc\include\utility

; 175  : 		first = _STD forward<_Ty1>(_Right.first);

  0006b	8b 01		 mov	 eax, DWORD PTR [ecx]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  0006d	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
  00070	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
; File a:\vs\vc\include\utility

; 175  : 		first = _STD forward<_Ty1>(_Right.first);

  00075	89 07		 mov	 DWORD PTR [edi], eax
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00077	83 c7 04	 add	 edi, 4
  0007a	f3 a5		 rep movsd
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
; File a:\vs\vc\include\algorithm

; 2323 : 	}

  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
??$_Push_heap@PAU?$pair@MUTFlyVertexSet@@@std@@HU12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@HH$$QAU10@U?$less@X@0@@Z ENDP ; std::_Push_heap<std::pair<float,TFlyVertexSet> *,int,std::pair<float,TFlyVertexSet>,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??$_Move_backward@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@00@Z
_TEXT	SEGMENT
__Cat$1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move_backward@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@00@Z PROC ; std::_Move_backward<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *>, COMDAT

; 2546 : 	{	// move [_First, _Last) backwards to [..., _Dest), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2547 : 	return (_Move_backward(_First, _Last,
; 2548 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$1[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move_backward@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move_backward<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2549 : 	}

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Move_backward@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@00@Z ENDP ; std::_Move_backward<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
;	COMDAT ??$_Pop_heap@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z
_TEXT	SEGMENT
__Val$1 = -148						; size = 148
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Pop_heap@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z PROC ; std::_Pop_heap<std::pair<float,TFlyVertexSet> *,std::less<void> >, COMDAT

; 2413 : 	{	// pop *_First to *(_Last - 1) and reheap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
; File a:\vs\vc\include\utility

; 157  : 		{	// construct from moved compatible pair

  00009	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0000c	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00011	53		 push	 ebx

; 158  : 		}
; 159  : 
; 160  : 	template<class _Other1,
; 161  : 		class _Other2>
; 162  : 		_Myt& operator=(pair<_Other1, _Other2>&& _Right)
; 163  : 			_NOEXCEPT_OP((is_nothrow_assignable<_Ty1, _Other1&&>::value
; 164  : 				&& is_nothrow_assignable<_Ty2, _Other2&&>::value))
; 165  : 		{	// assign from moved compatible pair
; 166  : 		first = _STD forward<_Other1>(_Right.first);
; 167  : 		second = _STD forward<_Other2>(_Right.second);
; 168  : 		return (*this);
; 169  : 		}
; 170  : 
; 171  : 	_Myt& operator=(_Myt&& _Right)
; 172  : 		_NOEXCEPT_OP((is_nothrow_move_assignable<_Ty1>::value
; 173  : 			&& is_nothrow_move_assignable<_Ty2>::value))
; 174  : 		{	// assign from moved pair
; 175  : 		first = _STD forward<_Ty1>(_Right.first);

  00012	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  00015	56		 push	 esi

; 157  : 		{	// construct from moved compatible pair

  00016	f3 0f 10 82 6c
	ff ff ff	 movss	 xmm0, DWORD PTR [edx-148]
  0001e	8d b2 70 ff ff
	ff		 lea	 esi, DWORD PTR [edx-144]
  00024	57		 push	 edi

; 158  : 		}
; 159  : 
; 160  : 	template<class _Other1,
; 161  : 		class _Other2>
; 162  : 		_Myt& operator=(pair<_Other1, _Other2>&& _Right)
; 163  : 			_NOEXCEPT_OP((is_nothrow_assignable<_Ty1, _Other1&&>::value
; 164  : 				&& is_nothrow_assignable<_Ty2, _Other2&&>::value))
; 165  : 		{	// assign from moved compatible pair
; 166  : 		first = _STD forward<_Other1>(_Right.first);
; 167  : 		second = _STD forward<_Other2>(_Right.second);
; 168  : 		return (*this);
; 169  : 		}
; 170  : 
; 171  : 	_Myt& operator=(_Myt&& _Right)
; 172  : 		_NOEXCEPT_OP((is_nothrow_move_assignable<_Ty1>::value
; 173  : 			&& is_nothrow_move_assignable<_Ty2>::value))
; 174  : 		{	// assign from moved pair
; 175  : 		first = _STD forward<_Ty1>(_Right.first);

  00025	8b 03		 mov	 eax, DWORD PTR [ebx]

; 157  : 		{	// construct from moved compatible pair

  00027	8d bd 70 ff ff
	ff		 lea	 edi, DWORD PTR __Val$1[ebp+4]
; File a:\vs\vc\include\algorithm

; 2397 : 		_Move(_Val), _Pred);

  0002d	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
; File a:\vs\vc\include\utility

; 157  : 		{	// construct from moved compatible pair

  00030	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR __Val$1[ebp], xmm0
  00038	f3 a5		 rep movsd

; 158  : 		}
; 159  : 
; 160  : 	template<class _Other1,
; 161  : 		class _Other2>
; 162  : 		_Myt& operator=(pair<_Other1, _Other2>&& _Right)
; 163  : 			_NOEXCEPT_OP((is_nothrow_assignable<_Ty1, _Other1&&>::value
; 164  : 				&& is_nothrow_assignable<_Ty2, _Other2&&>::value))
; 165  : 		{	// assign from moved compatible pair
; 166  : 		first = _STD forward<_Other1>(_Right.first);
; 167  : 		second = _STD forward<_Other2>(_Right.second);
; 168  : 		return (*this);
; 169  : 		}
; 170  : 
; 171  : 	_Myt& operator=(_Myt&& _Right)
; 172  : 		_NOEXCEPT_OP((is_nothrow_move_assignable<_Ty1>::value
; 173  : 			&& is_nothrow_move_assignable<_Ty2>::value))
; 174  : 		{	// assign from moved pair
; 175  : 		first = _STD forward<_Ty1>(_Right.first);

  0003a	89 82 6c ff ff
	ff		 mov	 DWORD PTR [edx-148], eax
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00040	8d ba 70 ff ff
	ff		 lea	 edi, DWORD PTR [edx-144]
; File a:\vs\vc\include\algorithm

; 2397 : 		_Move(_Val), _Pred);

  00046	2b d3		 sub	 edx, ebx
  00048	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR __Val$1[ebp]
  0004e	50		 push	 eax
  0004f	81 ea 94 00 00
	00		 sub	 edx, 148		; 00000094H
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00055	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]
; File a:\vs\vc\include\algorithm

; 2397 : 		_Move(_Val), _Pred);

  00058	89 55 0c	 mov	 DWORD PTR __Last$[ebp], edx
  0005b	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00060	f7 ea		 imul	 edx
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00062	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
; File a:\vs\vc\include\algorithm

; 2397 : 		_Move(_Val), _Pred);

  00067	03 55 0c	 add	 edx, DWORD PTR __Last$[ebp]
  0006a	c1 fa 07	 sar	 edx, 7
  0006d	8b c2		 mov	 eax, edx
  0006f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00072	03 c2		 add	 eax, edx
  00074	50		 push	 eax
  00075	6a 00		 push	 0
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00077	f3 a5		 rep movsd
; File a:\vs\vc\include\algorithm

; 2397 : 		_Move(_Val), _Pred);

  00079	53		 push	 ebx
  0007a	e8 00 00 00 00	 call	 ??$_Adjust_heap@PAU?$pair@MUTFlyVertexSet@@@std@@HU12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@HH$$QAU10@U?$less@X@0@@Z ; std::_Adjust_heap<std::pair<float,TFlyVertexSet> *,int,std::pair<float,TFlyVertexSet>,std::less<void> >
  0007f	83 c4 14	 add	 esp, 20			; 00000014H
  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx

; 2414 : 	_Pop_heap_0(_Unchecked(_First), _Unchecked(_Last), _Pred,
; 2415 : 		_Val_type(_First));
; 2416 : 	}

  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c3		 ret	 0
??$_Pop_heap@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z ENDP ; std::_Pop_heap<std::pair<float,TFlyVertexSet> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\algorithm
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
;	COMDAT ??$_Adjust_heap@PAU?$pair@MUTFlyVertexSet@@@std@@HU12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@HH$$QAU10@U?$less@X@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Top$1$ = 12						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Adjust_heap@PAU?$pair@MUTFlyVertexSet@@@std@@HU12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@HH$$QAU10@U?$less@X@0@@Z PROC ; std::_Adjust_heap<std::pair<float,TFlyVertexSet> *,int,std::pair<float,TFlyVertexSet>,std::less<void> >, COMDAT

; 2368 : 	{	// percolate _Hole to _Bottom, then push _Val, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2369 : 	_Diff _Top = _Hole;

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Hole$[ebp]

; 2372 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

  00006	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
  00009	53		 push	 ebx
  0000a	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  0000d	8d 14 4d 02 00
	00 00		 lea	 edx, DWORD PTR [ecx*2+2]
  00014	89 4d 0c	 mov	 DWORD PTR __Top$1$[ebp], ecx
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	3b d0		 cmp	 edx, eax
  0001b	7d 4a		 jge	 SHORT $LN44@Adjust_hea
  0001d	8d 49 00	 npad	 3
$LL5@Adjust_hea:

; 2373 : 		{	// move _Hole down to larger child
; 2374 : 		if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1))))

  00020	69 c2 94 00 00
	00		 imul	 eax, edx, 148
; File a:\vs\vc\include\utility

; 234  : 		(!(_Right.first < _Left.first) && _Left.second < _Right.second));

  00026	f3 0f 10 84 18
	6c ff ff ff	 movss	 xmm0, DWORD PTR [eax+ebx-148]
  0002f	0f 2f 04 18	 comiss	 xmm0, DWORD PTR [eax+ebx]
  00033	76 01		 jbe	 SHORT $LN2@Adjust_hea
; File a:\vs\vc\include\algorithm

; 2375 : 			--_Idx;

  00035	4a		 dec	 edx
$LN2@Adjust_hea:

; 2376 : 		*(_First + _Hole) = _Move(*(_First + _Idx));

  00036	69 f9 94 00 00
	00		 imul	 edi, ecx, 148
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  0003c	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
; File a:\vs\vc\include\algorithm

; 2376 : 		*(_First + _Hole) = _Move(*(_First + _Idx));

  00041	69 f2 94 00 00
	00		 imul	 esi, edx, 148
  00047	03 fb		 add	 edi, ebx
  00049	03 f3		 add	 esi, ebx
; File a:\vs\vc\include\utility

; 175  : 		first = _STD forward<_Ty1>(_Right.first);

  0004b	8b 06		 mov	 eax, DWORD PTR [esi]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  0004d	83 c6 04	 add	 esi, 4
; File a:\vs\vc\include\utility

; 175  : 		first = _STD forward<_Ty1>(_Right.first);

  00050	89 07		 mov	 DWORD PTR [edi], eax
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00052	83 c7 04	 add	 edi, 4
; File a:\vs\vc\include\algorithm

; 2372 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

  00055	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00058	f3 a5		 rep movsd
; File a:\vs\vc\include\algorithm

; 2377 : 		_Hole = _Idx;

  0005a	8b ca		 mov	 ecx, edx
  0005c	8d 14 55 02 00
	00 00		 lea	 edx, DWORD PTR [edx*2+2]
  00063	3b d0		 cmp	 edx, eax
  00065	7c b9		 jl	 SHORT $LL5@Adjust_hea
$LN44@Adjust_hea:

; 2378 : 		}
; 2379 : 
; 2380 : 	if (_Idx == _Bottom)

  00067	75 2d		 jne	 SHORT $LN1@Adjust_hea

; 2382 : 		*(_First + _Hole) = _Move(*(_First + (_Bottom - 1)));

  00069	69 f9 94 00 00
	00		 imul	 edi, ecx, 148
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  0006f	8d b3 70 ff ff
	ff		 lea	 esi, DWORD PTR [ebx-144]
; File a:\vs\vc\include\algorithm

; 2382 : 		*(_First + _Hole) = _Move(*(_First + (_Bottom - 1)));

  00075	69 d0 94 00 00
	00		 imul	 edx, eax, 148
  0007b	03 fb		 add	 edi, ebx
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  0007d	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00082	03 f2		 add	 esi, edx
; File a:\vs\vc\include\utility

; 175  : 		first = _STD forward<_Ty1>(_Right.first);

  00084	8b 84 1a 6c ff
	ff ff		 mov	 eax, DWORD PTR [edx+ebx-148]
  0008b	89 07		 mov	 DWORD PTR [edi], eax
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  0008d	83 c7 04	 add	 edi, 4
  00090	f3 a5		 rep movsd
; File a:\vs\vc\include\algorithm

; 2383 : 		_Hole = _Bottom - 1;

  00092	8b 4d 10	 mov	 ecx, DWORD PTR __Bottom$[ebp]
  00095	49		 dec	 ecx
$LN1@Adjust_hea:

; 2384 : 		}
; 2385 : 	_Push_heap(_First, _Hole, _Top, _Move(_Val), _Pred);

  00096	ff 75 18	 push	 DWORD PTR __Pred$[ebp]
  00099	ff 75 14	 push	 DWORD PTR __Val$[ebp]
  0009c	ff 75 0c	 push	 DWORD PTR __Top$1$[ebp]
  0009f	51		 push	 ecx
  000a0	53		 push	 ebx
  000a1	e8 00 00 00 00	 call	 ??$_Push_heap@PAU?$pair@MUTFlyVertexSet@@@std@@HU12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@HH$$QAU10@U?$less@X@0@@Z ; std::_Push_heap<std::pair<float,TFlyVertexSet> *,int,std::pair<float,TFlyVertexSet>,std::less<void> >
  000a6	83 c4 14	 add	 esp, 20			; 00000014H
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx

; 2386 : 	}

  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
??$_Adjust_heap@PAU?$pair@MUTFlyVertexSet@@@std@@HU12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@HH$$QAU10@U?$less@X@0@@Z ENDP ; std::_Adjust_heap<std::pair<float,TFlyVertexSet> *,int,std::pair<float,TFlyVertexSet>,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\type_traits
;	COMDAT ??$_Move@AAU?$pair@MUTFlyVertexSet@@@std@@@std@@YA$$QAU?$pair@MUTFlyVertexSet@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAU?$pair@MUTFlyVertexSet@@@std@@@std@@YA$$QAU?$pair@MUTFlyVertexSet@@@0@AAU10@@Z PROC ; std::_Move<std::pair<float,TFlyVertexSet> &>, COMDAT

; 1527 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1528 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1529 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Move@AAU?$pair@MUTFlyVertexSet@@@std@@@std@@YA$$QAU?$pair@MUTFlyVertexSet@@@0@AAU10@@Z ENDP ; std::_Move<std::pair<float,TFlyVertexSet> &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\type_traits
;	COMDAT ??$forward@AAPAU?$pair@MUTFlyVertexSet@@@std@@@std@@YAAAPAU?$pair@MUTFlyVertexSet@@@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAU?$pair@MUTFlyVertexSet@@@std@@@std@@YAAAPAU?$pair@MUTFlyVertexSet@@@0@AAPAU10@@Z PROC ; std::forward<std::pair<float,TFlyVertexSet> * &>, COMDAT

; 1504 : 	{	// forward an lvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAU?$pair@MUTFlyVertexSet@@@std@@@std@@YAAAPAU?$pair@MUTFlyVertexSet@@@0@AAPAU10@@Z ENDP ; std::forward<std::pair<float,TFlyVertexSet> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\utility
;	COMDAT ??$swap@MUTFlyVertexSet@@@std@@YAXAAU?$pair@MUTFlyVertexSet@@@0@0@Z
_TEXT	SEGMENT
__Tmp$1 = -144						; size = 144
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@MUTFlyVertexSet@@@std@@YAXAAU?$pair@MUTFlyVertexSet@@@0@0@Z PROC ; std::swap<float,TFlyVertexSet>, COMDAT

; 208  : 	{	// swap _Left and _Right pairs

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 55   : 	}
; 56   : 
; 57   : 		// TEMPLATE FUNCTION _Swap_adl
; 58   : template<class _Ty> inline
; 59   : 	void _Swap_adl(_Ty& _Left, _Ty& _Right)
; 60   : 	{	// exchange values stored at _Left and _Right, using ADL
; 61   : 	swap(_Left, _Right);
; 62   : 	}
; 63   : 
; 64   : 		// STRUCT piecewise_construct_t
; 65   : struct piecewise_construct_t
; 66   : 	{	// tag type for pair tuple arguments
; 67   : 	};
; 68   : 
; 69   : const piecewise_construct_t piecewise_construct =
; 70   : 	piecewise_construct_t();
; 71   : 
; 72   : 		// TEMPLATE STRUCT pair
; 73   : 
; 74   : template<class...>
; 75   : 	class tuple;
; 76   : 
; 77   : 
; 78   : template<class _Ty1,
; 79   : 	class _Ty2>
; 80   : 	struct pair
; 81   : 	{	// store a pair of values
; 82   : 	typedef pair<_Ty1, _Ty2> _Myt;
; 83   : 	typedef _Ty1 first_type;
; 84   : 	typedef _Ty2 second_type;
; 85   : 
; 86   : 	pair()
; 87   : 		: first(), second()
; 88   : 		{	// default construct
; 89   : 		}
; 90   : 
; 91   : 	pair(const _Ty1& _Val1, const _Ty2& _Val2)
; 92   : 		: first(_Val1), second(_Val2)
; 93   : 		{	// construct from specified values
; 94   : 		}
; 95   : 
; 96   : 	template<class _Other1,
; 97   : 		class _Other2,
; 98   : 		class = typename enable_if<is_convertible<const _Other1&, _Ty1>::value
; 99   : 			&& is_convertible<const _Other2&, _Ty2>::value,
; 100  : 			void>::type>
; 101  : 		pair(const pair<_Other1, _Other2>& _Right)
; 102  : 		: first(_Right.first), second(_Right.second)
; 103  : 		{	// construct from compatible pair
; 104  : 		}
; 105  : 
; 106  : 	template<class _Other1,
; 107  : 		class _Other2>
; 108  : 		_Myt& operator=(const pair<_Other1, _Other2>& _Right)
; 109  : 		{	// assign from compatible pair
; 110  : 		first = _Right.first;
; 111  : 		second = _Right.second;
; 112  : 		return (*this);
; 113  : 		}
; 114  : 
; 115  : 
; 116  : 	template<class _Tuple1,
; 117  : 		class _Tuple2,
; 118  : 		size_t... _Indexes1,
; 119  : 		size_t... _Indexes2> inline
; 120  : 		pair(_Tuple1& _Val1,
; 121  : 			_Tuple2& _Val2,
; 122  : 			_Arg_idx<_Indexes1...>,
; 123  : 			_Arg_idx<_Indexes2...>);
; 124  : 
; 125  : 	template<class... _Types1,
; 126  : 		class... _Types2> inline
; 127  : 		pair(piecewise_construct_t,
; 128  : 			tuple<_Types1...> _Val1,
; 129  : 			tuple<_Types2...> _Val2)
; 130  : 			_NOEXCEPT_OP((is_nothrow_constructible<_Ty1, _Types1&&...>::value
; 131  : 				&& is_nothrow_constructible<_Ty2, _Types2&&...>::value));
; 132  : 
; 133  : 
; 134  : 	template<class _Other1,
; 135  : 		class _Other2,
; 136  : 		class = typename enable_if<is_convertible<_Other1, _Ty1>::value
; 137  : 			&& is_convertible<_Other2, _Ty2>::value,
; 138  : 			void>::type>
; 139  : 		pair(_Other1&& _Val1, _Other2&& _Val2)
; 140  : 			_NOEXCEPT_OP((is_nothrow_constructible<_Ty1, _Other1&&>::value
; 141  : 				&& is_nothrow_constructible<_Ty2, _Other2&&>::value))
; 142  : 		: first(_STD forward<_Other1>(_Val1)),
; 143  : 				second(_STD forward<_Other2>(_Val2))
; 144  : 		{	// construct from moved values
; 145  : 		}
; 146  : 
; 147  : 	template<class _Other1,
; 148  : 		class _Other2,
; 149  : 		class = typename enable_if<is_convertible<_Other1, _Ty1>::value
; 150  : 			&& is_convertible<_Other2, _Ty2>::value,
; 151  : 			void>::type>
; 152  : 		pair(pair<_Other1, _Other2>&& _Right)
; 153  : 			_NOEXCEPT_OP((is_nothrow_constructible<_Ty1, _Other1&&>::value
; 154  : 				&& is_nothrow_constructible<_Ty2, _Other2&&>::value))
; 155  : 		: first(_STD forward<_Other1>(_Right.first)),
; 156  : 			second(_STD forward<_Other2>(_Right.second))
; 157  : 		{	// construct from moved compatible pair
; 158  : 		}
; 159  : 
; 160  : 	template<class _Other1,
; 161  : 		class _Other2>
; 162  : 		_Myt& operator=(pair<_Other1, _Other2>&& _Right)
; 163  : 			_NOEXCEPT_OP((is_nothrow_assignable<_Ty1, _Other1&&>::value
; 164  : 				&& is_nothrow_assignable<_Ty2, _Other2&&>::value))
; 165  : 		{	// assign from moved compatible pair
; 166  : 		first = _STD forward<_Other1>(_Right.first);
; 167  : 		second = _STD forward<_Other2>(_Right.second);
; 168  : 		return (*this);
; 169  : 		}
; 170  : 
; 171  : 	_Myt& operator=(_Myt&& _Right)
; 172  : 		_NOEXCEPT_OP((is_nothrow_move_assignable<_Ty1>::value
; 173  : 			&& is_nothrow_move_assignable<_Ty2>::value))
; 174  : 		{	// assign from moved pair
; 175  : 		first = _STD forward<_Ty1>(_Right.first);
; 176  : 		second = _STD forward<_Ty2>(_Right.second);
; 177  : 		return (*this);
; 178  : 		}
; 179  : 
; 180  : 	void swap(_Myt& _Right)
; 181  : 		_NOEXCEPT_OP(_NOEXCEPT_OP(_Swap_adl(this->first, _Right.first))
; 182  : 			&& _NOEXCEPT_OP(_Swap_adl(this->second, _Right.second)))
; 183  : 		{	// exchange contents with _Right
; 184  : 		if (this != &_Right)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]

; 208  : 	{	// swap _Left and _Right pairs

  00006	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H

; 55   : 	}
; 56   : 
; 57   : 		// TEMPLATE FUNCTION _Swap_adl
; 58   : template<class _Ty> inline
; 59   : 	void _Swap_adl(_Ty& _Left, _Ty& _Right)
; 60   : 	{	// exchange values stored at _Left and _Right, using ADL
; 61   : 	swap(_Left, _Right);
; 62   : 	}
; 63   : 
; 64   : 		// STRUCT piecewise_construct_t
; 65   : struct piecewise_construct_t
; 66   : 	{	// tag type for pair tuple arguments
; 67   : 	};
; 68   : 
; 69   : const piecewise_construct_t piecewise_construct =
; 70   : 	piecewise_construct_t();
; 71   : 
; 72   : 		// TEMPLATE STRUCT pair
; 73   : 
; 74   : template<class...>
; 75   : 	class tuple;
; 76   : 
; 77   : 
; 78   : template<class _Ty1,
; 79   : 	class _Ty2>
; 80   : 	struct pair
; 81   : 	{	// store a pair of values
; 82   : 	typedef pair<_Ty1, _Ty2> _Myt;
; 83   : 	typedef _Ty1 first_type;
; 84   : 	typedef _Ty2 second_type;
; 85   : 
; 86   : 	pair()
; 87   : 		: first(), second()
; 88   : 		{	// default construct
; 89   : 		}
; 90   : 
; 91   : 	pair(const _Ty1& _Val1, const _Ty2& _Val2)
; 92   : 		: first(_Val1), second(_Val2)
; 93   : 		{	// construct from specified values
; 94   : 		}
; 95   : 
; 96   : 	template<class _Other1,
; 97   : 		class _Other2,
; 98   : 		class = typename enable_if<is_convertible<const _Other1&, _Ty1>::value
; 99   : 			&& is_convertible<const _Other2&, _Ty2>::value,
; 100  : 			void>::type>
; 101  : 		pair(const pair<_Other1, _Other2>& _Right)
; 102  : 		: first(_Right.first), second(_Right.second)
; 103  : 		{	// construct from compatible pair
; 104  : 		}
; 105  : 
; 106  : 	template<class _Other1,
; 107  : 		class _Other2>
; 108  : 		_Myt& operator=(const pair<_Other1, _Other2>& _Right)
; 109  : 		{	// assign from compatible pair
; 110  : 		first = _Right.first;
; 111  : 		second = _Right.second;
; 112  : 		return (*this);
; 113  : 		}
; 114  : 
; 115  : 
; 116  : 	template<class _Tuple1,
; 117  : 		class _Tuple2,
; 118  : 		size_t... _Indexes1,
; 119  : 		size_t... _Indexes2> inline
; 120  : 		pair(_Tuple1& _Val1,
; 121  : 			_Tuple2& _Val2,
; 122  : 			_Arg_idx<_Indexes1...>,
; 123  : 			_Arg_idx<_Indexes2...>);
; 124  : 
; 125  : 	template<class... _Types1,
; 126  : 		class... _Types2> inline
; 127  : 		pair(piecewise_construct_t,
; 128  : 			tuple<_Types1...> _Val1,
; 129  : 			tuple<_Types2...> _Val2)
; 130  : 			_NOEXCEPT_OP((is_nothrow_constructible<_Ty1, _Types1&&...>::value
; 131  : 				&& is_nothrow_constructible<_Ty2, _Types2&&...>::value));
; 132  : 
; 133  : 
; 134  : 	template<class _Other1,
; 135  : 		class _Other2,
; 136  : 		class = typename enable_if<is_convertible<_Other1, _Ty1>::value
; 137  : 			&& is_convertible<_Other2, _Ty2>::value,
; 138  : 			void>::type>
; 139  : 		pair(_Other1&& _Val1, _Other2&& _Val2)
; 140  : 			_NOEXCEPT_OP((is_nothrow_constructible<_Ty1, _Other1&&>::value
; 141  : 				&& is_nothrow_constructible<_Ty2, _Other2&&>::value))
; 142  : 		: first(_STD forward<_Other1>(_Val1)),
; 143  : 				second(_STD forward<_Other2>(_Val2))
; 144  : 		{	// construct from moved values
; 145  : 		}
; 146  : 
; 147  : 	template<class _Other1,
; 148  : 		class _Other2,
; 149  : 		class = typename enable_if<is_convertible<_Other1, _Ty1>::value
; 150  : 			&& is_convertible<_Other2, _Ty2>::value,
; 151  : 			void>::type>
; 152  : 		pair(pair<_Other1, _Other2>&& _Right)
; 153  : 			_NOEXCEPT_OP((is_nothrow_constructible<_Ty1, _Other1&&>::value
; 154  : 				&& is_nothrow_constructible<_Ty2, _Other2&&>::value))
; 155  : 		: first(_STD forward<_Other1>(_Right.first)),
; 156  : 			second(_STD forward<_Other2>(_Right.second))
; 157  : 		{	// construct from moved compatible pair
; 158  : 		}
; 159  : 
; 160  : 	template<class _Other1,
; 161  : 		class _Other2>
; 162  : 		_Myt& operator=(pair<_Other1, _Other2>&& _Right)
; 163  : 			_NOEXCEPT_OP((is_nothrow_assignable<_Ty1, _Other1&&>::value
; 164  : 				&& is_nothrow_assignable<_Ty2, _Other2&&>::value))
; 165  : 		{	// assign from moved compatible pair
; 166  : 		first = _STD forward<_Other1>(_Right.first);
; 167  : 		second = _STD forward<_Other2>(_Right.second);
; 168  : 		return (*this);
; 169  : 		}
; 170  : 
; 171  : 	_Myt& operator=(_Myt&& _Right)
; 172  : 		_NOEXCEPT_OP((is_nothrow_move_assignable<_Ty1>::value
; 173  : 			&& is_nothrow_move_assignable<_Ty2>::value))
; 174  : 		{	// assign from moved pair
; 175  : 		first = _STD forward<_Ty1>(_Right.first);
; 176  : 		second = _STD forward<_Ty2>(_Right.second);
; 177  : 		return (*this);
; 178  : 		}
; 179  : 
; 180  : 	void swap(_Myt& _Right)
; 181  : 		_NOEXCEPT_OP(_NOEXCEPT_OP(_Swap_adl(this->first, _Right.first))
; 182  : 			&& _NOEXCEPT_OP(_Swap_adl(this->second, _Right.second)))
; 183  : 		{	// exchange contents with _Right
; 184  : 		if (this != &_Right)

  0000c	8b 55 0c	 mov	 edx, DWORD PTR __Right$[ebp]
  0000f	3b ca		 cmp	 ecx, edx
  00011	74 3e		 je	 SHORT $LN28@swap

; 52   : 	_Ty _Tmp = _Move(_Left);

  00013	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]

; 53   : 	_Left = _Move(_Right);

  00017	8b 02		 mov	 eax, DWORD PTR [edx]
  00019	56		 push	 esi
  0001a	89 01		 mov	 DWORD PTR [ecx], eax

; 185  : 			{	// different, worth swapping
; 186  : 			_Swap_adl(first, _Right.first);
; 187  : 			_Swap_adl(second, _Right.second);

  0001c	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  0001f	57		 push	 edi

; 54   : 	_Right = _Move(_Tmp);

  00020	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 52   : 	_Ty _Tmp = _Move(_Left);

  00024	8d bd 70 ff ff
	ff		 lea	 edi, DWORD PTR __Tmp$1[ebp]
  0002a	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0002f	8b f0		 mov	 esi, eax
  00031	f3 a5		 rep movsd
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00033	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00038	8d 72 04	 lea	 esi, DWORD PTR [edx+4]
  0003b	8b f8		 mov	 edi, eax
  0003d	f3 a5		 rep movsd
  0003f	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00044	8d b5 70 ff ff
	ff		 lea	 esi, DWORD PTR __Tmp$1[ebp]
  0004a	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
  0004d	f3 a5		 rep movsd
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
$LN28@swap:
; File a:\vs\vc\include\utility

; 210  : 	}

  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
??$swap@MUTFlyVertexSet@@@std@@YAXAAU?$pair@MUTFlyVertexSet@@@0@0@Z ENDP ; std::swap<float,TFlyVertexSet>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
;	COMDAT ??$_Med3@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z
_TEXT	SEGMENT
__Tmp$1 = -144						; size = 144
__Tmp$2 = -144						; size = 144
__Tmp$3 = -144						; size = 144
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Med3@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z PROC ; std::_Med3<std::pair<float,TFlyVertexSet> *,std::less<void> >, COMDAT

; 3032 : 	{	// sort median of three elements to middle

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File a:\vs\vc\include\utility

; 234  : 		(!(_Right.first < _Left.first) && _Left.second < _Right.second));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
; File a:\vs\vc\include\algorithm

; 3032 : 	{	// sort median of three elements to middle

  00006	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
; File a:\vs\vc\include\utility

; 234  : 		(!(_Right.first < _Left.first) && _Left.second < _Right.second));

  0000c	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
  00010	53		 push	 ebx
  00011	8b 5d 0c	 mov	 ebx, DWORD PTR __Mid$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]
  0001a	0f 2f c8	 comiss	 xmm1, xmm0
  0001d	76 39		 jbe	 SHORT $LN44@Med3

; 55   : 	}
; 56   : 
; 57   : 		// TEMPLATE FUNCTION _Swap_adl
; 58   : template<class _Ty> inline
; 59   : 	void _Swap_adl(_Ty& _Left, _Ty& _Right)
; 60   : 	{	// exchange values stored at _Left and _Right, using ADL
; 61   : 	swap(_Left, _Right);
; 62   : 	}
; 63   : 
; 64   : 		// STRUCT piecewise_construct_t
; 65   : struct piecewise_construct_t
; 66   : 	{	// tag type for pair tuple arguments
; 67   : 	};
; 68   : 
; 69   : const piecewise_construct_t piecewise_construct =
; 70   : 	piecewise_construct_t();
; 71   : 
; 72   : 		// TEMPLATE STRUCT pair
; 73   : 
; 74   : template<class...>
; 75   : 	class tuple;
; 76   : 
; 77   : 
; 78   : template<class _Ty1,
; 79   : 	class _Ty2>
; 80   : 	struct pair
; 81   : 	{	// store a pair of values
; 82   : 	typedef pair<_Ty1, _Ty2> _Myt;
; 83   : 	typedef _Ty1 first_type;
; 84   : 	typedef _Ty2 second_type;
; 85   : 
; 86   : 	pair()
; 87   : 		: first(), second()
; 88   : 		{	// default construct
; 89   : 		}
; 90   : 
; 91   : 	pair(const _Ty1& _Val1, const _Ty2& _Val2)
; 92   : 		: first(_Val1), second(_Val2)
; 93   : 		{	// construct from specified values
; 94   : 		}
; 95   : 
; 96   : 	template<class _Other1,
; 97   : 		class _Other2,
; 98   : 		class = typename enable_if<is_convertible<const _Other1&, _Ty1>::value
; 99   : 			&& is_convertible<const _Other2&, _Ty2>::value,
; 100  : 			void>::type>
; 101  : 		pair(const pair<_Other1, _Other2>& _Right)
; 102  : 		: first(_Right.first), second(_Right.second)
; 103  : 		{	// construct from compatible pair
; 104  : 		}
; 105  : 
; 106  : 	template<class _Other1,
; 107  : 		class _Other2>
; 108  : 		_Myt& operator=(const pair<_Other1, _Other2>& _Right)
; 109  : 		{	// assign from compatible pair
; 110  : 		first = _Right.first;
; 111  : 		second = _Right.second;
; 112  : 		return (*this);
; 113  : 		}
; 114  : 
; 115  : 
; 116  : 	template<class _Tuple1,
; 117  : 		class _Tuple2,
; 118  : 		size_t... _Indexes1,
; 119  : 		size_t... _Indexes2> inline
; 120  : 		pair(_Tuple1& _Val1,
; 121  : 			_Tuple2& _Val2,
; 122  : 			_Arg_idx<_Indexes1...>,
; 123  : 			_Arg_idx<_Indexes2...>);
; 124  : 
; 125  : 	template<class... _Types1,
; 126  : 		class... _Types2> inline
; 127  : 		pair(piecewise_construct_t,
; 128  : 			tuple<_Types1...> _Val1,
; 129  : 			tuple<_Types2...> _Val2)
; 130  : 			_NOEXCEPT_OP((is_nothrow_constructible<_Ty1, _Types1&&...>::value
; 131  : 				&& is_nothrow_constructible<_Ty2, _Types2&&...>::value));
; 132  : 
; 133  : 
; 134  : 	template<class _Other1,
; 135  : 		class _Other2,
; 136  : 		class = typename enable_if<is_convertible<_Other1, _Ty1>::value
; 137  : 			&& is_convertible<_Other2, _Ty2>::value,
; 138  : 			void>::type>
; 139  : 		pair(_Other1&& _Val1, _Other2&& _Val2)
; 140  : 			_NOEXCEPT_OP((is_nothrow_constructible<_Ty1, _Other1&&>::value
; 141  : 				&& is_nothrow_constructible<_Ty2, _Other2&&>::value))
; 142  : 		: first(_STD forward<_Other1>(_Val1)),
; 143  : 				second(_STD forward<_Other2>(_Val2))
; 144  : 		{	// construct from moved values
; 145  : 		}
; 146  : 
; 147  : 	template<class _Other1,
; 148  : 		class _Other2,
; 149  : 		class = typename enable_if<is_convertible<_Other1, _Ty1>::value
; 150  : 			&& is_convertible<_Other2, _Ty2>::value,
; 151  : 			void>::type>
; 152  : 		pair(pair<_Other1, _Other2>&& _Right)
; 153  : 			_NOEXCEPT_OP((is_nothrow_constructible<_Ty1, _Other1&&>::value
; 154  : 				&& is_nothrow_constructible<_Ty2, _Other2&&>::value))
; 155  : 		: first(_STD forward<_Other1>(_Right.first)),
; 156  : 			second(_STD forward<_Other2>(_Right.second))
; 157  : 		{	// construct from moved compatible pair
; 158  : 		}
; 159  : 
; 160  : 	template<class _Other1,
; 161  : 		class _Other2>
; 162  : 		_Myt& operator=(pair<_Other1, _Other2>&& _Right)
; 163  : 			_NOEXCEPT_OP((is_nothrow_assignable<_Ty1, _Other1&&>::value
; 164  : 				&& is_nothrow_assignable<_Ty2, _Other2&&>::value))
; 165  : 		{	// assign from moved compatible pair
; 166  : 		first = _STD forward<_Other1>(_Right.first);
; 167  : 		second = _STD forward<_Other2>(_Right.second);
; 168  : 		return (*this);
; 169  : 		}
; 170  : 
; 171  : 	_Myt& operator=(_Myt&& _Right)
; 172  : 		_NOEXCEPT_OP((is_nothrow_move_assignable<_Ty1>::value
; 173  : 			&& is_nothrow_move_assignable<_Ty2>::value))
; 174  : 		{	// assign from moved pair
; 175  : 		first = _STD forward<_Ty1>(_Right.first);
; 176  : 		second = _STD forward<_Ty2>(_Right.second);
; 177  : 		return (*this);
; 178  : 		}
; 179  : 
; 180  : 	void swap(_Myt& _Right)
; 181  : 		_NOEXCEPT_OP(_NOEXCEPT_OP(_Swap_adl(this->first, _Right.first))
; 182  : 			&& _NOEXCEPT_OP(_Swap_adl(this->second, _Right.second)))
; 183  : 		{	// exchange contents with _Right
; 184  : 		if (this != &_Right)

  0001f	3b da		 cmp	 ebx, edx
  00021	74 35		 je	 SHORT $LN44@Med3

; 53   : 	_Left = _Move(_Right);

  00023	f3 0f 11 0b	 movss	 DWORD PTR [ebx], xmm1

; 52   : 	_Ty _Tmp = _Move(_Left);

  00027	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]

; 54   : 	_Right = _Move(_Tmp);

  0002a	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 52   : 	_Ty _Tmp = _Move(_Left);

  0002e	8d bd 70 ff ff
	ff		 lea	 edi, DWORD PTR __Tmp$3[ebp]
  00034	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00039	f3 a5		 rep movsd
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  0003b	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00040	8d 72 04	 lea	 esi, DWORD PTR [edx+4]
  00043	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  00046	f3 a5		 rep movsd
  00048	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0004d	8d b5 70 ff ff
	ff		 lea	 esi, DWORD PTR __Tmp$3[ebp]
  00053	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
  00056	f3 a5		 rep movsd
$LN44@Med3:
; File a:\vs\vc\include\utility

; 234  : 		(!(_Right.first < _Left.first) && _Left.second < _Right.second));

  00058	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  0005b	f3 0f 10 0b	 movss	 xmm1, DWORD PTR [ebx]
  0005f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00063	0f 2f c8	 comiss	 xmm1, xmm0
  00066	0f 86 81 00 00
	00		 jbe	 $LN124@Med3

; 55   : 	}
; 56   : 
; 57   : 		// TEMPLATE FUNCTION _Swap_adl
; 58   : template<class _Ty> inline
; 59   : 	void _Swap_adl(_Ty& _Left, _Ty& _Right)
; 60   : 	{	// exchange values stored at _Left and _Right, using ADL
; 61   : 	swap(_Left, _Right);
; 62   : 	}
; 63   : 
; 64   : 		// STRUCT piecewise_construct_t
; 65   : struct piecewise_construct_t
; 66   : 	{	// tag type for pair tuple arguments
; 67   : 	};
; 68   : 
; 69   : const piecewise_construct_t piecewise_construct =
; 70   : 	piecewise_construct_t();
; 71   : 
; 72   : 		// TEMPLATE STRUCT pair
; 73   : 
; 74   : template<class...>
; 75   : 	class tuple;
; 76   : 
; 77   : 
; 78   : template<class _Ty1,
; 79   : 	class _Ty2>
; 80   : 	struct pair
; 81   : 	{	// store a pair of values
; 82   : 	typedef pair<_Ty1, _Ty2> _Myt;
; 83   : 	typedef _Ty1 first_type;
; 84   : 	typedef _Ty2 second_type;
; 85   : 
; 86   : 	pair()
; 87   : 		: first(), second()
; 88   : 		{	// default construct
; 89   : 		}
; 90   : 
; 91   : 	pair(const _Ty1& _Val1, const _Ty2& _Val2)
; 92   : 		: first(_Val1), second(_Val2)
; 93   : 		{	// construct from specified values
; 94   : 		}
; 95   : 
; 96   : 	template<class _Other1,
; 97   : 		class _Other2,
; 98   : 		class = typename enable_if<is_convertible<const _Other1&, _Ty1>::value
; 99   : 			&& is_convertible<const _Other2&, _Ty2>::value,
; 100  : 			void>::type>
; 101  : 		pair(const pair<_Other1, _Other2>& _Right)
; 102  : 		: first(_Right.first), second(_Right.second)
; 103  : 		{	// construct from compatible pair
; 104  : 		}
; 105  : 
; 106  : 	template<class _Other1,
; 107  : 		class _Other2>
; 108  : 		_Myt& operator=(const pair<_Other1, _Other2>& _Right)
; 109  : 		{	// assign from compatible pair
; 110  : 		first = _Right.first;
; 111  : 		second = _Right.second;
; 112  : 		return (*this);
; 113  : 		}
; 114  : 
; 115  : 
; 116  : 	template<class _Tuple1,
; 117  : 		class _Tuple2,
; 118  : 		size_t... _Indexes1,
; 119  : 		size_t... _Indexes2> inline
; 120  : 		pair(_Tuple1& _Val1,
; 121  : 			_Tuple2& _Val2,
; 122  : 			_Arg_idx<_Indexes1...>,
; 123  : 			_Arg_idx<_Indexes2...>);
; 124  : 
; 125  : 	template<class... _Types1,
; 126  : 		class... _Types2> inline
; 127  : 		pair(piecewise_construct_t,
; 128  : 			tuple<_Types1...> _Val1,
; 129  : 			tuple<_Types2...> _Val2)
; 130  : 			_NOEXCEPT_OP((is_nothrow_constructible<_Ty1, _Types1&&...>::value
; 131  : 				&& is_nothrow_constructible<_Ty2, _Types2&&...>::value));
; 132  : 
; 133  : 
; 134  : 	template<class _Other1,
; 135  : 		class _Other2,
; 136  : 		class = typename enable_if<is_convertible<_Other1, _Ty1>::value
; 137  : 			&& is_convertible<_Other2, _Ty2>::value,
; 138  : 			void>::type>
; 139  : 		pair(_Other1&& _Val1, _Other2&& _Val2)
; 140  : 			_NOEXCEPT_OP((is_nothrow_constructible<_Ty1, _Other1&&>::value
; 141  : 				&& is_nothrow_constructible<_Ty2, _Other2&&>::value))
; 142  : 		: first(_STD forward<_Other1>(_Val1)),
; 143  : 				second(_STD forward<_Other2>(_Val2))
; 144  : 		{	// construct from moved values
; 145  : 		}
; 146  : 
; 147  : 	template<class _Other1,
; 148  : 		class _Other2,
; 149  : 		class = typename enable_if<is_convertible<_Other1, _Ty1>::value
; 150  : 			&& is_convertible<_Other2, _Ty2>::value,
; 151  : 			void>::type>
; 152  : 		pair(pair<_Other1, _Other2>&& _Right)
; 153  : 			_NOEXCEPT_OP((is_nothrow_constructible<_Ty1, _Other1&&>::value
; 154  : 				&& is_nothrow_constructible<_Ty2, _Other2&&>::value))
; 155  : 		: first(_STD forward<_Other1>(_Right.first)),
; 156  : 			second(_STD forward<_Other2>(_Right.second))
; 157  : 		{	// construct from moved compatible pair
; 158  : 		}
; 159  : 
; 160  : 	template<class _Other1,
; 161  : 		class _Other2>
; 162  : 		_Myt& operator=(pair<_Other1, _Other2>&& _Right)
; 163  : 			_NOEXCEPT_OP((is_nothrow_assignable<_Ty1, _Other1&&>::value
; 164  : 				&& is_nothrow_assignable<_Ty2, _Other2&&>::value))
; 165  : 		{	// assign from moved compatible pair
; 166  : 		first = _STD forward<_Other1>(_Right.first);
; 167  : 		second = _STD forward<_Other2>(_Right.second);
; 168  : 		return (*this);
; 169  : 		}
; 170  : 
; 171  : 	_Myt& operator=(_Myt&& _Right)
; 172  : 		_NOEXCEPT_OP((is_nothrow_move_assignable<_Ty1>::value
; 173  : 			&& is_nothrow_move_assignable<_Ty2>::value))
; 174  : 		{	// assign from moved pair
; 175  : 		first = _STD forward<_Ty1>(_Right.first);
; 176  : 		second = _STD forward<_Ty2>(_Right.second);
; 177  : 		return (*this);
; 178  : 		}
; 179  : 
; 180  : 	void swap(_Myt& _Right)
; 181  : 		_NOEXCEPT_OP(_NOEXCEPT_OP(_Swap_adl(this->first, _Right.first))
; 182  : 			&& _NOEXCEPT_OP(_Swap_adl(this->second, _Right.second)))
; 183  : 		{	// exchange contents with _Right
; 184  : 		if (this != &_Right)

  0006c	3b c3		 cmp	 eax, ebx
  0006e	74 35		 je	 SHORT $LN84@Med3

; 53   : 	_Left = _Move(_Right);

  00070	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1

; 52   : 	_Ty _Tmp = _Move(_Left);

  00074	8d 70 04	 lea	 esi, DWORD PTR [eax+4]

; 54   : 	_Right = _Move(_Tmp);

  00077	f3 0f 11 03	 movss	 DWORD PTR [ebx], xmm0

; 52   : 	_Ty _Tmp = _Move(_Left);

  0007b	8d bd 70 ff ff
	ff		 lea	 edi, DWORD PTR __Tmp$2[ebp]
  00081	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00086	f3 a5		 rep movsd
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00088	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0008d	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]
  00090	8d 78 04	 lea	 edi, DWORD PTR [eax+4]
  00093	f3 a5		 rep movsd
  00095	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0009a	8d b5 70 ff ff
	ff		 lea	 esi, DWORD PTR __Tmp$2[ebp]
  000a0	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  000a3	f3 a5		 rep movsd
$LN84@Med3:
; File a:\vs\vc\include\utility

; 234  : 		(!(_Right.first < _Left.first) && _Left.second < _Right.second));

  000a5	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]
  000a9	8b c2		 mov	 eax, edx
  000ab	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  000af	0f 2f c8	 comiss	 xmm1, xmm0
  000b2	76 39		 jbe	 SHORT $LN124@Med3

; 55   : 	}
; 56   : 
; 57   : 		// TEMPLATE FUNCTION _Swap_adl
; 58   : template<class _Ty> inline
; 59   : 	void _Swap_adl(_Ty& _Left, _Ty& _Right)
; 60   : 	{	// exchange values stored at _Left and _Right, using ADL
; 61   : 	swap(_Left, _Right);
; 62   : 	}
; 63   : 
; 64   : 		// STRUCT piecewise_construct_t
; 65   : struct piecewise_construct_t
; 66   : 	{	// tag type for pair tuple arguments
; 67   : 	};
; 68   : 
; 69   : const piecewise_construct_t piecewise_construct =
; 70   : 	piecewise_construct_t();
; 71   : 
; 72   : 		// TEMPLATE STRUCT pair
; 73   : 
; 74   : template<class...>
; 75   : 	class tuple;
; 76   : 
; 77   : 
; 78   : template<class _Ty1,
; 79   : 	class _Ty2>
; 80   : 	struct pair
; 81   : 	{	// store a pair of values
; 82   : 	typedef pair<_Ty1, _Ty2> _Myt;
; 83   : 	typedef _Ty1 first_type;
; 84   : 	typedef _Ty2 second_type;
; 85   : 
; 86   : 	pair()
; 87   : 		: first(), second()
; 88   : 		{	// default construct
; 89   : 		}
; 90   : 
; 91   : 	pair(const _Ty1& _Val1, const _Ty2& _Val2)
; 92   : 		: first(_Val1), second(_Val2)
; 93   : 		{	// construct from specified values
; 94   : 		}
; 95   : 
; 96   : 	template<class _Other1,
; 97   : 		class _Other2,
; 98   : 		class = typename enable_if<is_convertible<const _Other1&, _Ty1>::value
; 99   : 			&& is_convertible<const _Other2&, _Ty2>::value,
; 100  : 			void>::type>
; 101  : 		pair(const pair<_Other1, _Other2>& _Right)
; 102  : 		: first(_Right.first), second(_Right.second)
; 103  : 		{	// construct from compatible pair
; 104  : 		}
; 105  : 
; 106  : 	template<class _Other1,
; 107  : 		class _Other2>
; 108  : 		_Myt& operator=(const pair<_Other1, _Other2>& _Right)
; 109  : 		{	// assign from compatible pair
; 110  : 		first = _Right.first;
; 111  : 		second = _Right.second;
; 112  : 		return (*this);
; 113  : 		}
; 114  : 
; 115  : 
; 116  : 	template<class _Tuple1,
; 117  : 		class _Tuple2,
; 118  : 		size_t... _Indexes1,
; 119  : 		size_t... _Indexes2> inline
; 120  : 		pair(_Tuple1& _Val1,
; 121  : 			_Tuple2& _Val2,
; 122  : 			_Arg_idx<_Indexes1...>,
; 123  : 			_Arg_idx<_Indexes2...>);
; 124  : 
; 125  : 	template<class... _Types1,
; 126  : 		class... _Types2> inline
; 127  : 		pair(piecewise_construct_t,
; 128  : 			tuple<_Types1...> _Val1,
; 129  : 			tuple<_Types2...> _Val2)
; 130  : 			_NOEXCEPT_OP((is_nothrow_constructible<_Ty1, _Types1&&...>::value
; 131  : 				&& is_nothrow_constructible<_Ty2, _Types2&&...>::value));
; 132  : 
; 133  : 
; 134  : 	template<class _Other1,
; 135  : 		class _Other2,
; 136  : 		class = typename enable_if<is_convertible<_Other1, _Ty1>::value
; 137  : 			&& is_convertible<_Other2, _Ty2>::value,
; 138  : 			void>::type>
; 139  : 		pair(_Other1&& _Val1, _Other2&& _Val2)
; 140  : 			_NOEXCEPT_OP((is_nothrow_constructible<_Ty1, _Other1&&>::value
; 141  : 				&& is_nothrow_constructible<_Ty2, _Other2&&>::value))
; 142  : 		: first(_STD forward<_Other1>(_Val1)),
; 143  : 				second(_STD forward<_Other2>(_Val2))
; 144  : 		{	// construct from moved values
; 145  : 		}
; 146  : 
; 147  : 	template<class _Other1,
; 148  : 		class _Other2,
; 149  : 		class = typename enable_if<is_convertible<_Other1, _Ty1>::value
; 150  : 			&& is_convertible<_Other2, _Ty2>::value,
; 151  : 			void>::type>
; 152  : 		pair(pair<_Other1, _Other2>&& _Right)
; 153  : 			_NOEXCEPT_OP((is_nothrow_constructible<_Ty1, _Other1&&>::value
; 154  : 				&& is_nothrow_constructible<_Ty2, _Other2&&>::value))
; 155  : 		: first(_STD forward<_Other1>(_Right.first)),
; 156  : 			second(_STD forward<_Other2>(_Right.second))
; 157  : 		{	// construct from moved compatible pair
; 158  : 		}
; 159  : 
; 160  : 	template<class _Other1,
; 161  : 		class _Other2>
; 162  : 		_Myt& operator=(pair<_Other1, _Other2>&& _Right)
; 163  : 			_NOEXCEPT_OP((is_nothrow_assignable<_Ty1, _Other1&&>::value
; 164  : 				&& is_nothrow_assignable<_Ty2, _Other2&&>::value))
; 165  : 		{	// assign from moved compatible pair
; 166  : 		first = _STD forward<_Other1>(_Right.first);
; 167  : 		second = _STD forward<_Other2>(_Right.second);
; 168  : 		return (*this);
; 169  : 		}
; 170  : 
; 171  : 	_Myt& operator=(_Myt&& _Right)
; 172  : 		_NOEXCEPT_OP((is_nothrow_move_assignable<_Ty1>::value
; 173  : 			&& is_nothrow_move_assignable<_Ty2>::value))
; 174  : 		{	// assign from moved pair
; 175  : 		first = _STD forward<_Ty1>(_Right.first);
; 176  : 		second = _STD forward<_Ty2>(_Right.second);
; 177  : 		return (*this);
; 178  : 		}
; 179  : 
; 180  : 	void swap(_Myt& _Right)
; 181  : 		_NOEXCEPT_OP(_NOEXCEPT_OP(_Swap_adl(this->first, _Right.first))
; 182  : 			&& _NOEXCEPT_OP(_Swap_adl(this->second, _Right.second)))
; 183  : 		{	// exchange contents with _Right
; 184  : 		if (this != &_Right)

  000b4	3b d8		 cmp	 ebx, eax
  000b6	74 35		 je	 SHORT $LN124@Med3

; 53   : 	_Left = _Move(_Right);

  000b8	f3 0f 11 0b	 movss	 DWORD PTR [ebx], xmm1

; 52   : 	_Ty _Tmp = _Move(_Left);

  000bc	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]

; 54   : 	_Right = _Move(_Tmp);

  000bf	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 52   : 	_Ty _Tmp = _Move(_Left);

  000c3	8d bd 70 ff ff
	ff		 lea	 edi, DWORD PTR __Tmp$1[ebp]
  000c9	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  000ce	f3 a5		 rep movsd
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  000d0	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  000d5	8d 70 04	 lea	 esi, DWORD PTR [eax+4]
  000d8	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  000db	f3 a5		 rep movsd
  000dd	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  000e2	8d b5 70 ff ff
	ff		 lea	 esi, DWORD PTR __Tmp$1[ebp]
  000e8	8d 78 04	 lea	 edi, DWORD PTR [eax+4]
  000eb	f3 a5		 rep movsd
$LN124@Med3:
  000ed	5f		 pop	 edi
  000ee	5e		 pop	 esi
  000ef	5b		 pop	 ebx
; File a:\vs\vc\include\algorithm

; 3041 : 	}

  000f0	8b e5		 mov	 esp, ebp
  000f2	5d		 pop	 ebp
  000f3	c3		 ret	 0
??$_Med3@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z ENDP ; std::_Med3<std::pair<float,TFlyVertexSet> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$destroy@U?$pair@MUTFlyVertexSet@@@std@@@?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@QAEXPAU?$pair@MUTFlyVertexSet@@@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@U?$pair@MUTFlyVertexSet@@@std@@@?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@QAEXPAU?$pair@MUTFlyVertexSet@@@1@@Z PROC ; std::allocator<std::pair<float,TFlyVertexSet> >::destroy<std::pair<float,TFlyVertexSet> >, COMDAT
; _this$ = ecx

; 606  : 		{	// destroy object at _Ptr
; 607  : 		_Ptr->~_Uty();
; 608  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@U?$pair@MUTFlyVertexSet@@@std@@@?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@QAEXPAU?$pair@MUTFlyVertexSet@@@1@@Z ENDP ; std::allocator<std::pair<float,TFlyVertexSet> >::destroy<std::pair<float,TFlyVertexSet> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\type_traits
;	COMDAT ??$forward@UD3DXVECTOR3@@@std@@YA$$QAUD3DXVECTOR3@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UD3DXVECTOR3@@@std@@YA$$QAUD3DXVECTOR3@@AAU1@@Z PROC ; std::forward<D3DXVECTOR3>, COMDAT

; 1504 : 	{	// forward an lvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UD3DXVECTOR3@@@std@@YA$$QAUD3DXVECTOR3@@AAU1@@Z ENDP ; std::forward<D3DXVECTOR3>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\algorithm
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
;	COMDAT ??$_Insertion_sort1@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@U12@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@0@Z
_TEXT	SEGMENT
__Val$1 = -148						; size = 148
__Cat$2 = 8						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
___formal$ = 20						; size = 4
??$_Insertion_sort1@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@U12@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@0@Z PROC ; std::_Insertion_sort1<std::pair<float,TFlyVertexSet> *,std::less<void>,std::pair<float,TFlyVertexSet> >, COMDAT

; 2999 : 	{	// insertion sort [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3000 : 	if (_First != _Last)

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00006	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  0000c	53		 push	 ebx
  0000d	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  00010	3b d8		 cmp	 ebx, eax
  00012	0f 84 c1 00 00
	00		 je	 $LN6@Insertion_

; 3001 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

  00018	81 c3 94 00 00
	00		 add	 ebx, 148		; 00000094H
  0001e	3b d8		 cmp	 ebx, eax
  00020	0f 84 b3 00 00
	00		 je	 $LN6@Insertion_
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL7@Insertion_:
; File a:\vs\vc\include\utility

; 157  : 		{	// construct from moved compatible pair

  00030	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]
; File a:\vs\vc\include\algorithm

; 3001 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

  00034	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]
; File a:\vs\vc\include\utility

; 157  : 		{	// construct from moved compatible pair

  00037	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR __Val$1[ebp], xmm0
  0003f	8d bd 70 ff ff
	ff		 lea	 edi, DWORD PTR __Val$1[ebp+4]
  00045	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
; File a:\vs\vc\include\algorithm

; 3003 : 			_BidIt _Next1 = _Next;

  0004a	8b d3		 mov	 edx, ebx
; File a:\vs\vc\include\utility

; 157  : 		{	// construct from moved compatible pair

  0004c	f3 a5		 rep movsd

; 234  : 		(!(_Right.first < _Left.first) && _Left.second < _Right.second));

  0004e	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00051	f3 0f 10 8d 6c
	ff ff ff	 movss	 xmm1, DWORD PTR __Val$1[ebp]
  00059	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  0005d	0f 2f c1	 comiss	 xmm0, xmm1
  00060	76 25		 jbe	 SHORT $LN5@Insertion_
; File a:\vs\vc\include\xutility

; 2548 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00062	ff 75 08	 push	 DWORD PTR __Cat$2[ebp]
; File a:\vs\vc\include\algorithm

; 3001 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

  00065	8d 83 94 00 00
	00		 lea	 eax, DWORD PTR [ebx+148]
; File a:\vs\vc\include\xutility

; 2548 : 		_Dest, _Ptr_cat(_First, _Dest)));

  0006b	50		 push	 eax
  0006c	53		 push	 ebx
  0006d	56		 push	 esi
  0006e	e8 00 00 00 00	 call	 ??$_Move_backward@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move_backward<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *>
; File a:\vs\vc\include\utility

; 175  : 		first = _STD forward<_Ty1>(_Right.first);

  00073	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR __Val$1[ebp]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  0007b	8d 7e 04	 lea	 edi, DWORD PTR [esi+4]
; File a:\vs\vc\include\xutility

; 2548 : 		_Dest, _Ptr_cat(_First, _Dest)));

  0007e	83 c4 10	 add	 esp, 16			; 00000010H
; File a:\vs\vc\include\utility

; 175  : 		first = _STD forward<_Ty1>(_Right.first);

  00081	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
; File a:\vs\vc\include\algorithm

; 3011 : 			else

  00085	eb 34		 jmp	 SHORT $LN80@Insertion_
$LN5@Insertion_:

; 3012 : 				{	// look for insertion point after first
; 3013 : 				for (_BidIt _First1 = _Next1;

  00087	8b c3		 mov	 eax, ebx
  00089	8d a4 24 00 00
	00 00		 npad	 7
$LL3@Insertion_:
; File a:\vs\vc\include\utility

; 234  : 		(!(_Right.first < _Left.first) && _Left.second < _Right.second));

  00090	f3 0f 10 80 6c
	ff ff ff	 movss	 xmm0, DWORD PTR [eax-148]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00098	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
; File a:\vs\vc\include\algorithm

; 3015 : 					_Next1 = _First1)

  0009b	2d 94 00 00 00	 sub	 eax, 148		; 00000094H
; File a:\vs\vc\include\utility

; 234  : 		(!(_Right.first < _Left.first) && _Left.second < _Right.second));

  000a0	0f 2f c1	 comiss	 xmm0, xmm1
  000a3	76 12		 jbe	 SHORT $LN79@Insertion_

; 175  : 		first = _STD forward<_Ty1>(_Right.first);

  000a5	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  000a9	8d 70 04	 lea	 esi, DWORD PTR [eax+4]
  000ac	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
; File a:\vs\vc\include\algorithm

; 3015 : 					_Next1 = _First1)

  000b1	8b d0		 mov	 edx, eax
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  000b3	f3 a5		 rep movsd
; File a:\vs\vc\include\algorithm

; 3015 : 					_Next1 = _First1)

  000b5	eb d9		 jmp	 SHORT $LL3@Insertion_
$LN79@Insertion_:
; File a:\vs\vc\include\utility

; 175  : 		first = _STD forward<_Ty1>(_Right.first);

  000b7	f3 0f 11 0a	 movss	 DWORD PTR [edx], xmm1
$LN80@Insertion_:
; File a:\vs\vc\include\algorithm

; 3001 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

  000bb	81 c3 94 00 00
	00		 add	 ebx, 148		; 00000094H
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  000c1	8d b5 70 ff ff
	ff		 lea	 esi, DWORD PTR __Val$1[ebp+4]
  000c7	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  000cc	f3 a5		 rep movsd
; File a:\vs\vc\include\algorithm

; 3001 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

  000ce	3b 5d 0c	 cmp	 ebx, DWORD PTR __Last$[ebp]
  000d1	0f 85 59 ff ff
	ff		 jne	 $LL7@Insertion_
  000d7	5f		 pop	 edi
  000d8	5e		 pop	 esi
$LN6@Insertion_:
  000d9	5b		 pop	 ebx

; 3016 : 					*_Next1 = _Move(*_First1);	// move hole down
; 3017 : 				*_Next1 = _Move(_Val);	// insert element in hole
; 3018 : 				}
; 3019 : 			}
; 3020 : 	}

  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c3		 ret	 0
??$_Insertion_sort1@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@U12@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@0@Z ENDP ; std::_Insertion_sort1<std::pair<float,TFlyVertexSet> *,std::less<void>,std::pair<float,TFlyVertexSet> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
;	COMDAT ??$_Sort_heap@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z
_TEXT	SEGMENT
__Val$1 = -152						; size = 148
tv224 = -4						; size = 4
tv227 = 8						; size = 4
__First$ = 8						; size = 4
tv228 = 12						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Sort_heap@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z PROC ; std::_Sort_heap<std::pair<float,TFlyVertexSet> *,std::less<void> >, COMDAT

; 2475 : 	{	// order heap by repeatedly popping, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H

; 2476 : 	for (; 1 < _Last - _First; --_Last)

  00009	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  0000e	53		 push	 ebx
  0000f	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  00012	56		 push	 esi
  00013	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00016	8b ce		 mov	 ecx, esi
  00018	2b cb		 sub	 ecx, ebx
  0001a	f7 e9		 imul	 ecx
  0001c	03 d1		 add	 edx, ecx
  0001e	c1 fa 07	 sar	 edx, 7
  00021	8b c2		 mov	 eax, edx
  00023	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00026	03 c2		 add	 eax, edx
  00028	83 f8 01	 cmp	 eax, 1
  0002b	0f 8e aa 00 00
	00		 jle	 $LN1@Sort_heap
  00031	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00036	8d 96 70 ff ff
	ff		 lea	 edx, DWORD PTR [esi-144]
  0003c	2b c3		 sub	 eax, ebx
  0003e	89 55 0c	 mov	 DWORD PTR tv228[ebp], edx
  00041	89 45 08	 mov	 DWORD PTR tv227[ebp], eax
  00044	b8 90 00 00 00	 mov	 eax, 144		; 00000090H
  00049	2b c3		 sub	 eax, ebx
  0004b	89 45 fc	 mov	 DWORD PTR tv224[ebp], eax
  0004e	57		 push	 edi
  0004f	90		 npad	 1
$LL3@Sort_heap:
; File a:\vs\vc\include\utility

; 157  : 		{	// construct from moved compatible pair

  00050	f3 0f 10 42 fc	 movss	 xmm0, DWORD PTR [edx-4]
  00055	8d bd 6c ff ff
	ff		 lea	 edi, DWORD PTR __Val$1[ebp+4]

; 158  : 		}
; 159  : 
; 160  : 	template<class _Other1,
; 161  : 		class _Other2>
; 162  : 		_Myt& operator=(pair<_Other1, _Other2>&& _Right)
; 163  : 			_NOEXCEPT_OP((is_nothrow_assignable<_Ty1, _Other1&&>::value
; 164  : 				&& is_nothrow_assignable<_Ty2, _Other2&&>::value))
; 165  : 		{	// assign from moved compatible pair
; 166  : 		first = _STD forward<_Other1>(_Right.first);
; 167  : 		second = _STD forward<_Other2>(_Right.second);
; 168  : 		return (*this);
; 169  : 		}
; 170  : 
; 171  : 	_Myt& operator=(_Myt&& _Right)
; 172  : 		_NOEXCEPT_OP((is_nothrow_move_assignable<_Ty1>::value
; 173  : 			&& is_nothrow_move_assignable<_Ty2>::value))
; 174  : 		{	// assign from moved pair
; 175  : 		first = _STD forward<_Ty1>(_Right.first);

  0005b	8b 03		 mov	 eax, DWORD PTR [ebx]

; 157  : 		{	// construct from moved compatible pair

  0005d	8b f2		 mov	 esi, edx
; File a:\vs\vc\include\algorithm

; 2397 : 		_Move(_Val), _Pred);

  0005f	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
; File a:\vs\vc\include\utility

; 157  : 		{	// construct from moved compatible pair

  00062	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR __Val$1[ebp], xmm0
  0006a	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0006f	f3 a5		 rep movsd

; 158  : 		}
; 159  : 
; 160  : 	template<class _Other1,
; 161  : 		class _Other2>
; 162  : 		_Myt& operator=(pair<_Other1, _Other2>&& _Right)
; 163  : 			_NOEXCEPT_OP((is_nothrow_assignable<_Ty1, _Other1&&>::value
; 164  : 				&& is_nothrow_assignable<_Ty2, _Other2&&>::value))
; 165  : 		{	// assign from moved compatible pair
; 166  : 		first = _STD forward<_Other1>(_Right.first);
; 167  : 		second = _STD forward<_Other2>(_Right.second);
; 168  : 		return (*this);
; 169  : 		}
; 170  : 
; 171  : 	_Myt& operator=(_Myt&& _Right)
; 172  : 		_NOEXCEPT_OP((is_nothrow_move_assignable<_Ty1>::value
; 173  : 			&& is_nothrow_move_assignable<_Ty2>::value))
; 174  : 		{	// assign from moved pair
; 175  : 		first = _STD forward<_Ty1>(_Right.first);

  00071	89 42 fc	 mov	 DWORD PTR [edx-4], eax
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00074	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]
  00077	8b fa		 mov	 edi, edx
; File a:\vs\vc\include\algorithm

; 2397 : 		_Move(_Val), _Pred);

  00079	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR __Val$1[ebp]
  0007f	50		 push	 eax
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00080	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
; File a:\vs\vc\include\algorithm

; 2397 : 		_Move(_Val), _Pred);

  00085	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  0008a	f3 a5		 rep movsd
; File a:\vs\vc\include\algorithm

; 2397 : 		_Move(_Val), _Pred);

  0008c	8b 4d 08	 mov	 ecx, DWORD PTR tv227[ebp]
  0008f	03 ca		 add	 ecx, edx
  00091	f7 e9		 imul	 ecx
  00093	03 d1		 add	 edx, ecx
  00095	c1 fa 07	 sar	 edx, 7
  00098	8b c2		 mov	 eax, edx
  0009a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0009d	03 c2		 add	 eax, edx
  0009f	50		 push	 eax
  000a0	6a 00		 push	 0
  000a2	53		 push	 ebx
  000a3	e8 00 00 00 00	 call	 ??$_Adjust_heap@PAU?$pair@MUTFlyVertexSet@@@std@@HU12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@HH$$QAU10@U?$less@X@0@@Z ; std::_Adjust_heap<std::pair<float,TFlyVertexSet> *,int,std::pair<float,TFlyVertexSet>,std::less<void> >

; 2476 : 	for (; 1 < _Last - _First; --_Last)

  000a8	8b 45 0c	 mov	 eax, DWORD PTR tv228[ebp]

; 2397 : 		_Move(_Val), _Pred);

  000ab	83 c4 14	 add	 esp, 20			; 00000014H

; 2476 : 	for (; 1 < _Last - _First; --_Last)

  000ae	8b 4d fc	 mov	 ecx, DWORD PTR tv224[ebp]
  000b1	2d 94 00 00 00	 sub	 eax, 148		; 00000094H
  000b6	03 c8		 add	 ecx, eax
  000b8	89 45 0c	 mov	 DWORD PTR tv228[ebp], eax
  000bb	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  000c0	f7 e9		 imul	 ecx
  000c2	03 d1		 add	 edx, ecx
  000c4	c1 fa 07	 sar	 edx, 7
  000c7	8b c2		 mov	 eax, edx
  000c9	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000cc	03 c2		 add	 eax, edx
  000ce	8b 55 0c	 mov	 edx, DWORD PTR tv228[ebp]
  000d1	83 f8 01	 cmp	 eax, 1
  000d4	0f 8f 76 ff ff
	ff		 jg	 $LL3@Sort_heap
  000da	5f		 pop	 edi
$LN1@Sort_heap:
  000db	5e		 pop	 esi
  000dc	5b		 pop	 ebx

; 2477 : 		_Pop_heap(_First, _Last, _Pred);
; 2478 : 	}

  000dd	8b e5		 mov	 esp, ebp
  000df	5d		 pop	 ebp
  000e0	c3		 ret	 0
??$_Sort_heap@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z ENDP ; std::_Sort_heap<std::pair<float,TFlyVertexSet> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\algorithm
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
;	COMDAT ??$_Make_heap@PAU?$pair@MUTFlyVertexSet@@@std@@HU12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@PAH0@Z
_TEXT	SEGMENT
__Val$1 = -156						; size = 148
tv324 = -8						; size = 4
tv325 = -4						; size = 4
__Hole$1$ = 8						; size = 4
__First$ = 8						; size = 4
__Bottom$1$ = 12					; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
??$_Make_heap@PAU?$pair@MUTFlyVertexSet@@@std@@HU12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@PAH0@Z PROC ; std::_Make_heap<std::pair<float,TFlyVertexSet> *,int,std::pair<float,TFlyVertexSet>,std::less<void> >, COMDAT

; 2442 : 	{	// make nontrivial [_First, _Last) into a heap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 9c 00 00
	00		 sub	 esp, 156		; 0000009cH

; 2443 : 	_Diff _Bottom = _Last - _First;

  00009	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0000c	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00011	53		 push	 ebx
  00012	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  00015	2b cb		 sub	 ecx, ebx
  00017	f7 e9		 imul	 ecx
  00019	03 d1		 add	 edx, ecx
  0001b	c1 fa 07	 sar	 edx, 7
  0001e	8b c2		 mov	 eax, edx
  00020	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00023	03 c2		 add	 eax, edx
  00025	89 45 0c	 mov	 DWORD PTR __Bottom$1$[ebp], eax

; 2444 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

  00028	99		 cdq
  00029	2b c2		 sub	 eax, edx
  0002b	d1 f8		 sar	 eax, 1
  0002d	85 c0		 test	 eax, eax
  0002f	0f 8e fd 00 00
	00		 jle	 $LN1@Make_heap

; 2443 : 	_Diff _Bottom = _Last - _First;

  00035	69 c8 94 00 00
	00		 imul	 ecx, eax, 148
  0003b	8d 14 45 02 00
	00 00		 lea	 edx, DWORD PTR [eax*2+2]
  00042	56		 push	 esi
  00043	57		 push	 edi
  00044	03 cb		 add	 ecx, ebx
  00046	eb 08 8d a4 24
	00 00 00 00 90	 npad	 10
$LL2@Make_heap:
; File a:\vs\vc\include\utility

; 157  : 		{	// construct from moved compatible pair

  00050	f3 0f 10 81 6c
	ff ff ff	 movss	 xmm0, DWORD PTR [ecx-148]
  00058	8d bd 68 ff ff
	ff		 lea	 edi, DWORD PTR __Val$1[ebp+4]
; File a:\vs\vc\include\algorithm

; 2446 : 		--_Hole;

  0005e	81 e9 94 00 00
	00		 sub	 ecx, 148		; 00000094H
; File a:\vs\vc\include\utility

; 157  : 		{	// construct from moved compatible pair

  00064	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR __Val$1[ebp], xmm0
; File a:\vs\vc\include\algorithm

; 2446 : 		--_Hole;

  0006c	89 4d f8	 mov	 DWORD PTR tv324[ebp], ecx
  0006f	48		 dec	 eax
  00070	83 ea 02	 sub	 edx, 2
  00073	89 45 08	 mov	 DWORD PTR __Hole$1$[ebp], eax
  00076	89 55 fc	 mov	 DWORD PTR tv325[ebp], edx
; File a:\vs\vc\include\utility

; 157  : 		{	// construct from moved compatible pair

  00079	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
  0007c	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00081	f3 a5		 rep movsd
; File a:\vs\vc\include\algorithm

; 2449 : 			_Move(_Val), _Pred);

  00083	8b f8		 mov	 edi, eax

; 2372 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

  00085	8b 45 0c	 mov	 eax, DWORD PTR __Bottom$1$[ebp]
  00088	3b d0		 cmp	 edx, eax
  0008a	7d 4b		 jge	 SHORT $LN17@Make_heap
  0008c	8d 64 24 00	 npad	 4
$LL19@Make_heap:

; 2373 : 		{	// move _Hole down to larger child
; 2374 : 		if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1))))

  00090	69 c2 94 00 00
	00		 imul	 eax, edx, 148
; File a:\vs\vc\include\utility

; 234  : 		(!(_Right.first < _Left.first) && _Left.second < _Right.second));

  00096	f3 0f 10 84 18
	6c ff ff ff	 movss	 xmm0, DWORD PTR [eax+ebx-148]
  0009f	0f 2f 04 18	 comiss	 xmm0, DWORD PTR [eax+ebx]
  000a3	76 01		 jbe	 SHORT $LN16@Make_heap
; File a:\vs\vc\include\algorithm

; 2375 : 			--_Idx;

  000a5	4a		 dec	 edx
$LN16@Make_heap:

; 2376 : 		*(_First + _Hole) = _Move(*(_First + _Idx));

  000a6	69 ff 94 00 00
	00		 imul	 edi, edi, 148
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  000ac	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
; File a:\vs\vc\include\algorithm

; 2376 : 		*(_First + _Hole) = _Move(*(_First + _Idx));

  000b1	69 f2 94 00 00
	00		 imul	 esi, edx, 148
  000b7	03 fb		 add	 edi, ebx
  000b9	03 f3		 add	 esi, ebx
; File a:\vs\vc\include\utility

; 175  : 		first = _STD forward<_Ty1>(_Right.first);

  000bb	8b 06		 mov	 eax, DWORD PTR [esi]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  000bd	83 c6 04	 add	 esi, 4
; File a:\vs\vc\include\utility

; 175  : 		first = _STD forward<_Ty1>(_Right.first);

  000c0	89 07		 mov	 DWORD PTR [edi], eax
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  000c2	83 c7 04	 add	 edi, 4
; File a:\vs\vc\include\algorithm

; 2372 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

  000c5	8b 45 0c	 mov	 eax, DWORD PTR __Bottom$1$[ebp]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  000c8	f3 a5		 rep movsd
; File a:\vs\vc\include\algorithm

; 2377 : 		_Hole = _Idx;

  000ca	8b fa		 mov	 edi, edx
  000cc	8d 14 55 02 00
	00 00		 lea	 edx, DWORD PTR [edx*2+2]
  000d3	3b d0		 cmp	 edx, eax
  000d5	7c b9		 jl	 SHORT $LL19@Make_heap
$LN17@Make_heap:

; 2378 : 		}
; 2379 : 
; 2380 : 	if (_Idx == _Bottom)

  000d7	3b d0		 cmp	 edx, eax
  000d9	75 2d		 jne	 SHORT $LN15@Make_heap

; 2382 : 		*(_First + _Hole) = _Move(*(_First + (_Bottom - 1)));

  000db	69 ff 94 00 00
	00		 imul	 edi, edi, 148
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  000e1	8d b3 70 ff ff
	ff		 lea	 esi, DWORD PTR [ebx-144]
; File a:\vs\vc\include\algorithm

; 2382 : 		*(_First + _Hole) = _Move(*(_First + (_Bottom - 1)));

  000e7	69 c8 94 00 00
	00		 imul	 ecx, eax, 148
  000ed	03 fb		 add	 edi, ebx
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  000ef	03 f1		 add	 esi, ecx
; File a:\vs\vc\include\utility

; 175  : 		first = _STD forward<_Ty1>(_Right.first);

  000f1	8b 84 19 6c ff
	ff ff		 mov	 eax, DWORD PTR [ecx+ebx-148]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  000f8	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
; File a:\vs\vc\include\utility

; 175  : 		first = _STD forward<_Ty1>(_Right.first);

  000fd	89 07		 mov	 DWORD PTR [edi], eax
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  000ff	83 c7 04	 add	 edi, 4
  00102	f3 a5		 rep movsd
; File a:\vs\vc\include\algorithm

; 2383 : 		_Hole = _Bottom - 1;

  00104	8b 7d 0c	 mov	 edi, DWORD PTR __Bottom$1$[ebp]
  00107	4f		 dec	 edi
$LN15@Make_heap:

; 2384 : 		}
; 2385 : 	_Push_heap(_First, _Hole, _Top, _Move(_Val), _Pred);

  00108	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  0010b	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR __Val$1[ebp]
  00111	50		 push	 eax
  00112	ff 75 08	 push	 DWORD PTR __Hole$1$[ebp]
  00115	57		 push	 edi
  00116	53		 push	 ebx
  00117	e8 00 00 00 00	 call	 ??$_Push_heap@PAU?$pair@MUTFlyVertexSet@@@std@@HU12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@HH$$QAU10@U?$less@X@0@@Z ; std::_Push_heap<std::pair<float,TFlyVertexSet> *,int,std::pair<float,TFlyVertexSet>,std::less<void> >

; 2444 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

  0011c	8b 45 08	 mov	 eax, DWORD PTR __Hole$1$[ebp]

; 2384 : 		}
; 2385 : 	_Push_heap(_First, _Hole, _Top, _Move(_Val), _Pred);

  0011f	83 c4 14	 add	 esp, 20			; 00000014H

; 2444 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

  00122	8b 4d f8	 mov	 ecx, DWORD PTR tv324[ebp]
  00125	8b 55 fc	 mov	 edx, DWORD PTR tv325[ebp]
  00128	85 c0		 test	 eax, eax
  0012a	0f 8f 20 ff ff
	ff		 jg	 $LL2@Make_heap
  00130	5f		 pop	 edi
  00131	5e		 pop	 esi
$LN1@Make_heap:
  00132	5b		 pop	 ebx

; 2450 : 		}
; 2451 : 	}

  00133	8b e5		 mov	 esp, ebp
  00135	5d		 pop	 ebp
  00136	c3		 ret	 0
??$_Make_heap@PAU?$pair@MUTFlyVertexSet@@@std@@HU12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@PAH0@Z ENDP ; std::_Make_heap<std::pair<float,TFlyVertexSet> *,int,std::pair<float,TFlyVertexSet>,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??$_Dist_type@PAU?$pair@MUTFlyVertexSet@@@std@@@std@@YAPAHPAU?$pair@MUTFlyVertexSet@@@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Dist_type@PAU?$pair@MUTFlyVertexSet@@@std@@@std@@YAPAHPAU?$pair@MUTFlyVertexSet@@@0@@Z PROC ; std::_Dist_type<std::pair<float,TFlyVertexSet> *>, COMDAT

; 706  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 707  : 	}

  00002	c3		 ret	 0
??$_Dist_type@PAU?$pair@MUTFlyVertexSet@@@std@@@std@@YAPAHPAU?$pair@MUTFlyVertexSet@@@0@@Z ENDP ; std::_Dist_type<std::pair<float,TFlyVertexSet> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\utility
;	COMDAT ??$?0AAPAU?$pair@MUTFlyVertexSet@@@std@@AAPAU01@X@?$pair@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@std@@QAE@AAPAU?$pair@MUTFlyVertexSet@@@1@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAU?$pair@MUTFlyVertexSet@@@std@@AAPAU01@X@?$pair@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@std@@QAE@AAPAU?$pair@MUTFlyVertexSet@@@1@0@Z PROC ; std::pair<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *>::pair<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *><std::pair<float,TFlyVertexSet> * &,std::pair<float,TFlyVertexSet> * &,void>, COMDAT
; _this$ = ecx

; 144  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax
  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 145  : 		}

  00012	8b c1		 mov	 eax, ecx
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAPAU?$pair@MUTFlyVertexSet@@@std@@AAPAU01@X@?$pair@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@std@@QAE@AAPAU?$pair@MUTFlyVertexSet@@@1@0@Z ENDP ; std::pair<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *>::pair<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *><std::pair<float,TFlyVertexSet> * &,std::pair<float,TFlyVertexSet> * &,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\utility
;	COMDAT ??$iter_swap@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0@Z
_TEXT	SEGMENT
__Tmp$1 = -144						; size = 144
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$iter_swap@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0@Z PROC ; std::iter_swap<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *>, COMDAT

; 27   : 	{	// swap *_Left and *_Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 55   : 	}
; 56   : 
; 57   : 		// TEMPLATE FUNCTION _Swap_adl
; 58   : template<class _Ty> inline
; 59   : 	void _Swap_adl(_Ty& _Left, _Ty& _Right)
; 60   : 	{	// exchange values stored at _Left and _Right, using ADL
; 61   : 	swap(_Left, _Right);
; 62   : 	}
; 63   : 
; 64   : 		// STRUCT piecewise_construct_t
; 65   : struct piecewise_construct_t
; 66   : 	{	// tag type for pair tuple arguments
; 67   : 	};
; 68   : 
; 69   : const piecewise_construct_t piecewise_construct =
; 70   : 	piecewise_construct_t();
; 71   : 
; 72   : 		// TEMPLATE STRUCT pair
; 73   : 
; 74   : template<class...>
; 75   : 	class tuple;
; 76   : 
; 77   : 
; 78   : template<class _Ty1,
; 79   : 	class _Ty2>
; 80   : 	struct pair
; 81   : 	{	// store a pair of values
; 82   : 	typedef pair<_Ty1, _Ty2> _Myt;
; 83   : 	typedef _Ty1 first_type;
; 84   : 	typedef _Ty2 second_type;
; 85   : 
; 86   : 	pair()
; 87   : 		: first(), second()
; 88   : 		{	// default construct
; 89   : 		}
; 90   : 
; 91   : 	pair(const _Ty1& _Val1, const _Ty2& _Val2)
; 92   : 		: first(_Val1), second(_Val2)
; 93   : 		{	// construct from specified values
; 94   : 		}
; 95   : 
; 96   : 	template<class _Other1,
; 97   : 		class _Other2,
; 98   : 		class = typename enable_if<is_convertible<const _Other1&, _Ty1>::value
; 99   : 			&& is_convertible<const _Other2&, _Ty2>::value,
; 100  : 			void>::type>
; 101  : 		pair(const pair<_Other1, _Other2>& _Right)
; 102  : 		: first(_Right.first), second(_Right.second)
; 103  : 		{	// construct from compatible pair
; 104  : 		}
; 105  : 
; 106  : 	template<class _Other1,
; 107  : 		class _Other2>
; 108  : 		_Myt& operator=(const pair<_Other1, _Other2>& _Right)
; 109  : 		{	// assign from compatible pair
; 110  : 		first = _Right.first;
; 111  : 		second = _Right.second;
; 112  : 		return (*this);
; 113  : 		}
; 114  : 
; 115  : 
; 116  : 	template<class _Tuple1,
; 117  : 		class _Tuple2,
; 118  : 		size_t... _Indexes1,
; 119  : 		size_t... _Indexes2> inline
; 120  : 		pair(_Tuple1& _Val1,
; 121  : 			_Tuple2& _Val2,
; 122  : 			_Arg_idx<_Indexes1...>,
; 123  : 			_Arg_idx<_Indexes2...>);
; 124  : 
; 125  : 	template<class... _Types1,
; 126  : 		class... _Types2> inline
; 127  : 		pair(piecewise_construct_t,
; 128  : 			tuple<_Types1...> _Val1,
; 129  : 			tuple<_Types2...> _Val2)
; 130  : 			_NOEXCEPT_OP((is_nothrow_constructible<_Ty1, _Types1&&...>::value
; 131  : 				&& is_nothrow_constructible<_Ty2, _Types2&&...>::value));
; 132  : 
; 133  : 
; 134  : 	template<class _Other1,
; 135  : 		class _Other2,
; 136  : 		class = typename enable_if<is_convertible<_Other1, _Ty1>::value
; 137  : 			&& is_convertible<_Other2, _Ty2>::value,
; 138  : 			void>::type>
; 139  : 		pair(_Other1&& _Val1, _Other2&& _Val2)
; 140  : 			_NOEXCEPT_OP((is_nothrow_constructible<_Ty1, _Other1&&>::value
; 141  : 				&& is_nothrow_constructible<_Ty2, _Other2&&>::value))
; 142  : 		: first(_STD forward<_Other1>(_Val1)),
; 143  : 				second(_STD forward<_Other2>(_Val2))
; 144  : 		{	// construct from moved values
; 145  : 		}
; 146  : 
; 147  : 	template<class _Other1,
; 148  : 		class _Other2,
; 149  : 		class = typename enable_if<is_convertible<_Other1, _Ty1>::value
; 150  : 			&& is_convertible<_Other2, _Ty2>::value,
; 151  : 			void>::type>
; 152  : 		pair(pair<_Other1, _Other2>&& _Right)
; 153  : 			_NOEXCEPT_OP((is_nothrow_constructible<_Ty1, _Other1&&>::value
; 154  : 				&& is_nothrow_constructible<_Ty2, _Other2&&>::value))
; 155  : 		: first(_STD forward<_Other1>(_Right.first)),
; 156  : 			second(_STD forward<_Other2>(_Right.second))
; 157  : 		{	// construct from moved compatible pair
; 158  : 		}
; 159  : 
; 160  : 	template<class _Other1,
; 161  : 		class _Other2>
; 162  : 		_Myt& operator=(pair<_Other1, _Other2>&& _Right)
; 163  : 			_NOEXCEPT_OP((is_nothrow_assignable<_Ty1, _Other1&&>::value
; 164  : 				&& is_nothrow_assignable<_Ty2, _Other2&&>::value))
; 165  : 		{	// assign from moved compatible pair
; 166  : 		first = _STD forward<_Other1>(_Right.first);
; 167  : 		second = _STD forward<_Other2>(_Right.second);
; 168  : 		return (*this);
; 169  : 		}
; 170  : 
; 171  : 	_Myt& operator=(_Myt&& _Right)
; 172  : 		_NOEXCEPT_OP((is_nothrow_move_assignable<_Ty1>::value
; 173  : 			&& is_nothrow_move_assignable<_Ty2>::value))
; 174  : 		{	// assign from moved pair
; 175  : 		first = _STD forward<_Ty1>(_Right.first);
; 176  : 		second = _STD forward<_Ty2>(_Right.second);
; 177  : 		return (*this);
; 178  : 		}
; 179  : 
; 180  : 	void swap(_Myt& _Right)
; 181  : 		_NOEXCEPT_OP(_NOEXCEPT_OP(_Swap_adl(this->first, _Right.first))
; 182  : 			&& _NOEXCEPT_OP(_Swap_adl(this->second, _Right.second)))
; 183  : 		{	// exchange contents with _Right
; 184  : 		if (this != &_Right)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]

; 27   : 	{	// swap *_Left and *_Right

  00006	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H

; 55   : 	}
; 56   : 
; 57   : 		// TEMPLATE FUNCTION _Swap_adl
; 58   : template<class _Ty> inline
; 59   : 	void _Swap_adl(_Ty& _Left, _Ty& _Right)
; 60   : 	{	// exchange values stored at _Left and _Right, using ADL
; 61   : 	swap(_Left, _Right);
; 62   : 	}
; 63   : 
; 64   : 		// STRUCT piecewise_construct_t
; 65   : struct piecewise_construct_t
; 66   : 	{	// tag type for pair tuple arguments
; 67   : 	};
; 68   : 
; 69   : const piecewise_construct_t piecewise_construct =
; 70   : 	piecewise_construct_t();
; 71   : 
; 72   : 		// TEMPLATE STRUCT pair
; 73   : 
; 74   : template<class...>
; 75   : 	class tuple;
; 76   : 
; 77   : 
; 78   : template<class _Ty1,
; 79   : 	class _Ty2>
; 80   : 	struct pair
; 81   : 	{	// store a pair of values
; 82   : 	typedef pair<_Ty1, _Ty2> _Myt;
; 83   : 	typedef _Ty1 first_type;
; 84   : 	typedef _Ty2 second_type;
; 85   : 
; 86   : 	pair()
; 87   : 		: first(), second()
; 88   : 		{	// default construct
; 89   : 		}
; 90   : 
; 91   : 	pair(const _Ty1& _Val1, const _Ty2& _Val2)
; 92   : 		: first(_Val1), second(_Val2)
; 93   : 		{	// construct from specified values
; 94   : 		}
; 95   : 
; 96   : 	template<class _Other1,
; 97   : 		class _Other2,
; 98   : 		class = typename enable_if<is_convertible<const _Other1&, _Ty1>::value
; 99   : 			&& is_convertible<const _Other2&, _Ty2>::value,
; 100  : 			void>::type>
; 101  : 		pair(const pair<_Other1, _Other2>& _Right)
; 102  : 		: first(_Right.first), second(_Right.second)
; 103  : 		{	// construct from compatible pair
; 104  : 		}
; 105  : 
; 106  : 	template<class _Other1,
; 107  : 		class _Other2>
; 108  : 		_Myt& operator=(const pair<_Other1, _Other2>& _Right)
; 109  : 		{	// assign from compatible pair
; 110  : 		first = _Right.first;
; 111  : 		second = _Right.second;
; 112  : 		return (*this);
; 113  : 		}
; 114  : 
; 115  : 
; 116  : 	template<class _Tuple1,
; 117  : 		class _Tuple2,
; 118  : 		size_t... _Indexes1,
; 119  : 		size_t... _Indexes2> inline
; 120  : 		pair(_Tuple1& _Val1,
; 121  : 			_Tuple2& _Val2,
; 122  : 			_Arg_idx<_Indexes1...>,
; 123  : 			_Arg_idx<_Indexes2...>);
; 124  : 
; 125  : 	template<class... _Types1,
; 126  : 		class... _Types2> inline
; 127  : 		pair(piecewise_construct_t,
; 128  : 			tuple<_Types1...> _Val1,
; 129  : 			tuple<_Types2...> _Val2)
; 130  : 			_NOEXCEPT_OP((is_nothrow_constructible<_Ty1, _Types1&&...>::value
; 131  : 				&& is_nothrow_constructible<_Ty2, _Types2&&...>::value));
; 132  : 
; 133  : 
; 134  : 	template<class _Other1,
; 135  : 		class _Other2,
; 136  : 		class = typename enable_if<is_convertible<_Other1, _Ty1>::value
; 137  : 			&& is_convertible<_Other2, _Ty2>::value,
; 138  : 			void>::type>
; 139  : 		pair(_Other1&& _Val1, _Other2&& _Val2)
; 140  : 			_NOEXCEPT_OP((is_nothrow_constructible<_Ty1, _Other1&&>::value
; 141  : 				&& is_nothrow_constructible<_Ty2, _Other2&&>::value))
; 142  : 		: first(_STD forward<_Other1>(_Val1)),
; 143  : 				second(_STD forward<_Other2>(_Val2))
; 144  : 		{	// construct from moved values
; 145  : 		}
; 146  : 
; 147  : 	template<class _Other1,
; 148  : 		class _Other2,
; 149  : 		class = typename enable_if<is_convertible<_Other1, _Ty1>::value
; 150  : 			&& is_convertible<_Other2, _Ty2>::value,
; 151  : 			void>::type>
; 152  : 		pair(pair<_Other1, _Other2>&& _Right)
; 153  : 			_NOEXCEPT_OP((is_nothrow_constructible<_Ty1, _Other1&&>::value
; 154  : 				&& is_nothrow_constructible<_Ty2, _Other2&&>::value))
; 155  : 		: first(_STD forward<_Other1>(_Right.first)),
; 156  : 			second(_STD forward<_Other2>(_Right.second))
; 157  : 		{	// construct from moved compatible pair
; 158  : 		}
; 159  : 
; 160  : 	template<class _Other1,
; 161  : 		class _Other2>
; 162  : 		_Myt& operator=(pair<_Other1, _Other2>&& _Right)
; 163  : 			_NOEXCEPT_OP((is_nothrow_assignable<_Ty1, _Other1&&>::value
; 164  : 				&& is_nothrow_assignable<_Ty2, _Other2&&>::value))
; 165  : 		{	// assign from moved compatible pair
; 166  : 		first = _STD forward<_Other1>(_Right.first);
; 167  : 		second = _STD forward<_Other2>(_Right.second);
; 168  : 		return (*this);
; 169  : 		}
; 170  : 
; 171  : 	_Myt& operator=(_Myt&& _Right)
; 172  : 		_NOEXCEPT_OP((is_nothrow_move_assignable<_Ty1>::value
; 173  : 			&& is_nothrow_move_assignable<_Ty2>::value))
; 174  : 		{	// assign from moved pair
; 175  : 		first = _STD forward<_Ty1>(_Right.first);
; 176  : 		second = _STD forward<_Ty2>(_Right.second);
; 177  : 		return (*this);
; 178  : 		}
; 179  : 
; 180  : 	void swap(_Myt& _Right)
; 181  : 		_NOEXCEPT_OP(_NOEXCEPT_OP(_Swap_adl(this->first, _Right.first))
; 182  : 			&& _NOEXCEPT_OP(_Swap_adl(this->second, _Right.second)))
; 183  : 		{	// exchange contents with _Right
; 184  : 		if (this != &_Right)

  0000c	8b 55 0c	 mov	 edx, DWORD PTR __Right$[ebp]
  0000f	3b ca		 cmp	 ecx, edx
  00011	74 3e		 je	 SHORT $LN30@iter_swap

; 30   : 
; 31   : 		// TEMPLATE FUNCTION swap
; 32   : template<class _Ty,
; 33   : 	size_t _Size> inline
; 34   : 	void swap(_Ty (&_Left)[_Size], _Ty (&_Right)[_Size])
; 35   : 		_NOEXCEPT_OP(_NOEXCEPT_OP(swap(*_Left, *_Right)))
; 36   : 	{	// exchange arrays stored at _Left and _Right
; 37   : 	if (&_Left != &_Right)
; 38   : 		{	// worth swapping, swap ranges
; 39   : 		_Ty *_First1 = _Left;
; 40   : 		_Ty *_Last1 = _First1 + _Size;
; 41   : 		_Ty *_First2 = _Right;
; 42   : 		for (; _First1 != _Last1; ++_First1, ++_First2)
; 43   : 			_STD iter_swap(_First1, _First2);
; 44   : 		}
; 45   : 	}
; 46   : 
; 47   : template<class _Ty> inline
; 48   : 	void swap(_Ty& _Left, _Ty& _Right)
; 49   : 		_NOEXCEPT_OP(is_nothrow_move_constructible<_Ty>::value
; 50   : 			&& is_nothrow_move_assignable<_Ty>::value)
; 51   : 	{	// exchange values stored at _Left and _Right
; 52   : 	_Ty _Tmp = _Move(_Left);

  00013	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]

; 53   : 	_Left = _Move(_Right);

  00017	8b 02		 mov	 eax, DWORD PTR [edx]
  00019	56		 push	 esi
  0001a	89 01		 mov	 DWORD PTR [ecx], eax

; 185  : 			{	// different, worth swapping
; 186  : 			_Swap_adl(first, _Right.first);
; 187  : 			_Swap_adl(second, _Right.second);

  0001c	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  0001f	57		 push	 edi

; 54   : 	_Right = _Move(_Tmp);

  00020	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 30   : 
; 31   : 		// TEMPLATE FUNCTION swap
; 32   : template<class _Ty,
; 33   : 	size_t _Size> inline
; 34   : 	void swap(_Ty (&_Left)[_Size], _Ty (&_Right)[_Size])
; 35   : 		_NOEXCEPT_OP(_NOEXCEPT_OP(swap(*_Left, *_Right)))
; 36   : 	{	// exchange arrays stored at _Left and _Right
; 37   : 	if (&_Left != &_Right)
; 38   : 		{	// worth swapping, swap ranges
; 39   : 		_Ty *_First1 = _Left;
; 40   : 		_Ty *_Last1 = _First1 + _Size;
; 41   : 		_Ty *_First2 = _Right;
; 42   : 		for (; _First1 != _Last1; ++_First1, ++_First2)
; 43   : 			_STD iter_swap(_First1, _First2);
; 44   : 		}
; 45   : 	}
; 46   : 
; 47   : template<class _Ty> inline
; 48   : 	void swap(_Ty& _Left, _Ty& _Right)
; 49   : 		_NOEXCEPT_OP(is_nothrow_move_constructible<_Ty>::value
; 50   : 			&& is_nothrow_move_assignable<_Ty>::value)
; 51   : 	{	// exchange values stored at _Left and _Right
; 52   : 	_Ty _Tmp = _Move(_Left);

  00024	8d bd 70 ff ff
	ff		 lea	 edi, DWORD PTR __Tmp$1[ebp]
  0002a	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0002f	8b f0		 mov	 esi, eax
  00031	f3 a5		 rep movsd
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00033	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00038	8d 72 04	 lea	 esi, DWORD PTR [edx+4]
  0003b	8b f8		 mov	 edi, eax
  0003d	f3 a5		 rep movsd
  0003f	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00044	8d b5 70 ff ff
	ff		 lea	 esi, DWORD PTR __Tmp$1[ebp]
  0004a	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
  0004d	f3 a5		 rep movsd
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
$LN30@iter_swap:
; File a:\vs\vc\include\utility

; 29   : 	}

  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
??$iter_swap@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0@Z ENDP ; std::iter_swap<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xstddef
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\xstddef
;	COMDAT ??$?RAAU?$pair@MUTFlyVertexSet@@@std@@AAU01@@?$less@X@std@@QBE_NAAU?$pair@MUTFlyVertexSet@@@1@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?RAAU?$pair@MUTFlyVertexSet@@@std@@AAU01@@?$less@X@std@@QBE_NAAU?$pair@MUTFlyVertexSet@@@1@0@Z PROC ; std::less<void>::operator()<std::pair<float,TFlyVertexSet> &,std::pair<float,TFlyVertexSet> &>, COMDAT
; _this$ = ecx

; 263  : 		auto operator()(_Ty1&& _Left, _Ty2&& _Right) const

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File a:\vs\vc\include\utility

; 234  : 		(!(_Right.first < _Left.first) && _Left.second < _Right.second));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00009	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0000d	33 c0		 xor	 eax, eax
  0000f	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00012	0f 97 c0	 seta	 al
; File a:\vs\vc\include\xstddef

; 269  : 		}

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
??$?RAAU?$pair@MUTFlyVertexSet@@@std@@AAU01@@?$less@X@std@@QBE_NAAU?$pair@MUTFlyVertexSet@@@1@0@Z ENDP ; std::less<void>::operator()<std::pair<float,TFlyVertexSet> &,std::pair<float,TFlyVertexSet> &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\utility
;	COMDAT ??$?MMUTFlyVertexSet@@@std@@YA_NABU?$pair@MUTFlyVertexSet@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?MMUTFlyVertexSet@@@std@@YA_NABU?$pair@MUTFlyVertexSet@@@0@0@Z PROC ; std::operator<<float,TFlyVertexSet>, COMDAT

; 232  : 	{	// test if _Left < _Right for pairs

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 233  : 	return (_Left.first < _Right.first ||
; 234  : 		(!(_Right.first < _Left.first) && _Left.second < _Right.second));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00009	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0000d	33 c0		 xor	 eax, eax
  0000f	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00012	0f 97 c0	 seta	 al

; 235  : 	}

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??$?MMUTFlyVertexSet@@@std@@YA_NABU?$pair@MUTFlyVertexSet@@@0@0@Z ENDP ; std::operator<<float,TFlyVertexSet>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\algorithm
;	COMDAT ??$_Median@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z
_TEXT	SEGMENT
tv175 = -4						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Median@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z PROC ; std::_Median<std::pair<float,TFlyVertexSet> *,std::less<void> >, COMDAT

; 3046 : 	{	// sort median element to middle

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 3047 : 	if (40 < _Last - _First)

  00005	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  00008	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  0000d	56		 push	 esi
  0000e	8b 75 10	 mov	 esi, DWORD PTR __Last$[ebp]
  00011	8b ce		 mov	 ecx, esi
  00013	2b cb		 sub	 ecx, ebx
  00015	f7 e9		 imul	 ecx
  00017	03 d1		 add	 edx, ecx
  00019	c1 fa 07	 sar	 edx, 7
  0001c	8b c2		 mov	 eax, edx
  0001e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00021	03 c2		 add	 eax, edx
  00023	83 f8 28	 cmp	 eax, 40			; 00000028H
  00026	7e 6c		 jle	 SHORT $LN2@Median

; 3048 : 		{	// median of nine
; 3049 : 		size_t _Step = (_Last - _First + 1) / 8;

  00028	40		 inc	 eax
  00029	99		 cdq
  0002a	83 e2 07	 and	 edx, 7
  0002d	03 c2		 add	 eax, edx
  0002f	c1 f8 03	 sar	 eax, 3
  00032	57		 push	 edi

; 3050 : 		_Med3(_First, _First + _Step, _First + 2 * _Step, _Pred);

  00033	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00036	69 c8 28 01 00
	00		 imul	 ecx, eax, 296
  0003c	69 f8 94 00 00
	00		 imul	 edi, eax, 148
  00042	89 4d fc	 mov	 DWORD PTR tv175[ebp], ecx
  00045	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00048	50		 push	 eax
  00049	8d 14 1f	 lea	 edx, DWORD PTR [edi+ebx]
  0004c	52		 push	 edx
  0004d	53		 push	 ebx
  0004e	e8 00 00 00 00	 call	 ??$_Med3@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z ; std::_Med3<std::pair<float,TFlyVertexSet> *,std::less<void> >

; 3051 : 		_Med3(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

  00053	8b 5d 0c	 mov	 ebx, DWORD PTR __Mid$[ebp]
  00056	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00059	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
  0005c	50		 push	 eax
  0005d	8b c3		 mov	 eax, ebx
  0005f	2b c7		 sub	 eax, edi
  00061	53		 push	 ebx
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ??$_Med3@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z ; std::_Med3<std::pair<float,TFlyVertexSet> *,std::less<void> >

; 3052 : 		_Med3(_Last - 2 * _Step, _Last - _Step, _Last, _Pred);

  00068	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  0006b	8b c6		 mov	 eax, esi
  0006d	2b f7		 sub	 esi, edi
  0006f	50		 push	 eax
  00070	2b 45 fc	 sub	 eax, DWORD PTR tv175[ebp]
  00073	56		 push	 esi
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ??$_Med3@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z ; std::_Med3<std::pair<float,TFlyVertexSet> *,std::less<void> >

; 3053 : 		_Med3(_First + _Step, _Mid, _Last - _Step, _Pred);

  0007a	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  0007d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00080	56		 push	 esi
  00081	03 c7		 add	 eax, edi
  00083	53		 push	 ebx
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 ??$_Med3@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z ; std::_Med3<std::pair<float,TFlyVertexSet> *,std::less<void> >
  0008a	83 c4 40	 add	 esp, 64			; 00000040H
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx

; 3057 : 	}

  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c3		 ret	 0
$LN2@Median:

; 3054 : 		}
; 3055 : 	else
; 3056 : 		_Med3(_First, _Mid, _Last, _Pred);

  00094	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00097	56		 push	 esi
  00098	ff 75 0c	 push	 DWORD PTR __Mid$[ebp]
  0009b	53		 push	 ebx
  0009c	e8 00 00 00 00	 call	 ??$_Med3@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z ; std::_Med3<std::pair<float,TFlyVertexSet> *,std::less<void> >
  000a1	83 c4 10	 add	 esp, 16			; 00000010H
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx

; 3057 : 	}

  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c3		 ret	 0
??$_Median@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z ENDP ; std::_Median<std::pair<float,TFlyVertexSet> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAVCFlyTrace@@PAV1@PAV1@@std@@YAPAPAVCFlyTrace@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAVCFlyTrace@@PAV1@PAV1@@std@@YAPAPAVCFlyTrace@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<CFlyTrace *,CFlyTrace *,CFlyTrace *>, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 470  : 	_DEBUG_RANGE(_First, _Last);
; 471  : 	_DEBUG_POINTER(_Dest);
; 472  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 473  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 474  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 475  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninit_move@PAVCFlyTrace@@PAV1@PAV1@@std@@YAPAPAVCFlyTrace@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<CFlyTrace *,CFlyTrace *,CFlyTrace *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??$_Val_type@PAPAVCFlyTrace@@@std@@YAPAPAVCFlyTrace@@PAPAV1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAPAVCFlyTrace@@@std@@YAPAPAVCFlyTrace@@PAPAV1@@Z PROC ; std::_Val_type<CFlyTrace * *>, COMDAT

; 646  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 647  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAPAVCFlyTrace@@@std@@YAPAPAVCFlyTrace@@PAPAV1@@Z ENDP ; std::_Val_type<CFlyTrace * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@U12@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@U12@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *,std::allocator<std::pair<float,TFlyVertexSet> >,std::pair<float,TFlyVertexSet> >, COMDAT

; 437  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 443  : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	3b d0		 cmp	 edx, eax
  0000b	74 35		 je	 SHORT $LN40@Uninit_mov
  0000d	53		 push	 ebx
  0000e	8b 5d 10	 mov	 ebx, DWORD PTR __Dest$[ebp]
  00011	56		 push	 esi
  00012	57		 push	 edi
$LL6@Uninit_mov:
; File a:\vs\vc\include\xmemory0

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00013	85 db		 test	 ebx, ebx
  00015	74 14		 je	 SHORT $LN24@Uninit_mov
; File a:\vs\vc\include\utility

; 157  : 		{	// construct from moved compatible pair

  00017	8b 02		 mov	 eax, DWORD PTR [edx]
; File a:\vs\vc\include\xmemory

; 443  : 	for (; _First != _Last; ++_Dest, ++_First)

  00019	8d 72 04	 lea	 esi, DWORD PTR [edx+4]
; File a:\vs\vc\include\utility

; 157  : 		{	// construct from moved compatible pair

  0001c	89 03		 mov	 DWORD PTR [ebx], eax
  0001e	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  00021	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00024	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00029	f3 a5		 rep movsd
$LN24@Uninit_mov:
; File a:\vs\vc\include\xmemory

; 443  : 	for (; _First != _Last; ++_Dest, ++_First)

  0002b	81 c2 94 00 00
	00		 add	 edx, 148		; 00000094H
  00031	81 c3 94 00 00
	00		 add	 ebx, 148		; 00000094H
  00037	3b d0		 cmp	 edx, eax
  00039	75 d8		 jne	 SHORT $LL6@Uninit_mov

; 444  : 		_Al.construct(_Dest, (_Valty&&)*_First);
; 445  : 	_CATCH_ALL
; 446  : 	for (; _Next != _Dest; ++_Next)
; 447  : 		_Al.destroy(_Next);
; 448  : 	_RERAISE;
; 449  : 	_CATCH_END
; 450  : 	return (_Dest);

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	8b c3		 mov	 eax, ebx
  0003f	5b		 pop	 ebx

; 451  : 	}

  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
$LN40@Uninit_mov:

; 444  : 		_Al.construct(_Dest, (_Valty&&)*_First);
; 445  : 	_CATCH_ALL
; 446  : 	for (; _Next != _Dest; ++_Next)
; 447  : 		_Al.destroy(_Next);
; 448  : 	_RERAISE;
; 449  : 	_CATCH_END
; 450  : 	return (_Dest);

  00042	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 451  : 	}

  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
??$_Uninit_move@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@U12@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *,std::allocator<std::pair<float,TFlyVertexSet> >,std::pair<float,TFlyVertexSet> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??$_Val_type@PAU?$pair@MUTFlyVertexSet@@@std@@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAU?$pair@MUTFlyVertexSet@@@std@@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@@Z PROC ; std::_Val_type<std::pair<float,TFlyVertexSet> *>, COMDAT

; 646  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 647  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAU?$pair@MUTFlyVertexSet@@@std@@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@@Z ENDP ; std::_Val_type<std::pair<float,TFlyVertexSet> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$destroy@U?$pair@MUTFlyVertexSet@@@std@@@?$allocator_traits@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@1@PAU?$pair@MUTFlyVertexSet@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U?$pair@MUTFlyVertexSet@@@std@@@?$allocator_traits@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@1@PAU?$pair@MUTFlyVertexSet@@@1@@Z PROC ; std::allocator_traits<std::allocator<std::pair<float,TFlyVertexSet> > >::destroy<std::pair<float,TFlyVertexSet> >, COMDAT

; 729  : 		{	// destroy object at _Ptr
; 730  : 		_Al.destroy(_Ptr);
; 731  : 		}

  00000	c3		 ret	 0
??$destroy@U?$pair@MUTFlyVertexSet@@@std@@@?$allocator_traits@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@1@PAU?$pair@MUTFlyVertexSet@@@1@@Z ENDP ; std::allocator_traits<std::allocator<std::pair<float,TFlyVertexSet> > >::destroy<std::pair<float,TFlyVertexSet> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\utility
;	COMDAT ??$?0MUD3DXVECTOR3@@X@?$pair@MUD3DXVECTOR3@@@std@@QAE@$$QAU01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0MUD3DXVECTOR3@@X@?$pair@MUD3DXVECTOR3@@@std@@QAE@$$QAU01@@Z PROC ; std::pair<float,D3DXVECTOR3>::pair<float,D3DXVECTOR3><float,D3DXVECTOR3,void>, COMDAT
; _this$ = ecx

; 157  : 		{	// construct from moved compatible pair

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	89 01		 mov	 DWORD PTR [ecx], eax
  0000a	f3 0f 7e 42 04	 movq	 xmm0, QWORD PTR [edx+4]
  0000f	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0
  00014	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00017	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 158  : 		}

  0001a	8b c1		 mov	 eax, ecx
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??$?0MUD3DXVECTOR3@@X@?$pair@MUD3DXVECTOR3@@@std@@QAE@$$QAU01@@Z ENDP ; std::pair<float,D3DXVECTOR3>::pair<float,D3DXVECTOR3><float,D3DXVECTOR3,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\algorithm
;	COMDAT ??$_Insertion_sort@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Insertion_sort@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z PROC ; std::_Insertion_sort<std::pair<float,TFlyVertexSet> *,std::less<void> >, COMDAT

; 3025 : 	{	// insertion sort [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3026 : 	_Insertion_sort1(_First, _Last, _Pred, _Val_type(_First));

  00003	6a 00		 push	 0
  00005	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  00008	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000e	e8 00 00 00 00	 call	 ??$_Insertion_sort1@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@U12@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@0@Z ; std::_Insertion_sort1<std::pair<float,TFlyVertexSet> *,std::less<void>,std::pair<float,TFlyVertexSet> >
  00013	83 c4 10	 add	 esp, 16			; 00000010H

; 3027 : 	}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Insertion_sort@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z ENDP ; std::_Insertion_sort<std::pair<float,TFlyVertexSet> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\algorithm
;	COMDAT ??$sort_heap@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$sort_heap@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z PROC ; std::sort_heap<std::pair<float,TFlyVertexSet> *,std::less<void> >, COMDAT

; 2483 : 	{	// order heap by repeatedly popping, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2484 : 	_DEBUG_RANGE(_First, _Last);
; 2485 : 	_DEBUG_POINTER(_Pred);
; 2486 : 	_DEBUG_HEAP_PRED(_First, _Last, _Pred);
; 2487 : 	_Sort_heap(_Unchecked(_First), _Unchecked(_Last), _Pred);

  00003	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00009	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000c	e8 00 00 00 00	 call	 ??$_Sort_heap@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z ; std::_Sort_heap<std::pair<float,TFlyVertexSet> *,std::less<void> >
  00011	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2488 : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$sort_heap@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z ENDP ; std::sort_heap<std::pair<float,TFlyVertexSet> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\algorithm
;	COMDAT ??$make_heap@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$make_heap@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z PROC ; std::make_heap<std::pair<float,TFlyVertexSet> *,std::less<void> >, COMDAT

; 2456 : 	{	// make [_First, _Last) into a heap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2457 : 	_DEBUG_RANGE(_First, _Last);
; 2458 : 	_DEBUG_POINTER(_Pred);
; 2459 : 	if (1 < _Last - _First)

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00006	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  0000b	2b 4d 08	 sub	 ecx, DWORD PTR __First$[ebp]
  0000e	f7 e9		 imul	 ecx
  00010	03 d1		 add	 edx, ecx
  00012	c1 fa 07	 sar	 edx, 7
  00015	8b c2		 mov	 eax, edx
  00017	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001a	03 c2		 add	 eax, edx
  0001c	83 f8 01	 cmp	 eax, 1
  0001f	7e 15		 jle	 SHORT $LN1@make_heap

; 2460 : 		_Make_heap(_Unchecked(_First), _Unchecked(_Last), _Pred,
; 2461 : 			_Dist_type(_First), _Val_type(_First));

  00021	6a 00		 push	 0
  00023	6a 00		 push	 0
  00025	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  00028	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0002b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0002e	e8 00 00 00 00	 call	 ??$_Make_heap@PAU?$pair@MUTFlyVertexSet@@@std@@HU12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@PAH0@Z ; std::_Make_heap<std::pair<float,TFlyVertexSet> *,int,std::pair<float,TFlyVertexSet>,std::less<void> >
  00033	83 c4 14	 add	 esp, 20			; 00000014H
$LN1@make_heap:

; 2462 : 	}

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??$make_heap@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z ENDP ; std::make_heap<std::pair<float,TFlyVertexSet> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\algorithm
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\algorithm
;	COMDAT ??$_Unguarded_partition@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YA?AU?$pair@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@0@PAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z
_TEXT	SEGMENT
__Tmp$1 = -1028						; size = 144
__Tmp$2 = -884						; size = 144
__Tmp$3 = -740						; size = 144
__Tmp$4 = -596						; size = 144
__Tmp$5 = -452						; size = 144
__Tmp$6 = -308						; size = 144
__Tmp$7 = -164						; size = 144
$T8 = -20						; size = 4
tv938 = -16						; size = 4
$T9 = -16						; size = 4
__Glast$1$ = -12					; size = 4
__Plast$1$ = -8						; size = 4
__Gfirst$1$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Unguarded_partition@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YA?AU?$pair@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@0@PAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z PROC ; std::_Unguarded_partition<std::pair<float,TFlyVertexSet> *,std::less<void> >, COMDAT

; 3063 : 	{	// partition [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 04 00
	00		 sub	 esp, 1028		; 00000404H
  00009	53		 push	 ebx
  0000a	56		 push	 esi

; 3064 : 	_RanIt _Mid = _First + (_Last - _First) / 2;

  0000b	8b 75 0c	 mov	 esi, DWORD PTR __First$[ebp]
  0000e	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00013	57		 push	 edi
  00014	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
  00017	8b cf		 mov	 ecx, edi

; 3065 : 	_Median(_First, _Mid, _Last - 1, _Pred);

  00019	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  0001c	2b ce		 sub	 ecx, esi
  0001e	f7 e9		 imul	 ecx
  00020	03 d1		 add	 edx, ecx
  00022	c1 fa 07	 sar	 edx, 7
  00025	8b c2		 mov	 eax, edx
  00027	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002a	03 c2		 add	 eax, edx
  0002c	99		 cdq
  0002d	2b c2		 sub	 eax, edx
  0002f	d1 f8		 sar	 eax, 1
  00031	69 d8 94 00 00
	00		 imul	 ebx, eax, 148
  00037	8d 87 6c ff ff
	ff		 lea	 eax, DWORD PTR [edi-148]
  0003d	50		 push	 eax
  0003e	03 de		 add	 ebx, esi
  00040	53		 push	 ebx
  00041	56		 push	 esi
  00042	e8 00 00 00 00	 call	 ??$_Median@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z ; std::_Median<std::pair<float,TFlyVertexSet> *,std::less<void> >
  00047	83 c4 10	 add	 esp, 16			; 00000010H

; 3066 : 	_RanIt _Pfirst = _Mid;
; 3067 : 	_RanIt _Plast = _Pfirst + 1;

  0004a	8d 93 94 00 00
	00		 lea	 edx, DWORD PTR [ebx+148]
  00050	89 55 f8	 mov	 DWORD PTR __Plast$1$[ebp], edx

; 3071 : 		&& !_Pred(*_Pfirst, *(_Pfirst - 1)))

  00053	3b f3		 cmp	 esi, ebx
  00055	73 29		 jae	 SHORT $LN359@Unguarded_
  00057	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL29@Unguarded_:
; File a:\vs\vc\include\utility

; 234  : 		(!(_Right.first < _Left.first) && _Left.second < _Right.second));

  00060	f3 0f 10 8b 6c
	ff ff ff	 movss	 xmm1, DWORD PTR [ebx-148]
  00068	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]
  0006c	0f 2f c1	 comiss	 xmm0, xmm1
  0006f	77 0f		 ja	 SHORT $LN359@Unguarded_
  00071	0f 2f c8	 comiss	 xmm1, xmm0
  00074	77 0a		 ja	 SHORT $LN359@Unguarded_
; File a:\vs\vc\include\algorithm

; 3071 : 		&& !_Pred(*_Pfirst, *(_Pfirst - 1)))

  00076	81 c3 6c ff ff
	ff		 add	 ebx, -148		; ffffff6cH
  0007c	3b f3		 cmp	 esi, ebx
  0007e	72 e0		 jb	 SHORT $LL29@Unguarded_
$LN359@Unguarded_:

; 3075 : 		&& !_Pred(*_Pfirst, *_Plast))

  00080	3b d7		 cmp	 edx, edi
  00082	73 27		 jae	 SHORT $LN64@Unguarded_
; File a:\vs\vc\include\utility

; 234  : 		(!(_Right.first < _Left.first) && _Left.second < _Right.second));

  00084	f3 0f 10 0b	 movss	 xmm1, DWORD PTR [ebx]
  00088	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL27@Unguarded_:
  00090	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  00094	0f 2f c8	 comiss	 xmm1, xmm0
  00097	77 0f		 ja	 SHORT $LN360@Unguarded_
  00099	0f 2f c1	 comiss	 xmm0, xmm1
  0009c	77 0a		 ja	 SHORT $LN360@Unguarded_
; File a:\vs\vc\include\algorithm

; 3075 : 		&& !_Pred(*_Pfirst, *_Plast))

  0009e	81 c2 94 00 00
	00		 add	 edx, 148		; 00000094H
  000a4	3b d7		 cmp	 edx, edi
  000a6	72 e8		 jb	 SHORT $LL27@Unguarded_
$LN360@Unguarded_:
  000a8	89 55 f8	 mov	 DWORD PTR __Plast$1$[ebp], edx
$LN64@Unguarded_:

; 3079 : 	_RanIt _Glast = _Pfirst;

  000ab	8b f3		 mov	 esi, ebx
  000ad	8b ca		 mov	 ecx, edx
  000af	89 75 f4	 mov	 DWORD PTR __Glast$1$[ebp], esi
$LN366@Unguarded_:

; 3076 : 		++_Plast;
; 3077 : 
; 3078 : 	_RanIt _Gfirst = _Plast;

  000b2	89 4d fc	 mov	 DWORD PTR __Gfirst$1$[ebp], ecx
$LL25@Unguarded_:

; 3083 : 		for (; _Gfirst < _Last; ++_Gfirst)

  000b5	3b cf		 cmp	 ecx, edi
  000b7	0f 83 90 00 00
	00		 jae	 $LN82@Unguarded_
  000bd	8d b2 6c ff ff
	ff		 lea	 esi, DWORD PTR [edx-148]
$LL23@Unguarded_:
; File a:\vs\vc\include\utility

; 234  : 		(!(_Right.first < _Left.first) && _Left.second < _Right.second));

  000c3	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]
  000c7	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  000cb	0f 2f c8	 comiss	 xmm1, xmm0
  000ce	77 69		 ja	 SHORT $LN22@Unguarded_
  000d0	0f 2f c1	 comiss	 xmm0, xmm1
  000d3	77 75		 ja	 SHORT $LN361@Unguarded_
; File a:\vs\vc\include\algorithm

; 3088 : 			else if (_Plast++ != _Gfirst)

  000d5	8b c2		 mov	 eax, edx
  000d7	81 c6 94 00 00
	00		 add	 esi, 148		; 00000094H
  000dd	81 c2 94 00 00
	00		 add	 edx, 148		; 00000094H
  000e3	89 75 f0	 mov	 DWORD PTR tv938[ebp], esi
  000e6	89 55 f8	 mov	 DWORD PTR __Plast$1$[ebp], edx
  000e9	3b c1		 cmp	 eax, ecx
  000eb	74 4c		 je	 SHORT $LN22@Unguarded_
; File a:\vs\vc\include\utility

; 184  : 		if (this != &_Right)

  000ed	3b f1		 cmp	 esi, ecx
  000ef	74 48		 je	 SHORT $LN22@Unguarded_

; 52   : 	_Ty _Tmp = _Move(_Left);

  000f1	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
; File a:\vs\vc\include\algorithm

; 3083 : 		for (; _Gfirst < _Last; ++_Gfirst)

  000f5	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  000f8	8b 45 fc	 mov	 eax, DWORD PTR __Gfirst$1$[ebp]
; File a:\vs\vc\include\utility

; 52   : 	_Ty _Tmp = _Move(_Left);

  000fb	8d bd 5c ff ff
	ff		 lea	 edi, DWORD PTR __Tmp$7[ebp]

; 53   : 	_Left = _Move(_Right);

  00101	f3 0f 11 0e	 movss	 DWORD PTR [esi], xmm1

; 52   : 	_Ty _Tmp = _Move(_Left);

  00105	8b f2		 mov	 esi, edx

; 54   : 	_Right = _Move(_Tmp);

  00107	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 52   : 	_Ty _Tmp = _Move(_Left);

  0010b	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00110	f3 a5		 rep movsd
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00112	8b fa		 mov	 edi, edx
  00114	8d 70 04	 lea	 esi, DWORD PTR [eax+4]
  00117	8b 55 f8	 mov	 edx, DWORD PTR __Plast$1$[ebp]
  0011a	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0011f	f3 a5		 rep movsd
  00121	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00126	8d b5 5c ff ff
	ff		 lea	 esi, DWORD PTR __Tmp$7[ebp]
  0012c	8d 78 04	 lea	 edi, DWORD PTR [eax+4]
  0012f	f3 a5		 rep movsd
  00131	8b 75 f0	 mov	 esi, DWORD PTR tv938[ebp]
  00134	8b c8		 mov	 ecx, eax
  00136	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
$LN22@Unguarded_:
; File a:\vs\vc\include\algorithm

; 3083 : 		for (; _Gfirst < _Last; ++_Gfirst)

  00139	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  0013f	89 4d fc	 mov	 DWORD PTR __Gfirst$1$[ebp], ecx
  00142	3b cf		 cmp	 ecx, edi
  00144	0f 82 79 ff ff
	ff		 jb	 $LL23@Unguarded_
$LN361@Unguarded_:
  0014a	8b 75 f4	 mov	 esi, DWORD PTR __Glast$1$[ebp]
$LN82@Unguarded_:

; 3090 : 		for (; _First < _Glast; --_Glast)

  0014d	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  00150	3b f0		 cmp	 esi, eax
  00152	0f 86 7e 00 00
	00		 jbe	 $LN364@Unguarded_
  00158	8d 96 6c ff ff
	ff		 lea	 edx, DWORD PTR [esi-148]
  0015e	8b ff		 npad	 2
$LL15@Unguarded_:
; File a:\vs\vc\include\utility

; 234  : 		(!(_Right.first < _Left.first) && _Left.second < _Right.second));

  00160	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
  00164	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]
  00168	0f 2f c1	 comiss	 xmm0, xmm1
  0016b	77 4b		 ja	 SHORT $LN14@Unguarded_
  0016d	0f 2f c8	 comiss	 xmm1, xmm0
  00170	77 59		 ja	 SHORT $LN362@Unguarded_
; File a:\vs\vc\include\algorithm

; 3095 : 			else if (--_Pfirst != _Glast - 1)

  00172	81 eb 94 00 00
	00		 sub	 ebx, 148		; 00000094H
  00178	3b da		 cmp	 ebx, edx
  0017a	74 3c		 je	 SHORT $LN14@Unguarded_
; File a:\vs\vc\include\utility

; 52   : 	_Ty _Tmp = _Move(_Left);

  0017c	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]
  00180	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]

; 53   : 	_Left = _Move(_Right);

  00183	f3 0f 11 0b	 movss	 DWORD PTR [ebx], xmm1

; 52   : 	_Ty _Tmp = _Move(_Left);

  00187	8d bd 8c fc ff
	ff		 lea	 edi, DWORD PTR __Tmp$2[ebp]

; 54   : 	_Right = _Move(_Tmp);

  0018d	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 52   : 	_Ty _Tmp = _Move(_Left);

  00191	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00196	f3 a5		 rep movsd
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00198	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0019d	8d 72 04	 lea	 esi, DWORD PTR [edx+4]
  001a0	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  001a3	f3 a5		 rep movsd
  001a5	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  001aa	8d b5 8c fc ff
	ff		 lea	 esi, DWORD PTR __Tmp$2[ebp]
  001b0	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
  001b3	f3 a5		 rep movsd
  001b5	8b 75 f4	 mov	 esi, DWORD PTR __Glast$1$[ebp]
$LN14@Unguarded_:
; File a:\vs\vc\include\algorithm

; 3090 : 		for (; _First < _Glast; --_Glast)

  001b8	81 ee 94 00 00
	00		 sub	 esi, 148		; 00000094H
  001be	81 ea 94 00 00
	00		 sub	 edx, 148		; 00000094H
  001c4	89 75 f4	 mov	 DWORD PTR __Glast$1$[ebp], esi
  001c7	3b c6		 cmp	 eax, esi
  001c9	72 95		 jb	 SHORT $LL15@Unguarded_
$LN362@Unguarded_:
  001cb	8b 4d fc	 mov	 ecx, DWORD PTR __Gfirst$1$[ebp]

; 3096 : 				_STD iter_swap(_Pfirst, _Glast - 1);
; 3097 : 		if (_Glast == _First && _Gfirst == _Last)

  001ce	3b f0		 cmp	 esi, eax
  001d0	8b 55 f8	 mov	 edx, DWORD PTR __Plast$1$[ebp]
  001d3	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
$LN364@Unguarded_:
  001d6	0f 85 b9 00 00
	00		 jne	 $LN6@Unguarded_
  001dc	3b cf		 cmp	 ecx, edi
  001de	0f 84 c3 01 00
	00		 je	 $LN335@Unguarded_

; 3098 : 			return (pair<_RanIt, _RanIt>(_Pfirst, _Plast));
; 3099 : 
; 3100 : 		if (_Glast == _First)
; 3101 : 			{	// no room at bottom, rotate pivot upward
; 3102 : 			if (_Plast != _Gfirst)

  001e4	3b d1		 cmp	 edx, ecx
  001e6	74 49		 je	 SHORT $LN201@Unguarded_
; File a:\vs\vc\include\utility

; 184  : 		if (this != &_Right)

  001e8	3b da		 cmp	 ebx, edx
  001ea	74 45		 je	 SHORT $LN201@Unguarded_

; 53   : 	_Left = _Move(_Right);

  001ec	8b 02		 mov	 eax, DWORD PTR [edx]

; 52   : 	_Ty _Tmp = _Move(_Left);

  001ee	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]
  001f1	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]
  001f5	8d bd ac fd ff
	ff		 lea	 edi, DWORD PTR __Tmp$4[ebp]

; 53   : 	_Left = _Move(_Right);

  001fb	89 03		 mov	 DWORD PTR [ebx], eax

; 52   : 	_Ty _Tmp = _Move(_Left);

  001fd	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H

; 54   : 	_Right = _Move(_Tmp);

  00202	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 52   : 	_Ty _Tmp = _Move(_Left);

  00206	f3 a5		 rep movsd
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00208	8d 72 04	 lea	 esi, DWORD PTR [edx+4]
  0020b	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00210	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  00213	f3 a5		 rep movsd
  00215	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
  00218	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0021d	8b 55 f8	 mov	 edx, DWORD PTR __Plast$1$[ebp]
  00220	8d b5 ac fd ff
	ff		 lea	 esi, DWORD PTR __Tmp$4[ebp]
  00226	f3 a5		 rep movsd
  00228	8b 4d fc	 mov	 ecx, DWORD PTR __Gfirst$1$[ebp]
  0022b	8b 75 f4	 mov	 esi, DWORD PTR __Glast$1$[ebp]
  0022e	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
$LN201@Unguarded_:
; File a:\vs\vc\include\algorithm

; 3105 : 			_STD iter_swap(_Pfirst++, _Gfirst++);

  00231	8b c1		 mov	 eax, ecx
  00233	89 5d f0	 mov	 DWORD PTR $T9[ebp], ebx
  00236	81 c2 94 00 00
	00		 add	 edx, 148		; 00000094H
  0023c	89 45 ec	 mov	 DWORD PTR $T8[ebp], eax
  0023f	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  00245	89 55 f8	 mov	 DWORD PTR __Plast$1$[ebp], edx
  00248	81 c3 94 00 00
	00		 add	 ebx, 148		; 00000094H
  0024e	89 4d fc	 mov	 DWORD PTR __Gfirst$1$[ebp], ecx
; File a:\vs\vc\include\utility

; 184  : 		if (this != &_Right)

  00251	39 45 f0	 cmp	 DWORD PTR $T9[ebp], eax
  00254	0f 84 5b fe ff
	ff		 je	 $LL25@Unguarded_

; 52   : 	_Ty _Tmp = _Move(_Left);

  0025a	8b 4d f0	 mov	 ecx, DWORD PTR $T9[ebp]
  0025d	8d bd cc fe ff
	ff		 lea	 edi, DWORD PTR __Tmp$6[ebp]

; 53   : 	_Left = _Move(_Right);

  00263	8b 00		 mov	 eax, DWORD PTR [eax]

; 54   : 	_Right = _Move(_Tmp);

  00265	8b 55 ec	 mov	 edx, DWORD PTR $T8[ebp]
  00268	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0026c	89 01		 mov	 DWORD PTR [ecx], eax

; 185  : 			{	// different, worth swapping
; 186  : 			_Swap_adl(first, _Right.first);
; 187  : 			_Swap_adl(second, _Right.second);

  0026e	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 54   : 	_Right = _Move(_Tmp);

  00271	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 52   : 	_Ty _Tmp = _Move(_Left);

  00275	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0027a	8b f0		 mov	 esi, eax
  0027c	f3 a5		 rep movsd
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  0027e	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00283	8d 72 04	 lea	 esi, DWORD PTR [edx+4]
  00286	8b f8		 mov	 edi, eax
  00288	f3 a5		 rep movsd
  0028a	8d b5 cc fe ff
	ff		 lea	 esi, DWORD PTR __Tmp$6[ebp]
; File a:\vs\vc\include\utility

; 29   : 	}

  00290	e9 a1 00 00 00	 jmp	 $LN365@Unguarded_
$LN6@Unguarded_:
; File a:\vs\vc\include\algorithm

; 3109 : 			if (--_Glast != --_Pfirst)

  00295	81 ee 94 00 00
	00		 sub	 esi, 148		; 00000094H
  0029b	89 75 f4	 mov	 DWORD PTR __Glast$1$[ebp], esi
  0029e	3b cf		 cmp	 ecx, edi
  002a0	0f 85 ab 00 00
	00		 jne	 $LN3@Unguarded_
  002a6	81 eb 94 00 00
	00		 sub	 ebx, 148		; 00000094H
  002ac	3b f3		 cmp	 esi, ebx
  002ae	74 46		 je	 SHORT $LN263@Unguarded_
; File a:\vs\vc\include\utility

; 52   : 	_Ty _Tmp = _Move(_Left);

  002b0	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  002b4	8d bd 3c fe ff
	ff		 lea	 edi, DWORD PTR __Tmp$5[ebp]

; 53   : 	_Left = _Move(_Right);

  002ba	8b 03		 mov	 eax, DWORD PTR [ebx]

; 52   : 	_Ty _Tmp = _Move(_Left);

  002bc	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  002c1	8b 55 f8	 mov	 edx, DWORD PTR __Plast$1$[ebp]

; 53   : 	_Left = _Move(_Right);

  002c4	89 06		 mov	 DWORD PTR [esi], eax

; 185  : 			{	// different, worth swapping
; 186  : 			_Swap_adl(first, _Right.first);
; 187  : 			_Swap_adl(second, _Right.second);

  002c6	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 54   : 	_Right = _Move(_Tmp);

  002c9	f3 0f 11 03	 movss	 DWORD PTR [ebx], xmm0

; 52   : 	_Ty _Tmp = _Move(_Left);

  002cd	8b f0		 mov	 esi, eax
  002cf	f3 a5		 rep movsd
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  002d1	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  002d6	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]
  002d9	8b f8		 mov	 edi, eax
  002db	f3 a5		 rep movsd
  002dd	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  002e2	8d b5 3c fe ff
	ff		 lea	 esi, DWORD PTR __Tmp$5[ebp]
  002e8	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  002eb	f3 a5		 rep movsd
  002ed	8b 4d fc	 mov	 ecx, DWORD PTR __Gfirst$1$[ebp]
  002f0	8b 75 f4	 mov	 esi, DWORD PTR __Glast$1$[ebp]
  002f3	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
$LN263@Unguarded_:
; File a:\vs\vc\include\algorithm

; 3111 : 			_STD iter_swap(_Pfirst, --_Plast);

  002f6	81 ea 94 00 00
	00		 sub	 edx, 148		; 00000094H
  002fc	89 55 f8	 mov	 DWORD PTR __Plast$1$[ebp], edx
; File a:\vs\vc\include\utility

; 184  : 		if (this != &_Right)

  002ff	3b da		 cmp	 ebx, edx
  00301	0f 84 ae fd ff
	ff		 je	 $LL25@Unguarded_

; 52   : 	_Ty _Tmp = _Move(_Left);

  00307	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]
  0030b	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]

; 53   : 	_Left = _Move(_Right);

  0030e	8b 02		 mov	 eax, DWORD PTR [edx]

; 52   : 	_Ty _Tmp = _Move(_Left);

  00310	8d bd 1c fd ff
	ff		 lea	 edi, DWORD PTR __Tmp$3[ebp]

; 53   : 	_Left = _Move(_Right);

  00316	89 03		 mov	 DWORD PTR [ebx], eax

; 52   : 	_Ty _Tmp = _Move(_Left);

  00318	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H

; 54   : 	_Right = _Move(_Tmp);

  0031d	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 52   : 	_Ty _Tmp = _Move(_Left);

  00321	f3 a5		 rep movsd
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00323	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00328	8d 72 04	 lea	 esi, DWORD PTR [edx+4]
  0032b	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  0032e	f3 a5		 rep movsd
  00330	8d b5 1c fd ff
	ff		 lea	 esi, DWORD PTR __Tmp$3[ebp]
$LN365@Unguarded_:
  00336	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
  00339	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
; File a:\vs\vc\include\algorithm

; 3113 : 		else

  0033e	8b 55 f8	 mov	 edx, DWORD PTR __Plast$1$[ebp]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00341	f3 a5		 rep movsd
; File a:\vs\vc\include\algorithm

; 3113 : 		else

  00343	8b 4d fc	 mov	 ecx, DWORD PTR __Gfirst$1$[ebp]
  00346	8b 75 f4	 mov	 esi, DWORD PTR __Glast$1$[ebp]
  00349	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
  0034c	e9 64 fd ff ff	 jmp	 $LL25@Unguarded_
$LN3@Unguarded_:
; File a:\vs\vc\include\utility

; 184  : 		if (this != &_Right)

  00351	3b ce		 cmp	 ecx, esi
  00353	74 44		 je	 SHORT $LN325@Unguarded_

; 53   : 	_Left = _Move(_Right);

  00355	8b 06		 mov	 eax, DWORD PTR [esi]

; 185  : 			{	// different, worth swapping
; 186  : 			_Swap_adl(first, _Right.first);
; 187  : 			_Swap_adl(second, _Right.second);

  00357	8d 56 04	 lea	 edx, DWORD PTR [esi+4]

; 52   : 	_Ty _Tmp = _Move(_Left);

  0035a	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0035e	8d bd fc fb ff
	ff		 lea	 edi, DWORD PTR __Tmp$1[ebp]

; 53   : 	_Left = _Move(_Right);

  00364	89 01		 mov	 DWORD PTR [ecx], eax

; 185  : 			{	// different, worth swapping
; 186  : 			_Swap_adl(first, _Right.first);
; 187  : 			_Swap_adl(second, _Right.second);

  00366	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 54   : 	_Right = _Move(_Tmp);

  00369	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0

; 52   : 	_Ty _Tmp = _Move(_Left);

  0036d	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00372	8b f0		 mov	 esi, eax
  00374	f3 a5		 rep movsd
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00376	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0037b	8b f2		 mov	 esi, edx
  0037d	8b f8		 mov	 edi, eax
  0037f	f3 a5		 rep movsd
  00381	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00386	8d b5 fc fb ff
	ff		 lea	 esi, DWORD PTR __Tmp$1[ebp]
  0038c	8b fa		 mov	 edi, edx
  0038e	f3 a5		 rep movsd
  00390	8b 4d fc	 mov	 ecx, DWORD PTR __Gfirst$1$[ebp]
  00393	8b 75 f4	 mov	 esi, DWORD PTR __Glast$1$[ebp]
  00396	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
$LN325@Unguarded_:
; File a:\vs\vc\include\algorithm

; 3115 : 		}

  00399	8b 55 f8	 mov	 edx, DWORD PTR __Plast$1$[ebp]
  0039c	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  003a2	e9 0b fd ff ff	 jmp	 $LN366@Unguarded_
$LN335@Unguarded_:
; File a:\vs\vc\include\utility

; 144  : 		{	// construct from moved values

  003a7	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  003aa	5f		 pop	 edi
  003ab	5e		 pop	 esi
  003ac	89 18		 mov	 DWORD PTR [eax], ebx
  003ae	89 50 04	 mov	 DWORD PTR [eax+4], edx
  003b1	5b		 pop	 ebx
; File a:\vs\vc\include\algorithm

; 3116 : 	}

  003b2	8b e5		 mov	 esp, ebp
  003b4	5d		 pop	 ebp
  003b5	c3		 ret	 0
??$_Unguarded_partition@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YA?AU?$pair@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@0@PAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z ENDP ; std::_Unguarded_partition<std::pair<float,TFlyVertexSet> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??$_Rechecked@PAPAVCFlyTrace@@PAPAV1@@std@@YAAAPAPAVCFlyTrace@@AAPAPAV1@PAPAV1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAPAVCFlyTrace@@PAPAV1@@std@@YAAAPAPAVCFlyTrace@@AAPAPAV1@PAPAV1@@Z PROC ; std::_Rechecked<CFlyTrace * *,CFlyTrace * *>, COMDAT

; 288  : 	{	// reset checked from unchecked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 289  : 	_Dest = _Src;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 290  : 	return (_Dest);
; 291  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Rechecked@PAPAVCFlyTrace@@PAPAV1@@std@@YAAAPAPAVCFlyTrace@@AAPAPAV1@PAPAV1@@Z ENDP ; std::_Rechecked<CFlyTrace * *,CFlyTrace * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAPAVCFlyTrace@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@@std@@YAPAPAVCFlyTrace@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAPAVCFlyTrace@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@@std@@YAPAPAVCFlyTrace@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@0@@Z PROC ; std::_Uninit_move<CFlyTrace * *,CFlyTrace * *,std::_Wrap_alloc<std::allocator<CFlyTrace *> > >, COMDAT

; 482  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 472  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 473  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 474  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 483  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 484  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));
; 485  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninit_move@PAPAVCFlyTrace@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@@std@@YAPAPAVCFlyTrace@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@0@@Z ENDP ; std::_Uninit_move<CFlyTrace * *,CFlyTrace * *,std::_Wrap_alloc<std::allocator<CFlyTrace *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??$_Unchecked@PAPAVCFlyTrace@@@std@@YAPAPAVCFlyTrace@@PAPAV1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAPAVCFlyTrace@@@std@@YAPAPAVCFlyTrace@@PAPAV1@@Z PROC ; std::_Unchecked<CFlyTrace * *>, COMDAT

; 280  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 281  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 282  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAPAVCFlyTrace@@@std@@YAPAPAVCFlyTrace@@PAPAV1@@Z ENDP ; std::_Unchecked<CFlyTrace * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??$_Rechecked@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@std@@YAAAPAU?$pair@MUTFlyVertexSet@@@0@AAPAU10@PAU10@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@std@@YAAAPAU?$pair@MUTFlyVertexSet@@@0@AAPAU10@PAU10@@Z PROC ; std::_Rechecked<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *>, COMDAT

; 288  : 	{	// reset checked from unchecked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 289  : 	_Dest = _Src;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 290  : 	return (_Dest);
; 291  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Rechecked@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@std@@YAAAPAU?$pair@MUTFlyVertexSet@@@0@AAPAU10@PAU10@@Z ENDP ; std::_Rechecked<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@U?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@2@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@U?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@2@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@0@@Z PROC ; std::_Uninit_move<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *,std::_Wrap_alloc<std::allocator<std::pair<float,TFlyVertexSet> > > >, COMDAT

; 482  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 483  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 484  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$1[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@U12@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *,std::allocator<std::pair<float,TFlyVertexSet> >,std::pair<float,TFlyVertexSet> >
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 485  : 	}

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??$_Uninit_move@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@U?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@2@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@0@@Z ENDP ; std::_Uninit_move<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *,std::_Wrap_alloc<std::allocator<std::pair<float,TFlyVertexSet> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??$_Unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@@Z PROC ; std::_Unchecked<std::pair<float,TFlyVertexSet> *>, COMDAT

; 280  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 281  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 282  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@@Z ENDP ; std::_Unchecked<std::pair<float,TFlyVertexSet> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$destroy@U?$pair@MUTFlyVertexSet@@@std@@@?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@QAEXPAU?$pair@MUTFlyVertexSet@@@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@U?$pair@MUTFlyVertexSet@@@std@@@?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@QAEXPAU?$pair@MUTFlyVertexSet@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::pair<float,TFlyVertexSet> > >::destroy<std::pair<float,TFlyVertexSet> >, COMDAT
; _this$ = ecx

; 878  : 		{	// destroy object at _Ptr
; 879  : 		_Mytraits::destroy(*this, _Ptr);
; 880  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@U?$pair@MUTFlyVertexSet@@@std@@@?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@QAEXPAU?$pair@MUTFlyVertexSet@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::pair<float,TFlyVertexSet> > >::destroy<std::pair<float,TFlyVertexSet> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z PROC ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>, COMDAT
; _this$ = ecx

; 606  : 		{	// destroy object at _Ptr
; 607  : 		_Ptr->~_Uty();
; 608  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ENDP ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z PROC ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT
; _this$ = ecx

; 598  : 		void construct(_Objty *_Ptr, _Types&&... _Args)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 599  : 		{	// construct _Objty(_Types...) at _Ptr
; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN3@construct:

; 601  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ENDP ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$destroy@PAVCFlyTrace@@@?$allocator@PAVCFlyTrace@@@std@@QAEXPAPAVCFlyTrace@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAVCFlyTrace@@@?$allocator@PAVCFlyTrace@@@std@@QAEXPAPAVCFlyTrace@@@Z PROC ; std::allocator<CFlyTrace *>::destroy<CFlyTrace *>, COMDAT
; _this$ = ecx

; 606  : 		{	// destroy object at _Ptr
; 607  : 		_Ptr->~_Uty();
; 608  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAVCFlyTrace@@@?$allocator@PAVCFlyTrace@@@std@@QAEXPAPAVCFlyTrace@@@Z ENDP ; std::allocator<CFlyTrace *>::destroy<CFlyTrace *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@PAVCFlyTrace@@AAPAV1@@?$allocator@PAVCFlyTrace@@@std@@QAEXPAPAVCFlyTrace@@AAPAV2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAVCFlyTrace@@AAPAV1@@?$allocator@PAVCFlyTrace@@@std@@QAEXPAPAVCFlyTrace@@AAPAV2@@Z PROC ; std::allocator<CFlyTrace *>::construct<CFlyTrace *,CFlyTrace * &>, COMDAT
; _this$ = ecx

; 598  : 		void construct(_Objty *_Ptr, _Types&&... _Args)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 599  : 		{	// construct _Objty(_Types...) at _Ptr
; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 601  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAVCFlyTrace@@AAPAV1@@?$allocator@PAVCFlyTrace@@@std@@QAEXPAPAVCFlyTrace@@AAPAV2@@Z ENDP ; std::allocator<CFlyTrace *>::construct<CFlyTrace *,CFlyTrace * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$pair@MUD3DXVECTOR3@@@std@@@?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@QAEXPAPAU?$pair@MUD3DXVECTOR3@@@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAU?$pair@MUD3DXVECTOR3@@@std@@@?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@QAEXPAPAU?$pair@MUD3DXVECTOR3@@@1@@Z PROC ; std::allocator<std::pair<float,D3DXVECTOR3> >::destroy<std::pair<float,D3DXVECTOR3> *>, COMDAT
; _this$ = ecx

; 606  : 		{	// destroy object at _Ptr
; 607  : 		_Ptr->~_Uty();
; 608  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAU?$pair@MUD3DXVECTOR3@@@std@@@?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@QAEXPAPAU?$pair@MUD3DXVECTOR3@@@1@@Z ENDP ; std::allocator<std::pair<float,D3DXVECTOR3> >::destroy<std::pair<float,D3DXVECTOR3> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??$_Fill_n@PAPAU?$pair@MUD3DXVECTOR3@@@std@@IPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@IABQAU10@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill_n@PAPAU?$pair@MUD3DXVECTOR3@@@std@@IPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@IABQAU10@@Z PROC ; std::_Fill_n<std::pair<float,D3DXVECTOR3> * *,unsigned int,std::pair<float,D3DXVECTOR3> *>, COMDAT

; 2631 : 	{	// copy _Val _Count times through [_Dest, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2632 : 	for (; 0 < _Count; --_Count, ++_Dest)

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00009	85 d2		 test	 edx, edx
  0000b	74 0f		 je	 SHORT $LN1@Fill_n
  0000d	56		 push	 esi
  0000e	8b 75 10	 mov	 esi, DWORD PTR __Val$[ebp]
$LL3@Fill_n:

; 2633 : 		*_Dest = _Val;

  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	89 08		 mov	 DWORD PTR [eax], ecx
  00015	83 c0 04	 add	 eax, 4
  00018	4a		 dec	 edx
  00019	75 f6		 jne	 SHORT $LL3@Fill_n
  0001b	5e		 pop	 esi
$LN1@Fill_n:

; 2634 : 	return (_Dest);
; 2635 : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Fill_n@PAPAU?$pair@MUD3DXVECTOR3@@@std@@IPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@IABQAU10@@Z ENDP ; std::_Fill_n<std::pair<float,D3DXVECTOR3> * *,unsigned int,std::pair<float,D3DXVECTOR3> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory
;	COMDAT ??$_Uninit_copy@PAU?$pair@MUD3DXVECTOR3@@@std@@PAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@00AAU?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@PAU?$pair@MUD3DXVECTOR3@@@std@@PAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@00AAU?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::pair<float,D3DXVECTOR3> *,std::pair<float,D3DXVECTOR3> *>, COMDAT

; 401  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 402  : 	_DEBUG_RANGE(_First, _Last);
; 403  : 	_DEBUG_POINTER(_Dest);
; 404  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 405  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 407  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninit_copy@PAU?$pair@MUD3DXVECTOR3@@@std@@PAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@00AAU?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::pair<float,D3DXVECTOR3> *,std::pair<float,D3DXVECTOR3> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@U?$pair@MUTFlyVertexSet@@@std@@U12@@?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@QAEXPAU?$pair@MUTFlyVertexSet@@@1@$$QAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U?$pair@MUTFlyVertexSet@@@std@@U12@@?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@QAEXPAU?$pair@MUTFlyVertexSet@@@1@$$QAU21@@Z PROC ; std::allocator<std::pair<float,TFlyVertexSet> >::construct<std::pair<float,TFlyVertexSet>,std::pair<float,TFlyVertexSet> >, COMDAT
; _this$ = ecx

; 598  : 		void construct(_Objty *_Ptr, _Types&&... _Args)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 599  : 		{	// construct _Objty(_Types...) at _Ptr
; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 16		 je	 SHORT $LN3@construct
; File a:\vs\vc\include\utility

; 157  : 		{	// construct from moved compatible pair

  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000e	56		 push	 esi
  0000f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00011	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
  00014	89 07		 mov	 DWORD PTR [edi], eax
  00016	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0001b	83 c7 04	 add	 edi, 4
  0001e	f3 a5		 rep movsd
  00020	5e		 pop	 esi
$LN3@construct:
  00021	5f		 pop	 edi
; File a:\vs\vc\include\xmemory0

; 601  : 		}

  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
??$construct@U?$pair@MUTFlyVertexSet@@@std@@U12@@?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@QAEXPAU?$pair@MUTFlyVertexSet@@@1@$$QAU21@@Z ENDP ; std::allocator<std::pair<float,TFlyVertexSet> >::construct<std::pair<float,TFlyVertexSet>,std::pair<float,TFlyVertexSet> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$destroy@U?$pair@MUD3DXVECTOR3@@@std@@@?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@QAEXPAU?$pair@MUD3DXVECTOR3@@@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@U?$pair@MUD3DXVECTOR3@@@std@@@?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@QAEXPAU?$pair@MUD3DXVECTOR3@@@1@@Z PROC ; std::allocator<std::pair<float,D3DXVECTOR3> >::destroy<std::pair<float,D3DXVECTOR3> >, COMDAT
; _this$ = ecx

; 606  : 		{	// destroy object at _Ptr
; 607  : 		_Ptr->~_Uty();
; 608  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@U?$pair@MUD3DXVECTOR3@@@std@@@?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@QAEXPAU?$pair@MUD3DXVECTOR3@@@1@@Z ENDP ; std::allocator<std::pair<float,D3DXVECTOR3> >::destroy<std::pair<float,D3DXVECTOR3> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@U?$pair@MUD3DXVECTOR3@@@std@@U12@@?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@QAEXPAU?$pair@MUD3DXVECTOR3@@@1@$$QAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U?$pair@MUD3DXVECTOR3@@@std@@U12@@?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@QAEXPAU?$pair@MUD3DXVECTOR3@@@1@$$QAU21@@Z PROC ; std::allocator<std::pair<float,D3DXVECTOR3> >::construct<std::pair<float,D3DXVECTOR3>,std::pair<float,D3DXVECTOR3> >, COMDAT
; _this$ = ecx

; 598  : 		void construct(_Objty *_Ptr, _Types&&... _Args)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 599  : 		{	// construct _Objty(_Types...) at _Ptr
; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 17		 je	 SHORT $LN3@construct
; File a:\vs\vc\include\utility

; 157  : 		{	// construct from moved compatible pair

  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	f3 0f 7e 41 04	 movq	 xmm0, QWORD PTR [ecx+4]
  00016	66 0f d6 42 04	 movq	 QWORD PTR [edx+4], xmm0
  0001b	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0001e	89 42 0c	 mov	 DWORD PTR [edx+12], eax
$LN3@construct:
; File a:\vs\vc\include\xmemory0

; 601  : 		}

  00021	5d		 pop	 ebp
  00022	c2 08 00	 ret	 8
??$construct@U?$pair@MUD3DXVECTOR3@@@std@@U12@@?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@QAEXPAU?$pair@MUD3DXVECTOR3@@@1@$$QAU21@@Z ENDP ; std::allocator<std::pair<float,D3DXVECTOR3> >::construct<std::pair<float,D3DXVECTOR3>,std::pair<float,D3DXVECTOR3> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\algorithm
;	COMDAT ??$_Sort@PAU?$pair@MUTFlyVertexSet@@@std@@HU?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0HU?$less@X@0@@Z
_TEXT	SEGMENT
__Mid$1 = -8						; size = 8
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Sort@PAU?$pair@MUTFlyVertexSet@@@std@@HU?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0HU?$less@X@0@@Z PROC ; std::_Sort<std::pair<float,TFlyVertexSet> *,int,std::less<void> >, COMDAT

; 3122 : 	{	// order [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 3123 : 	_Diff _Count;
; 3124 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

  00006	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  0000b	53		 push	 ebx
  0000c	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  00014	8b cf		 mov	 ecx, edi
  00016	2b cb		 sub	 ecx, ebx
  00018	f7 e9		 imul	 ecx
  0001a	03 d1		 add	 edx, ecx
  0001c	c1 fa 07	 sar	 edx, 7
  0001f	8b c2		 mov	 eax, edx
  00021	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00024	03 c2		 add	 eax, edx
  00026	83 f8 20	 cmp	 eax, 32			; 00000020H
  00029	0f 8e ab 00 00
	00		 jle	 $LN3@Sort
  0002f	8b 75 10	 mov	 esi, DWORD PTR __Ideal$[ebp]
$LL7@Sort:
  00032	85 f6		 test	 esi, esi
  00034	0f 8e bb 00 00
	00		 jle	 $LN6@Sort

; 3125 : 		{	// divide and conquer by quicksort
; 3126 : 		pair<_RanIt, _RanIt> _Mid =
; 3127 : 			_Unguarded_partition(_First, _Last, _Pred);

  0003a	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  0003d	8d 45 f8	 lea	 eax, DWORD PTR __Mid$1[ebp]
  00040	57		 push	 edi
  00041	53		 push	 ebx
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??$_Unguarded_partition@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YA?AU?$pair@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@0@PAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z ; std::_Unguarded_partition<std::pair<float,TFlyVertexSet> *,std::less<void> >

; 3128 : 		_Ideal /= 2, _Ideal += _Ideal / 2;	// allow 1.5 log2(N) divisions

  00048	8b c6		 mov	 eax, esi
  0004a	83 c4 10	 add	 esp, 16			; 00000010H
  0004d	99		 cdq
  0004e	2b c2		 sub	 eax, edx
  00050	8b c8		 mov	 ecx, eax
  00052	d1 f9		 sar	 ecx, 1
  00054	8b c1		 mov	 eax, ecx
  00056	99		 cdq
  00057	2b c2		 sub	 eax, edx
  00059	d1 f8		 sar	 eax, 1
  0005b	03 c8		 add	 ecx, eax

; 3129 : 
; 3130 : 		if (_Mid.first - _First < _Last - _Mid.second)

  0005d	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00062	89 4d 10	 mov	 DWORD PTR __Ideal$[ebp], ecx
  00065	8b cf		 mov	 ecx, edi
  00067	2b 4d fc	 sub	 ecx, DWORD PTR __Mid$1[ebp+4]
  0006a	f7 e9		 imul	 ecx

; 3131 : 			{	// loop on second half
; 3132 : 			_Sort(_First, _Mid.first, _Ideal, _Pred);

  0006c	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  0006f	03 d1		 add	 edx, ecx
  00071	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00076	8b 4d f8	 mov	 ecx, DWORD PTR __Mid$1[ebp]
  00079	c1 fa 07	 sar	 edx, 7
  0007c	2b cb		 sub	 ecx, ebx
  0007e	8b f2		 mov	 esi, edx
  00080	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00083	03 f2		 add	 esi, edx
  00085	f7 e9		 imul	 ecx
  00087	03 d1		 add	 edx, ecx
  00089	c1 fa 07	 sar	 edx, 7
  0008c	8b c2		 mov	 eax, edx
  0008e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00091	03 c2		 add	 eax, edx
  00093	3b c6		 cmp	 eax, esi
  00095	8b 75 10	 mov	 esi, DWORD PTR __Ideal$[ebp]
  00098	56		 push	 esi
  00099	7d 0f		 jge	 SHORT $LN5@Sort
  0009b	8b 45 f8	 mov	 eax, DWORD PTR __Mid$1[ebp]
  0009e	50		 push	 eax
  0009f	53		 push	 ebx
  000a0	e8 00 00 00 00	 call	 ??$_Sort@PAU?$pair@MUTFlyVertexSet@@@std@@HU?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0HU?$less@X@0@@Z ; std::_Sort<std::pair<float,TFlyVertexSet> *,int,std::less<void> >

; 3133 : 			_First = _Mid.second;

  000a5	8b 5d fc	 mov	 ebx, DWORD PTR __Mid$1[ebp+4]

; 3134 : 			}
; 3135 : 		else

  000a8	eb 0d		 jmp	 SHORT $LN34@Sort
$LN5@Sort:

; 3136 : 			{	// loop on first half
; 3137 : 			_Sort(_Mid.second, _Last, _Ideal, _Pred);

  000aa	8b 45 fc	 mov	 eax, DWORD PTR __Mid$1[ebp+4]
  000ad	57		 push	 edi
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 ??$_Sort@PAU?$pair@MUTFlyVertexSet@@@std@@HU?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0HU?$less@X@0@@Z ; std::_Sort<std::pair<float,TFlyVertexSet> *,int,std::less<void> >

; 3138 : 			_Last = _Mid.first;

  000b4	8b 7d f8	 mov	 edi, DWORD PTR __Mid$1[ebp]
$LN34@Sort:

; 3123 : 	_Diff _Count;
; 3124 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

  000b7	8b cf		 mov	 ecx, edi
  000b9	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  000be	2b cb		 sub	 ecx, ebx

; 3136 : 			{	// loop on first half
; 3137 : 			_Sort(_Mid.second, _Last, _Ideal, _Pred);

  000c0	83 c4 10	 add	 esp, 16			; 00000010H
  000c3	f7 e9		 imul	 ecx
  000c5	03 d1		 add	 edx, ecx
  000c7	c1 fa 07	 sar	 edx, 7
  000ca	8b c2		 mov	 eax, edx
  000cc	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000cf	03 c2		 add	 eax, edx
  000d1	83 f8 20	 cmp	 eax, 32			; 00000020H
  000d4	0f 8f 58 ff ff
	ff		 jg	 $LL7@Sort
$LN3@Sort:

; 3143 : 		{	// heap sort if too many divisions
; 3144 : 		_STD make_heap(_First, _Last, _Pred);
; 3145 : 		_STD sort_heap(_First, _Last, _Pred);
; 3146 : 		}
; 3147 : 	else if (1 < _Count)

  000da	83 f8 01	 cmp	 eax, 1
  000dd	7e 0f		 jle	 SHORT $LN27@Sort

; 2488 : 	}
; 2489 : 
; 2490 : 		// TEMPLATE FUNCTION sort_heap
; 2491 : template<class _RanIt> inline
; 2492 : 	void sort_heap(_RanIt _First, _RanIt _Last)
; 2493 : 	{	// order heap by repeatedly popping, using operator<
; 2494 : 	_STD sort_heap(_First, _Last, less<>());
; 2495 : 	}
; 2496 : 
; 2497 : 		// TEMPLATE FUNCTION lower_bound WITH PRED
; 2498 : template<class _FwdIt,
; 2499 : 	class _Ty,
; 2500 : 	class _Diff,
; 2501 : 	class _Pr> inline
; 2502 : 	_FwdIt _Lower_bound(_FwdIt _First, _FwdIt _Last,
; 2503 : 		const _Ty& _Val, _Pr _Pred, _Diff *)
; 2504 : 	{	// find first element not before _Val, using _Pred
; 2505 : 	_Diff _Count = 0;
; 2506 : 	_Distance(_First, _Last, _Count);
; 2507 : 
; 2508 : 	while (0 < _Count)
; 2509 : 		{	// divide and conquer, find half that contains answer
; 2510 : 		_Diff _Count2 = _Count / 2;
; 2511 : 		_FwdIt _Mid = _First;
; 2512 : 		_STD advance(_Mid, _Count2);
; 2513 : 
; 2514 : 		if (_Pred(*_Mid, _Val))
; 2515 : //		if (_DEBUG_LT_PRED(_Pred, *_Mid, _Val))
; 2516 : 			{	// try top half
; 2517 : 			_First = ++_Mid;
; 2518 : 			_Count -= _Count2 + 1;
; 2519 : 			}
; 2520 : 		else
; 2521 : 			_Count = _Count2;
; 2522 : 		}
; 2523 : 	return (_First);
; 2524 : 	}
; 2525 : 
; 2526 : template<class _FwdIt,
; 2527 : 	class _Ty,
; 2528 : 	class _Pr> inline
; 2529 : 	_FwdIt lower_bound(_FwdIt _First, _FwdIt _Last,
; 2530 : 		const _Ty& _Val, _Pr _Pred)
; 2531 : 	{	// find first element not before _Val, using _Pred
; 2532 : //	_DEBUG_ORDER_PRED(_First, _Last, _Pred);
; 2533 : 	return (_Rechecked(_First,
; 2534 : 		_Lower_bound(_Unchecked(_First), _Unchecked(_Last), _Val, _Pred,
; 2535 : 			_Dist_type(_First))));
; 2536 : 	}
; 2537 : 
; 2538 : 		// TEMPLATE FUNCTION lower_bound
; 2539 : template<class _FwdIt,
; 2540 : 	class _Ty> inline
; 2541 : 	_FwdIt lower_bound(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
; 2542 : 	{	// find first element not before _Val, using operator<
; 2543 : 	return (_STD lower_bound(_First, _Last, _Val, less<>()));
; 2544 : 	}
; 2545 : 
; 2546 : 		// TEMPLATE FUNCTION upper_bound WITH PRED
; 2547 : template<class _FwdIt,
; 2548 : 	class _Ty,
; 2549 : 	class _Diff,
; 2550 : 	class _Pr> inline
; 2551 : 	_FwdIt _Upper_bound(_FwdIt _First, _FwdIt _Last,
; 2552 : 		const _Ty& _Val, _Pr _Pred, _Diff *)
; 2553 : 	{	// find first element that _Val is before, using _Pred
; 2554 : 	_Diff _Count = 0;
; 2555 : 	_Distance(_First, _Last, _Count);
; 2556 : 
; 2557 : 	while (0 < _Count)
; 2558 : 		{	// divide and conquer, find half that contains answer
; 2559 : 		_Diff _Count2 = _Count / 2;
; 2560 : 		_FwdIt _Mid = _First;
; 2561 : 		_STD advance(_Mid, _Count2);
; 2562 : 
; 2563 : 		if (!_Pred(_Val, *_Mid))
; 2564 : //		if (!_DEBUG_LT_PRED(_Pred, _Val, *_Mid))
; 2565 : 			{	// try top half
; 2566 : 			_First = ++_Mid;
; 2567 : 			_Count -= _Count2 + 1;
; 2568 : 			}
; 2569 : 		else
; 2570 : 			_Count = _Count2;
; 2571 : 		}
; 2572 : 	return (_First);
; 2573 : 	}
; 2574 : 
; 2575 : template<class _FwdIt,
; 2576 : 	class _Ty,
; 2577 : 	class _Pr> inline
; 2578 : 	_FwdIt upper_bound(_FwdIt _First, _FwdIt _Last,
; 2579 : 		const _Ty& _Val, _Pr _Pred)
; 2580 : 	{	// find first element that _Val is before, using _Pred
; 2581 : //	_DEBUG_ORDER_PRED(_First, _Last, _Pred);
; 2582 : 	return (_Rechecked(_First,
; 2583 : 		_Upper_bound(_Unchecked(_First), _Unchecked(_Last), _Val, _Pred,
; 2584 : 			_Dist_type(_First))));
; 2585 : 	}
; 2586 : 
; 2587 : 		// TEMPLATE FUNCTION upper_bound
; 2588 : template<class _FwdIt,
; 2589 : 	class _Ty> inline
; 2590 : 	_FwdIt upper_bound(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
; 2591 : 	{	// find first element that _Val is before, using operator<
; 2592 : 	return (_STD upper_bound(_First, _Last, _Val, less<>()));
; 2593 : 	}
; 2594 : 
; 2595 : 		// TEMPLATE FUNCTION equal_range WITH PRED
; 2596 : template<class _FwdIt,
; 2597 : 	class _Ty,
; 2598 : 	class _Diff,
; 2599 : 	class _Pr> inline
; 2600 : 	pair<_FwdIt, _FwdIt>
; 2601 : 		_Equal_range(_FwdIt _First, _FwdIt _Last,
; 2602 : 			const _Ty& _Val, _Pr _Pred, _Diff *)
; 2603 : 	{	// find range equivalent to _Val, using _Pred
; 2604 : 	_Diff _Count = 0;
; 2605 : 	_Distance(_First, _Last, _Count);
; 2606 : 
; 2607 : 	while (0 < _Count)
; 2608 : 		{	// divide and conquer, check midpoint
; 2609 : 		_Diff _Count2 = _Count / 2;
; 2610 : 		_FwdIt _Mid = _First;
; 2611 : 		_STD advance(_Mid, _Count2);
; 2612 : 
; 2613 : 		if (_DEBUG_LT_PRED(_Pred, *_Mid, _Val))
; 2614 : 			{	// range begins above _Mid, loop
; 2615 : 			_First = ++_Mid;
; 2616 : 			_Count -= _Count2 + 1;
; 2617 : 			}
; 2618 : 		else if (_Pred(_Val, *_Mid))
; 2619 : 			_Count = _Count2;	// range in first half, loop
; 2620 : 		else
; 2621 : 			{	// range straddles _Mid, find each end and return
; 2622 : 			_FwdIt _First2 = _STD lower_bound(_First, _Mid, _Val, _Pred);
; 2623 : 			_STD advance(_First, _Count);
; 2624 : 			_FwdIt _Last2 = _STD upper_bound(++_Mid, _First, _Val, _Pred);
; 2625 : 			return (pair<_FwdIt, _FwdIt>(_First2, _Last2));
; 2626 : 			}
; 2627 : 		}
; 2628 : 
; 2629 : 	return (pair<_FwdIt, _FwdIt>(_First, _First));	// empty range
; 2630 : 	}
; 2631 : 
; 2632 : template<class _FwdIt,
; 2633 : 	class _Ty,
; 2634 : 	class _Pr> inline
; 2635 : 	pair<_FwdIt, _FwdIt>
; 2636 : 		equal_range(_FwdIt _First, _FwdIt _Last,
; 2637 : 			const _Ty& _Val, _Pr _Pred)
; 2638 : 	{	// find range equivalent to _Val, using _Pred
; 2639 : 	_DEBUG_ORDER_PRED(_First, _Last, _Pred);
; 2640 : 	pair<_UNCHECKED_TYPE(_FwdIt), _UNCHECKED_TYPE(_FwdIt)> _Ans(
; 2641 : 		_Equal_range(_Unchecked(_First), _Unchecked(_Last),
; 2642 : 			_Val, _Pred, _Dist_type(_First)));
; 2643 : 	return (pair<_FwdIt, _FwdIt>(
; 2644 : 		_Rechecked(_First, _Ans.first),
; 2645 : 		_Rechecked(_Last, _Ans.second)));
; 2646 : 	}
; 2647 : 
; 2648 : 		// TEMPLATE FUNCTION equal_range
; 2649 : template<class _FwdIt,
; 2650 : 	class _Ty> inline
; 2651 : 	pair<_FwdIt, _FwdIt>
; 2652 : 		equal_range(_FwdIt _First, _FwdIt _Last,
; 2653 : 			const _Ty& _Val)
; 2654 : 	{	// find range equivalent to _Val, using operator<
; 2655 : 	return (_STD equal_range(_First, _Last, _Val, less<>()));
; 2656 : 	}
; 2657 : 
; 2658 : 		// TEMPLATE FUNCTION binary_search WITH PRED
; 2659 : template<class _FwdIt,
; 2660 : 	class _Ty,
; 2661 : 	class _Pr> inline
; 2662 : 	bool binary_search(_FwdIt _First, _FwdIt _Last,
; 2663 : 		const _Ty& _Val, _Pr _Pred)
; 2664 : 	{	// test if _Val equivalent to some element, using _Pred
; 2665 : 	_First = _STD lower_bound(_First, _Last, _Val, _Pred);
; 2666 : 	return (_First != _Last && !_Pred(_Val, *_First));
; 2667 : 	}
; 2668 : 
; 2669 : 		// TEMPLATE FUNCTION binary_search
; 2670 : template<class _FwdIt,
; 2671 : 	class _Ty> inline
; 2672 : 	bool binary_search(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
; 2673 : 	{	// test if _Val equivalent to some element, using operator<
; 2674 : 	return (_STD binary_search(_First, _Last, _Val, less<>()));
; 2675 : 	}
; 2676 : 
; 2677 : 		// TEMPLATE FUNCTION merge WITH PRED
; 2678 : template<class _InIt1,
; 2679 : 	class _InIt2,
; 2680 : 	class _OutIt,
; 2681 : 	class _Pr> inline
; 2682 : 	_OutIt _Merge0(_InIt1 _First1, _InIt1 _Last1,
; 2683 : 		_InIt2 _First2, _InIt2 _Last2,
; 2684 : 		_OutIt _Dest, _Pr _Pred)
; 2685 : 	{	// copy merging ranges, both using _Pred
; 2686 : 	if (_First1 != _Last1 && _First2 != _Last2)
; 2687 : 		for (; ; )
; 2688 : 			{	// merge either first or second
; 2689 : 			if (_DEBUG_LT_PRED(_Pred, *_First2, *_First1))
; 2690 : 				{	// merge first
; 2691 : 				*_Dest++ = *_First2++;
; 2692 : 				if (_First2 == _Last2)
; 2693 : 					break;
; 2694 : 				}
; 2695 : 			else
; 2696 : 				{	// merge second
; 2697 : 				*_Dest++ = *_First1++;
; 2698 : 				if (_First1 == _Last1)
; 2699 : 					break;
; 2700 : 				}
; 2701 : 			}
; 2702 : 
; 2703 : 	_Dest = _Copy_impl(_First1, _Last1, _Dest);	// copy any tail
; 2704 : 	return (_Copy_impl(_First2, _Last2, _Dest));
; 2705 : 	}
; 2706 : 
; 2707 :  #if _ITERATOR_DEBUG_LEVEL == 0
; 2708 : template<class _InIt1,
; 2709 : 	class _InIt2,
; 2710 : 	class _OutIt,
; 2711 : 	class _Pr> inline
; 2712 : 	_OutIt merge(_InIt1 _First1, _InIt1 _Last1,
; 2713 : 		_InIt2 _First2, _InIt2 _Last2,
; 2714 : 		_OutIt _Dest, _Pr _Pred)
; 2715 : 	{	// copy merging ranges, both using _Pred
; 2716 : 	return (_Merge0(_Unchecked(_First1), _Unchecked(_Last1),
; 2717 : 		_Unchecked(_First2), _Unchecked(_Last2),
; 2718 : 		_Dest, _Pred));
; 2719 : 	}
; 2720 : 
; 2721 :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2722 : template<class _InIt1,
; 2723 : 	class _InIt2,
; 2724 : 	class _OutIt,
; 2725 : 	class _Pr> inline
; 2726 : 	_OutIt _Merge2(_InIt1 _First1, _InIt1 _Last1,
; 2727 : 		_InIt2 _First2, _InIt2 _Last2,
; 2728 : 		_OutIt _Dest, _Pr _Pred, input_iterator_tag,
; 2729 : 		input_iterator_tag, _Mutable_iterator_tag)
; 2730 : 	{	// copy merging ranges, both using _Pred, arbitrary iterators
; 2731 : 	return (_Merge0(_First1, _Last1,
; 2732 : 		_First2, _Last2,
; 2733 : 		_Dest, _Pred));
; 2734 : 	}
; 2735 : 
; 2736 : template<class _InIt1,
; 2737 : 	class _InIt2,
; 2738 : 	class _OutIt,
; 2739 : 	class _Pr> inline
; 2740 : 	_OutIt _Merge2(_InIt1 _First1, _InIt1 _Last1,
; 2741 : 		_InIt2 _First2, _InIt2 _Last2,
; 2742 : 		_OutIt _Dest, _Pr _Pred, random_access_iterator_tag,
; 2743 : 		random_access_iterator_tag, random_access_iterator_tag)
; 2744 : 	{	// copy merging ranges, both using _Pred, random-access iterators
; 2745 : 	_OutIt _Ans = _Dest + (_Last1 - _First1)
; 2746 : 		+ (_Last2 - _First2);	// also checks range
; 2747 : 	_Merge0(_First1, _Last1,
; 2748 : 		_First2, _Last2,
; 2749 : 		_Dest, _Pred);
; 2750 : 	return (_Ans);
; 2751 : 	}
; 2752 : 
; 2753 : template<class _InIt1,
; 2754 : 	class _InIt2,
; 2755 : 	class _OutIt,
; 2756 : 	class _Pr> inline
; 2757 : 	_OutIt _Merge2(_InIt1 _First1, _InIt1 _Last1,
; 2758 : 		_InIt2 _First2, _InIt2 _Last2,
; 2759 : 		_OutIt _Dest, _Pr _Pred, true_type)
; 2760 : 	{	// copy merging ranges, both using _Pred, checked dest
; 2761 : 	return (_Merge2(_First1, _Last1,
; 2762 : 		_First2, _Last2,
; 2763 : 		_Dest, _Pred, _Iter_cat(_First1),
; 2764 : 		_Iter_cat(_First2), _Iter_cat(_Dest)));
; 2765 : 	}
; 2766 : 
; 2767 : template<class _InIt1,
; 2768 : 	class _InIt2,
; 2769 : 	class _OutIt,
; 2770 : 	class _Pr> inline
; 2771 : _SCL_INSECURE_DEPRECATE
; 2772 : 	_OutIt _Merge2(_InIt1 _First1, _InIt1 _Last1,
; 2773 : 		_InIt2 _First2, _InIt2 _Last2,
; 2774 : 		_OutIt _Dest, _Pr _Pred, false_type)
; 2775 : 	{	// copy merging ranges, both using _Pred, unchecked dest
; 2776 : 	return (_Merge2(_First1, _Last1,
; 2777 : 		_First2, _Last2,
; 2778 : 		_Dest, _Pred, _Iter_cat(_First1),
; 2779 : 		_Iter_cat(_First2), _Iter_cat(_Dest)));
; 2780 : 	}
; 2781 : 
; 2782 : template<class _InIt1,
; 2783 : 	class _InIt2,
; 2784 : 	class _OutIt,
; 2785 : 	class _Pr> inline
; 2786 : 	_OutIt merge(_InIt1 _First1, _InIt1 _Last1,
; 2787 : 		_InIt2 _First2, _InIt2 _Last2,
; 2788 : 		_OutIt _Dest, _Pr _Pred)
; 2789 : 	{	// copy merging ranges, both using _Pred
; 2790 : 	_DEBUG_ORDER_PRED(_First1, _Last1, _Pred);
; 2791 : 	_DEBUG_ORDER_PRED(_First2, _Last2, _Pred);
; 2792 : 	_DEBUG_POINTER(_Dest);
; 2793 : 	_DEBUG_POINTER(_Pred);
; 2794 : 	return (_Merge2(_Unchecked(_First1), _Unchecked(_Last1),
; 2795 : 		_Unchecked(_First2), _Unchecked(_Last2),
; 2796 : 		_Dest, _Pred, _Is_checked(_Dest)));
; 2797 : 	}
; 2798 : 
; 2799 :  #if _ITERATOR_DEBUG_ARRAY_OVERLOADS
; 2800 : template<class _InIt1,
; 2801 : 	class _InIt2,
; 2802 : 	class _OutTy,
; 2803 : 	size_t _OutSize,
; 2804 : 	class _Pr> inline
; 2805 : 	_OutTy *merge(_InIt1 _First1, _InIt1 _Last1,
; 2806 : 		_InIt2 _First2, _InIt2 _Last2,
; 2807 : 		_OutTy (&_Dest)[_OutSize], _Pr _Pred)
; 2808 : 	{	// copy merging ranges, both using _Pred, array dest
; 2809 : 	return (_Unchecked(
; 2810 : 		_STD merge(_First1, _Last1,
; 2811 : 			_First2, _Last2,
; 2812 : 			_Array_iterator<_OutTy, _OutSize>(_Dest), _Pred)));
; 2813 : 	}
; 2814 :  #endif /* _ITERATOR_DEBUG_ARRAY_OVERLOADS */
; 2815 :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2816 : 
; 2817 : 		// TEMPLATE FUNCTION merge
; 2818 : template<class _InIt1,
; 2819 : 	class _InIt2,
; 2820 : 	class _OutIt> inline
; 2821 : 	_OutIt merge(_InIt1 _First1, _InIt1 _Last1,
; 2822 : 		_InIt2 _First2, _InIt2 _Last2,
; 2823 : 		_OutIt _Dest)
; 2824 : 	{	// copy merging ranges, both using operator<
; 2825 : 	return (_STD merge(_First1, _Last1, _First2, _Last2, _Dest,
; 2826 : 		less<>()));
; 2827 : 	}
; 2828 : 
; 2829 :  #if _ITERATOR_DEBUG_ARRAY_OVERLOADS
; 2830 : template<class _InIt1,
; 2831 : 	class _InIt2,
; 2832 : 	class _OutTy,
; 2833 : 	size_t _OutSize> inline
; 2834 : 	_OutTy *merge(_InIt1 _First1, _InIt1 _Last1,
; 2835 : 		_InIt2 _First2, _InIt2 _Last2,
; 2836 : 		_OutTy (&_Dest)[_OutSize])
; 2837 : 	{	// copy merging ranges, both using operator<, array dest
; 2838 : 	return (_STD merge(_First1, _Last1, _First2, _Last2, _Dest,
; 2839 : 		less<>()));
; 2840 : 	}
; 2841 :  #endif /* _ITERATOR_DEBUG_ARRAY_OVERLOADS */
; 2842 : 
; 2843 : 		// TEMPLATE FUNCTION inplace_merge WITH PRED
; 2844 : template<class _BidIt1,
; 2845 : 	class _BidIt2,
; 2846 : 	class _BidIt3,
; 2847 : 	class _Pr> inline
; 2848 : 	_BidIt3 _Merge_backward(_BidIt1 _First1, _BidIt1 _Last1,
; 2849 : 		_BidIt2 _First2, _BidIt2 _Last2, _BidIt3 _Dest, _Pr _Pred)
; 2850 : 	{	// merge backwards to _Dest, using _Pred
; 2851 : 	if (_First1 != _Last1 && _First2 != _Last2)
; 2852 : 		for (; ; )
; 2853 : 			{	// merge either first or second
; 2854 : 			if (_DEBUG_LT_PRED(_Pred, *--_Last2, *--_Last1))
; 2855 : 				{	// merge first
; 2856 : 				*--_Dest = _Move(*_Last1);
; 2857 : 				++_Last2;
; 2858 : 				if (_First1 == _Last1)
; 2859 : 					break;
; 2860 : 				}
; 2861 : 			else
; 2862 : 				{	// merge second
; 2863 : 				*--_Dest = _Move(*_Last2);
; 2864 : 				++_Last1;
; 2865 : 				if (_First2 == _Last2)
; 2866 : 					break;
; 2867 : 				}
; 2868 : 			}
; 2869 : 
; 2870 : 	_Dest = _Move_backward(_First2, _Last2, _Dest);	// move any tail
; 2871 : 	return (_Move_backward(_First1, _Last1, _Dest));
; 2872 : 	}
; 2873 : 
; 2874 : template<class _InIt1,
; 2875 : 	class _InIt2,
; 2876 : 	class _OutIt,
; 2877 : 	class _Pr> inline
; 2878 : 	_OutIt _Merge(_InIt1 _First1, _InIt1 _Last1,
; 2879 : 		_InIt2 _First2, _InIt2 _Last2,
; 2880 : 		_OutIt _Dest, _Pr _Pred)
; 2881 : 	{	// move merging ranges, both using _Pred
; 2882 : 	if (_First1 != _Last1 && _First2 != _Last2)
; 2883 : 		for (; ; )
; 2884 : 			{	// merge either first or second
; 2885 : 			if (_DEBUG_LT_PRED(_Pred, *_First2, *_First1))
; 2886 : 				{	// merge first
; 2887 : 				*_Dest++ = _Move(*_First2++);
; 2888 : 				if (_First2 == _Last2)
; 2889 : 					break;
; 2890 : 				}
; 2891 : 			else
; 2892 : 				{	// merge second
; 2893 : 				*_Dest++ = _Move(*_First1++);
; 2894 : 				if (_First1 == _Last1)
; 2895 : 					break;
; 2896 : 				}
; 2897 : 			}
; 2898 : 
; 2899 : 	_Dest = _Move(_First1, _Last1, _Dest);	// move any tail
; 2900 : 	return (_Move(_First2, _Last2, _Dest));
; 2901 : 	}
; 2902 : 
; 2903 : template<class _BidIt,
; 2904 : 	class _Diff,
; 2905 : 	class _Ty,
; 2906 : 	class _Pr> inline
; 2907 : 	void _Buffered_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last,
; 2908 : 		_Diff _Count1, _Diff _Count2,
; 2909 : 			_Temp_iterator<_Ty>& _Tempbuf, _Pr _Pred)
; 2910 : 	{	// merge [_First, _Mid) with [_Mid, _Last), using _Pred
; 2911 : 	if (_Count1 == 0 || _Count2 == 0)
; 2912 : 		;	// do nothing
; 2913 : 	else if (_Count1 + _Count2 == 2)
; 2914 : 		{	// order two one-element partitions
; 2915 : 		if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))
; 2916 : 			_STD iter_swap(_First, _Mid);
; 2917 : 		}
; 2918 : 	else if (_Count1 <= _Count2 && _Count1 <= _Tempbuf._Maxlen())
; 2919 : 		{	// buffer left partition, then merge
; 2920 : 		_Move(_First, _Mid, _Tempbuf._Init());
; 2921 : 		_Merge(_Tempbuf._First(), _Tempbuf._Last(),
; 2922 : 			_Mid, _Last, _First, _Pred);
; 2923 : 		}
; 2924 : 	else if (_Count2 <= _Tempbuf._Maxlen())
; 2925 : 		{	// buffer right partition, then merge
; 2926 : 		_Move(_Mid, _Last, _Tempbuf._Init());
; 2927 : 		_Merge_backward(_First, _Mid,
; 2928 : 			_Tempbuf._First(), _Tempbuf._Last(), _Last, _Pred);
; 2929 : 		}
; 2930 : 	else
; 2931 : 		{	// buffer too small, divide and conquer
; 2932 : 		_BidIt _Firstn, _Lastn;
; 2933 : 		_Diff _Count1n, _Count2n;
; 2934 : 		if (_Count2 < _Count1)
; 2935 : 			{	// left larger, cut it in half and partition right to match
; 2936 : 			_Count1n = _Count1 / 2, _Count2n = 0;
; 2937 : 			_Firstn = _First;
; 2938 : 			_STD advance(_Firstn, _Count1n);
; 2939 : 			_Lastn = _STD lower_bound(_Mid, _Last, *_Firstn, _Pred);
; 2940 : 			_Distance(_Mid, _Lastn, _Count2n);
; 2941 : 			}
; 2942 : 		else
; 2943 : 			{	// right larger, cut it in half and partition left to match
; 2944 : 			_Count1n = 0, _Count2n = _Count2 / 2;
; 2945 : 			_Lastn = _Mid;
; 2946 : 			_STD advance(_Lastn, _Count2n);
; 2947 : 			_Firstn = _STD upper_bound(_First, _Mid, *_Lastn, _Pred);
; 2948 : 			_Distance(_First, _Firstn, _Count1n);
; 2949 : 			}
; 2950 : 		_BidIt _Midn = _Buffered_rotate(_Firstn, _Mid, _Lastn,
; 2951 : 			_Count1 - _Count1n, _Count2n, _Tempbuf);	// rearrange middle
; 2952 : 		_Buffered_merge(_First, _Firstn, _Midn,
; 2953 : 			_Count1n, _Count2n, _Tempbuf, _Pred);	// merge each new part
; 2954 : 		_Buffered_merge(_Midn, _Lastn, _Last,
; 2955 : 			_Count1 - _Count1n, _Count2 - _Count2n, _Tempbuf, _Pred);
; 2956 : 		}
; 2957 : 	}
; 2958 : 
; 2959 : template<class _BidIt,
; 2960 : 	class _Diff,
; 2961 : 	class _Ty,
; 2962 : 	class _Pr> inline
; 2963 : 	void _Inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last, _Pr _Pred,
; 2964 : 		_Diff *, _Ty *)
; 2965 : 	{	// merge [_First, _Mid) with [_Mid, _Last), using _Pred
; 2966 : 	_Diff _Count1 = 0;
; 2967 : 	_Distance(_First, _Mid, _Count1);
; 2968 : 	_Diff _Count2 = 0;
; 2969 : 	_Distance(_Mid, _Last, _Count2);
; 2970 : 	_Temp_iterator<_Ty> _Tempbuf(_Count1 < _Count2 ? _Count1 : _Count2);
; 2971 : 	_Buffered_merge(_First, _Mid, _Last,
; 2972 : 		_Count1, _Count2, _Tempbuf, _Pred);
; 2973 : 	}
; 2974 : 
; 2975 : template<class _BidIt,
; 2976 : 	class _Pr> inline
; 2977 : 	void inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last, _Pr _Pred)
; 2978 : 	{	// merge [_First, _Mid) with [_Mid, _Last), using _Pred
; 2979 : 	_DEBUG_ORDER_PRED(_First, _Mid, _Pred);
; 2980 : 	_DEBUG_ORDER_PRED(_Mid, _Last, _Pred);
; 2981 : 	if (_First != _Mid && _Mid != _Last)
; 2982 : 		_Inplace_merge(
; 2983 : 			_Unchecked(_First), _Unchecked(_Mid), _Unchecked(_Last), _Pred,
; 2984 : 			_Dist_type(_First), _Val_type(_First));
; 2985 : 	}
; 2986 : 
; 2987 : 		// TEMPLATE FUNCTION inplace_merge
; 2988 : template<class _BidIt> inline
; 2989 : 	void inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last)
; 2990 : 	{	// merge [_First, _Mid) with [_Mid, _Last), using operator<
; 2991 : 	_STD inplace_merge(_First, _Mid, _Last, less<>());
; 2992 : 	}
; 2993 : 
; 2994 : 		// TEMPLATE FUNCTION sort WITH PRED
; 2995 : template<class _BidIt,
; 2996 : 	class _Pr,
; 2997 : 	class _Ty> inline
; 2998 : 	void _Insertion_sort1(_BidIt _First, _BidIt _Last, _Pr _Pred, _Ty *)
; 2999 : 	{	// insertion sort [_First, _Last), using _Pred
; 3000 : 	if (_First != _Last)
; 3001 : 		for (_BidIt _Next = _First; ++_Next != _Last; )
; 3002 : 			{	// order next element
; 3003 : 			_BidIt _Next1 = _Next;
; 3004 : 			_Ty _Val = _Move(*_Next);
; 3005 : 
; 3006 : 			if (_DEBUG_LT_PRED(_Pred, _Val, *_First))
; 3007 : 				{	// found new earliest element, move to front
; 3008 : 				_Move_backward(_First, _Next, ++_Next1);
; 3009 : 				*_First = _Move(_Val);
; 3010 : 				}
; 3011 : 			else
; 3012 : 				{	// look for insertion point after first
; 3013 : 				for (_BidIt _First1 = _Next1;
; 3014 : 					_DEBUG_LT_PRED(_Pred, _Val, *--_First1);
; 3015 : 					_Next1 = _First1)
; 3016 : 					*_Next1 = _Move(*_First1);	// move hole down
; 3017 : 				*_Next1 = _Move(_Val);	// insert element in hole
; 3018 : 				}
; 3019 : 			}
; 3020 : 	}
; 3021 : 
; 3022 : template<class _BidIt,
; 3023 : 	class _Pr> inline
; 3024 : 	void _Insertion_sort(_BidIt _First, _BidIt _Last, _Pr _Pred)
; 3025 : 	{	// insertion sort [_First, _Last), using _Pred
; 3026 : 	_Insertion_sort1(_First, _Last, _Pred, _Val_type(_First));

  000df	6a 00		 push	 0
  000e1	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  000e4	57		 push	 edi
  000e5	53		 push	 ebx
  000e6	e8 00 00 00 00	 call	 ??$_Insertion_sort1@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@U12@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@0@Z ; std::_Insertion_sort1<std::pair<float,TFlyVertexSet> *,std::less<void>,std::pair<float,TFlyVertexSet> >
  000eb	83 c4 10	 add	 esp, 16			; 00000010H
$LN27@Sort:
  000ee	5f		 pop	 edi
  000ef	5e		 pop	 esi
  000f0	5b		 pop	 ebx

; 3148 : 		_Insertion_sort(_First, _Last, _Pred);	// small
; 3149 : 	}

  000f1	8b e5		 mov	 esp, ebp
  000f3	5d		 pop	 ebp
  000f4	c3		 ret	 0
$LN6@Sort:

; 3139 : 			}
; 3140 : 		}
; 3141 : 
; 3142 : 	if (_ISORT_MAX < _Count)

  000f5	83 f8 20	 cmp	 eax, 32			; 00000020H
  000f8	7e e0		 jle	 SHORT $LN3@Sort

; 2459 : 	if (1 < _Last - _First)

  000fa	8b cf		 mov	 ecx, edi
  000fc	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00101	2b cb		 sub	 ecx, ebx
  00103	f7 e9		 imul	 ecx
  00105	03 d1		 add	 edx, ecx
  00107	c1 fa 07	 sar	 edx, 7
  0010a	8b c2		 mov	 eax, edx
  0010c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0010f	03 c2		 add	 eax, edx
  00111	83 f8 01	 cmp	 eax, 1
  00114	7e 11		 jle	 SHORT $LN10@Sort

; 2460 : 		_Make_heap(_Unchecked(_First), _Unchecked(_Last), _Pred,
; 2461 : 			_Dist_type(_First), _Val_type(_First));

  00116	6a 00		 push	 0
  00118	6a 00		 push	 0
  0011a	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  0011d	57		 push	 edi
  0011e	53		 push	 ebx
  0011f	e8 00 00 00 00	 call	 ??$_Make_heap@PAU?$pair@MUTFlyVertexSet@@@std@@HU12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@PAH0@Z ; std::_Make_heap<std::pair<float,TFlyVertexSet> *,int,std::pair<float,TFlyVertexSet>,std::less<void> >
  00124	83 c4 14	 add	 esp, 20			; 00000014H
$LN10@Sort:

; 2462 : 	}
; 2463 : 
; 2464 : 		// TEMPLATE FUNCTION make_heap
; 2465 : template<class _RanIt> inline
; 2466 : 	void make_heap(_RanIt _First, _RanIt _Last)
; 2467 : 	{	// make [_First, _Last) into a heap, using operator<
; 2468 : 	_STD make_heap(_First, _Last, less<>());
; 2469 : 	}
; 2470 : 
; 2471 : 		// TEMPLATE FUNCTION sort_heap WITH PRED
; 2472 : template<class _RanIt,
; 2473 : 	class _Pr> inline
; 2474 : 	void _Sort_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
; 2475 : 	{	// order heap by repeatedly popping, using _Pred
; 2476 : 	for (; 1 < _Last - _First; --_Last)
; 2477 : 		_Pop_heap(_First, _Last, _Pred);
; 2478 : 	}
; 2479 : 
; 2480 : template<class _RanIt,
; 2481 : 	class _Pr> inline
; 2482 : 	void sort_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
; 2483 : 	{	// order heap by repeatedly popping, using _Pred
; 2484 : 	_DEBUG_RANGE(_First, _Last);
; 2485 : 	_DEBUG_POINTER(_Pred);
; 2486 : 	_DEBUG_HEAP_PRED(_First, _Last, _Pred);
; 2487 : 	_Sort_heap(_Unchecked(_First), _Unchecked(_Last), _Pred);

  00127	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  0012a	57		 push	 edi
  0012b	53		 push	 ebx
  0012c	e8 00 00 00 00	 call	 ??$_Sort_heap@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z ; std::_Sort_heap<std::pair<float,TFlyVertexSet> *,std::less<void> >
  00131	83 c4 0c	 add	 esp, 12			; 0000000cH
  00134	5f		 pop	 edi
  00135	5e		 pop	 esi
  00136	5b		 pop	 ebx

; 3148 : 		_Insertion_sort(_First, _Last, _Pred);	// small
; 3149 : 	}

  00137	8b e5		 mov	 esp, ebp
  00139	5d		 pop	 ebp
  0013a	c3		 ret	 0
??$_Sort@PAU?$pair@MUTFlyVertexSet@@@std@@HU?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0HU?$less@X@0@@Z ENDP ; std::_Sort<std::pair<float,TFlyVertexSet> *,int,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__Iter$ = 8						; size = 4
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@0@@Z PROC ; std::_Unchecked<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >, COMDAT

; 395  : 	{	// convert to unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 396  : 	return (_Iter._Unchecked());

  00003	8b 45 08	 mov	 eax, DWORD PTR __Iter$[ebp]

; 397  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@0@@Z ENDP ; std::_Unchecked<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAVCFlyTrace@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@@std@@YAPAPAVCFlyTrace@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVCFlyTrace@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@@std@@YAPAPAVCFlyTrace@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@0@@Z PROC ; std::_Uninitialized_move<CFlyTrace * *,CFlyTrace * *,std::_Wrap_alloc<std::allocator<CFlyTrace *> > >, COMDAT

; 492  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 472  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 473  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 474  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 493  : 	return (_Rechecked(_Dest,
; 494  : 		_Uninit_move(_Unchecked(_First), _Unchecked(_Last),
; 495  : 			_Unchecked(_Dest), _Al)));
; 496  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninitialized_move@PAPAVCFlyTrace@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@@std@@YAPAPAVCFlyTrace@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<CFlyTrace * *,CFlyTrace * *,std::_Wrap_alloc<std::allocator<CFlyTrace *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@U?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@2@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@U?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@2@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@0@@Z PROC ; std::_Uninitialized_move<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *,std::_Wrap_alloc<std::allocator<std::pair<float,TFlyVertexSet> > > >, COMDAT

; 492  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 484  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	6a 00		 push	 0
  00008	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000b	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000e	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	e8 00 00 00 00	 call	 ??$_Uninit_move@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@U12@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *,std::allocator<std::pair<float,TFlyVertexSet> >,std::pair<float,TFlyVertexSet> >
  00019	83 c4 18	 add	 esp, 24			; 00000018H

; 493  : 	return (_Rechecked(_Dest,
; 494  : 		_Uninit_move(_Unchecked(_First), _Unchecked(_Last),
; 495  : 			_Unchecked(_Dest), _Al)));
; 496  : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Uninitialized_move@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@U?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@2@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *,std::_Wrap_alloc<std::allocator<std::pair<float,TFlyVertexSet> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0AAU?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0AAU?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::pair<float,TFlyVertexSet> > > >, COMDAT

; 81   : 	for (; _First != _Last; ++_First)
; 82   : 		_Al.destroy(_First);
; 83   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0AAU?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::pair<float,TFlyVertexSet> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??$_Ptr_cat@U?$pair@MUTFlyVertexSet@@@std@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU?$pair@MUTFlyVertexSet@@@0@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@U?$pair@MUTFlyVertexSet@@@std@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU?$pair@MUTFlyVertexSet@@@0@0@Z PROC ; std::_Ptr_cat<std::pair<float,TFlyVertexSet>,std::pair<float,TFlyVertexSet> >, COMDAT

; 444  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 445  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 446  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 447  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@U?$pair@MUTFlyVertexSet@@@std@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU?$pair@MUTFlyVertexSet@@@0@0@Z ENDP ; std::_Ptr_cat<std::pair<float,TFlyVertexSet>,std::pair<float,TFlyVertexSet> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@@std@@YAXPAPAVCFlyTrace@@0AAU?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@@std@@YAXPAPAVCFlyTrace@@0AAU?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CFlyTrace *> > >, COMDAT

; 90   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@@std@@YAXPAPAVCFlyTrace@@0AAU?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CFlyTrace *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??$_Ptr_cat@PAVCFlyTrace@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCFlyTrace@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAVCFlyTrace@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCFlyTrace@@0@Z PROC ; std::_Ptr_cat<CFlyTrace *,CFlyTrace *>, COMDAT

; 444  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 445  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 446  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 447  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@PAVCFlyTrace@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCFlyTrace@@0@Z ENDP ; std::_Ptr_cat<CFlyTrace *,CFlyTrace *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT

; 729  : 		{	// destroy object at _Ptr
; 730  : 		_Al.destroy(_Ptr);
; 731  : 		}

  00000	c3		 ret	 0
??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z PROC ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT

; 720  : 		static void construct(_Alloc& _Al, _Objty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN7@construct
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN7@construct:

; 721  : 			_Types&&... _Args)
; 722  : 		{	// construct _Objty(_Types...) at _Ptr
; 723  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 724  : 		}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z ENDP ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\type_traits
;	COMDAT ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z PROC ; std::forward<std::_Container_proxy>, COMDAT

; 1504 : 	{	// forward an lvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ENDP ; std::forward<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$destroy@PAVCFlyTrace@@@?$allocator_traits@V?$allocator@PAVCFlyTrace@@@std@@@std@@SAXAAV?$allocator@PAVCFlyTrace@@@1@PAPAVCFlyTrace@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAVCFlyTrace@@@?$allocator_traits@V?$allocator@PAVCFlyTrace@@@std@@@std@@SAXAAV?$allocator@PAVCFlyTrace@@@1@PAPAVCFlyTrace@@@Z PROC ; std::allocator_traits<std::allocator<CFlyTrace *> >::destroy<CFlyTrace *>, COMDAT

; 729  : 		{	// destroy object at _Ptr
; 730  : 		_Al.destroy(_Ptr);
; 731  : 		}

  00000	c3		 ret	 0
??$destroy@PAVCFlyTrace@@@?$allocator_traits@V?$allocator@PAVCFlyTrace@@@std@@@std@@SAXAAV?$allocator@PAVCFlyTrace@@@1@PAPAVCFlyTrace@@@Z ENDP ; std::allocator_traits<std::allocator<CFlyTrace *> >::destroy<CFlyTrace *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@PAVCFlyTrace@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCFlyTrace@@@std@@@std@@SAXAAV?$allocator@PAVCFlyTrace@@@1@PAPAVCFlyTrace@@ABQAV3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAVCFlyTrace@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCFlyTrace@@@std@@@std@@SAXAAV?$allocator@PAVCFlyTrace@@@1@PAPAVCFlyTrace@@ABQAV3@@Z PROC ; std::allocator_traits<std::allocator<CFlyTrace *> >::construct<CFlyTrace *,CFlyTrace * const &>, COMDAT

; 720  : 		static void construct(_Alloc& _Al, _Objty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 593  : 		::new ((void *)_Ptr) _Ty(_Val);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN7@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN7@construct:

; 721  : 			_Types&&... _Args)
; 722  : 		{	// construct _Objty(_Types...) at _Ptr
; 723  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 724  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@PAVCFlyTrace@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCFlyTrace@@@std@@@std@@SAXAAV?$allocator@PAVCFlyTrace@@@1@PAPAVCFlyTrace@@ABQAV3@@Z ENDP ; std::allocator_traits<std::allocator<CFlyTrace *> >::construct<CFlyTrace *,CFlyTrace * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\type_traits
;	COMDAT ??$forward@ABQAVCFlyTrace@@@std@@YAABQAVCFlyTrace@@ABQAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAVCFlyTrace@@@std@@YAABQAVCFlyTrace@@ABQAV1@@Z PROC ; std::forward<CFlyTrace * const &>, COMDAT

; 1504 : 	{	// forward an lvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABQAVCFlyTrace@@@std@@YAABQAVCFlyTrace@@ABQAV1@@Z ENDP ; std::forward<CFlyTrace * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@PAVCFlyTrace@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCFlyTrace@@@std@@@std@@SAXAAV?$allocator@PAVCFlyTrace@@@1@PAPAVCFlyTrace@@AAPAV3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAVCFlyTrace@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCFlyTrace@@@std@@@std@@SAXAAV?$allocator@PAVCFlyTrace@@@1@PAPAVCFlyTrace@@AAPAV3@@Z PROC ; std::allocator_traits<std::allocator<CFlyTrace *> >::construct<CFlyTrace *,CFlyTrace * &>, COMDAT

; 720  : 		static void construct(_Alloc& _Al, _Objty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN7@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN7@construct:

; 721  : 			_Types&&... _Args)
; 722  : 		{	// construct _Objty(_Types...) at _Ptr
; 723  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 724  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@PAVCFlyTrace@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCFlyTrace@@@std@@@std@@SAXAAV?$allocator@PAVCFlyTrace@@@1@PAPAVCFlyTrace@@AAPAV3@@Z ENDP ; std::allocator_traits<std::allocator<CFlyTrace *> >::construct<CFlyTrace *,CFlyTrace * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\type_traits
;	COMDAT ??$forward@AAPAVCFlyTrace@@@std@@YAAAPAVCFlyTrace@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAVCFlyTrace@@@std@@YAAAPAVCFlyTrace@@AAPAV1@@Z PROC ; std::forward<CFlyTrace * &>, COMDAT

; 1504 : 	{	// forward an lvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAVCFlyTrace@@@std@@YAAAPAVCFlyTrace@@AAPAV1@@Z ENDP ; std::forward<CFlyTrace * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$pair@MUD3DXVECTOR3@@@std@@@?$allocator_traits@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@1@PAPAU?$pair@MUD3DXVECTOR3@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAU?$pair@MUD3DXVECTOR3@@@std@@@?$allocator_traits@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@1@PAPAU?$pair@MUD3DXVECTOR3@@@1@@Z PROC ; std::allocator_traits<std::allocator<std::pair<float,D3DXVECTOR3> > >::destroy<std::pair<float,D3DXVECTOR3> *>, COMDAT

; 729  : 		{	// destroy object at _Ptr
; 730  : 		_Al.destroy(_Ptr);
; 731  : 		}

  00000	c3		 ret	 0
??$destroy@PAU?$pair@MUD3DXVECTOR3@@@std@@@?$allocator_traits@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@1@PAPAU?$pair@MUD3DXVECTOR3@@@1@@Z ENDP ; std::allocator_traits<std::allocator<std::pair<float,D3DXVECTOR3> > >::destroy<std::pair<float,D3DXVECTOR3> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@YAXPAPAU?$pair@MUD3DXVECTOR3@@@0@0AAU?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@YAXPAPAU?$pair@MUD3DXVECTOR3@@@0@0AAU?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> *> > >, COMDAT

; 90   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@YAXPAPAU?$pair@MUD3DXVECTOR3@@@0@0AAU?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\xmemory
;	COMDAT ??$_Uninit_def_fill_n@PAU?$pair@MUD3DXVECTOR3@@@std@@IPAU12@@std@@YAXPAPAU?$pair@MUD3DXVECTOR3@@@0@IAAU?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_def_fill_n@PAU?$pair@MUD3DXVECTOR3@@@std@@IPAU12@@std@@YAXPAPAU?$pair@MUD3DXVECTOR3@@@0@IAAU?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_def_fill_n<std::pair<float,D3DXVECTOR3> *,unsigned int,std::pair<float,D3DXVECTOR3> *>, COMDAT

; 681  : 	{	// copy _Count * _Valty() to raw _First, using _Al, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File a:\vs\vc\include\xutility

; 2632 : 	for (; 0 < _Count; --_Count, ++_Dest)

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 09		 je	 SHORT $LN5@Uninit_def
; File a:\vs\vc\include\xmemory

; 682  : 	_Fill_n(_First, _Count, (_Valty)0);

  0000a	57		 push	 edi
  0000b	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0000e	33 c0		 xor	 eax, eax
  00010	f3 ab		 rep stosd
  00012	5f		 pop	 edi
$LN5@Uninit_def:

; 683  : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$_Uninit_def_fill_n@PAU?$pair@MUD3DXVECTOR3@@@std@@IPAU12@@std@@YAXPAPAU?$pair@MUD3DXVECTOR3@@@0@IAAU?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_def_fill_n<std::pair<float,D3DXVECTOR3> *,unsigned int,std::pair<float,D3DXVECTOR3> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??$_Ptr_cat@PAU?$pair@MUD3DXVECTOR3@@@std@@PAU12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAU?$pair@MUD3DXVECTOR3@@@0@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAU?$pair@MUD3DXVECTOR3@@@std@@PAU12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAU?$pair@MUD3DXVECTOR3@@@0@0@Z PROC ; std::_Ptr_cat<std::pair<float,D3DXVECTOR3> *,std::pair<float,D3DXVECTOR3> *>, COMDAT

; 444  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 445  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 446  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 447  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@PAU?$pair@MUD3DXVECTOR3@@@std@@PAU12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAU?$pair@MUD3DXVECTOR3@@@0@0@Z ENDP ; std::_Ptr_cat<std::pair<float,D3DXVECTOR3> *,std::pair<float,D3DXVECTOR3> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??$_Val_type@PAPAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAPAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@@Z PROC ; std::_Val_type<std::pair<float,D3DXVECTOR3> * *>, COMDAT

; 646  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 647  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAPAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@@Z ENDP ; std::_Val_type<std::pair<float,D3DXVECTOR3> * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??$_Rechecked@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAAAPAPAU?$pair@MUD3DXVECTOR3@@@0@AAPAPAU10@PAPAU10@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAAAPAPAU?$pair@MUD3DXVECTOR3@@@0@AAPAPAU10@PAPAU10@@Z PROC ; std::_Rechecked<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>, COMDAT

; 288  : 	{	// reset checked from unchecked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 289  : 	_Dest = _Src;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 290  : 	return (_Dest);
; 291  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Rechecked@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAAAPAPAU?$pair@MUD3DXVECTOR3@@@0@AAPAPAU10@PAPAU10@@Z ENDP ; std::_Rechecked<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory
;	COMDAT ??$_Uninit_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@U?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@2@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@00AAU?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@U?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@2@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@00AAU?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@0@@Z PROC ; std::_Uninit_copy<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *,std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> *> > >, COMDAT

; 414  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 405  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 415  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 416  : 		_Ptr_cat(_First, _Dest)));
; 417  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninit_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@U?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@2@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@00AAU?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@0@@Z ENDP ; std::_Uninit_copy<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *,std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??$_Unchecked@PAPAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAPAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@@Z PROC ; std::_Unchecked<std::pair<float,D3DXVECTOR3> * *>, COMDAT

; 280  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 281  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 282  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAPAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@@Z ENDP ; std::_Unchecked<std::pair<float,D3DXVECTOR3> * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@U?$pair@MUTFlyVertexSet@@@std@@U12@@?$allocator_traits@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@1@PAU?$pair@MUTFlyVertexSet@@@1@$$QAU31@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U?$pair@MUTFlyVertexSet@@@std@@U12@@?$allocator_traits@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@1@PAU?$pair@MUTFlyVertexSet@@@1@$$QAU31@@Z PROC ; std::allocator_traits<std::allocator<std::pair<float,TFlyVertexSet> > >::construct<std::pair<float,TFlyVertexSet>,std::pair<float,TFlyVertexSet> >, COMDAT

; 720  : 		static void construct(_Alloc& _Al, _Objty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 16		 je	 SHORT $LN7@construct
; File a:\vs\vc\include\utility

; 157  : 		{	// construct from moved compatible pair

  0000b	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000e	56		 push	 esi
  0000f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00011	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
  00014	89 07		 mov	 DWORD PTR [edi], eax
  00016	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0001b	83 c7 04	 add	 edi, 4
  0001e	f3 a5		 rep movsd
  00020	5e		 pop	 esi
$LN7@construct:
  00021	5f		 pop	 edi
; File a:\vs\vc\include\xmemory0

; 724  : 		}

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$construct@U?$pair@MUTFlyVertexSet@@@std@@U12@@?$allocator_traits@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@1@PAU?$pair@MUTFlyVertexSet@@@1@$$QAU31@@Z ENDP ; std::allocator_traits<std::allocator<std::pair<float,TFlyVertexSet> > >::construct<std::pair<float,TFlyVertexSet>,std::pair<float,TFlyVertexSet> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\type_traits
;	COMDAT ??$move@AAP6AXPAVCFlyTrace@@@Z@std@@YA$$QAP6AXPAVCFlyTrace@@@ZAAP6AX0@Z@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAP6AXPAVCFlyTrace@@@Z@std@@YA$$QAP6AXPAVCFlyTrace@@@ZAAP6AX0@Z@Z PROC ; std::move<void (__cdecl*&)(CFlyTrace *)>, COMDAT

; 1519 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1520 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1521 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAP6AXPAVCFlyTrace@@@Z@std@@YA$$QAP6AXPAVCFlyTrace@@@ZAAP6AX0@Z@Z ENDP ; std::move<void (__cdecl*&)(CFlyTrace *)>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\algorithm
;	COMDAT ??$_For_each@PAPAVCFlyTrace@@P6AXPAV1@@Z@std@@YAXPAPAVCFlyTrace@@0AAP6AXPAV1@@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Func$ = 16						; size = 4
??$_For_each@PAPAVCFlyTrace@@P6AXPAV1@@Z@std@@YAXPAPAVCFlyTrace@@0AAP6AXPAV1@@Z@Z PROC ; std::_For_each<CFlyTrace * *,void (__cdecl*)(CFlyTrace *)>, COMDAT

; 22   : 	{	// perform function for each element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	33 c9		 xor	 ecx, ecx
  00009	56		 push	 esi
  0000a	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000d	2b de		 sub	 ebx, esi
  0000f	83 c3 03	 add	 ebx, 3
  00012	c1 eb 02	 shr	 ebx, 2
  00015	57		 push	 edi
  00016	33 ff		 xor	 edi, edi
  00018	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001b	0f 47 d9	 cmova	 ebx, ecx

; 23   : 	for (; _First != _Last; ++_First)

  0001e	85 db		 test	 ebx, ebx
  00020	74 14		 je	 SHORT $LN1@For_each
$LL3@For_each:

; 24   : 		_Func(*_First);

  00022	8b 45 10	 mov	 eax, DWORD PTR __Func$[ebp]
  00025	ff 36		 push	 DWORD PTR [esi]
  00027	8b 00		 mov	 eax, DWORD PTR [eax]
  00029	ff d0		 call	 eax
  0002b	47		 inc	 edi
  0002c	8d 76 04	 lea	 esi, DWORD PTR [esi+4]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b fb		 cmp	 edi, ebx
  00034	75 ec		 jne	 SHORT $LL3@For_each
$LN1@For_each:
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx

; 25   : 	}

  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
??$_For_each@PAPAVCFlyTrace@@P6AXPAV1@@Z@std@@YAXPAPAVCFlyTrace@@0AAP6AXPAV1@@Z@Z ENDP ; std::_For_each<CFlyTrace * *,void (__cdecl*)(CFlyTrace *)>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@YAPAPAVCFlyTrace@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__Iter$ = 8						; size = 4
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@YAPAPAVCFlyTrace@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@0@@Z PROC ; std::_Unchecked<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >, COMDAT

; 395  : 	{	// convert to unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 396  : 	return (_Iter._Unchecked());

  00003	8b 45 08	 mov	 eax, DWORD PTR __Iter$[ebp]

; 397  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@YAPAPAVCFlyTrace@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@0@@Z ENDP ; std::_Unchecked<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$destroy@U?$pair@MUD3DXVECTOR3@@@std@@@?$allocator_traits@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@1@PAU?$pair@MUD3DXVECTOR3@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U?$pair@MUD3DXVECTOR3@@@std@@@?$allocator_traits@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@1@PAU?$pair@MUD3DXVECTOR3@@@1@@Z PROC ; std::allocator_traits<std::allocator<std::pair<float,D3DXVECTOR3> > >::destroy<std::pair<float,D3DXVECTOR3> >, COMDAT

; 729  : 		{	// destroy object at _Ptr
; 730  : 		_Al.destroy(_Ptr);
; 731  : 		}

  00000	c3		 ret	 0
??$destroy@U?$pair@MUD3DXVECTOR3@@@std@@@?$allocator_traits@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@1@PAU?$pair@MUD3DXVECTOR3@@@1@@Z ENDP ; std::allocator_traits<std::allocator<std::pair<float,D3DXVECTOR3> > >::destroy<std::pair<float,D3DXVECTOR3> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@U?$pair@MUD3DXVECTOR3@@@std@@U12@@?$allocator_traits@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@1@PAU?$pair@MUD3DXVECTOR3@@@1@$$QAU31@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U?$pair@MUD3DXVECTOR3@@@std@@U12@@?$allocator_traits@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@1@PAU?$pair@MUD3DXVECTOR3@@@1@$$QAU31@@Z PROC ; std::allocator_traits<std::allocator<std::pair<float,D3DXVECTOR3> > >::construct<std::pair<float,D3DXVECTOR3>,std::pair<float,D3DXVECTOR3> >, COMDAT

; 720  : 		static void construct(_Alloc& _Al, _Objty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 17		 je	 SHORT $LN7@construct
; File a:\vs\vc\include\utility

; 157  : 		{	// construct from moved compatible pair

  0000a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	f3 0f 7e 41 04	 movq	 xmm0, QWORD PTR [ecx+4]
  00016	66 0f d6 42 04	 movq	 QWORD PTR [edx+4], xmm0
  0001b	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0001e	89 42 0c	 mov	 DWORD PTR [edx+12], eax
$LN7@construct:
; File a:\vs\vc\include\xmemory0

; 724  : 		}

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??$construct@U?$pair@MUD3DXVECTOR3@@@std@@U12@@?$allocator_traits@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@1@PAU?$pair@MUD3DXVECTOR3@@@1@$$QAU31@@Z ENDP ; std::allocator_traits<std::allocator<std::pair<float,D3DXVECTOR3> > >::construct<std::pair<float,D3DXVECTOR3>,std::pair<float,D3DXVECTOR3> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\algorithm
;	COMDAT ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@0@0U?$less@X@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@0@0U?$less@X@0@@Z PROC ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >,std::less<void> >, COMDAT

; 3154 : 	{	// order [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File a:\vs\vc\include\vector

; 194  : 		return (this->_Ptr - _Right._Ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  0000b	57		 push	 edi
  0000c	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
; File a:\vs\vc\include\algorithm

; 3157 : 	_Sort(_Unchecked(_First), _Unchecked(_Last), _Last - _First, _Pred);

  0000f	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
; File a:\vs\vc\include\vector

; 194  : 		return (this->_Ptr - _Right._Ptr);

  00012	2b f9		 sub	 edi, ecx
  00014	f7 ef		 imul	 edi
  00016	03 d7		 add	 edx, edi
  00018	c1 fa 07	 sar	 edx, 7
  0001b	8b c2		 mov	 eax, edx
  0001d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00020	03 c2		 add	 eax, edx
; File a:\vs\vc\include\algorithm

; 3157 : 	_Sort(_Unchecked(_First), _Unchecked(_Last), _Last - _First, _Pred);

  00022	50		 push	 eax
  00023	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??$_Sort@PAU?$pair@MUTFlyVertexSet@@@std@@HU?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0HU?$less@X@0@@Z ; std::_Sort<std::pair<float,TFlyVertexSet> *,int,std::less<void> >
  0002c	83 c4 10	 add	 esp, 16			; 00000010H
  0002f	5f		 pop	 edi

; 3158 : 	}

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@0@0U?$less@X@0@@Z ENDP ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\utility
;	COMDAT ??$?0MUTFlyVertexSet@@X@?$pair@MUTFlyVertexSet@@@std@@QAE@$$QAU01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0MUTFlyVertexSet@@X@?$pair@MUTFlyVertexSet@@@std@@QAE@$$QAU01@@Z PROC ; std::pair<float,TFlyVertexSet>::pair<float,TFlyVertexSet><float,TFlyVertexSet,void>, COMDAT
; _this$ = ecx

; 157  : 		{	// construct from moved compatible pair

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0000e	56		 push	 esi
  0000f	8b 02		 mov	 eax, DWORD PTR [edx]
  00011	8d 72 04	 lea	 esi, DWORD PTR [edx+4]
  00014	57		 push	 edi
  00015	89 03		 mov	 DWORD PTR [ebx], eax
  00017	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  0001a	f3 a5		 rep movsd
  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi

; 158  : 		}

  0001e	8b c3		 mov	 eax, ebx
  00020	5b		 pop	 ebx
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??$?0MUTFlyVertexSet@@X@?$pair@MUTFlyVertexSet@@@std@@QAE@$$QAU01@@Z ENDP ; std::pair<float,TFlyVertexSet>::pair<float,TFlyVertexSet><float,TFlyVertexSet,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\utility
;	COMDAT ??$?0MUTFlyVertexSet@@X@?$pair@MUTFlyVertexSet@@@std@@QAE@$$QAM$$QAUTFlyVertexSet@@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0MUTFlyVertexSet@@X@?$pair@MUTFlyVertexSet@@@std@@QAE@$$QAM$$QAUTFlyVertexSet@@@Z PROC ; std::pair<float,TFlyVertexSet>::pair<float,TFlyVertexSet><float,TFlyVertexSet,void>, COMDAT
; _this$ = ecx

; 144  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b d1		 mov	 edx, ecx
  00008	56		 push	 esi
  00009	8b 75 0c	 mov	 esi, DWORD PTR __Val2$[ebp]
  0000c	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00011	57		 push	 edi
  00012	8b 00		 mov	 eax, DWORD PTR [eax]
  00014	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
  00017	89 02		 mov	 DWORD PTR [edx], eax

; 145  : 		}

  00019	8b c2		 mov	 eax, edx
  0001b	f3 a5		 rep movsd
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
??$?0MUTFlyVertexSet@@X@?$pair@MUTFlyVertexSet@@@std@@QAE@$$QAM$$QAUTFlyVertexSet@@@Z ENDP ; std::pair<float,TFlyVertexSet>::pair<float,TFlyVertexSet><float,TFlyVertexSet,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\type_traits
;	COMDAT ??$forward@UTFlyVertexSet@@@std@@YA$$QAUTFlyVertexSet@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UTFlyVertexSet@@@std@@YA$$QAUTFlyVertexSet@@AAU1@@Z PROC ; std::forward<TFlyVertexSet>, COMDAT

; 1504 : 	{	// forward an lvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UTFlyVertexSet@@@std@@YA$$QAUTFlyVertexSet@@AAU1@@Z ENDP ; std::forward<TFlyVertexSet>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\type_traits
;	COMDAT ??$forward@ABUD3DXVECTOR3@@@std@@YAABUD3DXVECTOR3@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUD3DXVECTOR3@@@std@@YAABUD3DXVECTOR3@@ABU1@@Z PROC ; std::forward<D3DXVECTOR3 const &>, COMDAT

; 1504 : 	{	// forward an lvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUD3DXVECTOR3@@@std@@YAABUD3DXVECTOR3@@ABU1@@Z ENDP ; std::forward<D3DXVECTOR3 const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\type_traits
;	COMDAT ??$forward@M@std@@YA$$QAMAAM@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@M@std@@YA$$QAMAAM@Z PROC			; std::forward<float>, COMDAT

; 1504 : 	{	// forward an lvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@M@std@@YA$$QAMAAM@Z ENDP			; std::forward<float>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$_Allocate@PAVCFlyTrace@@@std@@YAPAPAVCFlyTrace@@IPAPAV1@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCFlyTrace@@@std@@YAPAPAVCFlyTrace@@IPAPAV1@@Z PROC ; std::_Allocate<CFlyTrace *>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 23   : 	void *_Ptr = 0;
; 24   : 
; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 1e		 je	 SHORT $LN2@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00011	77 12		 ja	 SHORT $LN1@Allocate
  00013	c1 e0 02	 shl	 eax, 2
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	75 05		 jne	 SHORT $LN2@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00025	e9 00 00 00 00	 jmp	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

  0002a	8b c1		 mov	 eax, ecx

; 32   : 	}

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??$_Allocate@PAVCFlyTrace@@@std@@YAPAPAVCFlyTrace@@IPAPAV1@@Z ENDP ; std::_Allocate<CFlyTrace *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z PROC ; std::_Allocate<std::_Container_proxy>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 23   : 	void *_Ptr = 0;
; 24   : 
; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 1e		 je	 SHORT $LN2@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  00011	77 12		 ja	 SHORT $LN1@Allocate
  00013	c1 e0 03	 shl	 eax, 3
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	75 05		 jne	 SHORT $LN2@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00025	e9 00 00 00 00	 jmp	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

  0002a	8b c1		 mov	 eax, ecx

; 32   : 	}

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ENDP ; std::_Allocate<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$_Allocate@U?$pair@MUTFlyVertexSet@@@std@@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@IPAU10@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U?$pair@MUTFlyVertexSet@@@std@@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@IPAU10@@Z PROC ; std::_Allocate<std::pair<float,TFlyVertexSet> >, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 23   : 	void *_Ptr = 0;
; 24   : 
; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 21		 je	 SHORT $LN2@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d 91 cf ba 01	 cmp	 eax, 29020049		; 01bacf91H
  00011	77 15		 ja	 SHORT $LN1@Allocate
  00013	69 c0 94 00 00
	00		 imul	 eax, eax, 148
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001f	8b c8		 mov	 ecx, eax
  00021	83 c4 04	 add	 esp, 4
  00024	85 c9		 test	 ecx, ecx
  00026	75 05		 jne	 SHORT $LN2@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00028	e9 00 00 00 00	 jmp	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

  0002d	8b c1		 mov	 eax, ecx

; 32   : 	}

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??$_Allocate@U?$pair@MUTFlyVertexSet@@@std@@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@IPAU10@@Z ENDP ; std::_Allocate<std::pair<float,TFlyVertexSet> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\vector
;	COMDAT ??$_Umove@PAPAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IAEPAPAVCFlyTrace@@PAPAV2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAPAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IAEPAPAVCFlyTrace@@PAPAV2@00@Z PROC ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Umove<CFlyTrace * *>, COMDAT
; _this$ = ecx

; 1644 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File a:\vs\vc\include\xmemory

; 472  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 473  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 474  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi
; File a:\vs\vc\include\vector

; 1649 : 		}

  00026	5d		 pop	 ebp
  00027	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAPAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IAEPAPAVCFlyTrace@@PAPAV2@00@Z ENDP ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Umove<CFlyTrace * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$_Allocate@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@IPAPAU10@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@IPAPAU10@@Z PROC ; std::_Allocate<std::pair<float,D3DXVECTOR3> *>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 23   : 	void *_Ptr = 0;
; 24   : 
; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 1e		 je	 SHORT $LN2@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00011	77 12		 ja	 SHORT $LN1@Allocate
  00013	c1 e0 02	 shl	 eax, 2
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	75 05		 jne	 SHORT $LN2@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00025	e9 00 00 00 00	 jmp	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

  0002a	8b c1		 mov	 eax, ecx

; 32   : 	}

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??$_Allocate@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@IPAPAU10@@Z ENDP ; std::_Allocate<std::pair<float,D3DXVECTOR3> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\vector
;	COMDAT ??$_Umove@PAU?$pair@MUTFlyVertexSet@@@std@@@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IAEPAU?$pair@MUTFlyVertexSet@@@1@PAU21@00@Z
_TEXT	SEGMENT
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAU?$pair@MUTFlyVertexSet@@@std@@@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IAEPAU?$pair@MUTFlyVertexSet@@@1@PAU21@00@Z PROC ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Umove<std::pair<float,TFlyVertexSet> *>, COMDAT
; _this$ = ecx

; 1644 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File a:\vs\vc\include\xmemory

; 484  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00007	8d 45 ff	 lea	 eax, DWORD PTR __Alval$[ebp]
  0000a	6a 00		 push	 0
  0000c	50		 push	 eax
  0000d	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  00010	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00013	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00016	e8 00 00 00 00	 call	 ??$_Uninit_move@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@U12@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *,std::allocator<std::pair<float,TFlyVertexSet> >,std::pair<float,TFlyVertexSet> >
  0001b	83 c4 18	 add	 esp, 24			; 00000018H
; File a:\vs\vc\include\vector

; 1649 : 		}

  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAU?$pair@MUTFlyVertexSet@@@std@@@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IAEPAU?$pair@MUTFlyVertexSet@@@1@PAU21@00@Z ENDP ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Umove<std::pair<float,TFlyVertexSet> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0AAU?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0AAU?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::pair<float,TFlyVertexSet> > > >, COMDAT

; 96   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 97   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0AAU?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::pair<float,TFlyVertexSet> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@@std@@YAXPAPAVCFlyTrace@@0AAU?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@@std@@YAXPAPAVCFlyTrace@@0AAU?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CFlyTrace *> > >, COMDAT

; 96   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 97   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@@std@@YAXPAPAVCFlyTrace@@0AAU?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CFlyTrace *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT
; _this$ = ecx

; 878  : 		{	// destroy object at _Ptr
; 879  : 		_Mytraits::destroy(*this, _Ptr);
; 880  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT
; _this$ = ecx

; 868  : 		void construct(_Ty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN11@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN11@construct:

; 869  : 			_Types&&... _Args)
; 870  : 		{	// construct _Ty(_Types...) at _Ptr
; 871  : 		_Mytraits::construct(*this, _Ptr,
; 872  : 			_STD forward<_Types>(_Args)...);
; 873  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate, COMDAT
; _this$ = ecx

; 857  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 858  : 		_Mybase::deallocate(_Ptr, _Count);
; 859  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate, COMDAT
; _this$ = ecx

; 846  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 19		 je	 SHORT $LN6@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  00011	77 18		 ja	 SHORT $LN14@allocate
  00013	c1 e0 03	 shl	 eax, 3
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	74 06		 je	 SHORT $LN14@allocate
$LN6@allocate:

; 847  : 		return (_Mybase::allocate(_Count));

  00025	8b c1		 mov	 eax, ecx

; 848  : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN14@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002b	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN16@allocate:
$LN13@allocate:
  00030	cc		 int	 3
?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 802  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 577  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 19		 je	 SHORT $LN4@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  00011	77 18		 ja	 SHORT $LN11@allocate
  00013	c1 e0 03	 shl	 eax, 3
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	74 06		 je	 SHORT $LN11@allocate
$LN4@allocate:

; 578  : 		return (_Allocate(_Count, (pointer)0));

  00025	8b c1		 mov	 eax, ecx

; 579  : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN11@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002b	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN13@allocate:
$LN10@allocate:
  00030	cc		 int	 3
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::deallocate, COMDAT
; _this$ = ecx

; 572  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 574  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ PROC	; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>, COMDAT
; _this$ = ecx

; 553  : 		{	// construct default allocator (do nothing)
; 554  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ENDP	; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$_Allocate@U?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAU?$pair@MUD3DXVECTOR3@@@0@IPAU10@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAU?$pair@MUD3DXVECTOR3@@@0@IPAU10@@Z PROC ; std::_Allocate<std::pair<float,D3DXVECTOR3> >, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 23   : 	void *_Ptr = 0;
; 24   : 
; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 1e		 je	 SHORT $LN2@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 0f	 cmp	 eax, 268435455		; 0fffffffH
  00011	77 12		 ja	 SHORT $LN1@Allocate
  00013	c1 e0 04	 shl	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	75 05		 jne	 SHORT $LN2@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00025	e9 00 00 00 00	 jmp	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

  0002a	8b c1		 mov	 eax, ecx

; 32   : 	}

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??$_Allocate@U?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAU?$pair@MUD3DXVECTOR3@@@0@IPAU10@@Z ENDP ; std::_Allocate<std::pair<float,D3DXVECTOR3> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xstddef
;	COMDAT ??$addressof@U?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAU?$pair@MUD3DXVECTOR3@@@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAU?$pair@MUD3DXVECTOR3@@@0@AAU10@@Z PROC ; std::addressof<std::pair<float,D3DXVECTOR3> >, COMDAT

; 92   : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 93   : 	return (reinterpret_cast<_Ty *>(
; 94   : 		(&const_cast<char&>(
; 95   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 96   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@U?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAU?$pair@MUD3DXVECTOR3@@@0@AAU10@@Z ENDP ; std::addressof<std::pair<float,D3DXVECTOR3> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$destroy@PAVCFlyTrace@@@?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXPAPAVCFlyTrace@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAVCFlyTrace@@@?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXPAPAVCFlyTrace@@@Z PROC ; std::_Wrap_alloc<std::allocator<CFlyTrace *> >::destroy<CFlyTrace *>, COMDAT
; _this$ = ecx

; 878  : 		{	// destroy object at _Ptr
; 879  : 		_Mytraits::destroy(*this, _Ptr);
; 880  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAVCFlyTrace@@@?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXPAPAVCFlyTrace@@@Z ENDP ; std::_Wrap_alloc<std::allocator<CFlyTrace *> >::destroy<CFlyTrace *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@PAVCFlyTrace@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXPAPAVCFlyTrace@@ABQAV2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAVCFlyTrace@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXPAPAVCFlyTrace@@ABQAV2@@Z PROC ; std::_Wrap_alloc<std::allocator<CFlyTrace *> >::construct<CFlyTrace *,CFlyTrace * const &>, COMDAT
; _this$ = ecx

; 868  : 		void construct(_Ty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 593  : 		::new ((void *)_Ptr) _Ty(_Val);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN11@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN11@construct:

; 869  : 			_Types&&... _Args)
; 870  : 		{	// construct _Ty(_Types...) at _Ptr
; 871  : 		_Mytraits::construct(*this, _Ptr,
; 872  : 			_STD forward<_Types>(_Args)...);
; 873  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAVCFlyTrace@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXPAPAVCFlyTrace@@ABQAV2@@Z ENDP ; std::_Wrap_alloc<std::allocator<CFlyTrace *> >::construct<CFlyTrace *,CFlyTrace * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@PAVCFlyTrace@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXPAPAVCFlyTrace@@AAPAV2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAVCFlyTrace@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXPAPAVCFlyTrace@@AAPAV2@@Z PROC ; std::_Wrap_alloc<std::allocator<CFlyTrace *> >::construct<CFlyTrace *,CFlyTrace * &>, COMDAT
; _this$ = ecx

; 868  : 		void construct(_Ty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN11@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN11@construct:

; 869  : 			_Types&&... _Args)
; 870  : 		{	// construct _Ty(_Types...) at _Ptr
; 871  : 		_Mytraits::construct(*this, _Ptr,
; 872  : 			_STD forward<_Types>(_Args)...);
; 873  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAVCFlyTrace@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXPAPAVCFlyTrace@@AAPAV2@@Z ENDP ; std::_Wrap_alloc<std::allocator<CFlyTrace *> >::construct<CFlyTrace *,CFlyTrace * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xstddef
;	COMDAT ??$addressof@QAVCFlyTrace@@@std@@YAPBQAVCFlyTrace@@ABQAV1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@QAVCFlyTrace@@@std@@YAPBQAVCFlyTrace@@ABQAV1@@Z PROC ; std::addressof<CFlyTrace * const>, COMDAT

; 92   : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 93   : 	return (reinterpret_cast<_Ty *>(
; 94   : 		(&const_cast<char&>(
; 95   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 96   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@QAVCFlyTrace@@@std@@YAPBQAVCFlyTrace@@ABQAV1@@Z ENDP ; std::addressof<CFlyTrace * const>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$pair@MUD3DXVECTOR3@@@std@@@?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAEXPAPAU?$pair@MUD3DXVECTOR3@@@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAU?$pair@MUD3DXVECTOR3@@@std@@@?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAEXPAPAU?$pair@MUD3DXVECTOR3@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> > >::destroy<std::pair<float,D3DXVECTOR3> *>, COMDAT
; _this$ = ecx

; 878  : 		{	// destroy object at _Ptr
; 879  : 		_Mytraits::destroy(*this, _Ptr);
; 880  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAU?$pair@MUD3DXVECTOR3@@@std@@@?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAEXPAPAU?$pair@MUD3DXVECTOR3@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> > >::destroy<std::pair<float,D3DXVECTOR3> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@YAXPAPAU?$pair@MUD3DXVECTOR3@@@0@0AAU?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@YAXPAPAU?$pair@MUD3DXVECTOR3@@@0@0AAU?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> *> > >, COMDAT

; 96   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 97   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@YAXPAPAU?$pair@MUD3DXVECTOR3@@@0@0AAU?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\xmemory
;	COMDAT ??$_Uninitialized_default_fill_n@PAPAU?$pair@MUD3DXVECTOR3@@@std@@IU?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@2@@std@@YAXPAPAU?$pair@MUD3DXVECTOR3@@@0@IAAU?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Uninitialized_default_fill_n@PAPAU?$pair@MUD3DXVECTOR3@@@std@@IU?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@2@@std@@YAXPAPAU?$pair@MUD3DXVECTOR3@@@0@IAAU?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@0@@Z PROC ; std::_Uninitialized_default_fill_n<std::pair<float,D3DXVECTOR3> * *,unsigned int,std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> *> > >, COMDAT

; 690  : 	{	// copy _Count * _Val_type(_First)() to raw _First, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File a:\vs\vc\include\xutility

; 2632 : 	for (; 0 < _Count; --_Count, ++_Dest)

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 09		 je	 SHORT $LN11@Uninitiali
  0000a	57		 push	 edi
; File a:\vs\vc\include\xmemory

; 682  : 	_Fill_n(_First, _Count, (_Valty)0);

  0000b	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0000e	33 c0		 xor	 eax, eax
  00010	f3 ab		 rep stosd
  00012	5f		 pop	 edi
$LN11@Uninitiali:

; 691  : 	_Uninit_def_fill_n(_First, _Count, _Al,
; 692  : 		_Val_type(_First), _Ptr_cat(_First, _First));
; 693  : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$_Uninitialized_default_fill_n@PAPAU?$pair@MUD3DXVECTOR3@@@std@@IU?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@2@@std@@YAXPAPAU?$pair@MUD3DXVECTOR3@@@0@IAAU?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@0@@Z ENDP ; std::_Uninitialized_default_fill_n<std::pair<float,D3DXVECTOR3> * *,unsigned int,std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@U?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@2@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@00AAU?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@U?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@2@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@00AAU?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@0@@Z PROC ; std::_Uninitialized_copy<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *,std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> *> > >, COMDAT

; 424  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 405  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 425  : 	return (_Rechecked(_Dest,
; 426  : 		_Uninit_copy(_Unchecked(_First), _Unchecked(_Last),
; 427  : 			_Unchecked(_Dest), _Al)));
; 428  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninitialized_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@U?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@2@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@00AAU?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@0@@Z ENDP ; std::_Uninitialized_copy<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *,std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$?0U?$pair@MUD3DXVECTOR3@@@std@@@?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@QAE@ABV?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0U?$pair@MUD3DXVECTOR3@@@std@@@?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@QAE@ABV?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@1@@Z PROC ; std::allocator<std::pair<float,D3DXVECTOR3> *>::allocator<std::pair<float,D3DXVECTOR3> *><std::pair<float,D3DXVECTOR3> >, COMDAT
; _this$ = ecx

; 562  : 		{	// construct from a related allocator (do nothing)
; 563  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0U?$pair@MUD3DXVECTOR3@@@std@@@?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@QAE@ABV?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@1@@Z ENDP ; std::allocator<std::pair<float,D3DXVECTOR3> *>::allocator<std::pair<float,D3DXVECTOR3> *><std::pair<float,D3DXVECTOR3> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0U?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> *> >::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> *> ><std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> > > >, COMDAT
; _this$ = ecx

; 818  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0U?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> *> >::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> *> ><std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PAU?$pair@MUTFlyVertexSet@@@std@@@std@@SAPAU?$pair@MUTFlyVertexSet@@@2@AAU32@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PAU?$pair@MUTFlyVertexSet@@@std@@@std@@SAPAU?$pair@MUTFlyVertexSet@@@2@AAU32@@Z PROC ; std::pointer_traits<std::pair<float,TFlyVertexSet> *>::pointer_to, COMDAT

; 233  : 		{	// convert raw reference to pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 234  : 		return (_STD addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 235  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?pointer_to@?$pointer_traits@PAU?$pair@MUTFlyVertexSet@@@std@@@std@@SAPAU?$pair@MUTFlyVertexSet@@@2@AAU32@@Z ENDP ; std::pointer_traits<std::pair<float,TFlyVertexSet> *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@SAPAU?$pair@MUD3DXVECTOR3@@@2@AAU32@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@SAPAU?$pair@MUD3DXVECTOR3@@@2@AAU32@@Z PROC ; std::pointer_traits<std::pair<float,D3DXVECTOR3> *>::pointer_to, COMDAT

; 233  : 		{	// convert raw reference to pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 234  : 		return (_STD addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 235  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?pointer_to@?$pointer_traits@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@SAPAU?$pair@MUD3DXVECTOR3@@@2@AAU32@@Z ENDP ; std::pointer_traits<std::pair<float,D3DXVECTOR3> *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@U?$pair@MUTFlyVertexSet@@@std@@U12@@?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@QAEXPAU?$pair@MUTFlyVertexSet@@@1@$$QAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U?$pair@MUTFlyVertexSet@@@std@@U12@@?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@QAEXPAU?$pair@MUTFlyVertexSet@@@1@$$QAU21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::pair<float,TFlyVertexSet> > >::construct<std::pair<float,TFlyVertexSet>,std::pair<float,TFlyVertexSet> >, COMDAT
; _this$ = ecx

; 868  : 		void construct(_Ty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 16		 je	 SHORT $LN11@construct
; File a:\vs\vc\include\utility

; 157  : 		{	// construct from moved compatible pair

  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000e	56		 push	 esi
  0000f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00011	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
  00014	89 07		 mov	 DWORD PTR [edi], eax
  00016	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0001b	83 c7 04	 add	 edi, 4
  0001e	f3 a5		 rep movsd
  00020	5e		 pop	 esi
$LN11@construct:
  00021	5f		 pop	 edi
; File a:\vs\vc\include\xmemory0

; 873  : 		}

  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
??$construct@U?$pair@MUTFlyVertexSet@@@std@@U12@@?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@QAEXPAU?$pair@MUTFlyVertexSet@@@1@$$QAU21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::pair<float,TFlyVertexSet> > >::construct<std::pair<float,TFlyVertexSet>,std::pair<float,TFlyVertexSet> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\type_traits
;	COMDAT ??$forward@U?$pair@MUTFlyVertexSet@@@std@@@std@@YA$$QAU?$pair@MUTFlyVertexSet@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U?$pair@MUTFlyVertexSet@@@std@@@std@@YA$$QAU?$pair@MUTFlyVertexSet@@@0@AAU10@@Z PROC ; std::forward<std::pair<float,TFlyVertexSet> >, COMDAT

; 1504 : 	{	// forward an lvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U?$pair@MUTFlyVertexSet@@@std@@@std@@YA$$QAU?$pair@MUTFlyVertexSet@@@0@AAU10@@Z ENDP ; std::forward<std::pair<float,TFlyVertexSet> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xstddef
;	COMDAT ??$addressof@U?$pair@MUTFlyVertexSet@@@std@@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U?$pair@MUTFlyVertexSet@@@std@@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@AAU10@@Z PROC ; std::addressof<std::pair<float,TFlyVertexSet> >, COMDAT

; 92   : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 93   : 	return (reinterpret_cast<_Ty *>(
; 94   : 		(&const_cast<char&>(
; 95   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 96   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@U?$pair@MUTFlyVertexSet@@@std@@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@AAU10@@Z ENDP ; std::addressof<std::pair<float,TFlyVertexSet> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\algorithm
;	COMDAT ??$for_each@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@P6AXPAVCFlyTrace@@@Z@std@@YAP6AXPAVCFlyTrace@@@ZV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@0@1P6AX0@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Func$ = 16						; size = 4
??$for_each@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@P6AXPAVCFlyTrace@@@Z@std@@YAP6AXPAVCFlyTrace@@@ZV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@0@1P6AX0@Z@Z PROC ; std::for_each<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >,void (__cdecl*)(CFlyTrace *)>, COMDAT

; 30   : 	{	// perform function for each element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	33 c9		 xor	 ecx, ecx
  00009	56		 push	 esi

; 31   : 	_DEBUG_RANGE(_First, _Last);
; 32   : 	_DEBUG_POINTER(_Func);
; 33   : 	_For_each(_Unchecked(_First), _Unchecked(_Last), _Func);

  0000a	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000d	2b de		 sub	 ebx, esi
  0000f	83 c3 03	 add	 ebx, 3
  00012	c1 eb 02	 shr	 ebx, 2
  00015	57		 push	 edi
  00016	33 ff		 xor	 edi, edi
  00018	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001b	0f 47 d9	 cmova	 ebx, ecx

; 23   : 	for (; _First != _Last; ++_First)

  0001e	85 db		 test	 ebx, ebx
  00020	74 10		 je	 SHORT $LN22@for_each
$LL13@for_each:

; 24   : 		_Func(*_First);

  00022	ff 36		 push	 DWORD PTR [esi]
  00024	ff 55 10	 call	 DWORD PTR __Func$[ebp]
  00027	47		 inc	 edi
  00028	8d 76 04	 lea	 esi, DWORD PTR [esi+4]
  0002b	83 c4 04	 add	 esp, 4
  0002e	3b fb		 cmp	 edi, ebx
  00030	75 f0		 jne	 SHORT $LL13@for_each
$LN22@for_each:

; 34   : 
; 35   : 	return (_STD move(_Func));

  00032	8b 45 10	 mov	 eax, DWORD PTR __Func$[ebp]
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx

; 36   : 	}

  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
??$for_each@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@P6AXPAVCFlyTrace@@@Z@std@@YAP6AXPAVCFlyTrace@@@ZV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@0@1P6AX0@Z@Z ENDP ; std::for_each<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >,void (__cdecl*)(CFlyTrace *)>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >::operator-, COMDAT
; _this$ = ecx

; 376  : 		{	// return this - integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 170  : 		_Ptr += _Off;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	c1 e0 02	 shl	 eax, 2
  0000b	2b c8		 sub	 ecx, eax

; 377  : 		_Myiter _Tmp = *this;
; 378  : 		return (_Tmp -= _Off);

  0000d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00010	89 08		 mov	 DWORD PTR [eax], ecx

; 379  : 		}

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??Z?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Z?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >::operator-=, COMDAT
; _this$ = ecx

; 371  : 		{	// decrement by integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 170  : 		_Ptr += _Off;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	f7 d8		 neg	 eax
  00008	c1 e0 02	 shl	 eax, 2
  0000b	01 01		 add	 DWORD PTR [ecx], eax

; 372  : 		return (*this += -_Off);

  0000d	8b c1		 mov	 eax, ecx

; 373  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??Z?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >::operator-=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >::operator+=, COMDAT
; _this$ = ecx

; 359  : 		{	// increment by integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 170  : 		_Ptr += _Off;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	c1 e0 02	 shl	 eax, 2
  00009	01 01		 add	 DWORD PTR [ecx], eax

; 360  : 		*(_Mybase *)this += _Off;
; 361  : 		return (*this);

  0000b	8b c1		 mov	 eax, ecx

; 362  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@QBEAAPAVCFlyTrace@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@QBEAAPAVCFlyTrace@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >::operator*, COMDAT
; _this$ = ecx

; 324  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 325  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@QBEAAPAVCFlyTrace@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@QBEPAPAVCFlyTrace@@XZ
_TEXT	SEGMENT
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@QBEPAPAVCFlyTrace@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >::_Unchecked, COMDAT
; _this$ = ecx

; 319  : 		return (_Unchecked_type(this->_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 320  : 		}

  00002	c3		 ret	 0
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@QBEPAPAVCFlyTrace@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >::_Unchecked
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@QAE@PAPAVCFlyTrace@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@QAE@PAPAVCFlyTrace@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >, COMDAT
; _this$ = ecx

; 306  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 		{	// construct with pointer _Parg

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 307  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@QAE@PAPAVCFlyTrace@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >::operator+=, COMDAT
; _this$ = ecx

; 153  : 		{	// increment by integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	c1 e0 02	 shl	 eax, 2
  00009	01 01		 add	 DWORD PTR [ecx], eax

; 171  : 		return (*this);

  0000b	8b c1		 mov	 eax, ecx

; 172  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@QBEABQAVCFlyTrace@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@QBEABQAVCFlyTrace@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >::operator*, COMDAT
; _this$ = ecx

; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 87   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@QBEABQAVCFlyTrace@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@QAE@PAPAVCFlyTrace@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@QAE@PAPAVCFlyTrace@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >, COMDAT
; _this$ = ecx

; 47   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@QAE@PAPAVCFlyTrace@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$destroy@U?$pair@MUD3DXVECTOR3@@@std@@@?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAEXPAU?$pair@MUD3DXVECTOR3@@@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@U?$pair@MUD3DXVECTOR3@@@std@@@?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAEXPAU?$pair@MUD3DXVECTOR3@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> > >::destroy<std::pair<float,D3DXVECTOR3> >, COMDAT
; _this$ = ecx

; 878  : 		{	// destroy object at _Ptr
; 879  : 		_Mytraits::destroy(*this, _Ptr);
; 880  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@U?$pair@MUD3DXVECTOR3@@@std@@@?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAEXPAU?$pair@MUD3DXVECTOR3@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> > >::destroy<std::pair<float,D3DXVECTOR3> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@U?$pair@MUD3DXVECTOR3@@@std@@U12@@?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAEXPAU?$pair@MUD3DXVECTOR3@@@1@$$QAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U?$pair@MUD3DXVECTOR3@@@std@@U12@@?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAEXPAU?$pair@MUD3DXVECTOR3@@@1@$$QAU21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> > >::construct<std::pair<float,D3DXVECTOR3>,std::pair<float,D3DXVECTOR3> >, COMDAT
; _this$ = ecx

; 868  : 		void construct(_Ty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 17		 je	 SHORT $LN11@construct
; File a:\vs\vc\include\utility

; 157  : 		{	// construct from moved compatible pair

  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	f3 0f 7e 41 04	 movq	 xmm0, QWORD PTR [ecx+4]
  00016	66 0f d6 42 04	 movq	 QWORD PTR [edx+4], xmm0
  0001b	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0001e	89 42 0c	 mov	 DWORD PTR [edx+12], eax
$LN11@construct:
; File a:\vs\vc\include\xmemory0

; 873  : 		}

  00021	5d		 pop	 ebp
  00022	c2 08 00	 ret	 8
??$construct@U?$pair@MUD3DXVECTOR3@@@std@@U12@@?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAEXPAU?$pair@MUD3DXVECTOR3@@@1@$$QAU21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> > >::construct<std::pair<float,D3DXVECTOR3>,std::pair<float,D3DXVECTOR3> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\type_traits
;	COMDAT ??$forward@U?$pair@MUD3DXVECTOR3@@@std@@@std@@YA$$QAU?$pair@MUD3DXVECTOR3@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U?$pair@MUD3DXVECTOR3@@@std@@@std@@YA$$QAU?$pair@MUD3DXVECTOR3@@@0@AAU10@@Z PROC ; std::forward<std::pair<float,D3DXVECTOR3> >, COMDAT

; 1504 : 	{	// forward an lvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U?$pair@MUD3DXVECTOR3@@@std@@@std@@YA$$QAU?$pair@MUD3DXVECTOR3@@@0@AAU10@@Z ENDP ; std::forward<std::pair<float,D3DXVECTOR3> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\algorithm
;	COMDAT ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@0@0@Z
_TEXT	SEGMENT
$T1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@0@0@Z PROC ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > > >, COMDAT

; 3163 : 	{	// order [_First, _Last), using operator<

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File a:\vs\vc\include\vector

; 194  : 		return (this->_Ptr - _Right._Ptr);

  00004	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00007	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  0000c	57		 push	 edi
  0000d	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  00010	2b f9		 sub	 edi, ecx
; File a:\vs\vc\include\algorithm

; 3164 : 	_STD sort(_First, _Last, less<>());

  00012	c6 45 fc 00	 mov	 BYTE PTR $T1[ebp], 0

; 3157 : 	_Sort(_Unchecked(_First), _Unchecked(_Last), _Last - _First, _Pred);

  00016	ff 75 fc	 push	 DWORD PTR $T1[ebp]
; File a:\vs\vc\include\vector

; 194  : 		return (this->_Ptr - _Right._Ptr);

  00019	f7 ef		 imul	 edi
  0001b	03 d7		 add	 edx, edi
  0001d	c1 fa 07	 sar	 edx, 7
  00020	8b c2		 mov	 eax, edx
  00022	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00025	03 c2		 add	 eax, edx
; File a:\vs\vc\include\algorithm

; 3157 : 	_Sort(_Unchecked(_First), _Unchecked(_Last), _Last - _First, _Pred);

  00027	50		 push	 eax
  00028	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0002b	51		 push	 ecx
  0002c	e8 00 00 00 00	 call	 ??$_Sort@PAU?$pair@MUTFlyVertexSet@@@std@@HU?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0HU?$less@X@0@@Z ; std::_Sort<std::pair<float,TFlyVertexSet> *,int,std::less<void> >
  00031	83 c4 10	 add	 esp, 16			; 00000010H
  00034	5f		 pop	 edi

; 3165 : 	}

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@0@0@Z ENDP ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >::operator-, COMDAT
; _this$ = ecx

; 382  : 		{	// return difference of iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 194  : 		return (this->_Ptr - _Right._Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	2b 08		 sub	 ecx, DWORD PTR [eax]
  0000a	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  0000f	f7 e9		 imul	 ecx
  00011	03 d1		 add	 edx, ecx
  00013	c1 fa 07	 sar	 edx, 7
  00016	8b c2		 mov	 eax, edx
  00018	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001b	03 c2		 add	 eax, edx

; 383  : 		return (*(_Mybase *)this - _Right);
; 384  : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >::operator++, COMDAT
; _this$ = ecx

; 112  : 		++this->_Ptr;

  00000	81 01 94 00 00
	00		 add	 DWORD PTR [ecx], 148	; 00000094H

; 334  : 		++*(_Mybase *)this;
; 335  : 		return (*this);

  00006	8b c1		 mov	 eax, ecx

; 336  : 		}

  00008	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QBEPAU?$pair@MUTFlyVertexSet@@@1@XZ
_TEXT	SEGMENT
??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QBEPAU?$pair@MUTFlyVertexSet@@@1@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >::operator->, COMDAT
; _this$ = ecx

; 329  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 330  : 		}

  00002	c3		 ret	 0
??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QBEPAU?$pair@MUTFlyVertexSet@@@1@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >::operator->
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QBEAAU?$pair@MUTFlyVertexSet@@@1@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QBEAAU?$pair@MUTFlyVertexSet@@@1@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >::operator*, COMDAT
; _this$ = ecx

; 324  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 325  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QBEAAU?$pair@MUTFlyVertexSet@@@1@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QBEPAU?$pair@MUTFlyVertexSet@@@2@XZ
_TEXT	SEGMENT
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QBEPAU?$pair@MUTFlyVertexSet@@@2@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >::_Unchecked, COMDAT
; _this$ = ecx

; 319  : 		return (_Unchecked_type(this->_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 320  : 		}

  00002	c3		 ret	 0
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QBEPAU?$pair@MUTFlyVertexSet@@@2@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >::_Unchecked
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QAE@PAU?$pair@MUTFlyVertexSet@@@1@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QAE@PAU?$pair@MUTFlyVertexSet@@@1@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >, COMDAT
; _this$ = ecx

; 306  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 		{	// construct with pointer _Parg

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 307  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QAE@PAU?$pair@MUTFlyVertexSet@@@1@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >::_Compat, COMDAT
; _this$ = ecx

; 255  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >::_Compat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >::operator!=, COMDAT
; _this$ = ecx

; 209  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 205  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]

; 210  : 		return (!(*this == _Right));

  00005	33 c0		 xor	 eax, eax

; 205  : 		return (this->_Ptr == _Right._Ptr);

  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]

; 210  : 		return (!(*this == _Right));

  0000c	0f 95 c0	 setne	 al

; 211  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 204  : 		_Compat(_Right);
; 205  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	33 c0		 xor	 eax, eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000c	0f 94 c0	 sete	 al

; 206  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??G?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QBEHABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >::operator-, COMDAT
; _this$ = ecx

; 192  : 		{	// return difference of iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	2b 08		 sub	 ecx, DWORD PTR [eax]
  0000a	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  0000f	f7 e9		 imul	 ecx
  00011	03 d1		 add	 edx, ecx
  00013	c1 fa 07	 sar	 edx, 7
  00016	8b c2		 mov	 eax, edx
  00018	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001b	03 c2		 add	 eax, edx

; 195  : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??G?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QBEHABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >::operator++, COMDAT
; _this$ = ecx

; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;

  00000	81 01 94 00 00
	00		 add	 DWORD PTR [ecx], 148	; 00000094H

; 113  : 		return (*this);

  00006	8b c1		 mov	 eax, ecx

; 114  : 		}

  00008	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QBEABU?$pair@MUTFlyVertexSet@@@1@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QBEABU?$pair@MUTFlyVertexSet@@@1@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >::operator*, COMDAT
; _this$ = ecx

; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 87   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QBEABU?$pair@MUTFlyVertexSet@@@1@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QAE@PAU?$pair@MUTFlyVertexSet@@@1@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QAE@PAU?$pair@MUTFlyVertexSet@@@1@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >, COMDAT
; _this$ = ecx

; 47   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@QAE@PAU?$pair@MUTFlyVertexSet@@@1@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\utility
;	COMDAT ?swap@?$pair@MUTFlyVertexSet@@@std@@QAEXAAU12@@Z
_TEXT	SEGMENT
__Tmp$1 = -144						; size = 144
__Right$ = 8						; size = 4
?swap@?$pair@MUTFlyVertexSet@@@std@@QAEXAAU12@@Z PROC	; std::pair<float,TFlyVertexSet>::swap, COMDAT
; _this$ = ecx

; 183  : 		{	// exchange contents with _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 184  : 		if (this != &_Right)

  00003	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00006	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  0000c	3b ca		 cmp	 ecx, edx
  0000e	74 3e		 je	 SHORT $LN26@swap

; 52   : 	_Ty _Tmp = _Move(_Left);

  00010	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]

; 53   : 	_Left = _Move(_Right);

  00014	8b 02		 mov	 eax, DWORD PTR [edx]
  00016	56		 push	 esi
  00017	89 01		 mov	 DWORD PTR [ecx], eax

; 185  : 			{	// different, worth swapping
; 186  : 			_Swap_adl(first, _Right.first);
; 187  : 			_Swap_adl(second, _Right.second);

  00019	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  0001c	57		 push	 edi

; 54   : 	_Right = _Move(_Tmp);

  0001d	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 52   : 	_Ty _Tmp = _Move(_Left);

  00021	8d bd 70 ff ff
	ff		 lea	 edi, DWORD PTR __Tmp$1[ebp]
  00027	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0002c	8b f0		 mov	 esi, eax
  0002e	f3 a5		 rep movsd
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00030	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00035	8d 72 04	 lea	 esi, DWORD PTR [edx+4]
  00038	8b f8		 mov	 edi, eax
  0003a	f3 a5		 rep movsd
  0003c	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00041	8d b5 70 ff ff
	ff		 lea	 esi, DWORD PTR __Tmp$1[ebp]
  00047	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
  0004a	f3 a5		 rep movsd
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
$LN26@swap:
; File a:\vs\vc\include\utility

; 189  : 		}

  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?swap@?$pair@MUTFlyVertexSet@@@std@@QAEXAAU12@@Z ENDP	; std::pair<float,TFlyVertexSet>::swap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\utility
;	COMDAT ??4?$pair@MUTFlyVertexSet@@@std@@QAEAAU01@$$QAU01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$pair@MUTFlyVertexSet@@@std@@QAEAAU01@$$QAU01@@Z PROC ; std::pair<float,TFlyVertexSet>::operator=, COMDAT
; _this$ = ecx

; 174  : 		{	// assign from moved pair

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 175  : 		first = _STD forward<_Ty1>(_Right.first);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00009	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0000e	56		 push	 esi
; File a:\vs\vc\include\utility

; 175  : 		first = _STD forward<_Ty1>(_Right.first);

  0000f	8b 02		 mov	 eax, DWORD PTR [edx]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00011	8d 72 04	 lea	 esi, DWORD PTR [edx+4]
  00014	57		 push	 edi
; File a:\vs\vc\include\utility

; 175  : 		first = _STD forward<_Ty1>(_Right.first);

  00015	89 03		 mov	 DWORD PTR [ebx], eax
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00017	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  0001a	f3 a5		 rep movsd
  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
; File a:\vs\vc\include\utility

; 177  : 		return (*this);

  0001e	8b c3		 mov	 eax, ebx
  00020	5b		 pop	 ebx

; 178  : 		}

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??4?$pair@MUTFlyVertexSet@@@std@@QAEAAU01@$$QAU01@@Z ENDP ; std::pair<float,TFlyVertexSet>::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\utility
;	COMDAT ??$make_pair@MUTFlyVertexSet@@@std@@YA?AU?$pair@MUTFlyVertexSet@@@0@$$QAM$$QAUTFlyVertexSet@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Val1$ = 12						; size = 4
__Val2$ = 16						; size = 4
??$make_pair@MUTFlyVertexSet@@@std@@YA?AU?$pair@MUTFlyVertexSet@@@0@$$QAM$$QAUTFlyVertexSet@@@Z PROC ; std::make_pair<float,TFlyVertexSet>, COMDAT

; 268  : 	{	// return pair composed from arguments

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 144  : 		{	// construct from moved values

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	56		 push	 esi
  00007	8b 75 10	 mov	 esi, DWORD PTR __Val2$[ebp]
  0000a	57		 push	 edi
  0000b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00010	89 08		 mov	 DWORD PTR [eax], ecx
  00012	8d 78 04	 lea	 edi, DWORD PTR [eax+4]
  00015	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0001a	f3 a5		 rep movsd
  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi

; 269  : 	typedef pair<typename _Unrefwrap<_Ty1>::type,
; 270  : 		typename _Unrefwrap<_Ty2>::type> _Mypair;
; 271  : 	return (_Mypair(_STD forward<_Ty1>(_Val1),
; 272  : 		_STD forward<_Ty2>(_Val2)));
; 273  : 	}

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$make_pair@MUTFlyVertexSet@@@std@@YA?AU?$pair@MUTFlyVertexSet@@@0@$$QAM$$QAUTFlyVertexSet@@@Z ENDP ; std::make_pair<float,TFlyVertexSet>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??4?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 125  : 		if (_Myproxy == _Right._Myproxy)

  00003	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	39 01		 cmp	 DWORD PTR [ecx], eax
  0000a	74 0e		 je	 SHORT $LN11@operator

; 126  : 			;
; 127  : 		else if (_Right._Myproxy != 0)

  0000c	85 c0		 test	 eax, eax
  0000e	74 0a		 je	 SHORT $LN11@operator

; 128  : 			_Adopt(_Right._Myproxy->_Mycont);

  00010	8b 00		 mov	 eax, DWORD PTR [eax]

; 129  : 		else
; 130  : 			{	// becoming invalid, disown current parent
; 131  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 132  : 			_Lockit _Lock(_LOCK_DEBUG);
; 133  : 			_Orphan_me();
; 134  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 135  : 			}
; 136  : 		return (*this);
; 137  : 		}
; 138  : 
; 139  : 	~_Iterator_base12() _NOEXCEPT
; 140  : 		{	// destroy the iterator
; 141  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 142  : 		_Lockit _Lock(_LOCK_DEBUG);
; 143  : 		_Orphan_me();
; 144  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 145  : 		}
; 146  : 
; 147  : 	void _Adopt(const _Container_base12 *_Parent)
; 148  : 		{	// adopt this iterator by parent
; 149  : 		if (_Parent == 0)

  00012	85 c0		 test	 eax, eax
  00014	74 04		 je	 SHORT $LN11@operator

; 150  : 			{	// no future parent, just disown current parent
; 151  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 152  : 			_Lockit _Lock(_LOCK_DEBUG);
; 153  : 			_Orphan_me();
; 154  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 155  : 			}
; 156  : 		else
; 157  : 			{	// have a parent, do adoption
; 158  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 159  : 
; 160  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 161  : 			if (_Myproxy != _Parent_proxy)
; 162  : 				{	// change parentage
; 163  : 				_Lockit _Lock(_LOCK_DEBUG);
; 164  : 				_Orphan_me();
; 165  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 166  : 				_Parent_proxy->_Myfirstiter = this;
; 167  : 				_Myproxy = _Parent_proxy;
; 168  : 				}
; 169  : 
; 170  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 171  : 			_Myproxy = _Parent_proxy;

  00016	8b 00		 mov	 eax, DWORD PTR [eax]
  00018	89 01		 mov	 DWORD PTR [ecx], eax
$LN11@operator:
  0001a	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0001d	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00020	8b c1		 mov	 eax, ecx
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??4?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 125  : 		if (_Myproxy == _Right._Myproxy)

  00003	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]

; 119  : 		{	// copy an iterator

  00006	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0000c	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 125  : 		if (_Myproxy == _Right._Myproxy)

  00013	8b 02		 mov	 eax, DWORD PTR [edx]
  00015	85 c0		 test	 eax, eax
  00017	74 0a		 je	 SHORT $LN13@Deque_iter

; 126  : 			;
; 127  : 		else if (_Right._Myproxy != 0)
; 128  : 			_Adopt(_Right._Myproxy->_Mycont);

  00019	8b 00		 mov	 eax, DWORD PTR [eax]

; 129  : 		else
; 130  : 			{	// becoming invalid, disown current parent
; 131  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 132  : 			_Lockit _Lock(_LOCK_DEBUG);
; 133  : 			_Orphan_me();
; 134  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 135  : 			}
; 136  : 		return (*this);
; 137  : 		}
; 138  : 
; 139  : 	~_Iterator_base12() _NOEXCEPT
; 140  : 		{	// destroy the iterator
; 141  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 142  : 		_Lockit _Lock(_LOCK_DEBUG);
; 143  : 		_Orphan_me();
; 144  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 145  : 		}
; 146  : 
; 147  : 	void _Adopt(const _Container_base12 *_Parent)
; 148  : 		{	// adopt this iterator by parent
; 149  : 		if (_Parent == 0)

  0001b	85 c0		 test	 eax, eax
  0001d	74 04		 je	 SHORT $LN13@Deque_iter

; 150  : 			{	// no future parent, just disown current parent
; 151  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 152  : 			_Lockit _Lock(_LOCK_DEBUG);
; 153  : 			_Orphan_me();
; 154  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 155  : 			}
; 156  : 		else
; 157  : 			{	// have a parent, do adoption
; 158  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 159  : 
; 160  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 161  : 			if (_Myproxy != _Parent_proxy)
; 162  : 				{	// change parentage
; 163  : 				_Lockit _Lock(_LOCK_DEBUG);
; 164  : 				_Orphan_me();
; 165  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 166  : 				_Parent_proxy->_Myfirstiter = this;
; 167  : 				_Myproxy = _Parent_proxy;
; 168  : 				}
; 169  : 
; 170  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 171  : 			_Myproxy = _Parent_proxy;

  0001f	8b 00		 mov	 eax, DWORD PTR [eax]
  00021	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@Deque_iter:
  00023	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00026	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00029	8b c1		 mov	 eax, ecx
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::~_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::~_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
;	COMDAT ??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator-, COMDAT
; _this$ = ecx

; 655  : 		{	// return this - integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File a:\vs\vc\include\xutility

; 125  : 		if (_Myproxy == _Right._Myproxy)

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	56		 push	 esi

; 119  : 		{	// copy an iterator

  00006	33 f6		 xor	 esi, esi

; 125  : 		if (_Myproxy == _Right._Myproxy)

  00008	85 c0		 test	 eax, eax
  0000a	74 08		 je	 SHORT $LN15@operator

; 126  : 			;
; 127  : 		else if (_Right._Myproxy != 0)
; 128  : 			_Adopt(_Right._Myproxy->_Mycont);

  0000c	8b 00		 mov	 eax, DWORD PTR [eax]

; 129  : 		else
; 130  : 			{	// becoming invalid, disown current parent
; 131  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 132  : 			_Lockit _Lock(_LOCK_DEBUG);
; 133  : 			_Orphan_me();
; 134  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 135  : 			}
; 136  : 		return (*this);
; 137  : 		}
; 138  : 
; 139  : 	~_Iterator_base12() _NOEXCEPT
; 140  : 		{	// destroy the iterator
; 141  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 142  : 		_Lockit _Lock(_LOCK_DEBUG);
; 143  : 		_Orphan_me();
; 144  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 145  : 		}
; 146  : 
; 147  : 	void _Adopt(const _Container_base12 *_Parent)
; 148  : 		{	// adopt this iterator by parent
; 149  : 		if (_Parent == 0)

  0000e	85 c0		 test	 eax, eax
  00010	74 02		 je	 SHORT $LN15@operator

; 150  : 			{	// no future parent, just disown current parent
; 151  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 152  : 			_Lockit _Lock(_LOCK_DEBUG);
; 153  : 			_Orphan_me();
; 154  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 155  : 			}
; 156  : 		else
; 157  : 			{	// have a parent, do adoption
; 158  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 159  : 
; 160  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 161  : 			if (_Myproxy != _Parent_proxy)
; 162  : 				{	// change parentage
; 163  : 				_Lockit _Lock(_LOCK_DEBUG);
; 164  : 				_Orphan_me();
; 165  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 166  : 				_Parent_proxy->_Myfirstiter = this;
; 167  : 				_Myproxy = _Parent_proxy;
; 168  : 				}
; 169  : 
; 170  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 171  : 			_Myproxy = _Parent_proxy;

  00012	8b 30		 mov	 esi, DWORD PTR [eax]
$LN15@operator:

; 119  : 		{	// copy an iterator

  00014	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File a:\vs\vc\include\deque

; 639  : 		this->_Myoff += _Off;

  00017	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001a	2b 55 0c	 sub	 edx, DWORD PTR __Off$[ebp]
; File a:\vs\vc\include\xutility

; 119  : 		{	// copy an iterator

  0001d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00023	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  0002a	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 125  : 		if (_Myproxy == _Right._Myproxy)

  0002d	85 f6		 test	 esi, esi
  0002f	74 0a		 je	 SHORT $LN35@operator

; 126  : 			;
; 127  : 		else if (_Right._Myproxy != 0)
; 128  : 			_Adopt(_Right._Myproxy->_Mycont);

  00031	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 129  : 		else
; 130  : 			{	// becoming invalid, disown current parent
; 131  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 132  : 			_Lockit _Lock(_LOCK_DEBUG);
; 133  : 			_Orphan_me();
; 134  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 135  : 			}
; 136  : 		return (*this);
; 137  : 		}
; 138  : 
; 139  : 	~_Iterator_base12() _NOEXCEPT
; 140  : 		{	// destroy the iterator
; 141  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 142  : 		_Lockit _Lock(_LOCK_DEBUG);
; 143  : 		_Orphan_me();
; 144  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 145  : 		}
; 146  : 
; 147  : 	void _Adopt(const _Container_base12 *_Parent)
; 148  : 		{	// adopt this iterator by parent
; 149  : 		if (_Parent == 0)

  00033	85 c9		 test	 ecx, ecx
  00035	74 04		 je	 SHORT $LN35@operator

; 150  : 			{	// no future parent, just disown current parent
; 151  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 152  : 			_Lockit _Lock(_LOCK_DEBUG);
; 153  : 			_Orphan_me();
; 154  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 155  : 			}
; 156  : 		else
; 157  : 			{	// have a parent, do adoption
; 158  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 159  : 
; 160  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 161  : 			if (_Myproxy != _Parent_proxy)
; 162  : 				{	// change parentage
; 163  : 				_Lockit _Lock(_LOCK_DEBUG);
; 164  : 				_Orphan_me();
; 165  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 166  : 				_Parent_proxy->_Myfirstiter = this;
; 167  : 				_Myproxy = _Parent_proxy;
; 168  : 				}
; 169  : 
; 170  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 171  : 			_Myproxy = _Parent_proxy;

  00037	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00039	89 08		 mov	 DWORD PTR [eax], ecx
$LN35@operator:
  0003b	5e		 pop	 esi
; File a:\vs\vc\include\deque

; 658  : 		}

  0003c	5d		 pop	 ebp
  0003d	c2 08 00	 ret	 8
??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
;	COMDAT ??Z?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Z?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator-=, COMDAT
; _this$ = ecx

; 650  : 		{	// decrement by integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 639  : 		this->_Myoff += _Off;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	29 41 08	 sub	 DWORD PTR [ecx+8], eax

; 651  : 		return (*this += -_Off);

  00009	8b c1		 mov	 eax, ecx

; 652  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??Z?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator-=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
;	COMDAT ??Y?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator+=, COMDAT
; _this$ = ecx

; 638  : 		{	// increment by integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 639  : 		this->_Myoff += _Off;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	01 41 08	 add	 DWORD PTR [ecx+8], eax

; 640  : 		return (*this);

  00009	8b c1		 mov	 eax, ecx

; 641  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??Y?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
;	COMDAT ??E?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator++, COMDAT
; _this$ = ecx

; 370  : 		++_Myoff;

  00000	ff 41 08	 inc	 DWORD PTR [ecx+8]

; 613  : 		++*(_Mybase *)this;
; 614  : 		return (*this);

  00003	8b c1		 mov	 eax, ecx

; 615  : 		}

  00005	c3		 ret	 0
??E?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
;	COMDAT ??C?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBEPAU?$pair@MUD3DXVECTOR3@@@1@XZ
_TEXT	SEGMENT
??C?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBEPAU?$pair@MUD3DXVECTOR3@@@1@XZ PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator->, COMDAT
; _this$ = ecx

; 607  : 		{	// return pointer to class object

  00000	8b d1		 mov	 edx, ecx
; File a:\vs\vc\include\xutility

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00002	8b 02		 mov	 eax, DWORD PTR [edx]
  00004	85 c0		 test	 eax, eax
  00006	75 0e		 jne	 SHORT $LN9@operator
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00008	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 608  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));

  0000b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0000e	49		 dec	 ecx
  0000f	23 4a 08	 and	 ecx, DWORD PTR [edx+8]

; 608  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));

  00012	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 609  : 		}

  00015	c3		 ret	 0
$LN9@operator:
; File a:\vs\vc\include\xutility

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00016	8b 00		 mov	 eax, DWORD PTR [eax]
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00018	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 608  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));

  0001b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0001e	49		 dec	 ecx
  0001f	23 4a 08	 and	 ecx, DWORD PTR [edx+8]

; 608  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));

  00022	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 609  : 		}

  00025	c3		 ret	 0
??C?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBEPAU?$pair@MUD3DXVECTOR3@@@1@XZ ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator->
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
;	COMDAT ??D?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBEAAU?$pair@MUD3DXVECTOR3@@@1@XZ
_TEXT	SEGMENT
??D?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBEAAU?$pair@MUD3DXVECTOR3@@@1@XZ PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator*, COMDAT
; _this$ = ecx

; 602  : 		{	// return designated object

  00000	8b d1		 mov	 edx, ecx
; File a:\vs\vc\include\xutility

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00002	8b 02		 mov	 eax, DWORD PTR [edx]
  00004	85 c0		 test	 eax, eax
  00006	75 0e		 jne	 SHORT $LN7@operator
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00008	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 603  : 		return ((reference)**(_Mybase *)this);

  0000b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0000e	49		 dec	 ecx
  0000f	23 4a 08	 and	 ecx, DWORD PTR [edx+8]

; 603  : 		return ((reference)**(_Mybase *)this);

  00012	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 604  : 		}

  00015	c3		 ret	 0
$LN7@operator:
; File a:\vs\vc\include\xutility

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00016	8b 00		 mov	 eax, DWORD PTR [eax]
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00018	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 603  : 		return ((reference)**(_Mybase *)this);

  0001b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0001e	49		 dec	 ecx
  0001f	23 4a 08	 and	 ecx, DWORD PTR [edx+8]

; 603  : 		return ((reference)**(_Mybase *)this);

  00022	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 604  : 		}

  00025	c3		 ret	 0
??D?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBEAAU?$pair@MUD3DXVECTOR3@@@1@XZ ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
;	COMDAT ??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Pdeque$ = 12						; size = 4
??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >, COMDAT
; _this$ = ecx

; 585  : 		{	// construct with offset _Off in *_Pdeque

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File a:\vs\vc\include\xutility

; 149  : 		if (_Parent == 0)

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdeque$[ebp]

; 114  : 		{	// construct orphaned iterator

  00006	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0000c	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 149  : 		if (_Parent == 0)

  00013	85 c0		 test	 eax, eax
  00015	74 04		 je	 SHORT $LN13@Deque_iter

; 150  : 			{	// no future parent, just disown current parent
; 151  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 152  : 			_Lockit _Lock(_LOCK_DEBUG);
; 153  : 			_Orphan_me();
; 154  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 155  : 			}
; 156  : 		else
; 157  : 			{	// have a parent, do adoption
; 158  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 159  : 
; 160  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 161  : 			if (_Myproxy != _Parent_proxy)
; 162  : 				{	// change parentage
; 163  : 				_Lockit _Lock(_LOCK_DEBUG);
; 164  : 				_Orphan_me();
; 165  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 166  : 				_Parent_proxy->_Myfirstiter = this;
; 167  : 				_Myproxy = _Parent_proxy;
; 168  : 				}
; 169  : 
; 170  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 171  : 			_Myproxy = _Parent_proxy;

  00017	8b 00		 mov	 eax, DWORD PTR [eax]
  00019	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@Deque_iter:
; File a:\vs\vc\include\deque

; 305  : 		_Myoff = _Off;

  0001b	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  0001e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 586  : 		}

  00021	8b c1		 mov	 eax, ecx
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
;	COMDAT ??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >, COMDAT
; _this$ = ecx
; File a:\vs\vc\include\xutility

; 114  : 		{	// construct orphaned iterator

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File a:\vs\vc\include\deque

; 581  : 		}

  00006	8b c1		 mov	 eax, ecx
; File a:\vs\vc\include\xutility

; 114  : 		{	// construct orphaned iterator

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; File a:\vs\vc\include\deque

; 299  : 		_Myoff = 0;

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 581  : 		}

  00016	c3		 ret	 0
??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??4?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 125  : 		if (_Myproxy == _Right._Myproxy)

  00003	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	39 01		 cmp	 DWORD PTR [ecx], eax
  0000a	74 0e		 je	 SHORT $LN9@operator

; 126  : 			;
; 127  : 		else if (_Right._Myproxy != 0)

  0000c	85 c0		 test	 eax, eax
  0000e	74 0a		 je	 SHORT $LN9@operator

; 128  : 			_Adopt(_Right._Myproxy->_Mycont);

  00010	8b 00		 mov	 eax, DWORD PTR [eax]

; 129  : 		else
; 130  : 			{	// becoming invalid, disown current parent
; 131  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 132  : 			_Lockit _Lock(_LOCK_DEBUG);
; 133  : 			_Orphan_me();
; 134  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 135  : 			}
; 136  : 		return (*this);
; 137  : 		}
; 138  : 
; 139  : 	~_Iterator_base12() _NOEXCEPT
; 140  : 		{	// destroy the iterator
; 141  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 142  : 		_Lockit _Lock(_LOCK_DEBUG);
; 143  : 		_Orphan_me();
; 144  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 145  : 		}
; 146  : 
; 147  : 	void _Adopt(const _Container_base12 *_Parent)
; 148  : 		{	// adopt this iterator by parent
; 149  : 		if (_Parent == 0)

  00012	85 c0		 test	 eax, eax
  00014	74 04		 je	 SHORT $LN9@operator

; 150  : 			{	// no future parent, just disown current parent
; 151  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 152  : 			_Lockit _Lock(_LOCK_DEBUG);
; 153  : 			_Orphan_me();
; 154  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 155  : 			}
; 156  : 		else
; 157  : 			{	// have a parent, do adoption
; 158  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 159  : 
; 160  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 161  : 			if (_Myproxy != _Parent_proxy)
; 162  : 				{	// change parentage
; 163  : 				_Lockit _Lock(_LOCK_DEBUG);
; 164  : 				_Orphan_me();
; 165  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 166  : 				_Parent_proxy->_Myfirstiter = this;
; 167  : 				_Myproxy = _Parent_proxy;
; 168  : 				}
; 169  : 
; 170  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 171  : 			_Myproxy = _Parent_proxy;

  00016	8b 00		 mov	 eax, DWORD PTR [eax]
  00018	89 01		 mov	 DWORD PTR [ecx], eax
$LN9@operator:
  0001a	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0001d	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00020	8b c1		 mov	 eax, ecx
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??4?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 125  : 		if (_Myproxy == _Right._Myproxy)

  00003	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]

; 119  : 		{	// copy an iterator

  00006	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0000c	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 125  : 		if (_Myproxy == _Right._Myproxy)

  00013	8b 02		 mov	 eax, DWORD PTR [edx]
  00015	85 c0		 test	 eax, eax
  00017	74 0a		 je	 SHORT $LN11@Deque_cons

; 126  : 			;
; 127  : 		else if (_Right._Myproxy != 0)
; 128  : 			_Adopt(_Right._Myproxy->_Mycont);

  00019	8b 00		 mov	 eax, DWORD PTR [eax]

; 129  : 		else
; 130  : 			{	// becoming invalid, disown current parent
; 131  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 132  : 			_Lockit _Lock(_LOCK_DEBUG);
; 133  : 			_Orphan_me();
; 134  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 135  : 			}
; 136  : 		return (*this);
; 137  : 		}
; 138  : 
; 139  : 	~_Iterator_base12() _NOEXCEPT
; 140  : 		{	// destroy the iterator
; 141  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 142  : 		_Lockit _Lock(_LOCK_DEBUG);
; 143  : 		_Orphan_me();
; 144  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 145  : 		}
; 146  : 
; 147  : 	void _Adopt(const _Container_base12 *_Parent)
; 148  : 		{	// adopt this iterator by parent
; 149  : 		if (_Parent == 0)

  0001b	85 c0		 test	 eax, eax
  0001d	74 04		 je	 SHORT $LN11@Deque_cons

; 150  : 			{	// no future parent, just disown current parent
; 151  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 152  : 			_Lockit _Lock(_LOCK_DEBUG);
; 153  : 			_Orphan_me();
; 154  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 155  : 			}
; 156  : 		else
; 157  : 			{	// have a parent, do adoption
; 158  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 159  : 
; 160  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 161  : 			if (_Myproxy != _Parent_proxy)
; 162  : 				{	// change parentage
; 163  : 				_Lockit _Lock(_LOCK_DEBUG);
; 164  : 				_Orphan_me();
; 165  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 166  : 				_Parent_proxy->_Myfirstiter = this;
; 167  : 				_Myproxy = _Parent_proxy;
; 168  : 				}
; 169  : 
; 170  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 171  : 			_Myproxy = _Parent_proxy;

  0001f	8b 00		 mov	 eax, DWORD PTR [eax]
  00021	89 01		 mov	 DWORD PTR [ecx], eax
$LN11@Deque_cons:
  00023	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00026	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00029	8b c1		 mov	 eax, ecx
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::~_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::~_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
;	COMDAT ?_Setcont@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAEXPBV?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
__Pdeque$ = 8						; size = 4
?_Setcont@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAEXPBV?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@2@@Z PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::_Setcont, COMDAT
; _this$ = ecx

; 530  : 		{	// set container pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File a:\vs\vc\include\xutility

; 149  : 		if (_Parent == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pdeque$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 04		 je	 SHORT $LN3@Setcont

; 150  : 			{	// no future parent, just disown current parent
; 151  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 152  : 			_Lockit _Lock(_LOCK_DEBUG);
; 153  : 			_Orphan_me();
; 154  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 155  : 			}
; 156  : 		else
; 157  : 			{	// have a parent, do adoption
; 158  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 159  : 
; 160  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 161  : 			if (_Myproxy != _Parent_proxy)
; 162  : 				{	// change parentage
; 163  : 				_Lockit _Lock(_LOCK_DEBUG);
; 164  : 				_Orphan_me();
; 165  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 166  : 				_Parent_proxy->_Myfirstiter = this;
; 167  : 				_Myproxy = _Parent_proxy;
; 168  : 				}
; 169  : 
; 170  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 171  : 			_Myproxy = _Parent_proxy;

  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@Setcont:
; File a:\vs\vc\include\deque

; 532  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Setcont@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAEXPBV?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@2@@Z ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::_Setcont
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
;	COMDAT ?_Compat@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::_Compat, COMDAT
; _this$ = ecx

; 527  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::_Compat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
;	COMDAT ??9?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator!=, COMDAT
; _this$ = ecx

; 469  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 465  : 		return (this->_Myoff == _Right._Myoff);

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]

; 470  : 		return (!(*this == _Right));

  00006	33 c0		 xor	 eax, eax

; 465  : 		return (this->_Myoff == _Right._Myoff);

  00008	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000b	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]

; 470  : 		return (!(*this == _Right));

  0000e	0f 95 c0	 setne	 al

; 471  : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
??9?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
;	COMDAT ??8?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator==, COMDAT
; _this$ = ecx

; 463  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 464  : 		_Compat(_Right);
; 465  : 		return (this->_Myoff == _Right._Myoff);

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00006	33 c0		 xor	 eax, eax
  00008	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000b	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0000e	0f 94 c0	 sete	 al

; 466  : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
??8?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
;	COMDAT ??E?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator++, COMDAT
; _this$ = ecx

; 354  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 355  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 356  : 		if (_Mycont == 0
; 357  : 			|| _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
; 358  : 		{	// report error
; 359  : 		_DEBUG_ERROR("deque iterator not incrementable");
; 360  : 		_SCL_SECURE_OUT_OF_RANGE;
; 361  : 		}
; 362  : 
; 363  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 364  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 365  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 366  : 		_SCL_SECURE_VALIDATE_RANGE(
; 367  : 			this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize);
; 368  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 369  : 
; 370  : 		++_Myoff;

  00000	ff 41 08	 inc	 DWORD PTR [ecx+8]

; 371  : 		return (*this);

  00003	8b c1		 mov	 eax, ecx

; 372  : 		}

  00005	c3		 ret	 0
??E?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
;	COMDAT ??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBEABU?$pair@MUD3DXVECTOR3@@@1@XZ
_TEXT	SEGMENT
??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBEABU?$pair@MUD3DXVECTOR3@@@1@XZ PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator*, COMDAT
; _this$ = ecx

; 322  : 		{	// return designated object

  00000	8b d1		 mov	 edx, ecx
; File a:\vs\vc\include\xutility

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00002	8b 02		 mov	 eax, DWORD PTR [edx]
  00004	85 c0		 test	 eax, eax
  00006	75 0e		 jne	 SHORT $LN5@operator
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00008	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 323  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 324  : 
; 325  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 326  : 		if (_Mycont == 0
; 327  : 			|| this->_Myoff < _Mycont->_Myoff
; 328  : 			|| _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
; 329  : 		{	// report error
; 330  : 		_DEBUG_ERROR("deque iterator not dereferencable");
; 331  : 		_SCL_SECURE_OUT_OF_RANGE;
; 332  : 		}
; 333  : 
; 334  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 335  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 336  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff <= this->_Myoff
; 337  : 			&& this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize);
; 338  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 339  : 
; 340  : 		_Analysis_assume_(_Mycont != 0);
; 341  : 
; 342  : 		size_type _Block = _Mycont->_Getblock(_Myoff);
; 343  : 		size_type _Off = _Myoff % _DEQUESIZ;
; 344  : 		return (_Mycont->_Map[_Block][_Off]);

  0000b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0000e	49		 dec	 ecx
  0000f	23 4a 08	 and	 ecx, DWORD PTR [edx+8]

; 323  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 324  : 
; 325  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 326  : 		if (_Mycont == 0
; 327  : 			|| this->_Myoff < _Mycont->_Myoff
; 328  : 			|| _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
; 329  : 		{	// report error
; 330  : 		_DEBUG_ERROR("deque iterator not dereferencable");
; 331  : 		_SCL_SECURE_OUT_OF_RANGE;
; 332  : 		}
; 333  : 
; 334  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 335  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 336  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff <= this->_Myoff
; 337  : 			&& this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize);
; 338  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 339  : 
; 340  : 		_Analysis_assume_(_Mycont != 0);
; 341  : 
; 342  : 		size_type _Block = _Mycont->_Getblock(_Myoff);
; 343  : 		size_type _Off = _Myoff % _DEQUESIZ;
; 344  : 		return (_Mycont->_Map[_Block][_Off]);

  00012	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 345  : 		}

  00015	c3		 ret	 0
$LN5@operator:
; File a:\vs\vc\include\xutility

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00016	8b 00		 mov	 eax, DWORD PTR [eax]
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00018	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 323  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 324  : 
; 325  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 326  : 		if (_Mycont == 0
; 327  : 			|| this->_Myoff < _Mycont->_Myoff
; 328  : 			|| _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
; 329  : 		{	// report error
; 330  : 		_DEBUG_ERROR("deque iterator not dereferencable");
; 331  : 		_SCL_SECURE_OUT_OF_RANGE;
; 332  : 		}
; 333  : 
; 334  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 335  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 336  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff <= this->_Myoff
; 337  : 			&& this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize);
; 338  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 339  : 
; 340  : 		_Analysis_assume_(_Mycont != 0);
; 341  : 
; 342  : 		size_type _Block = _Mycont->_Getblock(_Myoff);
; 343  : 		size_type _Off = _Myoff % _DEQUESIZ;
; 344  : 		return (_Mycont->_Map[_Block][_Off]);

  0001b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0001e	49		 dec	 ecx
  0001f	23 4a 08	 and	 ecx, DWORD PTR [edx+8]

; 323  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 324  : 
; 325  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 326  : 		if (_Mycont == 0
; 327  : 			|| this->_Myoff < _Mycont->_Myoff
; 328  : 			|| _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
; 329  : 		{	// report error
; 330  : 		_DEBUG_ERROR("deque iterator not dereferencable");
; 331  : 		_SCL_SECURE_OUT_OF_RANGE;
; 332  : 		}
; 333  : 
; 334  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 335  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 336  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff <= this->_Myoff
; 337  : 			&& this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize);
; 338  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 339  : 
; 340  : 		_Analysis_assume_(_Mycont != 0);
; 341  : 
; 342  : 		size_type _Block = _Mycont->_Getblock(_Myoff);
; 343  : 		size_type _Off = _Myoff % _DEQUESIZ;
; 344  : 		return (_Mycont->_Map[_Block][_Off]);

  00022	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 345  : 		}

  00025	c3		 ret	 0
??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBEABU?$pair@MUD3DXVECTOR3@@@1@XZ ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
;	COMDAT ??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Pdeque$ = 12						; size = 4
??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >, COMDAT
; _this$ = ecx

; 302  : 	_Deque_const_iterator(size_type _Off, const _Container_base12 *_Pdeque)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File a:\vs\vc\include\xutility

; 149  : 		if (_Parent == 0)

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdeque$[ebp]

; 114  : 		{	// construct orphaned iterator

  00006	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0000c	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 149  : 		if (_Parent == 0)

  00013	85 c0		 test	 eax, eax
  00015	74 04		 je	 SHORT $LN11@Deque_cons

; 150  : 			{	// no future parent, just disown current parent
; 151  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 152  : 			_Lockit _Lock(_LOCK_DEBUG);
; 153  : 			_Orphan_me();
; 154  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 155  : 			}
; 156  : 		else
; 157  : 			{	// have a parent, do adoption
; 158  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 159  : 
; 160  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 161  : 			if (_Myproxy != _Parent_proxy)
; 162  : 				{	// change parentage
; 163  : 				_Lockit _Lock(_LOCK_DEBUG);
; 164  : 				_Orphan_me();
; 165  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 166  : 				_Parent_proxy->_Myfirstiter = this;
; 167  : 				_Myproxy = _Parent_proxy;
; 168  : 				}
; 169  : 
; 170  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 171  : 			_Myproxy = _Parent_proxy;

  00017	8b 00		 mov	 eax, DWORD PTR [eax]
  00019	89 01		 mov	 DWORD PTR [ecx], eax
$LN11@Deque_cons:
; File a:\vs\vc\include\deque

; 305  : 		_Myoff = _Off;

  0001b	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  0001e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 306  : 		}

  00021	8b c1		 mov	 eax, ecx
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
;	COMDAT ??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >, COMDAT
; _this$ = ecx
; File a:\vs\vc\include\xutility

; 114  : 		{	// construct orphaned iterator

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File a:\vs\vc\include\deque

; 300  : 		}

  00006	8b c1		 mov	 eax, ecx
; File a:\vs\vc\include\xutility

; 114  : 		{	// construct orphaned iterator

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; File a:\vs\vc\include\deque

; 299  : 		_Myoff = 0;

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 300  : 		}

  00016	c3		 ret	 0
??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IBEXPAU?$pair@MUTFlyVertexSet@@@2@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IBEXPAU?$pair@MUTFlyVertexSet@@@2@0@Z PROC ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Orphan_range, COMDAT
; _this$ = ecx

; 1781 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IBEXPAU?$pair@MUTFlyVertexSet@@@2@0@Z ENDP ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Xlen@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IBEXXZ PROC ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Xlen, COMDAT
; _this$ = ecx

; 1754 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IBEXXZ ENDP ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
;	COMDAT ?_Tidy@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IAEXXZ PROC ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Tidy, COMDAT
; _this$ = ecx

; 1622 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1623 : 		if (this->_Myfirst != pointer())

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 1d		 je	 SHORT $LN1@Tidy
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
; File a:\vs\vc\include\vector

; 1629 : 			this->_Myfirst = pointer();

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1630 : 			this->_Mylast = pointer();

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1631 : 			this->_Myend = pointer();

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN1@Tidy:
  00026	5e		 pop	 esi

; 1632 : 			}
; 1633 : 		}

  00027	c3		 ret	 0
?_Tidy@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IAEXXZ ENDP ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Reserve@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IAEXI@Z PROC ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Reserve, COMDAT
; _this$ = ecx

; 1612 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 1015 : 		return (this->_Myend - this->_Mylast);

  00008	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  0000d	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
  00010	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
  00013	2b f3		 sub	 esi, ebx
  00015	f7 ee		 imul	 esi
  00017	03 d6		 add	 edx, esi

; 1613 : 		if (_Unused_capacity() < _Count)

  00019	8b 75 08	 mov	 esi, DWORD PTR __Count$[ebp]

; 1015 : 		return (this->_Myend - this->_Mylast);

  0001c	c1 fa 07	 sar	 edx, 7
  0001f	8b ca		 mov	 ecx, edx
  00021	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00024	03 ca		 add	 ecx, edx

; 1613 : 		if (_Unused_capacity() < _Count)

  00026	3b ce		 cmp	 ecx, esi
  00028	73 33		 jae	 SHORT $LN2@Reserve

; 1016 : 		}
; 1017 : 
; 1018 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1019 : 		{	// micro-optimization for capacity() != size()
; 1020 : 		return (this->_Myend != this->_Mylast);
; 1021 : 		}
; 1022 : 
; 1023 : 	iterator begin() _NOEXCEPT
; 1024 : 		{	// return iterator for beginning of mutable sequence
; 1025 : 		return (iterator(this->_Myfirst, this));
; 1026 : 		}
; 1027 : 
; 1028 : 	const_iterator begin() const _NOEXCEPT
; 1029 : 		{	// return iterator for beginning of nonmutable sequence
; 1030 : 		return (const_iterator(this->_Myfirst, this));
; 1031 : 		}
; 1032 : 
; 1033 : 	iterator end() _NOEXCEPT
; 1034 : 		{	// return iterator for end of mutable sequence
; 1035 : 		return (iterator(this->_Mylast, this));
; 1036 : 		}
; 1037 : 
; 1038 : 	const_iterator end() const _NOEXCEPT
; 1039 : 		{	// return iterator for end of nonmutable sequence
; 1040 : 		return (const_iterator(this->_Mylast, this));
; 1041 : 		}
; 1042 : 
; 1043 : 	iterator _Make_iter(const_iterator _Where) const
; 1044 : 		{	// make iterator from const_iterator
; 1045 : 		return (iterator(_Where._Ptr, this));
; 1046 : 		}
; 1047 : 
; 1048 : 	reverse_iterator rbegin() _NOEXCEPT
; 1049 : 		{	// return iterator for beginning of reversed mutable sequence
; 1050 : 		return (reverse_iterator(end()));
; 1051 : 		}
; 1052 : 
; 1053 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1054 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1055 : 		return (const_reverse_iterator(end()));
; 1056 : 		}
; 1057 : 
; 1058 : 	reverse_iterator rend() _NOEXCEPT
; 1059 : 		{	// return iterator for end of reversed mutable sequence
; 1060 : 		return (reverse_iterator(begin()));
; 1061 : 		}
; 1062 : 
; 1063 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1064 : 		{	// return iterator for end of reversed nonmutable sequence
; 1065 : 		return (const_reverse_iterator(begin()));
; 1066 : 		}
; 1067 : 
; 1068 : 	const_iterator cbegin() const _NOEXCEPT
; 1069 : 		{	// return iterator for beginning of nonmutable sequence
; 1070 : 		return (((const _Myt *)this)->begin());
; 1071 : 		}
; 1072 : 
; 1073 : 	const_iterator cend() const _NOEXCEPT
; 1074 : 		{	// return iterator for end of nonmutable sequence
; 1075 : 		return (((const _Myt *)this)->end());
; 1076 : 		}
; 1077 : 
; 1078 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1079 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1080 : 		return (((const _Myt *)this)->rbegin());
; 1081 : 		}
; 1082 : 
; 1083 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1084 : 		{	// return iterator for end of reversed nonmutable sequence
; 1085 : 		return (((const _Myt *)this)->rend());
; 1086 : 		}
; 1087 : 
; 1088 : 	void shrink_to_fit()
; 1089 : 		{	// reduce capacity
; 1090 : 		if (_Has_unused_capacity())
; 1091 : 			{	// worth shrinking, do it
; 1092 : 			if (empty())
; 1093 : 				_Tidy();
; 1094 : 			else
; 1095 : 				_Reallocate(size());
; 1096 : 			}
; 1097 : 		}
; 1098 : 
; 1099 : 	void resize(size_type _Newsize)
; 1100 : 		{	// determine new length, padding as needed
; 1101 : 		if (_Newsize < size())
; 1102 : 			_Pop_back_n(size() - _Newsize);
; 1103 : 		else if (size() < _Newsize)
; 1104 : 			{	// pad as needed
; 1105 : 			_Alty _Alval(this->_Getal());
; 1106 : 			_Reserve(_Newsize - size());
; 1107 : 			_TRY_BEGIN
; 1108 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1109 : 				_Alval);
; 1110 : 			_CATCH_ALL
; 1111 : 			_Tidy();
; 1112 : 			_RERAISE;
; 1113 : 			_CATCH_END
; 1114 : 			this->_Mylast += _Newsize - size();
; 1115 : 			}
; 1116 : 		}
; 1117 : 
; 1118 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1119 : 		{	// determine new length, padding with _Val elements as needed
; 1120 : 		if (_Newsize < size())
; 1121 : 			_Pop_back_n(size() - _Newsize);
; 1122 : 		else if (size() < _Newsize)
; 1123 : 			{	// pad as needed
; 1124 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1125 : 
; 1126 : 			if (_Inside(_Ptr))
; 1127 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1128 : 				const difference_type _Idx = _Ptr
; 1129 : 					- _STD addressof(*this->_Myfirst);
; 1130 : 				_Reserve(_Newsize - size());
; 1131 : 				_Ptr = _STD addressof(*this->_Myfirst) + _Idx;
; 1132 : 				}
; 1133 : 			else
; 1134 : 				_Reserve(_Newsize - size());
; 1135 : 
; 1136 : 			_TRY_BEGIN
; 1137 : 			_Ufill(this->_Mylast, _Newsize - size(), _Ptr);
; 1138 : 			_CATCH_ALL
; 1139 : 			_Tidy();
; 1140 : 			_RERAISE;
; 1141 : 			_CATCH_END
; 1142 : 			this->_Mylast += _Newsize - size();
; 1143 : 			}
; 1144 : 		}
; 1145 : 
; 1146 : 	size_type size() const _NOEXCEPT
; 1147 : 		{	// return length of sequence
; 1148 : 		return (this->_Mylast - this->_Myfirst);

  0002a	2b 1f		 sub	 ebx, DWORD PTR [edi]
  0002c	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00031	f7 eb		 imul	 ebx

; 1614 : 			{	// need more room, try to get it
; 1615 : 			if (max_size() - size() < _Count)

  00033	b8 91 cf ba 01	 mov	 eax, 29020049		; 01bacf91H

; 1016 : 		}
; 1017 : 
; 1018 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1019 : 		{	// micro-optimization for capacity() != size()
; 1020 : 		return (this->_Myend != this->_Mylast);
; 1021 : 		}
; 1022 : 
; 1023 : 	iterator begin() _NOEXCEPT
; 1024 : 		{	// return iterator for beginning of mutable sequence
; 1025 : 		return (iterator(this->_Myfirst, this));
; 1026 : 		}
; 1027 : 
; 1028 : 	const_iterator begin() const _NOEXCEPT
; 1029 : 		{	// return iterator for beginning of nonmutable sequence
; 1030 : 		return (const_iterator(this->_Myfirst, this));
; 1031 : 		}
; 1032 : 
; 1033 : 	iterator end() _NOEXCEPT
; 1034 : 		{	// return iterator for end of mutable sequence
; 1035 : 		return (iterator(this->_Mylast, this));
; 1036 : 		}
; 1037 : 
; 1038 : 	const_iterator end() const _NOEXCEPT
; 1039 : 		{	// return iterator for end of nonmutable sequence
; 1040 : 		return (const_iterator(this->_Mylast, this));
; 1041 : 		}
; 1042 : 
; 1043 : 	iterator _Make_iter(const_iterator _Where) const
; 1044 : 		{	// make iterator from const_iterator
; 1045 : 		return (iterator(_Where._Ptr, this));
; 1046 : 		}
; 1047 : 
; 1048 : 	reverse_iterator rbegin() _NOEXCEPT
; 1049 : 		{	// return iterator for beginning of reversed mutable sequence
; 1050 : 		return (reverse_iterator(end()));
; 1051 : 		}
; 1052 : 
; 1053 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1054 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1055 : 		return (const_reverse_iterator(end()));
; 1056 : 		}
; 1057 : 
; 1058 : 	reverse_iterator rend() _NOEXCEPT
; 1059 : 		{	// return iterator for end of reversed mutable sequence
; 1060 : 		return (reverse_iterator(begin()));
; 1061 : 		}
; 1062 : 
; 1063 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1064 : 		{	// return iterator for end of reversed nonmutable sequence
; 1065 : 		return (const_reverse_iterator(begin()));
; 1066 : 		}
; 1067 : 
; 1068 : 	const_iterator cbegin() const _NOEXCEPT
; 1069 : 		{	// return iterator for beginning of nonmutable sequence
; 1070 : 		return (((const _Myt *)this)->begin());
; 1071 : 		}
; 1072 : 
; 1073 : 	const_iterator cend() const _NOEXCEPT
; 1074 : 		{	// return iterator for end of nonmutable sequence
; 1075 : 		return (((const _Myt *)this)->end());
; 1076 : 		}
; 1077 : 
; 1078 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1079 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1080 : 		return (((const _Myt *)this)->rbegin());
; 1081 : 		}
; 1082 : 
; 1083 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1084 : 		{	// return iterator for end of reversed nonmutable sequence
; 1085 : 		return (((const _Myt *)this)->rend());
; 1086 : 		}
; 1087 : 
; 1088 : 	void shrink_to_fit()
; 1089 : 		{	// reduce capacity
; 1090 : 		if (_Has_unused_capacity())
; 1091 : 			{	// worth shrinking, do it
; 1092 : 			if (empty())
; 1093 : 				_Tidy();
; 1094 : 			else
; 1095 : 				_Reallocate(size());
; 1096 : 			}
; 1097 : 		}
; 1098 : 
; 1099 : 	void resize(size_type _Newsize)
; 1100 : 		{	// determine new length, padding as needed
; 1101 : 		if (_Newsize < size())
; 1102 : 			_Pop_back_n(size() - _Newsize);
; 1103 : 		else if (size() < _Newsize)
; 1104 : 			{	// pad as needed
; 1105 : 			_Alty _Alval(this->_Getal());
; 1106 : 			_Reserve(_Newsize - size());
; 1107 : 			_TRY_BEGIN
; 1108 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1109 : 				_Alval);
; 1110 : 			_CATCH_ALL
; 1111 : 			_Tidy();
; 1112 : 			_RERAISE;
; 1113 : 			_CATCH_END
; 1114 : 			this->_Mylast += _Newsize - size();
; 1115 : 			}
; 1116 : 		}
; 1117 : 
; 1118 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1119 : 		{	// determine new length, padding with _Val elements as needed
; 1120 : 		if (_Newsize < size())
; 1121 : 			_Pop_back_n(size() - _Newsize);
; 1122 : 		else if (size() < _Newsize)
; 1123 : 			{	// pad as needed
; 1124 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1125 : 
; 1126 : 			if (_Inside(_Ptr))
; 1127 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1128 : 				const difference_type _Idx = _Ptr
; 1129 : 					- _STD addressof(*this->_Myfirst);
; 1130 : 				_Reserve(_Newsize - size());
; 1131 : 				_Ptr = _STD addressof(*this->_Myfirst) + _Idx;
; 1132 : 				}
; 1133 : 			else
; 1134 : 				_Reserve(_Newsize - size());
; 1135 : 
; 1136 : 			_TRY_BEGIN
; 1137 : 			_Ufill(this->_Mylast, _Newsize - size(), _Ptr);
; 1138 : 			_CATCH_ALL
; 1139 : 			_Tidy();
; 1140 : 			_RERAISE;
; 1141 : 			_CATCH_END
; 1142 : 			this->_Mylast += _Newsize - size();
; 1143 : 			}
; 1144 : 		}
; 1145 : 
; 1146 : 	size_type size() const _NOEXCEPT
; 1147 : 		{	// return length of sequence
; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00038	03 d3		 add	 edx, ebx
  0003a	c1 fa 07	 sar	 edx, 7
  0003d	8b ca		 mov	 ecx, edx
  0003f	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00042	03 ca		 add	 ecx, edx

; 1614 : 			{	// need more room, try to get it
; 1615 : 			if (max_size() - size() < _Count)

  00044	2b c1		 sub	 eax, ecx
  00046	3b c6		 cmp	 eax, esi
  00048	72 1a		 jb	 SHORT $LN25@Reserve

; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));

  0004a	8d 04 31	 lea	 eax, DWORD PTR [ecx+esi]
  0004d	8b cf		 mov	 ecx, edi
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IBEII@Z ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Grow_to
  00055	50		 push	 eax
  00056	8b cf		 mov	 ecx, edi
  00058	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IAEXI@Z ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Reallocate
$LN2@Reserve:
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx

; 1618 : 			}
; 1619 : 		}

  00060	5d		 pop	 ebp
  00061	c2 04 00	 ret	 4
$LN25@Reserve:

; 1620 : 
; 1621 : 	void _Tidy()
; 1622 : 		{	// free all storage
; 1623 : 		if (this->_Myfirst != pointer())
; 1624 : 			{	// something to free, destroy and deallocate it
; 1625 : 			this->_Orphan_all();
; 1626 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1627 : 			this->_Getal().deallocate(this->_Myfirst,
; 1628 : 				this->_Myend - this->_Myfirst);
; 1629 : 			this->_Myfirst = pointer();
; 1630 : 			this->_Mylast = pointer();
; 1631 : 			this->_Myend = pointer();
; 1632 : 			}
; 1633 : 		}
; 1634 : 
; 1635 : 	template<class _Iter>
; 1636 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1637 : 		{	// copy initializing [_First, _Last), using allocator
; 1638 : 		_Alty _Alval(this->_Getal());
; 1639 : 		return (_Uninitialized_copy(_First, _Last,
; 1640 : 			_Ptr, _Alval));
; 1641 : 		}
; 1642 : 
; 1643 : 	template<class _Iter>
; 1644 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1645 : 		{	// move initializing [_First, _Last), using allocator
; 1646 : 		_Alty _Alval(this->_Getal());
; 1647 : 		return (_Uninitialized_move(_First, _Last,
; 1648 : 			_Ptr, _Alval));
; 1649 : 		}
; 1650 : 
; 1651 : 	iterator _Insert_n(const_iterator _Where,
; 1652 : 		size_type _Count, const value_type& _Val)
; 1653 : 		{	// insert _Count * _Val at _Where
; 1654 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1655 : 		if (_VICONT(_Where) != this
; 1656 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1657 : 			|| this->_Mylast < _VIPTR(_Where))
; 1658 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1659 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1660 : 
; 1661 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1662 : 		if (_Count == 0)
; 1663 : 			;
; 1664 : 		else if (_Unused_capacity() < _Count)
; 1665 : 			{	// not enough room, reallocate
; 1666 : 			if (max_size() - size() < _Count)
; 1667 : 				_Xlen();	// result too long
; 1668 : 
; 1669 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1670 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1671 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst;
; 1672 : 			int _Ncopied = 0;
; 1673 : 
; 1674 : 			_TRY_BEGIN
; 1675 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1676 : 				_STD addressof(_Val));	// add new stuff
; 1677 : 			++_Ncopied;
; 1678 : 			_Umove(this->_Myfirst, _VIPTR(_Where),
; 1679 : 				_Newvec);	// copy prefix
; 1680 : 			++_Ncopied;
; 1681 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1682 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1683 : 			_CATCH_ALL
; 1684 : 			if (1 < _Ncopied)
; 1685 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1686 : 			if (0 < _Ncopied)
; 1687 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1688 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1689 : 			_RERAISE;
; 1690 : 			_CATCH_END
; 1691 : 
; 1692 : 			_Count += size();
; 1693 : 			if (this->_Myfirst != pointer())
; 1694 : 				{	// destroy and deallocate old array
; 1695 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1696 : 				this->_Getal().deallocate(this->_Myfirst,
; 1697 : 					this->_Myend - this->_Myfirst);
; 1698 : 				}
; 1699 : 
; 1700 : 			this->_Orphan_all();
; 1701 : 			this->_Myend = _Newvec + _Capacity;
; 1702 : 			this->_Mylast = _Newvec + _Count;
; 1703 : 			this->_Myfirst = _Newvec;
; 1704 : 			}
; 1705 : 		else if ((size_type)(this->_Mylast - _VIPTR(_Where))
; 1706 : 			< _Count)
; 1707 : 			{	// new stuff spills off end
; 1708 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1709 : 
; 1710 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1711 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1712 : 
; 1713 : 			_TRY_BEGIN
; 1714 : 			_Ufill(this->_Mylast,
; 1715 : 				_Count - (this->_Mylast - _VIPTR(_Where)),
; 1716 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1717 : 			_CATCH_ALL
; 1718 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1719 : 				this->_Mylast + _Count);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			this->_Mylast += _Count;
; 1724 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1725 : 			_STD fill(_VIPTR(_Where), this->_Mylast - _Count,
; 1726 : 				_Tmp);	// insert up to old end
; 1727 : 			}
; 1728 : 		else
; 1729 : 			{	// new stuff can all be assigned
; 1730 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1731 : 
; 1732 : 			pointer _Oldend = this->_Mylast;
; 1733 : 			this->_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1734 : 				this->_Mylast);	// copy suffix
; 1735 : 
; 1736 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1737 : 			_Copy_backward(_VIPTR(_Where), _Oldend - _Count,
; 1738 : 				_Oldend);	// copy hole
; 1739 : 			_STD fill(_VIPTR(_Where),
; 1740 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1741 : 			}
; 1742 : 		return (begin() + _Off);
; 1743 : 		}
; 1744 : 
; 1745 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1746 : 		{	// copy initializing _Count * _Val, using allocator
; 1747 : 		_Alty _Alval(this->_Getal());
; 1748 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, _Alval);
; 1749 : 		return (_Ptr + _Count);
; 1750 : 		}
; 1751 : 
; 1752 : 	__declspec(noreturn) void _Xlen() const
; 1753 : 		{	// report a length_error
; 1754 : 		_Xlength_error("vector<T> too long");

  00064	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00069	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN27@Reserve:
$LN24@Reserve:
  0006e	cc		 int	 3
?_Reserve@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IAEXI@Z ENDP ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Ptr$2 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Size$1$ = 8						; size = 4
__Cat$3 = 8						; size = 1
__Count$ = 8						; size = 4
__Alval$4 = 11						; size = 1
?_Reallocate@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IAEXI@Z PROC ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Reallocate, COMDAT
; _this$ = ecx

; 1587 : 		{	// move to array of exactly _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Reallocate@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
; File a:\vs\vc\include\xmemory0

; 25   : 	if (_Count == 0)

  0002d	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00030	33 f6		 xor	 esi, esi
  00032	89 75 ec	 mov	 DWORD PTR __Ptr$2[ebp], esi
  00035	85 db		 test	 ebx, ebx
  00037	74 25		 je	 SHORT $LN16@Reallocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00039	81 fb 91 cf ba
	01		 cmp	 ebx, 29020049		; 01bacf91H
  0003f	77 18		 ja	 SHORT $LN15@Reallocate
  00041	69 c3 94 00 00
	00		 imul	 eax, ebx, 148
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0004d	8b f0		 mov	 esi, eax
  0004f	83 c4 04	 add	 esp, 4
  00052	89 75 ec	 mov	 DWORD PTR __Ptr$2[ebp], esi
  00055	85 f6		 test	 esi, esi
  00057	75 05		 jne	 SHORT $LN16@Reallocate
$LN15@Reallocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00059	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN60@Reallocate:
$LN16@Reallocate:
; File a:\vs\vc\include\xmemory

; 484  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  0005e	ff 75 08	 push	 DWORD PTR __Cat$3[ebp]
  00061	8d 45 0b	 lea	 eax, DWORD PTR __Alval$4[ebp]
; File a:\vs\vc\include\vector

; 1590 : 		_TRY_BEGIN

  00064	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File a:\vs\vc\include\xmemory

; 484  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  0006b	6a 00		 push	 0
  0006d	50		 push	 eax
  0006e	56		 push	 esi
  0006f	ff 77 04	 push	 DWORD PTR [edi+4]
  00072	ff 37		 push	 DWORD PTR [edi]
  00074	e8 00 00 00 00	 call	 ??$_Uninit_move@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@U12@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *,std::allocator<std::pair<float,TFlyVertexSet> >,std::pair<float,TFlyVertexSet> >
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00079	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0007c	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00081	2b 0f		 sub	 ecx, DWORD PTR [edi]
; File a:\vs\vc\include\xmemory

; 484  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00083	83 c4 18	 add	 esp, 24			; 00000018H
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00086	f7 e9		 imul	 ecx
  00088	03 d1		 add	 edx, ecx
  0008a	c1 fa 07	 sar	 edx, 7
  0008d	8b c2		 mov	 eax, edx
  0008f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00092	03 c2		 add	 eax, edx
  00094	89 45 08	 mov	 DWORD PTR __Size$1$[ebp], eax

; 1595 : 		_CATCH_END
; 1596 : 
; 1597 : 		size_type _Size = size();
; 1598 : 		if (this->_Myfirst != pointer())

  00097	8b 07		 mov	 eax, DWORD PTR [edi]
  00099	85 c0		 test	 eax, eax
  0009b	74 09		 je	 SHORT $LN54@Reallocate
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000a3	83 c4 04	 add	 esp, 4
$LN54@Reallocate:
; File a:\vs\vc\include\vector

; 1606 : 		this->_Myend = _Ptr + _Count;

  000a6	69 c3 94 00 00
	00		 imul	 eax, ebx, 148

; 1607 : 		this->_Mylast = _Ptr + _Size;
; 1608 : 		this->_Myfirst = _Ptr;

  000ac	89 37		 mov	 DWORD PTR [edi], esi
  000ae	03 c6		 add	 eax, esi
  000b0	89 47 08	 mov	 DWORD PTR [edi+8], eax
  000b3	69 45 08 94 00
	00 00		 imul	 eax, DWORD PTR __Size$1$[ebp], 148
  000ba	03 c6		 add	 eax, esi
  000bc	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1609 : 		}

  000bf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000c2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c9	59		 pop	 ecx
  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx
  000cd	8b e5		 mov	 esp, ebp
  000cf	5d		 pop	 ebp
  000d0	c2 04 00	 ret	 4
__catch$?_Reallocate@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IAEXI@Z$0:
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  000d3	ff 75 ec	 push	 DWORD PTR __Ptr$2[ebp]
  000d6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000db	83 c4 04	 add	 esp, 4
; File a:\vs\vc\include\vector

; 1594 : 		_RERAISE;

  000de	6a 00		 push	 0
  000e0	6a 00		 push	 0
  000e2	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN61@Reallocate:
$LN59@Reallocate:
  000e7	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IAEXI@Z ENDP ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Reallocate
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Inside@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IBE_NPBU?$pair@MUTFlyVertexSet@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IBE_NPBU?$pair@MUTFlyVertexSet@@@2@@Z PROC ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Inside, COMDAT
; _this$ = ecx

; 1582 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1583 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0a		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 06		 ja	 SHORT $LN3@Inside
  0000f	b0 01		 mov	 al, 1

; 1584 : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
$LN3@Inside:

; 1583 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00015	32 c0		 xor	 al, al

; 1584 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?_Inside@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IBE_NPBU?$pair@MUTFlyVertexSet@@@2@@Z ENDP ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IBEII@Z PROC ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Grow_to, COMDAT
; _this$ = ecx

; 1571 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1010 : 		return (this->_Myend - this->_Myfirst);

  00004	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00007	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  0000c	2b 31		 sub	 esi, DWORD PTR [ecx]
  0000e	f7 ee		 imul	 esi

; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00010	b8 91 cf ba 01	 mov	 eax, 29020049		; 01bacf91H

; 1010 : 		return (this->_Myend - this->_Myfirst);

  00015	03 d6		 add	 edx, esi
  00017	c1 fa 07	 sar	 edx, 7
  0001a	8b f2		 mov	 esi, edx
  0001c	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0001f	03 f2		 add	 esi, edx

; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00021	8b ce		 mov	 ecx, esi
  00023	d1 e9		 shr	 ecx, 1
  00025	2b c1		 sub	 eax, ecx
  00027	3b c6		 cmp	 eax, esi
  00029	73 10		 jae	 SHORT $LN4@Grow_to
  0002b	33 f6		 xor	 esi, esi

; 1576 : 		if (_Capacity < _Count)

  0002d	3b 75 08	 cmp	 esi, DWORD PTR __Count$[ebp]
  00030	0f 42 75 08	 cmovb	 esi, DWORD PTR __Count$[ebp]

; 1577 : 			_Capacity = _Count;
; 1578 : 		return (_Capacity);

  00034	8b c6		 mov	 eax, esi
  00036	5e		 pop	 esi

; 1579 : 		}

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
$LN4@Grow_to:

; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0003b	03 f1		 add	 esi, ecx

; 1576 : 		if (_Capacity < _Count)

  0003d	3b 75 08	 cmp	 esi, DWORD PTR __Count$[ebp]
  00040	0f 42 75 08	 cmovb	 esi, DWORD PTR __Count$[ebp]

; 1577 : 			_Capacity = _Count;
; 1578 : 		return (_Capacity);

  00044	8b c6		 mov	 eax, esi
  00046	5e		 pop	 esi

; 1579 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?_Grow_to@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IBEII@Z ENDP ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Destroy@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IAEXPAU?$pair@MUTFlyVertexSet@@@2@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IAEXPAU?$pair@MUTFlyVertexSet@@@2@0@Z PROC ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Destroy, COMDAT
; _this$ = ecx

; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IAEXPAU?$pair@MUTFlyVertexSet@@@2@0@Z ENDP ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?max_size@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::max_size, COMDAT
; _this$ = ecx

; 1153 : 		return (this->_Getal().max_size());

  00000	b8 91 cf ba 01	 mov	 eax, 29020049		; 01bacf91H

; 1154 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?size@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::size, COMDAT
; _this$ = ecx

; 1147 : 		{	// return length of sequence

  00000	56		 push	 esi

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00001	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00004	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00009	2b 31		 sub	 esi, DWORD PTR [ecx]
  0000b	f7 ee		 imul	 esi
  0000d	03 d6		 add	 edx, esi
  0000f	c1 fa 07	 sar	 edx, 7
  00012	8b c2		 mov	 eax, edx
  00014	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00017	03 c2		 add	 eax, edx
  00019	5e		 pop	 esi

; 1149 : 		}

  0001a	c3		 ret	 0
?size@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?end@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@2@XZ PROC ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::end, COMDAT
; _this$ = ecx

; 1034 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 		{	// construct with pointer _Parg

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 1035 : 		return (iterator(this->_Mylast, this));
; 1036 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@2@XZ ENDP ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?begin@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@2@XZ PROC ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::begin, COMDAT
; _this$ = ecx

; 1024 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 		{	// construct with pointer _Parg

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1025 : 		return (iterator(this->_Myfirst, this));
; 1026 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@2@XZ ENDP ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Unused_capacity, COMDAT
; _this$ = ecx

; 1014 : 		{	// micro-optimization for capacity() - size()

  00000	56		 push	 esi

; 1015 : 		return (this->_Myend - this->_Mylast);

  00001	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00004	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00009	2b 71 04	 sub	 esi, DWORD PTR [ecx+4]
  0000c	f7 ee		 imul	 esi
  0000e	03 d6		 add	 edx, esi
  00010	c1 fa 07	 sar	 edx, 7
  00013	8b c2		 mov	 eax, edx
  00015	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00018	03 c2		 add	 eax, edx
  0001a	5e		 pop	 esi

; 1016 : 		}

  0001b	c3		 ret	 0
?_Unused_capacity@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?capacity@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::capacity, COMDAT
; _this$ = ecx

; 1009 : 		{	// return current length of allocated storage

  00000	56		 push	 esi

; 1010 : 		return (this->_Myend - this->_Myfirst);

  00001	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00004	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00009	2b 31		 sub	 esi, DWORD PTR [ecx]
  0000b	f7 ee		 imul	 esi
  0000d	03 d6		 add	 edx, esi
  0000f	c1 fa 07	 sar	 edx, 7
  00012	8b c2		 mov	 eax, edx
  00014	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00017	03 c2		 add	 eax, edx
  00019	5e		 pop	 esi

; 1011 : 		}

  0001a	c3		 ret	 0
?capacity@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
;	COMDAT ??1?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::~vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >, COMDAT
; _this$ = ecx

; 944  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 947  : 
; 948  : 	_Myt& operator=(const _Myt& _Right)
; 949  : 		{	// assign _Right
; 950  : 		if (this != &_Right)
; 951  : 			{	// different, assign it
; 952  : 			if (this->_Getal() != _Right._Getal()
; 953  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 954  : 				{	// change allocator before copying
; 955  : 				_Tidy();
; 956  : 				this->_Change_alloc(_Right._Getal());
; 957  : 				}
; 958  : 
; 959  : 			this->_Orphan_all();
; 960  : 
; 961  : 			if (_Right.empty())
; 962  : 				clear();	// new sequence empty, erase existing sequence
; 963  : 			else if (_Right.size() <= size())
; 964  : 				{	// enough elements, copy new and destroy old
; 965  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst,
; 966  : 					_Right._Mylast, this->_Myfirst);	// copy new
; 967  : 				_Destroy(_Ptr, this->_Mylast);	// destroy old
; 968  : 				this->_Mylast = this->_Myfirst + _Right.size();
; 969  : 				}
; 970  : 			else if (_Right.size() <= capacity())
; 971  : 				{	// enough room, copy and construct new
; 972  : 				pointer _Ptr = _Right._Myfirst + size();
; 973  : 				_Copy_impl(_Right._Myfirst,
; 974  : 					_Ptr, this->_Myfirst);
; 975  : 				this->_Mylast = _Ucopy(_Ptr, _Right._Mylast, this->_Mylast);
; 976  : 				}
; 977  : 			else
; 978  : 				{	// not enough room, allocate new array and construct new
; 979  : 				if (this->_Myfirst != pointer())
; 980  : 					{	// discard old array
; 981  : 					_Destroy(this->_Myfirst, this->_Mylast);
; 982  : 					this->_Getal().deallocate(this->_Myfirst,
; 983  : 						this->_Myend - this->_Myfirst);
; 984  : 					}
; 985  : 				if (_Buy(_Right.size()))
; 986  : 					_TRY_BEGIN
; 987  : 					this->_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 988  : 						this->_Myfirst);
; 989  : 					_CATCH_ALL
; 990  : 					_Tidy();
; 991  : 					_RERAISE;
; 992  : 					_CATCH_END
; 993  : 				}
; 994  : 			}
; 995  : 		return (*this);
; 996  : 		}
; 997  : 
; 998  : 	void reserve(size_type _Count)
; 999  : 		{	// determine new minimum length of allocated storage
; 1000 : 		if (capacity() < _Count)
; 1001 : 			{	// something to do, check and reallocate
; 1002 : 			if (max_size() < _Count)
; 1003 : 				_Xlen();
; 1004 : 			_Reallocate(_Count);
; 1005 : 			}
; 1006 : 		}
; 1007 : 
; 1008 : 	size_type capacity() const _NOEXCEPT
; 1009 : 		{	// return current length of allocated storage
; 1010 : 		return (this->_Myend - this->_Myfirst);
; 1011 : 		}
; 1012 : 
; 1013 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1014 : 		{	// micro-optimization for capacity() - size()
; 1015 : 		return (this->_Myend - this->_Mylast);
; 1016 : 		}
; 1017 : 
; 1018 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1019 : 		{	// micro-optimization for capacity() != size()
; 1020 : 		return (this->_Myend != this->_Mylast);
; 1021 : 		}
; 1022 : 
; 1023 : 	iterator begin() _NOEXCEPT
; 1024 : 		{	// return iterator for beginning of mutable sequence
; 1025 : 		return (iterator(this->_Myfirst, this));
; 1026 : 		}
; 1027 : 
; 1028 : 	const_iterator begin() const _NOEXCEPT
; 1029 : 		{	// return iterator for beginning of nonmutable sequence
; 1030 : 		return (const_iterator(this->_Myfirst, this));
; 1031 : 		}
; 1032 : 
; 1033 : 	iterator end() _NOEXCEPT
; 1034 : 		{	// return iterator for end of mutable sequence
; 1035 : 		return (iterator(this->_Mylast, this));
; 1036 : 		}
; 1037 : 
; 1038 : 	const_iterator end() const _NOEXCEPT
; 1039 : 		{	// return iterator for end of nonmutable sequence
; 1040 : 		return (const_iterator(this->_Mylast, this));
; 1041 : 		}
; 1042 : 
; 1043 : 	iterator _Make_iter(const_iterator _Where) const
; 1044 : 		{	// make iterator from const_iterator
; 1045 : 		return (iterator(_Where._Ptr, this));
; 1046 : 		}
; 1047 : 
; 1048 : 	reverse_iterator rbegin() _NOEXCEPT
; 1049 : 		{	// return iterator for beginning of reversed mutable sequence
; 1050 : 		return (reverse_iterator(end()));
; 1051 : 		}
; 1052 : 
; 1053 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1054 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1055 : 		return (const_reverse_iterator(end()));
; 1056 : 		}
; 1057 : 
; 1058 : 	reverse_iterator rend() _NOEXCEPT
; 1059 : 		{	// return iterator for end of reversed mutable sequence
; 1060 : 		return (reverse_iterator(begin()));
; 1061 : 		}
; 1062 : 
; 1063 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1064 : 		{	// return iterator for end of reversed nonmutable sequence
; 1065 : 		return (const_reverse_iterator(begin()));
; 1066 : 		}
; 1067 : 
; 1068 : 	const_iterator cbegin() const _NOEXCEPT
; 1069 : 		{	// return iterator for beginning of nonmutable sequence
; 1070 : 		return (((const _Myt *)this)->begin());
; 1071 : 		}
; 1072 : 
; 1073 : 	const_iterator cend() const _NOEXCEPT
; 1074 : 		{	// return iterator for end of nonmutable sequence
; 1075 : 		return (((const _Myt *)this)->end());
; 1076 : 		}
; 1077 : 
; 1078 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1079 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1080 : 		return (((const _Myt *)this)->rbegin());
; 1081 : 		}
; 1082 : 
; 1083 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1084 : 		{	// return iterator for end of reversed nonmutable sequence
; 1085 : 		return (((const _Myt *)this)->rend());
; 1086 : 		}
; 1087 : 
; 1088 : 	void shrink_to_fit()
; 1089 : 		{	// reduce capacity
; 1090 : 		if (_Has_unused_capacity())
; 1091 : 			{	// worth shrinking, do it
; 1092 : 			if (empty())
; 1093 : 				_Tidy();
; 1094 : 			else
; 1095 : 				_Reallocate(size());
; 1096 : 			}
; 1097 : 		}
; 1098 : 
; 1099 : 	void resize(size_type _Newsize)
; 1100 : 		{	// determine new length, padding as needed
; 1101 : 		if (_Newsize < size())
; 1102 : 			_Pop_back_n(size() - _Newsize);
; 1103 : 		else if (size() < _Newsize)
; 1104 : 			{	// pad as needed
; 1105 : 			_Alty _Alval(this->_Getal());
; 1106 : 			_Reserve(_Newsize - size());
; 1107 : 			_TRY_BEGIN
; 1108 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1109 : 				_Alval);
; 1110 : 			_CATCH_ALL
; 1111 : 			_Tidy();
; 1112 : 			_RERAISE;
; 1113 : 			_CATCH_END
; 1114 : 			this->_Mylast += _Newsize - size();
; 1115 : 			}
; 1116 : 		}
; 1117 : 
; 1118 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1119 : 		{	// determine new length, padding with _Val elements as needed
; 1120 : 		if (_Newsize < size())
; 1121 : 			_Pop_back_n(size() - _Newsize);
; 1122 : 		else if (size() < _Newsize)
; 1123 : 			{	// pad as needed
; 1124 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1125 : 
; 1126 : 			if (_Inside(_Ptr))
; 1127 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1128 : 				const difference_type _Idx = _Ptr
; 1129 : 					- _STD addressof(*this->_Myfirst);
; 1130 : 				_Reserve(_Newsize - size());
; 1131 : 				_Ptr = _STD addressof(*this->_Myfirst) + _Idx;
; 1132 : 				}
; 1133 : 			else
; 1134 : 				_Reserve(_Newsize - size());
; 1135 : 
; 1136 : 			_TRY_BEGIN
; 1137 : 			_Ufill(this->_Mylast, _Newsize - size(), _Ptr);
; 1138 : 			_CATCH_ALL
; 1139 : 			_Tidy();
; 1140 : 			_RERAISE;
; 1141 : 			_CATCH_END
; 1142 : 			this->_Mylast += _Newsize - size();
; 1143 : 			}
; 1144 : 		}
; 1145 : 
; 1146 : 	size_type size() const _NOEXCEPT
; 1147 : 		{	// return length of sequence
; 1148 : 		return (this->_Mylast - this->_Myfirst);
; 1149 : 		}
; 1150 : 
; 1151 : 	size_type max_size() const _NOEXCEPT
; 1152 : 		{	// return maximum possible length of sequence
; 1153 : 		return (this->_Getal().max_size());
; 1154 : 		}
; 1155 : 
; 1156 : 	bool empty() const _NOEXCEPT
; 1157 : 		{	// test if sequence is empty
; 1158 : 		return (this->_Myfirst == this->_Mylast);
; 1159 : 		}
; 1160 : 
; 1161 : 	_Alloc get_allocator() const _NOEXCEPT
; 1162 : 		{	// return allocator object for values
; 1163 : 		return (this->_Getal());
; 1164 : 		}
; 1165 : 
; 1166 : 	const_reference at(size_type _Pos) const
; 1167 : 		{	// subscript nonmutable sequence with checking
; 1168 : 		if (size() <= _Pos)
; 1169 : 			_Xran();
; 1170 : 		return (*(this->_Myfirst + _Pos));
; 1171 : 		}
; 1172 : 
; 1173 : 	reference at(size_type _Pos)
; 1174 : 		{	// subscript mutable sequence with checking
; 1175 : 		if (size() <= _Pos)
; 1176 : 			_Xran();
; 1177 : 		return (*(this->_Myfirst + _Pos));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reference operator[](size_type _Pos) const
; 1181 : 		{	// subscript nonmutable sequence
; 1182 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1183 : 		if (size() <= _Pos)
; 1184 : 			{	// report error
; 1185 : 			_DEBUG_ERROR("vector subscript out of range");
; 1186 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1187 : 			}
; 1188 : 
; 1189 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1190 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1191 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1192 : 
; 1193 : 		return (*(this->_Myfirst + _Pos));
; 1194 : 		}
; 1195 : 
; 1196 : 	reference operator[](size_type _Pos)
; 1197 : 		{	// subscript mutable sequence
; 1198 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1199 : 		if (size() <= _Pos)
; 1200 : 			{	// report error
; 1201 : 			_DEBUG_ERROR("vector subscript out of range");
; 1202 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1203 : 			}
; 1204 : 
; 1205 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1206 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1207 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1208 : 
; 1209 : 		return (*(this->_Myfirst + _Pos));
; 1210 : 		}
; 1211 : 
; 1212 : 	pointer data() _NOEXCEPT
; 1213 : 		{	// return address of first element
; 1214 : 		return (this->_Myfirst);
; 1215 : 		}
; 1216 : 
; 1217 : 	const_pointer data() const _NOEXCEPT
; 1218 : 		{	// return address of first element
; 1219 : 		return (this->_Myfirst);
; 1220 : 		}
; 1221 : 
; 1222 : 	reference front()
; 1223 : 		{	// return first element of mutable sequence
; 1224 : 		return (*begin());
; 1225 : 		}
; 1226 : 
; 1227 : 	const_reference front() const
; 1228 : 		{	// return first element of nonmutable sequence
; 1229 : 		return (*begin());
; 1230 : 		}
; 1231 : 
; 1232 : 	reference back()
; 1233 : 		{	// return last element of mutable sequence
; 1234 : 		return (*(end() - 1));
; 1235 : 		}
; 1236 : 
; 1237 : 	const_reference back() const
; 1238 : 		{	// return last element of nonmutable sequence
; 1239 : 		return (*(end() - 1));
; 1240 : 		}
; 1241 : 
; 1242 : 	void push_back(const value_type& _Val)
; 1243 : 		{	// insert element at end
; 1244 : 		if (_Inside(_STD addressof(_Val)))
; 1245 : 			{	// push back an element
; 1246 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1247 : 			if (this->_Mylast == this->_Myend)
; 1248 : 				_Reserve(1);
; 1249 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1250 : 			this->_Getal().construct(this->_Mylast,
; 1251 : 				this->_Myfirst[_Idx]);
; 1252 : 			++this->_Mylast;
; 1253 : 			}
; 1254 : 		else
; 1255 : 			{	// push back a non-element
; 1256 : 			if (this->_Mylast == this->_Myend)
; 1257 : 				_Reserve(1);
; 1258 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1259 : 			this->_Getal().construct(this->_Mylast,
; 1260 : 				_Val);
; 1261 : 			++this->_Mylast;
; 1262 : 			}
; 1263 : 		}
; 1264 : 
; 1265 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1266 : 	void pop_back()
; 1267 : 		{	// erase element at end
; 1268 : 		if (empty())
; 1269 : 			_DEBUG_ERROR("vector empty before pop");
; 1270 : 		else
; 1271 : 			{	// erase last element
; 1272 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1273 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1274 : 			--this->_Mylast;
; 1275 : 			}
; 1276 : 		}
; 1277 : 
; 1278 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1279 : 	void pop_back()
; 1280 : 		{	// erase element at end
; 1281 : 		this->_Getal().destroy(this->_Mylast - 1);
; 1282 : 		--this->_Mylast;
; 1283 : 		}
; 1284 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1285 : 
; 1286 : 	template<class _Iter>
; 1287 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1288 : 			void>::type
; 1289 : 		assign(_Iter _First, _Iter _Last)
; 1290 : 		{	// assign [_First, _Last)
; 1291 : 		clear();
; 1292 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1293 : 		}
; 1294 : 
; 1295 : 	template<class _Iter>
; 1296 : 		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
; 1297 : 		{	// assign [_First, _Last), input iterators
; 1298 : 		for (; _First != _Last; ++_First)
; 1299 : 			emplace_back(*_First);
; 1300 : 		}
; 1301 : 
; 1302 : 	template<class _Iter>
; 1303 : 		void _Assign(_Iter _First, _Iter _Last, forward_iterator_tag)
; 1304 : 		{	// assign [_First, _Last), forward iterators
; 1305 : 		if (_First == _Last)
; 1306 : 			return;	// nothing to do
; 1307 : 
; 1308 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1309 : 
; 1310 : 		if (capacity() < _Newsize)
; 1311 : 			{	// need more room, try to get it
; 1312 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1313 : 			_Tidy();
; 1314 : 			_Buy(_Newcapacity);
; 1315 : 			}
; 1316 : 
; 1317 : 		this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
; 1318 : 		}
; 1319 : 
; 1320 : 	void assign(size_type _Count, const value_type& _Val)
; 1321 : 		{	// assign _Count * _Val
; 1322 : 		clear();
; 1323 : 		insert(begin(), _Count, _Val);
; 1324 : 		}
; 1325 : 
; 1326 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1327 : 		{	// insert _Val at _Where
; 1328 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1329 : 		}
; 1330 : 
; 1331 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1332 : 		const _Ty& _Val)
; 1333 : 		{	// insert _Count * _Val at _Where
; 1334 : 		return (_Insert_n(_Where, _Count, _Val));
; 1335 : 		}
; 1336 : 
; 1337 : 	template<class _Iter>
; 1338 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1339 : 			iterator>::type
; 1340 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1341 : 		{	// insert [_First, _Last) at _Where
; 1342 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1343 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1344 : 		return (begin() + _Off);
; 1345 : 		}
; 1346 : 
; 1347 : 	template<class _Iter>
; 1348 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1349 : 			input_iterator_tag)
; 1350 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1351 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1352 : 
; 1353 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1354 : 		if (size() < _Off)
; 1355 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1356 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1357 : 
; 1358 : 		if (_First != _Last)
; 1359 : 			{	// worth doing, gather at end and rotate into place
; 1360 : 			size_type _Oldsize = size();
; 1361 : 
; 1362 : 			_TRY_BEGIN
; 1363 : 			for (; _First != _Last; ++_First)
; 1364 : 				push_back(*_First);	// append
; 1365 : 
; 1366 : 			_CATCH_ALL
; 1367 : 			erase(begin() + _Oldsize, end());
; 1368 : 			_RERAISE;
; 1369 : 			_CATCH_END
; 1370 : 
; 1371 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1372 : 			}
; 1373 : 		}
; 1374 : 
; 1375 : 	template<class _Iter>
; 1376 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1377 : 			forward_iterator_tag)
; 1378 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_VICONT(_Where) != this
; 1381 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1382 : 			|| this->_Mylast < _VIPTR(_Where))
; 1383 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1384 : 		_DEBUG_RANGE(_First, _Last);
; 1385 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1386 : 
; 1387 : 		size_type _Count = 0;
; 1388 : 		_Distance(_First, _Last, _Count);
; 1389 : 
; 1390 : 		if (_Count == 0)
; 1391 : 			;
; 1392 : 		else if (_Unused_capacity() < _Count)
; 1393 : 			{	// not enough room, reallocate
; 1394 : 			if (max_size() - size() < _Count)
; 1395 : 				_Xlen();	// result too long
; 1396 : 
; 1397 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1398 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1399 : 			pointer _Ptr = _Newvec;
; 1400 : 
; 1401 : 			_TRY_BEGIN
; 1402 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1403 : 				_Newvec);	// copy prefix
; 1404 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1405 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1406 : 				_Ptr);	// copy suffix
; 1407 : 			_CATCH_ALL
; 1408 : 			_Destroy(_Newvec, _Ptr);
; 1409 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1410 : 			_RERAISE;
; 1411 : 			_CATCH_END
; 1412 : 
; 1413 : 			_Count += size();
; 1414 : 			if (this->_Myfirst != pointer())
; 1415 : 				{	// destroy and deallocate old array
; 1416 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1417 : 				this->_Getal().deallocate(this->_Myfirst,
; 1418 : 					this->_Myend - this->_Myfirst);
; 1419 : 				}
; 1420 : 
; 1421 : 			this->_Orphan_all();
; 1422 : 			this->_Myend = _Newvec + _Capacity;
; 1423 : 			this->_Mylast = _Newvec + _Count;
; 1424 : 			this->_Myfirst = _Newvec;
; 1425 : 			}
; 1426 : 		else
; 1427 : 			{	// new stuff fits, append and rotate into place
; 1428 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1429 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1430 : 				this->_Mylast + _Count);
; 1431 : 			this->_Mylast += _Count;
; 1432 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1433 : 			}
; 1434 : 		}
; 1435 : 
; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 	iterator erase(const_iterator _Where)
; 1438 : 		{	// erase element at where
; 1439 : 		if (_VICONT(_Where) != this
; 1440 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1441 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1442 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1443 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1444 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1445 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1446 : 		--this->_Mylast;
; 1447 : 		return (_Make_iter(_Where));
; 1448 : 		}
; 1449 : 
; 1450 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 	iterator erase(const_iterator _Where)
; 1452 : 		{	// erase element at where
; 1453 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1454 : 			_VIPTR(_Where));
; 1455 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1456 : 		--this->_Mylast;
; 1457 : 		return (_Make_iter(_Where));
; 1458 : 		}
; 1459 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1460 : 
; 1461 : 	iterator erase(const_iterator _First_arg,
; 1462 : 		const_iterator _Last_arg)
; 1463 : 		{	// erase [_First, _Last)
; 1464 : 		if (_First_arg == begin() && _Last_arg == end())
; 1465 : 			clear();
; 1466 : 		else if (_First_arg != _Last_arg)
; 1467 : 			{	// clear partial
; 1468 : 			iterator _First = _Make_iter(_First_arg);
; 1469 : 			iterator _Last = _Make_iter(_Last_arg);
; 1470 : 
; 1471 : 			if (_First != _Last)
; 1472 : 				{	// worth doing, copy down over hole
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 				if (_Last < _First || _VICONT(_First) != this
; 1475 : 					|| _VIPTR(_First) < this->_Myfirst
; 1476 : 					|| this->_Mylast < _VIPTR(_Last))
; 1477 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1478 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1479 : 					_VIPTR(_First));
; 1480 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1484 : 					_VIPTR(_First));
; 1485 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1486 : 
; 1487 : 				_Destroy(_Ptr, this->_Mylast);
; 1488 : 				this->_Mylast = _Ptr;
; 1489 : 				}
; 1490 : 			}
; 1491 : 		return (_Make_iter(_First_arg));
; 1492 : 		}
; 1493 : 
; 1494 : 	void _Pop_back_n(size_type _Count)
; 1495 : 		{	// erase _Count elements at end
; 1496 : 		pointer _Ptr = this->_Mylast - _Count;
; 1497 : 
; 1498 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1499 : 		_Orphan_range(_Ptr, this->_Mylast);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 
; 1502 : 		_Destroy(_Ptr, this->_Mylast);
; 1503 : 		this->_Mylast = _Ptr;
; 1504 : 		}
; 1505 : 
; 1506 : 	void clear() _NOEXCEPT
; 1507 : 		{	// erase all
; 1508 : 		this->_Orphan_all();
; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1510 : 		this->_Mylast = this->_Myfirst;
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		{	// exchange contents with _Right
; 1515 : 		if (this == &_Right)
; 1516 : 			;	// same object, do nothing
; 1517 : 		else if (this->_Getal() == _Right._Getal())
; 1518 : 			{	// same allocator, swap control information
; 1519 : 			this->_Swap_all(_Right);
; 1520 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1521 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1522 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1529 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1530 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1531 : 			}
; 1532 : 
; 1533 : 		else
; 1534 : 			{	// containers are incompatible
; 1535 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1536 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1537 : 
; 1538 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1539 : 			_XSTD terminate();
; 1540 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1541 : 			}
; 1542 : 		}
; 1543 : 
; 1544 : protected:
; 1545 : 	bool _Buy(size_type _Capacity)
; 1546 : 		{	// allocate array with _Capacity elements
; 1547 : 		this->_Myfirst = pointer();
; 1548 : 		this->_Mylast = pointer();
; 1549 : 		this->_Myend = pointer();
; 1550 : 
; 1551 : 		if (_Capacity == 0)
; 1552 : 			return (false);
; 1553 : 		else if (max_size() < _Capacity)
; 1554 : 			_Xlen();	// result too long
; 1555 : 		else
; 1556 : 			{	// nonempty array, allocate storage
; 1557 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1558 : 			this->_Mylast = this->_Myfirst;
; 1559 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1560 : 			}
; 1561 : 		return (true);
; 1562 : 		}
; 1563 : 
; 1564 : 	void _Destroy(pointer _First, pointer _Last)
; 1565 : 		{	// destroy [_First, _Last) using allocator
; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}
; 1569 : 
; 1570 : 	size_type _Grow_to(size_type _Count) const
; 1571 : 		{	// grow by 50% or at least to _Count
; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1576 : 		if (_Capacity < _Count)
; 1577 : 			_Capacity = _Count;
; 1578 : 		return (_Capacity);
; 1579 : 		}
; 1580 : 
; 1581 : 	bool _Inside(const value_type *_Ptr) const
; 1582 : 		{	// test if _Ptr points inside vector
; 1583 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);
; 1584 : 		}
; 1585 : 
; 1586 : 	void _Reallocate(size_type _Count)
; 1587 : 		{	// move to array of exactly _Count elements
; 1588 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1589 : 
; 1590 : 		_TRY_BEGIN
; 1591 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);
; 1592 : 		_CATCH_ALL
; 1593 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1594 : 		_RERAISE;
; 1595 : 		_CATCH_END
; 1596 : 
; 1597 : 		size_type _Size = size();
; 1598 : 		if (this->_Myfirst != pointer())
; 1599 : 			{	// destroy and deallocate old array
; 1600 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1601 : 			this->_Getal().deallocate(this->_Myfirst,
; 1602 : 				this->_Myend - this->_Myfirst);
; 1603 : 			}
; 1604 : 
; 1605 : 		this->_Orphan_all();
; 1606 : 		this->_Myend = _Ptr + _Count;
; 1607 : 		this->_Mylast = _Ptr + _Size;
; 1608 : 		this->_Myfirst = _Ptr;
; 1609 : 		}
; 1610 : 
; 1611 : 	void _Reserve(size_type _Count)
; 1612 : 		{	// ensure room for _Count new elements, grow exponentially
; 1613 : 		if (_Unused_capacity() < _Count)
; 1614 : 			{	// need more room, try to get it
; 1615 : 			if (max_size() - size() < _Count)
; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));
; 1618 : 			}
; 1619 : 		}
; 1620 : 
; 1621 : 	void _Tidy()
; 1622 : 		{	// free all storage
; 1623 : 		if (this->_Myfirst != pointer())

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 1d		 je	 SHORT $LN3@vector
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
; File a:\vs\vc\include\vector

; 1629 : 			this->_Myfirst = pointer();

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1630 : 			this->_Mylast = pointer();

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1631 : 			this->_Myend = pointer();

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN3@vector:
  00026	5e		 pop	 esi

; 945  : 		_Tidy();
; 946  : 		}

  00027	c3		 ret	 0
??1?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::~vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\vector
;	COMDAT ?push_back@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAEX$$QAU?$pair@MUTFlyVertexSet@@@2@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAEX$$QAU?$pair@MUTFlyVertexSet@@@2@@Z PROC ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::push_back, COMDAT
; _this$ = ecx

; 865  : 		{	// insert by moving into element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx
  00006	56		 push	 esi

; 886  : 
; 887  : 	iterator insert(const_iterator _Where, _Ty&& _Val)
; 888  : 		{	// insert by moving _Val at _Where
; 889  : 		return (emplace(_Where, _STD move(_Val)));
; 890  : 		}
; 891  : 
; 892  : 	template<class... _Valty>
; 893  : 		void emplace_back(_Valty&&... _Val)
; 894  : 		{	// insert by moving into element at end
; 895  : 		if (this->_Mylast == this->_Myend)
; 896  : 			_Reserve(1);
; 897  : 		_Orphan_range(this->_Mylast, this->_Mylast);
; 898  : 		this->_Getal().construct(this->_Mylast,
; 899  : 			_STD forward<_Valty>(_Val)...);
; 900  : 		++this->_Mylast;
; 901  : 		}
; 902  : 
; 903  : 	template<class... _Valty>
; 904  : 		iterator emplace(const_iterator _Where, _Valty&&... _Val)
; 905  : 		{	// insert by moving _Val at _Where
; 906  : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 907  : 
; 908  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 909  : 		if (size() < _Off)
; 910  : 			_DEBUG_ERROR("vector emplace iterator outside range");
; 911  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 912  : 
; 913  : 		emplace_back(_STD forward<_Valty>(_Val)...);
; 914  : 		_STD rotate(begin() + _Off, end() - 1, end());
; 915  : 		return (begin() + _Off);
; 916  : 		}
; 917  : 
; 918  : 
; 919  : 	vector(_XSTD initializer_list<value_type> _Ilist,
; 920  : 		const _Alloc& _Al = allocator_type())
; 921  : 		: _Mybase(_Al)
; 922  : 		{	// construct from initializer_list
; 923  : 		insert(begin(), _Ilist.begin(), _Ilist.end());
; 924  : 		}
; 925  : 
; 926  : 	_Myt& operator=(_XSTD initializer_list<value_type> _Ilist)
; 927  : 		{	// assign initializer_list
; 928  : 		assign(_Ilist.begin(), _Ilist.end());
; 929  : 		return (*this);
; 930  : 		}
; 931  : 
; 932  : 	void assign(_XSTD initializer_list<value_type> _Ilist)
; 933  : 		{	// assign initializer_list
; 934  : 		assign(_Ilist.begin(), _Ilist.end());
; 935  : 		}
; 936  : 
; 937  : 	iterator insert(const_iterator _Where,
; 938  : 		_XSTD initializer_list<value_type> _Ilist)
; 939  : 		{	// insert initializer_list
; 940  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 941  : 		}
; 942  : 
; 943  : 	~vector() _NOEXCEPT
; 944  : 		{	// destroy the object
; 945  : 		_Tidy();
; 946  : 		}
; 947  : 
; 948  : 	_Myt& operator=(const _Myt& _Right)
; 949  : 		{	// assign _Right
; 950  : 		if (this != &_Right)
; 951  : 			{	// different, assign it
; 952  : 			if (this->_Getal() != _Right._Getal()
; 953  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 954  : 				{	// change allocator before copying
; 955  : 				_Tidy();
; 956  : 				this->_Change_alloc(_Right._Getal());
; 957  : 				}
; 958  : 
; 959  : 			this->_Orphan_all();
; 960  : 
; 961  : 			if (_Right.empty())
; 962  : 				clear();	// new sequence empty, erase existing sequence
; 963  : 			else if (_Right.size() <= size())
; 964  : 				{	// enough elements, copy new and destroy old
; 965  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst,
; 966  : 					_Right._Mylast, this->_Myfirst);	// copy new
; 967  : 				_Destroy(_Ptr, this->_Mylast);	// destroy old
; 968  : 				this->_Mylast = this->_Myfirst + _Right.size();
; 969  : 				}
; 970  : 			else if (_Right.size() <= capacity())
; 971  : 				{	// enough room, copy and construct new
; 972  : 				pointer _Ptr = _Right._Myfirst + size();
; 973  : 				_Copy_impl(_Right._Myfirst,
; 974  : 					_Ptr, this->_Myfirst);
; 975  : 				this->_Mylast = _Ucopy(_Ptr, _Right._Mylast, this->_Mylast);
; 976  : 				}
; 977  : 			else
; 978  : 				{	// not enough room, allocate new array and construct new
; 979  : 				if (this->_Myfirst != pointer())
; 980  : 					{	// discard old array
; 981  : 					_Destroy(this->_Myfirst, this->_Mylast);
; 982  : 					this->_Getal().deallocate(this->_Myfirst,
; 983  : 						this->_Myend - this->_Myfirst);
; 984  : 					}
; 985  : 				if (_Buy(_Right.size()))
; 986  : 					_TRY_BEGIN
; 987  : 					this->_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 988  : 						this->_Myfirst);
; 989  : 					_CATCH_ALL
; 990  : 					_Tidy();
; 991  : 					_RERAISE;
; 992  : 					_CATCH_END
; 993  : 				}
; 994  : 			}
; 995  : 		return (*this);
; 996  : 		}
; 997  : 
; 998  : 	void reserve(size_type _Count)
; 999  : 		{	// determine new minimum length of allocated storage
; 1000 : 		if (capacity() < _Count)
; 1001 : 			{	// something to do, check and reallocate
; 1002 : 			if (max_size() < _Count)
; 1003 : 				_Xlen();
; 1004 : 			_Reallocate(_Count);
; 1005 : 			}
; 1006 : 		}
; 1007 : 
; 1008 : 	size_type capacity() const _NOEXCEPT
; 1009 : 		{	// return current length of allocated storage
; 1010 : 		return (this->_Myend - this->_Myfirst);
; 1011 : 		}
; 1012 : 
; 1013 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1014 : 		{	// micro-optimization for capacity() - size()
; 1015 : 		return (this->_Myend - this->_Mylast);
; 1016 : 		}
; 1017 : 
; 1018 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1019 : 		{	// micro-optimization for capacity() != size()
; 1020 : 		return (this->_Myend != this->_Mylast);
; 1021 : 		}
; 1022 : 
; 1023 : 	iterator begin() _NOEXCEPT
; 1024 : 		{	// return iterator for beginning of mutable sequence
; 1025 : 		return (iterator(this->_Myfirst, this));
; 1026 : 		}
; 1027 : 
; 1028 : 	const_iterator begin() const _NOEXCEPT
; 1029 : 		{	// return iterator for beginning of nonmutable sequence
; 1030 : 		return (const_iterator(this->_Myfirst, this));
; 1031 : 		}
; 1032 : 
; 1033 : 	iterator end() _NOEXCEPT
; 1034 : 		{	// return iterator for end of mutable sequence
; 1035 : 		return (iterator(this->_Mylast, this));
; 1036 : 		}
; 1037 : 
; 1038 : 	const_iterator end() const _NOEXCEPT
; 1039 : 		{	// return iterator for end of nonmutable sequence
; 1040 : 		return (const_iterator(this->_Mylast, this));
; 1041 : 		}
; 1042 : 
; 1043 : 	iterator _Make_iter(const_iterator _Where) const
; 1044 : 		{	// make iterator from const_iterator
; 1045 : 		return (iterator(_Where._Ptr, this));
; 1046 : 		}
; 1047 : 
; 1048 : 	reverse_iterator rbegin() _NOEXCEPT
; 1049 : 		{	// return iterator for beginning of reversed mutable sequence
; 1050 : 		return (reverse_iterator(end()));
; 1051 : 		}
; 1052 : 
; 1053 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1054 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1055 : 		return (const_reverse_iterator(end()));
; 1056 : 		}
; 1057 : 
; 1058 : 	reverse_iterator rend() _NOEXCEPT
; 1059 : 		{	// return iterator for end of reversed mutable sequence
; 1060 : 		return (reverse_iterator(begin()));
; 1061 : 		}
; 1062 : 
; 1063 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1064 : 		{	// return iterator for end of reversed nonmutable sequence
; 1065 : 		return (const_reverse_iterator(begin()));
; 1066 : 		}
; 1067 : 
; 1068 : 	const_iterator cbegin() const _NOEXCEPT
; 1069 : 		{	// return iterator for beginning of nonmutable sequence
; 1070 : 		return (((const _Myt *)this)->begin());
; 1071 : 		}
; 1072 : 
; 1073 : 	const_iterator cend() const _NOEXCEPT
; 1074 : 		{	// return iterator for end of nonmutable sequence
; 1075 : 		return (((const _Myt *)this)->end());
; 1076 : 		}
; 1077 : 
; 1078 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1079 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1080 : 		return (((const _Myt *)this)->rbegin());
; 1081 : 		}
; 1082 : 
; 1083 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1084 : 		{	// return iterator for end of reversed nonmutable sequence
; 1085 : 		return (((const _Myt *)this)->rend());
; 1086 : 		}
; 1087 : 
; 1088 : 	void shrink_to_fit()
; 1089 : 		{	// reduce capacity
; 1090 : 		if (_Has_unused_capacity())
; 1091 : 			{	// worth shrinking, do it
; 1092 : 			if (empty())
; 1093 : 				_Tidy();
; 1094 : 			else
; 1095 : 				_Reallocate(size());
; 1096 : 			}
; 1097 : 		}
; 1098 : 
; 1099 : 	void resize(size_type _Newsize)
; 1100 : 		{	// determine new length, padding as needed
; 1101 : 		if (_Newsize < size())
; 1102 : 			_Pop_back_n(size() - _Newsize);
; 1103 : 		else if (size() < _Newsize)
; 1104 : 			{	// pad as needed
; 1105 : 			_Alty _Alval(this->_Getal());
; 1106 : 			_Reserve(_Newsize - size());
; 1107 : 			_TRY_BEGIN
; 1108 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1109 : 				_Alval);
; 1110 : 			_CATCH_ALL
; 1111 : 			_Tidy();
; 1112 : 			_RERAISE;
; 1113 : 			_CATCH_END
; 1114 : 			this->_Mylast += _Newsize - size();
; 1115 : 			}
; 1116 : 		}
; 1117 : 
; 1118 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1119 : 		{	// determine new length, padding with _Val elements as needed
; 1120 : 		if (_Newsize < size())
; 1121 : 			_Pop_back_n(size() - _Newsize);
; 1122 : 		else if (size() < _Newsize)
; 1123 : 			{	// pad as needed
; 1124 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1125 : 
; 1126 : 			if (_Inside(_Ptr))
; 1127 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1128 : 				const difference_type _Idx = _Ptr
; 1129 : 					- _STD addressof(*this->_Myfirst);
; 1130 : 				_Reserve(_Newsize - size());
; 1131 : 				_Ptr = _STD addressof(*this->_Myfirst) + _Idx;
; 1132 : 				}
; 1133 : 			else
; 1134 : 				_Reserve(_Newsize - size());
; 1135 : 
; 1136 : 			_TRY_BEGIN
; 1137 : 			_Ufill(this->_Mylast, _Newsize - size(), _Ptr);
; 1138 : 			_CATCH_ALL
; 1139 : 			_Tidy();
; 1140 : 			_RERAISE;
; 1141 : 			_CATCH_END
; 1142 : 			this->_Mylast += _Newsize - size();
; 1143 : 			}
; 1144 : 		}
; 1145 : 
; 1146 : 	size_type size() const _NOEXCEPT
; 1147 : 		{	// return length of sequence
; 1148 : 		return (this->_Mylast - this->_Myfirst);
; 1149 : 		}
; 1150 : 
; 1151 : 	size_type max_size() const _NOEXCEPT
; 1152 : 		{	// return maximum possible length of sequence
; 1153 : 		return (this->_Getal().max_size());
; 1154 : 		}
; 1155 : 
; 1156 : 	bool empty() const _NOEXCEPT
; 1157 : 		{	// test if sequence is empty
; 1158 : 		return (this->_Myfirst == this->_Mylast);
; 1159 : 		}
; 1160 : 
; 1161 : 	_Alloc get_allocator() const _NOEXCEPT
; 1162 : 		{	// return allocator object for values
; 1163 : 		return (this->_Getal());
; 1164 : 		}
; 1165 : 
; 1166 : 	const_reference at(size_type _Pos) const
; 1167 : 		{	// subscript nonmutable sequence with checking
; 1168 : 		if (size() <= _Pos)
; 1169 : 			_Xran();
; 1170 : 		return (*(this->_Myfirst + _Pos));
; 1171 : 		}
; 1172 : 
; 1173 : 	reference at(size_type _Pos)
; 1174 : 		{	// subscript mutable sequence with checking
; 1175 : 		if (size() <= _Pos)
; 1176 : 			_Xran();
; 1177 : 		return (*(this->_Myfirst + _Pos));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reference operator[](size_type _Pos) const
; 1181 : 		{	// subscript nonmutable sequence
; 1182 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1183 : 		if (size() <= _Pos)
; 1184 : 			{	// report error
; 1185 : 			_DEBUG_ERROR("vector subscript out of range");
; 1186 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1187 : 			}
; 1188 : 
; 1189 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1190 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1191 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1192 : 
; 1193 : 		return (*(this->_Myfirst + _Pos));
; 1194 : 		}
; 1195 : 
; 1196 : 	reference operator[](size_type _Pos)
; 1197 : 		{	// subscript mutable sequence
; 1198 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1199 : 		if (size() <= _Pos)
; 1200 : 			{	// report error
; 1201 : 			_DEBUG_ERROR("vector subscript out of range");
; 1202 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1203 : 			}
; 1204 : 
; 1205 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1206 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1207 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1208 : 
; 1209 : 		return (*(this->_Myfirst + _Pos));
; 1210 : 		}
; 1211 : 
; 1212 : 	pointer data() _NOEXCEPT
; 1213 : 		{	// return address of first element
; 1214 : 		return (this->_Myfirst);
; 1215 : 		}
; 1216 : 
; 1217 : 	const_pointer data() const _NOEXCEPT
; 1218 : 		{	// return address of first element
; 1219 : 		return (this->_Myfirst);
; 1220 : 		}
; 1221 : 
; 1222 : 	reference front()
; 1223 : 		{	// return first element of mutable sequence
; 1224 : 		return (*begin());
; 1225 : 		}
; 1226 : 
; 1227 : 	const_reference front() const
; 1228 : 		{	// return first element of nonmutable sequence
; 1229 : 		return (*begin());
; 1230 : 		}
; 1231 : 
; 1232 : 	reference back()
; 1233 : 		{	// return last element of mutable sequence
; 1234 : 		return (*(end() - 1));
; 1235 : 		}
; 1236 : 
; 1237 : 	const_reference back() const
; 1238 : 		{	// return last element of nonmutable sequence
; 1239 : 		return (*(end() - 1));
; 1240 : 		}
; 1241 : 
; 1242 : 	void push_back(const value_type& _Val)
; 1243 : 		{	// insert element at end
; 1244 : 		if (_Inside(_STD addressof(_Val)))
; 1245 : 			{	// push back an element
; 1246 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1247 : 			if (this->_Mylast == this->_Myend)
; 1248 : 				_Reserve(1);
; 1249 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1250 : 			this->_Getal().construct(this->_Mylast,
; 1251 : 				this->_Myfirst[_Idx]);
; 1252 : 			++this->_Mylast;
; 1253 : 			}
; 1254 : 		else
; 1255 : 			{	// push back a non-element
; 1256 : 			if (this->_Mylast == this->_Myend)
; 1257 : 				_Reserve(1);
; 1258 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1259 : 			this->_Getal().construct(this->_Mylast,
; 1260 : 				_Val);
; 1261 : 			++this->_Mylast;
; 1262 : 			}
; 1263 : 		}
; 1264 : 
; 1265 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1266 : 	void pop_back()
; 1267 : 		{	// erase element at end
; 1268 : 		if (empty())
; 1269 : 			_DEBUG_ERROR("vector empty before pop");
; 1270 : 		else
; 1271 : 			{	// erase last element
; 1272 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1273 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1274 : 			--this->_Mylast;
; 1275 : 			}
; 1276 : 		}
; 1277 : 
; 1278 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1279 : 	void pop_back()
; 1280 : 		{	// erase element at end
; 1281 : 		this->_Getal().destroy(this->_Mylast - 1);
; 1282 : 		--this->_Mylast;
; 1283 : 		}
; 1284 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1285 : 
; 1286 : 	template<class _Iter>
; 1287 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1288 : 			void>::type
; 1289 : 		assign(_Iter _First, _Iter _Last)
; 1290 : 		{	// assign [_First, _Last)
; 1291 : 		clear();
; 1292 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1293 : 		}
; 1294 : 
; 1295 : 	template<class _Iter>
; 1296 : 		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
; 1297 : 		{	// assign [_First, _Last), input iterators
; 1298 : 		for (; _First != _Last; ++_First)
; 1299 : 			emplace_back(*_First);
; 1300 : 		}
; 1301 : 
; 1302 : 	template<class _Iter>
; 1303 : 		void _Assign(_Iter _First, _Iter _Last, forward_iterator_tag)
; 1304 : 		{	// assign [_First, _Last), forward iterators
; 1305 : 		if (_First == _Last)
; 1306 : 			return;	// nothing to do
; 1307 : 
; 1308 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1309 : 
; 1310 : 		if (capacity() < _Newsize)
; 1311 : 			{	// need more room, try to get it
; 1312 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1313 : 			_Tidy();
; 1314 : 			_Buy(_Newcapacity);
; 1315 : 			}
; 1316 : 
; 1317 : 		this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
; 1318 : 		}
; 1319 : 
; 1320 : 	void assign(size_type _Count, const value_type& _Val)
; 1321 : 		{	// assign _Count * _Val
; 1322 : 		clear();
; 1323 : 		insert(begin(), _Count, _Val);
; 1324 : 		}
; 1325 : 
; 1326 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1327 : 		{	// insert _Val at _Where
; 1328 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1329 : 		}
; 1330 : 
; 1331 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1332 : 		const _Ty& _Val)
; 1333 : 		{	// insert _Count * _Val at _Where
; 1334 : 		return (_Insert_n(_Where, _Count, _Val));
; 1335 : 		}
; 1336 : 
; 1337 : 	template<class _Iter>
; 1338 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1339 : 			iterator>::type
; 1340 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1341 : 		{	// insert [_First, _Last) at _Where
; 1342 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1343 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1344 : 		return (begin() + _Off);
; 1345 : 		}
; 1346 : 
; 1347 : 	template<class _Iter>
; 1348 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1349 : 			input_iterator_tag)
; 1350 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1351 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1352 : 
; 1353 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1354 : 		if (size() < _Off)
; 1355 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1356 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1357 : 
; 1358 : 		if (_First != _Last)
; 1359 : 			{	// worth doing, gather at end and rotate into place
; 1360 : 			size_type _Oldsize = size();
; 1361 : 
; 1362 : 			_TRY_BEGIN
; 1363 : 			for (; _First != _Last; ++_First)
; 1364 : 				push_back(*_First);	// append
; 1365 : 
; 1366 : 			_CATCH_ALL
; 1367 : 			erase(begin() + _Oldsize, end());
; 1368 : 			_RERAISE;
; 1369 : 			_CATCH_END
; 1370 : 
; 1371 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1372 : 			}
; 1373 : 		}
; 1374 : 
; 1375 : 	template<class _Iter>
; 1376 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1377 : 			forward_iterator_tag)
; 1378 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_VICONT(_Where) != this
; 1381 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1382 : 			|| this->_Mylast < _VIPTR(_Where))
; 1383 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1384 : 		_DEBUG_RANGE(_First, _Last);
; 1385 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1386 : 
; 1387 : 		size_type _Count = 0;
; 1388 : 		_Distance(_First, _Last, _Count);
; 1389 : 
; 1390 : 		if (_Count == 0)
; 1391 : 			;
; 1392 : 		else if (_Unused_capacity() < _Count)
; 1393 : 			{	// not enough room, reallocate
; 1394 : 			if (max_size() - size() < _Count)
; 1395 : 				_Xlen();	// result too long
; 1396 : 
; 1397 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1398 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1399 : 			pointer _Ptr = _Newvec;
; 1400 : 
; 1401 : 			_TRY_BEGIN
; 1402 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1403 : 				_Newvec);	// copy prefix
; 1404 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1405 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1406 : 				_Ptr);	// copy suffix
; 1407 : 			_CATCH_ALL
; 1408 : 			_Destroy(_Newvec, _Ptr);
; 1409 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1410 : 			_RERAISE;
; 1411 : 			_CATCH_END
; 1412 : 
; 1413 : 			_Count += size();
; 1414 : 			if (this->_Myfirst != pointer())
; 1415 : 				{	// destroy and deallocate old array
; 1416 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1417 : 				this->_Getal().deallocate(this->_Myfirst,
; 1418 : 					this->_Myend - this->_Myfirst);
; 1419 : 				}
; 1420 : 
; 1421 : 			this->_Orphan_all();
; 1422 : 			this->_Myend = _Newvec + _Capacity;
; 1423 : 			this->_Mylast = _Newvec + _Count;
; 1424 : 			this->_Myfirst = _Newvec;
; 1425 : 			}
; 1426 : 		else
; 1427 : 			{	// new stuff fits, append and rotate into place
; 1428 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1429 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1430 : 				this->_Mylast + _Count);
; 1431 : 			this->_Mylast += _Count;
; 1432 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1433 : 			}
; 1434 : 		}
; 1435 : 
; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 	iterator erase(const_iterator _Where)
; 1438 : 		{	// erase element at where
; 1439 : 		if (_VICONT(_Where) != this
; 1440 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1441 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1442 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1443 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1444 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1445 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1446 : 		--this->_Mylast;
; 1447 : 		return (_Make_iter(_Where));
; 1448 : 		}
; 1449 : 
; 1450 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 	iterator erase(const_iterator _Where)
; 1452 : 		{	// erase element at where
; 1453 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1454 : 			_VIPTR(_Where));
; 1455 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1456 : 		--this->_Mylast;
; 1457 : 		return (_Make_iter(_Where));
; 1458 : 		}
; 1459 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1460 : 
; 1461 : 	iterator erase(const_iterator _First_arg,
; 1462 : 		const_iterator _Last_arg)
; 1463 : 		{	// erase [_First, _Last)
; 1464 : 		if (_First_arg == begin() && _Last_arg == end())
; 1465 : 			clear();
; 1466 : 		else if (_First_arg != _Last_arg)
; 1467 : 			{	// clear partial
; 1468 : 			iterator _First = _Make_iter(_First_arg);
; 1469 : 			iterator _Last = _Make_iter(_Last_arg);
; 1470 : 
; 1471 : 			if (_First != _Last)
; 1472 : 				{	// worth doing, copy down over hole
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 				if (_Last < _First || _VICONT(_First) != this
; 1475 : 					|| _VIPTR(_First) < this->_Myfirst
; 1476 : 					|| this->_Mylast < _VIPTR(_Last))
; 1477 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1478 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1479 : 					_VIPTR(_First));
; 1480 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1484 : 					_VIPTR(_First));
; 1485 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1486 : 
; 1487 : 				_Destroy(_Ptr, this->_Mylast);
; 1488 : 				this->_Mylast = _Ptr;
; 1489 : 				}
; 1490 : 			}
; 1491 : 		return (_Make_iter(_First_arg));
; 1492 : 		}
; 1493 : 
; 1494 : 	void _Pop_back_n(size_type _Count)
; 1495 : 		{	// erase _Count elements at end
; 1496 : 		pointer _Ptr = this->_Mylast - _Count;
; 1497 : 
; 1498 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1499 : 		_Orphan_range(_Ptr, this->_Mylast);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 
; 1502 : 		_Destroy(_Ptr, this->_Mylast);
; 1503 : 		this->_Mylast = _Ptr;
; 1504 : 		}
; 1505 : 
; 1506 : 	void clear() _NOEXCEPT
; 1507 : 		{	// erase all
; 1508 : 		this->_Orphan_all();
; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1510 : 		this->_Mylast = this->_Myfirst;
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		{	// exchange contents with _Right
; 1515 : 		if (this == &_Right)
; 1516 : 			;	// same object, do nothing
; 1517 : 		else if (this->_Getal() == _Right._Getal())
; 1518 : 			{	// same allocator, swap control information
; 1519 : 			this->_Swap_all(_Right);
; 1520 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1521 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1522 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1529 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1530 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1531 : 			}
; 1532 : 
; 1533 : 		else
; 1534 : 			{	// containers are incompatible
; 1535 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1536 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1537 : 
; 1538 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1539 : 			_XSTD terminate();
; 1540 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1541 : 			}
; 1542 : 		}
; 1543 : 
; 1544 : protected:
; 1545 : 	bool _Buy(size_type _Capacity)
; 1546 : 		{	// allocate array with _Capacity elements
; 1547 : 		this->_Myfirst = pointer();
; 1548 : 		this->_Mylast = pointer();
; 1549 : 		this->_Myend = pointer();
; 1550 : 
; 1551 : 		if (_Capacity == 0)
; 1552 : 			return (false);
; 1553 : 		else if (max_size() < _Capacity)
; 1554 : 			_Xlen();	// result too long
; 1555 : 		else
; 1556 : 			{	// nonempty array, allocate storage
; 1557 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1558 : 			this->_Mylast = this->_Myfirst;
; 1559 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1560 : 			}
; 1561 : 		return (true);
; 1562 : 		}
; 1563 : 
; 1564 : 	void _Destroy(pointer _First, pointer _Last)
; 1565 : 		{	// destroy [_First, _Last) using allocator
; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}
; 1569 : 
; 1570 : 	size_type _Grow_to(size_type _Count) const
; 1571 : 		{	// grow by 50% or at least to _Count
; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1576 : 		if (_Capacity < _Count)
; 1577 : 			_Capacity = _Count;
; 1578 : 		return (_Capacity);
; 1579 : 		}
; 1580 : 
; 1581 : 	bool _Inside(const value_type *_Ptr) const
; 1582 : 		{	// test if _Ptr points inside vector
; 1583 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00007	8b 75 08	 mov	 esi, DWORD PTR __Val$[ebp]
  0000a	57		 push	 edi
  0000b	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0000e	3b f1		 cmp	 esi, ecx
  00010	73 33		 jae	 SHORT $LN4@push_back
  00012	8b 03		 mov	 eax, DWORD PTR [ebx]
  00014	3b c6		 cmp	 eax, esi
  00016	77 2d		 ja	 SHORT $LN4@push_back

; 866  : 		if (_Inside(_STD addressof(_Val)))
; 867  : 			{	// push back an element
; 868  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00018	2b f0		 sub	 esi, eax
  0001a	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  0001f	f7 ee		 imul	 esi
  00021	03 d6		 add	 edx, esi
  00023	c1 fa 07	 sar	 edx, 7
  00026	8b f2		 mov	 esi, edx
  00028	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0002b	03 f2		 add	 esi, edx

; 869  : 			if (this->_Mylast == this->_Myend)

  0002d	3b 4b 08	 cmp	 ecx, DWORD PTR [ebx+8]
  00030	75 09		 jne	 SHORT $LN3@push_back

; 870  : 				_Reserve(1);

  00032	6a 01		 push	 1
  00034	8b cb		 mov	 ecx, ebx
  00036	e8 00 00 00 00	 call	 ?_Reserve@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IAEXI@Z ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Reserve
$LN3@push_back:

; 871  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 872  : 			this->_Getal().construct(this->_Mylast,
; 873  : 				_STD forward<value_type>(this->_Myfirst[_Idx]));

  0003b	69 f6 94 00 00
	00		 imul	 esi, esi, 148
  00041	03 33		 add	 esi, DWORD PTR [ebx]

; 874  : 			++this->_Mylast;
; 875  : 			}
; 876  : 		else

  00043	eb 0e		 jmp	 SHORT $LN1@push_back
$LN4@push_back:

; 877  : 			{	// push back a non-element
; 878  : 			if (this->_Mylast == this->_Myend)

  00045	3b 4b 08	 cmp	 ecx, DWORD PTR [ebx+8]
  00048	75 09		 jne	 SHORT $LN1@push_back

; 879  : 				_Reserve(1);

  0004a	6a 01		 push	 1
  0004c	8b cb		 mov	 ecx, ebx
  0004e	e8 00 00 00 00	 call	 ?_Reserve@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IAEXI@Z ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Reserve
$LN1@push_back:
; File a:\vs\vc\include\xmemory0

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00053	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  00056	85 ff		 test	 edi, edi
  00058	74 11		 je	 SHORT $LN59@push_back
; File a:\vs\vc\include\utility

; 157  : 		{	// construct from moved compatible pair

  0005a	8b 06		 mov	 eax, DWORD PTR [esi]
  0005c	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00061	83 c6 04	 add	 esi, 4
  00064	89 07		 mov	 DWORD PTR [edi], eax
  00066	83 c7 04	 add	 edi, 4
  00069	f3 a5		 rep movsd
$LN59@push_back:
; File a:\vs\vc\include\vector

; 883  : 			++this->_Mylast;

  0006b	81 43 04 94 00
	00 00		 add	 DWORD PTR [ebx+4], 148	; 00000094H
  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx

; 884  : 			}
; 885  : 		}

  00075	5d		 pop	 ebp
  00076	c2 04 00	 ret	 4
?push_back@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAEX$$QAU?$pair@MUTFlyVertexSet@@@2@@Z ENDP ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??0?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >, COMDAT
; _this$ = ecx

; 482  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 681  : 		}

  00006	8b c1		 mov	 eax, ecx

; 483  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 484  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 681  : 		}

  00016	c3		 ret	 0
??0?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > > >::_Getal, COMDAT
; _this$ = ecx

; 641  : 		{	// get reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 642  : 		return (_Alty());

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 643  : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@1@@Z PROC ; std::_Vector_alloc<0,std::_Vec_base_types<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > > >::_Vector_alloc<0,std::_Vec_base_types<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > > >, COMDAT
; _this$ = ecx

; 482  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 589  : 		{	// construct allocator from _Al
; 590  : 		}

  00006	8b c1		 mov	 eax, ecx

; 483  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 484  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 589  : 		{	// construct allocator from _Al
; 590  : 		}

  00016	c2 04 00	 ret	 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@1@@Z ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > > >::_Vector_alloc<0,std::_Vec_base_types<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > >::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > >, COMDAT
; _this$ = ecx

; 481  : 		{	// initialize values
; 482  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 483  : 		_Mylast = pointer();
; 484  : 		_Myend = pointer();
; 485  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > >::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<std::pair<float,TFlyVertexSet> > >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (_Mytraits::max_size(*this));

  00000	b8 91 cf ba 01	 mov	 eax, 29020049		; 01bacf91H

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<std::pair<float,TFlyVertexSet> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@QAEXPAU?$pair@MUTFlyVertexSet@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@QAEXPAU?$pair@MUTFlyVertexSet@@@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::pair<float,TFlyVertexSet> > >::deallocate, COMDAT
; _this$ = ecx

; 857  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 858  : 		_Mybase::deallocate(_Ptr, _Count);
; 859  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@QAEXPAU?$pair@MUTFlyVertexSet@@@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::pair<float,TFlyVertexSet> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@QAEPAU?$pair@MUTFlyVertexSet@@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@QAEPAU?$pair@MUTFlyVertexSet@@@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::pair<float,TFlyVertexSet> > >::allocate, COMDAT
; _this$ = ecx

; 846  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 1c		 je	 SHORT $LN6@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d 91 cf ba 01	 cmp	 eax, 29020049		; 01bacf91H
  00011	77 1b		 ja	 SHORT $LN14@allocate
  00013	69 c0 94 00 00
	00		 imul	 eax, eax, 148
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001f	8b c8		 mov	 ecx, eax
  00021	83 c4 04	 add	 esp, 4
  00024	85 c9		 test	 ecx, ecx
  00026	74 06		 je	 SHORT $LN14@allocate
$LN6@allocate:

; 847  : 		return (_Mybase::allocate(_Count));

  00028	8b c1		 mov	 eax, ecx

; 848  : 		}

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
$LN14@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002e	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN16@allocate:
$LN13@allocate:
  00033	cc		 int	 3
?allocate@?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@QAEPAU?$pair@MUTFlyVertexSet@@@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::pair<float,TFlyVertexSet> > >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<std::pair<float,TFlyVertexSet> > >::_Wrap_alloc<std::allocator<std::pair<float,TFlyVertexSet> > >, COMDAT
; _this$ = ecx

; 802  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<std::pair<float,TFlyVertexSet> > >::_Wrap_alloc<std::allocator<std::pair<float,TFlyVertexSet> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@SAIABV?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@SAIABV?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@Z PROC ; std::allocator_traits<std::allocator<std::pair<float,TFlyVertexSet> > >::max_size, COMDAT

; 735  : 		return (_Al.max_size());

  00000	b8 91 cf ba 01	 mov	 eax, 29020049		; 01bacf91H

; 736  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@SAIABV?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@Z ENDP ; std::allocator_traits<std::allocator<std::pair<float,TFlyVertexSet> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@QBEIXZ PROC ; std::allocator<std::pair<float,TFlyVertexSet> >::max_size, COMDAT
; _this$ = ecx

; 612  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 91 cf ba 01	 mov	 eax, 29020049		; 01bacf91H

; 613  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@QBEIXZ ENDP ; std::allocator<std::pair<float,TFlyVertexSet> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@QAEPAU?$pair@MUTFlyVertexSet@@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@QAEPAU?$pair@MUTFlyVertexSet@@@2@I@Z PROC ; std::allocator<std::pair<float,TFlyVertexSet> >::allocate, COMDAT
; _this$ = ecx

; 577  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 1c		 je	 SHORT $LN4@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d 91 cf ba 01	 cmp	 eax, 29020049		; 01bacf91H
  00011	77 1b		 ja	 SHORT $LN11@allocate
  00013	69 c0 94 00 00
	00		 imul	 eax, eax, 148
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001f	8b c8		 mov	 ecx, eax
  00021	83 c4 04	 add	 esp, 4
  00024	85 c9		 test	 ecx, ecx
  00026	74 06		 je	 SHORT $LN11@allocate
$LN4@allocate:

; 578  : 		return (_Allocate(_Count, (pointer)0));

  00028	8b c1		 mov	 eax, ecx

; 579  : 		}

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
$LN11@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002e	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN13@allocate:
$LN10@allocate:
  00033	cc		 int	 3
?allocate@?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@QAEPAU?$pair@MUTFlyVertexSet@@@2@I@Z ENDP ; std::allocator<std::pair<float,TFlyVertexSet> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@QAEXPAU?$pair@MUTFlyVertexSet@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@QAEXPAU?$pair@MUTFlyVertexSet@@@2@I@Z PROC ; std::allocator<std::pair<float,TFlyVertexSet> >::deallocate, COMDAT
; _this$ = ecx

; 572  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 574  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@QAEXPAU?$pair@MUTFlyVertexSet@@@2@I@Z ENDP ; std::allocator<std::pair<float,TFlyVertexSet> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??0?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@QAE@XZ PROC ; std::allocator<std::pair<float,TFlyVertexSet> >::allocator<std::pair<float,TFlyVertexSet> >, COMDAT
; _this$ = ecx

; 553  : 		{	// construct default allocator (do nothing)
; 554  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@QAE@XZ ENDP ; std::allocator<std::pair<float,TFlyVertexSet> >::allocator<std::pair<float,TFlyVertexSet> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
;	COMDAT ??4TFlyVertexSet@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_rhs$ = 8						; size = 4
??4TFlyVertexSet@@QAEAAU0@ABU0@@Z PROC			; TFlyVertexSet::operator=, COMDAT
; _this$ = ecx

; 111  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00004	8b 75 08	 mov	 esi, DWORD PTR _rhs$[ebp]
  00007	8b c1		 mov	 eax, ecx
  00009	57		 push	 edi
  0000a	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0000f	8b f8		 mov	 edi, eax
  00011	f3 a5		 rep movsd
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi

; 113  : 		return *this;
; 114  : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4TFlyVertexSet@@QAEAAU0@ABU0@@Z ENDP			; TFlyVertexSet::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
;	COMDAT ??MTFlyVertexSet@@QBE_NABU0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??MTFlyVertexSet@@QBE_NABU0@@Z PROC			; TFlyVertexSet::operator<, COMDAT
; _this$ = ecx

; 108  : 		return false;

  00000	32 c0		 xor	 al, al

; 109  : 	}

  00002	c2 04 00	 ret	 4
??MTFlyVertexSet@@QBE_NABU0@@Z ENDP			; TFlyVertexSet::operator<
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
;	COMDAT ??0TFlyVertexSet@@QAE@PAUTFlyVertex@@@Z
_TEXT	SEGMENT
_pv$ = 8						; size = 4
??0TFlyVertexSet@@QAE@PAUTFlyVertex@@@Z PROC		; TFlyVertexSet::TFlyVertexSet, COMDAT
; _this$ = ecx

; 102  : 	TFlyVertexSet(TFlyVertex * pv)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 103  : 	{
; 104  : 		memcpy(v,pv,sizeof(v));

  00004	8b 75 08	 mov	 esi, DWORD PTR _pv$[ebp]
  00007	8b c1		 mov	 eax, ecx
  00009	57		 push	 edi
  0000a	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0000f	8b f8		 mov	 edi, eax
  00011	f3 a5		 rep movsd
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi

; 105  : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??0TFlyVertexSet@@QAE@PAUTFlyVertex@@@Z ENDP		; TFlyVertexSet::TFlyVertexSet
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
;	COMDAT ??0TFlyVertex@@QAE@ABUD3DXVECTOR3@@KABUD3DXVECTOR2@@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_c$ = 12						; size = 4
_t$ = 16						; size = 4
??0TFlyVertex@@QAE@ABUD3DXVECTOR3@@KABUD3DXVECTOR2@@@Z PROC ; TFlyVertex::TFlyVertex, COMDAT
; _this$ = ecx

; 96   : 	TFlyVertex(const D3DXVECTOR3& p, DWORD c, const D3DXVECTOR2 & t):p(p),c(c),t(t){}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00006	8b 55 10	 mov	 edx, DWORD PTR _t$[ebp]
  00009	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0000d	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00011	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00014	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00017	8b 45 0c	 mov	 eax, DWORD PTR _c$[ebp]
  0001a	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  0001d	8b 02		 mov	 eax, DWORD PTR [edx]
  0001f	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00022	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00025	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00028	8b c1		 mov	 eax, ecx
  0002a	5d		 pop	 ebp
  0002b	c2 0c 00	 ret	 12			; 0000000cH
??0TFlyVertex@@QAE@ABUD3DXVECTOR3@@KABUD3DXVECTOR2@@@Z ENDP ; TFlyVertex::TFlyVertex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
;	COMDAT ??0TFlyVertex@@QAE@XZ
_TEXT	SEGMENT
??0TFlyVertex@@QAE@XZ PROC				; TFlyVertex::TFlyVertex, COMDAT
; _this$ = ecx

; 95   : 	TFlyVertex(){};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0TFlyVertex@@QAE@XZ ENDP				; TFlyVertex::TFlyVertex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\utility
;	COMDAT ??$?0MABUD3DXVECTOR3@@X@?$pair@MUD3DXVECTOR3@@@std@@QAE@$$QAMABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0MABUD3DXVECTOR3@@X@?$pair@MUD3DXVECTOR3@@@std@@QAE@$$QAMABUD3DXVECTOR3@@@Z PROC ; std::pair<float,D3DXVECTOR3>::pair<float,D3DXVECTOR3><float,D3DXVECTOR3 const &,void>, COMDAT
; _this$ = ecx

; 144  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax
  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000d	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00011	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0
  00016	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00019	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 145  : 		}

  0001c	8b c1		 mov	 eax, ecx
  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
??$?0MABUD3DXVECTOR3@@X@?$pair@MUD3DXVECTOR3@@@std@@QAE@$$QAMABUD3DXVECTOR3@@@Z ENDP ; std::pair<float,D3DXVECTOR3>::pair<float,D3DXVECTOR3><float,D3DXVECTOR3 const &,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\eterlib\pool.h
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
;	COMDAT ??__F?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A@@YAXXZ
text$yd	SEGMENT
$T1 = -1						; size = 1
$T2 = -1						; size = 1
??__F?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CFlyTrace::ms_kPool'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1623 : 		if (this->_Myfirst != pointer())

  00004	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+16
; File a:\from c\desktop\serwer\source\source client\client\eterlib\pool.h

; 18   : 		{

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A, OFFSET ??_7?$CDynamicPool@VCFlyTrace@@@@6B@
; File a:\vs\vc\include\vector

; 1623 : 		if (this->_Myfirst != pointer())

  00013	85 c0		 test	 eax, eax
  00015	74 45		 je	 SHORT $LN7@ms_kPool

; 1624 : 			{	// something to free, destroy and deallocate it
; 1625 : 			this->_Orphan_all();
; 1626 : 			_Destroy(this->_Myfirst, this->_Mylast);

  00017	ff 35 14 00 00
	00		 push	 DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+20
  0001d	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+16
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ?_Destroy@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IAEXPAPAVCFlyTrace@@0@Z ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Destroy

; 642  : 		return (_Alty());

  00028	8d 4d ff	 lea	 ecx, DWORD PTR $T2[ebp]
  0002b	e8 00 00 00 00	 call	 ??0?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<CFlyTrace *> >::_Wrap_alloc<std::allocator<CFlyTrace *> >
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00030	ff 35 10 00 00
	00		 push	 DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+16
  00036	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003b	83 c4 04	 add	 esp, 4
; File a:\vs\vc\include\vector

; 1629 : 			this->_Myfirst = pointer();

  0003e	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+16, 0

; 1630 : 			this->_Mylast = pointer();

  00048	c7 05 14 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+20, 0

; 1631 : 			this->_Myend = pointer();

  00052	c7 05 18 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+24, 0
$LN7@ms_kPool:

; 1623 : 		if (this->_Myfirst != pointer())

  0005c	a1 04 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+4
  00061	85 c0		 test	 eax, eax
  00063	74 45		 je	 SHORT $LN20@ms_kPool

; 1624 : 			{	// something to free, destroy and deallocate it
; 1625 : 			this->_Orphan_all();
; 1626 : 			_Destroy(this->_Myfirst, this->_Mylast);

  00065	ff 35 08 00 00
	00		 push	 DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+8
  0006b	b9 04 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+4
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?_Destroy@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IAEXPAPAVCFlyTrace@@0@Z ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Destroy

; 642  : 		return (_Alty());

  00076	8d 4d ff	 lea	 ecx, DWORD PTR $T1[ebp]
  00079	e8 00 00 00 00	 call	 ??0?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<CFlyTrace *> >::_Wrap_alloc<std::allocator<CFlyTrace *> >
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  0007e	ff 35 04 00 00
	00		 push	 DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+4
  00084	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00089	83 c4 04	 add	 esp, 4
; File a:\vs\vc\include\vector

; 1629 : 			this->_Myfirst = pointer();

  0008c	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+4, 0

; 1630 : 			this->_Mylast = pointer();

  00096	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+8, 0

; 1631 : 			this->_Myend = pointer();

  000a0	c7 05 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+12, 0
$LN20@ms_kPool:
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
??__F?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CFlyTrace::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
;	COMDAT ??__E?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CFlyTrace::ms_kPool'', COMDAT

; 8    : CDynamicPool<CFlyTrace>		CFlyTrace::ms_kPool;		

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CFlyTrace::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CFlyTrace::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCFlyTrace@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCFlyTrace@@UAEPAXI@Z PROC				; CFlyTrace::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CFlyTrace@@UAE@XZ	; CFlyTrace::~CFlyTrace
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCFlyTrace@@UAEPAXI@Z ENDP				; CFlyTrace::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterlib\pool.h
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
;	COMDAT ??_G?$CDynamicPool@VCFlyTrace@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCFlyTrace@@@@UAEPAXI@Z PROC		; CDynamicPool<CFlyTrace>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
; File a:\from c\desktop\serwer\source\source client\client\eterlib\pool.h

; 18   : 		{

  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCFlyTrace@@@@6B@
; File a:\vs\vc\include\vector

; 1623 : 		if (this->_Myfirst != pointer())

  0000c	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000f	85 c0		 test	 eax, eax
  00011	74 1e		 je	 SHORT $LN8@scalar
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00019	83 c4 04	 add	 esp, 4
; File a:\vs\vc\include\vector

; 1629 : 			this->_Myfirst = pointer();

  0001c	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 1630 : 			this->_Mylast = pointer();

  00023	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1631 : 			this->_Myend = pointer();

  0002a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN8@scalar:

; 1623 : 		if (this->_Myfirst != pointer())

  00031	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00034	85 c0		 test	 eax, eax
  00036	74 1e		 je	 SHORT $LN21@scalar
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003e	83 c4 04	 add	 esp, 4
; File a:\vs\vc\include\vector

; 1629 : 			this->_Myfirst = pointer();

  00041	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1630 : 			this->_Mylast = pointer();

  00048	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 1631 : 			this->_Myend = pointer();

  0004f	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN21@scalar:
  00056	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0005a	74 09		 je	 SHORT $LN32@scalar
  0005c	56		 push	 esi
  0005d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00062	83 c4 04	 add	 esp, 4
$LN32@scalar:
  00065	8b c6		 mov	 eax, esi
  00067	5e		 pop	 esi
  00068	5d		 pop	 ebp
  00069	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCFlyTrace@@@@UAEPAXI@Z ENDP		; CDynamicPool<CFlyTrace>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IBEXPAPAVCFlyTrace@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IBEXPAPAVCFlyTrace@@0@Z PROC ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1781 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IBEXPAPAVCFlyTrace@@0@Z ENDP ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Xlen@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IBEXXZ PROC ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Xlen, COMDAT
; _this$ = ecx

; 1754 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IBEXXZ ENDP ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
;	COMDAT ?_Tidy@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IAEXXZ PROC ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Tidy, COMDAT
; _this$ = ecx

; 1622 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1623 : 		if (this->_Myfirst != pointer())

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 1d		 je	 SHORT $LN1@Tidy
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
; File a:\vs\vc\include\vector

; 1629 : 			this->_Myfirst = pointer();

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1630 : 			this->_Mylast = pointer();

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1631 : 			this->_Myend = pointer();

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN1@Tidy:
  00026	5e		 pop	 esi

; 1632 : 			}
; 1633 : 		}

  00027	c3		 ret	 0
?_Tidy@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IAEXXZ ENDP ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Reserve@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IAEXI@Z PROC ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Reserve, COMDAT
; _this$ = ecx

; 1612 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1011 : 		}
; 1012 : 
; 1013 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1014 : 		{	// micro-optimization for capacity() - size()
; 1015 : 		return (this->_Myend - this->_Mylast);

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00006	8b c2		 mov	 eax, edx
  00008	56		 push	 esi
  00009	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0000c	2b c6		 sub	 eax, esi
  0000e	57		 push	 edi

; 1613 : 		if (_Unused_capacity() < _Count)

  0000f	8b 7d 08	 mov	 edi, DWORD PTR __Count$[ebp]

; 1011 : 		}
; 1012 : 
; 1013 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1014 : 		{	// micro-optimization for capacity() - size()
; 1015 : 		return (this->_Myend - this->_Mylast);

  00012	c1 f8 02	 sar	 eax, 2

; 1613 : 		if (_Unused_capacity() < _Count)

  00015	3b c7		 cmp	 eax, edi
  00017	73 49		 jae	 SHORT $LN2@Reserve

; 1016 : 		}
; 1017 : 
; 1018 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1019 : 		{	// micro-optimization for capacity() != size()
; 1020 : 		return (this->_Myend != this->_Mylast);
; 1021 : 		}
; 1022 : 
; 1023 : 	iterator begin() _NOEXCEPT
; 1024 : 		{	// return iterator for beginning of mutable sequence
; 1025 : 		return (iterator(this->_Myfirst, this));
; 1026 : 		}
; 1027 : 
; 1028 : 	const_iterator begin() const _NOEXCEPT
; 1029 : 		{	// return iterator for beginning of nonmutable sequence
; 1030 : 		return (const_iterator(this->_Myfirst, this));
; 1031 : 		}
; 1032 : 
; 1033 : 	iterator end() _NOEXCEPT
; 1034 : 		{	// return iterator for end of mutable sequence
; 1035 : 		return (iterator(this->_Mylast, this));
; 1036 : 		}
; 1037 : 
; 1038 : 	const_iterator end() const _NOEXCEPT
; 1039 : 		{	// return iterator for end of nonmutable sequence
; 1040 : 		return (const_iterator(this->_Mylast, this));
; 1041 : 		}
; 1042 : 
; 1043 : 	iterator _Make_iter(const_iterator _Where) const
; 1044 : 		{	// make iterator from const_iterator
; 1045 : 		return (iterator(_Where._Ptr, this));
; 1046 : 		}
; 1047 : 
; 1048 : 	reverse_iterator rbegin() _NOEXCEPT
; 1049 : 		{	// return iterator for beginning of reversed mutable sequence
; 1050 : 		return (reverse_iterator(end()));
; 1051 : 		}
; 1052 : 
; 1053 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1054 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1055 : 		return (const_reverse_iterator(end()));
; 1056 : 		}
; 1057 : 
; 1058 : 	reverse_iterator rend() _NOEXCEPT
; 1059 : 		{	// return iterator for end of reversed mutable sequence
; 1060 : 		return (reverse_iterator(begin()));
; 1061 : 		}
; 1062 : 
; 1063 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1064 : 		{	// return iterator for end of reversed nonmutable sequence
; 1065 : 		return (const_reverse_iterator(begin()));
; 1066 : 		}
; 1067 : 
; 1068 : 	const_iterator cbegin() const _NOEXCEPT
; 1069 : 		{	// return iterator for beginning of nonmutable sequence
; 1070 : 		return (((const _Myt *)this)->begin());
; 1071 : 		}
; 1072 : 
; 1073 : 	const_iterator cend() const _NOEXCEPT
; 1074 : 		{	// return iterator for end of nonmutable sequence
; 1075 : 		return (((const _Myt *)this)->end());
; 1076 : 		}
; 1077 : 
; 1078 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1079 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1080 : 		return (((const _Myt *)this)->rbegin());
; 1081 : 		}
; 1082 : 
; 1083 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1084 : 		{	// return iterator for end of reversed nonmutable sequence
; 1085 : 		return (((const _Myt *)this)->rend());
; 1086 : 		}
; 1087 : 
; 1088 : 	void shrink_to_fit()
; 1089 : 		{	// reduce capacity
; 1090 : 		if (_Has_unused_capacity())
; 1091 : 			{	// worth shrinking, do it
; 1092 : 			if (empty())
; 1093 : 				_Tidy();
; 1094 : 			else
; 1095 : 				_Reallocate(size());
; 1096 : 			}
; 1097 : 		}
; 1098 : 
; 1099 : 	void resize(size_type _Newsize)
; 1100 : 		{	// determine new length, padding as needed
; 1101 : 		if (_Newsize < size())
; 1102 : 			_Pop_back_n(size() - _Newsize);
; 1103 : 		else if (size() < _Newsize)
; 1104 : 			{	// pad as needed
; 1105 : 			_Alty _Alval(this->_Getal());
; 1106 : 			_Reserve(_Newsize - size());
; 1107 : 			_TRY_BEGIN
; 1108 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1109 : 				_Alval);
; 1110 : 			_CATCH_ALL
; 1111 : 			_Tidy();
; 1112 : 			_RERAISE;
; 1113 : 			_CATCH_END
; 1114 : 			this->_Mylast += _Newsize - size();
; 1115 : 			}
; 1116 : 		}
; 1117 : 
; 1118 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1119 : 		{	// determine new length, padding with _Val elements as needed
; 1120 : 		if (_Newsize < size())
; 1121 : 			_Pop_back_n(size() - _Newsize);
; 1122 : 		else if (size() < _Newsize)
; 1123 : 			{	// pad as needed
; 1124 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1125 : 
; 1126 : 			if (_Inside(_Ptr))
; 1127 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1128 : 				const difference_type _Idx = _Ptr
; 1129 : 					- _STD addressof(*this->_Myfirst);
; 1130 : 				_Reserve(_Newsize - size());
; 1131 : 				_Ptr = _STD addressof(*this->_Myfirst) + _Idx;
; 1132 : 				}
; 1133 : 			else
; 1134 : 				_Reserve(_Newsize - size());
; 1135 : 
; 1136 : 			_TRY_BEGIN
; 1137 : 			_Ufill(this->_Mylast, _Newsize - size(), _Ptr);
; 1138 : 			_CATCH_ALL
; 1139 : 			_Tidy();
; 1140 : 			_RERAISE;
; 1141 : 			_CATCH_END
; 1142 : 			this->_Mylast += _Newsize - size();
; 1143 : 			}
; 1144 : 		}
; 1145 : 
; 1146 : 	size_type size() const _NOEXCEPT
; 1147 : 		{	// return length of sequence
; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00019	2b 31		 sub	 esi, DWORD PTR [ecx]
  0001b	53		 push	 ebx

; 1614 : 			{	// need more room, try to get it
; 1615 : 			if (max_size() - size() < _Count)

  0001c	bb ff ff ff 3f	 mov	 ebx, 1073741823		; 3fffffffH

; 1016 : 		}
; 1017 : 
; 1018 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1019 : 		{	// micro-optimization for capacity() != size()
; 1020 : 		return (this->_Myend != this->_Mylast);
; 1021 : 		}
; 1022 : 
; 1023 : 	iterator begin() _NOEXCEPT
; 1024 : 		{	// return iterator for beginning of mutable sequence
; 1025 : 		return (iterator(this->_Myfirst, this));
; 1026 : 		}
; 1027 : 
; 1028 : 	const_iterator begin() const _NOEXCEPT
; 1029 : 		{	// return iterator for beginning of nonmutable sequence
; 1030 : 		return (const_iterator(this->_Myfirst, this));
; 1031 : 		}
; 1032 : 
; 1033 : 	iterator end() _NOEXCEPT
; 1034 : 		{	// return iterator for end of mutable sequence
; 1035 : 		return (iterator(this->_Mylast, this));
; 1036 : 		}
; 1037 : 
; 1038 : 	const_iterator end() const _NOEXCEPT
; 1039 : 		{	// return iterator for end of nonmutable sequence
; 1040 : 		return (const_iterator(this->_Mylast, this));
; 1041 : 		}
; 1042 : 
; 1043 : 	iterator _Make_iter(const_iterator _Where) const
; 1044 : 		{	// make iterator from const_iterator
; 1045 : 		return (iterator(_Where._Ptr, this));
; 1046 : 		}
; 1047 : 
; 1048 : 	reverse_iterator rbegin() _NOEXCEPT
; 1049 : 		{	// return iterator for beginning of reversed mutable sequence
; 1050 : 		return (reverse_iterator(end()));
; 1051 : 		}
; 1052 : 
; 1053 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1054 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1055 : 		return (const_reverse_iterator(end()));
; 1056 : 		}
; 1057 : 
; 1058 : 	reverse_iterator rend() _NOEXCEPT
; 1059 : 		{	// return iterator for end of reversed mutable sequence
; 1060 : 		return (reverse_iterator(begin()));
; 1061 : 		}
; 1062 : 
; 1063 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1064 : 		{	// return iterator for end of reversed nonmutable sequence
; 1065 : 		return (const_reverse_iterator(begin()));
; 1066 : 		}
; 1067 : 
; 1068 : 	const_iterator cbegin() const _NOEXCEPT
; 1069 : 		{	// return iterator for beginning of nonmutable sequence
; 1070 : 		return (((const _Myt *)this)->begin());
; 1071 : 		}
; 1072 : 
; 1073 : 	const_iterator cend() const _NOEXCEPT
; 1074 : 		{	// return iterator for end of nonmutable sequence
; 1075 : 		return (((const _Myt *)this)->end());
; 1076 : 		}
; 1077 : 
; 1078 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1079 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1080 : 		return (((const _Myt *)this)->rbegin());
; 1081 : 		}
; 1082 : 
; 1083 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1084 : 		{	// return iterator for end of reversed nonmutable sequence
; 1085 : 		return (((const _Myt *)this)->rend());
; 1086 : 		}
; 1087 : 
; 1088 : 	void shrink_to_fit()
; 1089 : 		{	// reduce capacity
; 1090 : 		if (_Has_unused_capacity())
; 1091 : 			{	// worth shrinking, do it
; 1092 : 			if (empty())
; 1093 : 				_Tidy();
; 1094 : 			else
; 1095 : 				_Reallocate(size());
; 1096 : 			}
; 1097 : 		}
; 1098 : 
; 1099 : 	void resize(size_type _Newsize)
; 1100 : 		{	// determine new length, padding as needed
; 1101 : 		if (_Newsize < size())
; 1102 : 			_Pop_back_n(size() - _Newsize);
; 1103 : 		else if (size() < _Newsize)
; 1104 : 			{	// pad as needed
; 1105 : 			_Alty _Alval(this->_Getal());
; 1106 : 			_Reserve(_Newsize - size());
; 1107 : 			_TRY_BEGIN
; 1108 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1109 : 				_Alval);
; 1110 : 			_CATCH_ALL
; 1111 : 			_Tidy();
; 1112 : 			_RERAISE;
; 1113 : 			_CATCH_END
; 1114 : 			this->_Mylast += _Newsize - size();
; 1115 : 			}
; 1116 : 		}
; 1117 : 
; 1118 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1119 : 		{	// determine new length, padding with _Val elements as needed
; 1120 : 		if (_Newsize < size())
; 1121 : 			_Pop_back_n(size() - _Newsize);
; 1122 : 		else if (size() < _Newsize)
; 1123 : 			{	// pad as needed
; 1124 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1125 : 
; 1126 : 			if (_Inside(_Ptr))
; 1127 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1128 : 				const difference_type _Idx = _Ptr
; 1129 : 					- _STD addressof(*this->_Myfirst);
; 1130 : 				_Reserve(_Newsize - size());
; 1131 : 				_Ptr = _STD addressof(*this->_Myfirst) + _Idx;
; 1132 : 				}
; 1133 : 			else
; 1134 : 				_Reserve(_Newsize - size());
; 1135 : 
; 1136 : 			_TRY_BEGIN
; 1137 : 			_Ufill(this->_Mylast, _Newsize - size(), _Ptr);
; 1138 : 			_CATCH_ALL
; 1139 : 			_Tidy();
; 1140 : 			_RERAISE;
; 1141 : 			_CATCH_END
; 1142 : 			this->_Mylast += _Newsize - size();
; 1143 : 			}
; 1144 : 		}
; 1145 : 
; 1146 : 	size_type size() const _NOEXCEPT
; 1147 : 		{	// return length of sequence
; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00021	c1 fe 02	 sar	 esi, 2

; 1614 : 			{	// need more room, try to get it
; 1615 : 			if (max_size() - size() < _Count)

  00024	8b c3		 mov	 eax, ebx
  00026	2b c6		 sub	 eax, esi
  00028	3b c7		 cmp	 eax, edi
  0002a	72 3c		 jb	 SHORT $LN43@Reserve

; 1010 : 		return (this->_Myend - this->_Myfirst);

  0002c	2b 11		 sub	 edx, DWORD PTR [ecx]

; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));

  0002e	03 f7		 add	 esi, edi

; 1010 : 		return (this->_Myend - this->_Myfirst);

  00030	c1 fa 02	 sar	 edx, 2

; 1149 : 		}
; 1150 : 
; 1151 : 	size_type max_size() const _NOEXCEPT
; 1152 : 		{	// return maximum possible length of sequence
; 1153 : 		return (this->_Getal().max_size());
; 1154 : 		}
; 1155 : 
; 1156 : 	bool empty() const _NOEXCEPT
; 1157 : 		{	// test if sequence is empty
; 1158 : 		return (this->_Myfirst == this->_Mylast);
; 1159 : 		}
; 1160 : 
; 1161 : 	_Alloc get_allocator() const _NOEXCEPT
; 1162 : 		{	// return allocator object for values
; 1163 : 		return (this->_Getal());
; 1164 : 		}
; 1165 : 
; 1166 : 	const_reference at(size_type _Pos) const
; 1167 : 		{	// subscript nonmutable sequence with checking
; 1168 : 		if (size() <= _Pos)
; 1169 : 			_Xran();
; 1170 : 		return (*(this->_Myfirst + _Pos));
; 1171 : 		}
; 1172 : 
; 1173 : 	reference at(size_type _Pos)
; 1174 : 		{	// subscript mutable sequence with checking
; 1175 : 		if (size() <= _Pos)
; 1176 : 			_Xran();
; 1177 : 		return (*(this->_Myfirst + _Pos));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reference operator[](size_type _Pos) const
; 1181 : 		{	// subscript nonmutable sequence
; 1182 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1183 : 		if (size() <= _Pos)
; 1184 : 			{	// report error
; 1185 : 			_DEBUG_ERROR("vector subscript out of range");
; 1186 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1187 : 			}
; 1188 : 
; 1189 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1190 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1191 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1192 : 
; 1193 : 		return (*(this->_Myfirst + _Pos));
; 1194 : 		}
; 1195 : 
; 1196 : 	reference operator[](size_type _Pos)
; 1197 : 		{	// subscript mutable sequence
; 1198 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1199 : 		if (size() <= _Pos)
; 1200 : 			{	// report error
; 1201 : 			_DEBUG_ERROR("vector subscript out of range");
; 1202 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1203 : 			}
; 1204 : 
; 1205 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1206 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1207 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1208 : 
; 1209 : 		return (*(this->_Myfirst + _Pos));
; 1210 : 		}
; 1211 : 
; 1212 : 	pointer data() _NOEXCEPT
; 1213 : 		{	// return address of first element
; 1214 : 		return (this->_Myfirst);
; 1215 : 		}
; 1216 : 
; 1217 : 	const_pointer data() const _NOEXCEPT
; 1218 : 		{	// return address of first element
; 1219 : 		return (this->_Myfirst);
; 1220 : 		}
; 1221 : 
; 1222 : 	reference front()
; 1223 : 		{	// return first element of mutable sequence
; 1224 : 		return (*begin());
; 1225 : 		}
; 1226 : 
; 1227 : 	const_reference front() const
; 1228 : 		{	// return first element of nonmutable sequence
; 1229 : 		return (*begin());
; 1230 : 		}
; 1231 : 
; 1232 : 	reference back()
; 1233 : 		{	// return last element of mutable sequence
; 1234 : 		return (*(end() - 1));
; 1235 : 		}
; 1236 : 
; 1237 : 	const_reference back() const
; 1238 : 		{	// return last element of nonmutable sequence
; 1239 : 		return (*(end() - 1));
; 1240 : 		}
; 1241 : 
; 1242 : 	void push_back(const value_type& _Val)
; 1243 : 		{	// insert element at end
; 1244 : 		if (_Inside(_STD addressof(_Val)))
; 1245 : 			{	// push back an element
; 1246 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1247 : 			if (this->_Mylast == this->_Myend)
; 1248 : 				_Reserve(1);
; 1249 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1250 : 			this->_Getal().construct(this->_Mylast,
; 1251 : 				this->_Myfirst[_Idx]);
; 1252 : 			++this->_Mylast;
; 1253 : 			}
; 1254 : 		else
; 1255 : 			{	// push back a non-element
; 1256 : 			if (this->_Mylast == this->_Myend)
; 1257 : 				_Reserve(1);
; 1258 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1259 : 			this->_Getal().construct(this->_Mylast,
; 1260 : 				_Val);
; 1261 : 			++this->_Mylast;
; 1262 : 			}
; 1263 : 		}
; 1264 : 
; 1265 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1266 : 	void pop_back()
; 1267 : 		{	// erase element at end
; 1268 : 		if (empty())
; 1269 : 			_DEBUG_ERROR("vector empty before pop");
; 1270 : 		else
; 1271 : 			{	// erase last element
; 1272 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1273 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1274 : 			--this->_Mylast;
; 1275 : 			}
; 1276 : 		}
; 1277 : 
; 1278 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1279 : 	void pop_back()
; 1280 : 		{	// erase element at end
; 1281 : 		this->_Getal().destroy(this->_Mylast - 1);
; 1282 : 		--this->_Mylast;
; 1283 : 		}
; 1284 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1285 : 
; 1286 : 	template<class _Iter>
; 1287 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1288 : 			void>::type
; 1289 : 		assign(_Iter _First, _Iter _Last)
; 1290 : 		{	// assign [_First, _Last)
; 1291 : 		clear();
; 1292 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1293 : 		}
; 1294 : 
; 1295 : 	template<class _Iter>
; 1296 : 		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
; 1297 : 		{	// assign [_First, _Last), input iterators
; 1298 : 		for (; _First != _Last; ++_First)
; 1299 : 			emplace_back(*_First);
; 1300 : 		}
; 1301 : 
; 1302 : 	template<class _Iter>
; 1303 : 		void _Assign(_Iter _First, _Iter _Last, forward_iterator_tag)
; 1304 : 		{	// assign [_First, _Last), forward iterators
; 1305 : 		if (_First == _Last)
; 1306 : 			return;	// nothing to do
; 1307 : 
; 1308 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1309 : 
; 1310 : 		if (capacity() < _Newsize)
; 1311 : 			{	// need more room, try to get it
; 1312 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1313 : 			_Tidy();
; 1314 : 			_Buy(_Newcapacity);
; 1315 : 			}
; 1316 : 
; 1317 : 		this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
; 1318 : 		}
; 1319 : 
; 1320 : 	void assign(size_type _Count, const value_type& _Val)
; 1321 : 		{	// assign _Count * _Val
; 1322 : 		clear();
; 1323 : 		insert(begin(), _Count, _Val);
; 1324 : 		}
; 1325 : 
; 1326 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1327 : 		{	// insert _Val at _Where
; 1328 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1329 : 		}
; 1330 : 
; 1331 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1332 : 		const _Ty& _Val)
; 1333 : 		{	// insert _Count * _Val at _Where
; 1334 : 		return (_Insert_n(_Where, _Count, _Val));
; 1335 : 		}
; 1336 : 
; 1337 : 	template<class _Iter>
; 1338 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1339 : 			iterator>::type
; 1340 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1341 : 		{	// insert [_First, _Last) at _Where
; 1342 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1343 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1344 : 		return (begin() + _Off);
; 1345 : 		}
; 1346 : 
; 1347 : 	template<class _Iter>
; 1348 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1349 : 			input_iterator_tag)
; 1350 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1351 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1352 : 
; 1353 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1354 : 		if (size() < _Off)
; 1355 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1356 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1357 : 
; 1358 : 		if (_First != _Last)
; 1359 : 			{	// worth doing, gather at end and rotate into place
; 1360 : 			size_type _Oldsize = size();
; 1361 : 
; 1362 : 			_TRY_BEGIN
; 1363 : 			for (; _First != _Last; ++_First)
; 1364 : 				push_back(*_First);	// append
; 1365 : 
; 1366 : 			_CATCH_ALL
; 1367 : 			erase(begin() + _Oldsize, end());
; 1368 : 			_RERAISE;
; 1369 : 			_CATCH_END
; 1370 : 
; 1371 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1372 : 			}
; 1373 : 		}
; 1374 : 
; 1375 : 	template<class _Iter>
; 1376 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1377 : 			forward_iterator_tag)
; 1378 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_VICONT(_Where) != this
; 1381 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1382 : 			|| this->_Mylast < _VIPTR(_Where))
; 1383 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1384 : 		_DEBUG_RANGE(_First, _Last);
; 1385 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1386 : 
; 1387 : 		size_type _Count = 0;
; 1388 : 		_Distance(_First, _Last, _Count);
; 1389 : 
; 1390 : 		if (_Count == 0)
; 1391 : 			;
; 1392 : 		else if (_Unused_capacity() < _Count)
; 1393 : 			{	// not enough room, reallocate
; 1394 : 			if (max_size() - size() < _Count)
; 1395 : 				_Xlen();	// result too long
; 1396 : 
; 1397 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1398 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1399 : 			pointer _Ptr = _Newvec;
; 1400 : 
; 1401 : 			_TRY_BEGIN
; 1402 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1403 : 				_Newvec);	// copy prefix
; 1404 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1405 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1406 : 				_Ptr);	// copy suffix
; 1407 : 			_CATCH_ALL
; 1408 : 			_Destroy(_Newvec, _Ptr);
; 1409 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1410 : 			_RERAISE;
; 1411 : 			_CATCH_END
; 1412 : 
; 1413 : 			_Count += size();
; 1414 : 			if (this->_Myfirst != pointer())
; 1415 : 				{	// destroy and deallocate old array
; 1416 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1417 : 				this->_Getal().deallocate(this->_Myfirst,
; 1418 : 					this->_Myend - this->_Myfirst);
; 1419 : 				}
; 1420 : 
; 1421 : 			this->_Orphan_all();
; 1422 : 			this->_Myend = _Newvec + _Capacity;
; 1423 : 			this->_Mylast = _Newvec + _Count;
; 1424 : 			this->_Myfirst = _Newvec;
; 1425 : 			}
; 1426 : 		else
; 1427 : 			{	// new stuff fits, append and rotate into place
; 1428 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1429 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1430 : 				this->_Mylast + _Count);
; 1431 : 			this->_Mylast += _Count;
; 1432 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1433 : 			}
; 1434 : 		}
; 1435 : 
; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 	iterator erase(const_iterator _Where)
; 1438 : 		{	// erase element at where
; 1439 : 		if (_VICONT(_Where) != this
; 1440 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1441 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1442 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1443 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1444 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1445 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1446 : 		--this->_Mylast;
; 1447 : 		return (_Make_iter(_Where));
; 1448 : 		}
; 1449 : 
; 1450 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 	iterator erase(const_iterator _Where)
; 1452 : 		{	// erase element at where
; 1453 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1454 : 			_VIPTR(_Where));
; 1455 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1456 : 		--this->_Mylast;
; 1457 : 		return (_Make_iter(_Where));
; 1458 : 		}
; 1459 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1460 : 
; 1461 : 	iterator erase(const_iterator _First_arg,
; 1462 : 		const_iterator _Last_arg)
; 1463 : 		{	// erase [_First, _Last)
; 1464 : 		if (_First_arg == begin() && _Last_arg == end())
; 1465 : 			clear();
; 1466 : 		else if (_First_arg != _Last_arg)
; 1467 : 			{	// clear partial
; 1468 : 			iterator _First = _Make_iter(_First_arg);
; 1469 : 			iterator _Last = _Make_iter(_Last_arg);
; 1470 : 
; 1471 : 			if (_First != _Last)
; 1472 : 				{	// worth doing, copy down over hole
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 				if (_Last < _First || _VICONT(_First) != this
; 1475 : 					|| _VIPTR(_First) < this->_Myfirst
; 1476 : 					|| this->_Mylast < _VIPTR(_Last))
; 1477 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1478 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1479 : 					_VIPTR(_First));
; 1480 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1484 : 					_VIPTR(_First));
; 1485 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1486 : 
; 1487 : 				_Destroy(_Ptr, this->_Mylast);
; 1488 : 				this->_Mylast = _Ptr;
; 1489 : 				}
; 1490 : 			}
; 1491 : 		return (_Make_iter(_First_arg));
; 1492 : 		}
; 1493 : 
; 1494 : 	void _Pop_back_n(size_type _Count)
; 1495 : 		{	// erase _Count elements at end
; 1496 : 		pointer _Ptr = this->_Mylast - _Count;
; 1497 : 
; 1498 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1499 : 		_Orphan_range(_Ptr, this->_Mylast);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 
; 1502 : 		_Destroy(_Ptr, this->_Mylast);
; 1503 : 		this->_Mylast = _Ptr;
; 1504 : 		}
; 1505 : 
; 1506 : 	void clear() _NOEXCEPT
; 1507 : 		{	// erase all
; 1508 : 		this->_Orphan_all();
; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1510 : 		this->_Mylast = this->_Myfirst;
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		{	// exchange contents with _Right
; 1515 : 		if (this == &_Right)
; 1516 : 			;	// same object, do nothing
; 1517 : 		else if (this->_Getal() == _Right._Getal())
; 1518 : 			{	// same allocator, swap control information
; 1519 : 			this->_Swap_all(_Right);
; 1520 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1521 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1522 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1529 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1530 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1531 : 			}
; 1532 : 
; 1533 : 		else
; 1534 : 			{	// containers are incompatible
; 1535 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1536 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1537 : 
; 1538 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1539 : 			_XSTD terminate();
; 1540 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1541 : 			}
; 1542 : 		}
; 1543 : 
; 1544 : protected:
; 1545 : 	bool _Buy(size_type _Capacity)
; 1546 : 		{	// allocate array with _Capacity elements
; 1547 : 		this->_Myfirst = pointer();
; 1548 : 		this->_Mylast = pointer();
; 1549 : 		this->_Myend = pointer();
; 1550 : 
; 1551 : 		if (_Capacity == 0)
; 1552 : 			return (false);
; 1553 : 		else if (max_size() < _Capacity)
; 1554 : 			_Xlen();	// result too long
; 1555 : 		else
; 1556 : 			{	// nonempty array, allocate storage
; 1557 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1558 : 			this->_Mylast = this->_Myfirst;
; 1559 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1560 : 			}
; 1561 : 		return (true);
; 1562 : 		}
; 1563 : 
; 1564 : 	void _Destroy(pointer _First, pointer _Last)
; 1565 : 		{	// destroy [_First, _Last) using allocator
; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}
; 1569 : 
; 1570 : 	size_type _Grow_to(size_type _Count) const
; 1571 : 		{	// grow by 50% or at least to _Count
; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00033	8b c2		 mov	 eax, edx
  00035	d1 e8		 shr	 eax, 1
  00037	2b d8		 sub	 ebx, eax
  00039	3b da		 cmp	 ebx, edx
  0003b	5b		 pop	 ebx
  0003c	73 12		 jae	 SHORT $LN27@Reserve
  0003e	33 d2		 xor	 edx, edx

; 1576 : 		if (_Capacity < _Count)

  00040	3b d6		 cmp	 edx, esi
  00042	5f		 pop	 edi
  00043	0f 42 d6	 cmovb	 edx, esi
  00046	5e		 pop	 esi

; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));

  00047	89 55 08	 mov	 DWORD PTR __Count$[ebp], edx

; 1618 : 			}
; 1619 : 		}

  0004a	5d		 pop	 ebp

; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));

  0004b	e9 00 00 00 00	 jmp	 ?_Reallocate@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IAEXI@Z ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Reallocate
$LN27@Reserve:

; 1149 : 		}
; 1150 : 
; 1151 : 	size_type max_size() const _NOEXCEPT
; 1152 : 		{	// return maximum possible length of sequence
; 1153 : 		return (this->_Getal().max_size());
; 1154 : 		}
; 1155 : 
; 1156 : 	bool empty() const _NOEXCEPT
; 1157 : 		{	// test if sequence is empty
; 1158 : 		return (this->_Myfirst == this->_Mylast);
; 1159 : 		}
; 1160 : 
; 1161 : 	_Alloc get_allocator() const _NOEXCEPT
; 1162 : 		{	// return allocator object for values
; 1163 : 		return (this->_Getal());
; 1164 : 		}
; 1165 : 
; 1166 : 	const_reference at(size_type _Pos) const
; 1167 : 		{	// subscript nonmutable sequence with checking
; 1168 : 		if (size() <= _Pos)
; 1169 : 			_Xran();
; 1170 : 		return (*(this->_Myfirst + _Pos));
; 1171 : 		}
; 1172 : 
; 1173 : 	reference at(size_type _Pos)
; 1174 : 		{	// subscript mutable sequence with checking
; 1175 : 		if (size() <= _Pos)
; 1176 : 			_Xran();
; 1177 : 		return (*(this->_Myfirst + _Pos));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reference operator[](size_type _Pos) const
; 1181 : 		{	// subscript nonmutable sequence
; 1182 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1183 : 		if (size() <= _Pos)
; 1184 : 			{	// report error
; 1185 : 			_DEBUG_ERROR("vector subscript out of range");
; 1186 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1187 : 			}
; 1188 : 
; 1189 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1190 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1191 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1192 : 
; 1193 : 		return (*(this->_Myfirst + _Pos));
; 1194 : 		}
; 1195 : 
; 1196 : 	reference operator[](size_type _Pos)
; 1197 : 		{	// subscript mutable sequence
; 1198 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1199 : 		if (size() <= _Pos)
; 1200 : 			{	// report error
; 1201 : 			_DEBUG_ERROR("vector subscript out of range");
; 1202 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1203 : 			}
; 1204 : 
; 1205 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1206 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1207 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1208 : 
; 1209 : 		return (*(this->_Myfirst + _Pos));
; 1210 : 		}
; 1211 : 
; 1212 : 	pointer data() _NOEXCEPT
; 1213 : 		{	// return address of first element
; 1214 : 		return (this->_Myfirst);
; 1215 : 		}
; 1216 : 
; 1217 : 	const_pointer data() const _NOEXCEPT
; 1218 : 		{	// return address of first element
; 1219 : 		return (this->_Myfirst);
; 1220 : 		}
; 1221 : 
; 1222 : 	reference front()
; 1223 : 		{	// return first element of mutable sequence
; 1224 : 		return (*begin());
; 1225 : 		}
; 1226 : 
; 1227 : 	const_reference front() const
; 1228 : 		{	// return first element of nonmutable sequence
; 1229 : 		return (*begin());
; 1230 : 		}
; 1231 : 
; 1232 : 	reference back()
; 1233 : 		{	// return last element of mutable sequence
; 1234 : 		return (*(end() - 1));
; 1235 : 		}
; 1236 : 
; 1237 : 	const_reference back() const
; 1238 : 		{	// return last element of nonmutable sequence
; 1239 : 		return (*(end() - 1));
; 1240 : 		}
; 1241 : 
; 1242 : 	void push_back(const value_type& _Val)
; 1243 : 		{	// insert element at end
; 1244 : 		if (_Inside(_STD addressof(_Val)))
; 1245 : 			{	// push back an element
; 1246 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1247 : 			if (this->_Mylast == this->_Myend)
; 1248 : 				_Reserve(1);
; 1249 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1250 : 			this->_Getal().construct(this->_Mylast,
; 1251 : 				this->_Myfirst[_Idx]);
; 1252 : 			++this->_Mylast;
; 1253 : 			}
; 1254 : 		else
; 1255 : 			{	// push back a non-element
; 1256 : 			if (this->_Mylast == this->_Myend)
; 1257 : 				_Reserve(1);
; 1258 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1259 : 			this->_Getal().construct(this->_Mylast,
; 1260 : 				_Val);
; 1261 : 			++this->_Mylast;
; 1262 : 			}
; 1263 : 		}
; 1264 : 
; 1265 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1266 : 	void pop_back()
; 1267 : 		{	// erase element at end
; 1268 : 		if (empty())
; 1269 : 			_DEBUG_ERROR("vector empty before pop");
; 1270 : 		else
; 1271 : 			{	// erase last element
; 1272 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1273 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1274 : 			--this->_Mylast;
; 1275 : 			}
; 1276 : 		}
; 1277 : 
; 1278 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1279 : 	void pop_back()
; 1280 : 		{	// erase element at end
; 1281 : 		this->_Getal().destroy(this->_Mylast - 1);
; 1282 : 		--this->_Mylast;
; 1283 : 		}
; 1284 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1285 : 
; 1286 : 	template<class _Iter>
; 1287 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1288 : 			void>::type
; 1289 : 		assign(_Iter _First, _Iter _Last)
; 1290 : 		{	// assign [_First, _Last)
; 1291 : 		clear();
; 1292 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1293 : 		}
; 1294 : 
; 1295 : 	template<class _Iter>
; 1296 : 		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
; 1297 : 		{	// assign [_First, _Last), input iterators
; 1298 : 		for (; _First != _Last; ++_First)
; 1299 : 			emplace_back(*_First);
; 1300 : 		}
; 1301 : 
; 1302 : 	template<class _Iter>
; 1303 : 		void _Assign(_Iter _First, _Iter _Last, forward_iterator_tag)
; 1304 : 		{	// assign [_First, _Last), forward iterators
; 1305 : 		if (_First == _Last)
; 1306 : 			return;	// nothing to do
; 1307 : 
; 1308 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1309 : 
; 1310 : 		if (capacity() < _Newsize)
; 1311 : 			{	// need more room, try to get it
; 1312 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1313 : 			_Tidy();
; 1314 : 			_Buy(_Newcapacity);
; 1315 : 			}
; 1316 : 
; 1317 : 		this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
; 1318 : 		}
; 1319 : 
; 1320 : 	void assign(size_type _Count, const value_type& _Val)
; 1321 : 		{	// assign _Count * _Val
; 1322 : 		clear();
; 1323 : 		insert(begin(), _Count, _Val);
; 1324 : 		}
; 1325 : 
; 1326 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1327 : 		{	// insert _Val at _Where
; 1328 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1329 : 		}
; 1330 : 
; 1331 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1332 : 		const _Ty& _Val)
; 1333 : 		{	// insert _Count * _Val at _Where
; 1334 : 		return (_Insert_n(_Where, _Count, _Val));
; 1335 : 		}
; 1336 : 
; 1337 : 	template<class _Iter>
; 1338 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1339 : 			iterator>::type
; 1340 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1341 : 		{	// insert [_First, _Last) at _Where
; 1342 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1343 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1344 : 		return (begin() + _Off);
; 1345 : 		}
; 1346 : 
; 1347 : 	template<class _Iter>
; 1348 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1349 : 			input_iterator_tag)
; 1350 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1351 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1352 : 
; 1353 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1354 : 		if (size() < _Off)
; 1355 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1356 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1357 : 
; 1358 : 		if (_First != _Last)
; 1359 : 			{	// worth doing, gather at end and rotate into place
; 1360 : 			size_type _Oldsize = size();
; 1361 : 
; 1362 : 			_TRY_BEGIN
; 1363 : 			for (; _First != _Last; ++_First)
; 1364 : 				push_back(*_First);	// append
; 1365 : 
; 1366 : 			_CATCH_ALL
; 1367 : 			erase(begin() + _Oldsize, end());
; 1368 : 			_RERAISE;
; 1369 : 			_CATCH_END
; 1370 : 
; 1371 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1372 : 			}
; 1373 : 		}
; 1374 : 
; 1375 : 	template<class _Iter>
; 1376 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1377 : 			forward_iterator_tag)
; 1378 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_VICONT(_Where) != this
; 1381 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1382 : 			|| this->_Mylast < _VIPTR(_Where))
; 1383 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1384 : 		_DEBUG_RANGE(_First, _Last);
; 1385 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1386 : 
; 1387 : 		size_type _Count = 0;
; 1388 : 		_Distance(_First, _Last, _Count);
; 1389 : 
; 1390 : 		if (_Count == 0)
; 1391 : 			;
; 1392 : 		else if (_Unused_capacity() < _Count)
; 1393 : 			{	// not enough room, reallocate
; 1394 : 			if (max_size() - size() < _Count)
; 1395 : 				_Xlen();	// result too long
; 1396 : 
; 1397 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1398 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1399 : 			pointer _Ptr = _Newvec;
; 1400 : 
; 1401 : 			_TRY_BEGIN
; 1402 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1403 : 				_Newvec);	// copy prefix
; 1404 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1405 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1406 : 				_Ptr);	// copy suffix
; 1407 : 			_CATCH_ALL
; 1408 : 			_Destroy(_Newvec, _Ptr);
; 1409 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1410 : 			_RERAISE;
; 1411 : 			_CATCH_END
; 1412 : 
; 1413 : 			_Count += size();
; 1414 : 			if (this->_Myfirst != pointer())
; 1415 : 				{	// destroy and deallocate old array
; 1416 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1417 : 				this->_Getal().deallocate(this->_Myfirst,
; 1418 : 					this->_Myend - this->_Myfirst);
; 1419 : 				}
; 1420 : 
; 1421 : 			this->_Orphan_all();
; 1422 : 			this->_Myend = _Newvec + _Capacity;
; 1423 : 			this->_Mylast = _Newvec + _Count;
; 1424 : 			this->_Myfirst = _Newvec;
; 1425 : 			}
; 1426 : 		else
; 1427 : 			{	// new stuff fits, append and rotate into place
; 1428 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1429 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1430 : 				this->_Mylast + _Count);
; 1431 : 			this->_Mylast += _Count;
; 1432 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1433 : 			}
; 1434 : 		}
; 1435 : 
; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 	iterator erase(const_iterator _Where)
; 1438 : 		{	// erase element at where
; 1439 : 		if (_VICONT(_Where) != this
; 1440 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1441 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1442 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1443 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1444 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1445 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1446 : 		--this->_Mylast;
; 1447 : 		return (_Make_iter(_Where));
; 1448 : 		}
; 1449 : 
; 1450 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 	iterator erase(const_iterator _Where)
; 1452 : 		{	// erase element at where
; 1453 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1454 : 			_VIPTR(_Where));
; 1455 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1456 : 		--this->_Mylast;
; 1457 : 		return (_Make_iter(_Where));
; 1458 : 		}
; 1459 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1460 : 
; 1461 : 	iterator erase(const_iterator _First_arg,
; 1462 : 		const_iterator _Last_arg)
; 1463 : 		{	// erase [_First, _Last)
; 1464 : 		if (_First_arg == begin() && _Last_arg == end())
; 1465 : 			clear();
; 1466 : 		else if (_First_arg != _Last_arg)
; 1467 : 			{	// clear partial
; 1468 : 			iterator _First = _Make_iter(_First_arg);
; 1469 : 			iterator _Last = _Make_iter(_Last_arg);
; 1470 : 
; 1471 : 			if (_First != _Last)
; 1472 : 				{	// worth doing, copy down over hole
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 				if (_Last < _First || _VICONT(_First) != this
; 1475 : 					|| _VIPTR(_First) < this->_Myfirst
; 1476 : 					|| this->_Mylast < _VIPTR(_Last))
; 1477 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1478 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1479 : 					_VIPTR(_First));
; 1480 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1484 : 					_VIPTR(_First));
; 1485 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1486 : 
; 1487 : 				_Destroy(_Ptr, this->_Mylast);
; 1488 : 				this->_Mylast = _Ptr;
; 1489 : 				}
; 1490 : 			}
; 1491 : 		return (_Make_iter(_First_arg));
; 1492 : 		}
; 1493 : 
; 1494 : 	void _Pop_back_n(size_type _Count)
; 1495 : 		{	// erase _Count elements at end
; 1496 : 		pointer _Ptr = this->_Mylast - _Count;
; 1497 : 
; 1498 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1499 : 		_Orphan_range(_Ptr, this->_Mylast);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 
; 1502 : 		_Destroy(_Ptr, this->_Mylast);
; 1503 : 		this->_Mylast = _Ptr;
; 1504 : 		}
; 1505 : 
; 1506 : 	void clear() _NOEXCEPT
; 1507 : 		{	// erase all
; 1508 : 		this->_Orphan_all();
; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1510 : 		this->_Mylast = this->_Myfirst;
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		{	// exchange contents with _Right
; 1515 : 		if (this == &_Right)
; 1516 : 			;	// same object, do nothing
; 1517 : 		else if (this->_Getal() == _Right._Getal())
; 1518 : 			{	// same allocator, swap control information
; 1519 : 			this->_Swap_all(_Right);
; 1520 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1521 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1522 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1529 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1530 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1531 : 			}
; 1532 : 
; 1533 : 		else
; 1534 : 			{	// containers are incompatible
; 1535 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1536 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1537 : 
; 1538 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1539 : 			_XSTD terminate();
; 1540 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1541 : 			}
; 1542 : 		}
; 1543 : 
; 1544 : protected:
; 1545 : 	bool _Buy(size_type _Capacity)
; 1546 : 		{	// allocate array with _Capacity elements
; 1547 : 		this->_Myfirst = pointer();
; 1548 : 		this->_Mylast = pointer();
; 1549 : 		this->_Myend = pointer();
; 1550 : 
; 1551 : 		if (_Capacity == 0)
; 1552 : 			return (false);
; 1553 : 		else if (max_size() < _Capacity)
; 1554 : 			_Xlen();	// result too long
; 1555 : 		else
; 1556 : 			{	// nonempty array, allocate storage
; 1557 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1558 : 			this->_Mylast = this->_Myfirst;
; 1559 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1560 : 			}
; 1561 : 		return (true);
; 1562 : 		}
; 1563 : 
; 1564 : 	void _Destroy(pointer _First, pointer _Last)
; 1565 : 		{	// destroy [_First, _Last) using allocator
; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}
; 1569 : 
; 1570 : 	size_type _Grow_to(size_type _Count) const
; 1571 : 		{	// grow by 50% or at least to _Count
; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00050	03 d0		 add	 edx, eax

; 1576 : 		if (_Capacity < _Count)

  00052	3b d6		 cmp	 edx, esi
  00054	5f		 pop	 edi
  00055	0f 42 d6	 cmovb	 edx, esi
  00058	5e		 pop	 esi

; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));

  00059	89 55 08	 mov	 DWORD PTR __Count$[ebp], edx

; 1618 : 			}
; 1619 : 		}

  0005c	5d		 pop	 ebp

; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));

  0005d	e9 00 00 00 00	 jmp	 ?_Reallocate@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IAEXI@Z ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Reallocate
$LN2@Reserve:
  00062	5f		 pop	 edi
  00063	5e		 pop	 esi

; 1618 : 			}
; 1619 : 		}

  00064	5d		 pop	 ebp
  00065	c2 04 00	 ret	 4
$LN43@Reserve:

; 1620 : 
; 1621 : 	void _Tidy()
; 1622 : 		{	// free all storage
; 1623 : 		if (this->_Myfirst != pointer())
; 1624 : 			{	// something to free, destroy and deallocate it
; 1625 : 			this->_Orphan_all();
; 1626 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1627 : 			this->_Getal().deallocate(this->_Myfirst,
; 1628 : 				this->_Myend - this->_Myfirst);
; 1629 : 			this->_Myfirst = pointer();
; 1630 : 			this->_Mylast = pointer();
; 1631 : 			this->_Myend = pointer();
; 1632 : 			}
; 1633 : 		}
; 1634 : 
; 1635 : 	template<class _Iter>
; 1636 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1637 : 		{	// copy initializing [_First, _Last), using allocator
; 1638 : 		_Alty _Alval(this->_Getal());
; 1639 : 		return (_Uninitialized_copy(_First, _Last,
; 1640 : 			_Ptr, _Alval));
; 1641 : 		}
; 1642 : 
; 1643 : 	template<class _Iter>
; 1644 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1645 : 		{	// move initializing [_First, _Last), using allocator
; 1646 : 		_Alty _Alval(this->_Getal());
; 1647 : 		return (_Uninitialized_move(_First, _Last,
; 1648 : 			_Ptr, _Alval));
; 1649 : 		}
; 1650 : 
; 1651 : 	iterator _Insert_n(const_iterator _Where,
; 1652 : 		size_type _Count, const value_type& _Val)
; 1653 : 		{	// insert _Count * _Val at _Where
; 1654 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1655 : 		if (_VICONT(_Where) != this
; 1656 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1657 : 			|| this->_Mylast < _VIPTR(_Where))
; 1658 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1659 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1660 : 
; 1661 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1662 : 		if (_Count == 0)
; 1663 : 			;
; 1664 : 		else if (_Unused_capacity() < _Count)
; 1665 : 			{	// not enough room, reallocate
; 1666 : 			if (max_size() - size() < _Count)
; 1667 : 				_Xlen();	// result too long
; 1668 : 
; 1669 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1670 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1671 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst;
; 1672 : 			int _Ncopied = 0;
; 1673 : 
; 1674 : 			_TRY_BEGIN
; 1675 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1676 : 				_STD addressof(_Val));	// add new stuff
; 1677 : 			++_Ncopied;
; 1678 : 			_Umove(this->_Myfirst, _VIPTR(_Where),
; 1679 : 				_Newvec);	// copy prefix
; 1680 : 			++_Ncopied;
; 1681 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1682 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1683 : 			_CATCH_ALL
; 1684 : 			if (1 < _Ncopied)
; 1685 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1686 : 			if (0 < _Ncopied)
; 1687 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1688 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1689 : 			_RERAISE;
; 1690 : 			_CATCH_END
; 1691 : 
; 1692 : 			_Count += size();
; 1693 : 			if (this->_Myfirst != pointer())
; 1694 : 				{	// destroy and deallocate old array
; 1695 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1696 : 				this->_Getal().deallocate(this->_Myfirst,
; 1697 : 					this->_Myend - this->_Myfirst);
; 1698 : 				}
; 1699 : 
; 1700 : 			this->_Orphan_all();
; 1701 : 			this->_Myend = _Newvec + _Capacity;
; 1702 : 			this->_Mylast = _Newvec + _Count;
; 1703 : 			this->_Myfirst = _Newvec;
; 1704 : 			}
; 1705 : 		else if ((size_type)(this->_Mylast - _VIPTR(_Where))
; 1706 : 			< _Count)
; 1707 : 			{	// new stuff spills off end
; 1708 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1709 : 
; 1710 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1711 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1712 : 
; 1713 : 			_TRY_BEGIN
; 1714 : 			_Ufill(this->_Mylast,
; 1715 : 				_Count - (this->_Mylast - _VIPTR(_Where)),
; 1716 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1717 : 			_CATCH_ALL
; 1718 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1719 : 				this->_Mylast + _Count);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			this->_Mylast += _Count;
; 1724 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1725 : 			_STD fill(_VIPTR(_Where), this->_Mylast - _Count,
; 1726 : 				_Tmp);	// insert up to old end
; 1727 : 			}
; 1728 : 		else
; 1729 : 			{	// new stuff can all be assigned
; 1730 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1731 : 
; 1732 : 			pointer _Oldend = this->_Mylast;
; 1733 : 			this->_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1734 : 				this->_Mylast);	// copy suffix
; 1735 : 
; 1736 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1737 : 			_Copy_backward(_VIPTR(_Where), _Oldend - _Count,
; 1738 : 				_Oldend);	// copy hole
; 1739 : 			_STD fill(_VIPTR(_Where),
; 1740 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1741 : 			}
; 1742 : 		return (begin() + _Off);
; 1743 : 		}
; 1744 : 
; 1745 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1746 : 		{	// copy initializing _Count * _Val, using allocator
; 1747 : 		_Alty _Alval(this->_Getal());
; 1748 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, _Alval);
; 1749 : 		return (_Ptr + _Count);
; 1750 : 		}
; 1751 : 
; 1752 : 	__declspec(noreturn) void _Xlen() const
; 1753 : 		{	// report a length_error
; 1754 : 		_Xlength_error("vector<T> too long");

  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0006d	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN45@Reserve:
$LN42@Reserve:
  00072	cc		 int	 3
?_Reserve@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$1$ = 8						; size = 4
__Count$ = 8						; size = 4
?_Reallocate@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IAEXI@Z PROC ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Reallocate, COMDAT
; _this$ = ecx

; 1587 : 		{	// move to array of exactly _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; File a:\vs\vc\include\xmemory0

; 25   : 	if (_Count == 0)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00007	56		 push	 esi

; 23   : 	void *_Ptr = 0;

  00008	33 f6		 xor	 esi, esi
  0000a	57		 push	 edi
; File a:\vs\vc\include\vector

; 1587 : 		{	// move to array of exactly _Count elements

  0000b	8b f9		 mov	 edi, ecx
; File a:\vs\vc\include\xmemory0

; 25   : 	if (_Count == 0)

  0000d	85 db		 test	 ebx, ebx
  0000f	74 1e		 je	 SHORT $LN16@Reallocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00011	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  00017	77 5d		 ja	 SHORT $LN61@Reallocate
  00019	8d 04 9d 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*4]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00026	8b f0		 mov	 esi, eax
  00028	83 c4 04	 add	 esp, 4
  0002b	85 f6		 test	 esi, esi
  0002d	74 47		 je	 SHORT $LN61@Reallocate
$LN16@Reallocate:
; File a:\vs\vc\include\vector

; 1591 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  0002f	8b 0f		 mov	 ecx, DWORD PTR [edi]
; File a:\vs\vc\include\xmemory

; 472  : 	size_t _Count = (size_t)(_Last - _First);

  00031	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00034	2b c1		 sub	 eax, ecx

; 474  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  00036	83 e0 fc	 and	 eax, -4			; fffffffcH
  00039	50		 push	 eax
  0003a	51		 push	 ecx
  0003b	56		 push	 esi
  0003c	e8 00 00 00 00	 call	 _memmove
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00041	8b 0f		 mov	 ecx, DWORD PTR [edi]
; File a:\vs\vc\include\xmemory

; 474  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  00043	83 c4 0c	 add	 esp, 12			; 0000000cH
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00046	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00049	2b c1		 sub	 eax, ecx
  0004b	c1 f8 02	 sar	 eax, 2
  0004e	89 45 08	 mov	 DWORD PTR __Size$1$[ebp], eax

; 1592 : 		_CATCH_ALL
; 1593 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1594 : 		_RERAISE;
; 1595 : 		_CATCH_END
; 1596 : 
; 1597 : 		size_type _Size = size();
; 1598 : 		if (this->_Myfirst != pointer())

  00051	85 c9		 test	 ecx, ecx
  00053	74 09		 je	 SHORT $LN56@Reallocate
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00055	51		 push	 ecx
  00056	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0005b	83 c4 04	 add	 esp, 4
$LN56@Reallocate:
; File a:\vs\vc\include\vector

; 1606 : 		this->_Myend = _Ptr + _Count;

  0005e	8d 04 9e	 lea	 eax, DWORD PTR [esi+ebx*4]

; 1607 : 		this->_Mylast = _Ptr + _Size;
; 1608 : 		this->_Myfirst = _Ptr;

  00061	89 37		 mov	 DWORD PTR [edi], esi
  00063	89 47 08	 mov	 DWORD PTR [edi+8], eax
  00066	8b 45 08	 mov	 eax, DWORD PTR __Size$1$[ebp]
  00069	8d 04 86	 lea	 eax, DWORD PTR [esi+eax*4]
  0006c	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx

; 1609 : 		}

  00072	5d		 pop	 ebp
  00073	c2 04 00	 ret	 4
$LN61@Reallocate:
; File a:\vs\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  00076	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN63@Reallocate:
$LN60@Reallocate:
  0007b	cc		 int	 3
?_Reallocate@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Reallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Inside@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IBE_NPBQAVCFlyTrace@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IBE_NPBQAVCFlyTrace@@@Z PROC ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Inside, COMDAT
; _this$ = ecx

; 1582 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1583 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0a		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 06		 ja	 SHORT $LN3@Inside
  0000f	b0 01		 mov	 al, 1

; 1584 : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
$LN3@Inside:

; 1583 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00015	32 c0		 xor	 al, al

; 1584 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?_Inside@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IBE_NPBQAVCFlyTrace@@@Z ENDP ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IBEII@Z PROC ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Grow_to, COMDAT
; _this$ = ecx

; 1571 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1010 : 		return (this->_Myend - this->_Myfirst);

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]

; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00006	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 1010 : 		return (this->_Myend - this->_Myfirst);

  0000b	2b 11		 sub	 edx, DWORD PTR [ecx]
  0000d	c1 fa 02	 sar	 edx, 2

; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00010	8b ca		 mov	 ecx, edx
  00012	d1 e9		 shr	 ecx, 1
  00014	2b c1		 sub	 eax, ecx
  00016	3b c2		 cmp	 eax, edx
  00018	73 0f		 jae	 SHORT $LN4@Grow_to
  0001a	33 d2		 xor	 edx, edx

; 1576 : 		if (_Capacity < _Count)

  0001c	3b 55 08	 cmp	 edx, DWORD PTR __Count$[ebp]
  0001f	0f 42 55 08	 cmovb	 edx, DWORD PTR __Count$[ebp]

; 1577 : 			_Capacity = _Count;
; 1578 : 		return (_Capacity);

  00023	8b c2		 mov	 eax, edx

; 1579 : 		}

  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
$LN4@Grow_to:

; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00029	03 d1		 add	 edx, ecx

; 1576 : 		if (_Capacity < _Count)

  0002b	3b 55 08	 cmp	 edx, DWORD PTR __Count$[ebp]
  0002e	0f 42 55 08	 cmovb	 edx, DWORD PTR __Count$[ebp]

; 1577 : 			_Capacity = _Count;
; 1578 : 		return (_Capacity);

  00032	8b c2		 mov	 eax, edx

; 1579 : 		}

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
?_Grow_to@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IBEII@Z ENDP ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Destroy@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IAEXPAPAVCFlyTrace@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IAEXPAPAVCFlyTrace@@0@Z PROC ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Destroy, COMDAT
; _this$ = ecx

; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IAEXPAPAVCFlyTrace@@0@Z ENDP ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?clear@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXXZ PROC ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::clear, COMDAT
; _this$ = ecx

; 1508 : 		this->_Orphan_all();
; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1510 : 		this->_Mylast = this->_Myfirst;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1511 : 		}

  00005	c3		 ret	 0
?clear@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXXZ ENDP ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?pop_back@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?pop_back@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXXZ PROC ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::pop_back, COMDAT
; _this$ = ecx

; 1281 : 		this->_Getal().destroy(this->_Mylast - 1);
; 1282 : 		--this->_Mylast;

  00000	83 41 04 fc	 add	 DWORD PTR [ecx+4], -4	; fffffffcH

; 1283 : 		}

  00004	c3		 ret	 0
?pop_back@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXXZ ENDP ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::pop_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
;	COMDAT ?push_back@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXABQAVCFlyTrace@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXABQAVCFlyTrace@@@Z PROC ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::push_back, COMDAT
; _this$ = ecx

; 1243 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 1264 : 
; 1265 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1266 : 	void pop_back()
; 1267 : 		{	// erase element at end
; 1268 : 		if (empty())
; 1269 : 			_DEBUG_ERROR("vector empty before pop");
; 1270 : 		else
; 1271 : 			{	// erase last element
; 1272 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1273 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1274 : 			--this->_Mylast;
; 1275 : 			}
; 1276 : 		}
; 1277 : 
; 1278 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1279 : 	void pop_back()
; 1280 : 		{	// erase element at end
; 1281 : 		this->_Getal().destroy(this->_Mylast - 1);
; 1282 : 		--this->_Mylast;
; 1283 : 		}
; 1284 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1285 : 
; 1286 : 	template<class _Iter>
; 1287 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1288 : 			void>::type
; 1289 : 		assign(_Iter _First, _Iter _Last)
; 1290 : 		{	// assign [_First, _Last)
; 1291 : 		clear();
; 1292 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1293 : 		}
; 1294 : 
; 1295 : 	template<class _Iter>
; 1296 : 		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
; 1297 : 		{	// assign [_First, _Last), input iterators
; 1298 : 		for (; _First != _Last; ++_First)
; 1299 : 			emplace_back(*_First);
; 1300 : 		}
; 1301 : 
; 1302 : 	template<class _Iter>
; 1303 : 		void _Assign(_Iter _First, _Iter _Last, forward_iterator_tag)
; 1304 : 		{	// assign [_First, _Last), forward iterators
; 1305 : 		if (_First == _Last)
; 1306 : 			return;	// nothing to do
; 1307 : 
; 1308 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1309 : 
; 1310 : 		if (capacity() < _Newsize)
; 1311 : 			{	// need more room, try to get it
; 1312 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1313 : 			_Tidy();
; 1314 : 			_Buy(_Newcapacity);
; 1315 : 			}
; 1316 : 
; 1317 : 		this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
; 1318 : 		}
; 1319 : 
; 1320 : 	void assign(size_type _Count, const value_type& _Val)
; 1321 : 		{	// assign _Count * _Val
; 1322 : 		clear();
; 1323 : 		insert(begin(), _Count, _Val);
; 1324 : 		}
; 1325 : 
; 1326 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1327 : 		{	// insert _Val at _Where
; 1328 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1329 : 		}
; 1330 : 
; 1331 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1332 : 		const _Ty& _Val)
; 1333 : 		{	// insert _Count * _Val at _Where
; 1334 : 		return (_Insert_n(_Where, _Count, _Val));
; 1335 : 		}
; 1336 : 
; 1337 : 	template<class _Iter>
; 1338 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1339 : 			iterator>::type
; 1340 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1341 : 		{	// insert [_First, _Last) at _Where
; 1342 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1343 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1344 : 		return (begin() + _Off);
; 1345 : 		}
; 1346 : 
; 1347 : 	template<class _Iter>
; 1348 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1349 : 			input_iterator_tag)
; 1350 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1351 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1352 : 
; 1353 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1354 : 		if (size() < _Off)
; 1355 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1356 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1357 : 
; 1358 : 		if (_First != _Last)
; 1359 : 			{	// worth doing, gather at end and rotate into place
; 1360 : 			size_type _Oldsize = size();
; 1361 : 
; 1362 : 			_TRY_BEGIN
; 1363 : 			for (; _First != _Last; ++_First)
; 1364 : 				push_back(*_First);	// append
; 1365 : 
; 1366 : 			_CATCH_ALL
; 1367 : 			erase(begin() + _Oldsize, end());
; 1368 : 			_RERAISE;
; 1369 : 			_CATCH_END
; 1370 : 
; 1371 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1372 : 			}
; 1373 : 		}
; 1374 : 
; 1375 : 	template<class _Iter>
; 1376 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1377 : 			forward_iterator_tag)
; 1378 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_VICONT(_Where) != this
; 1381 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1382 : 			|| this->_Mylast < _VIPTR(_Where))
; 1383 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1384 : 		_DEBUG_RANGE(_First, _Last);
; 1385 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1386 : 
; 1387 : 		size_type _Count = 0;
; 1388 : 		_Distance(_First, _Last, _Count);
; 1389 : 
; 1390 : 		if (_Count == 0)
; 1391 : 			;
; 1392 : 		else if (_Unused_capacity() < _Count)
; 1393 : 			{	// not enough room, reallocate
; 1394 : 			if (max_size() - size() < _Count)
; 1395 : 				_Xlen();	// result too long
; 1396 : 
; 1397 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1398 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1399 : 			pointer _Ptr = _Newvec;
; 1400 : 
; 1401 : 			_TRY_BEGIN
; 1402 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1403 : 				_Newvec);	// copy prefix
; 1404 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1405 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1406 : 				_Ptr);	// copy suffix
; 1407 : 			_CATCH_ALL
; 1408 : 			_Destroy(_Newvec, _Ptr);
; 1409 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1410 : 			_RERAISE;
; 1411 : 			_CATCH_END
; 1412 : 
; 1413 : 			_Count += size();
; 1414 : 			if (this->_Myfirst != pointer())
; 1415 : 				{	// destroy and deallocate old array
; 1416 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1417 : 				this->_Getal().deallocate(this->_Myfirst,
; 1418 : 					this->_Myend - this->_Myfirst);
; 1419 : 				}
; 1420 : 
; 1421 : 			this->_Orphan_all();
; 1422 : 			this->_Myend = _Newvec + _Capacity;
; 1423 : 			this->_Mylast = _Newvec + _Count;
; 1424 : 			this->_Myfirst = _Newvec;
; 1425 : 			}
; 1426 : 		else
; 1427 : 			{	// new stuff fits, append and rotate into place
; 1428 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1429 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1430 : 				this->_Mylast + _Count);
; 1431 : 			this->_Mylast += _Count;
; 1432 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1433 : 			}
; 1434 : 		}
; 1435 : 
; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 	iterator erase(const_iterator _Where)
; 1438 : 		{	// erase element at where
; 1439 : 		if (_VICONT(_Where) != this
; 1440 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1441 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1442 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1443 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1444 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1445 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1446 : 		--this->_Mylast;
; 1447 : 		return (_Make_iter(_Where));
; 1448 : 		}
; 1449 : 
; 1450 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 	iterator erase(const_iterator _Where)
; 1452 : 		{	// erase element at where
; 1453 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1454 : 			_VIPTR(_Where));
; 1455 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1456 : 		--this->_Mylast;
; 1457 : 		return (_Make_iter(_Where));
; 1458 : 		}
; 1459 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1460 : 
; 1461 : 	iterator erase(const_iterator _First_arg,
; 1462 : 		const_iterator _Last_arg)
; 1463 : 		{	// erase [_First, _Last)
; 1464 : 		if (_First_arg == begin() && _Last_arg == end())
; 1465 : 			clear();
; 1466 : 		else if (_First_arg != _Last_arg)
; 1467 : 			{	// clear partial
; 1468 : 			iterator _First = _Make_iter(_First_arg);
; 1469 : 			iterator _Last = _Make_iter(_Last_arg);
; 1470 : 
; 1471 : 			if (_First != _Last)
; 1472 : 				{	// worth doing, copy down over hole
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 				if (_Last < _First || _VICONT(_First) != this
; 1475 : 					|| _VIPTR(_First) < this->_Myfirst
; 1476 : 					|| this->_Mylast < _VIPTR(_Last))
; 1477 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1478 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1479 : 					_VIPTR(_First));
; 1480 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1484 : 					_VIPTR(_First));
; 1485 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1486 : 
; 1487 : 				_Destroy(_Ptr, this->_Mylast);
; 1488 : 				this->_Mylast = _Ptr;
; 1489 : 				}
; 1490 : 			}
; 1491 : 		return (_Make_iter(_First_arg));
; 1492 : 		}
; 1493 : 
; 1494 : 	void _Pop_back_n(size_type _Count)
; 1495 : 		{	// erase _Count elements at end
; 1496 : 		pointer _Ptr = this->_Mylast - _Count;
; 1497 : 
; 1498 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1499 : 		_Orphan_range(_Ptr, this->_Mylast);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 
; 1502 : 		_Destroy(_Ptr, this->_Mylast);
; 1503 : 		this->_Mylast = _Ptr;
; 1504 : 		}
; 1505 : 
; 1506 : 	void clear() _NOEXCEPT
; 1507 : 		{	// erase all
; 1508 : 		this->_Orphan_all();
; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1510 : 		this->_Mylast = this->_Myfirst;
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		{	// exchange contents with _Right
; 1515 : 		if (this == &_Right)
; 1516 : 			;	// same object, do nothing
; 1517 : 		else if (this->_Getal() == _Right._Getal())
; 1518 : 			{	// same allocator, swap control information
; 1519 : 			this->_Swap_all(_Right);
; 1520 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1521 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1522 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1529 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1530 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1531 : 			}
; 1532 : 
; 1533 : 		else
; 1534 : 			{	// containers are incompatible
; 1535 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1536 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1537 : 
; 1538 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1539 : 			_XSTD terminate();
; 1540 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1541 : 			}
; 1542 : 		}
; 1543 : 
; 1544 : protected:
; 1545 : 	bool _Buy(size_type _Capacity)
; 1546 : 		{	// allocate array with _Capacity elements
; 1547 : 		this->_Myfirst = pointer();
; 1548 : 		this->_Mylast = pointer();
; 1549 : 		this->_Myend = pointer();
; 1550 : 
; 1551 : 		if (_Capacity == 0)
; 1552 : 			return (false);
; 1553 : 		else if (max_size() < _Capacity)
; 1554 : 			_Xlen();	// result too long
; 1555 : 		else
; 1556 : 			{	// nonempty array, allocate storage
; 1557 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1558 : 			this->_Mylast = this->_Myfirst;
; 1559 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1560 : 			}
; 1561 : 		return (true);
; 1562 : 		}
; 1563 : 
; 1564 : 	void _Destroy(pointer _First, pointer _Last)
; 1565 : 		{	// destroy [_First, _Last) using allocator
; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}
; 1569 : 
; 1570 : 	size_type _Grow_to(size_type _Count) const
; 1571 : 		{	// grow by 50% or at least to _Count
; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1576 : 		if (_Capacity < _Count)
; 1577 : 			_Capacity = _Count;
; 1578 : 		return (_Capacity);
; 1579 : 		}
; 1580 : 
; 1581 : 	bool _Inside(const value_type *_Ptr) const
; 1582 : 		{	// test if _Ptr points inside vector
; 1583 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 31		 jae	 SHORT $LN4@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 2b		 ja	 SHORT $LN4@push_back

; 1244 : 		if (_Inside(_STD addressof(_Val)))
; 1245 : 			{	// push back an element
; 1246 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 02	 sar	 edi, 2

; 1247 : 			if (this->_Mylast == this->_Myend)

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN3@push_back

; 1248 : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IAEXI@Z ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Reserve
$LN3@push_back:
; File a:\vs\vc\include\xmemory0

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  0002a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0002d	85 c9		 test	 ecx, ecx
  0002f	74 2a		 je	 SHORT $LN49@push_back
  00031	8b 06		 mov	 eax, DWORD PTR [esi]
  00033	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]

; 593  : 		::new ((void *)_Ptr) _Ty(_Val);

  00036	89 01		 mov	 DWORD PTR [ecx], eax
; File a:\vs\vc\include\vector

; 1261 : 			++this->_Mylast;

  00038	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi

; 1262 : 			}
; 1263 : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN4@push_back:

; 1249 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1250 : 			this->_Getal().construct(this->_Mylast,
; 1251 : 				this->_Myfirst[_Idx]);
; 1252 : 			++this->_Mylast;
; 1253 : 			}
; 1254 : 		else
; 1255 : 			{	// push back a non-element
; 1256 : 			if (this->_Mylast == this->_Myend)

  00042	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  00045	75 09		 jne	 SHORT $LN1@push_back

; 1257 : 				_Reserve(1);

  00047	6a 01		 push	 1
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@IAEXI@Z ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Reserve
$LN1@push_back:
; File a:\vs\vc\include\xmemory0

; 593  : 		::new ((void *)_Ptr) _Ty(_Val);

  00050	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00053	85 c9		 test	 ecx, ecx
  00055	74 04		 je	 SHORT $LN49@push_back
  00057	8b 07		 mov	 eax, DWORD PTR [edi]
  00059	89 01		 mov	 DWORD PTR [ecx], eax
$LN49@push_back:
; File a:\vs\vc\include\vector

; 1261 : 			++this->_Mylast;

  0005b	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi

; 1262 : 			}
; 1263 : 		}

  00061	5d		 pop	 ebp
  00062	c2 04 00	 ret	 4
?push_back@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXABQAVCFlyTrace@@@Z ENDP ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?back@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEAAPAVCFlyTrace@@XZ
_TEXT	SEGMENT
?back@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEAAPAVCFlyTrace@@XZ PROC ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::back, COMDAT
; _this$ = ecx

; 170  : 		_Ptr += _Off;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 e8 04	 sub	 eax, 4

; 1234 : 		return (*(end() - 1));
; 1235 : 		}

  00006	c3		 ret	 0
?back@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEAAPAVCFlyTrace@@XZ ENDP ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?empty@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QBE_NXZ PROC ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::empty, COMDAT
; _this$ = ecx

; 1158 : 		return (this->_Myfirst == this->_Mylast);

  00000	8b 11		 mov	 edx, DWORD PTR [ecx]
  00002	33 c0		 xor	 eax, eax
  00004	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00007	0f 94 c0	 sete	 al

; 1159 : 		}

  0000a	c3		 ret	 0
?empty@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QBE_NXZ ENDP ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::empty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?max_size@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QBEIXZ PROC ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::max_size, COMDAT
; _this$ = ecx

; 1153 : 		return (this->_Getal().max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 1154 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QBEIXZ ENDP ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?size@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QBEIXZ PROC ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::size, COMDAT
; _this$ = ecx

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 1149 : 		}

  00008	c3		 ret	 0
?size@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QBEIXZ ENDP ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?end@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@2@XZ PROC ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::end, COMDAT
; _this$ = ecx

; 1034 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 		{	// construct with pointer _Parg

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 1035 : 		return (iterator(this->_Mylast, this));
; 1036 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@2@XZ ENDP ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?begin@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@2@XZ PROC ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::begin, COMDAT
; _this$ = ecx

; 1024 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 		{	// construct with pointer _Parg

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1025 : 		return (iterator(this->_Myfirst, this));
; 1026 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@2@XZ ENDP ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QBEIXZ PROC ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 1015 : 		return (this->_Myend - this->_Mylast);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00006	c1 f8 02	 sar	 eax, 2

; 1016 : 		}

  00009	c3		 ret	 0
?_Unused_capacity@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QBEIXZ ENDP ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?capacity@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QBEIXZ PROC ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::capacity, COMDAT
; _this$ = ecx

; 1010 : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 1011 : 		}

  00008	c3		 ret	 0
?capacity@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QBEIXZ ENDP ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
;	COMDAT ??1?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAE@XZ PROC ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::~vector<CFlyTrace *,std::allocator<CFlyTrace *> >, COMDAT
; _this$ = ecx

; 944  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 947  : 
; 948  : 	_Myt& operator=(const _Myt& _Right)
; 949  : 		{	// assign _Right
; 950  : 		if (this != &_Right)
; 951  : 			{	// different, assign it
; 952  : 			if (this->_Getal() != _Right._Getal()
; 953  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 954  : 				{	// change allocator before copying
; 955  : 				_Tidy();
; 956  : 				this->_Change_alloc(_Right._Getal());
; 957  : 				}
; 958  : 
; 959  : 			this->_Orphan_all();
; 960  : 
; 961  : 			if (_Right.empty())
; 962  : 				clear();	// new sequence empty, erase existing sequence
; 963  : 			else if (_Right.size() <= size())
; 964  : 				{	// enough elements, copy new and destroy old
; 965  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst,
; 966  : 					_Right._Mylast, this->_Myfirst);	// copy new
; 967  : 				_Destroy(_Ptr, this->_Mylast);	// destroy old
; 968  : 				this->_Mylast = this->_Myfirst + _Right.size();
; 969  : 				}
; 970  : 			else if (_Right.size() <= capacity())
; 971  : 				{	// enough room, copy and construct new
; 972  : 				pointer _Ptr = _Right._Myfirst + size();
; 973  : 				_Copy_impl(_Right._Myfirst,
; 974  : 					_Ptr, this->_Myfirst);
; 975  : 				this->_Mylast = _Ucopy(_Ptr, _Right._Mylast, this->_Mylast);
; 976  : 				}
; 977  : 			else
; 978  : 				{	// not enough room, allocate new array and construct new
; 979  : 				if (this->_Myfirst != pointer())
; 980  : 					{	// discard old array
; 981  : 					_Destroy(this->_Myfirst, this->_Mylast);
; 982  : 					this->_Getal().deallocate(this->_Myfirst,
; 983  : 						this->_Myend - this->_Myfirst);
; 984  : 					}
; 985  : 				if (_Buy(_Right.size()))
; 986  : 					_TRY_BEGIN
; 987  : 					this->_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 988  : 						this->_Myfirst);
; 989  : 					_CATCH_ALL
; 990  : 					_Tidy();
; 991  : 					_RERAISE;
; 992  : 					_CATCH_END
; 993  : 				}
; 994  : 			}
; 995  : 		return (*this);
; 996  : 		}
; 997  : 
; 998  : 	void reserve(size_type _Count)
; 999  : 		{	// determine new minimum length of allocated storage
; 1000 : 		if (capacity() < _Count)
; 1001 : 			{	// something to do, check and reallocate
; 1002 : 			if (max_size() < _Count)
; 1003 : 				_Xlen();
; 1004 : 			_Reallocate(_Count);
; 1005 : 			}
; 1006 : 		}
; 1007 : 
; 1008 : 	size_type capacity() const _NOEXCEPT
; 1009 : 		{	// return current length of allocated storage
; 1010 : 		return (this->_Myend - this->_Myfirst);
; 1011 : 		}
; 1012 : 
; 1013 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1014 : 		{	// micro-optimization for capacity() - size()
; 1015 : 		return (this->_Myend - this->_Mylast);
; 1016 : 		}
; 1017 : 
; 1018 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1019 : 		{	// micro-optimization for capacity() != size()
; 1020 : 		return (this->_Myend != this->_Mylast);
; 1021 : 		}
; 1022 : 
; 1023 : 	iterator begin() _NOEXCEPT
; 1024 : 		{	// return iterator for beginning of mutable sequence
; 1025 : 		return (iterator(this->_Myfirst, this));
; 1026 : 		}
; 1027 : 
; 1028 : 	const_iterator begin() const _NOEXCEPT
; 1029 : 		{	// return iterator for beginning of nonmutable sequence
; 1030 : 		return (const_iterator(this->_Myfirst, this));
; 1031 : 		}
; 1032 : 
; 1033 : 	iterator end() _NOEXCEPT
; 1034 : 		{	// return iterator for end of mutable sequence
; 1035 : 		return (iterator(this->_Mylast, this));
; 1036 : 		}
; 1037 : 
; 1038 : 	const_iterator end() const _NOEXCEPT
; 1039 : 		{	// return iterator for end of nonmutable sequence
; 1040 : 		return (const_iterator(this->_Mylast, this));
; 1041 : 		}
; 1042 : 
; 1043 : 	iterator _Make_iter(const_iterator _Where) const
; 1044 : 		{	// make iterator from const_iterator
; 1045 : 		return (iterator(_Where._Ptr, this));
; 1046 : 		}
; 1047 : 
; 1048 : 	reverse_iterator rbegin() _NOEXCEPT
; 1049 : 		{	// return iterator for beginning of reversed mutable sequence
; 1050 : 		return (reverse_iterator(end()));
; 1051 : 		}
; 1052 : 
; 1053 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1054 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1055 : 		return (const_reverse_iterator(end()));
; 1056 : 		}
; 1057 : 
; 1058 : 	reverse_iterator rend() _NOEXCEPT
; 1059 : 		{	// return iterator for end of reversed mutable sequence
; 1060 : 		return (reverse_iterator(begin()));
; 1061 : 		}
; 1062 : 
; 1063 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1064 : 		{	// return iterator for end of reversed nonmutable sequence
; 1065 : 		return (const_reverse_iterator(begin()));
; 1066 : 		}
; 1067 : 
; 1068 : 	const_iterator cbegin() const _NOEXCEPT
; 1069 : 		{	// return iterator for beginning of nonmutable sequence
; 1070 : 		return (((const _Myt *)this)->begin());
; 1071 : 		}
; 1072 : 
; 1073 : 	const_iterator cend() const _NOEXCEPT
; 1074 : 		{	// return iterator for end of nonmutable sequence
; 1075 : 		return (((const _Myt *)this)->end());
; 1076 : 		}
; 1077 : 
; 1078 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1079 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1080 : 		return (((const _Myt *)this)->rbegin());
; 1081 : 		}
; 1082 : 
; 1083 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1084 : 		{	// return iterator for end of reversed nonmutable sequence
; 1085 : 		return (((const _Myt *)this)->rend());
; 1086 : 		}
; 1087 : 
; 1088 : 	void shrink_to_fit()
; 1089 : 		{	// reduce capacity
; 1090 : 		if (_Has_unused_capacity())
; 1091 : 			{	// worth shrinking, do it
; 1092 : 			if (empty())
; 1093 : 				_Tidy();
; 1094 : 			else
; 1095 : 				_Reallocate(size());
; 1096 : 			}
; 1097 : 		}
; 1098 : 
; 1099 : 	void resize(size_type _Newsize)
; 1100 : 		{	// determine new length, padding as needed
; 1101 : 		if (_Newsize < size())
; 1102 : 			_Pop_back_n(size() - _Newsize);
; 1103 : 		else if (size() < _Newsize)
; 1104 : 			{	// pad as needed
; 1105 : 			_Alty _Alval(this->_Getal());
; 1106 : 			_Reserve(_Newsize - size());
; 1107 : 			_TRY_BEGIN
; 1108 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1109 : 				_Alval);
; 1110 : 			_CATCH_ALL
; 1111 : 			_Tidy();
; 1112 : 			_RERAISE;
; 1113 : 			_CATCH_END
; 1114 : 			this->_Mylast += _Newsize - size();
; 1115 : 			}
; 1116 : 		}
; 1117 : 
; 1118 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1119 : 		{	// determine new length, padding with _Val elements as needed
; 1120 : 		if (_Newsize < size())
; 1121 : 			_Pop_back_n(size() - _Newsize);
; 1122 : 		else if (size() < _Newsize)
; 1123 : 			{	// pad as needed
; 1124 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1125 : 
; 1126 : 			if (_Inside(_Ptr))
; 1127 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1128 : 				const difference_type _Idx = _Ptr
; 1129 : 					- _STD addressof(*this->_Myfirst);
; 1130 : 				_Reserve(_Newsize - size());
; 1131 : 				_Ptr = _STD addressof(*this->_Myfirst) + _Idx;
; 1132 : 				}
; 1133 : 			else
; 1134 : 				_Reserve(_Newsize - size());
; 1135 : 
; 1136 : 			_TRY_BEGIN
; 1137 : 			_Ufill(this->_Mylast, _Newsize - size(), _Ptr);
; 1138 : 			_CATCH_ALL
; 1139 : 			_Tidy();
; 1140 : 			_RERAISE;
; 1141 : 			_CATCH_END
; 1142 : 			this->_Mylast += _Newsize - size();
; 1143 : 			}
; 1144 : 		}
; 1145 : 
; 1146 : 	size_type size() const _NOEXCEPT
; 1147 : 		{	// return length of sequence
; 1148 : 		return (this->_Mylast - this->_Myfirst);
; 1149 : 		}
; 1150 : 
; 1151 : 	size_type max_size() const _NOEXCEPT
; 1152 : 		{	// return maximum possible length of sequence
; 1153 : 		return (this->_Getal().max_size());
; 1154 : 		}
; 1155 : 
; 1156 : 	bool empty() const _NOEXCEPT
; 1157 : 		{	// test if sequence is empty
; 1158 : 		return (this->_Myfirst == this->_Mylast);
; 1159 : 		}
; 1160 : 
; 1161 : 	_Alloc get_allocator() const _NOEXCEPT
; 1162 : 		{	// return allocator object for values
; 1163 : 		return (this->_Getal());
; 1164 : 		}
; 1165 : 
; 1166 : 	const_reference at(size_type _Pos) const
; 1167 : 		{	// subscript nonmutable sequence with checking
; 1168 : 		if (size() <= _Pos)
; 1169 : 			_Xran();
; 1170 : 		return (*(this->_Myfirst + _Pos));
; 1171 : 		}
; 1172 : 
; 1173 : 	reference at(size_type _Pos)
; 1174 : 		{	// subscript mutable sequence with checking
; 1175 : 		if (size() <= _Pos)
; 1176 : 			_Xran();
; 1177 : 		return (*(this->_Myfirst + _Pos));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reference operator[](size_type _Pos) const
; 1181 : 		{	// subscript nonmutable sequence
; 1182 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1183 : 		if (size() <= _Pos)
; 1184 : 			{	// report error
; 1185 : 			_DEBUG_ERROR("vector subscript out of range");
; 1186 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1187 : 			}
; 1188 : 
; 1189 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1190 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1191 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1192 : 
; 1193 : 		return (*(this->_Myfirst + _Pos));
; 1194 : 		}
; 1195 : 
; 1196 : 	reference operator[](size_type _Pos)
; 1197 : 		{	// subscript mutable sequence
; 1198 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1199 : 		if (size() <= _Pos)
; 1200 : 			{	// report error
; 1201 : 			_DEBUG_ERROR("vector subscript out of range");
; 1202 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1203 : 			}
; 1204 : 
; 1205 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1206 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1207 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1208 : 
; 1209 : 		return (*(this->_Myfirst + _Pos));
; 1210 : 		}
; 1211 : 
; 1212 : 	pointer data() _NOEXCEPT
; 1213 : 		{	// return address of first element
; 1214 : 		return (this->_Myfirst);
; 1215 : 		}
; 1216 : 
; 1217 : 	const_pointer data() const _NOEXCEPT
; 1218 : 		{	// return address of first element
; 1219 : 		return (this->_Myfirst);
; 1220 : 		}
; 1221 : 
; 1222 : 	reference front()
; 1223 : 		{	// return first element of mutable sequence
; 1224 : 		return (*begin());
; 1225 : 		}
; 1226 : 
; 1227 : 	const_reference front() const
; 1228 : 		{	// return first element of nonmutable sequence
; 1229 : 		return (*begin());
; 1230 : 		}
; 1231 : 
; 1232 : 	reference back()
; 1233 : 		{	// return last element of mutable sequence
; 1234 : 		return (*(end() - 1));
; 1235 : 		}
; 1236 : 
; 1237 : 	const_reference back() const
; 1238 : 		{	// return last element of nonmutable sequence
; 1239 : 		return (*(end() - 1));
; 1240 : 		}
; 1241 : 
; 1242 : 	void push_back(const value_type& _Val)
; 1243 : 		{	// insert element at end
; 1244 : 		if (_Inside(_STD addressof(_Val)))
; 1245 : 			{	// push back an element
; 1246 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1247 : 			if (this->_Mylast == this->_Myend)
; 1248 : 				_Reserve(1);
; 1249 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1250 : 			this->_Getal().construct(this->_Mylast,
; 1251 : 				this->_Myfirst[_Idx]);
; 1252 : 			++this->_Mylast;
; 1253 : 			}
; 1254 : 		else
; 1255 : 			{	// push back a non-element
; 1256 : 			if (this->_Mylast == this->_Myend)
; 1257 : 				_Reserve(1);
; 1258 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1259 : 			this->_Getal().construct(this->_Mylast,
; 1260 : 				_Val);
; 1261 : 			++this->_Mylast;
; 1262 : 			}
; 1263 : 		}
; 1264 : 
; 1265 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1266 : 	void pop_back()
; 1267 : 		{	// erase element at end
; 1268 : 		if (empty())
; 1269 : 			_DEBUG_ERROR("vector empty before pop");
; 1270 : 		else
; 1271 : 			{	// erase last element
; 1272 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1273 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1274 : 			--this->_Mylast;
; 1275 : 			}
; 1276 : 		}
; 1277 : 
; 1278 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1279 : 	void pop_back()
; 1280 : 		{	// erase element at end
; 1281 : 		this->_Getal().destroy(this->_Mylast - 1);
; 1282 : 		--this->_Mylast;
; 1283 : 		}
; 1284 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1285 : 
; 1286 : 	template<class _Iter>
; 1287 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1288 : 			void>::type
; 1289 : 		assign(_Iter _First, _Iter _Last)
; 1290 : 		{	// assign [_First, _Last)
; 1291 : 		clear();
; 1292 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1293 : 		}
; 1294 : 
; 1295 : 	template<class _Iter>
; 1296 : 		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
; 1297 : 		{	// assign [_First, _Last), input iterators
; 1298 : 		for (; _First != _Last; ++_First)
; 1299 : 			emplace_back(*_First);
; 1300 : 		}
; 1301 : 
; 1302 : 	template<class _Iter>
; 1303 : 		void _Assign(_Iter _First, _Iter _Last, forward_iterator_tag)
; 1304 : 		{	// assign [_First, _Last), forward iterators
; 1305 : 		if (_First == _Last)
; 1306 : 			return;	// nothing to do
; 1307 : 
; 1308 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1309 : 
; 1310 : 		if (capacity() < _Newsize)
; 1311 : 			{	// need more room, try to get it
; 1312 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1313 : 			_Tidy();
; 1314 : 			_Buy(_Newcapacity);
; 1315 : 			}
; 1316 : 
; 1317 : 		this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
; 1318 : 		}
; 1319 : 
; 1320 : 	void assign(size_type _Count, const value_type& _Val)
; 1321 : 		{	// assign _Count * _Val
; 1322 : 		clear();
; 1323 : 		insert(begin(), _Count, _Val);
; 1324 : 		}
; 1325 : 
; 1326 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1327 : 		{	// insert _Val at _Where
; 1328 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1329 : 		}
; 1330 : 
; 1331 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1332 : 		const _Ty& _Val)
; 1333 : 		{	// insert _Count * _Val at _Where
; 1334 : 		return (_Insert_n(_Where, _Count, _Val));
; 1335 : 		}
; 1336 : 
; 1337 : 	template<class _Iter>
; 1338 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1339 : 			iterator>::type
; 1340 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1341 : 		{	// insert [_First, _Last) at _Where
; 1342 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1343 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1344 : 		return (begin() + _Off);
; 1345 : 		}
; 1346 : 
; 1347 : 	template<class _Iter>
; 1348 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1349 : 			input_iterator_tag)
; 1350 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1351 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1352 : 
; 1353 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1354 : 		if (size() < _Off)
; 1355 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1356 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1357 : 
; 1358 : 		if (_First != _Last)
; 1359 : 			{	// worth doing, gather at end and rotate into place
; 1360 : 			size_type _Oldsize = size();
; 1361 : 
; 1362 : 			_TRY_BEGIN
; 1363 : 			for (; _First != _Last; ++_First)
; 1364 : 				push_back(*_First);	// append
; 1365 : 
; 1366 : 			_CATCH_ALL
; 1367 : 			erase(begin() + _Oldsize, end());
; 1368 : 			_RERAISE;
; 1369 : 			_CATCH_END
; 1370 : 
; 1371 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1372 : 			}
; 1373 : 		}
; 1374 : 
; 1375 : 	template<class _Iter>
; 1376 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1377 : 			forward_iterator_tag)
; 1378 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_VICONT(_Where) != this
; 1381 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1382 : 			|| this->_Mylast < _VIPTR(_Where))
; 1383 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1384 : 		_DEBUG_RANGE(_First, _Last);
; 1385 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1386 : 
; 1387 : 		size_type _Count = 0;
; 1388 : 		_Distance(_First, _Last, _Count);
; 1389 : 
; 1390 : 		if (_Count == 0)
; 1391 : 			;
; 1392 : 		else if (_Unused_capacity() < _Count)
; 1393 : 			{	// not enough room, reallocate
; 1394 : 			if (max_size() - size() < _Count)
; 1395 : 				_Xlen();	// result too long
; 1396 : 
; 1397 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1398 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1399 : 			pointer _Ptr = _Newvec;
; 1400 : 
; 1401 : 			_TRY_BEGIN
; 1402 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1403 : 				_Newvec);	// copy prefix
; 1404 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1405 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1406 : 				_Ptr);	// copy suffix
; 1407 : 			_CATCH_ALL
; 1408 : 			_Destroy(_Newvec, _Ptr);
; 1409 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1410 : 			_RERAISE;
; 1411 : 			_CATCH_END
; 1412 : 
; 1413 : 			_Count += size();
; 1414 : 			if (this->_Myfirst != pointer())
; 1415 : 				{	// destroy and deallocate old array
; 1416 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1417 : 				this->_Getal().deallocate(this->_Myfirst,
; 1418 : 					this->_Myend - this->_Myfirst);
; 1419 : 				}
; 1420 : 
; 1421 : 			this->_Orphan_all();
; 1422 : 			this->_Myend = _Newvec + _Capacity;
; 1423 : 			this->_Mylast = _Newvec + _Count;
; 1424 : 			this->_Myfirst = _Newvec;
; 1425 : 			}
; 1426 : 		else
; 1427 : 			{	// new stuff fits, append and rotate into place
; 1428 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1429 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1430 : 				this->_Mylast + _Count);
; 1431 : 			this->_Mylast += _Count;
; 1432 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1433 : 			}
; 1434 : 		}
; 1435 : 
; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 	iterator erase(const_iterator _Where)
; 1438 : 		{	// erase element at where
; 1439 : 		if (_VICONT(_Where) != this
; 1440 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1441 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1442 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1443 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1444 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1445 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1446 : 		--this->_Mylast;
; 1447 : 		return (_Make_iter(_Where));
; 1448 : 		}
; 1449 : 
; 1450 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 	iterator erase(const_iterator _Where)
; 1452 : 		{	// erase element at where
; 1453 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1454 : 			_VIPTR(_Where));
; 1455 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1456 : 		--this->_Mylast;
; 1457 : 		return (_Make_iter(_Where));
; 1458 : 		}
; 1459 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1460 : 
; 1461 : 	iterator erase(const_iterator _First_arg,
; 1462 : 		const_iterator _Last_arg)
; 1463 : 		{	// erase [_First, _Last)
; 1464 : 		if (_First_arg == begin() && _Last_arg == end())
; 1465 : 			clear();
; 1466 : 		else if (_First_arg != _Last_arg)
; 1467 : 			{	// clear partial
; 1468 : 			iterator _First = _Make_iter(_First_arg);
; 1469 : 			iterator _Last = _Make_iter(_Last_arg);
; 1470 : 
; 1471 : 			if (_First != _Last)
; 1472 : 				{	// worth doing, copy down over hole
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 				if (_Last < _First || _VICONT(_First) != this
; 1475 : 					|| _VIPTR(_First) < this->_Myfirst
; 1476 : 					|| this->_Mylast < _VIPTR(_Last))
; 1477 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1478 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1479 : 					_VIPTR(_First));
; 1480 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1484 : 					_VIPTR(_First));
; 1485 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1486 : 
; 1487 : 				_Destroy(_Ptr, this->_Mylast);
; 1488 : 				this->_Mylast = _Ptr;
; 1489 : 				}
; 1490 : 			}
; 1491 : 		return (_Make_iter(_First_arg));
; 1492 : 		}
; 1493 : 
; 1494 : 	void _Pop_back_n(size_type _Count)
; 1495 : 		{	// erase _Count elements at end
; 1496 : 		pointer _Ptr = this->_Mylast - _Count;
; 1497 : 
; 1498 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1499 : 		_Orphan_range(_Ptr, this->_Mylast);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 
; 1502 : 		_Destroy(_Ptr, this->_Mylast);
; 1503 : 		this->_Mylast = _Ptr;
; 1504 : 		}
; 1505 : 
; 1506 : 	void clear() _NOEXCEPT
; 1507 : 		{	// erase all
; 1508 : 		this->_Orphan_all();
; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1510 : 		this->_Mylast = this->_Myfirst;
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		{	// exchange contents with _Right
; 1515 : 		if (this == &_Right)
; 1516 : 			;	// same object, do nothing
; 1517 : 		else if (this->_Getal() == _Right._Getal())
; 1518 : 			{	// same allocator, swap control information
; 1519 : 			this->_Swap_all(_Right);
; 1520 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1521 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1522 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1529 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1530 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1531 : 			}
; 1532 : 
; 1533 : 		else
; 1534 : 			{	// containers are incompatible
; 1535 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1536 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1537 : 
; 1538 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1539 : 			_XSTD terminate();
; 1540 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1541 : 			}
; 1542 : 		}
; 1543 : 
; 1544 : protected:
; 1545 : 	bool _Buy(size_type _Capacity)
; 1546 : 		{	// allocate array with _Capacity elements
; 1547 : 		this->_Myfirst = pointer();
; 1548 : 		this->_Mylast = pointer();
; 1549 : 		this->_Myend = pointer();
; 1550 : 
; 1551 : 		if (_Capacity == 0)
; 1552 : 			return (false);
; 1553 : 		else if (max_size() < _Capacity)
; 1554 : 			_Xlen();	// result too long
; 1555 : 		else
; 1556 : 			{	// nonempty array, allocate storage
; 1557 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1558 : 			this->_Mylast = this->_Myfirst;
; 1559 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1560 : 			}
; 1561 : 		return (true);
; 1562 : 		}
; 1563 : 
; 1564 : 	void _Destroy(pointer _First, pointer _Last)
; 1565 : 		{	// destroy [_First, _Last) using allocator
; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}
; 1569 : 
; 1570 : 	size_type _Grow_to(size_type _Count) const
; 1571 : 		{	// grow by 50% or at least to _Count
; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1576 : 		if (_Capacity < _Count)
; 1577 : 			_Capacity = _Count;
; 1578 : 		return (_Capacity);
; 1579 : 		}
; 1580 : 
; 1581 : 	bool _Inside(const value_type *_Ptr) const
; 1582 : 		{	// test if _Ptr points inside vector
; 1583 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);
; 1584 : 		}
; 1585 : 
; 1586 : 	void _Reallocate(size_type _Count)
; 1587 : 		{	// move to array of exactly _Count elements
; 1588 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1589 : 
; 1590 : 		_TRY_BEGIN
; 1591 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);
; 1592 : 		_CATCH_ALL
; 1593 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1594 : 		_RERAISE;
; 1595 : 		_CATCH_END
; 1596 : 
; 1597 : 		size_type _Size = size();
; 1598 : 		if (this->_Myfirst != pointer())
; 1599 : 			{	// destroy and deallocate old array
; 1600 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1601 : 			this->_Getal().deallocate(this->_Myfirst,
; 1602 : 				this->_Myend - this->_Myfirst);
; 1603 : 			}
; 1604 : 
; 1605 : 		this->_Orphan_all();
; 1606 : 		this->_Myend = _Ptr + _Count;
; 1607 : 		this->_Mylast = _Ptr + _Size;
; 1608 : 		this->_Myfirst = _Ptr;
; 1609 : 		}
; 1610 : 
; 1611 : 	void _Reserve(size_type _Count)
; 1612 : 		{	// ensure room for _Count new elements, grow exponentially
; 1613 : 		if (_Unused_capacity() < _Count)
; 1614 : 			{	// need more room, try to get it
; 1615 : 			if (max_size() - size() < _Count)
; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));
; 1618 : 			}
; 1619 : 		}
; 1620 : 
; 1621 : 	void _Tidy()
; 1622 : 		{	// free all storage
; 1623 : 		if (this->_Myfirst != pointer())

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 1d		 je	 SHORT $LN3@vector
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
; File a:\vs\vc\include\vector

; 1629 : 			this->_Myfirst = pointer();

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1630 : 			this->_Mylast = pointer();

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1631 : 			this->_Myend = pointer();

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN3@vector:
  00026	5e		 pop	 esi

; 945  : 		_Tidy();
; 946  : 		}

  00027	c3		 ret	 0
??1?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAE@XZ ENDP ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::~vector<CFlyTrace *,std::allocator<CFlyTrace *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??0?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAE@XZ PROC ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::vector<CFlyTrace *,std::allocator<CFlyTrace *> >, COMDAT
; _this$ = ecx

; 482  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 681  : 		}

  00006	8b c1		 mov	 eax, ecx

; 483  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 484  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 681  : 		}

  00016	c3		 ret	 0
??0?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAE@XZ ENDP ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::vector<CFlyTrace *,std::allocator<CFlyTrace *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<CFlyTrace *,std::allocator<CFlyTrace *> > >::_Getal, COMDAT
; _this$ = ecx

; 641  : 		{	// get reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 642  : 		return (_Alty());

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 643  : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<CFlyTrace *,std::allocator<CFlyTrace *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCFlyTrace@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCFlyTrace@@@1@@Z PROC ; std::_Vector_alloc<0,std::_Vec_base_types<CFlyTrace *,std::allocator<CFlyTrace *> > >::_Vector_alloc<0,std::_Vec_base_types<CFlyTrace *,std::allocator<CFlyTrace *> > >, COMDAT
; _this$ = ecx

; 482  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 589  : 		{	// construct allocator from _Al
; 590  : 		}

  00006	8b c1		 mov	 eax, ecx

; 483  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 484  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 589  : 		{	// construct allocator from _Al
; 590  : 		}

  00016	c2 04 00	 ret	 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCFlyTrace@@@1@@Z ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<CFlyTrace *,std::allocator<CFlyTrace *> > >::_Vector_alloc<0,std::_Vec_base_types<CFlyTrace *,std::allocator<CFlyTrace *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<CFlyTrace *> >::_Vector_val<std::_Simple_types<CFlyTrace *> >, COMDAT
; _this$ = ecx

; 481  : 		{	// initialize values
; 482  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 483  : 		_Mylast = pointer();
; 484  : 		_Myend = pointer();
; 485  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<CFlyTrace *> >::_Vector_val<std::_Simple_types<CFlyTrace *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<CFlyTrace *> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (_Mytraits::max_size(*this));

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<CFlyTrace *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXPAPAVCFlyTrace@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXPAPAVCFlyTrace@@I@Z PROC ; std::_Wrap_alloc<std::allocator<CFlyTrace *> >::deallocate, COMDAT
; _this$ = ecx

; 857  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 858  : 		_Mybase::deallocate(_Ptr, _Count);
; 859  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXPAPAVCFlyTrace@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<CFlyTrace *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEPAPAVCFlyTrace@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEPAPAVCFlyTrace@@I@Z PROC ; std::_Wrap_alloc<std::allocator<CFlyTrace *> >::allocate, COMDAT
; _this$ = ecx

; 846  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 19		 je	 SHORT $LN6@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00011	77 18		 ja	 SHORT $LN14@allocate
  00013	c1 e0 02	 shl	 eax, 2
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	74 06		 je	 SHORT $LN14@allocate
$LN6@allocate:

; 847  : 		return (_Mybase::allocate(_Count));

  00025	8b c1		 mov	 eax, ecx

; 848  : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN14@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002b	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN16@allocate:
$LN13@allocate:
  00030	cc		 int	 3
?allocate@?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEPAPAVCFlyTrace@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<CFlyTrace *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<CFlyTrace *> >::_Wrap_alloc<std::allocator<CFlyTrace *> >, COMDAT
; _this$ = ecx

; 802  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<CFlyTrace *> >::_Wrap_alloc<std::allocator<CFlyTrace *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@PAVCFlyTrace@@@std@@@std@@SAIABV?$allocator@PAVCFlyTrace@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@PAVCFlyTrace@@@std@@@std@@SAIABV?$allocator@PAVCFlyTrace@@@2@@Z PROC ; std::allocator_traits<std::allocator<CFlyTrace *> >::max_size, COMDAT

; 735  : 		return (_Al.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 736  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@PAVCFlyTrace@@@std@@@std@@SAIABV?$allocator@PAVCFlyTrace@@@2@@Z ENDP ; std::allocator_traits<std::allocator<CFlyTrace *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@PAVCFlyTrace@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@PAVCFlyTrace@@@std@@QBEIXZ PROC	; std::allocator<CFlyTrace *>::max_size, COMDAT
; _this$ = ecx

; 612  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 613  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@PAVCFlyTrace@@@std@@QBEIXZ ENDP	; std::allocator<CFlyTrace *>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?construct@?$allocator@PAVCFlyTrace@@@std@@QAEXPAPAVCFlyTrace@@ABQAV3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAVCFlyTrace@@@std@@QAEXPAPAVCFlyTrace@@ABQAV3@@Z PROC ; std::allocator<CFlyTrace *>::construct, COMDAT
; _this$ = ecx

; 592  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 593  : 		::new ((void *)_Ptr) _Ty(_Val);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 594  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?construct@?$allocator@PAVCFlyTrace@@@std@@QAEXPAPAVCFlyTrace@@ABQAV3@@Z ENDP ; std::allocator<CFlyTrace *>::construct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@PAVCFlyTrace@@@std@@QAEPAPAVCFlyTrace@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVCFlyTrace@@@std@@QAEPAPAVCFlyTrace@@I@Z PROC ; std::allocator<CFlyTrace *>::allocate, COMDAT
; _this$ = ecx

; 577  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 19		 je	 SHORT $LN4@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00011	77 18		 ja	 SHORT $LN11@allocate
  00013	c1 e0 02	 shl	 eax, 2
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	74 06		 je	 SHORT $LN11@allocate
$LN4@allocate:

; 578  : 		return (_Allocate(_Count, (pointer)0));

  00025	8b c1		 mov	 eax, ecx

; 579  : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN11@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002b	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN13@allocate:
$LN10@allocate:
  00030	cc		 int	 3
?allocate@?$allocator@PAVCFlyTrace@@@std@@QAEPAPAVCFlyTrace@@I@Z ENDP ; std::allocator<CFlyTrace *>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@PAVCFlyTrace@@@std@@QAEXPAPAVCFlyTrace@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVCFlyTrace@@@std@@QAEXPAPAVCFlyTrace@@I@Z PROC ; std::allocator<CFlyTrace *>::deallocate, COMDAT
; _this$ = ecx

; 572  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 574  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$allocator@PAVCFlyTrace@@@std@@QAEXPAPAVCFlyTrace@@I@Z ENDP ; std::allocator<CFlyTrace *>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??0?$allocator@PAVCFlyTrace@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@PAVCFlyTrace@@@std@@QAE@XZ PROC		; std::allocator<CFlyTrace *>::allocator<CFlyTrace *>, COMDAT
; _this$ = ecx

; 553  : 		{	// construct default allocator (do nothing)
; 554  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@PAVCFlyTrace@@@std@@QAE@XZ ENDP		; std::allocator<CFlyTrace *>::allocator<CFlyTrace *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterlib\pool.h
;	COMDAT ?Delete@?$CDynamicPool@VCFlyTrace@@@@KAXPAVCFlyTrace@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPool@VCFlyTrace@@@@KAXPAVCFlyTrace@@@Z PROC ; CDynamicPool<CFlyTrace>::Delete, COMDAT

; 109  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 110  : 			delete pkData;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pkData$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN3@Delete
  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	6a 01		 push	 1
  0000e	ff 10		 call	 DWORD PTR [eax]
$LN3@Delete:

; 111  : 		}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?Delete@?$CDynamicPool@VCFlyTrace@@@@KAXPAVCFlyTrace@@@Z ENDP ; CDynamicPool<CFlyTrace>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterlib\pool.h
;	COMDAT ?Free@?$CDynamicPool@VCFlyTrace@@@@QAEXPAVCFlyTrace@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Free@?$CDynamicPool@VCFlyTrace@@@@QAEXPAVCFlyTrace@@@Z PROC ; CDynamicPool<CFlyTrace>::Free, COMDAT
; _this$ = ecx

; 76   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 77   : #ifdef DYNAMIC_POOL_STRICT
; 78   : 			assert(__IsValidData(pkData));
; 79   : 			assert(!__IsFreeData(pkData));
; 80   : #endif
; 81   : 			m_kVct_pkFree.push_back(pkData);

  00003	8d 45 08	 lea	 eax, DWORD PTR _pkData$[ebp]
  00006	83 c1 10	 add	 ecx, 16			; 00000010H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXABQAVCFlyTrace@@@Z ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::push_back

; 82   : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?Free@?$CDynamicPool@VCFlyTrace@@@@QAEXPAVCFlyTrace@@@Z ENDP ; CDynamicPool<CFlyTrace>::Free
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterlib\pool.h
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\eterlib\pool.h
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\eterlib\pool.h
;	COMDAT ?Alloc@?$CDynamicPool@VCFlyTrace@@@@QAEPAVCFlyTrace@@XZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
_pkNewData$3 = -16					; size = 4
__$EHRec$ = -12						; size = 12
?Alloc@?$CDynamicPool@VCFlyTrace@@@@QAEPAVCFlyTrace@@XZ PROC ; CDynamicPool<CFlyTrace>::Alloc, COMDAT
; _this$ = ecx

; 62   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Alloc@?$CDynamicPool@VCFlyTrace@@@@QAEPAVCFlyTrace@@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
; File a:\vs\vc\include\vector

; 1158 : 		return (this->_Myfirst == this->_Mylast);

  00026	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00029	3b 46 14	 cmp	 eax, DWORD PTR [esi+20]
; File a:\from c\desktop\serwer\source\source client\client\eterlib\pool.h

; 63   : 			if (m_kVct_pkFree.empty())

  0002c	75 4f		 jne	 SHORT $LN1@Alloc

; 64   : 			{
; 65   : 				T* pkNewData=new T;

  0002e	6a 28		 push	 40			; 00000028H
  00030	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00035	83 c4 04	 add	 esp, 4
  00038	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  0003b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00042	85 c0		 test	 eax, eax
  00044	74 09		 je	 SHORT $LN4@Alloc
  00046	8b c8		 mov	 ecx, eax
  00048	e8 00 00 00 00	 call	 ??0CFlyTrace@@QAE@XZ	; CFlyTrace::CFlyTrace
  0004d	eb 02		 jmp	 SHORT $LN5@Alloc
$LN4@Alloc:
  0004f	33 c0		 xor	 eax, eax
$LN5@Alloc:
  00051	89 45 f0	 mov	 DWORD PTR _pkNewData$3[ebp], eax

; 66   : 				m_kVct_pkData.push_back(pkNewData);

  00054	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00057	8d 45 f0	 lea	 eax, DWORD PTR _pkNewData$3[ebp]
  0005a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXABQAVCFlyTrace@@@Z ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::push_back

; 67   : 				++m_uUsedCapacity;

  00067	ff 46 20	 inc	 DWORD PTR [esi+32]

; 68   : 				return pkNewData;

  0006a	8b 45 f0	 mov	 eax, DWORD PTR _pkNewData$3[ebp]

; 74   : 		}

  0006d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00070	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00077	59		 pop	 ecx
  00078	5e		 pop	 esi
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
$LN1@Alloc:

; 69   : 			}
; 70   : 
; 71   : 			T* pkFreeData=m_kVct_pkFree.back();

  0007d	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00080	8b 40 fc	 mov	 eax, DWORD PTR [eax-4]
; File a:\vs\vc\include\vector

; 1282 : 		--this->_Mylast;

  00083	83 46 14 fc	 add	 DWORD PTR [esi+20], -4	; fffffffcH
; File a:\from c\desktop\serwer\source\source client\client\eterlib\pool.h

; 74   : 		}

  00087	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00091	59		 pop	 ecx
  00092	5e		 pop	 esi
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Alloc@?$CDynamicPool@VCFlyTrace@@@@QAEPAVCFlyTrace@@XZ$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?Alloc@?$CDynamicPool@VCFlyTrace@@@@QAEPAVCFlyTrace@@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Alloc@?$CDynamicPool@VCFlyTrace@@@@QAEPAVCFlyTrace@@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Alloc@?$CDynamicPool@VCFlyTrace@@@@QAEPAVCFlyTrace@@XZ ENDP ; CDynamicPool<CFlyTrace>::Alloc
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterlib\pool.h
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\eterlib\pool.h
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\eterlib\pool.h
;	COMDAT ?Destroy@?$CDynamicPool@VCFlyTrace@@@@QAEXXZ
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
?Destroy@?$CDynamicPool@VCFlyTrace@@@@QAEXXZ PROC	; CDynamicPool<CFlyTrace>::Destroy, COMDAT
; _this$ = ecx

; 38   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b 59 08	 mov	 ebx, DWORD PTR [ecx+8]
  00008	33 d2		 xor	 edx, edx
  0000a	56		 push	 esi
; File a:\vs\vc\include\vector

; 1025 : 		return (iterator(this->_Myfirst, this));

  0000b	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0000e	2b de		 sub	 ebx, esi
  00010	83 c3 03	 add	 ebx, 3
; File a:\from c\desktop\serwer\source\source client\client\eterlib\pool.h

; 38   : 		{

  00013	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  00016	c1 eb 02	 shr	 ebx, 2
  00019	57		 push	 edi
  0001a	33 ff		 xor	 edi, edi
  0001c	3b 71 08	 cmp	 esi, DWORD PTR [ecx+8]
  0001f	0f 47 da	 cmova	 ebx, edx
; File a:\vs\vc\include\algorithm

; 23   : 	for (; _First != _Last; ++_First)

  00022	85 db		 test	 ebx, ebx
  00024	74 15		 je	 SHORT $LN29@Destroy
$LL31@Destroy:

; 24   : 		_Func(*_First);

  00026	ff 36		 push	 DWORD PTR [esi]
  00028	e8 00 00 00 00	 call	 ?Delete@?$CDynamicPool@VCFlyTrace@@@@KAXPAVCFlyTrace@@@Z ; CDynamicPool<CFlyTrace>::Delete
  0002d	47		 inc	 edi
  0002e	8d 76 04	 lea	 esi, DWORD PTR [esi+4]
  00031	83 c4 04	 add	 esp, 4
  00034	3b fb		 cmp	 edi, ebx
  00036	75 ee		 jne	 SHORT $LL31@Destroy
  00038	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
$LN29@Destroy:
; File a:\vs\vc\include\vector

; 1510 : 		this->_Mylast = this->_Myfirst;

  0003b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0003e	5f		 pop	 edi
  0003f	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00042	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00045	5e		 pop	 esi
  00046	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00049	5b		 pop	 ebx
; File a:\from c\desktop\serwer\source\source client\client\eterlib\pool.h

; 53   : 		}

  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
?Destroy@?$CDynamicPool@VCFlyTrace@@@@QAEXXZ ENDP	; CDynamicPool<CFlyTrace>::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterlib\pool.h
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\eterlib\pool.h
;	COMDAT ??1?$CDynamicPool@VCFlyTrace@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCFlyTrace@@@@UAE@XZ PROC		; CDynamicPool<CFlyTrace>::~CDynamicPool<CFlyTrace>, COMDAT
; _this$ = ecx

; 18   : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCFlyTrace@@@@6B@
; File a:\vs\vc\include\vector

; 1623 : 		if (this->_Myfirst != pointer())

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	85 c0		 test	 eax, eax
  0000e	74 1e		 je	 SHORT $LN7@CDynamicPo
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
; File a:\vs\vc\include\vector

; 1629 : 			this->_Myfirst = pointer();

  00019	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 1630 : 			this->_Mylast = pointer();

  00020	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1631 : 			this->_Myend = pointer();

  00027	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN7@CDynamicPo:

; 1623 : 		if (this->_Myfirst != pointer())

  0002e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00031	85 c0		 test	 eax, eax
  00033	74 1e		 je	 SHORT $LN20@CDynamicPo
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003b	83 c4 04	 add	 esp, 4
; File a:\vs\vc\include\vector

; 1629 : 			this->_Myfirst = pointer();

  0003e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1630 : 			this->_Mylast = pointer();

  00045	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 1631 : 			this->_Myend = pointer();

  0004c	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN20@CDynamicPo:
  00053	5e		 pop	 esi
; File a:\from c\desktop\serwer\source\source client\client\eterlib\pool.h

; 26   : 		}

  00054	c3		 ret	 0
??1?$CDynamicPool@VCFlyTrace@@@@UAE@XZ ENDP		; CDynamicPool<CFlyTrace>::~CDynamicPool<CFlyTrace>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterlib\pool.h
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\eterlib\pool.h
;	COMDAT ??0?$CDynamicPool@VCFlyTrace@@@@QAE@XZ
_TEXT	SEGMENT
??0?$CDynamicPool@VCFlyTrace@@@@QAE@XZ PROC		; CDynamicPool<CFlyTrace>::CDynamicPool<CFlyTrace>, COMDAT
; _this$ = ecx

; 11   : 		CDynamicPool()

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CDynamicPool@VCFlyTrace@@@@6B@

; 16   : 		}

  00006	8b c1		 mov	 eax, ecx
; File a:\vs\vc\include\vector

; 482  : 		_Myfirst = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 483  : 		_Mylast = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 484  : 		_Myend = pointer();

  00016	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 482  : 		_Myfirst = pointer();

  0001d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 483  : 		_Mylast = pointer();

  00024	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 484  : 		_Myend = pointer();

  0002b	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
; File a:\from c\desktop\serwer\source\source client\client\eterlib\pool.h

; 14   : 			m_uInitCapacity=0;

  00032	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 15   : 			m_uUsedCapacity=0;

  00039	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0

; 16   : 		}

  00040	c3		 ret	 0
??0?$CDynamicPool@VCFlyTrace@@@@QAE@XZ ENDP		; CDynamicPool<CFlyTrace>::CDynamicPool<CFlyTrace>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\from c\desktop\serwer\source\source client\client\eterlib\pool.h
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\from c\desktop\serwer\source\source client\client\eterlib\pool.h
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
;	COMDAT ?Delete@CFlyTrace@@SAXPAV1@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
_pkInst$ = 8						; size = 4
?Delete@CFlyTrace@@SAXPAV1@@Z PROC			; CFlyTrace::Delete, COMDAT

; 21   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 22   : 	pkInst->Destroy();

  00004	8b 75 08	 mov	 esi, DWORD PTR _pkInst$[ebp]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?Destroy@CFlyTrace@@QAEXXZ ; CFlyTrace::Destroy
; File a:\from c\desktop\serwer\source\source client\client\eterlib\pool.h

; 81   : 			m_kVct_pkFree.push_back(pkData);

  0000e	8d 45 08	 lea	 eax, DWORD PTR _pkData$[ebp]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 23   : 	ms_kPool.Free(pkInst);

  00011	89 75 08	 mov	 DWORD PTR _pkData$[ebp], esi
; File a:\from c\desktop\serwer\source\source client\client\eterlib\pool.h

; 81   : 			m_kVct_pkFree.push_back(pkData);

  00014	50		 push	 eax
  00015	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+16
  0001a	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXABQAVCFlyTrace@@@Z ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::push_back
  0001f	5e		 pop	 esi
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 24   : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?Delete@CFlyTrace@@SAXPAV1@@Z ENDP			; CFlyTrace::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
;	COMDAT ?New@CFlyTrace@@SAPAV1@XZ
_TEXT	SEGMENT
?New@CFlyTrace@@SAPAV1@XZ PROC				; CFlyTrace::New, COMDAT

; 17   : 	return ms_kPool.Alloc();

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A ; CFlyTrace::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ?Alloc@?$CDynamicPool@VCFlyTrace@@@@QAEPAVCFlyTrace@@XZ ; CDynamicPool<CFlyTrace>::Alloc
?New@CFlyTrace@@SAPAV1@XZ ENDP				; CFlyTrace::New
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
;	COMDAT ?DestroySystem@CFlyTrace@@SAXXZ
_TEXT	SEGMENT
?DestroySystem@CFlyTrace@@SAXXZ PROC			; CFlyTrace::DestroySystem, COMDAT

; 11   : {

  00000	53		 push	 ebx
  00001	8b 1d 08 00 00
	00		 mov	 ebx, DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+8
  00007	33 c9		 xor	 ecx, ecx
  00009	56		 push	 esi
; File a:\vs\vc\include\algorithm

; 33   : 	_For_each(_Unchecked(_First), _Unchecked(_Last), _Func);

  0000a	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+4
  00010	2b de		 sub	 ebx, esi
  00012	83 c3 03	 add	 ebx, 3
  00015	c1 eb 02	 shr	 ebx, 2
  00018	57		 push	 edi
  00019	33 ff		 xor	 edi, edi
  0001b	3b 35 08 00 00
	00		 cmp	 esi, DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+8
  00021	0f 47 d9	 cmova	 ebx, ecx

; 23   : 	for (; _First != _Last; ++_First)

  00024	85 db		 test	 ebx, ebx
  00026	74 2a		 je	 SHORT $LN50@DestroySys
$LL33@DestroySys:

; 24   : 		_Func(*_First);

  00028	ff 36		 push	 DWORD PTR [esi]
  0002a	e8 00 00 00 00	 call	 ?Delete@?$CDynamicPool@VCFlyTrace@@@@KAXPAVCFlyTrace@@@Z ; CDynamicPool<CFlyTrace>::Delete
  0002f	47		 inc	 edi
  00030	8d 76 04	 lea	 esi, DWORD PTR [esi+4]
  00033	83 c4 04	 add	 esp, 4
  00036	3b fb		 cmp	 edi, ebx
  00038	75 ee		 jne	 SHORT $LL33@DestroySys
; File a:\vs\vc\include\vector

; 1510 : 		this->_Mylast = this->_Myfirst;

  0003a	a1 04 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+4
  0003f	5f		 pop	 edi
  00040	a3 08 00 00 00	 mov	 DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+8, eax
  00045	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+16
  0004a	5e		 pop	 esi
  0004b	a3 14 00 00 00	 mov	 DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+20, eax
  00050	5b		 pop	 ebx
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 13   : }

  00051	c3		 ret	 0
$LN50@DestroySys:
; File a:\vs\vc\include\vector

; 1510 : 		this->_Mylast = this->_Myfirst;

  00052	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+16
  00057	5f		 pop	 edi
  00058	89 35 08 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+8, esi
  0005e	5e		 pop	 esi
  0005f	a3 14 00 00 00	 mov	 DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+20, eax
  00064	5b		 pop	 ebx
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 13   : }

  00065	c3		 ret	 0
?DestroySystem@CFlyTrace@@SAXXZ ENDP			; CFlyTrace::DestroySystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
;	COMDAT ?_Tidy@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@IAEXXZ PROC ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Tidy, COMDAT
; _this$ = ecx

; 1827 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1362 : 		return (this->_Mysize == 0);

  00003	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00006	85 c0		 test	 eax, eax

; 1828 : 		_Alpty _Almap(this->_Getal());
; 1829 : 		while (!empty())

  00008	74 13		 je	 SHORT $LN5@Tidy
  0000a	8d 9b 00 00 00
	00		 npad	 6
$LL6@Tidy:

; 1363 : 		}
; 1364 : 
; 1365 : 	allocator_type get_allocator() const _NOEXCEPT
; 1366 : 		{	// return allocator object for values
; 1367 : 		return (this->_Getal());
; 1368 : 		}
; 1369 : 
; 1370 : 	const_reference at(size_type _Pos) const
; 1371 : 		{	// subscript nonmutable sequence with checking
; 1372 : 		if (this->_Mysize <= _Pos)
; 1373 : 			_Xran();
; 1374 : 		return (*(begin() + _Pos));
; 1375 : 		}
; 1376 : 
; 1377 : 	reference at(size_type _Pos)
; 1378 : 		{	// subscript mutable sequence with checking
; 1379 : 		if (this->_Mysize <= _Pos)
; 1380 : 			_Xran();
; 1381 : 		return (*(begin() + _Pos));
; 1382 : 		}
; 1383 : 
; 1384 : 	const_reference operator[](size_type _Pos) const
; 1385 : 		{	// subscript nonmutable sequence
; 1386 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1387 : 		if (this->_Mysize <= _Pos)
; 1388 : 			_DEBUG_ERROR("deque subscript out of range");
; 1389 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1390 : 
; 1391 : 		return (*(begin() + _Pos));
; 1392 : 		}
; 1393 : 
; 1394 : 	reference operator[](size_type _Pos)
; 1395 : 		{	// subscript mutable sequence
; 1396 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1397 : 		if (this->_Mysize <= _Pos)
; 1398 : 			_DEBUG_ERROR("deque subscript out of range");
; 1399 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1400 : 
; 1401 : 		return (*(begin() + _Pos));
; 1402 : 		}
; 1403 : 
; 1404 : 	reference front()
; 1405 : 		{	// return first element of mutable sequence
; 1406 : 		return (*begin());
; 1407 : 		}
; 1408 : 
; 1409 : 	const_reference front() const
; 1410 : 		{	// return first element of nonmutable sequence
; 1411 : 		return (*begin());
; 1412 : 		}
; 1413 : 
; 1414 : 	reference back()
; 1415 : 		{	// return last element of mutable sequence
; 1416 : 		return (*(end() - 1));
; 1417 : 		}
; 1418 : 
; 1419 : 	const_reference back() const
; 1420 : 		{	// return last element of nonmutable sequence
; 1421 : 		return (*(end() - 1));
; 1422 : 		}
; 1423 : 
; 1424 : 	void push_front(const value_type& _Val)
; 1425 : 		{	// insert element at beginning
; 1426 : 		this->_Orphan_all();
; 1427 : 		_PUSH_FRONT_BEGIN;
; 1428 : 		this->_Getal().construct(
; 1429 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ, _Val);
; 1430 : 		_PUSH_FRONT_END;
; 1431 : 		}
; 1432 : 
; 1433 : 	void pop_front()
; 1434 : 		{	// erase element at beginning
; 1435 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1436 : 		if (empty())
; 1437 : 			_DEBUG_ERROR("deque empty before pop");
; 1438 : 		else
; 1439 : 			{	// something to erase, do it
; 1440 : 			_Orphan_off(this->_Myoff);
; 1441 : 			size_type _Block = this->_Getblock(this->_Myoff);
; 1442 : 			this->_Getal().destroy(
; 1443 : 				this->_Map[_Block] + this->_Myoff % _DEQUESIZ);
; 1444 : 			if (--this->_Mysize == 0)
; 1445 : 				this->_Myoff = 0;
; 1446 : 			else
; 1447 : 				++this->_Myoff;
; 1448 : 			}
; 1449 : 
; 1450 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 		size_type _Block = this->_Getblock(this->_Myoff);
; 1452 : 		this->_Getal().destroy(
; 1453 : 			this->_Map[_Block] + this->_Myoff % _DEQUESIZ);
; 1454 : 		if (--this->_Mysize == 0)
; 1455 : 			this->_Myoff = 0;
; 1456 : 		else
; 1457 : 			++this->_Myoff;
; 1458 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1459 : 		}
; 1460 : 
; 1461 : 	void push_back(const value_type& _Val)
; 1462 : 		{	// insert element at end
; 1463 : 		this->_Orphan_all();
; 1464 : 		_PUSH_BACK_BEGIN;
; 1465 : 		this->_Getal().construct(
; 1466 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ, _Val);
; 1467 : 		_PUSH_BACK_END;
; 1468 : 		}
; 1469 : 
; 1470 : 	void pop_back()
; 1471 : 		{	// erase element at end
; 1472 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1473 : 		if (empty())
; 1474 : 			_DEBUG_ERROR("deque empty before pop");
; 1475 : 		else
; 1476 : 			{	// something to erase, do it
; 1477 : 			size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1478 : 			_Orphan_off(_Newoff);
; 1479 : 			size_type _Block = this->_Getblock(_Newoff);
; 1480 : 			this->_Getal().destroy(
; 1481 : 				this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1482 : 			if (--this->_Mysize == 0)
; 1483 : 				this->_Myoff = 0;
; 1484 : 			}
; 1485 : 
; 1486 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1487 : 		size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1488 : 		size_type _Block = this->_Getblock(_Newoff);
; 1489 : 		this->_Getal().destroy(
; 1490 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1491 : 		if (--this->_Mysize == 0)

  00010	48		 dec	 eax
  00011	75 03		 jne	 SHORT $LN13@Tidy

; 1492 : 			this->_Myoff = 0;

  00013	89 46 0c	 mov	 DWORD PTR [esi+12], eax
$LN13@Tidy:

; 1362 : 		return (this->_Mysize == 0);

  00016	85 c0		 test	 eax, eax

; 1828 : 		_Alpty _Almap(this->_Getal());
; 1829 : 		while (!empty())

  00018	75 f6		 jne	 SHORT $LL6@Tidy
  0001a	89 46 10	 mov	 DWORD PTR [esi+16], eax
$LN5@Tidy:
  0001d	57		 push	 edi

; 1831 : 		for (size_type _Block = this->_Mapsize; 0 < _Block; )

  0001e	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00021	85 ff		 test	 edi, edi
  00023	74 18		 je	 SHORT $LN3@Tidy
$LL4@Tidy:

; 1832 : 			{	// free storage for a block and destroy pointer
; 1833 : 			if (this->_Map[--_Block] != pointer())

  00025	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00028	4f		 dec	 edi
  00029	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  0002c	85 c0		 test	 eax, eax
  0002e	74 09		 je	 SHORT $LN2@Tidy
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00036	83 c4 04	 add	 esp, 4
$LN2@Tidy:
; File a:\vs\vc\include\deque

; 1831 : 		for (size_type _Block = this->_Mapsize; 0 < _Block; )

  00039	85 ff		 test	 edi, edi
  0003b	75 e8		 jne	 SHORT $LL4@Tidy
$LN3@Tidy:

; 1834 : 				{	// free block and destroy its pointer
; 1835 : 				this->_Getal().deallocate(this->_Map[_Block], _DEQUESIZ);
; 1836 : 				this->_Getal().destroy(&this->_Map[_Block]);
; 1837 : 				}
; 1838 : 			}
; 1839 : 
; 1840 : 		if (this->_Map != _Mapptr())

  0003d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00040	5f		 pop	 edi
  00041	85 c0		 test	 eax, eax
  00043	74 09		 je	 SHORT $LN38@Tidy
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004b	83 c4 04	 add	 esp, 4
$LN38@Tidy:
; File a:\vs\vc\include\deque

; 1844 : 		this->_Map = _Mapptr();

  0004e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00055	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0005c	5e		 pop	 esi

; 1845 : 		}

  0005d	c3		 ret	 0
?_Tidy@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@IAEXXZ ENDP ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
;	COMDAT ?_Growmap@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$1$ = -16						; size = 4
__Count$1$ = -12					; size = 4
__Myptr$1$ = -8						; size = 4
__Myboff$1$ = -4					; size = 4
__Ptr$1$ = 8						; size = 4
__Count$ = 8						; size = 4
?_Growmap@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@IAEXI@Z PROC ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Growmap, COMDAT
; _this$ = ecx

; 1772 : 		{	// grow map by at least _Count pointers, _Mapsize a power of 2

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx

; 1773 : 		static_assert(1 < _DEQUEMAPSIZ,
; 1774 : 			"The _Xlen() test should always be performed.");
; 1775 : 
; 1776 : 		typedef typename _Alpty::pointer _Blockptr;
; 1777 : 		_Alpty _Almap(this->_Getal());
; 1778 : 		size_type _Newsize = 0 < this->_Mapsize ? this->_Mapsize : 1;

  00009	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  0000c	56		 push	 esi
  0000d	be 01 00 00 00	 mov	 esi, 1
  00012	89 5d f0	 mov	 DWORD PTR _this$1$[ebp], ebx
  00015	57		 push	 edi
  00016	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00019	85 d2		 test	 edx, edx
  0001b	0f 45 f2	 cmovne	 esi, edx
  0001e	8b ff		 npad	 2
$LL7@Growmap:

; 1779 : 		while (_Newsize - this->_Mapsize < _Count || _Newsize < _DEQUEMAPSIZ)

  00020	8b c6		 mov	 eax, esi
  00022	2b c2		 sub	 eax, edx
  00024	3b c1		 cmp	 eax, ecx
  00026	72 05		 jb	 SHORT $LN5@Growmap
  00028	83 fe 08	 cmp	 esi, 8
  0002b	73 13		 jae	 SHORT $LN6@Growmap
$LN5@Growmap:

; 1780 : 			{	// scale _Newsize to 2^N >= _Mapsize + _Count
; 1781 : 			if (max_size() / _DEQUESIZ - _Newsize < _Newsize)

  0002d	b8 ff ff ff 0f	 mov	 eax, 268435455		; 0fffffffH
  00032	2b c6		 sub	 eax, esi
  00034	3b c6		 cmp	 eax, esi
  00036	0f 82 35 01 00
	00		 jb	 $LN151@Growmap

; 1782 : 				_Xlen();	// result too long
; 1783 : 			_Newsize *= 2;

  0003c	03 f6		 add	 esi, esi

; 1784 : 			}

  0003e	eb e0		 jmp	 SHORT $LL7@Growmap
$LN6@Growmap:

; 1785 : 		_Count = _Newsize - this->_Mapsize;
; 1786 : 
; 1787 : 		size_type _Myboff = this->_Myoff / _DEQUESIZ;

  00040	8b 7b 0c	 mov	 edi, DWORD PTR [ebx+12]
  00043	2b f2		 sub	 esi, edx
  00045	89 7d fc	 mov	 DWORD PTR __Myboff$1$[ebp], edi
; File a:\vs\vc\include\xmemory0

; 23   : 	void *_Ptr = 0;

  00048	c7 45 08 00 00
	00 00		 mov	 DWORD PTR __Ptr$1$[ebp], 0
; File a:\vs\vc\include\deque

; 1788 : 		_Mapptr _Newmap = _Almap.allocate(this->_Mapsize + _Count);

  0004f	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]
; File a:\vs\vc\include\xmemory0

; 25   : 	if (_Count == 0)

  00052	85 c0		 test	 eax, eax
  00054	74 22		 je	 SHORT $LN32@Growmap

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00056	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0005b	0f 87 0b 01 00
	00		 ja	 $LN168@Growmap
  00061	c1 e0 02	 shl	 eax, 2
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0006a	83 c4 04	 add	 esp, 4
  0006d	89 45 08	 mov	 DWORD PTR __Ptr$1$[ebp], eax
  00070	85 c0		 test	 eax, eax
  00072	0f 84 f4 00 00
	00		 je	 $LN168@Growmap
$LN32@Growmap:
; File a:\vs\vc\include\deque

; 1793 : 			_Myptr, _Almap);	// copy initial to end

  00078	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0007b	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0007e	c1 e0 02	 shl	 eax, 2
  00081	8d 14 b9	 lea	 edx, DWORD PTR [ecx+edi*4]
; File a:\vs\vc\include\xmemory

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  00084	2b c2		 sub	 eax, edx
  00086	03 c1		 add	 eax, ecx
; File a:\vs\vc\include\deque

; 1789 : 		_Mapptr _Myptr = _Newmap + _Myboff;

  00088	8b 4d fc	 mov	 ecx, DWORD PTR __Myboff$1$[ebp]
; File a:\vs\vc\include\xmemory

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  0008b	c1 f8 02	 sar	 eax, 2

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0008e	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]
; File a:\vs\vc\include\deque

; 1789 : 		_Mapptr _Myptr = _Newmap + _Myboff;

  00095	8b 45 08	 mov	 eax, DWORD PTR __Ptr$1$[ebp]
; File a:\vs\vc\include\xmemory

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  00098	57		 push	 edi
  00099	52		 push	 edx
; File a:\vs\vc\include\deque

; 1789 : 		_Mapptr _Myptr = _Newmap + _Myboff;

  0009a	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
; File a:\vs\vc\include\xmemory

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 _memmove
; File a:\vs\vc\include\deque

; 1798 : 				_Myptr, _Almap);	// copy rest of old

  000a3	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
; File a:\vs\vc\include\xmemory

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  000a6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a9	8d 14 07	 lea	 edx, DWORD PTR [edi+eax]
; File a:\vs\vc\include\deque

; 1794 : 		if (_Myboff <= _Count)

  000ac	8b 7d fc	 mov	 edi, DWORD PTR __Myboff$1$[ebp]
; File a:\vs\vc\include\xmemory

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  000af	89 55 f8	 mov	 DWORD PTR __Myptr$1$[ebp], edx
; File a:\vs\vc\include\deque

; 1794 : 		if (_Myboff <= _Count)

  000b2	3b fe		 cmp	 edi, esi
  000b4	77 45		 ja	 SHORT $LN3@Growmap
; File a:\vs\vc\include\xmemory

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  000b6	8d 04 bd 00 00
	00 00		 lea	 eax, DWORD PTR [edi*4]
; File a:\vs\vc\include\deque

; 1800 : 				_Almap);	// clear suffix of new

  000bd	8b d6		 mov	 edx, esi
; File a:\vs\vc\include\xmemory

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  000bf	c1 f8 02	 sar	 eax, 2
; File a:\vs\vc\include\deque

; 1800 : 				_Almap);	// clear suffix of new

  000c2	2b d7		 sub	 edx, edi
  000c4	89 55 f4	 mov	 DWORD PTR __Count$1$[ebp], edx
; File a:\vs\vc\include\xmemory

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  000c7	8d 1c 85 00 00
	00 00		 lea	 ebx, DWORD PTR [eax*4]
  000ce	53		 push	 ebx
  000cf	51		 push	 ecx
  000d0	ff 75 f8	 push	 DWORD PTR __Myptr$1$[ebp]
  000d3	e8 00 00 00 00	 call	 _memmove
; File a:\vs\vc\include\xutility

; 2632 : 	for (; 0 < _Count; --_Count, ++_Dest)

  000d8	8b 4d f4	 mov	 ecx, DWORD PTR __Count$1$[ebp]
; File a:\vs\vc\include\xmemory

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  000db	83 c4 0c	 add	 esp, 12			; 0000000cH
  000de	8d 14 03	 lea	 edx, DWORD PTR [ebx+eax]
; File a:\vs\vc\include\xutility

; 2632 : 	for (; 0 < _Count; --_Count, ++_Dest)

  000e1	85 c9		 test	 ecx, ecx
  000e3	74 09		 je	 SHORT $LN81@Growmap
; File a:\vs\vc\include\deque

; 1798 : 				_Myptr, _Almap);	// copy rest of old

  000e5	33 c0		 xor	 eax, eax
  000e7	8b fa		 mov	 edi, edx
  000e9	f3 ab		 rep stosd
  000eb	8b 7d fc	 mov	 edi, DWORD PTR __Myboff$1$[ebp]
$LN81@Growmap:
; File a:\vs\vc\include\xmemory

; 682  : 	_Fill_n(_First, _Count, (_Valty)0);

  000ee	8b 5d 08	 mov	 ebx, DWORD PTR __Ptr$1$[ebp]
; File a:\vs\vc\include\xutility

; 2632 : 	for (; 0 < _Count; --_Count, ++_Dest)

  000f1	85 ff		 test	 edi, edi
  000f3	74 55		 je	 SHORT $LN139@Growmap
; File a:\vs\vc\include\xmemory

; 682  : 	_Fill_n(_First, _Count, (_Valty)0);

  000f5	8b cf		 mov	 ecx, edi
  000f7	8b fb		 mov	 edi, ebx
; File a:\vs\vc\include\deque

; 1804 : 		else

  000f9	eb 4b		 jmp	 SHORT $LN167@Growmap
$LN3@Growmap:

; 1808 : 				_Myptr, _Almap);	// copy more old

  000fb	8d 3c b5 00 00
	00 00		 lea	 edi, DWORD PTR [esi*4]
; File a:\vs\vc\include\xmemory

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  00102	8b c7		 mov	 eax, edi
  00104	83 e0 fc	 and	 eax, -4			; fffffffcH
  00107	50		 push	 eax
  00108	51		 push	 ecx
  00109	52		 push	 edx
  0010a	e8 00 00 00 00	 call	 _memmove
; File a:\vs\vc\include\deque

; 1811 : 				_Newmap, _Almap);	// copy rest of old

  0010f	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00112	8d 0c 07	 lea	 ecx, DWORD PTR [edi+eax]
; File a:\vs\vc\include\xmemory

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  00115	8b 7d fc	 mov	 edi, DWORD PTR __Myboff$1$[ebp]
  00118	8d 14 bd 00 00
	00 00		 lea	 edx, DWORD PTR [edi*4]
  0011f	2b d1		 sub	 edx, ecx
  00121	03 d0		 add	 edx, eax
  00123	c1 fa 02	 sar	 edx, 2

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  00126	8d 1c 95 00 00
	00 00		 lea	 ebx, DWORD PTR [edx*4]
  0012d	53		 push	 ebx
  0012e	51		 push	 ecx
  0012f	ff 75 08	 push	 DWORD PTR __Ptr$1$[ebp]
  00132	e8 00 00 00 00	 call	 _memmove
  00137	83 c4 18	 add	 esp, 24			; 00000018H
  0013a	8d 3c 03	 lea	 edi, DWORD PTR [ebx+eax]
  0013d	8b 5d 08	 mov	 ebx, DWORD PTR __Ptr$1$[ebp]
; File a:\vs\vc\include\xutility

; 2632 : 	for (; 0 < _Count; --_Count, ++_Dest)

  00140	85 f6		 test	 esi, esi
  00142	74 06		 je	 SHORT $LN139@Growmap
; File a:\vs\vc\include\deque

; 1808 : 				_Myptr, _Almap);	// copy more old

  00144	8b ce		 mov	 ecx, esi
$LN167@Growmap:
  00146	33 c0		 xor	 eax, eax
  00148	f3 ab		 rep stosd
$LN139@Growmap:

; 1812 : 			_Uninitialized_default_fill_n(_Myptr, _Count,
; 1813 : 				_Almap);	// clear rest to initial block
; 1814 : 			}
; 1815 : 
; 1816 : 		_Destroy_range(this->_Map + _Myboff, this->_Map + this->_Mapsize,
; 1817 : 			_Almap);
; 1818 : 		if (this->_Map != _Mapptr())

  0014a	8b 7d f0	 mov	 edi, DWORD PTR _this$1$[ebp]
  0014d	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00150	85 c0		 test	 eax, eax
  00152	74 09		 je	 SHORT $LN144@Growmap
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00154	50		 push	 eax
  00155	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0015a	83 c4 04	 add	 esp, 4
$LN144@Growmap:
; File a:\vs\vc\include\deque

; 1823 : 		this->_Mapsize += _Count;

  0015d	01 77 08	 add	 DWORD PTR [edi+8], esi
  00160	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00163	5f		 pop	 edi
  00164	5e		 pop	 esi
  00165	5b		 pop	 ebx

; 1824 : 		}

  00166	8b e5		 mov	 esp, ebp
  00168	5d		 pop	 ebp
  00169	c2 04 00	 ret	 4
$LN168@Growmap:
; File a:\vs\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  0016c	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN170@Growmap:
$LN151@Growmap:
; File a:\vs\vc\include\deque

; 1763 : 		_Xlength_error("deque<T> too long");

  00171	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@
  00176	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN171@Growmap:
$LN166@Growmap:
  0017b	cc		 int	 3
?_Growmap@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@IAEXI@Z ENDP ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Growmap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
;	COMDAT ?_Xlen@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@IBEXXZ PROC ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Xlen, COMDAT
; _this$ = ecx

; 1763 : 		_Xlength_error("deque<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@IBEXXZ ENDP ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
;	COMDAT ?clear@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAEXXZ PROC ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::clear, COMDAT
; _this$ = ecx

; 1643 : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@IAEXXZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Tidy
?clear@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAEXXZ ENDP ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
;	COMDAT ?pop_back@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAEXXZ
_TEXT	SEGMENT
?pop_back@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAEXXZ PROC ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::pop_back, COMDAT
; _this$ = ecx

; 1472 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1473 : 		if (empty())
; 1474 : 			_DEBUG_ERROR("deque empty before pop");
; 1475 : 		else
; 1476 : 			{	// something to erase, do it
; 1477 : 			size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1478 : 			_Orphan_off(_Newoff);
; 1479 : 			size_type _Block = this->_Getblock(_Newoff);
; 1480 : 			this->_Getal().destroy(
; 1481 : 				this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1482 : 			if (--this->_Mysize == 0)
; 1483 : 				this->_Myoff = 0;
; 1484 : 			}
; 1485 : 
; 1486 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1487 : 		size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1488 : 		size_type _Block = this->_Getblock(_Newoff);
; 1489 : 		this->_Getal().destroy(
; 1490 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1491 : 		if (--this->_Mysize == 0)

  00000	ff 49 10	 dec	 DWORD PTR [ecx+16]
  00003	75 07		 jne	 SHORT $LN1@pop_back

; 1492 : 			this->_Myoff = 0;

  00005	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
$LN1@pop_back:

; 1493 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1494 : 		}

  0000c	c3		 ret	 0
?pop_back@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAEXXZ ENDP ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::pop_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
;	COMDAT ?back@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAEAAU?$pair@MUD3DXVECTOR3@@@2@XZ
_TEXT	SEGMENT
$T1 = -24						; size = 12
$T2 = -12						; size = 12
?back@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAEAAU?$pair@MUD3DXVECTOR3@@@2@XZ PROC ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::back, COMDAT
; _this$ = ecx

; 1415 : 		{	// return last element of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 1416 : 		return (*(end() - 1));

  00006	8d 45 f4	 lea	 eax, DWORD PTR $T2[ebp]
  00009	6a 01		 push	 1
  0000b	50		 push	 eax
  0000c	8d 45 e8	 lea	 eax, DWORD PTR $T1[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?end@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@2@XZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::end
  00015	8b c8		 mov	 ecx, eax
  00017	e8 00 00 00 00	 call	 ??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator-
  0001c	8b d0		 mov	 edx, eax
; File a:\vs\vc\include\xutility

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  0001e	8b 02		 mov	 eax, DWORD PTR [edx]
  00020	85 c0		 test	 eax, eax
  00022	75 11		 jne	 SHORT $LN9@back
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00024	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 1416 : 		return (*(end() - 1));

  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0002a	49		 dec	 ecx
  0002b	23 4a 08	 and	 ecx, DWORD PTR [edx+8]

; 1416 : 		return (*(end() - 1));

  0002e	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 1417 : 		}

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
$LN9@back:
; File a:\vs\vc\include\xutility

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00035	8b 00		 mov	 eax, DWORD PTR [eax]
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00037	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 1416 : 		return (*(end() - 1));

  0003a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0003d	49		 dec	 ecx
  0003e	23 4a 08	 and	 ecx, DWORD PTR [edx+8]

; 1416 : 		return (*(end() - 1));

  00041	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 1417 : 		}

  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
?back@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAEAAU?$pair@MUD3DXVECTOR3@@@2@XZ ENDP ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
;	COMDAT ?empty@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QBE_NXZ PROC ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::empty, COMDAT
; _this$ = ecx

; 1362 : 		return (this->_Mysize == 0);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  00005	0f 94 c0	 sete	 al

; 1363 : 		}

  00008	c3		 ret	 0
?empty@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QBE_NXZ ENDP ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::empty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
;	COMDAT ?max_size@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QBEIXZ PROC ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::max_size, COMDAT
; _this$ = ecx

; 1357 : 		return (this->_Getal().max_size());

  00000	b8 ff ff ff 0f	 mov	 eax, 268435455		; 0fffffffH

; 1358 : 		}

  00005	c3		 ret	 0
?max_size@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QBEIXZ ENDP ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
;	COMDAT ?size@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QBEIXZ PROC ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::size, COMDAT
; _this$ = ecx

; 1352 : 		return (this->_Mysize);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 1353 : 		}

  00003	c3		 ret	 0
?size@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QBEIXZ ENDP ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
;	COMDAT ?end@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@2@XZ PROC ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::end, COMDAT
; _this$ = ecx

; 1260 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File a:\vs\vc\include\xutility

; 114  : 		{	// construct orphaned iterator

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File a:\vs\vc\include\deque

; 1261 : 		return (iterator(this->_Myoff + this->_Mysize, this));

  00006	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00009	03 51 0c	 add	 edx, DWORD PTR [ecx+12]
; File a:\vs\vc\include\xutility

; 171  : 			_Myproxy = _Parent_proxy;

  0000c	8b 09		 mov	 ecx, DWORD PTR [ecx]

; 114  : 		{	// construct orphaned iterator

  0000e	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 171  : 			_Myproxy = _Parent_proxy;

  00015	89 08		 mov	 DWORD PTR [eax], ecx
; File a:\vs\vc\include\deque

; 305  : 		_Myoff = _Off;

  00017	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1262 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?end@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@2@XZ ENDP ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
;	COMDAT ?begin@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@2@XZ PROC ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::begin, COMDAT
; _this$ = ecx

; 1250 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File a:\vs\vc\include\xutility

; 114  : 		{	// construct orphaned iterator

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File a:\vs\vc\include\deque

; 1251 : 		return (iterator(this->_Myoff, this));

  00006	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
; File a:\vs\vc\include\xutility

; 171  : 			_Myproxy = _Parent_proxy;

  00009	8b 09		 mov	 ecx, DWORD PTR [ecx]

; 114  : 		{	// construct orphaned iterator

  0000b	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 171  : 			_Myproxy = _Parent_proxy;

  00012	89 08		 mov	 DWORD PTR [eax], ecx
; File a:\vs\vc\include\deque

; 305  : 		_Myoff = _Off;

  00014	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1252 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?begin@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@2@XZ ENDP ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
;	COMDAT ??1?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE@XZ PROC ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::~deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >, COMDAT
; _this$ = ecx

; 1214 : 		{	// destroy the deque

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1215 : 		_Tidy();

  00003	e8 00 00 00 00	 call	 ?_Tidy@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@IAEXXZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Tidy
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00008	ff 36		 push	 DWORD PTR [esi]
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
; File a:\vs\vc\include\deque

; 907  : 		this->_Myproxy = 0;

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	5e		 pop	 esi

; 1216 : 		}

  00019	c3		 ret	 0
??1?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE@XZ ENDP ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::~deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
;	COMDAT ?push_front@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAEX$$QAU?$pair@MUD3DXVECTOR3@@@2@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_front@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAEX$$QAU?$pair@MUD3DXVECTOR3@@@2@@Z PROC ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::push_front, COMDAT
; _this$ = ecx

; 1119 : 		{	// insert element at beginning

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi

; 1121 : 		_PUSH_FRONT_BEGIN;

  00008	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000b	40		 inc	 eax
  0000c	39 46 08	 cmp	 DWORD PTR [esi+8], eax
  0000f	77 07		 ja	 SHORT $LN2@push_front
  00011	6a 01		 push	 1
  00013	e8 00 00 00 00	 call	 ?_Growmap@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@IAEXI@Z ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Growmap
$LN2@push_front:
  00018	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]
  0001b	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0001e	8d 7b ff	 lea	 edi, DWORD PTR [ebx-1]
  00021	23 c7		 and	 eax, edi
  00023	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00026	0f 45 d8	 cmovne	 ebx, eax
  00029	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002c	4b		 dec	 ebx

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0002d	23 fb		 and	 edi, ebx

; 1121 : 		_PUSH_FRONT_BEGIN;

  0002f	83 3c b8 00	 cmp	 DWORD PTR [eax+edi*4], 0
  00033	75 16		 jne	 SHORT $LN1@push_front
; File a:\vs\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00035	6a 10		 push	 16			; 00000010H
  00037	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003c	8b c8		 mov	 ecx, eax
  0003e	83 c4 04	 add	 esp, 4
  00041	85 c9		 test	 ecx, ecx
  00043	74 34		 je	 SHORT $LN53@push_front
; File a:\vs\vc\include\deque

; 1121 : 		_PUSH_FRONT_BEGIN;

  00045	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00048	89 0c b8	 mov	 DWORD PTR [eax+edi*4], ecx
$LN1@push_front:
; File a:\vs\vc\include\xmemory0

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  0004b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004e	8b 14 b8	 mov	 edx, DWORD PTR [eax+edi*4]
  00051	85 d2		 test	 edx, edx
  00053	74 17		 je	 SHORT $LN40@push_front
; File a:\vs\vc\include\utility

; 157  : 		{	// construct from moved compatible pair

  00055	8b 4d 08	 mov	 ecx, DWORD PTR __Val$[ebp]
  00058	8b 01		 mov	 eax, DWORD PTR [ecx]
  0005a	89 02		 mov	 DWORD PTR [edx], eax
  0005c	f3 0f 7e 41 04	 movq	 xmm0, QWORD PTR [ecx+4]
  00061	66 0f d6 42 04	 movq	 QWORD PTR [edx+4], xmm0
  00066	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00069	89 42 0c	 mov	 DWORD PTR [edx+12], eax
$LN40@push_front:
; File a:\vs\vc\include\deque

; 1125 : 		_PUSH_FRONT_END;

  0006c	ff 46 10	 inc	 DWORD PTR [esi+16]
  0006f	5f		 pop	 edi
  00070	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx

; 1126 : 		}

  00075	5d		 pop	 ebp
  00076	c2 04 00	 ret	 4
$LN53@push_front:
; File a:\vs\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  00079	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN55@push_front:
$LN52@push_front:
  0007e	cc		 int	 3
?push_front@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAEX$$QAU?$pair@MUD3DXVECTOR3@@@2@@Z ENDP ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::push_front
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
;	COMDAT ??0?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE@XZ PROC ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >, COMDAT
; _this$ = ecx

; 951  : 		{	// construct empty deque

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File a:\vs\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00003	6a 08		 push	 8
; File a:\vs\vc\include\xutility

; 80   : 		{	// construct childless container

  00005	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File a:\vs\vc\include\deque

; 773  : 		_Map = _Mapptr();

  0000b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 774  : 		_Mapsize = 0;

  00012	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 775  : 		_Myoff = 0;

  00019	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 776  : 		_Mysize = 0;

  00020	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File a:\vs\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00027	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002c	83 c4 04	 add	 esp, 4
  0002f	85 c0		 test	 eax, eax
  00031	74 17		 je	 SHORT $LN48@deque
  00033	89 06		 mov	 DWORD PTR [esi], eax

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);
; 32   : 	}
; 33   : 
; 34   : 		// TEMPLATE FUNCTION _Construct
; 35   : template<class _Ty1,
; 36   : 	class _Ty2> inline
; 37   : 	void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
; 38   : 	{	// construct object at _Ptr with value _Val
; 39   : 	void *_Vptr = _Ptr;
; 40   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));
; 41   : 	}
; 42   : 
; 43   : template<class _Ty1> inline
; 44   : 	void _Construct(_Ty1 *_Ptr)
; 45   : 	{	// construct object at _Ptr with default value
; 46   : 	void *_Vptr = _Ptr;
; 47   : 
; 48   : 	::new (_Vptr) _Ty1();
; 49   : 	}
; 50   : 
; 51   : 		// TEMPLATE FUNCTION _Destroy
; 52   : template<class _Ty> inline
; 53   : 	void _Destroy(_Ty *_Ptr)
; 54   : 	{	// destroy object at _Ptr
; 55   : 	_Ptr->~_Ty();
; 56   : 	}
; 57   : 
; 58   : template<> inline
; 59   : 	void _Destroy(char *)
; 60   : 	{	// destroy a char (do nothing)
; 61   : 	}
; 62   : 
; 63   : template<> inline
; 64   : 	void _Destroy(wchar_t *)
; 65   : 	{	// destroy a wchar_t (do nothing)
; 66   : 	}
; 67   : 
; 68   :  #ifdef _NATIVE_WCHAR_T_DEFINED
; 69   : template<> inline
; 70   : 	void _Destroy(unsigned short *)
; 71   : 	{	// destroy a unsigned short (do nothing)
; 72   : 	}
; 73   :  #endif /* _NATIVE_WCHAR_T_DEFINED */
; 74   : 
; 75   : 		// TEMPLATE FUNCTION _Destroy_range
; 76   : template<class _Alloc> inline
; 77   : 	void _Destroy_range(typename _Alloc::pointer _First,
; 78   : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 79   : 		_Nonscalar_ptr_iterator_tag)
; 80   : 	{	// destroy [_First, _Last), arbitrary type
; 81   : 	for (; _First != _Last; ++_First)
; 82   : 		_Al.destroy(_First);
; 83   : 	}
; 84   : 
; 85   : template<class _Alloc> inline
; 86   : 	void _Destroy_range(typename _Alloc::pointer _First,
; 87   : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 88   : 		_Scalar_ptr_iterator_tag)
; 89   : 	{	// destroy [_First, _Last), scalar type (do nothing)
; 90   : 	}
; 91   : 
; 92   : template<class _Alloc> inline
; 93   : 	void _Destroy_range(typename _Alloc::pointer _First,
; 94   : 		typename _Alloc::pointer _Last, _Alloc& _Al)
; 95   : 	{	// destroy [_First, _Last)
; 96   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 97   : 	}
; 98   : 
; 99   : 		// TEMPLATE CLASS _Is_simple_alloc
; 100  : template<class _Alty>
; 101  : 	struct _Is_simple_alloc
; 102  : 		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
; 103  : 		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
; 104  : 		&& is_same<typename _Alty::pointer,
; 105  : 			typename _Alty::value_type *>::value
; 106  : 		&& is_same<typename _Alty::const_pointer,
; 107  : 			const typename _Alty::value_type *>::value
; 108  : 		&& is_same<typename _Alty::reference,
; 109  : 			typename _Alty::value_type&>::value
; 110  : 		&& is_same<typename _Alty::const_reference,
; 111  : 			const typename _Alty::value_type&>::value>
; 112  : 	{	// tests if allocator has simple addressing
; 113  : 	};
; 114  : 
; 115  : 		// TEMPLATE CLASS _Simple_types
; 116  : template<class _Value_type>
; 117  : 	struct _Simple_types
; 118  : 	{	// wraps types needed by iterators
; 119  : 	typedef _Value_type value_type;
; 120  : 	typedef size_t size_type;
; 121  : 	typedef ptrdiff_t difference_type;
; 122  : 	typedef value_type *pointer;
; 123  : 	typedef const value_type *const_pointer;
; 124  : 	typedef value_type& reference;
; 125  : 	typedef const value_type& const_reference;
; 126  : 	};
; 127  : 
; 128  : 		// TEMPLATE CLASS _Get_voidptr
; 129  : template<class _Alty,
; 130  : 	class _Pointer>
; 131  : 	struct _Get_voidptr
; 132  : 	{	// get void pointer for allocator
; 133  : 	typedef typename _Alty::template rebind<void>::other _Alvoid;
; 134  : 	typedef typename _Alvoid::pointer type;
; 135  : 	};
; 136  : 
; 137  : template<class _Alty,
; 138  : 	class _Ty>
; 139  : 	struct _Get_voidptr<_Alty, _Ty *>
; 140  : 	{	// get raw void pointer for allocator
; 141  : 	typedef void *type;
; 142  : 	};
; 143  : 
; 144  : 		// TEMPLATE CLASS _Is_iterator
; 145  : template<class _Iter>
; 146  : 	struct _Is_iterator
; 147  : 	: public integral_constant<bool, !is_integral<_Iter>::value>
; 148  : 	{	// tests for reasonable iterator candidate
; 149  : 	};
; 150  : 
; 151  : 		// TEMPLATE STRUCT _Get_first_parameter
; 152  : template<class _Ty>
; 153  : 	struct _Get_first_parameter;
; 154  : 
; 155  : template<template<class, class...> class _Ty,
; 156  : 	class _First,
; 157  : 	class... _Rest>
; 158  : 	struct _Get_first_parameter<_Ty<_First, _Rest...> >
; 159  : 	{	// given _Ty<_First, _Rest...>, extract _First
; 160  : 	typedef _First type;
; 161  : 	};
; 162  : 
; 163  : 		// TEMPLATE STRUCT _Replace_first_parameter
; 164  : template<class _Newfirst,
; 165  : 	class _Ty>
; 166  : 	struct _Replace_first_parameter;
; 167  : 
; 168  : template<class _Newfirst,
; 169  : 	template<class, class...> class _Ty,
; 170  : 	class _First,
; 171  : 	class... _Rest>
; 172  : 	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
; 173  : 	{	// given _Ty<_First, _Rest...>, replace _First
; 174  : 	typedef _Ty<_Newfirst, _Rest...> type;
; 175  : 	};
; 176  : 
; 177  : 		// TEMPLATE STRUCT _Get_element_type
; 178  : template<class _Ty>
; 179  : 	struct _Get_element_type
; 180  : 	_GET_TYPE_OR_DEFAULT(element_type,
; 181  : 		typename _Get_first_parameter<_Uty>::type);
; 182  : 
; 183  : 		// TEMPLATE STRUCT _Get_ptr_difference_type
; 184  : template<class _Ty>
; 185  : 	struct _Get_ptr_difference_type
; 186  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 187  : 		ptrdiff_t);
; 188  : 
; 189  : 		// TEMPLATE STRUCT _Get_rebind_type
; 190  : template<class _Ty,
; 191  : 	class _Other>
; 192  : 	struct _Get_rebind_type
; 193  : 	_GET_TYPE_OR_DEFAULT(template rebind<_Other>::other,
; 194  : 		typename _Replace_first_parameter<_Other _COMMA _Uty>::type);
; 195  : 
; 196  : 		// TEMPLATE CLASS pointer_traits
; 197  : template<class _Ty>
; 198  : 	struct pointer_traits
; 199  : 	{	// defines traits for arbitrary pointers
; 200  : 	typedef typename _Get_element_type<_Ty>::type element_type;
; 201  : 	typedef _Ty pointer;
; 202  : 	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;
; 203  : 
; 204  : 	template<class _Other>
; 205  : 		using rebind = typename _Get_rebind_type<_Ty, _Other>::type;
; 206  : 
; 207  : 	typedef typename _If<is_void<element_type>::value,
; 208  : 		char&,
; 209  : 		typename add_reference<element_type>::type>::type _Reftype;
; 210  : 
; 211  : 	static pointer pointer_to(_Reftype _Val)
; 212  : 		{	// convert raw reference to pointer
; 213  : 		return (_Ty::pointer_to(_Val));
; 214  : 		}
; 215  : 	};
; 216  : 
; 217  : 		// TEMPLATE CLASS pointer_traits<_Ty *>
; 218  : template<class _Ty>
; 219  : 	struct pointer_traits<_Ty *>
; 220  : 	{	// defines traits for raw pointers
; 221  : 	typedef _Ty element_type;
; 222  : 	typedef _Ty *pointer;
; 223  : 	typedef ptrdiff_t difference_type;
; 224  : 
; 225  : 	template<class _Other>
; 226  : 		using rebind = _Other *;
; 227  : 
; 228  : 	typedef typename _If<is_void<_Ty>::value,
; 229  : 		char&,
; 230  : 		typename add_reference<_Ty>::type>::type _Reftype;
; 231  : 
; 232  : 	static pointer pointer_to(_Reftype _Val)
; 233  : 		{	// convert raw reference to pointer
; 234  : 		return (_STD addressof(_Val));
; 235  : 		}
; 236  : 	};
; 237  : 
; 238  : 		// TEMPLATE STRUCT _Get_pointer_type
; 239  : template<class _Ty>
; 240  : 	struct _Get_pointer_type
; 241  : 	_GET_TYPE_OR_DEFAULT(pointer,
; 242  : 		typename _Ty::value_type *);
; 243  : 
; 244  : 		// TEMPLATE STRUCT _Get_const_pointer_type
; 245  : template<class _Ty>
; 246  : 	struct _Get_const_pointer_type
; 247  : 	_GET_TYPE_OR_DEFAULT(const_pointer,
; 248  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 249  : 			::template rebind<const typename _Ty::value_type>);
; 250  : 
; 251  : 		// TEMPLATE STRUCT _Get_void_pointer_type
; 252  : template<class _Ty>
; 253  : 	struct _Get_void_pointer_type
; 254  : 	_GET_TYPE_OR_DEFAULT(void_pointer,
; 255  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 256  : 			::template rebind<void>);
; 257  : 
; 258  : 		// TEMPLATE STRUCT _Get_const_void_pointer_type
; 259  : template<class _Ty>
; 260  : 	struct _Get_const_void_pointer_type
; 261  : 	_GET_TYPE_OR_DEFAULT(const_void_pointer,
; 262  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 263  : 			::template rebind<const void>);
; 264  : 
; 265  : 		// TEMPLATE STRUCT _Get_difference_type
; 266  : template<class _Ty>
; 267  : 	struct _Get_difference_type
; 268  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 269  : 		typename _Get_ptr_difference_type<
; 270  : 			typename _Get_pointer_type<_Ty>::type>::type);
; 271  : 
; 272  : 		// TEMPLATE STRUCT _Get_size_type
; 273  : template<class _Ty>
; 274  : 	struct _Get_size_type
; 275  : 	_GET_TYPE_OR_DEFAULT(size_type,
; 276  : 		typename make_unsigned<
; 277  : 			typename _Get_difference_type<_Ty>::type>::type);
; 278  : 
; 279  : 		// TEMPLATE STRUCT _Get_propagate_on_container_copy
; 280  : template<class _Ty>
; 281  : 	struct _Get_propagate_on_container_copy
; 282  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_copy_assignment,
; 283  : 		false_type);
; 284  : 
; 285  : 		// TEMPLATE STRUCT _Get_propagate_on_container_move
; 286  : template<class _Ty>
; 287  : 	struct _Get_propagate_on_container_move
; 288  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_move_assignment,
; 289  : 		false_type);
; 290  : 
; 291  : 		// TEMPLATE STRUCT _Get_propagate_on_container_swap
; 292  : template<class _Ty>
; 293  : 	struct _Get_propagate_on_container_swap
; 294  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_swap,
; 295  : 		false_type);
; 296  : 
; 297  : 		// STRUCT _Alloc_allocate
; 298  : struct _Alloc_allocate
; 299  : 	{	// determines allocator_traits<_Alloc>
; 300  : 		// ::allocate(size_type, const_void_pointer)
; 301  : 
; 302  : 	template<class _Alloc,
; 303  : 		class _Size_type,
; 304  : 		class _Const_void_pointer>
; 305  : 		static auto _Fn(int, _Alloc& _Al,
; 306  : 			_Size_type _Count,
; 307  : 			_Const_void_pointer _Hint)
; 308  : 			-> decltype(_Al.allocate(_Count, _Hint))
; 309  : 		{	// call allocator supplied version
; 310  : 		return (_Al.allocate(_Count, _Hint));
; 311  : 		}
; 312  : 
; 313  : 	template<class _Alloc,
; 314  : 		class _Size_type,
; 315  : 		class _Const_void_pointer>
; 316  : 		static auto _Fn(_Wrap_int, _Alloc& _Al,
; 317  : 			_Size_type _Count,
; 318  : 			_Const_void_pointer)
; 319  : 			-> decltype(_Al.allocate(_Count))
; 320  : 		{	// call default version
; 321  : 		return (_Al.allocate(_Count));
; 322  : 		}
; 323  : 	};
; 324  : 
; 325  : 		// STRUCT _Alloc_construct
; 326  : struct _Alloc_construct
; 327  : 	{	// determines allocator_traits<_Ty>
; 328  : 		// ::construct(_Ty&, _Objty *, _Types...)
; 329  : 
; 330  : 	template<class _Ty,
; 331  : 		class _Objty,
; 332  : 		class... _Types>
; 333  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
; 334  : 			_Types&&... _Args)
; 335  : 			-> decltype(
; 336  : 				_Al.construct(_Ptr, _STD forward<_Types>(_Args)...))
; 337  : 		{	// call allocator supplied version
; 338  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 339  : 		}
; 340  : 
; 341  : 	template<class _Ty,
; 342  : 		class _Objty,
; 343  : 		class... _Types>
; 344  : 		static auto _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
; 345  : 			_Types&&... _Args)
; 346  : 			-> void
; 347  : 		{	// call default version
; 348  : 		::new (static_cast<void *>(_Ptr))
; 349  : 			_Objty(_STD forward<_Types>(_Args)...);
; 350  : 		}
; 351  : 
; 352  : 	};
; 353  : 
; 354  : 		// STRUCT _Alloc_destroy
; 355  : struct _Alloc_destroy
; 356  : 	{	// determines allocator_traits<_Ty>::destroy(_Ty&, _Objty *)
; 357  : 	template<class _Ty,
; 358  : 		class _Objty>
; 359  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
; 360  : 			-> decltype(_Al.destroy(_Ptr))
; 361  : 		{	// call allocator supplied version
; 362  : 		_Al.destroy(_Ptr);
; 363  : 		}
; 364  : 
; 365  : 	template<class _Ty,
; 366  : 		class _Objty>
; 367  : 		static auto _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
; 368  : 			-> void
; 369  : 		{	// call default version
; 370  : 		_Ptr->~_Objty();
; 371  : 		}
; 372  : 	};
; 373  : 
; 374  : 		// STRUCT _Alloc_max_size
; 375  : struct _Alloc_max_size
; 376  : 	{	// determines allocator_traits<_Ty>::max_size(const _Ty&)
; 377  : 	template<class _Ty>
; 378  : 		static auto _Fn(int, const _Ty& _Al)
; 379  : 			-> decltype(_Al.max_size())
; 380  : 		{	// call allocator supplied version
; 381  : 		return (_Al.max_size());
; 382  : 		}
; 383  : 
; 384  : 	template<class _Ty>
; 385  : 		static auto _Fn(_Wrap_int, const _Ty&)
; 386  : 			-> typename _Get_size_type<_Ty>::type
; 387  : 		{	// call default version
; 388  : 		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
; 389  : 		}
; 390  : 	};
; 391  : 
; 392  : 		// STRUCT _Alloc_select
; 393  : struct _Alloc_select
; 394  : 	{	// determines allocator_traits<_Ty>
; 395  : 		// ::select_on_container_copy_construction(const _Alloc&)
; 396  : 
; 397  : 	template<class _Ty>
; 398  : 		static auto _Fn(int, const _Ty& _Al)
; 399  : 			-> decltype((_Ty)_Al.select_on_container_copy_construction())
; 400  : 		{	// call allocator supplied version
; 401  : 		return (_Al.select_on_container_copy_construction());
; 402  : 		}
; 403  : 
; 404  : 	template<class _Ty>
; 405  : 		static auto _Fn(_Wrap_int, const _Ty& _Al)
; 406  : 			-> _Ty
; 407  : 		{	// call default version
; 408  : 		return (_Al);
; 409  : 		}
; 410  : 	};
; 411  : 
; 412  : 		// TEMPLATE CLASS allocator_traits
; 413  : template<class _Alloc>
; 414  : 	struct allocator_traits
; 415  : 	{	// defines traits for allocators
; 416  : 	typedef allocator_traits<_Alloc> other;
; 417  : 
; 418  : 	typedef _Alloc allocator_type;
; 419  : 	typedef typename _Alloc::value_type value_type;
; 420  : 
; 421  : 	typedef typename _Get_pointer_type<_Alloc>::type
; 422  : 		pointer;
; 423  : 	typedef typename _Get_const_pointer_type<_Alloc>::type
; 424  : 		const_pointer;
; 425  : 	typedef typename _Get_void_pointer_type<_Alloc>::type
; 426  : 		void_pointer;
; 427  : 	typedef typename _Get_const_void_pointer_type<_Alloc>::type
; 428  : 		const_void_pointer;
; 429  : 
; 430  : 	typedef typename _Get_size_type<_Alloc>::type size_type;
; 431  : 	typedef typename _Get_difference_type<_Alloc>::type difference_type;
; 432  : 
; 433  : 	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
; 434  : 		propagate_on_container_copy_assignment;
; 435  : 	typedef typename _Get_propagate_on_container_move<_Alloc>::type
; 436  : 		propagate_on_container_move_assignment;
; 437  : 	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
; 438  : 		propagate_on_container_swap;
; 439  : 
; 440  : 	template<class _Other>
; 441  : 		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;
; 442  : 
; 443  : 	template<class _Other>
; 444  : 		using rebind_traits = allocator_traits<rebind_alloc<_Other> >;
; 445  : 
; 446  : 	static pointer allocate(_Alloc& _Al, size_type _Count)
; 447  : 		{	// allocate array of _Count elements
; 448  : 		return (_Al.allocate(_Count));
; 449  : 		}
; 450  : 
; 451  : 	static pointer allocate(_Alloc& _Al, size_type _Count,
; 452  : 		const_void_pointer _Hint)
; 453  : 		{	// allocate array of _Count elements, with hint
; 454  : 		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
; 455  : 		}
; 456  : 
; 457  : 	static void deallocate(_Alloc& _Al,
; 458  : 		pointer _Ptr, size_type _Count)
; 459  : 		{	// deallocate _Count elements at _Ptr
; 460  : 		_Al.deallocate(_Ptr, _Count);
; 461  : 		}
; 462  : 
; 463  : 	template<class _Ty,
; 464  : 		class... _Types>
; 465  : 		static void construct(_Alloc& _Al, _Ty *_Ptr,
; 466  : 			_Types&&... _Args)
; 467  : 		{	// construct _Ty(_Types...) at _Ptr
; 468  : 		_Alloc_construct::_Fn(0, _Al, _Ptr,
; 469  : 			_STD forward<_Types>(_Args)...);
; 470  : 		}
; 471  : 
; 472  : 
; 473  : 	template<class _Ty>
; 474  : 		static void destroy(_Alloc& _Al, _Ty *_Ptr)
; 475  : 		{	// destroy object at _Ptr
; 476  : 		_Alloc_destroy::_Fn(0, _Al, _Ptr);
; 477  : 		}
; 478  : 
; 479  : 	static size_type max_size(const _Alloc& _Al)
; 480  : 		{	// get maximum size
; 481  : 		return (_Alloc_max_size::_Fn(0, _Al));
; 482  : 		}
; 483  : 
; 484  : 	static _Alloc select_on_container_copy_construction(
; 485  : 		const _Alloc& _Al)
; 486  : 		{	// get allocator to use
; 487  : 		return (_Alloc_select::_Fn(0, _Al));
; 488  : 		}
; 489  : 	};
; 490  : 
; 491  : 		// TEMPLATE CLASS _Allocator_base
; 492  : template<class _Ty>
; 493  : 	struct _Allocator_base
; 494  : 	{	// base class for generic allocators
; 495  : 	typedef _Ty value_type;
; 496  : 	};
; 497  : 
; 498  : 		// TEMPLATE CLASS _Allocator_base<const _Ty>
; 499  : template<class _Ty>
; 500  : 	struct _Allocator_base<const _Ty>
; 501  : 	{	// base class for generic allocators for const _Ty
; 502  : 	typedef _Ty value_type;
; 503  : 	};
; 504  : 
; 505  : 		// TEMPLATE CLASS allocator
; 506  : template<class _Ty>
; 507  : 	class allocator
; 508  : 		: public _Allocator_base<_Ty>
; 509  : 	{	// generic allocator for objects of class _Ty
; 510  : public:
; 511  : 	typedef allocator<_Ty> other;
; 512  : 
; 513  : 	typedef _Allocator_base<_Ty> _Mybase;
; 514  : 	typedef typename _Mybase::value_type value_type;
; 515  : 
; 516  : 	typedef value_type *pointer;
; 517  : 	typedef const value_type *const_pointer;
; 518  : 	typedef void *void_pointer;
; 519  : 	typedef const void *const_void_pointer;
; 520  : 
; 521  : 	typedef value_type& reference;
; 522  : 	typedef const value_type& const_reference;
; 523  : 
; 524  : 	typedef size_t size_type;
; 525  : 	typedef ptrdiff_t difference_type;
; 526  : 
; 527  : 	typedef false_type propagate_on_container_copy_assignment;
; 528  : 	typedef false_type propagate_on_container_move_assignment;
; 529  : 	typedef false_type propagate_on_container_swap;
; 530  : 
; 531  : 	allocator<_Ty> select_on_container_copy_construction() const
; 532  : 		{	// return this allocator
; 533  : 		return (*this);
; 534  : 		}
; 535  : 
; 536  : 	template<class _Other>
; 537  : 		struct rebind
; 538  : 		{	// convert this type to allocator<_Other>
; 539  : 		typedef allocator<_Other> other;
; 540  : 		};
; 541  : 
; 542  : 	pointer address(reference _Val) const _NOEXCEPT
; 543  : 		{	// return address of mutable _Val
; 544  : 		return (_STD addressof(_Val));
; 545  : 		}
; 546  : 
; 547  : 	const_pointer address(const_reference _Val) const _NOEXCEPT
; 548  : 		{	// return address of nonmutable _Val
; 549  : 		return (_STD addressof(_Val));
; 550  : 		}
; 551  : 
; 552  : 	allocator() _THROW0()
; 553  : 		{	// construct default allocator (do nothing)
; 554  : 		}
; 555  : 
; 556  : 	allocator(const allocator<_Ty>&) _THROW0()
; 557  : 		{	// construct by copying (do nothing)
; 558  : 		}
; 559  : 
; 560  : 	template<class _Other>
; 561  : 		allocator(const allocator<_Other>&) _THROW0()
; 562  : 		{	// construct from a related allocator (do nothing)
; 563  : 		}
; 564  : 
; 565  : 	template<class _Other>
; 566  : 		allocator<_Ty>& operator=(const allocator<_Other>&)
; 567  : 		{	// assign from a related allocator (do nothing)
; 568  : 		return (*this);
; 569  : 		}
; 570  : 
; 571  : 	void deallocate(pointer _Ptr, size_type)
; 572  : 		{	// deallocate object at _Ptr, ignore size
; 573  : 		::operator delete(_Ptr);
; 574  : 		}
; 575  : 
; 576  : 	pointer allocate(size_type _Count)
; 577  : 		{	// allocate array of _Count elements
; 578  : 		return (_Allocate(_Count, (pointer)0));
; 579  : 		}
; 580  : 
; 581  : 	pointer allocate(size_type _Count, const void *)
; 582  : 		{	// allocate array of _Count elements, ignore hint
; 583  : 		return (allocate(_Count));
; 584  : 		}
; 585  : 
; 586  : 	void construct(_Ty *_Ptr)
; 587  : 		{	// default construct object at _Ptr
; 588  : 		::new ((void *)_Ptr) _Ty();
; 589  : 		}
; 590  : 
; 591  : 	void construct(_Ty *_Ptr, const _Ty& _Val)
; 592  : 		{	// construct object at _Ptr with value _Val
; 593  : 		::new ((void *)_Ptr) _Ty(_Val);
; 594  : 		}
; 595  : 
; 596  : 	template<class _Objty,
; 597  : 		class... _Types>
; 598  : 		void construct(_Objty *_Ptr, _Types&&... _Args)
; 599  : 		{	// construct _Objty(_Types...) at _Ptr
; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00035	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0003b	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File a:\vs\vc\include\deque

; 897  : 		this->_Myproxy->_Mycont = this;

  00042	8b 06		 mov	 eax, DWORD PTR [esi]
  00044	89 30		 mov	 DWORD PTR [eax], esi

; 952  : 		}

  00046	8b c6		 mov	 eax, esi
  00048	5e		 pop	 esi
  00049	c3		 ret	 0
$LN48@deque:
; File a:\vs\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  0004a	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN50@deque:
$LN47@deque:
  0004f	cc		 int	 3
??0?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE@XZ ENDP ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
;	COMDAT ?_Getal@?$_Deque_alloc@$0A@U?$_Deque_base_types@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Deque_alloc@$0A@U?$_Deque_base_types@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@2@XZ PROC ; std::_Deque_alloc<0,std::_Deque_base_types<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > > >::_Getal, COMDAT
; _this$ = ecx

; 911  : 		{	// get reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 912  : 		return (_Alty());

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 913  : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?_Getal@?$_Deque_alloc@$0A@U?$_Deque_base_types@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@2@XZ ENDP ; std::_Deque_alloc<0,std::_Deque_base_types<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
;	COMDAT ?_Free_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Free_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@@std@@QAEXXZ PROC ; std::_Deque_alloc<0,std::_Deque_base_types<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > > >::_Free_proxy, COMDAT
; _this$ = ecx

; 901  : 		{	// destroy proxy

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00003	ff 36		 push	 DWORD PTR [esi]
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	83 c4 04	 add	 esp, 4
; File a:\vs\vc\include\deque

; 907  : 		this->_Myproxy = 0;

  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00013	5e		 pop	 esi

; 908  : 		}

  00014	c3		 ret	 0
?_Free_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@@std@@QAEXXZ ENDP ; std::_Deque_alloc<0,std::_Deque_base_types<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
;	COMDAT ?_Alloc_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Alloc_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@@std@@QAEXXZ PROC ; std::_Deque_alloc<0,std::_Deque_base_types<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > > >::_Alloc_proxy, COMDAT
; _this$ = ecx

; 892  : 		{	// construct proxy from _Alval

  00000	56		 push	 esi
; File a:\vs\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00001	6a 08		 push	 8
; File a:\vs\vc\include\deque

; 892  : 		{	// construct proxy from _Alval

  00003	8b f1		 mov	 esi, ecx
; File a:\vs\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 15		 je	 SHORT $LN35@Alloc_prox
  00011	89 06		 mov	 DWORD PTR [esi], eax

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);
; 32   : 	}
; 33   : 
; 34   : 		// TEMPLATE FUNCTION _Construct
; 35   : template<class _Ty1,
; 36   : 	class _Ty2> inline
; 37   : 	void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
; 38   : 	{	// construct object at _Ptr with value _Val
; 39   : 	void *_Vptr = _Ptr;
; 40   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));
; 41   : 	}
; 42   : 
; 43   : template<class _Ty1> inline
; 44   : 	void _Construct(_Ty1 *_Ptr)
; 45   : 	{	// construct object at _Ptr with default value
; 46   : 	void *_Vptr = _Ptr;
; 47   : 
; 48   : 	::new (_Vptr) _Ty1();
; 49   : 	}
; 50   : 
; 51   : 		// TEMPLATE FUNCTION _Destroy
; 52   : template<class _Ty> inline
; 53   : 	void _Destroy(_Ty *_Ptr)
; 54   : 	{	// destroy object at _Ptr
; 55   : 	_Ptr->~_Ty();
; 56   : 	}
; 57   : 
; 58   : template<> inline
; 59   : 	void _Destroy(char *)
; 60   : 	{	// destroy a char (do nothing)
; 61   : 	}
; 62   : 
; 63   : template<> inline
; 64   : 	void _Destroy(wchar_t *)
; 65   : 	{	// destroy a wchar_t (do nothing)
; 66   : 	}
; 67   : 
; 68   :  #ifdef _NATIVE_WCHAR_T_DEFINED
; 69   : template<> inline
; 70   : 	void _Destroy(unsigned short *)
; 71   : 	{	// destroy a unsigned short (do nothing)
; 72   : 	}
; 73   :  #endif /* _NATIVE_WCHAR_T_DEFINED */
; 74   : 
; 75   : 		// TEMPLATE FUNCTION _Destroy_range
; 76   : template<class _Alloc> inline
; 77   : 	void _Destroy_range(typename _Alloc::pointer _First,
; 78   : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 79   : 		_Nonscalar_ptr_iterator_tag)
; 80   : 	{	// destroy [_First, _Last), arbitrary type
; 81   : 	for (; _First != _Last; ++_First)
; 82   : 		_Al.destroy(_First);
; 83   : 	}
; 84   : 
; 85   : template<class _Alloc> inline
; 86   : 	void _Destroy_range(typename _Alloc::pointer _First,
; 87   : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 88   : 		_Scalar_ptr_iterator_tag)
; 89   : 	{	// destroy [_First, _Last), scalar type (do nothing)
; 90   : 	}
; 91   : 
; 92   : template<class _Alloc> inline
; 93   : 	void _Destroy_range(typename _Alloc::pointer _First,
; 94   : 		typename _Alloc::pointer _Last, _Alloc& _Al)
; 95   : 	{	// destroy [_First, _Last)
; 96   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 97   : 	}
; 98   : 
; 99   : 		// TEMPLATE CLASS _Is_simple_alloc
; 100  : template<class _Alty>
; 101  : 	struct _Is_simple_alloc
; 102  : 		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
; 103  : 		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
; 104  : 		&& is_same<typename _Alty::pointer,
; 105  : 			typename _Alty::value_type *>::value
; 106  : 		&& is_same<typename _Alty::const_pointer,
; 107  : 			const typename _Alty::value_type *>::value
; 108  : 		&& is_same<typename _Alty::reference,
; 109  : 			typename _Alty::value_type&>::value
; 110  : 		&& is_same<typename _Alty::const_reference,
; 111  : 			const typename _Alty::value_type&>::value>
; 112  : 	{	// tests if allocator has simple addressing
; 113  : 	};
; 114  : 
; 115  : 		// TEMPLATE CLASS _Simple_types
; 116  : template<class _Value_type>
; 117  : 	struct _Simple_types
; 118  : 	{	// wraps types needed by iterators
; 119  : 	typedef _Value_type value_type;
; 120  : 	typedef size_t size_type;
; 121  : 	typedef ptrdiff_t difference_type;
; 122  : 	typedef value_type *pointer;
; 123  : 	typedef const value_type *const_pointer;
; 124  : 	typedef value_type& reference;
; 125  : 	typedef const value_type& const_reference;
; 126  : 	};
; 127  : 
; 128  : 		// TEMPLATE CLASS _Get_voidptr
; 129  : template<class _Alty,
; 130  : 	class _Pointer>
; 131  : 	struct _Get_voidptr
; 132  : 	{	// get void pointer for allocator
; 133  : 	typedef typename _Alty::template rebind<void>::other _Alvoid;
; 134  : 	typedef typename _Alvoid::pointer type;
; 135  : 	};
; 136  : 
; 137  : template<class _Alty,
; 138  : 	class _Ty>
; 139  : 	struct _Get_voidptr<_Alty, _Ty *>
; 140  : 	{	// get raw void pointer for allocator
; 141  : 	typedef void *type;
; 142  : 	};
; 143  : 
; 144  : 		// TEMPLATE CLASS _Is_iterator
; 145  : template<class _Iter>
; 146  : 	struct _Is_iterator
; 147  : 	: public integral_constant<bool, !is_integral<_Iter>::value>
; 148  : 	{	// tests for reasonable iterator candidate
; 149  : 	};
; 150  : 
; 151  : 		// TEMPLATE STRUCT _Get_first_parameter
; 152  : template<class _Ty>
; 153  : 	struct _Get_first_parameter;
; 154  : 
; 155  : template<template<class, class...> class _Ty,
; 156  : 	class _First,
; 157  : 	class... _Rest>
; 158  : 	struct _Get_first_parameter<_Ty<_First, _Rest...> >
; 159  : 	{	// given _Ty<_First, _Rest...>, extract _First
; 160  : 	typedef _First type;
; 161  : 	};
; 162  : 
; 163  : 		// TEMPLATE STRUCT _Replace_first_parameter
; 164  : template<class _Newfirst,
; 165  : 	class _Ty>
; 166  : 	struct _Replace_first_parameter;
; 167  : 
; 168  : template<class _Newfirst,
; 169  : 	template<class, class...> class _Ty,
; 170  : 	class _First,
; 171  : 	class... _Rest>
; 172  : 	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
; 173  : 	{	// given _Ty<_First, _Rest...>, replace _First
; 174  : 	typedef _Ty<_Newfirst, _Rest...> type;
; 175  : 	};
; 176  : 
; 177  : 		// TEMPLATE STRUCT _Get_element_type
; 178  : template<class _Ty>
; 179  : 	struct _Get_element_type
; 180  : 	_GET_TYPE_OR_DEFAULT(element_type,
; 181  : 		typename _Get_first_parameter<_Uty>::type);
; 182  : 
; 183  : 		// TEMPLATE STRUCT _Get_ptr_difference_type
; 184  : template<class _Ty>
; 185  : 	struct _Get_ptr_difference_type
; 186  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 187  : 		ptrdiff_t);
; 188  : 
; 189  : 		// TEMPLATE STRUCT _Get_rebind_type
; 190  : template<class _Ty,
; 191  : 	class _Other>
; 192  : 	struct _Get_rebind_type
; 193  : 	_GET_TYPE_OR_DEFAULT(template rebind<_Other>::other,
; 194  : 		typename _Replace_first_parameter<_Other _COMMA _Uty>::type);
; 195  : 
; 196  : 		// TEMPLATE CLASS pointer_traits
; 197  : template<class _Ty>
; 198  : 	struct pointer_traits
; 199  : 	{	// defines traits for arbitrary pointers
; 200  : 	typedef typename _Get_element_type<_Ty>::type element_type;
; 201  : 	typedef _Ty pointer;
; 202  : 	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;
; 203  : 
; 204  : 	template<class _Other>
; 205  : 		using rebind = typename _Get_rebind_type<_Ty, _Other>::type;
; 206  : 
; 207  : 	typedef typename _If<is_void<element_type>::value,
; 208  : 		char&,
; 209  : 		typename add_reference<element_type>::type>::type _Reftype;
; 210  : 
; 211  : 	static pointer pointer_to(_Reftype _Val)
; 212  : 		{	// convert raw reference to pointer
; 213  : 		return (_Ty::pointer_to(_Val));
; 214  : 		}
; 215  : 	};
; 216  : 
; 217  : 		// TEMPLATE CLASS pointer_traits<_Ty *>
; 218  : template<class _Ty>
; 219  : 	struct pointer_traits<_Ty *>
; 220  : 	{	// defines traits for raw pointers
; 221  : 	typedef _Ty element_type;
; 222  : 	typedef _Ty *pointer;
; 223  : 	typedef ptrdiff_t difference_type;
; 224  : 
; 225  : 	template<class _Other>
; 226  : 		using rebind = _Other *;
; 227  : 
; 228  : 	typedef typename _If<is_void<_Ty>::value,
; 229  : 		char&,
; 230  : 		typename add_reference<_Ty>::type>::type _Reftype;
; 231  : 
; 232  : 	static pointer pointer_to(_Reftype _Val)
; 233  : 		{	// convert raw reference to pointer
; 234  : 		return (_STD addressof(_Val));
; 235  : 		}
; 236  : 	};
; 237  : 
; 238  : 		// TEMPLATE STRUCT _Get_pointer_type
; 239  : template<class _Ty>
; 240  : 	struct _Get_pointer_type
; 241  : 	_GET_TYPE_OR_DEFAULT(pointer,
; 242  : 		typename _Ty::value_type *);
; 243  : 
; 244  : 		// TEMPLATE STRUCT _Get_const_pointer_type
; 245  : template<class _Ty>
; 246  : 	struct _Get_const_pointer_type
; 247  : 	_GET_TYPE_OR_DEFAULT(const_pointer,
; 248  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 249  : 			::template rebind<const typename _Ty::value_type>);
; 250  : 
; 251  : 		// TEMPLATE STRUCT _Get_void_pointer_type
; 252  : template<class _Ty>
; 253  : 	struct _Get_void_pointer_type
; 254  : 	_GET_TYPE_OR_DEFAULT(void_pointer,
; 255  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 256  : 			::template rebind<void>);
; 257  : 
; 258  : 		// TEMPLATE STRUCT _Get_const_void_pointer_type
; 259  : template<class _Ty>
; 260  : 	struct _Get_const_void_pointer_type
; 261  : 	_GET_TYPE_OR_DEFAULT(const_void_pointer,
; 262  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 263  : 			::template rebind<const void>);
; 264  : 
; 265  : 		// TEMPLATE STRUCT _Get_difference_type
; 266  : template<class _Ty>
; 267  : 	struct _Get_difference_type
; 268  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 269  : 		typename _Get_ptr_difference_type<
; 270  : 			typename _Get_pointer_type<_Ty>::type>::type);
; 271  : 
; 272  : 		// TEMPLATE STRUCT _Get_size_type
; 273  : template<class _Ty>
; 274  : 	struct _Get_size_type
; 275  : 	_GET_TYPE_OR_DEFAULT(size_type,
; 276  : 		typename make_unsigned<
; 277  : 			typename _Get_difference_type<_Ty>::type>::type);
; 278  : 
; 279  : 		// TEMPLATE STRUCT _Get_propagate_on_container_copy
; 280  : template<class _Ty>
; 281  : 	struct _Get_propagate_on_container_copy
; 282  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_copy_assignment,
; 283  : 		false_type);
; 284  : 
; 285  : 		// TEMPLATE STRUCT _Get_propagate_on_container_move
; 286  : template<class _Ty>
; 287  : 	struct _Get_propagate_on_container_move
; 288  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_move_assignment,
; 289  : 		false_type);
; 290  : 
; 291  : 		// TEMPLATE STRUCT _Get_propagate_on_container_swap
; 292  : template<class _Ty>
; 293  : 	struct _Get_propagate_on_container_swap
; 294  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_swap,
; 295  : 		false_type);
; 296  : 
; 297  : 		// STRUCT _Alloc_allocate
; 298  : struct _Alloc_allocate
; 299  : 	{	// determines allocator_traits<_Alloc>
; 300  : 		// ::allocate(size_type, const_void_pointer)
; 301  : 
; 302  : 	template<class _Alloc,
; 303  : 		class _Size_type,
; 304  : 		class _Const_void_pointer>
; 305  : 		static auto _Fn(int, _Alloc& _Al,
; 306  : 			_Size_type _Count,
; 307  : 			_Const_void_pointer _Hint)
; 308  : 			-> decltype(_Al.allocate(_Count, _Hint))
; 309  : 		{	// call allocator supplied version
; 310  : 		return (_Al.allocate(_Count, _Hint));
; 311  : 		}
; 312  : 
; 313  : 	template<class _Alloc,
; 314  : 		class _Size_type,
; 315  : 		class _Const_void_pointer>
; 316  : 		static auto _Fn(_Wrap_int, _Alloc& _Al,
; 317  : 			_Size_type _Count,
; 318  : 			_Const_void_pointer)
; 319  : 			-> decltype(_Al.allocate(_Count))
; 320  : 		{	// call default version
; 321  : 		return (_Al.allocate(_Count));
; 322  : 		}
; 323  : 	};
; 324  : 
; 325  : 		// STRUCT _Alloc_construct
; 326  : struct _Alloc_construct
; 327  : 	{	// determines allocator_traits<_Ty>
; 328  : 		// ::construct(_Ty&, _Objty *, _Types...)
; 329  : 
; 330  : 	template<class _Ty,
; 331  : 		class _Objty,
; 332  : 		class... _Types>
; 333  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
; 334  : 			_Types&&... _Args)
; 335  : 			-> decltype(
; 336  : 				_Al.construct(_Ptr, _STD forward<_Types>(_Args)...))
; 337  : 		{	// call allocator supplied version
; 338  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 339  : 		}
; 340  : 
; 341  : 	template<class _Ty,
; 342  : 		class _Objty,
; 343  : 		class... _Types>
; 344  : 		static auto _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
; 345  : 			_Types&&... _Args)
; 346  : 			-> void
; 347  : 		{	// call default version
; 348  : 		::new (static_cast<void *>(_Ptr))
; 349  : 			_Objty(_STD forward<_Types>(_Args)...);
; 350  : 		}
; 351  : 
; 352  : 	};
; 353  : 
; 354  : 		// STRUCT _Alloc_destroy
; 355  : struct _Alloc_destroy
; 356  : 	{	// determines allocator_traits<_Ty>::destroy(_Ty&, _Objty *)
; 357  : 	template<class _Ty,
; 358  : 		class _Objty>
; 359  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
; 360  : 			-> decltype(_Al.destroy(_Ptr))
; 361  : 		{	// call allocator supplied version
; 362  : 		_Al.destroy(_Ptr);
; 363  : 		}
; 364  : 
; 365  : 	template<class _Ty,
; 366  : 		class _Objty>
; 367  : 		static auto _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
; 368  : 			-> void
; 369  : 		{	// call default version
; 370  : 		_Ptr->~_Objty();
; 371  : 		}
; 372  : 	};
; 373  : 
; 374  : 		// STRUCT _Alloc_max_size
; 375  : struct _Alloc_max_size
; 376  : 	{	// determines allocator_traits<_Ty>::max_size(const _Ty&)
; 377  : 	template<class _Ty>
; 378  : 		static auto _Fn(int, const _Ty& _Al)
; 379  : 			-> decltype(_Al.max_size())
; 380  : 		{	// call allocator supplied version
; 381  : 		return (_Al.max_size());
; 382  : 		}
; 383  : 
; 384  : 	template<class _Ty>
; 385  : 		static auto _Fn(_Wrap_int, const _Ty&)
; 386  : 			-> typename _Get_size_type<_Ty>::type
; 387  : 		{	// call default version
; 388  : 		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
; 389  : 		}
; 390  : 	};
; 391  : 
; 392  : 		// STRUCT _Alloc_select
; 393  : struct _Alloc_select
; 394  : 	{	// determines allocator_traits<_Ty>
; 395  : 		// ::select_on_container_copy_construction(const _Alloc&)
; 396  : 
; 397  : 	template<class _Ty>
; 398  : 		static auto _Fn(int, const _Ty& _Al)
; 399  : 			-> decltype((_Ty)_Al.select_on_container_copy_construction())
; 400  : 		{	// call allocator supplied version
; 401  : 		return (_Al.select_on_container_copy_construction());
; 402  : 		}
; 403  : 
; 404  : 	template<class _Ty>
; 405  : 		static auto _Fn(_Wrap_int, const _Ty& _Al)
; 406  : 			-> _Ty
; 407  : 		{	// call default version
; 408  : 		return (_Al);
; 409  : 		}
; 410  : 	};
; 411  : 
; 412  : 		// TEMPLATE CLASS allocator_traits
; 413  : template<class _Alloc>
; 414  : 	struct allocator_traits
; 415  : 	{	// defines traits for allocators
; 416  : 	typedef allocator_traits<_Alloc> other;
; 417  : 
; 418  : 	typedef _Alloc allocator_type;
; 419  : 	typedef typename _Alloc::value_type value_type;
; 420  : 
; 421  : 	typedef typename _Get_pointer_type<_Alloc>::type
; 422  : 		pointer;
; 423  : 	typedef typename _Get_const_pointer_type<_Alloc>::type
; 424  : 		const_pointer;
; 425  : 	typedef typename _Get_void_pointer_type<_Alloc>::type
; 426  : 		void_pointer;
; 427  : 	typedef typename _Get_const_void_pointer_type<_Alloc>::type
; 428  : 		const_void_pointer;
; 429  : 
; 430  : 	typedef typename _Get_size_type<_Alloc>::type size_type;
; 431  : 	typedef typename _Get_difference_type<_Alloc>::type difference_type;
; 432  : 
; 433  : 	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
; 434  : 		propagate_on_container_copy_assignment;
; 435  : 	typedef typename _Get_propagate_on_container_move<_Alloc>::type
; 436  : 		propagate_on_container_move_assignment;
; 437  : 	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
; 438  : 		propagate_on_container_swap;
; 439  : 
; 440  : 	template<class _Other>
; 441  : 		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;
; 442  : 
; 443  : 	template<class _Other>
; 444  : 		using rebind_traits = allocator_traits<rebind_alloc<_Other> >;
; 445  : 
; 446  : 	static pointer allocate(_Alloc& _Al, size_type _Count)
; 447  : 		{	// allocate array of _Count elements
; 448  : 		return (_Al.allocate(_Count));
; 449  : 		}
; 450  : 
; 451  : 	static pointer allocate(_Alloc& _Al, size_type _Count,
; 452  : 		const_void_pointer _Hint)
; 453  : 		{	// allocate array of _Count elements, with hint
; 454  : 		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
; 455  : 		}
; 456  : 
; 457  : 	static void deallocate(_Alloc& _Al,
; 458  : 		pointer _Ptr, size_type _Count)
; 459  : 		{	// deallocate _Count elements at _Ptr
; 460  : 		_Al.deallocate(_Ptr, _Count);
; 461  : 		}
; 462  : 
; 463  : 	template<class _Ty,
; 464  : 		class... _Types>
; 465  : 		static void construct(_Alloc& _Al, _Ty *_Ptr,
; 466  : 			_Types&&... _Args)
; 467  : 		{	// construct _Ty(_Types...) at _Ptr
; 468  : 		_Alloc_construct::_Fn(0, _Al, _Ptr,
; 469  : 			_STD forward<_Types>(_Args)...);
; 470  : 		}
; 471  : 
; 472  : 
; 473  : 	template<class _Ty>
; 474  : 		static void destroy(_Alloc& _Al, _Ty *_Ptr)
; 475  : 		{	// destroy object at _Ptr
; 476  : 		_Alloc_destroy::_Fn(0, _Al, _Ptr);
; 477  : 		}
; 478  : 
; 479  : 	static size_type max_size(const _Alloc& _Al)
; 480  : 		{	// get maximum size
; 481  : 		return (_Alloc_max_size::_Fn(0, _Al));
; 482  : 		}
; 483  : 
; 484  : 	static _Alloc select_on_container_copy_construction(
; 485  : 		const _Alloc& _Al)
; 486  : 		{	// get allocator to use
; 487  : 		return (_Alloc_select::_Fn(0, _Al));
; 488  : 		}
; 489  : 	};
; 490  : 
; 491  : 		// TEMPLATE CLASS _Allocator_base
; 492  : template<class _Ty>
; 493  : 	struct _Allocator_base
; 494  : 	{	// base class for generic allocators
; 495  : 	typedef _Ty value_type;
; 496  : 	};
; 497  : 
; 498  : 		// TEMPLATE CLASS _Allocator_base<const _Ty>
; 499  : template<class _Ty>
; 500  : 	struct _Allocator_base<const _Ty>
; 501  : 	{	// base class for generic allocators for const _Ty
; 502  : 	typedef _Ty value_type;
; 503  : 	};
; 504  : 
; 505  : 		// TEMPLATE CLASS allocator
; 506  : template<class _Ty>
; 507  : 	class allocator
; 508  : 		: public _Allocator_base<_Ty>
; 509  : 	{	// generic allocator for objects of class _Ty
; 510  : public:
; 511  : 	typedef allocator<_Ty> other;
; 512  : 
; 513  : 	typedef _Allocator_base<_Ty> _Mybase;
; 514  : 	typedef typename _Mybase::value_type value_type;
; 515  : 
; 516  : 	typedef value_type *pointer;
; 517  : 	typedef const value_type *const_pointer;
; 518  : 	typedef void *void_pointer;
; 519  : 	typedef const void *const_void_pointer;
; 520  : 
; 521  : 	typedef value_type& reference;
; 522  : 	typedef const value_type& const_reference;
; 523  : 
; 524  : 	typedef size_t size_type;
; 525  : 	typedef ptrdiff_t difference_type;
; 526  : 
; 527  : 	typedef false_type propagate_on_container_copy_assignment;
; 528  : 	typedef false_type propagate_on_container_move_assignment;
; 529  : 	typedef false_type propagate_on_container_swap;
; 530  : 
; 531  : 	allocator<_Ty> select_on_container_copy_construction() const
; 532  : 		{	// return this allocator
; 533  : 		return (*this);
; 534  : 		}
; 535  : 
; 536  : 	template<class _Other>
; 537  : 		struct rebind
; 538  : 		{	// convert this type to allocator<_Other>
; 539  : 		typedef allocator<_Other> other;
; 540  : 		};
; 541  : 
; 542  : 	pointer address(reference _Val) const _NOEXCEPT
; 543  : 		{	// return address of mutable _Val
; 544  : 		return (_STD addressof(_Val));
; 545  : 		}
; 546  : 
; 547  : 	const_pointer address(const_reference _Val) const _NOEXCEPT
; 548  : 		{	// return address of nonmutable _Val
; 549  : 		return (_STD addressof(_Val));
; 550  : 		}
; 551  : 
; 552  : 	allocator() _THROW0()
; 553  : 		{	// construct default allocator (do nothing)
; 554  : 		}
; 555  : 
; 556  : 	allocator(const allocator<_Ty>&) _THROW0()
; 557  : 		{	// construct by copying (do nothing)
; 558  : 		}
; 559  : 
; 560  : 	template<class _Other>
; 561  : 		allocator(const allocator<_Other>&) _THROW0()
; 562  : 		{	// construct from a related allocator (do nothing)
; 563  : 		}
; 564  : 
; 565  : 	template<class _Other>
; 566  : 		allocator<_Ty>& operator=(const allocator<_Other>&)
; 567  : 		{	// assign from a related allocator (do nothing)
; 568  : 		return (*this);
; 569  : 		}
; 570  : 
; 571  : 	void deallocate(pointer _Ptr, size_type)
; 572  : 		{	// deallocate object at _Ptr, ignore size
; 573  : 		::operator delete(_Ptr);
; 574  : 		}
; 575  : 
; 576  : 	pointer allocate(size_type _Count)
; 577  : 		{	// allocate array of _Count elements
; 578  : 		return (_Allocate(_Count, (pointer)0));
; 579  : 		}
; 580  : 
; 581  : 	pointer allocate(size_type _Count, const void *)
; 582  : 		{	// allocate array of _Count elements, ignore hint
; 583  : 		return (allocate(_Count));
; 584  : 		}
; 585  : 
; 586  : 	void construct(_Ty *_Ptr)
; 587  : 		{	// default construct object at _Ptr
; 588  : 		::new ((void *)_Ptr) _Ty();
; 589  : 		}
; 590  : 
; 591  : 	void construct(_Ty *_Ptr, const _Ty& _Val)
; 592  : 		{	// construct object at _Ptr with value _Val
; 593  : 		::new ((void *)_Ptr) _Ty(_Val);
; 594  : 		}
; 595  : 
; 596  : 	template<class _Objty,
; 597  : 		class... _Types>
; 598  : 		void construct(_Objty *_Ptr, _Types&&... _Args)
; 599  : 		{	// construct _Objty(_Types...) at _Ptr
; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00013	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00019	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File a:\vs\vc\include\deque

; 897  : 		this->_Myproxy->_Mycont = this;

  00020	8b 06		 mov	 eax, DWORD PTR [esi]
  00022	89 30		 mov	 DWORD PTR [eax], esi
  00024	5e		 pop	 esi

; 898  : 		}

  00025	c3		 ret	 0
$LN35@Alloc_prox:
; File a:\vs\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  00026	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN37@Alloc_prox:
$LN34@Alloc_prox:
  0002b	cc		 int	 3
?_Alloc_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@@std@@QAEXXZ ENDP ; std::_Deque_alloc<0,std::_Deque_base_types<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
;	COMDAT ??1?$_Deque_alloc@$0A@U?$_Deque_base_types@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Deque_alloc@$0A@U?$_Deque_base_types@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@@std@@QAE@XZ PROC ; std::_Deque_alloc<0,std::_Deque_base_types<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > > >::~_Deque_alloc<0,std::_Deque_base_types<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > > >, COMDAT
; _this$ = ecx

; 878  : 		{	// destroy proxy

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00003	ff 36		 push	 DWORD PTR [esi]
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	83 c4 04	 add	 esp, 4
; File a:\vs\vc\include\deque

; 907  : 		this->_Myproxy = 0;

  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00013	5e		 pop	 esi

; 879  : 		_Free_proxy();
; 880  : 		}

  00014	c3		 ret	 0
??1?$_Deque_alloc@$0A@U?$_Deque_base_types@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@@std@@QAE@XZ ENDP ; std::_Deque_alloc<0,std::_Deque_base_types<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > > >::~_Deque_alloc<0,std::_Deque_base_types<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
;	COMDAT ??0?$_Deque_alloc@$0A@U?$_Deque_base_types@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$_Deque_alloc@$0A@U?$_Deque_base_types@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@1@@Z PROC ; std::_Deque_alloc<0,std::_Deque_base_types<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > > >::_Deque_alloc<0,std::_Deque_base_types<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > > >, COMDAT
; _this$ = ecx

; 872  : 	_Deque_alloc(const _Alloc& = _Alloc())

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File a:\vs\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00003	6a 08		 push	 8
; File a:\vs\vc\include\xutility

; 80   : 		{	// construct childless container

  00005	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File a:\vs\vc\include\deque

; 773  : 		_Map = _Mapptr();

  0000b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 774  : 		_Mapsize = 0;

  00012	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 775  : 		_Myoff = 0;

  00019	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 776  : 		_Mysize = 0;

  00020	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File a:\vs\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00027	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002c	83 c4 04	 add	 esp, 4
  0002f	85 c0		 test	 eax, eax
  00031	74 19		 je	 SHORT $LN42@Deque_allo
  00033	89 06		 mov	 DWORD PTR [esi], eax

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);
; 32   : 	}
; 33   : 
; 34   : 		// TEMPLATE FUNCTION _Construct
; 35   : template<class _Ty1,
; 36   : 	class _Ty2> inline
; 37   : 	void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
; 38   : 	{	// construct object at _Ptr with value _Val
; 39   : 	void *_Vptr = _Ptr;
; 40   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));
; 41   : 	}
; 42   : 
; 43   : template<class _Ty1> inline
; 44   : 	void _Construct(_Ty1 *_Ptr)
; 45   : 	{	// construct object at _Ptr with default value
; 46   : 	void *_Vptr = _Ptr;
; 47   : 
; 48   : 	::new (_Vptr) _Ty1();
; 49   : 	}
; 50   : 
; 51   : 		// TEMPLATE FUNCTION _Destroy
; 52   : template<class _Ty> inline
; 53   : 	void _Destroy(_Ty *_Ptr)
; 54   : 	{	// destroy object at _Ptr
; 55   : 	_Ptr->~_Ty();
; 56   : 	}
; 57   : 
; 58   : template<> inline
; 59   : 	void _Destroy(char *)
; 60   : 	{	// destroy a char (do nothing)
; 61   : 	}
; 62   : 
; 63   : template<> inline
; 64   : 	void _Destroy(wchar_t *)
; 65   : 	{	// destroy a wchar_t (do nothing)
; 66   : 	}
; 67   : 
; 68   :  #ifdef _NATIVE_WCHAR_T_DEFINED
; 69   : template<> inline
; 70   : 	void _Destroy(unsigned short *)
; 71   : 	{	// destroy a unsigned short (do nothing)
; 72   : 	}
; 73   :  #endif /* _NATIVE_WCHAR_T_DEFINED */
; 74   : 
; 75   : 		// TEMPLATE FUNCTION _Destroy_range
; 76   : template<class _Alloc> inline
; 77   : 	void _Destroy_range(typename _Alloc::pointer _First,
; 78   : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 79   : 		_Nonscalar_ptr_iterator_tag)
; 80   : 	{	// destroy [_First, _Last), arbitrary type
; 81   : 	for (; _First != _Last; ++_First)
; 82   : 		_Al.destroy(_First);
; 83   : 	}
; 84   : 
; 85   : template<class _Alloc> inline
; 86   : 	void _Destroy_range(typename _Alloc::pointer _First,
; 87   : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 88   : 		_Scalar_ptr_iterator_tag)
; 89   : 	{	// destroy [_First, _Last), scalar type (do nothing)
; 90   : 	}
; 91   : 
; 92   : template<class _Alloc> inline
; 93   : 	void _Destroy_range(typename _Alloc::pointer _First,
; 94   : 		typename _Alloc::pointer _Last, _Alloc& _Al)
; 95   : 	{	// destroy [_First, _Last)
; 96   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 97   : 	}
; 98   : 
; 99   : 		// TEMPLATE CLASS _Is_simple_alloc
; 100  : template<class _Alty>
; 101  : 	struct _Is_simple_alloc
; 102  : 		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
; 103  : 		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
; 104  : 		&& is_same<typename _Alty::pointer,
; 105  : 			typename _Alty::value_type *>::value
; 106  : 		&& is_same<typename _Alty::const_pointer,
; 107  : 			const typename _Alty::value_type *>::value
; 108  : 		&& is_same<typename _Alty::reference,
; 109  : 			typename _Alty::value_type&>::value
; 110  : 		&& is_same<typename _Alty::const_reference,
; 111  : 			const typename _Alty::value_type&>::value>
; 112  : 	{	// tests if allocator has simple addressing
; 113  : 	};
; 114  : 
; 115  : 		// TEMPLATE CLASS _Simple_types
; 116  : template<class _Value_type>
; 117  : 	struct _Simple_types
; 118  : 	{	// wraps types needed by iterators
; 119  : 	typedef _Value_type value_type;
; 120  : 	typedef size_t size_type;
; 121  : 	typedef ptrdiff_t difference_type;
; 122  : 	typedef value_type *pointer;
; 123  : 	typedef const value_type *const_pointer;
; 124  : 	typedef value_type& reference;
; 125  : 	typedef const value_type& const_reference;
; 126  : 	};
; 127  : 
; 128  : 		// TEMPLATE CLASS _Get_voidptr
; 129  : template<class _Alty,
; 130  : 	class _Pointer>
; 131  : 	struct _Get_voidptr
; 132  : 	{	// get void pointer for allocator
; 133  : 	typedef typename _Alty::template rebind<void>::other _Alvoid;
; 134  : 	typedef typename _Alvoid::pointer type;
; 135  : 	};
; 136  : 
; 137  : template<class _Alty,
; 138  : 	class _Ty>
; 139  : 	struct _Get_voidptr<_Alty, _Ty *>
; 140  : 	{	// get raw void pointer for allocator
; 141  : 	typedef void *type;
; 142  : 	};
; 143  : 
; 144  : 		// TEMPLATE CLASS _Is_iterator
; 145  : template<class _Iter>
; 146  : 	struct _Is_iterator
; 147  : 	: public integral_constant<bool, !is_integral<_Iter>::value>
; 148  : 	{	// tests for reasonable iterator candidate
; 149  : 	};
; 150  : 
; 151  : 		// TEMPLATE STRUCT _Get_first_parameter
; 152  : template<class _Ty>
; 153  : 	struct _Get_first_parameter;
; 154  : 
; 155  : template<template<class, class...> class _Ty,
; 156  : 	class _First,
; 157  : 	class... _Rest>
; 158  : 	struct _Get_first_parameter<_Ty<_First, _Rest...> >
; 159  : 	{	// given _Ty<_First, _Rest...>, extract _First
; 160  : 	typedef _First type;
; 161  : 	};
; 162  : 
; 163  : 		// TEMPLATE STRUCT _Replace_first_parameter
; 164  : template<class _Newfirst,
; 165  : 	class _Ty>
; 166  : 	struct _Replace_first_parameter;
; 167  : 
; 168  : template<class _Newfirst,
; 169  : 	template<class, class...> class _Ty,
; 170  : 	class _First,
; 171  : 	class... _Rest>
; 172  : 	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
; 173  : 	{	// given _Ty<_First, _Rest...>, replace _First
; 174  : 	typedef _Ty<_Newfirst, _Rest...> type;
; 175  : 	};
; 176  : 
; 177  : 		// TEMPLATE STRUCT _Get_element_type
; 178  : template<class _Ty>
; 179  : 	struct _Get_element_type
; 180  : 	_GET_TYPE_OR_DEFAULT(element_type,
; 181  : 		typename _Get_first_parameter<_Uty>::type);
; 182  : 
; 183  : 		// TEMPLATE STRUCT _Get_ptr_difference_type
; 184  : template<class _Ty>
; 185  : 	struct _Get_ptr_difference_type
; 186  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 187  : 		ptrdiff_t);
; 188  : 
; 189  : 		// TEMPLATE STRUCT _Get_rebind_type
; 190  : template<class _Ty,
; 191  : 	class _Other>
; 192  : 	struct _Get_rebind_type
; 193  : 	_GET_TYPE_OR_DEFAULT(template rebind<_Other>::other,
; 194  : 		typename _Replace_first_parameter<_Other _COMMA _Uty>::type);
; 195  : 
; 196  : 		// TEMPLATE CLASS pointer_traits
; 197  : template<class _Ty>
; 198  : 	struct pointer_traits
; 199  : 	{	// defines traits for arbitrary pointers
; 200  : 	typedef typename _Get_element_type<_Ty>::type element_type;
; 201  : 	typedef _Ty pointer;
; 202  : 	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;
; 203  : 
; 204  : 	template<class _Other>
; 205  : 		using rebind = typename _Get_rebind_type<_Ty, _Other>::type;
; 206  : 
; 207  : 	typedef typename _If<is_void<element_type>::value,
; 208  : 		char&,
; 209  : 		typename add_reference<element_type>::type>::type _Reftype;
; 210  : 
; 211  : 	static pointer pointer_to(_Reftype _Val)
; 212  : 		{	// convert raw reference to pointer
; 213  : 		return (_Ty::pointer_to(_Val));
; 214  : 		}
; 215  : 	};
; 216  : 
; 217  : 		// TEMPLATE CLASS pointer_traits<_Ty *>
; 218  : template<class _Ty>
; 219  : 	struct pointer_traits<_Ty *>
; 220  : 	{	// defines traits for raw pointers
; 221  : 	typedef _Ty element_type;
; 222  : 	typedef _Ty *pointer;
; 223  : 	typedef ptrdiff_t difference_type;
; 224  : 
; 225  : 	template<class _Other>
; 226  : 		using rebind = _Other *;
; 227  : 
; 228  : 	typedef typename _If<is_void<_Ty>::value,
; 229  : 		char&,
; 230  : 		typename add_reference<_Ty>::type>::type _Reftype;
; 231  : 
; 232  : 	static pointer pointer_to(_Reftype _Val)
; 233  : 		{	// convert raw reference to pointer
; 234  : 		return (_STD addressof(_Val));
; 235  : 		}
; 236  : 	};
; 237  : 
; 238  : 		// TEMPLATE STRUCT _Get_pointer_type
; 239  : template<class _Ty>
; 240  : 	struct _Get_pointer_type
; 241  : 	_GET_TYPE_OR_DEFAULT(pointer,
; 242  : 		typename _Ty::value_type *);
; 243  : 
; 244  : 		// TEMPLATE STRUCT _Get_const_pointer_type
; 245  : template<class _Ty>
; 246  : 	struct _Get_const_pointer_type
; 247  : 	_GET_TYPE_OR_DEFAULT(const_pointer,
; 248  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 249  : 			::template rebind<const typename _Ty::value_type>);
; 250  : 
; 251  : 		// TEMPLATE STRUCT _Get_void_pointer_type
; 252  : template<class _Ty>
; 253  : 	struct _Get_void_pointer_type
; 254  : 	_GET_TYPE_OR_DEFAULT(void_pointer,
; 255  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 256  : 			::template rebind<void>);
; 257  : 
; 258  : 		// TEMPLATE STRUCT _Get_const_void_pointer_type
; 259  : template<class _Ty>
; 260  : 	struct _Get_const_void_pointer_type
; 261  : 	_GET_TYPE_OR_DEFAULT(const_void_pointer,
; 262  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 263  : 			::template rebind<const void>);
; 264  : 
; 265  : 		// TEMPLATE STRUCT _Get_difference_type
; 266  : template<class _Ty>
; 267  : 	struct _Get_difference_type
; 268  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 269  : 		typename _Get_ptr_difference_type<
; 270  : 			typename _Get_pointer_type<_Ty>::type>::type);
; 271  : 
; 272  : 		// TEMPLATE STRUCT _Get_size_type
; 273  : template<class _Ty>
; 274  : 	struct _Get_size_type
; 275  : 	_GET_TYPE_OR_DEFAULT(size_type,
; 276  : 		typename make_unsigned<
; 277  : 			typename _Get_difference_type<_Ty>::type>::type);
; 278  : 
; 279  : 		// TEMPLATE STRUCT _Get_propagate_on_container_copy
; 280  : template<class _Ty>
; 281  : 	struct _Get_propagate_on_container_copy
; 282  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_copy_assignment,
; 283  : 		false_type);
; 284  : 
; 285  : 		// TEMPLATE STRUCT _Get_propagate_on_container_move
; 286  : template<class _Ty>
; 287  : 	struct _Get_propagate_on_container_move
; 288  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_move_assignment,
; 289  : 		false_type);
; 290  : 
; 291  : 		// TEMPLATE STRUCT _Get_propagate_on_container_swap
; 292  : template<class _Ty>
; 293  : 	struct _Get_propagate_on_container_swap
; 294  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_swap,
; 295  : 		false_type);
; 296  : 
; 297  : 		// STRUCT _Alloc_allocate
; 298  : struct _Alloc_allocate
; 299  : 	{	// determines allocator_traits<_Alloc>
; 300  : 		// ::allocate(size_type, const_void_pointer)
; 301  : 
; 302  : 	template<class _Alloc,
; 303  : 		class _Size_type,
; 304  : 		class _Const_void_pointer>
; 305  : 		static auto _Fn(int, _Alloc& _Al,
; 306  : 			_Size_type _Count,
; 307  : 			_Const_void_pointer _Hint)
; 308  : 			-> decltype(_Al.allocate(_Count, _Hint))
; 309  : 		{	// call allocator supplied version
; 310  : 		return (_Al.allocate(_Count, _Hint));
; 311  : 		}
; 312  : 
; 313  : 	template<class _Alloc,
; 314  : 		class _Size_type,
; 315  : 		class _Const_void_pointer>
; 316  : 		static auto _Fn(_Wrap_int, _Alloc& _Al,
; 317  : 			_Size_type _Count,
; 318  : 			_Const_void_pointer)
; 319  : 			-> decltype(_Al.allocate(_Count))
; 320  : 		{	// call default version
; 321  : 		return (_Al.allocate(_Count));
; 322  : 		}
; 323  : 	};
; 324  : 
; 325  : 		// STRUCT _Alloc_construct
; 326  : struct _Alloc_construct
; 327  : 	{	// determines allocator_traits<_Ty>
; 328  : 		// ::construct(_Ty&, _Objty *, _Types...)
; 329  : 
; 330  : 	template<class _Ty,
; 331  : 		class _Objty,
; 332  : 		class... _Types>
; 333  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
; 334  : 			_Types&&... _Args)
; 335  : 			-> decltype(
; 336  : 				_Al.construct(_Ptr, _STD forward<_Types>(_Args)...))
; 337  : 		{	// call allocator supplied version
; 338  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 339  : 		}
; 340  : 
; 341  : 	template<class _Ty,
; 342  : 		class _Objty,
; 343  : 		class... _Types>
; 344  : 		static auto _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
; 345  : 			_Types&&... _Args)
; 346  : 			-> void
; 347  : 		{	// call default version
; 348  : 		::new (static_cast<void *>(_Ptr))
; 349  : 			_Objty(_STD forward<_Types>(_Args)...);
; 350  : 		}
; 351  : 
; 352  : 	};
; 353  : 
; 354  : 		// STRUCT _Alloc_destroy
; 355  : struct _Alloc_destroy
; 356  : 	{	// determines allocator_traits<_Ty>::destroy(_Ty&, _Objty *)
; 357  : 	template<class _Ty,
; 358  : 		class _Objty>
; 359  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
; 360  : 			-> decltype(_Al.destroy(_Ptr))
; 361  : 		{	// call allocator supplied version
; 362  : 		_Al.destroy(_Ptr);
; 363  : 		}
; 364  : 
; 365  : 	template<class _Ty,
; 366  : 		class _Objty>
; 367  : 		static auto _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
; 368  : 			-> void
; 369  : 		{	// call default version
; 370  : 		_Ptr->~_Objty();
; 371  : 		}
; 372  : 	};
; 373  : 
; 374  : 		// STRUCT _Alloc_max_size
; 375  : struct _Alloc_max_size
; 376  : 	{	// determines allocator_traits<_Ty>::max_size(const _Ty&)
; 377  : 	template<class _Ty>
; 378  : 		static auto _Fn(int, const _Ty& _Al)
; 379  : 			-> decltype(_Al.max_size())
; 380  : 		{	// call allocator supplied version
; 381  : 		return (_Al.max_size());
; 382  : 		}
; 383  : 
; 384  : 	template<class _Ty>
; 385  : 		static auto _Fn(_Wrap_int, const _Ty&)
; 386  : 			-> typename _Get_size_type<_Ty>::type
; 387  : 		{	// call default version
; 388  : 		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
; 389  : 		}
; 390  : 	};
; 391  : 
; 392  : 		// STRUCT _Alloc_select
; 393  : struct _Alloc_select
; 394  : 	{	// determines allocator_traits<_Ty>
; 395  : 		// ::select_on_container_copy_construction(const _Alloc&)
; 396  : 
; 397  : 	template<class _Ty>
; 398  : 		static auto _Fn(int, const _Ty& _Al)
; 399  : 			-> decltype((_Ty)_Al.select_on_container_copy_construction())
; 400  : 		{	// call allocator supplied version
; 401  : 		return (_Al.select_on_container_copy_construction());
; 402  : 		}
; 403  : 
; 404  : 	template<class _Ty>
; 405  : 		static auto _Fn(_Wrap_int, const _Ty& _Al)
; 406  : 			-> _Ty
; 407  : 		{	// call default version
; 408  : 		return (_Al);
; 409  : 		}
; 410  : 	};
; 411  : 
; 412  : 		// TEMPLATE CLASS allocator_traits
; 413  : template<class _Alloc>
; 414  : 	struct allocator_traits
; 415  : 	{	// defines traits for allocators
; 416  : 	typedef allocator_traits<_Alloc> other;
; 417  : 
; 418  : 	typedef _Alloc allocator_type;
; 419  : 	typedef typename _Alloc::value_type value_type;
; 420  : 
; 421  : 	typedef typename _Get_pointer_type<_Alloc>::type
; 422  : 		pointer;
; 423  : 	typedef typename _Get_const_pointer_type<_Alloc>::type
; 424  : 		const_pointer;
; 425  : 	typedef typename _Get_void_pointer_type<_Alloc>::type
; 426  : 		void_pointer;
; 427  : 	typedef typename _Get_const_void_pointer_type<_Alloc>::type
; 428  : 		const_void_pointer;
; 429  : 
; 430  : 	typedef typename _Get_size_type<_Alloc>::type size_type;
; 431  : 	typedef typename _Get_difference_type<_Alloc>::type difference_type;
; 432  : 
; 433  : 	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
; 434  : 		propagate_on_container_copy_assignment;
; 435  : 	typedef typename _Get_propagate_on_container_move<_Alloc>::type
; 436  : 		propagate_on_container_move_assignment;
; 437  : 	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
; 438  : 		propagate_on_container_swap;
; 439  : 
; 440  : 	template<class _Other>
; 441  : 		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;
; 442  : 
; 443  : 	template<class _Other>
; 444  : 		using rebind_traits = allocator_traits<rebind_alloc<_Other> >;
; 445  : 
; 446  : 	static pointer allocate(_Alloc& _Al, size_type _Count)
; 447  : 		{	// allocate array of _Count elements
; 448  : 		return (_Al.allocate(_Count));
; 449  : 		}
; 450  : 
; 451  : 	static pointer allocate(_Alloc& _Al, size_type _Count,
; 452  : 		const_void_pointer _Hint)
; 453  : 		{	// allocate array of _Count elements, with hint
; 454  : 		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
; 455  : 		}
; 456  : 
; 457  : 	static void deallocate(_Alloc& _Al,
; 458  : 		pointer _Ptr, size_type _Count)
; 459  : 		{	// deallocate _Count elements at _Ptr
; 460  : 		_Al.deallocate(_Ptr, _Count);
; 461  : 		}
; 462  : 
; 463  : 	template<class _Ty,
; 464  : 		class... _Types>
; 465  : 		static void construct(_Alloc& _Al, _Ty *_Ptr,
; 466  : 			_Types&&... _Args)
; 467  : 		{	// construct _Ty(_Types...) at _Ptr
; 468  : 		_Alloc_construct::_Fn(0, _Al, _Ptr,
; 469  : 			_STD forward<_Types>(_Args)...);
; 470  : 		}
; 471  : 
; 472  : 
; 473  : 	template<class _Ty>
; 474  : 		static void destroy(_Alloc& _Al, _Ty *_Ptr)
; 475  : 		{	// destroy object at _Ptr
; 476  : 		_Alloc_destroy::_Fn(0, _Al, _Ptr);
; 477  : 		}
; 478  : 
; 479  : 	static size_type max_size(const _Alloc& _Al)
; 480  : 		{	// get maximum size
; 481  : 		return (_Alloc_max_size::_Fn(0, _Al));
; 482  : 		}
; 483  : 
; 484  : 	static _Alloc select_on_container_copy_construction(
; 485  : 		const _Alloc& _Al)
; 486  : 		{	// get allocator to use
; 487  : 		return (_Alloc_select::_Fn(0, _Al));
; 488  : 		}
; 489  : 	};
; 490  : 
; 491  : 		// TEMPLATE CLASS _Allocator_base
; 492  : template<class _Ty>
; 493  : 	struct _Allocator_base
; 494  : 	{	// base class for generic allocators
; 495  : 	typedef _Ty value_type;
; 496  : 	};
; 497  : 
; 498  : 		// TEMPLATE CLASS _Allocator_base<const _Ty>
; 499  : template<class _Ty>
; 500  : 	struct _Allocator_base<const _Ty>
; 501  : 	{	// base class for generic allocators for const _Ty
; 502  : 	typedef _Ty value_type;
; 503  : 	};
; 504  : 
; 505  : 		// TEMPLATE CLASS allocator
; 506  : template<class _Ty>
; 507  : 	class allocator
; 508  : 		: public _Allocator_base<_Ty>
; 509  : 	{	// generic allocator for objects of class _Ty
; 510  : public:
; 511  : 	typedef allocator<_Ty> other;
; 512  : 
; 513  : 	typedef _Allocator_base<_Ty> _Mybase;
; 514  : 	typedef typename _Mybase::value_type value_type;
; 515  : 
; 516  : 	typedef value_type *pointer;
; 517  : 	typedef const value_type *const_pointer;
; 518  : 	typedef void *void_pointer;
; 519  : 	typedef const void *const_void_pointer;
; 520  : 
; 521  : 	typedef value_type& reference;
; 522  : 	typedef const value_type& const_reference;
; 523  : 
; 524  : 	typedef size_t size_type;
; 525  : 	typedef ptrdiff_t difference_type;
; 526  : 
; 527  : 	typedef false_type propagate_on_container_copy_assignment;
; 528  : 	typedef false_type propagate_on_container_move_assignment;
; 529  : 	typedef false_type propagate_on_container_swap;
; 530  : 
; 531  : 	allocator<_Ty> select_on_container_copy_construction() const
; 532  : 		{	// return this allocator
; 533  : 		return (*this);
; 534  : 		}
; 535  : 
; 536  : 	template<class _Other>
; 537  : 		struct rebind
; 538  : 		{	// convert this type to allocator<_Other>
; 539  : 		typedef allocator<_Other> other;
; 540  : 		};
; 541  : 
; 542  : 	pointer address(reference _Val) const _NOEXCEPT
; 543  : 		{	// return address of mutable _Val
; 544  : 		return (_STD addressof(_Val));
; 545  : 		}
; 546  : 
; 547  : 	const_pointer address(const_reference _Val) const _NOEXCEPT
; 548  : 		{	// return address of nonmutable _Val
; 549  : 		return (_STD addressof(_Val));
; 550  : 		}
; 551  : 
; 552  : 	allocator() _THROW0()
; 553  : 		{	// construct default allocator (do nothing)
; 554  : 		}
; 555  : 
; 556  : 	allocator(const allocator<_Ty>&) _THROW0()
; 557  : 		{	// construct by copying (do nothing)
; 558  : 		}
; 559  : 
; 560  : 	template<class _Other>
; 561  : 		allocator(const allocator<_Other>&) _THROW0()
; 562  : 		{	// construct from a related allocator (do nothing)
; 563  : 		}
; 564  : 
; 565  : 	template<class _Other>
; 566  : 		allocator<_Ty>& operator=(const allocator<_Other>&)
; 567  : 		{	// assign from a related allocator (do nothing)
; 568  : 		return (*this);
; 569  : 		}
; 570  : 
; 571  : 	void deallocate(pointer _Ptr, size_type)
; 572  : 		{	// deallocate object at _Ptr, ignore size
; 573  : 		::operator delete(_Ptr);
; 574  : 		}
; 575  : 
; 576  : 	pointer allocate(size_type _Count)
; 577  : 		{	// allocate array of _Count elements
; 578  : 		return (_Allocate(_Count, (pointer)0));
; 579  : 		}
; 580  : 
; 581  : 	pointer allocate(size_type _Count, const void *)
; 582  : 		{	// allocate array of _Count elements, ignore hint
; 583  : 		return (allocate(_Count));
; 584  : 		}
; 585  : 
; 586  : 	void construct(_Ty *_Ptr)
; 587  : 		{	// default construct object at _Ptr
; 588  : 		::new ((void *)_Ptr) _Ty();
; 589  : 		}
; 590  : 
; 591  : 	void construct(_Ty *_Ptr, const _Ty& _Val)
; 592  : 		{	// construct object at _Ptr with value _Val
; 593  : 		::new ((void *)_Ptr) _Ty(_Val);
; 594  : 		}
; 595  : 
; 596  : 	template<class _Objty,
; 597  : 		class... _Types>
; 598  : 		void construct(_Objty *_Ptr, _Types&&... _Args)
; 599  : 		{	// construct _Objty(_Types...) at _Ptr
; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00035	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0003b	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File a:\vs\vc\include\deque

; 897  : 		this->_Myproxy->_Mycont = this;

  00042	8b 06		 mov	 eax, DWORD PTR [esi]
  00044	89 30		 mov	 DWORD PTR [eax], esi

; 875  : 		}

  00046	8b c6		 mov	 eax, esi
  00048	5e		 pop	 esi
  00049	c2 04 00	 ret	 4
$LN42@Deque_allo:
; File a:\vs\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  0004c	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN44@Deque_allo:
$LN41@Deque_allo:
  00051	cc		 int	 3
??0?$_Deque_alloc@$0A@U?$_Deque_base_types@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@1@@Z ENDP ; std::_Deque_alloc<0,std::_Deque_base_types<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > > >::_Deque_alloc<0,std::_Deque_base_types<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > >::~_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > >, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > >::~_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
;	COMDAT ?_Getblock@?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QBEII@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?_Getblock@?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QBEII@Z PROC ; std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > >::_Getblock, COMDAT
; _this$ = ecx

; 780  : 		{	// determine block from offset

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 781  : 			// NB: _Mapsize and _DEQUESIZ are guaranteed to be powers of 2
; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	48		 dec	 eax
  00007	23 45 08	 and	 eax, DWORD PTR __Off$[ebp]

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?_Getblock@?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QBEII@Z ENDP ; std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > >::_Getblock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
;	COMDAT ??0?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > >::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > >, COMDAT
; _this$ = ecx
; File a:\vs\vc\include\xutility

; 80   : 		{	// construct childless container

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File a:\vs\vc\include\deque

; 777  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  0001d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  00024	c3		 ret	 0
??0?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > >::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAEXPAPAU?$pair@MUD3DXVECTOR3@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAEXPAPAU?$pair@MUD3DXVECTOR3@@@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> *> >::deallocate, COMDAT
; _this$ = ecx

; 857  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 858  : 		_Mybase::deallocate(_Ptr, _Count);
; 859  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAEXPAPAU?$pair@MUD3DXVECTOR3@@@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAEPAPAU?$pair@MUD3DXVECTOR3@@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAEPAPAU?$pair@MUD3DXVECTOR3@@@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> *> >::allocate, COMDAT
; _this$ = ecx

; 846  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 19		 je	 SHORT $LN6@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00011	77 18		 ja	 SHORT $LN14@allocate
  00013	c1 e0 02	 shl	 eax, 2
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	74 06		 je	 SHORT $LN14@allocate
$LN6@allocate:

; 847  : 		return (_Mybase::allocate(_Count));

  00025	8b c1		 mov	 eax, ecx

; 848  : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN14@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002b	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN16@allocate:
$LN13@allocate:
  00030	cc		 int	 3
?allocate@?$_Wrap_alloc@V?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAEPAPAU?$pair@MUD3DXVECTOR3@@@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@QAEPAPAU?$pair@MUD3DXVECTOR3@@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@QAEPAPAU?$pair@MUD3DXVECTOR3@@@2@I@Z PROC ; std::allocator<std::pair<float,D3DXVECTOR3> *>::allocate, COMDAT
; _this$ = ecx

; 577  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 19		 je	 SHORT $LN4@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00011	77 18		 ja	 SHORT $LN11@allocate
  00013	c1 e0 02	 shl	 eax, 2
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	74 06		 je	 SHORT $LN11@allocate
$LN4@allocate:

; 578  : 		return (_Allocate(_Count, (pointer)0));

  00025	8b c1		 mov	 eax, ecx

; 579  : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN11@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002b	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN13@allocate:
$LN10@allocate:
  00030	cc		 int	 3
?allocate@?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@QAEPAPAU?$pair@MUD3DXVECTOR3@@@2@I@Z ENDP ; std::allocator<std::pair<float,D3DXVECTOR3> *>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@QAEXPAPAU?$pair@MUD3DXVECTOR3@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@QAEXPAPAU?$pair@MUD3DXVECTOR3@@@2@I@Z PROC ; std::allocator<std::pair<float,D3DXVECTOR3> *>::deallocate, COMDAT
; _this$ = ecx

; 572  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 574  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$allocator@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@QAEXPAPAU?$pair@MUD3DXVECTOR3@@@2@I@Z ENDP ; std::allocator<std::pair<float,D3DXVECTOR3> *>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> > >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (_Mytraits::max_size(*this));

  00000	b8 ff ff ff 0f	 mov	 eax, 268435455		; 0fffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAEXPAU?$pair@MUD3DXVECTOR3@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAEXPAU?$pair@MUD3DXVECTOR3@@@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> > >::deallocate, COMDAT
; _this$ = ecx

; 857  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 858  : 		_Mybase::deallocate(_Ptr, _Count);
; 859  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAEXPAU?$pair@MUD3DXVECTOR3@@@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAEPAU?$pair@MUD3DXVECTOR3@@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAEPAU?$pair@MUD3DXVECTOR3@@@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> > >::allocate, COMDAT
; _this$ = ecx

; 846  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 19		 je	 SHORT $LN6@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 0f	 cmp	 eax, 268435455		; 0fffffffH
  00011	77 18		 ja	 SHORT $LN14@allocate
  00013	c1 e0 04	 shl	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	74 06		 je	 SHORT $LN14@allocate
$LN6@allocate:

; 847  : 		return (_Mybase::allocate(_Count));

  00025	8b c1		 mov	 eax, ecx

; 848  : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN14@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002b	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN16@allocate:
$LN13@allocate:
  00030	cc		 int	 3
?allocate@?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAEPAU?$pair@MUD3DXVECTOR3@@@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> > >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> > >::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> > >, COMDAT
; _this$ = ecx

; 802  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> > >::_Wrap_alloc<std::allocator<std::pair<float,D3DXVECTOR3> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@SAIABV?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@SAIABV?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@Z PROC ; std::allocator_traits<std::allocator<std::pair<float,D3DXVECTOR3> > >::max_size, COMDAT

; 735  : 		return (_Al.max_size());

  00000	b8 ff ff ff 0f	 mov	 eax, 268435455		; 0fffffffH

; 736  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@SAIABV?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@Z ENDP ; std::allocator_traits<std::allocator<std::pair<float,D3DXVECTOR3> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@QBEIXZ PROC ; std::allocator<std::pair<float,D3DXVECTOR3> >::max_size, COMDAT
; _this$ = ecx

; 612  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 ff ff ff 0f	 mov	 eax, 268435455		; 0fffffffH

; 613  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@QBEIXZ ENDP ; std::allocator<std::pair<float,D3DXVECTOR3> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@QAEPAU?$pair@MUD3DXVECTOR3@@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@QAEPAU?$pair@MUD3DXVECTOR3@@@2@I@Z PROC ; std::allocator<std::pair<float,D3DXVECTOR3> >::allocate, COMDAT
; _this$ = ecx

; 577  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 19		 je	 SHORT $LN4@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 0f	 cmp	 eax, 268435455		; 0fffffffH
  00011	77 18		 ja	 SHORT $LN11@allocate
  00013	c1 e0 04	 shl	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	74 06		 je	 SHORT $LN11@allocate
$LN4@allocate:

; 578  : 		return (_Allocate(_Count, (pointer)0));

  00025	8b c1		 mov	 eax, ecx

; 579  : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN11@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002b	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN13@allocate:
$LN10@allocate:
  00030	cc		 int	 3
?allocate@?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@QAEPAU?$pair@MUD3DXVECTOR3@@@2@I@Z ENDP ; std::allocator<std::pair<float,D3DXVECTOR3> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@QAEXPAU?$pair@MUD3DXVECTOR3@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@QAEXPAU?$pair@MUD3DXVECTOR3@@@2@I@Z PROC ; std::allocator<std::pair<float,D3DXVECTOR3> >::deallocate, COMDAT
; _this$ = ecx

; 572  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 574  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@QAEXPAU?$pair@MUD3DXVECTOR3@@@2@I@Z ENDP ; std::allocator<std::pair<float,D3DXVECTOR3> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??0?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@QAE@XZ PROC ; std::allocator<std::pair<float,D3DXVECTOR3> >::allocator<std::pair<float,D3DXVECTOR3> >, COMDAT
; _this$ = ecx

; 553  : 		{	// construct default allocator (do nothing)
; 554  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@std@@QAE@XZ ENDP ; std::allocator<std::pair<float,D3DXVECTOR3> >::allocator<std::pair<float,D3DXVECTOR3> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
;	COMDAT ?__Initialize@CFlyTrace@@IAEXXZ
_TEXT	SEGMENT
?__Initialize@CFlyTrace@@IAEXXZ PROC			; CFlyTrace::__Initialize, COMDAT
; _this$ = ecx

; 48   : 	m_bRectShape=false;

  00000	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0

; 49   : 	m_dwColor=0;

  00004	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 50   : 	m_fSize=0.0f;

  0000b	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 51   : 	m_fTailLength=0.0f;	

  00012	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 52   : }

  00019	c3		 ret	 0
?__Initialize@CFlyTrace@@IAEXXZ ENDP			; CFlyTrace::__Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\vs\vc\include\xutility
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\xutility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\xutility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\xutility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\deque
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\deque
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\deque
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\deque
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\xutility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\xutility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\deque
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\vs\vc\include\deque
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\vs\vc\include\deque
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\deque
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\deque
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\vs\vc\include\deque
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\deque
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\vs\vc\include\deque
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\deque
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\utility
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\deque
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\algorithm
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
;	COMDAT ?Render@CFlyTrace@@QAEXXZ
_TEXT	SEGMENT
$T2 = -708						; size = 12
_v$3 = -696						; size = 12
$T4 = -684						; size = 12
$T5 = -672						; size = 12
$T6 = -660						; size = 12
$T7 = -648						; size = 12
$T8 = -636						; size = 12
$T9 = -624						; size = 12
$T10 = -624						; size = 12
_E$11 = -612						; size = 12
$T12 = -600						; size = 8
$T13 = -592						; size = 8
_fz$1$ = -584						; size = 4
$T14 = -580						; size = 8
$T15 = -572						; size = 8
_fy$1$ = -564						; size = 4
$T16 = -560						; size = 8
$T17 = -552						; size = 8
_pCurrentCamera$1$ = -544				; size = 4
__Mycont$1$ = -540					; size = 4
_this$GSCopy$1$ = -536					; size = 4
tv3818 = -532						; size = 4
_s$ = -528						; size = 4
_F$ = -524						; size = 12
_it2$1$ = -512						; size = 4
_VSVector$2$ = -508					; size = 4
_VSVector$ = -504					; size = 12
_it1$1$ = -492						; size = 4
_E$1$ = -488						; size = 4
_rate1$1$ = -488					; size = 4
__Block$1$ = -488					; size = 4
_E$3$ = -484						; size = 4
__Mycont$1$ = -484					; size = 4
_rkOld$1$ = -484					; size = 4
_it1$2$ = -480						; size = 4
$T18 = -476						; size = 4
_v$3$ = -476						; size = 4
__Idx$1$ = -476						; size = 4
$T19 = -476						; size = 1
_it2$2$ = -472						; size = 4
_VSVector$3$ = -468					; size = 4
_E$2$ = -464						; size = 4
__Block$1$ = -464					; size = 4
tv4043 = -464						; size = 4
tv4038 = -464						; size = 4
$T20 = -460						; size = 148
_matWorld$ = -312					; size = 64
_c$21 = -248						; size = 12
_m$ = -236						; size = 64
_U$22 = -172						; size = 12
_v$23 = -160						; size = 144
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?Render@CFlyTrace@@QAEXXZ PROC				; CFlyTrace::Render, COMDAT
; _this$ = ecx

; 120  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Render@CFlyTrace@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec b8 02 00
	00		 sub	 esp, 696		; 000002b8H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b c1		 mov	 eax, ecx
  0002f	89 85 e8 fd ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], eax

; 121  : 	if (m_TimePositionDeque.size()<=1)

  00035	83 78 24 01	 cmp	 DWORD PTR [eax+36], 1
  00039	0f 86 88 0e 00
	00		 jbe	 $LN729@Render
; File a:\vs\vc\include\vector

; 483  : 		_Mylast = pointer();

  0003f	33 ff		 xor	 edi, edi
  00041	c7 85 08 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _VSVector$[ebp], 0

; 484  : 		_Myend = pointer();

  0004b	33 c0		 xor	 eax, eax
  0004d	89 bd 2c fe ff
	ff		 mov	 DWORD PTR _VSVector$3$[ebp], edi
  00053	89 bd 0c fe ff
	ff		 mov	 DWORD PTR _VSVector$[ebp+4], edi
  00059	89 85 04 fe ff
	ff		 mov	 DWORD PTR _VSVector$2$[ebp], eax
  0005f	89 85 10 fe ff
	ff		 mov	 DWORD PTR _VSVector$[ebp+8], eax
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 126  : 	STATEMANAGER.SaveRenderState(D3DRS_ZFUNC,D3DCMP_LESS);

  00065	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0006b	6a 02		 push	 2
  0006d	6a 17		 push	 23			; 00000017H
  0006f	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00072	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 132  : 	STATEMANAGER.SaveTransform(D3DTS_WORLD, &matWorld);

  00077	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0007d	8d 85 c8 fe ff
	ff		 lea	 eax, DWORD PTR _matWorld$[ebp]
  00083	50		 push	 eax
  00084	68 00 01 00 00	 push	 256			; 00000100H
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;

  00089	89 bd 00 ff ff
	ff		 mov	 DWORD PTR _matWorld$[ebp+56], edi
  0008f	89 bd fc fe ff
	ff		 mov	 DWORD PTR _matWorld$[ebp+52], edi
  00095	89 bd f8 fe ff
	ff		 mov	 DWORD PTR _matWorld$[ebp+48], edi
  0009b	89 bd f4 fe ff
	ff		 mov	 DWORD PTR _matWorld$[ebp+44], edi
  000a1	89 bd ec fe ff
	ff		 mov	 DWORD PTR _matWorld$[ebp+36], edi
  000a7	89 bd e8 fe ff
	ff		 mov	 DWORD PTR _matWorld$[ebp+32], edi
  000ad	89 bd e4 fe ff
	ff		 mov	 DWORD PTR _matWorld$[ebp+28], edi
  000b3	89 bd e0 fe ff
	ff		 mov	 DWORD PTR _matWorld$[ebp+24], edi
  000b9	89 bd d8 fe ff
	ff		 mov	 DWORD PTR _matWorld$[ebp+16], edi
  000bf	89 bd d4 fe ff
	ff		 mov	 DWORD PTR _matWorld$[ebp+12], edi
  000c5	89 bd d0 fe ff
	ff		 mov	 DWORD PTR _matWorld$[ebp+8], edi
  000cb	89 bd cc fe ff
	ff		 mov	 DWORD PTR _matWorld$[ebp+4], edi

; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  000d1	c7 85 04 ff ff
	ff 00 00 80 3f	 mov	 DWORD PTR _matWorld$[ebp+60], 1065353216 ; 3f800000H
  000db	c7 85 f0 fe ff
	ff 00 00 80 3f	 mov	 DWORD PTR _matWorld$[ebp+40], 1065353216 ; 3f800000H
  000e5	c7 85 dc fe ff
	ff 00 00 80 3f	 mov	 DWORD PTR _matWorld$[ebp+20], 1065353216 ; 3f800000H
  000ef	c7 85 c8 fe ff
	ff 00 00 80 3f	 mov	 DWORD PTR _matWorld$[ebp], 1065353216 ; 3f800000H
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 132  : 	STATEMANAGER.SaveTransform(D3DTS_WORLD, &matWorld);

  000f9	e8 00 00 00 00	 call	 ?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SaveTransform

; 133  : 	STATEMANAGER.SaveVertexShader(D3DFVF_XYZ | D3DFVF_DIFFUSE | D3DFVF_TEX1);

  000fe	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00104	68 42 01 00 00	 push	 322			; 00000142H
  00109	e8 00 00 00 00	 call	 ?SaveVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SaveVertexShader

; 134  : 	STATEMANAGER.SaveRenderState(D3DRS_CULLMODE, D3DCULL_NONE);

  0010e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00114	6a 01		 push	 1
  00116	6a 16		 push	 22			; 00000016H
  00118	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 135  : 	
; 136  : 	STATEMANAGER.SaveRenderState(D3DRS_ALPHABLENDENABLE, TRUE);

  0011d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00123	6a 01		 push	 1
  00125	6a 1b		 push	 27			; 0000001bH
  00127	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 137  : 	STATEMANAGER.SaveRenderState(D3DRS_SRCBLEND, D3DBLEND_SRCALPHA);

  0012c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00132	6a 05		 push	 5
  00134	6a 13		 push	 19			; 00000013H
  00136	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 138  : 	STATEMANAGER.SaveRenderState(D3DRS_DESTBLEND, D3DBLEND_ONE);

  0013b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00141	6a 02		 push	 2
  00143	6a 14		 push	 20			; 00000014H
  00145	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 139  : 
; 140  : 	STATEMANAGER.SaveRenderState(D3DRS_ALPHATESTENABLE, TRUE);

  0014a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00150	6a 01		 push	 1
  00152	6a 0f		 push	 15			; 0000000fH
  00154	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 141  : 	STATEMANAGER.SaveRenderState(D3DRS_ALPHAFUNC, D3DCMP_GREATER);

  00159	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0015f	6a 05		 push	 5
  00161	6a 19		 push	 25			; 00000019H
  00163	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 142  : 	STATEMANAGER.SaveRenderState(D3DRS_ALPHAREF, 0x00000000);

  00168	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0016e	57		 push	 edi
  0016f	6a 18		 push	 24			; 00000018H
  00171	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 143  : 
; 144  : 	STATEMANAGER.SaveRenderState(D3DRS_BLENDOP, D3DBLENDOP_ADD );

  00176	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0017c	6a 01		 push	 1
  0017e	68 ab 00 00 00	 push	 171			; 000000abH
  00183	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 145  : 	//STATEMANAGER.SaveRenderState(D3DRS_BLENDOP, D3DBLENDOP_ADD );
; 146  : 	
; 147  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_DIFFUSE);

  00188	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0018e	57		 push	 edi
  0018f	6a 02		 push	 2
  00191	57		 push	 edi
  00192	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 148  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_TEXTURE);

  00197	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0019d	6a 02		 push	 2
  0019f	6a 03		 push	 3
  001a1	57		 push	 edi
  001a2	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 149  : 	//STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP, /*(m_bUseTexture)?D3DTOP_SELECTARG2:*/D3DTOP_SELECTARG2);
; 150  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_SELECTARG1);

  001a7	6a 02		 push	 2
  001a9	6a 01		 push	 1
  001ab	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001b1	57		 push	 edi
  001b2	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 151  : 
; 152  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG1, D3DTA_DIFFUSE);

  001b7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001bd	57		 push	 edi
  001be	6a 05		 push	 5
  001c0	57		 push	 edi
  001c1	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 153  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG2, D3DTA_TEXTURE);

  001c6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001cc	6a 02		 push	 2
  001ce	6a 06		 push	 6
  001d0	57		 push	 edi
  001d1	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 154  : 	//STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_MODULATE);
; 155  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAOP, /*(m_bUseTexture)?D3DTOP_SELECTARG2:*/D3DTOP_SELECTARG1);

  001d6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001dc	6a 02		 push	 2
  001de	6a 04		 push	 4
  001e0	57		 push	 edi
  001e1	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 156  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_COLOROP, D3DTOP_DISABLE);

  001e6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001ec	6a 01		 push	 1
  001ee	6a 01		 push	 1
  001f0	6a 01		 push	 1
  001f2	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 157  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  001f7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001fd	6a 01		 push	 1
  001ff	6a 04		 push	 4
  00201	6a 01		 push	 1
  00203	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 158  : 	STATEMANAGER.SetRenderState(D3DRS_LIGHTING, FALSE);

  00208	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0020e	57		 push	 edi
  0020f	68 89 00 00 00	 push	 137			; 00000089H
  00214	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 159  : 	STATEMANAGER.SetTexture(0, NULL);

  00219	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0021f	57		 push	 edi
  00220	57		 push	 edi
  00221	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 160  : 	STATEMANAGER.SetTexture(1, NULL);

  00226	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0022c	57		 push	 edi
  0022d	6a 01		 push	 1
  0022f	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 161  : 	
; 162  : 	
; 163  : 	D3DXMATRIX m;
; 164  : 	CScreen s;s.UpdateViewMatrix();

  00234	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _s$[ebp]
  0023a	e8 00 00 00 00	 call	 ??0CScreen@@QAE@XZ	; CScreen::CScreen
  0023f	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _s$[ebp]
  00245	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00249	e8 00 00 00 00	 call	 ?UpdateViewMatrix@CGraphicBase@@QAEXXZ ; CGraphicBase::UpdateViewMatrix

; 165  : 	CCamera * pCurrentCamera = CCameraManager::Instance().GetCurrentCamera();

  0024e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
  00254	e8 00 00 00 00	 call	 ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera
  00259	89 85 e0 fd ff
	ff		 mov	 DWORD PTR _pCurrentCamera$1$[ebp], eax

; 166  : 	if (!pCurrentCamera)

  0025f	85 c0		 test	 eax, eax
  00261	75 13		 jne	 SHORT $LN18@Render

; 167  : 		return;

  00263	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _s$[ebp]
  00269	88 45 fc	 mov	 BYTE PTR __$EHRec$[ebp+8], al
  0026c	e8 00 00 00 00	 call	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
  00271	e9 51 0c 00 00	 jmp	 $LN729@Render
$LN18@Render:
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;

  00276	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _m$[ebp+36], 0
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 180  : 	it2 = it1 = m_TimePositionDeque.begin();

  00280	8d 8d 90 fd ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;

  00286	c7 85 34 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _m$[ebp+32], 0
; File a:\vs\vc\include\xutility

; 114  : 		{	// construct orphaned iterator

  00290	33 f6		 xor	 esi, esi
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  00292	c7 85 3c ff ff
	ff 00 00 80 3f	 mov	 DWORD PTR _m$[ebp+40], 1065353216 ; 3f800000H
  0029c	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _m$[ebp+56], 0
  002a6	c7 85 48 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _m$[ebp+52], 0
  002b0	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _m$[ebp+48], 0
  002ba	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _m$[ebp+44], 0
  002c4	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _m$[ebp+28], 0
  002ce	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _m$[ebp+24], 0
  002d8	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _m$[ebp+16], 0
  002e2	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _m$[ebp+12], 0
  002ec	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _m$[ebp+8], 0
  002f6	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _m$[ebp+4], 0
  00300	c7 85 50 ff ff
	ff 00 00 80 3f	 mov	 DWORD PTR _m$[ebp+60], 1065353216 ; 3f800000H
  0030a	c7 85 28 ff ff
	ff 00 00 80 3f	 mov	 DWORD PTR _m$[ebp+20], 1065353216 ; 3f800000H
  00314	c7 85 14 ff ff
	ff 00 00 80 3f	 mov	 DWORD PTR _m$[ebp], 1065353216 ; 3f800000H
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 171  : 	D3DXVECTOR3 F(pCurrentCamera->GetView());

  0031e	f3 0f 7e 40 54	 movq	 xmm0, QWORD PTR [eax+84]
  00323	8b 40 5c	 mov	 eax, DWORD PTR [eax+92]
  00326	89 85 fc fd ff
	ff		 mov	 DWORD PTR _F$[ebp+8], eax
; File a:\vs\vc\include\xutility

; 114  : 		{	// construct orphaned iterator

  0032c	33 c0		 xor	 eax, eax
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 171  : 	D3DXVECTOR3 F(pCurrentCamera->GetView());

  0032e	66 0f d6 85 f4
	fd ff ff	 movq	 QWORD PTR _F$[ebp], xmm0

; 172  : 	m._31 = F.x;

  00336	f3 0f 10 bd f4
	fd ff ff	 movss	 xmm7, DWORD PTR _F$[ebp]

; 173  : 	m._32 = F.y;
; 174  : 	m._33 = F.z;

  0033e	f3 0f 10 85 fc
	fd ff ff	 movss	 xmm0, DWORD PTR _F$[ebp+8]
; File a:\vs\vc\include\xutility

; 114  : 		{	// construct orphaned iterator

  00346	89 85 00 fe ff
	ff		 mov	 DWORD PTR _it2$1$[ebp], eax
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 180  : 	it2 = it1 = m_TimePositionDeque.begin();

  0034c	8b 85 e8 fd ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  00352	83 c0 14	 add	 eax, 20			; 00000014H
  00355	f3 0f 11 bd 34
	ff ff ff	 movss	 DWORD PTR _m$[ebp+32], xmm7
  0035d	f3 0f 10 bd f8
	fd ff ff	 movss	 xmm7, DWORD PTR _F$[ebp+4]
  00365	51		 push	 ecx
  00366	8b c8		 mov	 ecx, eax
  00368	f3 0f 11 bd 38
	ff ff ff	 movss	 DWORD PTR _m$[ebp+36], xmm7
  00370	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR _m$[ebp+40], xmm0
; File a:\vs\vc\include\xutility

; 114  : 		{	// construct orphaned iterator

  00378	89 b5 14 fe ff
	ff		 mov	 DWORD PTR _it1$1$[ebp], esi
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 180  : 	it2 = it1 = m_TimePositionDeque.begin();

  0037e	89 85 ec fd ff
	ff		 mov	 DWORD PTR tv3818[ebp], eax
  00384	e8 00 00 00 00	 call	 ?begin@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@2@XZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::begin
; File a:\vs\vc\include\xutility

; 125  : 		if (_Myproxy == _Right._Myproxy)

  00389	8b 08		 mov	 ecx, DWORD PTR [eax]
  0038b	85 c9		 test	 ecx, ecx
  0038d	74 0e		 je	 SHORT $LN147@Render

; 126  : 			;
; 127  : 		else if (_Right._Myproxy != 0)
; 128  : 			_Adopt(_Right._Myproxy->_Mycont);

  0038f	8b 09		 mov	 ecx, DWORD PTR [ecx]

; 129  : 		else
; 130  : 			{	// becoming invalid, disown current parent
; 131  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 132  : 			_Lockit _Lock(_LOCK_DEBUG);
; 133  : 			_Orphan_me();
; 134  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 135  : 			}
; 136  : 		return (*this);
; 137  : 		}
; 138  : 
; 139  : 	~_Iterator_base12() _NOEXCEPT
; 140  : 		{	// destroy the iterator
; 141  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 142  : 		_Lockit _Lock(_LOCK_DEBUG);
; 143  : 		_Orphan_me();
; 144  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 145  : 		}
; 146  : 
; 147  : 	void _Adopt(const _Container_base12 *_Parent)
; 148  : 		{	// adopt this iterator by parent
; 149  : 		if (_Parent == 0)

  00391	85 c9		 test	 ecx, ecx
  00393	74 08		 je	 SHORT $LN147@Render

; 150  : 			{	// no future parent, just disown current parent
; 151  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 152  : 			_Lockit _Lock(_LOCK_DEBUG);
; 153  : 			_Orphan_me();
; 154  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 155  : 			}
; 156  : 		else
; 157  : 			{	// have a parent, do adoption
; 158  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 159  : 
; 160  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 161  : 			if (_Myproxy != _Parent_proxy)
; 162  : 				{	// change parentage
; 163  : 				_Lockit _Lock(_LOCK_DEBUG);
; 164  : 				_Orphan_me();
; 165  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 166  : 				_Parent_proxy->_Myfirstiter = this;
; 167  : 				_Myproxy = _Parent_proxy;
; 168  : 				}
; 169  : 
; 170  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 171  : 			_Myproxy = _Parent_proxy;

  00395	8b 31		 mov	 esi, DWORD PTR [ecx]
  00397	89 b5 14 fe ff
	ff		 mov	 DWORD PTR _it1$1$[ebp], esi
$LN147@Render:
  0039d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  003a0	89 8d 20 fe ff
	ff		 mov	 DWORD PTR _it1$2$[ebp], ecx

; 125  : 		if (_Myproxy == _Right._Myproxy)

  003a6	85 f6		 test	 esi, esi
  003a8	74 0e		 je	 SHORT $LN161@Render

; 126  : 			;
; 127  : 		else if (_Right._Myproxy != 0)
; 128  : 			_Adopt(_Right._Myproxy->_Mycont);

  003aa	8b 06		 mov	 eax, DWORD PTR [esi]

; 129  : 		else
; 130  : 			{	// becoming invalid, disown current parent
; 131  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 132  : 			_Lockit _Lock(_LOCK_DEBUG);
; 133  : 			_Orphan_me();
; 134  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 135  : 			}
; 136  : 		return (*this);
; 137  : 		}
; 138  : 
; 139  : 	~_Iterator_base12() _NOEXCEPT
; 140  : 		{	// destroy the iterator
; 141  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 142  : 		_Lockit _Lock(_LOCK_DEBUG);
; 143  : 		_Orphan_me();
; 144  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 145  : 		}
; 146  : 
; 147  : 	void _Adopt(const _Container_base12 *_Parent)
; 148  : 		{	// adopt this iterator by parent
; 149  : 		if (_Parent == 0)

  003ac	85 c0		 test	 eax, eax
  003ae	74 08		 je	 SHORT $LN161@Render

; 150  : 			{	// no future parent, just disown current parent
; 151  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 152  : 			_Lockit _Lock(_LOCK_DEBUG);
; 153  : 			_Orphan_me();
; 154  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 155  : 			}
; 156  : 		else
; 157  : 			{	// have a parent, do adoption
; 158  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 159  : 
; 160  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 161  : 			if (_Myproxy != _Parent_proxy)
; 162  : 				{	// change parentage
; 163  : 				_Lockit _Lock(_LOCK_DEBUG);
; 164  : 				_Orphan_me();
; 165  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 166  : 				_Parent_proxy->_Myfirstiter = this;
; 167  : 				_Myproxy = _Parent_proxy;
; 168  : 				}
; 169  : 
; 170  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 171  : 			_Myproxy = _Parent_proxy;

  003b0	8b 00		 mov	 eax, DWORD PTR [eax]
  003b2	89 85 00 fe ff
	ff		 mov	 DWORD PTR _it2$1$[ebp], eax
$LN161@Render:
; File a:\vs\vc\include\deque

; 370  : 		++_Myoff;

  003b8	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  003bb	89 85 28 fe ff
	ff		 mov	 DWORD PTR _it2$2$[ebp], eax
$LN789@Render:
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 182  : 	for(;it2!=m_TimePositionDeque.end();++it2,++it1)

  003c1	8b 8d ec fd ff
	ff		 mov	 ecx, DWORD PTR tv3818[ebp]
  003c7	8d 85 90 fd ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]
  003cd	50		 push	 eax
  003ce	e8 00 00 00 00	 call	 ?end@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@2@XZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::end
; File a:\vs\vc\include\deque

; 465  : 		return (this->_Myoff == _Right._Myoff);

  003d3	8b 8d 28 fe ff
	ff		 mov	 ecx, DWORD PTR _it2$2$[ebp]
  003d9	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]

; 466  : 		}
; 467  : 
; 468  : 	bool operator!=(const _Myiter& _Right) const
; 469  : 		{	// test for iterator inequality
; 470  : 		return (!(*this == _Right));

  003dc	0f 95 c0	 setne	 al
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 182  : 	for(;it2!=m_TimePositionDeque.end();++it2,++it1)

  003df	84 c0		 test	 al, al
  003e1	0f 84 d3 09 00
	00		 je	 $LN782@Render
  003e7	f2 0f 10 1d 00
	00 00 00	 movsd	 xmm3, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
; File a:\vs\vc\include\xutility

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  003ef	85 f6		 test	 esi, esi
  003f1	75 04		 jne	 SHORT $LN191@Render
  003f3	33 c0		 xor	 eax, eax
  003f5	eb 02		 jmp	 SHORT $LN192@Render
$LN191@Render:
  003f7	8b 06		 mov	 eax, DWORD PTR [esi]
$LN192@Render:
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  003f9	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 184  : 		const D3DXVECTOR3& rkOld=it1->second;

  003fc	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  003ff	49		 dec	 ecx
  00400	8b 95 20 fe ff
	ff		 mov	 edx, DWORD PTR _it1$2$[ebp]
  00406	23 ca		 and	 ecx, edx
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 184  : 		const D3DXVECTOR3& rkOld=it1->second;

  00408	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  0040b	83 c0 04	 add	 eax, 4
  0040e	89 85 1c fe ff
	ff		 mov	 DWORD PTR _rkOld$1$[ebp], eax
; File a:\vs\vc\include\xutility

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00414	8b 85 00 fe ff
	ff		 mov	 eax, DWORD PTR _it2$1$[ebp]
  0041a	85 c0		 test	 eax, eax
  0041c	74 02		 je	 SHORT $LN208@Render
$LN207@Render:
  0041e	8b 00		 mov	 eax, DWORD PTR [eax]
$LN208@Render:
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00420	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 185  : 		const D3DXVECTOR3& rkNew=it2->second;

  00423	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00426	49		 dec	 ecx
  00427	23 8d 28 fe ff
	ff		 and	 ecx, DWORD PTR _it2$2$[ebp]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 185  : 		const D3DXVECTOR3& rkNew=it2->second;

  0042d	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00430	8b 8d 1c fe ff
	ff		 mov	 ecx, DWORD PTR _rkOld$1$[ebp]
  00436	f3 0f 10 70 08	 movss	 xmm6, DWORD PTR [eax+8]
  0043b	f3 0f 5c 71 04	 subss	 xmm6, DWORD PTR [ecx+4]
  00440	f3 0f 10 78 0c	 movss	 xmm7, DWORD PTR [eax+12]
  00445	f3 0f 5c 79 08	 subss	 xmm7, DWORD PTR [ecx+8]
  0044a	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  0044f	f3 0f 5c 11	 subss	 xmm2, DWORD PTR [ecx]
; File a:\vs\vc\include\math.h

; 687  :     return (float)fabs(_X);

  00453	0f 5a c6	 cvtps2pd xmm0, xmm6
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00456	f3 0f 11 95 24
	fe ff ff	 movss	 DWORD PTR _v$3$[ebp], xmm2
; File a:\vs\vc\include\math.h

; 687  :     return (float)fabs(_X);

  0045e	66 0f 54 c3	 andpd	 xmm0, xmm3
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00462	f3 0f 11 b5 cc
	fd ff ff	 movss	 DWORD PTR _fy$1$[ebp], xmm6
; File a:\vs\vc\include\math.h

; 687  :     return (float)fabs(_X);

  0046a	66 0f 5a e0	 cvtpd2ps xmm4, xmm0
  0046e	0f 5a c7	 cvtps2pd xmm0, xmm7
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00471	f3 0f 11 bd b8
	fd ff ff	 movss	 DWORD PTR _fz$1$[ebp], xmm7
; File a:\vs\vc\include\math.h

; 687  :     return (float)fabs(_X);

  00479	66 0f 54 c3	 andpd	 xmm0, xmm3
  0047d	66 0f 5a c8	 cvtpd2ps xmm1, xmm0
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 188  : 		float radius = max(fabs(B.x),max(fabs(B.y),fabs(B.z)))/2;

  00481	0f 2f e1	 comiss	 xmm4, xmm1
  00484	76 05		 jbe	 SHORT $LN22@Render
  00486	0f 28 ec	 movaps	 xmm5, xmm4
  00489	eb 03		 jmp	 SHORT $LN23@Render
$LN22@Render:
  0048b	0f 28 e9	 movaps	 xmm5, xmm1
$LN23@Render:
; File a:\vs\vc\include\math.h

; 687  :     return (float)fabs(_X);

  0048e	0f 5a c2	 cvtps2pd xmm0, xmm2
  00491	66 0f 54 c3	 andpd	 xmm0, xmm3
  00495	66 0f 5a d8	 cvtpd2ps xmm3, xmm0
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 188  : 		float radius = max(fabs(B.x),max(fabs(B.y),fabs(B.z)))/2;

  00499	0f 2f dd	 comiss	 xmm3, xmm5
  0049c	77 0d		 ja	 SHORT $LN25@Render
  0049e	0f 2f e1	 comiss	 xmm4, xmm1
  004a1	76 05		 jbe	 SHORT $LN24@Render
; File a:\vs\vc\include\math.h

; 1066 :         {return (fabsf(_X)); }

  004a3	0f 28 dc	 movaps	 xmm3, xmm4
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 188  : 		float radius = max(fabs(B.x),max(fabs(B.y),fabs(B.z)))/2;

  004a6	eb 03		 jmp	 SHORT $LN25@Render
$LN24@Render:
  004a8	0f 28 d9	 movaps	 xmm3, xmm1
$LN25@Render:
  004ab	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3f000000
  004b3	f3 0f 59 dc	 mulss	 xmm3, xmm4
; File a:\vs\vc\include\xutility

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  004b7	85 f6		 test	 esi, esi
  004b9	75 04		 jne	 SHORT $LN267@Render
  004bb	33 c0		 xor	 eax, eax
  004bd	eb 02		 jmp	 SHORT $LN785@Render
$LN267@Render:
  004bf	8b 06		 mov	 eax, DWORD PTR [esi]
$LN785@Render:
  004c1	89 85 1c fe ff
	ff		 mov	 DWORD PTR __Mycont$1$[ebp], eax
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  004c7	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  004ca	48		 dec	 eax
  004cb	23 c2		 and	 eax, edx
  004cd	89 85 30 fe ff
	ff		 mov	 DWORD PTR __Block$1$[ebp], eax
; File a:\vs\vc\include\xutility

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  004d3	85 f6		 test	 esi, esi
  004d5	75 04		 jne	 SHORT $LN283@Render
  004d7	33 c0		 xor	 eax, eax
  004d9	eb 02		 jmp	 SHORT $LN786@Render
$LN283@Render:
  004db	8b 06		 mov	 eax, DWORD PTR [esi]
$LN786@Render:
  004dd	89 85 e4 fd ff
	ff		 mov	 DWORD PTR __Mycont$1$[ebp], eax
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  004e3	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  004e6	48		 dec	 eax
  004e7	23 c2		 and	 eax, edx
  004e9	89 85 18 fe ff
	ff		 mov	 DWORD PTR __Block$1$[ebp], eax
; File a:\vs\vc\include\xutility

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  004ef	85 f6		 test	 esi, esi
  004f1	75 04		 jne	 SHORT $LN299@Render
  004f3	33 c0		 xor	 eax, eax
  004f5	eb 02		 jmp	 SHORT $LN300@Render
$LN299@Render:
  004f7	8b 06		 mov	 eax, DWORD PTR [esi]
$LN300@Render:
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  004f9	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 192  : 			);

  004fc	0f 28 ce	 movaps	 xmm1, xmm6
  004ff	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00502	49		 dec	 ecx
  00503	23 ca		 and	 ecx, edx
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 192  : 			);

  00505	f3 0f 59 d4	 mulss	 xmm2, xmm4
  00509	f3 0f 59 cc	 mulss	 xmm1, xmm4
  0050d	0f 28 c7	 movaps	 xmm0, xmm7
  00510	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00513	8b 8d 18 fe ff
	ff		 mov	 ecx, DWORD PTR __Block$1$[ebp]
  00519	f3 0f 59 c4	 mulss	 xmm0, xmm4
  0051d	f3 0f 58 50 04	 addss	 xmm2, DWORD PTR [eax+4]
  00522	8b 85 e4 fd ff
	ff		 mov	 eax, DWORD PTR __Mycont$1$[ebp]
  00528	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0052b	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  0052e	8b 8d 30 fe ff
	ff		 mov	 ecx, DWORD PTR __Block$1$[ebp]

; 193  : 		if (frustum.ViewVolumeTest(c, radius)==VS_OUTSIDE)

  00534	51		 push	 ecx
  00535	f3 0f 11 1c 24	 movss	 DWORD PTR [esp], xmm3
  0053a	f3 0f 58 48 08	 addss	 xmm1, DWORD PTR [eax+8]
  0053f	8b 85 1c fe ff
	ff		 mov	 eax, DWORD PTR __Mycont$1$[ebp]
  00545	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00548	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  0054b	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_frustum@CScreen@@1VFrustum@@A ; CScreen::ms_frustum
  00550	f3 0f 58 40 0c	 addss	 xmm0, DWORD PTR [eax+12]
  00555	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR _c$21[ebp]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 37   : 		x = a;

  0055b	f3 0f 11 95 08
	ff ff ff	 movss	 DWORD PTR _c$21[ebp], xmm2
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 193  : 		if (frustum.ViewVolumeTest(c, radius)==VS_OUTSIDE)

  00563	50		 push	 eax
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 38   : 		y = b;

  00564	f3 0f 11 8d 0c
	ff ff ff	 movss	 DWORD PTR _c$21[ebp+4], xmm1

; 39   : 		z = c;

  0056c	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _c$21[ebp+8], xmm0
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 193  : 		if (frustum.ViewVolumeTest(c, radius)==VS_OUTSIDE)

  00574	e8 00 00 00 00	 call	 ?ViewVolumeTest@Frustum@@QBE?AW4ViewState@@ABVVector3d@@M@Z ; Frustum::ViewVolumeTest
  00579	83 f8 02	 cmp	 eax, 2
  0057c	0f 84 1d 08 00
	00		 je	 $LN16@Render
; File a:\vs\vc\include\xutility

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00582	85 f6		 test	 esi, esi
  00584	75 04		 jne	 SHORT $LN321@Render
  00586	33 c0		 xor	 eax, eax
  00588	eb 02		 jmp	 SHORT $LN322@Render
$LN321@Render:
  0058a	8b 06		 mov	 eax, DWORD PTR [esi]
$LN322@Render:
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0058c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 471  : 		}
; 472  : 
; 473  : 	bool operator<(const _Myiter& _Right) const
; 474  : 		{	// test if this < _Right
; 475  : 		_Compat(_Right);
; 476  : 		return (this->_Myoff < _Right._Myoff);
; 477  : 		}
; 478  : 
; 479  : 	bool operator>(const _Myiter& _Right) const
; 480  : 		{	// test if this > _Right
; 481  : 		return (_Right < *this);
; 482  : 		}
; 483  : 
; 484  : 	bool operator<=(const _Myiter& _Right) const
; 485  : 		{	// test if this <= _Right
; 486  : 		return (!(_Right < *this));
; 487  : 		}
; 488  : 
; 489  : 	bool operator>=(const _Myiter& _Right) const
; 490  : 		{	// test if this >= _Right
; 491  : 		return (!(*this < _Right));
; 492  : 		}
; 493  : 
; 494  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 495  : 	void _Compat(const _Myiter& _Right) const
; 496  : 		{	// test for compatible iterator pair
; 497  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 498  : 		if (_Mycont == 0
; 499  : 			|| _Mycont != _Right._Getcont())
; 500  : 			{	// report error
; 501  : 			_DEBUG_ERROR("deque iterators incompatible");
; 502  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 503  : 			}
; 504  : 		}
; 505  : 
; 506  : 	void _Setcont(const _Mydeque *_Pdeque)
; 507  : 		{	// set container pointer
; 508  : 		this->_Adopt(_Pdeque);
; 509  : 		}
; 510  : 
; 511  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 512  : 	void _Compat(const _Myiter& _Right) const
; 513  : 		{	// test for compatible iterator pair
; 514  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 515  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 516  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont == _Right._Getcont());
; 517  : 		}
; 518  : 
; 519  : 	void _Setcont(const _Mydeque *_Pdeque)
; 520  : 		{	// set container pointer
; 521  : 		this->_Adopt(_Pdeque);
; 522  : 		}
; 523  : 
; 524  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 525  : 	void _Compat(const _Myiter&) const
; 526  : 		{	// test for compatible iterator pair
; 527  : 		}
; 528  : 
; 529  : 	void _Setcont(const _Mydeque *_Pdeque)
; 530  : 		{	// set container pointer
; 531  : 		this->_Adopt(_Pdeque);
; 532  : 		}
; 533  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 534  : 
; 535  : 	size_type _Myoff;	// offset of element in deque
; 536  : 	};
; 537  : 
; 538  : template<class _Mydeque> inline
; 539  : 	typename _Deque_const_iterator<_Mydeque>::_Unchecked_type
; 540  : 		_Unchecked(_Deque_const_iterator<_Mydeque> _Iter)
; 541  : 	{	// convert to unchecked
; 542  : 	return (_Iter._Unchecked());
; 543  : 	}
; 544  : 
; 545  : template<class _Mydeque> inline
; 546  : 	_Deque_const_iterator<_Mydeque>&
; 547  : 		_Rechecked(_Deque_const_iterator<_Mydeque>& _Iter,
; 548  : 			typename _Deque_const_iterator<_Mydeque>
; 549  : 				::_Unchecked_type _Right)
; 550  : 	{	// convert to checked
; 551  : 	return (_Iter._Rechecked(_Right));
; 552  : 	}
; 553  : 
; 554  : template<class _Mydeque> inline
; 555  : 	_Deque_const_iterator<_Mydeque> operator+(
; 556  : 		typename _Deque_const_iterator<_Mydeque>::difference_type _Off,
; 557  : 		_Deque_const_iterator<_Mydeque> _Next)
; 558  : 	{	// add offset to iterator
; 559  : 	return (_Next += _Off);
; 560  : 	}
; 561  : 
; 562  : 		// TEMPLATE CLASS _Deque_iterator
; 563  : template<class _Mydeque>
; 564  : 	class _Deque_iterator
; 565  : 		: public _Deque_const_iterator<_Mydeque>
; 566  : 		{	// iterator for mutable deque
; 567  : public:
; 568  : 	typedef _Deque_iterator<_Mydeque> _Myiter;
; 569  : 	typedef _Deque_const_iterator<_Mydeque> _Mybase;
; 570  : 	typedef _Deque_unchecked_iterator<_Mydeque> _Deque_unchecked_type;
; 571  : 	typedef random_access_iterator_tag iterator_category;
; 572  : 
; 573  : 	typedef typename _Mydeque::value_type value_type;
; 574  : 	typedef typename _Mydeque::size_type size_type;
; 575  : 	typedef typename _Mydeque::difference_type difference_type;
; 576  : 	typedef typename _Mydeque::pointer pointer;
; 577  : 	typedef typename _Mydeque::reference reference;
; 578  : 
; 579  : 	_Deque_iterator()
; 580  : 		{	// construct with null deque pointer
; 581  : 		}
; 582  : 
; 583  : 	_Deque_iterator(size_type _Off, const _Container_base12 *_Pdeque)
; 584  : 		: _Mybase(_Off, _Pdeque)
; 585  : 		{	// construct with offset _Off in *_Pdeque
; 586  : 		}
; 587  : 
; 588  : 	typedef _Deque_unchecked_iterator<_Mydeque> _Unchecked_type;
; 589  : 
; 590  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 591  : 		{	// reset from unchecked iterator
; 592  : 		this->_Myoff = _Right._Myoff;
; 593  : 		return (*this);
; 594  : 		}
; 595  : 
; 596  : 	_Unchecked_type _Unchecked() const
; 597  : 		{	// make an unchecked iterator
; 598  : 		return (_Unchecked_type(this->_Myoff, this->_Getcont()));
; 599  : 		}
; 600  : 
; 601  : 	reference operator*() const
; 602  : 		{	// return designated object
; 603  : 		return ((reference)**(_Mybase *)this);
; 604  : 		}
; 605  : 
; 606  : 	pointer operator->() const
; 607  : 		{	// return pointer to class object
; 608  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));

  0058f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00592	49		 dec	 ecx
  00593	23 8d 20 fe ff
	ff		 and	 ecx, DWORD PTR _it1$2$[ebp]

; 471  : 		}
; 472  : 
; 473  : 	bool operator<(const _Myiter& _Right) const
; 474  : 		{	// test if this < _Right
; 475  : 		_Compat(_Right);
; 476  : 		return (this->_Myoff < _Right._Myoff);
; 477  : 		}
; 478  : 
; 479  : 	bool operator>(const _Myiter& _Right) const
; 480  : 		{	// test if this > _Right
; 481  : 		return (_Right < *this);
; 482  : 		}
; 483  : 
; 484  : 	bool operator<=(const _Myiter& _Right) const
; 485  : 		{	// test if this <= _Right
; 486  : 		return (!(_Right < *this));
; 487  : 		}
; 488  : 
; 489  : 	bool operator>=(const _Myiter& _Right) const
; 490  : 		{	// test if this >= _Right
; 491  : 		return (!(*this < _Right));
; 492  : 		}
; 493  : 
; 494  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 495  : 	void _Compat(const _Myiter& _Right) const
; 496  : 		{	// test for compatible iterator pair
; 497  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 498  : 		if (_Mycont == 0
; 499  : 			|| _Mycont != _Right._Getcont())
; 500  : 			{	// report error
; 501  : 			_DEBUG_ERROR("deque iterators incompatible");
; 502  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 503  : 			}
; 504  : 		}
; 505  : 
; 506  : 	void _Setcont(const _Mydeque *_Pdeque)
; 507  : 		{	// set container pointer
; 508  : 		this->_Adopt(_Pdeque);
; 509  : 		}
; 510  : 
; 511  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 512  : 	void _Compat(const _Myiter& _Right) const
; 513  : 		{	// test for compatible iterator pair
; 514  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 515  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 516  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont == _Right._Getcont());
; 517  : 		}
; 518  : 
; 519  : 	void _Setcont(const _Mydeque *_Pdeque)
; 520  : 		{	// set container pointer
; 521  : 		this->_Adopt(_Pdeque);
; 522  : 		}
; 523  : 
; 524  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 525  : 	void _Compat(const _Myiter&) const
; 526  : 		{	// test for compatible iterator pair
; 527  : 		}
; 528  : 
; 529  : 	void _Setcont(const _Mydeque *_Pdeque)
; 530  : 		{	// set container pointer
; 531  : 		this->_Adopt(_Pdeque);
; 532  : 		}
; 533  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 534  : 
; 535  : 	size_type _Myoff;	// offset of element in deque
; 536  : 	};
; 537  : 
; 538  : template<class _Mydeque> inline
; 539  : 	typename _Deque_const_iterator<_Mydeque>::_Unchecked_type
; 540  : 		_Unchecked(_Deque_const_iterator<_Mydeque> _Iter)
; 541  : 	{	// convert to unchecked
; 542  : 	return (_Iter._Unchecked());
; 543  : 	}
; 544  : 
; 545  : template<class _Mydeque> inline
; 546  : 	_Deque_const_iterator<_Mydeque>&
; 547  : 		_Rechecked(_Deque_const_iterator<_Mydeque>& _Iter,
; 548  : 			typename _Deque_const_iterator<_Mydeque>
; 549  : 				::_Unchecked_type _Right)
; 550  : 	{	// convert to checked
; 551  : 	return (_Iter._Rechecked(_Right));
; 552  : 	}
; 553  : 
; 554  : template<class _Mydeque> inline
; 555  : 	_Deque_const_iterator<_Mydeque> operator+(
; 556  : 		typename _Deque_const_iterator<_Mydeque>::difference_type _Off,
; 557  : 		_Deque_const_iterator<_Mydeque> _Next)
; 558  : 	{	// add offset to iterator
; 559  : 	return (_Next += _Off);
; 560  : 	}
; 561  : 
; 562  : 		// TEMPLATE CLASS _Deque_iterator
; 563  : template<class _Mydeque>
; 564  : 	class _Deque_iterator
; 565  : 		: public _Deque_const_iterator<_Mydeque>
; 566  : 		{	// iterator for mutable deque
; 567  : public:
; 568  : 	typedef _Deque_iterator<_Mydeque> _Myiter;
; 569  : 	typedef _Deque_const_iterator<_Mydeque> _Mybase;
; 570  : 	typedef _Deque_unchecked_iterator<_Mydeque> _Deque_unchecked_type;
; 571  : 	typedef random_access_iterator_tag iterator_category;
; 572  : 
; 573  : 	typedef typename _Mydeque::value_type value_type;
; 574  : 	typedef typename _Mydeque::size_type size_type;
; 575  : 	typedef typename _Mydeque::difference_type difference_type;
; 576  : 	typedef typename _Mydeque::pointer pointer;
; 577  : 	typedef typename _Mydeque::reference reference;
; 578  : 
; 579  : 	_Deque_iterator()
; 580  : 		{	// construct with null deque pointer
; 581  : 		}
; 582  : 
; 583  : 	_Deque_iterator(size_type _Off, const _Container_base12 *_Pdeque)
; 584  : 		: _Mybase(_Off, _Pdeque)
; 585  : 		{	// construct with offset _Off in *_Pdeque
; 586  : 		}
; 587  : 
; 588  : 	typedef _Deque_unchecked_iterator<_Mydeque> _Unchecked_type;
; 589  : 
; 590  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 591  : 		{	// reset from unchecked iterator
; 592  : 		this->_Myoff = _Right._Myoff;
; 593  : 		return (*this);
; 594  : 		}
; 595  : 
; 596  : 	_Unchecked_type _Unchecked() const
; 597  : 		{	// make an unchecked iterator
; 598  : 		return (_Unchecked_type(this->_Myoff, this->_Getcont()));
; 599  : 		}
; 600  : 
; 601  : 	reference operator*() const
; 602  : 		{	// return designated object
; 603  : 		return ((reference)**(_Mybase *)this);
; 604  : 		}
; 605  : 
; 606  : 	pointer operator->() const
; 607  : 		{	// return pointer to class object
; 608  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));

  00599	8b 34 88	 mov	 esi, DWORD PTR [eax+ecx*4]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 196  : 		float rate1 = (1-(CTimer::Instance().GetCurrentSecond()-it1->first)/m_fTailLength);

  0059c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  005a2	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond
  005a7	8b bd e8 fd ff
	ff		 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
  005ad	d9 9d 30 fe ff
	ff		 fstp	 DWORD PTR tv4043[ebp]
  005b3	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR tv4043[ebp]
  005bb	f3 0f 5c 06	 subss	 xmm0, DWORD PTR [esi]
  005bf	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
; File a:\vs\vc\include\xutility

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  005c7	8b 85 00 fe ff
	ff		 mov	 eax, DWORD PTR _it2$1$[ebp]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 196  : 		float rate1 = (1-(CTimer::Instance().GetCurrentSecond()-it1->first)/m_fTailLength);

  005cd	f3 0f 5e 47 10	 divss	 xmm0, DWORD PTR [edi+16]
  005d2	f3 0f 5c c8	 subss	 xmm1, xmm0
  005d6	f3 0f 11 8d 18
	fe ff ff	 movss	 DWORD PTR _rate1$1$[ebp], xmm1
; File a:\vs\vc\include\xutility

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  005de	85 c0		 test	 eax, eax
  005e0	74 02		 je	 SHORT $LN340@Render
$LN339@Render:
  005e2	8b 00		 mov	 eax, DWORD PTR [eax]
$LN340@Render:
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  005e4	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 471  : 		}
; 472  : 
; 473  : 	bool operator<(const _Myiter& _Right) const
; 474  : 		{	// test if this < _Right
; 475  : 		_Compat(_Right);
; 476  : 		return (this->_Myoff < _Right._Myoff);
; 477  : 		}
; 478  : 
; 479  : 	bool operator>(const _Myiter& _Right) const
; 480  : 		{	// test if this > _Right
; 481  : 		return (_Right < *this);
; 482  : 		}
; 483  : 
; 484  : 	bool operator<=(const _Myiter& _Right) const
; 485  : 		{	// test if this <= _Right
; 486  : 		return (!(_Right < *this));
; 487  : 		}
; 488  : 
; 489  : 	bool operator>=(const _Myiter& _Right) const
; 490  : 		{	// test if this >= _Right
; 491  : 		return (!(*this < _Right));
; 492  : 		}
; 493  : 
; 494  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 495  : 	void _Compat(const _Myiter& _Right) const
; 496  : 		{	// test for compatible iterator pair
; 497  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 498  : 		if (_Mycont == 0
; 499  : 			|| _Mycont != _Right._Getcont())
; 500  : 			{	// report error
; 501  : 			_DEBUG_ERROR("deque iterators incompatible");
; 502  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 503  : 			}
; 504  : 		}
; 505  : 
; 506  : 	void _Setcont(const _Mydeque *_Pdeque)
; 507  : 		{	// set container pointer
; 508  : 		this->_Adopt(_Pdeque);
; 509  : 		}
; 510  : 
; 511  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 512  : 	void _Compat(const _Myiter& _Right) const
; 513  : 		{	// test for compatible iterator pair
; 514  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 515  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 516  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont == _Right._Getcont());
; 517  : 		}
; 518  : 
; 519  : 	void _Setcont(const _Mydeque *_Pdeque)
; 520  : 		{	// set container pointer
; 521  : 		this->_Adopt(_Pdeque);
; 522  : 		}
; 523  : 
; 524  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 525  : 	void _Compat(const _Myiter&) const
; 526  : 		{	// test for compatible iterator pair
; 527  : 		}
; 528  : 
; 529  : 	void _Setcont(const _Mydeque *_Pdeque)
; 530  : 		{	// set container pointer
; 531  : 		this->_Adopt(_Pdeque);
; 532  : 		}
; 533  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 534  : 
; 535  : 	size_type _Myoff;	// offset of element in deque
; 536  : 	};
; 537  : 
; 538  : template<class _Mydeque> inline
; 539  : 	typename _Deque_const_iterator<_Mydeque>::_Unchecked_type
; 540  : 		_Unchecked(_Deque_const_iterator<_Mydeque> _Iter)
; 541  : 	{	// convert to unchecked
; 542  : 	return (_Iter._Unchecked());
; 543  : 	}
; 544  : 
; 545  : template<class _Mydeque> inline
; 546  : 	_Deque_const_iterator<_Mydeque>&
; 547  : 		_Rechecked(_Deque_const_iterator<_Mydeque>& _Iter,
; 548  : 			typename _Deque_const_iterator<_Mydeque>
; 549  : 				::_Unchecked_type _Right)
; 550  : 	{	// convert to checked
; 551  : 	return (_Iter._Rechecked(_Right));
; 552  : 	}
; 553  : 
; 554  : template<class _Mydeque> inline
; 555  : 	_Deque_const_iterator<_Mydeque> operator+(
; 556  : 		typename _Deque_const_iterator<_Mydeque>::difference_type _Off,
; 557  : 		_Deque_const_iterator<_Mydeque> _Next)
; 558  : 	{	// add offset to iterator
; 559  : 	return (_Next += _Off);
; 560  : 	}
; 561  : 
; 562  : 		// TEMPLATE CLASS _Deque_iterator
; 563  : template<class _Mydeque>
; 564  : 	class _Deque_iterator
; 565  : 		: public _Deque_const_iterator<_Mydeque>
; 566  : 		{	// iterator for mutable deque
; 567  : public:
; 568  : 	typedef _Deque_iterator<_Mydeque> _Myiter;
; 569  : 	typedef _Deque_const_iterator<_Mydeque> _Mybase;
; 570  : 	typedef _Deque_unchecked_iterator<_Mydeque> _Deque_unchecked_type;
; 571  : 	typedef random_access_iterator_tag iterator_category;
; 572  : 
; 573  : 	typedef typename _Mydeque::value_type value_type;
; 574  : 	typedef typename _Mydeque::size_type size_type;
; 575  : 	typedef typename _Mydeque::difference_type difference_type;
; 576  : 	typedef typename _Mydeque::pointer pointer;
; 577  : 	typedef typename _Mydeque::reference reference;
; 578  : 
; 579  : 	_Deque_iterator()
; 580  : 		{	// construct with null deque pointer
; 581  : 		}
; 582  : 
; 583  : 	_Deque_iterator(size_type _Off, const _Container_base12 *_Pdeque)
; 584  : 		: _Mybase(_Off, _Pdeque)
; 585  : 		{	// construct with offset _Off in *_Pdeque
; 586  : 		}
; 587  : 
; 588  : 	typedef _Deque_unchecked_iterator<_Mydeque> _Unchecked_type;
; 589  : 
; 590  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 591  : 		{	// reset from unchecked iterator
; 592  : 		this->_Myoff = _Right._Myoff;
; 593  : 		return (*this);
; 594  : 		}
; 595  : 
; 596  : 	_Unchecked_type _Unchecked() const
; 597  : 		{	// make an unchecked iterator
; 598  : 		return (_Unchecked_type(this->_Myoff, this->_Getcont()));
; 599  : 		}
; 600  : 
; 601  : 	reference operator*() const
; 602  : 		{	// return designated object
; 603  : 		return ((reference)**(_Mybase *)this);
; 604  : 		}
; 605  : 
; 606  : 	pointer operator->() const
; 607  : 		{	// return pointer to class object
; 608  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));

  005e7	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  005ea	49		 dec	 ecx
  005eb	23 8d 28 fe ff
	ff		 and	 ecx, DWORD PTR _it2$2$[ebp]

; 471  : 		}
; 472  : 
; 473  : 	bool operator<(const _Myiter& _Right) const
; 474  : 		{	// test if this < _Right
; 475  : 		_Compat(_Right);
; 476  : 		return (this->_Myoff < _Right._Myoff);
; 477  : 		}
; 478  : 
; 479  : 	bool operator>(const _Myiter& _Right) const
; 480  : 		{	// test if this > _Right
; 481  : 		return (_Right < *this);
; 482  : 		}
; 483  : 
; 484  : 	bool operator<=(const _Myiter& _Right) const
; 485  : 		{	// test if this <= _Right
; 486  : 		return (!(_Right < *this));
; 487  : 		}
; 488  : 
; 489  : 	bool operator>=(const _Myiter& _Right) const
; 490  : 		{	// test if this >= _Right
; 491  : 		return (!(*this < _Right));
; 492  : 		}
; 493  : 
; 494  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 495  : 	void _Compat(const _Myiter& _Right) const
; 496  : 		{	// test for compatible iterator pair
; 497  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 498  : 		if (_Mycont == 0
; 499  : 			|| _Mycont != _Right._Getcont())
; 500  : 			{	// report error
; 501  : 			_DEBUG_ERROR("deque iterators incompatible");
; 502  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 503  : 			}
; 504  : 		}
; 505  : 
; 506  : 	void _Setcont(const _Mydeque *_Pdeque)
; 507  : 		{	// set container pointer
; 508  : 		this->_Adopt(_Pdeque);
; 509  : 		}
; 510  : 
; 511  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 512  : 	void _Compat(const _Myiter& _Right) const
; 513  : 		{	// test for compatible iterator pair
; 514  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 515  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 516  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont == _Right._Getcont());
; 517  : 		}
; 518  : 
; 519  : 	void _Setcont(const _Mydeque *_Pdeque)
; 520  : 		{	// set container pointer
; 521  : 		this->_Adopt(_Pdeque);
; 522  : 		}
; 523  : 
; 524  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 525  : 	void _Compat(const _Myiter&) const
; 526  : 		{	// test for compatible iterator pair
; 527  : 		}
; 528  : 
; 529  : 	void _Setcont(const _Mydeque *_Pdeque)
; 530  : 		{	// set container pointer
; 531  : 		this->_Adopt(_Pdeque);
; 532  : 		}
; 533  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 534  : 
; 535  : 	size_type _Myoff;	// offset of element in deque
; 536  : 	};
; 537  : 
; 538  : template<class _Mydeque> inline
; 539  : 	typename _Deque_const_iterator<_Mydeque>::_Unchecked_type
; 540  : 		_Unchecked(_Deque_const_iterator<_Mydeque> _Iter)
; 541  : 	{	// convert to unchecked
; 542  : 	return (_Iter._Unchecked());
; 543  : 	}
; 544  : 
; 545  : template<class _Mydeque> inline
; 546  : 	_Deque_const_iterator<_Mydeque>&
; 547  : 		_Rechecked(_Deque_const_iterator<_Mydeque>& _Iter,
; 548  : 			typename _Deque_const_iterator<_Mydeque>
; 549  : 				::_Unchecked_type _Right)
; 550  : 	{	// convert to checked
; 551  : 	return (_Iter._Rechecked(_Right));
; 552  : 	}
; 553  : 
; 554  : template<class _Mydeque> inline
; 555  : 	_Deque_const_iterator<_Mydeque> operator+(
; 556  : 		typename _Deque_const_iterator<_Mydeque>::difference_type _Off,
; 557  : 		_Deque_const_iterator<_Mydeque> _Next)
; 558  : 	{	// add offset to iterator
; 559  : 	return (_Next += _Off);
; 560  : 	}
; 561  : 
; 562  : 		// TEMPLATE CLASS _Deque_iterator
; 563  : template<class _Mydeque>
; 564  : 	class _Deque_iterator
; 565  : 		: public _Deque_const_iterator<_Mydeque>
; 566  : 		{	// iterator for mutable deque
; 567  : public:
; 568  : 	typedef _Deque_iterator<_Mydeque> _Myiter;
; 569  : 	typedef _Deque_const_iterator<_Mydeque> _Mybase;
; 570  : 	typedef _Deque_unchecked_iterator<_Mydeque> _Deque_unchecked_type;
; 571  : 	typedef random_access_iterator_tag iterator_category;
; 572  : 
; 573  : 	typedef typename _Mydeque::value_type value_type;
; 574  : 	typedef typename _Mydeque::size_type size_type;
; 575  : 	typedef typename _Mydeque::difference_type difference_type;
; 576  : 	typedef typename _Mydeque::pointer pointer;
; 577  : 	typedef typename _Mydeque::reference reference;
; 578  : 
; 579  : 	_Deque_iterator()
; 580  : 		{	// construct with null deque pointer
; 581  : 		}
; 582  : 
; 583  : 	_Deque_iterator(size_type _Off, const _Container_base12 *_Pdeque)
; 584  : 		: _Mybase(_Off, _Pdeque)
; 585  : 		{	// construct with offset _Off in *_Pdeque
; 586  : 		}
; 587  : 
; 588  : 	typedef _Deque_unchecked_iterator<_Mydeque> _Unchecked_type;
; 589  : 
; 590  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 591  : 		{	// reset from unchecked iterator
; 592  : 		this->_Myoff = _Right._Myoff;
; 593  : 		return (*this);
; 594  : 		}
; 595  : 
; 596  : 	_Unchecked_type _Unchecked() const
; 597  : 		{	// make an unchecked iterator
; 598  : 		return (_Unchecked_type(this->_Myoff, this->_Getcont()));
; 599  : 		}
; 600  : 
; 601  : 	reference operator*() const
; 602  : 		{	// return designated object
; 603  : 		return ((reference)**(_Mybase *)this);
; 604  : 		}
; 605  : 
; 606  : 	pointer operator->() const
; 607  : 		{	// return pointer to class object
; 608  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));

  005f1	8b 34 88	 mov	 esi, DWORD PTR [eax+ecx*4]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 197  : 		float rate2 = (1-(CTimer::Instance().GetCurrentSecond()-it2->first)/m_fTailLength);

  005f4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  005fa	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond

; 198  : 		float size1 = m_fSize;
; 199  : 		float size2 = m_fSize;
; 200  : 		if (!m_bRectShape)

  005ff	80 7f 04 00	 cmp	 BYTE PTR [edi+4], 0
  00603	d9 9d 30 fe ff
	ff		 fstp	 DWORD PTR tv4038[ebp]
  00609	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR tv4038[ebp]
  00611	f3 0f 5c 06	 subss	 xmm0, DWORD PTR [esi]
  00615	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  0061d	f3 0f 10 4f 0c	 movss	 xmm1, DWORD PTR [edi+12]
  00622	0f 28 d1	 movaps	 xmm2, xmm1
  00625	f3 0f 5e 47 10	 divss	 xmm0, DWORD PTR [edi+16]
  0062a	f3 0f 5c d8	 subss	 xmm3, xmm0
  0062e	75 0c		 jne	 SHORT $LN13@Render

; 201  : 		{
; 202  : 			size1 *= rate1;

  00630	f3 0f 59 8d 18
	fe ff ff	 mulss	 xmm1, DWORD PTR _rate1$1$[ebp]

; 203  : 			size2 *= rate2;

  00638	f3 0f 59 d3	 mulss	 xmm2, xmm3
$LN13@Render:

; 204  : 		}
; 205  : 		TFlyVertex v[6] = 
; 206  : 		{
; 207  : 			TFlyVertex(D3DXVECTOR3(0.0f,size1,0.0f), m_dwColor,D3DXVECTOR2(0.0f,0.0f)),
; 208  : 			TFlyVertex(D3DXVECTOR3(-size1,0.0f,0.0f),m_dwColor,D3DXVECTOR2(0.0f,0.5f)),
; 209  : 			TFlyVertex(D3DXVECTOR3(size1,0.0f,0.0f), m_dwColor,D3DXVECTOR2(0.5f,0.0f)),
; 210  : 			TFlyVertex(D3DXVECTOR3(-size2,0.0f,0.0f),m_dwColor,D3DXVECTOR2(0.5f,1.0f)),
; 211  : 			TFlyVertex(D3DXVECTOR3(size2,0.0f,0.0f), m_dwColor,D3DXVECTOR2(1.0f,0.5f)),
; 212  : 			TFlyVertex(D3DXVECTOR3(0.0f,-size2,0.0f),m_dwColor,D3DXVECTOR2(1.0f,1.0f)),
; 213  : 	
; 214  : 			/*TVertex(D3DXVECTOR3(0.0f,size1,0.0f), ((DWORD)(0x40*rate1)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 215  : 			TVertex(D3DXVECTOR3(-size1,0.0f,0.0f),((DWORD)(0x40*rate1)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 216  : 			TVertex(D3DXVECTOR3(size1,0.0f,0.0f), ((DWORD)(0x40*rate1)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 217  : 			TVertex(D3DXVECTOR3(-size2,0.0f,0.0f),((DWORD)(0x40*rate2)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 218  : 			TVertex(D3DXVECTOR3(size2,0.0f,0.0f), ((DWORD)(0x40*rate2)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 219  : 			TVertex(D3DXVECTOR3(0.0f,-size2,0.0f),((DWORD)(0x40*rate2)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),*/
; 220  : 
; 221  : 			/*TVertex(D3DXVECTOR3(0.0f,size1,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 222  : 			TVertex(D3DXVECTOR3(-size1,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 223  : 			TVertex(D3DXVECTOR3(size1,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 224  : 			TVertex(D3DXVECTOR3(-size2,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 225  : 			TVertex(D3DXVECTOR3(size2,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 226  : 			TVertex(D3DXVECTOR3(0.0f,-size2,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),*/
; 227  : 
; 228  : 			/*TVertex(D3DXVECTOR3(0.0f,size1,0.0f),0xffff0000,D3DXVECTOR2(0.0f,0.0f)),
; 229  : 			TVertex(D3DXVECTOR3(-size1,0.0f,0.0f),0xffff0000,D3DXVECTOR2(0.0f,0.0f)),
; 230  : 			TVertex(D3DXVECTOR3(size1,0.0f,0.0f),0xffff0000,D3DXVECTOR2(0.0f,0.0f)),
; 231  : 			TVertex(D3DXVECTOR3(-size2,0.0f,0.0f),0xff0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 232  : 			TVertex(D3DXVECTOR3(size2,0.0f,0.0f),0xff0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 233  : 			TVertex(D3DXVECTOR3(0.0f,-size2,0.0f),0xff0000ff,D3DXVECTOR2(0.0f,0.0f)),*/
; 234  : 		};

  0063c	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0063f	0f 57 e4	 xorps	 xmm4, xmm4
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00642	c7 85 74 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T6[ebp+8], 0
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 96   : 	TFlyVertex(const D3DXVECTOR3& p, DWORD c, const D3DXVECTOR2 & t):p(p),c(c),t(t){}

  0064c	0f 28 c4	 movaps	 xmm0, xmm4
  0064f	8b 85 74 fd ff
	ff		 mov	 eax, DWORD PTR $T6[ebp+8]
  00655	89 85 68 ff ff
	ff		 mov	 DWORD PTR _v$23[ebp+8], eax
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 41   :     x = fx;

  0065b	c7 85 d0 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T16[ebp], 0
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 96   : 	TFlyVertex(const D3DXVECTOR3& p, DWORD c, const D3DXVECTOR2 & t):p(p),c(c),t(t){}

  00665	8b 85 d0 fd ff
	ff		 mov	 eax, DWORD PTR $T16[ebp]
  0066b	89 85 70 ff ff
	ff		 mov	 DWORD PTR _v$23[ebp+16], eax
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 42   :     y = fy;

  00671	c7 85 d4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T16[ebp+4], 0
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 96   : 	TFlyVertex(const D3DXVECTOR3& p, DWORD c, const D3DXVECTOR2 & t):p(p),c(c),t(t){}

  0067b	8b 85 d4 fd ff
	ff		 mov	 eax, DWORD PTR $T16[ebp+4]
  00681	89 85 74 ff ff
	ff		 mov	 DWORD PTR _v$23[ebp+20], eax
  00687	0f 14 c1	 unpcklps xmm0, xmm1
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  0068a	c7 85 68 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T5[ebp+8], 0
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 96   : 	TFlyVertex(const D3DXVECTOR3& p, DWORD c, const D3DXVECTOR2 & t):p(p),c(c),t(t){}

  00694	8b 85 68 fd ff
	ff		 mov	 eax, DWORD PTR $T5[ebp+8]
  0069a	89 45 80	 mov	 DWORD PTR _v$23[ebp+32], eax
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 41   :     x = fx;

  0069d	c7 85 c4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T15[ebp], 0
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 96   : 	TFlyVertex(const D3DXVECTOR3& p, DWORD c, const D3DXVECTOR2 & t):p(p),c(c),t(t){}

  006a7	8b 85 c4 fd ff
	ff		 mov	 eax, DWORD PTR $T15[ebp]
  006ad	89 45 88	 mov	 DWORD PTR _v$23[ebp+40], eax
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 42   :     y = fy;

  006b0	c7 85 c8 fd ff
	ff 00 00 00 3f	 mov	 DWORD PTR $T15[ebp+4], 1056964608 ; 3f000000H
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 96   : 	TFlyVertex(const D3DXVECTOR3& p, DWORD c, const D3DXVECTOR2 & t):p(p),c(c),t(t){}

  006ba	8b 85 c8 fd ff
	ff		 mov	 eax, DWORD PTR $T15[ebp+4]
  006c0	89 45 8c	 mov	 DWORD PTR _v$23[ebp+44], eax
  006c3	66 0f d6 85 60
	ff ff ff	 movq	 QWORD PTR _v$23[ebp], xmm0

; 204  : 		}
; 205  : 		TFlyVertex v[6] = 
; 206  : 		{
; 207  : 			TFlyVertex(D3DXVECTOR3(0.0f,size1,0.0f), m_dwColor,D3DXVECTOR2(0.0f,0.0f)),
; 208  : 			TFlyVertex(D3DXVECTOR3(-size1,0.0f,0.0f),m_dwColor,D3DXVECTOR2(0.0f,0.5f)),
; 209  : 			TFlyVertex(D3DXVECTOR3(size1,0.0f,0.0f), m_dwColor,D3DXVECTOR2(0.5f,0.0f)),
; 210  : 			TFlyVertex(D3DXVECTOR3(-size2,0.0f,0.0f),m_dwColor,D3DXVECTOR2(0.5f,1.0f)),
; 211  : 			TFlyVertex(D3DXVECTOR3(size2,0.0f,0.0f), m_dwColor,D3DXVECTOR2(1.0f,0.5f)),
; 212  : 			TFlyVertex(D3DXVECTOR3(0.0f,-size2,0.0f),m_dwColor,D3DXVECTOR2(1.0f,1.0f)),
; 213  : 	
; 214  : 			/*TVertex(D3DXVECTOR3(0.0f,size1,0.0f), ((DWORD)(0x40*rate1)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 215  : 			TVertex(D3DXVECTOR3(-size1,0.0f,0.0f),((DWORD)(0x40*rate1)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 216  : 			TVertex(D3DXVECTOR3(size1,0.0f,0.0f), ((DWORD)(0x40*rate1)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 217  : 			TVertex(D3DXVECTOR3(-size2,0.0f,0.0f),((DWORD)(0x40*rate2)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 218  : 			TVertex(D3DXVECTOR3(size2,0.0f,0.0f), ((DWORD)(0x40*rate2)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 219  : 			TVertex(D3DXVECTOR3(0.0f,-size2,0.0f),((DWORD)(0x40*rate2)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),*/
; 220  : 
; 221  : 			/*TVertex(D3DXVECTOR3(0.0f,size1,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 222  : 			TVertex(D3DXVECTOR3(-size1,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 223  : 			TVertex(D3DXVECTOR3(size1,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 224  : 			TVertex(D3DXVECTOR3(-size2,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 225  : 			TVertex(D3DXVECTOR3(size2,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 226  : 			TVertex(D3DXVECTOR3(0.0f,-size2,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),*/
; 227  : 
; 228  : 			/*TVertex(D3DXVECTOR3(0.0f,size1,0.0f),0xffff0000,D3DXVECTOR2(0.0f,0.0f)),
; 229  : 			TVertex(D3DXVECTOR3(-size1,0.0f,0.0f),0xffff0000,D3DXVECTOR2(0.0f,0.0f)),
; 230  : 			TVertex(D3DXVECTOR3(size1,0.0f,0.0f),0xffff0000,D3DXVECTOR2(0.0f,0.0f)),
; 231  : 			TVertex(D3DXVECTOR3(-size2,0.0f,0.0f),0xff0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 232  : 			TVertex(D3DXVECTOR3(size2,0.0f,0.0f),0xff0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 233  : 			TVertex(D3DXVECTOR3(0.0f,-size2,0.0f),0xff0000ff,D3DXVECTOR2(0.0f,0.0f)),*/
; 234  : 		};

  006cb	0f 28 c1	 movaps	 xmm0, xmm1
  006ce	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  006d5	c7 85 80 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T7[ebp+8], 0
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 96   : 	TFlyVertex(const D3DXVECTOR3& p, DWORD c, const D3DXVECTOR2 & t):p(p),c(c),t(t){}

  006df	8b 85 80 fd ff
	ff		 mov	 eax, DWORD PTR $T7[ebp+8]
  006e5	89 45 98	 mov	 DWORD PTR _v$23[ebp+56], eax
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 41   :     x = fx;

  006e8	c7 85 d8 fd ff
	ff 00 00 00 3f	 mov	 DWORD PTR $T17[ebp], 1056964608 ; 3f000000H
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 96   : 	TFlyVertex(const D3DXVECTOR3& p, DWORD c, const D3DXVECTOR2 & t):p(p),c(c),t(t){}

  006f2	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR $T17[ebp]
  006f8	89 45 a0	 mov	 DWORD PTR _v$23[ebp+64], eax
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 42   :     y = fy;

  006fb	c7 85 dc fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T17[ebp+4], 0
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 96   : 	TFlyVertex(const D3DXVECTOR3& p, DWORD c, const D3DXVECTOR2 & t):p(p),c(c),t(t){}

  00705	8b 85 dc fd ff
	ff		 mov	 eax, DWORD PTR $T17[ebp+4]
  0070b	89 45 a4	 mov	 DWORD PTR _v$23[ebp+68], eax
  0070e	0f 14 cc	 unpcklps xmm1, xmm4
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00711	c7 85 8c fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T8[ebp+8], 0
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 96   : 	TFlyVertex(const D3DXVECTOR3& p, DWORD c, const D3DXVECTOR2 & t):p(p),c(c),t(t){}

  0071b	8b 85 8c fd ff
	ff		 mov	 eax, DWORD PTR $T8[ebp+8]
  00721	89 45 b0	 mov	 DWORD PTR _v$23[ebp+80], eax
  00724	0f 14 c4	 unpcklps xmm0, xmm4
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 41   :     x = fx;

  00727	c7 85 a8 fd ff
	ff 00 00 00 3f	 mov	 DWORD PTR $T12[ebp], 1056964608 ; 3f000000H
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 96   : 	TFlyVertex(const D3DXVECTOR3& p, DWORD c, const D3DXVECTOR2 & t):p(p),c(c),t(t){}

  00731	8b 85 a8 fd ff
	ff		 mov	 eax, DWORD PTR $T12[ebp]
  00737	89 45 b8	 mov	 DWORD PTR _v$23[ebp+88], eax
  0073a	66 0f d6 4d 90	 movq	 QWORD PTR _v$23[ebp+48], xmm1

; 204  : 		}
; 205  : 		TFlyVertex v[6] = 
; 206  : 		{
; 207  : 			TFlyVertex(D3DXVECTOR3(0.0f,size1,0.0f), m_dwColor,D3DXVECTOR2(0.0f,0.0f)),
; 208  : 			TFlyVertex(D3DXVECTOR3(-size1,0.0f,0.0f),m_dwColor,D3DXVECTOR2(0.0f,0.5f)),
; 209  : 			TFlyVertex(D3DXVECTOR3(size1,0.0f,0.0f), m_dwColor,D3DXVECTOR2(0.5f,0.0f)),
; 210  : 			TFlyVertex(D3DXVECTOR3(-size2,0.0f,0.0f),m_dwColor,D3DXVECTOR2(0.5f,1.0f)),
; 211  : 			TFlyVertex(D3DXVECTOR3(size2,0.0f,0.0f), m_dwColor,D3DXVECTOR2(1.0f,0.5f)),
; 212  : 			TFlyVertex(D3DXVECTOR3(0.0f,-size2,0.0f),m_dwColor,D3DXVECTOR2(1.0f,1.0f)),
; 213  : 	
; 214  : 			/*TVertex(D3DXVECTOR3(0.0f,size1,0.0f), ((DWORD)(0x40*rate1)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 215  : 			TVertex(D3DXVECTOR3(-size1,0.0f,0.0f),((DWORD)(0x40*rate1)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 216  : 			TVertex(D3DXVECTOR3(size1,0.0f,0.0f), ((DWORD)(0x40*rate1)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 217  : 			TVertex(D3DXVECTOR3(-size2,0.0f,0.0f),((DWORD)(0x40*rate2)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 218  : 			TVertex(D3DXVECTOR3(size2,0.0f,0.0f), ((DWORD)(0x40*rate2)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 219  : 			TVertex(D3DXVECTOR3(0.0f,-size2,0.0f),((DWORD)(0x40*rate2)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),*/
; 220  : 
; 221  : 			/*TVertex(D3DXVECTOR3(0.0f,size1,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 222  : 			TVertex(D3DXVECTOR3(-size1,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 223  : 			TVertex(D3DXVECTOR3(size1,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 224  : 			TVertex(D3DXVECTOR3(-size2,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 225  : 			TVertex(D3DXVECTOR3(size2,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 226  : 			TVertex(D3DXVECTOR3(0.0f,-size2,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),*/
; 227  : 
; 228  : 			/*TVertex(D3DXVECTOR3(0.0f,size1,0.0f),0xffff0000,D3DXVECTOR2(0.0f,0.0f)),
; 229  : 			TVertex(D3DXVECTOR3(-size1,0.0f,0.0f),0xffff0000,D3DXVECTOR2(0.0f,0.0f)),
; 230  : 			TVertex(D3DXVECTOR3(size1,0.0f,0.0f),0xffff0000,D3DXVECTOR2(0.0f,0.0f)),
; 231  : 			TVertex(D3DXVECTOR3(-size2,0.0f,0.0f),0xff0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 232  : 			TVertex(D3DXVECTOR3(size2,0.0f,0.0f),0xff0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 233  : 			TVertex(D3DXVECTOR3(0.0f,-size2,0.0f),0xff0000ff,D3DXVECTOR2(0.0f,0.0f)),*/
; 234  : 		};

  0073f	0f 28 ca	 movaps	 xmm1, xmm2
  00742	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 42   :     y = fy;

  00749	c7 85 ac fd ff
	ff 00 00 80 3f	 mov	 DWORD PTR $T12[ebp+4], 1065353216 ; 3f800000H
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 96   : 	TFlyVertex(const D3DXVECTOR3& p, DWORD c, const D3DXVECTOR2 & t):p(p),c(c),t(t){}

  00753	8b 85 ac fd ff
	ff		 mov	 eax, DWORD PTR $T12[ebp+4]
  00759	89 45 bc	 mov	 DWORD PTR _v$23[ebp+92], eax
  0075c	66 0f d6 85 78
	ff ff ff	 movq	 QWORD PTR _v$23[ebp+24], xmm0
  00764	f3 0f 10 c1	 movss	 xmm0, xmm1
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00768	c7 85 5c fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T4[ebp+8], 0
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 96   : 	TFlyVertex(const D3DXVECTOR3& p, DWORD c, const D3DXVECTOR2 & t):p(p),c(c),t(t){}

  00772	8b 85 5c fd ff
	ff		 mov	 eax, DWORD PTR $T4[ebp+8]
  00778	89 45 c8	 mov	 DWORD PTR _v$23[ebp+104], eax
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 41   :     x = fx;

  0077b	c7 85 b0 fd ff
	ff 00 00 80 3f	 mov	 DWORD PTR $T13[ebp], 1065353216 ; 3f800000H
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 96   : 	TFlyVertex(const D3DXVECTOR3& p, DWORD c, const D3DXVECTOR2 & t):p(p),c(c),t(t){}

  00785	8b 85 b0 fd ff
	ff		 mov	 eax, DWORD PTR $T13[ebp]
  0078b	89 45 d0	 mov	 DWORD PTR _v$23[ebp+112], eax
  0078e	0f 14 c4	 unpcklps xmm0, xmm4
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 42   :     y = fy;

  00791	c7 85 b4 fd ff
	ff 00 00 00 3f	 mov	 DWORD PTR $T13[ebp+4], 1056964608 ; 3f000000H
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 96   : 	TFlyVertex(const D3DXVECTOR3& p, DWORD c, const D3DXVECTOR2 & t):p(p),c(c),t(t){}

  0079b	8b 85 b4 fd ff
	ff		 mov	 eax, DWORD PTR $T13[ebp+4]
  007a1	89 45 d4	 mov	 DWORD PTR _v$23[ebp+116], eax
  007a4	66 0f d6 45 a8	 movq	 QWORD PTR _v$23[ebp+72], xmm0
  007a9	f3 0f 10 c4	 movss	 xmm0, xmm4
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  007ad	c7 85 44 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp+8], 0
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 96   : 	TFlyVertex(const D3DXVECTOR3& p, DWORD c, const D3DXVECTOR2 & t):p(p),c(c),t(t){}

  007b7	8b 85 44 fd ff
	ff		 mov	 eax, DWORD PTR $T2[ebp+8]
  007bd	89 45 e0	 mov	 DWORD PTR _v$23[ebp+128], eax
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 41   :     x = fx;

  007c0	c7 85 bc fd ff
	ff 00 00 80 3f	 mov	 DWORD PTR $T14[ebp], 1065353216 ; 3f800000H
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 96   : 	TFlyVertex(const D3DXVECTOR3& p, DWORD c, const D3DXVECTOR2 & t):p(p),c(c),t(t){}

  007ca	8b 85 bc fd ff
	ff		 mov	 eax, DWORD PTR $T14[ebp]
  007d0	0f 14 d4	 unpcklps xmm2, xmm4
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 42   :     y = fy;

  007d3	c7 85 c0 fd ff
	ff 00 00 80 3f	 mov	 DWORD PTR $T14[ebp+4], 1065353216 ; 3f800000H
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 96   : 	TFlyVertex(const D3DXVECTOR3& p, DWORD c, const D3DXVECTOR2 & t):p(p),c(c),t(t){}

  007dd	0f 14 c1	 unpcklps xmm0, xmm1
  007e0	89 45 e8	 mov	 DWORD PTR _v$23[ebp+136], eax
  007e3	8b 85 c0 fd ff
	ff		 mov	 eax, DWORD PTR $T14[ebp+4]
  007e9	89 8d 6c ff ff
	ff		 mov	 DWORD PTR _v$23[ebp+12], ecx
  007ef	89 4d 84	 mov	 DWORD PTR _v$23[ebp+36], ecx
  007f2	89 4d 9c	 mov	 DWORD PTR _v$23[ebp+60], ecx
  007f5	89 4d b4	 mov	 DWORD PTR _v$23[ebp+84], ecx
  007f8	66 0f d6 55 c0	 movq	 QWORD PTR _v$23[ebp+96], xmm2
  007fd	89 4d cc	 mov	 DWORD PTR _v$23[ebp+108], ecx
  00800	66 0f d6 45 d8	 movq	 QWORD PTR _v$23[ebp+120], xmm0
  00805	89 4d e4	 mov	 DWORD PTR _v$23[ebp+132], ecx
  00808	89 45 ec	 mov	 DWORD PTR _v$23[ebp+140], eax

; 238  : 		E = pCurrentCamera->GetEye();

  0080b	8b 85 e0 fd ff
	ff		 mov	 eax, DWORD PTR _pCurrentCamera$1$[ebp]
; File a:\vs\vc\include\xutility

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00811	8b bd 14 fe ff
	ff		 mov	 edi, DWORD PTR _it1$1$[ebp]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 238  : 		E = pCurrentCamera->GetEye();

  00817	f3 0f 7e 40 30	 movq	 xmm0, QWORD PTR [eax+48]
  0081c	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  0081f	66 0f d6 85 9c
	fd ff ff	 movq	 QWORD PTR _E$11[ebp], xmm0
  00827	89 85 a4 fd ff
	ff		 mov	 DWORD PTR _E$11[ebp+8], eax
; File a:\vs\vc\include\xutility

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  0082d	85 ff		 test	 edi, edi
  0082f	75 04		 jne	 SHORT $LN395@Render
  00831	33 c0		 xor	 eax, eax
  00833	eb 02		 jmp	 SHORT $LN396@Render
$LN395@Render:
  00835	8b 07		 mov	 eax, DWORD PTR [edi]
$LN396@Render:
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00837	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 239  : 		E-=it1->second;

  0083a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0083d	49		 dec	 ecx
  0083e	23 8d 20 fe ff
	ff		 and	 ecx, DWORD PTR _it1$2$[ebp]
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 214  :     y -= v.y;

  00844	f3 0f 10 b5 a0
	fd ff ff	 movss	 xmm6, DWORD PTR _E$11[ebp+4]

; 215  :     z -= v.z;

  0084c	f3 0f 10 bd a4
	fd ff ff	 movss	 xmm7, DWORD PTR _E$11[ebp+8]

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00854	f3 0f 10 8d cc
	fd ff ff	 movss	 xmm1, DWORD PTR _fy$1$[ebp]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 239  : 		E-=it1->second;

  0085c	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  0085f	0f 28 d9	 movaps	 xmm3, xmm1

; 207  :     return *this;
; 208  : }
; 209  : 
; 210  : D3DXINLINE D3DXVECTOR3&
; 211  : D3DXVECTOR3::operator -= ( CONST D3DXVECTOR3& v )
; 212  : {
; 213  :     x -= v.x;

  00862	f3 0f 10 ad 9c
	fd ff ff	 movss	 xmm5, DWORD PTR _E$11[ebp]

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  0086a	f3 0f 10 85 b8
	fd ff ff	 movss	 xmm0, DWORD PTR _fz$1$[ebp]

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00872	f3 0f 10 a5 24
	fe ff ff	 movss	 xmm4, DWORD PTR _v$3$[ebp]

; 214  :     y -= v.y;

  0087a	f3 0f 5c 70 08	 subss	 xmm6, DWORD PTR [eax+8]

; 215  :     z -= v.z;

  0087f	f3 0f 5c 78 0c	 subss	 xmm7, DWORD PTR [eax+12]
  00884	f3 0f 5c 68 04	 subss	 xmm5, DWORD PTR [eax+4]

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00889	f3 0f 59 c6	 mulss	 xmm0, xmm6
  0088d	f3 0f 59 df	 mulss	 xmm3, xmm7

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00891	0f 28 d5	 movaps	 xmm2, xmm5
  00894	f3 0f 59 95 b8
	fd ff ff	 mulss	 xmm2, DWORD PTR _fz$1$[ebp]
  0089c	f3 0f 5c d8	 subss	 xmm3, xmm0

; 207  :     return *this;
; 208  : }
; 209  : 
; 210  : D3DXINLINE D3DXVECTOR3&
; 211  : D3DXVECTOR3::operator -= ( CONST D3DXVECTOR3& v )
; 212  : {
; 213  :     x -= v.x;

  008a0	f3 0f 11 ad 18
	fe ff ff	 movss	 DWORD PTR _E$1$[ebp], xmm5

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  008a8	0f 28 c4	 movaps	 xmm0, xmm4

; 214  :     y -= v.y;

  008ab	f3 0f 11 b5 30
	fe ff ff	 movss	 DWORD PTR _E$2$[ebp], xmm6

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  008b3	f3 0f 59 c7	 mulss	 xmm0, xmm7

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  008b7	f3 0f 59 e6	 mulss	 xmm4, xmm6
  008bb	f3 0f 5c d0	 subss	 xmm2, xmm0

; 215  :     z -= v.z;

  008bf	f3 0f 11 bd 1c
	fe ff ff	 movss	 DWORD PTR _E$3$[ebp], xmm7

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  008c7	0f 28 c5	 movaps	 xmm0, xmm5
  008ca	f3 0f 59 c1	 mulss	 xmm0, xmm1
  008ce	f3 0f 5c e0	 subss	 xmm4, xmm0

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  008d2	0f 28 c2	 movaps	 xmm0, xmm2
  008d5	f3 0f 59 85 fc
	fd ff ff	 mulss	 xmm0, DWORD PTR _F$[ebp+8]

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  008dd	f3 0f 59 95 f4
	fd ff ff	 mulss	 xmm2, DWORD PTR _F$[ebp]
  008e5	0f 28 cc	 movaps	 xmm1, xmm4
  008e8	f3 0f 59 a5 f4
	fd ff ff	 mulss	 xmm4, DWORD PTR _F$[ebp]
  008f0	f3 0f 59 8d f8
	fd ff ff	 mulss	 xmm1, DWORD PTR _F$[ebp+4]
  008f8	f3 0f 5c c8	 subss	 xmm1, xmm0
  008fc	0f 28 c3	 movaps	 xmm0, xmm3
  008ff	f3 0f 59 9d f8
	fd ff ff	 mulss	 xmm3, DWORD PTR _F$[ebp+4]
  00907	f3 0f 59 85 fc
	fd ff ff	 mulss	 xmm0, DWORD PTR _F$[ebp+8]
  0090f	f3 0f 5c d3	 subss	 xmm2, xmm3
  00913	f3 0f 5c c4	 subss	 xmm0, xmm4
  00917	f3 0f 11 95 50
	fd ff ff	 movss	 DWORD PTR _v$3[ebp+8], xmm2

; 1281 :     *pOut = v;

  0091f	8b 85 50 fd ff
	ff		 mov	 eax, DWORD PTR _v$3[ebp+8]
  00925	89 85 5c ff ff
	ff		 mov	 DWORD PTR _U$22[ebp+8], eax
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 246  : 		D3DXVec3Normalize(&U,&U);

  0092b	8d 85 54 ff ff
	ff		 lea	 eax, DWORD PTR _U$22[ebp]
  00931	50		 push	 eax
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 1281 :     *pOut = v;

  00932	0f 14 c8	 unpcklps xmm1, xmm0
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 246  : 		D3DXVec3Normalize(&U,&U);

  00935	50		 push	 eax
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 1281 :     *pOut = v;

  00936	66 0f d6 8d 54
	ff ff ff	 movq	 QWORD PTR _U$22[ebp], xmm1
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 246  : 		D3DXVec3Normalize(&U,&U);

  0093e	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00943	f3 0f 10 ad 5c
	ff ff ff	 movss	 xmm5, DWORD PTR _U$22[ebp+8]
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0094b	8d b5 60 ff ff
	ff		 lea	 esi, DWORD PTR _v$23[ebp]
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00951	f3 0f 10 9d 58
	ff ff ff	 movss	 xmm3, DWORD PTR _U$22[ebp+4]
  00959	0f 28 f5	 movaps	 xmm6, xmm5
  0095c	f3 0f 59 b5 f8
	fd ff ff	 mulss	 xmm6, DWORD PTR _F$[ebp+4]
  00964	0f 28 c3	 movaps	 xmm0, xmm3
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00967	bf 06 00 00 00	 mov	 edi, 6
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  0096c	f3 0f 59 85 fc
	fd ff ff	 mulss	 xmm0, DWORD PTR _F$[ebp+8]

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00974	0f 28 d3	 movaps	 xmm2, xmm3
  00977	f3 0f 10 8d 54
	ff ff ff	 movss	 xmm1, DWORD PTR _U$22[ebp]
  0097f	f3 0f 59 95 f4
	fd ff ff	 mulss	 xmm2, DWORD PTR _F$[ebp]
  00987	0f 28 e1	 movaps	 xmm4, xmm1
  0098a	f3 0f 59 a5 fc
	fd ff ff	 mulss	 xmm4, DWORD PTR _F$[ebp+8]
  00992	f3 0f 5c f0	 subss	 xmm6, xmm0
  00996	0f 28 c5	 movaps	 xmm0, xmm5
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 250  : 		m._21 = U.x;

  00999	f3 0f 11 8d 24
	ff ff ff	 movss	 DWORD PTR _m$[ebp+16], xmm1
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  009a1	f3 0f 59 85 f4
	fd ff ff	 mulss	 xmm0, DWORD PTR _F$[ebp]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 251  : 		m._22 = U.y;

  009a9	f3 0f 11 9d 28
	ff ff ff	 movss	 DWORD PTR _m$[ebp+20], xmm3

; 252  : 		m._23 = U.z;

  009b1	f3 0f 11 ad 2c
	ff ff ff	 movss	 DWORD PTR _m$[ebp+24], xmm5
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  009b9	f3 0f 5c e0	 subss	 xmm4, xmm0
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 253  : 		m._11 = R.x;

  009bd	f3 0f 11 b5 14
	ff ff ff	 movss	 DWORD PTR _m$[ebp], xmm6
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  009c5	0f 28 c1	 movaps	 xmm0, xmm1
  009c8	f3 0f 59 85 f8
	fd ff ff	 mulss	 xmm0, DWORD PTR _F$[ebp+4]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 254  : 		m._12 = R.y;

  009d0	f3 0f 11 a5 18
	ff ff ff	 movss	 DWORD PTR _m$[ebp+4], xmm4
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  009d8	f3 0f 5c d0	 subss	 xmm2, xmm0
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 255  : 		m._13 = R.z;

  009dc	f3 0f 11 95 1c
	ff ff ff	 movss	 DWORD PTR _m$[ebp+8], xmm2
$LL12@Render:

; 256  : 		int i;
; 257  : 		for(i=0;i<6;i++)
; 258  : 			D3DXVec3TransformNormal(&v[i].p,&v[i].p,&m);

  009e4	8d 85 14 ff ff
	ff		 lea	 eax, DWORD PTR _m$[ebp]
  009ea	50		 push	 eax
  009eb	56		 push	 esi
  009ec	56		 push	 esi
  009ed	e8 00 00 00 00	 call	 _D3DXVec3TransformNormal@12
  009f2	83 c6 18	 add	 esi, 24			; 00000018H
  009f5	4f		 dec	 edi
  009f6	75 ec		 jne	 SHORT $LL12@Render
  009f8	8b bd 14 fe ff
	ff		 mov	 edi, DWORD PTR _it1$1$[ebp]
; File a:\vs\vc\include\xutility

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  009fe	85 ff		 test	 edi, edi
  00a00	75 04		 jne	 SHORT $LN431@Render
  00a02	33 c0		 xor	 eax, eax
  00a04	eb 02		 jmp	 SHORT $LN432@Render
$LN431@Render:
  00a06	8b 07		 mov	 eax, DWORD PTR [edi]
$LN432@Render:
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00a08	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 260  : 			v[i].p += it1->second;

  00a0b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00a0e	49		 dec	 ecx
  00a0f	8b 95 20 fe ff
	ff		 mov	 edx, DWORD PTR _it1$2$[ebp]
  00a15	23 ca		 and	 ecx, edx
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  00a17	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _v$23[ebp]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 260  : 			v[i].p += it1->second;

  00a1f	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  00a22	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  00a27	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _v$23[ebp], xmm0

; 205  :     y += v.y;

  00a2f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00a34	f3 0f 58 85 64
	ff ff ff	 addss	 xmm0, DWORD PTR _v$23[ebp+4]
  00a3c	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR _v$23[ebp+4], xmm0

; 206  :     z += v.z;

  00a44	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  00a49	f3 0f 58 85 68
	ff ff ff	 addss	 xmm0, DWORD PTR _v$23[ebp+8]
  00a51	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _v$23[ebp+8], xmm0
; File a:\vs\vc\include\xutility

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00a59	85 ff		 test	 edi, edi
  00a5b	75 04		 jne	 SHORT $LN765@Render
  00a5d	33 c0		 xor	 eax, eax
  00a5f	eb 02		 jmp	 SHORT $LN766@Render
$LN765@Render:
  00a61	8b 07		 mov	 eax, DWORD PTR [edi]
$LN766@Render:
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00a63	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 260  : 			v[i].p += it1->second;

  00a66	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00a69	49		 dec	 ecx
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  00a6a	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _v$23[ebp+24]
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00a72	23 ca		 and	 ecx, edx
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 260  : 			v[i].p += it1->second;

  00a74	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  00a77	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  00a7c	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _v$23[ebp+24], xmm0

; 205  :     y += v.y;

  00a84	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00a89	f3 0f 58 85 7c
	ff ff ff	 addss	 xmm0, DWORD PTR _v$23[ebp+28]
  00a91	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _v$23[ebp+28], xmm0

; 206  :     z += v.z;

  00a99	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  00a9e	f3 0f 58 45 80	 addss	 xmm0, DWORD PTR _v$23[ebp+32]
  00aa3	f3 0f 11 45 80	 movss	 DWORD PTR _v$23[ebp+32], xmm0
; File a:\vs\vc\include\xutility

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00aa8	85 ff		 test	 edi, edi
  00aaa	75 04		 jne	 SHORT $LN768@Render
  00aac	33 c0		 xor	 eax, eax
  00aae	eb 02		 jmp	 SHORT $LN769@Render
$LN768@Render:
  00ab0	8b 07		 mov	 eax, DWORD PTR [edi]
$LN769@Render:
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00ab2	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00ab5	be 03 00 00 00	 mov	 esi, 3
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 260  : 			v[i].p += it1->second;

  00aba	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00abd	49		 dec	 ecx
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  00abe	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _v$23[ebp+48]
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00ac3	23 ca		 and	 ecx, edx
  00ac5	8b bd 28 fe ff
	ff		 mov	 edi, DWORD PTR _it2$2$[ebp]
  00acb	8d 55 b0	 lea	 edx, DWORD PTR _v$23[ebp+80]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 260  : 			v[i].p += it1->second;

  00ace	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  00ad1	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  00ad6	f3 0f 11 45 90	 movss	 DWORD PTR _v$23[ebp+48], xmm0

; 205  :     y += v.y;

  00adb	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00ae0	f3 0f 58 45 94	 addss	 xmm0, DWORD PTR _v$23[ebp+52]
  00ae5	f3 0f 11 45 94	 movss	 DWORD PTR _v$23[ebp+52], xmm0

; 206  :     z += v.z;

  00aea	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  00aef	f3 0f 58 45 98	 addss	 xmm0, DWORD PTR _v$23[ebp+56]
  00af4	f3 0f 11 45 98	 movss	 DWORD PTR _v$23[ebp+56], xmm0
  00af9	8d a4 24 00 00
	00 00		 npad	 7
$LL777@Render:
; File a:\vs\vc\include\xutility

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00b00	8b 85 00 fe ff
	ff		 mov	 eax, DWORD PTR _it2$1$[ebp]
  00b06	85 c0		 test	 eax, eax
  00b08	74 02		 je	 SHORT $LN450@Render
$LN449@Render:
  00b0a	8b 00		 mov	 eax, DWORD PTR [eax]
$LN450@Render:
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00b0c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 262  : 			v[i].p += it2->second;

  00b0f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00b12	49		 dec	 ecx
  00b13	23 cf		 and	 ecx, edi
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 262  : 			v[i].p += it2->second;

  00b15	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  00b18	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00b1d	f3 0f 58 42 f8	 addss	 xmm0, DWORD PTR [edx-8]
  00b22	f3 0f 11 42 f8	 movss	 DWORD PTR [edx-8], xmm0

; 205  :     y += v.y;

  00b27	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00b2c	f3 0f 58 42 fc	 addss	 xmm0, DWORD PTR [edx-4]
  00b31	f3 0f 11 42 fc	 movss	 DWORD PTR [edx-4], xmm0

; 206  :     z += v.z;

  00b36	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  00b3b	f3 0f 58 02	 addss	 xmm0, DWORD PTR [edx]
  00b3f	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 261  : 		for(;i<6;i++)

  00b43	83 c2 18	 add	 edx, 24			; 00000018H
  00b46	4e		 dec	 esi
  00b47	75 b7		 jne	 SHORT $LL777@Render
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00b49	8b 85 e0 fd ff
	ff		 mov	 eax, DWORD PTR _pCurrentCamera$1$[ebp]
; File a:\vs\vc\include\utility

; 144  : 		{	// construct from moved values

  00b4f	8d b5 60 ff ff
	ff		 lea	 esi, DWORD PTR _v$23[ebp]
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00b55	f3 0f 10 85 18
	fe ff ff	 movss	 xmm0, DWORD PTR _E$1$[ebp]
; File a:\vs\vc\include\utility

; 144  : 		{	// construct from moved values

  00b5d	8d bd 38 fe ff
	ff		 lea	 edi, DWORD PTR $T20[ebp+4]
  00b63	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00b68	f3 0f 10 48 58	 movss	 xmm1, DWORD PTR [eax+88]
  00b6d	f3 0f 59 40 54	 mulss	 xmm0, DWORD PTR [eax+84]
  00b72	f3 0f 59 8d 30
	fe ff ff	 mulss	 xmm1, DWORD PTR _E$2$[ebp]
  00b7a	f3 0f 58 c8	 addss	 xmm1, xmm0
  00b7e	f3 0f 10 40 5c	 movss	 xmm0, DWORD PTR [eax+92]
  00b83	f3 0f 59 85 1c
	fe ff ff	 mulss	 xmm0, DWORD PTR _E$3$[ebp]
; File a:\vs\vc\include\vector

; 1583 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00b8b	8d 85 34 fe ff
	ff		 lea	 eax, DWORD PTR $T20[ebp]
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00b91	f3 0f 58 c8	 addss	 xmm1, xmm0
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 266  : 		VSVector.push_back(make_pair(-D3DXVec3Dot(&E,&pCurrentCamera->GetView()),TFlyVertexSet(v)));

  00b95	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
; File a:\vs\vc\include\utility

; 144  : 		{	// construct from moved values

  00b9c	f3 0f 11 8d 34
	fe ff ff	 movss	 DWORD PTR $T20[ebp], xmm1
  00ba4	f3 a5		 rep movsd
; File a:\vs\vc\include\vector

; 1583 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00ba6	8b bd 2c fe ff
	ff		 mov	 edi, DWORD PTR _VSVector$3$[ebp]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 266  : 		VSVector.push_back(make_pair(-D3DXVec3Dot(&E,&pCurrentCamera->GetView()),TFlyVertexSet(v)));

  00bac	f3 0f 11 8d 24
	fe ff ff	 movss	 DWORD PTR $T18[ebp], xmm1
; File a:\vs\vc\include\vector

; 1583 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00bb4	3b c7		 cmp	 eax, edi
  00bb6	0f 83 f8 00 00
	00		 jae	 $LN484@Render
  00bbc	8b c8		 mov	 ecx, eax
  00bbe	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _VSVector$[ebp]
  00bc4	3b c1		 cmp	 eax, ecx
  00bc6	0f 87 e8 00 00
	00		 ja	 $LN484@Render

; 485  : 		}
; 486  : 
; 487  : 	pointer _Myfirst;	// pointer to beginning of array
; 488  : 	pointer _Mylast;	// pointer to current end of sequence
; 489  : 	pointer _Myend;	// pointer to end of array
; 490  : 	};
; 491  : 
; 492  : 		// TEMPLATE CLASS _Vector_alloc
; 493  : template<bool _Al_has_storage,
; 494  : 	class _Alloc_types>
; 495  : 	class _Vector_alloc
; 496  : 		: public _Vector_val<typename _Alloc_types::_Val_types>
; 497  : 	{	// base class for vector to hold allocator with storage
; 498  : public:
; 499  : 	typename _Alloc_types::_Alty _Alval;	// allocator object
; 500  : 
; 501  : 	typedef _Vector_alloc<_Al_has_storage, _Alloc_types> _Myt;
; 502  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 503  : 	typedef typename _Alloc_types::_Alty _Alty;
; 504  : 
; 505  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 506  : 	_Vector_alloc(const _Alloc& _Al = _Alloc())
; 507  : 		: _Alval(_Al)
; 508  : 		{	// construct allocator from _Al
; 509  : 		}
; 510  : 
; 511  : 	void _Change_alloc(const _Alty& _Al)
; 512  : 		{	// replace old allocator
; 513  : 		this->_Alval = _Al;
; 514  : 		}
; 515  : 
; 516  : 	void _Swap_alloc(_Myt& _Right)
; 517  : 		{	// swap allocators
; 518  : 		_Swap_adl(this->_Alval, _Right._Alval);
; 519  : 		}
; 520  : 
; 521  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 522  : 	_Vector_alloc(const _Alty& _Al = _Alty())
; 523  : 		: _Alval(_Al)
; 524  : 		{	// construct allocator from _Al
; 525  : 		_Alloc_proxy();
; 526  : 		}
; 527  : 
; 528  : 	~_Vector_alloc() _NOEXCEPT
; 529  : 		{	// destroy proxy
; 530  : 		_Free_proxy();
; 531  : 		}
; 532  : 
; 533  : 	void _Change_alloc(const _Alty& _Al)
; 534  : 		{	// replace old allocator
; 535  : 		_Free_proxy();
; 536  : 		this->_Alval = _Al;
; 537  : 		_Alloc_proxy();
; 538  : 		}
; 539  : 
; 540  : 	void _Swap_alloc(_Myt& _Right)
; 541  : 		{	// swap allocators
; 542  : 		_Swap_adl(this->_Alval, _Right._Alval);
; 543  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 544  : 		}
; 545  : 
; 546  : 	void _Alloc_proxy()
; 547  : 		{	// construct proxy from _Alval
; 548  : 		typename _Alty::template rebind<_Container_proxy>::other
; 549  : 			_Alproxy(this->_Alval);
; 550  : 		this->_Myproxy = _Alproxy.allocate(1);
; 551  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 552  : 		this->_Myproxy->_Mycont = this;
; 553  : 		}
; 554  : 
; 555  : 	void _Free_proxy()
; 556  : 		{	// destroy proxy
; 557  : 		typename _Alty::template rebind<_Container_proxy>::other
; 558  : 			_Alproxy(this->_Alval);
; 559  : 		this->_Orphan_all();
; 560  : 		_Alproxy.destroy(this->_Myproxy);
; 561  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 562  : 		this->_Myproxy = 0;
; 563  : 		}
; 564  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 565  : 
; 566  : 	_Alty& _Getal()
; 567  : 		{	// get reference to allocator
; 568  : 		return (this->_Alval);
; 569  : 		}
; 570  : 
; 571  : 	const _Alty& _Getal() const
; 572  : 		{	// get reference to allocator
; 573  : 		return (this->_Alval);
; 574  : 		}
; 575  : 	};
; 576  : 
; 577  : template<class _Alloc_types>
; 578  : 	class _Vector_alloc<false, _Alloc_types>
; 579  : 		: public _Vector_val<typename _Alloc_types::_Val_types>
; 580  : 	{	// base class for vector to hold allocator with no storage
; 581  : public:
; 582  : 	typedef _Vector_alloc<false, _Alloc_types> _Myt;
; 583  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 584  : 
; 585  : 	typedef typename _Alloc_types::_Alty _Alty;
; 586  : 
; 587  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 588  : 	_Vector_alloc(const _Alloc& = _Alloc())
; 589  : 		{	// construct allocator from _Al
; 590  : 		}
; 591  : 
; 592  : 	void _Change_alloc(const _Alty&)
; 593  : 		{	// replace old allocator
; 594  : 		}
; 595  : 
; 596  : 	void _Swap_alloc(_Myt&)
; 597  : 		{	// swap allocators
; 598  : 		}
; 599  : 
; 600  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 601  : 	_Vector_alloc(const _Alloc& = _Alloc())
; 602  : 		{	// construct allocator from _Al
; 603  : 		_Alloc_proxy();
; 604  : 		}
; 605  : 
; 606  : 	~_Vector_alloc() _NOEXCEPT
; 607  : 		{	// destroy proxy
; 608  : 		_Free_proxy();
; 609  : 		}
; 610  : 
; 611  : 	void _Change_alloc(const _Alty&)
; 612  : 		{	// replace old allocator
; 613  : 		}
; 614  : 
; 615  : 	void _Swap_alloc(_Myt& _Right)
; 616  : 		{	// swap allocators
; 617  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 618  : 		}
; 619  : 
; 620  : 	void _Alloc_proxy()
; 621  : 		{	// construct proxy from _Alval
; 622  : 		typename _Alty::template rebind<_Container_proxy>::other
; 623  : 			_Alproxy;
; 624  : 		this->_Myproxy = _Alproxy.allocate(1);
; 625  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 626  : 		this->_Myproxy->_Mycont = this;
; 627  : 		}
; 628  : 
; 629  : 	void _Free_proxy()
; 630  : 		{	// destroy proxy
; 631  : 		typename _Alty::template rebind<_Container_proxy>::other
; 632  : 			_Alproxy;
; 633  : 		this->_Orphan_all();
; 634  : 		_Alproxy.destroy(this->_Myproxy);
; 635  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 636  : 		this->_Myproxy = 0;
; 637  : 		}
; 638  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 639  : 
; 640  : 	_Alty _Getal() const
; 641  : 		{	// get reference to allocator
; 642  : 		return (_Alty());
; 643  : 		}
; 644  : 	};
; 645  : 
; 646  : 		// TEMPLATE CLASS vector
; 647  : template<class _Ty,
; 648  : 	class _Alloc = allocator<_Ty> >
; 649  : 	class vector
; 650  : 		: public _Vector_alloc<!is_empty<_Alloc>::value,
; 651  : 			_Vec_base_types<_Ty, _Alloc> >
; 652  : 	{	// varying size array of values
; 653  : public:
; 654  : 	typedef vector<_Ty, _Alloc> _Myt;
; 655  : 	typedef _Vector_alloc<!is_empty<_Alloc>::value,
; 656  : 		_Vec_base_types<_Ty, _Alloc> > _Mybase;
; 657  : 	typedef _Alloc allocator_type;
; 658  : 
; 659  : 	typedef typename _Mybase::_Alty _Alty;
; 660  : 
; 661  : 	typedef typename _Mybase::value_type value_type;
; 662  : 	typedef typename _Mybase::size_type size_type;
; 663  : 	typedef typename _Mybase::difference_type difference_type;
; 664  : 	typedef typename _Mybase::pointer pointer;
; 665  : 	typedef typename _Mybase::const_pointer const_pointer;
; 666  : 	typedef typename _Mybase::reference reference;
; 667  : 	typedef typename _Mybase::const_reference const_reference;
; 668  : 
; 669  :  #define _VICONT(it)	it._Getcont()
; 670  :  #define _VIPTR(it)	(it)._Ptr
; 671  : 
; 672  : 	typedef typename _Mybase::iterator iterator;
; 673  : 	typedef typename _Mybase::const_iterator const_iterator;
; 674  : 
; 675  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 676  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 677  : 
; 678  : 	vector()
; 679  : 		: _Mybase()
; 680  : 		{	// construct empty vector
; 681  : 		}
; 682  : 
; 683  : 	explicit vector(const _Alloc& _Al)
; 684  : 		: _Mybase(_Al)
; 685  : 		{	// construct empty vector, allocator
; 686  : 		}
; 687  : 
; 688  : 	explicit vector(size_type _Count)
; 689  : 		: _Mybase()
; 690  : 		{	// construct from _Count * value_type()
; 691  : 		if (_Buy(_Count))
; 692  : 			{	// nonzero, fill it
; 693  : 			_Alty _Alval(this->_Getal());
; 694  : 			_TRY_BEGIN
; 695  : 			_Uninitialized_default_fill_n(this->_Myfirst, _Count, _Alval);
; 696  : 			this->_Mylast += _Count;
; 697  : 			_CATCH_ALL
; 698  : 			_Tidy();
; 699  : 			_RERAISE;
; 700  : 			_CATCH_END
; 701  : 			}
; 702  : 		}
; 703  : 
; 704  : 	vector(size_type _Count, const value_type& _Val)
; 705  : 		: _Mybase()
; 706  : 		{	// construct from _Count * _Val
; 707  : 		_Construct_n(_Count, _STD addressof(_Val));
; 708  : 		}
; 709  : 
; 710  : 	vector(size_type _Count, const value_type& _Val, const _Alloc& _Al)
; 711  : 		: _Mybase(_Al)
; 712  : 		{	// construct from _Count * _Val, allocator
; 713  : 		_Construct_n(_Count, _STD addressof(_Val));
; 714  : 		}
; 715  : 
; 716  : 	vector(const _Myt& _Right)
; 717  : 
; 718  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 719  : 
; 720  : 
; 721  : 		{	// construct by copying _Right
; 722  : 		if (_Buy(_Right.size()))
; 723  : 			_TRY_BEGIN
; 724  : 			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
; 725  : 				this->_Myfirst);
; 726  : 			_CATCH_ALL
; 727  : 			_Tidy();
; 728  : 			_RERAISE;
; 729  : 			_CATCH_END
; 730  : 		}
; 731  : 
; 732  : 	vector(const _Myt& _Right, const _Alloc& _Al)
; 733  : 		: _Mybase(_Al)
; 734  : 		{	// construct by copying _Right, allocator
; 735  : 		if (_Buy(_Right.size()))
; 736  : 			_TRY_BEGIN
; 737  : 			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
; 738  : 				this->_Myfirst);
; 739  : 			_CATCH_ALL
; 740  : 			_Tidy();
; 741  : 			_RERAISE;
; 742  : 			_CATCH_END
; 743  : 		}
; 744  : 
; 745  : 	template<class _Iter,
; 746  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 747  : 			void>:: type>
; 748  : 		vector(_Iter _First, _Iter _Last)
; 749  : 		: _Mybase()
; 750  : 		{	// construct from [_First, _Last)
; 751  : 		_Construct(_First, _Last);
; 752  : 		}
; 753  : 
; 754  : 	template<class _Iter,
; 755  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 756  : 			void>:: type>
; 757  : 		vector(_Iter _First, _Iter _Last, const _Alloc& _Al)
; 758  : 		: _Mybase(_Al)
; 759  : 		{	// construct from [_First, _Last) with allocator
; 760  : 		_Construct(_First, _Last);
; 761  : 		}
; 762  : 
; 763  : 	template<class _Iter>
; 764  : 		void _Construct(_Iter _First, _Iter _Last)
; 765  : 		{	// initialize with [_First, _Last)
; 766  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 767  : 		}
; 768  : 
; 769  : 	template<class _Iter>
; 770  : 		void _Construct(_Iter _First, _Iter _Last, input_iterator_tag)
; 771  : 		{	// initialize with [_First, _Last), input iterators
; 772  : 		_TRY_BEGIN
; 773  : 
; 774  : 		for (; _First != _Last; ++_First)
; 775  : 			emplace_back(*_First);
; 776  : 
; 777  : 		_CATCH_ALL
; 778  : 		_Tidy();
; 779  : 		_RERAISE;
; 780  : 		_CATCH_END
; 781  : 		}
; 782  : 
; 783  : 	template<class _Iter>
; 784  : 		void _Construct(_Iter _First, _Iter _Last, forward_iterator_tag)
; 785  : 		{	// initialize with [_First, _Last), forward iterators
; 786  : 		if (_Buy(_STD distance(_First, _Last)))
; 787  : 			{	// nonzero, fill it
; 788  : 			_TRY_BEGIN
; 789  : 			this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
; 790  : 			_CATCH_ALL
; 791  : 			_Tidy();
; 792  : 			_RERAISE;
; 793  : 			_CATCH_END
; 794  : 			}
; 795  : 		}
; 796  : 
; 797  : 	void _Construct_n(size_type _Count, const value_type *_Pval)
; 798  : 		{	// construct from _Count * *_Pval
; 799  : 		if (_Buy(_Count))
; 800  : 			{	// nonzero, fill it
; 801  : 			_TRY_BEGIN
; 802  : 			this->_Mylast = _Ufill(this->_Myfirst, _Count, _Pval);
; 803  : 			_CATCH_ALL
; 804  : 			_Tidy();
; 805  : 			_RERAISE;
; 806  : 			_CATCH_END
; 807  : 			}
; 808  : 		}
; 809  : 
; 810  : 	vector(_Myt&& _Right)
; 811  : 		: _Mybase(_Right._Getal())
; 812  : 		{	// construct by moving _Right
; 813  : 		_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 814  : 		}
; 815  : 
; 816  : 	vector(_Myt&& _Right, const _Alloc& _Al)
; 817  : 		: _Mybase(_Al)
; 818  : 		{	// construct by moving _Right, allocator
; 819  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 820  : 		}
; 821  : 
; 822  : 	_Myt& operator=(_Myt&& _Right)
; 823  : 		{	// assign by moving _Right
; 824  : 		if (this != &_Right)
; 825  : 			{	// different, assign it
; 826  : 			_Tidy();
; 827  : 			if (_Alty::propagate_on_container_move_assignment::value
; 828  : 				&& this->_Getal() != _Right._Getal())
; 829  : 				this->_Change_alloc(_Right._Getal());
; 830  : 
; 831  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 832  : 			}
; 833  : 		return (*this);
; 834  : 		}
; 835  : 
; 836  : 	void _Assign_rv(_Myt&& _Right, true_type)
; 837  : 		{	// move from _Right, stealing its contents
; 838  : 		this->_Swap_all((_Myt&)_Right);
; 839  : 		this->_Myfirst = _Right._Myfirst;
; 840  : 		this->_Mylast = _Right._Mylast;
; 841  : 		this->_Myend = _Right._Myend;
; 842  : 
; 843  : 		_Right._Myfirst = pointer();
; 844  : 		_Right._Mylast = pointer();
; 845  : 		_Right._Myend = pointer();
; 846  : 		}
; 847  : 
; 848  : 	void _Assign_rv(_Myt&& _Right, false_type)
; 849  : 		{	// move from _Right, possibly moving its contents
; 850  : 		if (get_allocator() == _Right.get_allocator())
; 851  : 			_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 852  : 		else
; 853  : 			_Construct(_STD make_move_iterator(_Right.begin()),
; 854  : 				_STD make_move_iterator(_Right.end()));
; 855  : 		}
; 856  : 
; 857  : 	void _Assign_rv(_Myt&& _Right)
; 858  : 		{	// assign by moving _Right
; 859  : 		_Assign_rv(_STD forward<_Myt>(_Right),
; 860  : 			typename _Alty::propagate_on_container_move_assignment());
; 861  : 		}
; 862  : 
; 863  : 
; 864  : 	void push_back(value_type&& _Val)
; 865  : 		{	// insert by moving into element at end
; 866  : 		if (_Inside(_STD addressof(_Val)))
; 867  : 			{	// push back an element
; 868  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00bcc	2b c8		 sub	 ecx, eax
  00bce	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00bd3	f7 e9		 imul	 ecx
  00bd5	03 d1		 add	 edx, ecx
  00bd7	c1 fa 07	 sar	 edx, 7
  00bda	8b f2		 mov	 esi, edx
  00bdc	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00bdf	03 f2		 add	 esi, edx
  00be1	89 b5 24 fe ff
	ff		 mov	 DWORD PTR __Idx$1$[ebp], esi

; 869  : 			if (this->_Mylast == this->_Myend)

  00be7	8b b5 04 fe ff
	ff		 mov	 esi, DWORD PTR _VSVector$2$[ebp]
  00bed	3b fe		 cmp	 edi, esi
  00bef	0f 85 9b 00 00
	00		 jne	 $LN496@Render

; 1011 : 		}
; 1012 : 
; 1013 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1014 : 		{	// micro-optimization for capacity() - size()
; 1015 : 		return (this->_Myend - this->_Mylast);

  00bf5	8b ce		 mov	 ecx, esi
  00bf7	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00bfc	2b cf		 sub	 ecx, edi
  00bfe	f7 e9		 imul	 ecx
  00c00	03 d1		 add	 edx, ecx
  00c02	c1 fa 07	 sar	 edx, 7
  00c05	8b c2		 mov	 eax, edx
  00c07	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00c0a	03 c2		 add	 eax, edx

; 1584 : 		}
; 1585 : 
; 1586 : 	void _Reallocate(size_type _Count)
; 1587 : 		{	// move to array of exactly _Count elements
; 1588 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1589 : 
; 1590 : 		_TRY_BEGIN
; 1591 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);
; 1592 : 		_CATCH_ALL
; 1593 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1594 : 		_RERAISE;
; 1595 : 		_CATCH_END
; 1596 : 
; 1597 : 		size_type _Size = size();
; 1598 : 		if (this->_Myfirst != pointer())
; 1599 : 			{	// destroy and deallocate old array
; 1600 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1601 : 			this->_Getal().deallocate(this->_Myfirst,
; 1602 : 				this->_Myend - this->_Myfirst);
; 1603 : 			}
; 1604 : 
; 1605 : 		this->_Orphan_all();
; 1606 : 		this->_Myend = _Ptr + _Count;
; 1607 : 		this->_Mylast = _Ptr + _Size;
; 1608 : 		this->_Myfirst = _Ptr;
; 1609 : 		}
; 1610 : 
; 1611 : 	void _Reserve(size_type _Count)
; 1612 : 		{	// ensure room for _Count new elements, grow exponentially
; 1613 : 		if (_Unused_capacity() < _Count)

  00c0c	83 f8 01	 cmp	 eax, 1
  00c0f	73 7f		 jae	 SHORT $LN496@Render

; 1016 : 		}
; 1017 : 
; 1018 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1019 : 		{	// micro-optimization for capacity() != size()
; 1020 : 		return (this->_Myend != this->_Mylast);
; 1021 : 		}
; 1022 : 
; 1023 : 	iterator begin() _NOEXCEPT
; 1024 : 		{	// return iterator for beginning of mutable sequence
; 1025 : 		return (iterator(this->_Myfirst, this));
; 1026 : 		}
; 1027 : 
; 1028 : 	const_iterator begin() const _NOEXCEPT
; 1029 : 		{	// return iterator for beginning of nonmutable sequence
; 1030 : 		return (const_iterator(this->_Myfirst, this));
; 1031 : 		}
; 1032 : 
; 1033 : 	iterator end() _NOEXCEPT
; 1034 : 		{	// return iterator for end of mutable sequence
; 1035 : 		return (iterator(this->_Mylast, this));
; 1036 : 		}
; 1037 : 
; 1038 : 	const_iterator end() const _NOEXCEPT
; 1039 : 		{	// return iterator for end of nonmutable sequence
; 1040 : 		return (const_iterator(this->_Mylast, this));
; 1041 : 		}
; 1042 : 
; 1043 : 	iterator _Make_iter(const_iterator _Where) const
; 1044 : 		{	// make iterator from const_iterator
; 1045 : 		return (iterator(_Where._Ptr, this));
; 1046 : 		}
; 1047 : 
; 1048 : 	reverse_iterator rbegin() _NOEXCEPT
; 1049 : 		{	// return iterator for beginning of reversed mutable sequence
; 1050 : 		return (reverse_iterator(end()));
; 1051 : 		}
; 1052 : 
; 1053 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1054 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1055 : 		return (const_reverse_iterator(end()));
; 1056 : 		}
; 1057 : 
; 1058 : 	reverse_iterator rend() _NOEXCEPT
; 1059 : 		{	// return iterator for end of reversed mutable sequence
; 1060 : 		return (reverse_iterator(begin()));
; 1061 : 		}
; 1062 : 
; 1063 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1064 : 		{	// return iterator for end of reversed nonmutable sequence
; 1065 : 		return (const_reverse_iterator(begin()));
; 1066 : 		}
; 1067 : 
; 1068 : 	const_iterator cbegin() const _NOEXCEPT
; 1069 : 		{	// return iterator for beginning of nonmutable sequence
; 1070 : 		return (((const _Myt *)this)->begin());
; 1071 : 		}
; 1072 : 
; 1073 : 	const_iterator cend() const _NOEXCEPT
; 1074 : 		{	// return iterator for end of nonmutable sequence
; 1075 : 		return (((const _Myt *)this)->end());
; 1076 : 		}
; 1077 : 
; 1078 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1079 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1080 : 		return (((const _Myt *)this)->rbegin());
; 1081 : 		}
; 1082 : 
; 1083 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1084 : 		{	// return iterator for end of reversed nonmutable sequence
; 1085 : 		return (((const _Myt *)this)->rend());
; 1086 : 		}
; 1087 : 
; 1088 : 	void shrink_to_fit()
; 1089 : 		{	// reduce capacity
; 1090 : 		if (_Has_unused_capacity())
; 1091 : 			{	// worth shrinking, do it
; 1092 : 			if (empty())
; 1093 : 				_Tidy();
; 1094 : 			else
; 1095 : 				_Reallocate(size());
; 1096 : 			}
; 1097 : 		}
; 1098 : 
; 1099 : 	void resize(size_type _Newsize)
; 1100 : 		{	// determine new length, padding as needed
; 1101 : 		if (_Newsize < size())
; 1102 : 			_Pop_back_n(size() - _Newsize);
; 1103 : 		else if (size() < _Newsize)
; 1104 : 			{	// pad as needed
; 1105 : 			_Alty _Alval(this->_Getal());
; 1106 : 			_Reserve(_Newsize - size());
; 1107 : 			_TRY_BEGIN
; 1108 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1109 : 				_Alval);
; 1110 : 			_CATCH_ALL
; 1111 : 			_Tidy();
; 1112 : 			_RERAISE;
; 1113 : 			_CATCH_END
; 1114 : 			this->_Mylast += _Newsize - size();
; 1115 : 			}
; 1116 : 		}
; 1117 : 
; 1118 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1119 : 		{	// determine new length, padding with _Val elements as needed
; 1120 : 		if (_Newsize < size())
; 1121 : 			_Pop_back_n(size() - _Newsize);
; 1122 : 		else if (size() < _Newsize)
; 1123 : 			{	// pad as needed
; 1124 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1125 : 
; 1126 : 			if (_Inside(_Ptr))
; 1127 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1128 : 				const difference_type _Idx = _Ptr
; 1129 : 					- _STD addressof(*this->_Myfirst);
; 1130 : 				_Reserve(_Newsize - size());
; 1131 : 				_Ptr = _STD addressof(*this->_Myfirst) + _Idx;
; 1132 : 				}
; 1133 : 			else
; 1134 : 				_Reserve(_Newsize - size());
; 1135 : 
; 1136 : 			_TRY_BEGIN
; 1137 : 			_Ufill(this->_Mylast, _Newsize - size(), _Ptr);
; 1138 : 			_CATCH_ALL
; 1139 : 			_Tidy();
; 1140 : 			_RERAISE;
; 1141 : 			_CATCH_END
; 1142 : 			this->_Mylast += _Newsize - size();
; 1143 : 			}
; 1144 : 		}
; 1145 : 
; 1146 : 	size_type size() const _NOEXCEPT
; 1147 : 		{	// return length of sequence
; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00c11	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _VSVector$[ebp]
  00c17	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00c1c	2b f9		 sub	 edi, ecx
  00c1e	f7 ef		 imul	 edi

; 1614 : 			{	// need more room, try to get it
; 1615 : 			if (max_size() - size() < _Count)

  00c20	b8 91 cf ba 01	 mov	 eax, 29020049		; 01bacf91H

; 1016 : 		}
; 1017 : 
; 1018 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1019 : 		{	// micro-optimization for capacity() != size()
; 1020 : 		return (this->_Myend != this->_Mylast);
; 1021 : 		}
; 1022 : 
; 1023 : 	iterator begin() _NOEXCEPT
; 1024 : 		{	// return iterator for beginning of mutable sequence
; 1025 : 		return (iterator(this->_Myfirst, this));
; 1026 : 		}
; 1027 : 
; 1028 : 	const_iterator begin() const _NOEXCEPT
; 1029 : 		{	// return iterator for beginning of nonmutable sequence
; 1030 : 		return (const_iterator(this->_Myfirst, this));
; 1031 : 		}
; 1032 : 
; 1033 : 	iterator end() _NOEXCEPT
; 1034 : 		{	// return iterator for end of mutable sequence
; 1035 : 		return (iterator(this->_Mylast, this));
; 1036 : 		}
; 1037 : 
; 1038 : 	const_iterator end() const _NOEXCEPT
; 1039 : 		{	// return iterator for end of nonmutable sequence
; 1040 : 		return (const_iterator(this->_Mylast, this));
; 1041 : 		}
; 1042 : 
; 1043 : 	iterator _Make_iter(const_iterator _Where) const
; 1044 : 		{	// make iterator from const_iterator
; 1045 : 		return (iterator(_Where._Ptr, this));
; 1046 : 		}
; 1047 : 
; 1048 : 	reverse_iterator rbegin() _NOEXCEPT
; 1049 : 		{	// return iterator for beginning of reversed mutable sequence
; 1050 : 		return (reverse_iterator(end()));
; 1051 : 		}
; 1052 : 
; 1053 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1054 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1055 : 		return (const_reverse_iterator(end()));
; 1056 : 		}
; 1057 : 
; 1058 : 	reverse_iterator rend() _NOEXCEPT
; 1059 : 		{	// return iterator for end of reversed mutable sequence
; 1060 : 		return (reverse_iterator(begin()));
; 1061 : 		}
; 1062 : 
; 1063 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1064 : 		{	// return iterator for end of reversed nonmutable sequence
; 1065 : 		return (const_reverse_iterator(begin()));
; 1066 : 		}
; 1067 : 
; 1068 : 	const_iterator cbegin() const _NOEXCEPT
; 1069 : 		{	// return iterator for beginning of nonmutable sequence
; 1070 : 		return (((const _Myt *)this)->begin());
; 1071 : 		}
; 1072 : 
; 1073 : 	const_iterator cend() const _NOEXCEPT
; 1074 : 		{	// return iterator for end of nonmutable sequence
; 1075 : 		return (((const _Myt *)this)->end());
; 1076 : 		}
; 1077 : 
; 1078 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1079 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1080 : 		return (((const _Myt *)this)->rbegin());
; 1081 : 		}
; 1082 : 
; 1083 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1084 : 		{	// return iterator for end of reversed nonmutable sequence
; 1085 : 		return (((const _Myt *)this)->rend());
; 1086 : 		}
; 1087 : 
; 1088 : 	void shrink_to_fit()
; 1089 : 		{	// reduce capacity
; 1090 : 		if (_Has_unused_capacity())
; 1091 : 			{	// worth shrinking, do it
; 1092 : 			if (empty())
; 1093 : 				_Tidy();
; 1094 : 			else
; 1095 : 				_Reallocate(size());
; 1096 : 			}
; 1097 : 		}
; 1098 : 
; 1099 : 	void resize(size_type _Newsize)
; 1100 : 		{	// determine new length, padding as needed
; 1101 : 		if (_Newsize < size())
; 1102 : 			_Pop_back_n(size() - _Newsize);
; 1103 : 		else if (size() < _Newsize)
; 1104 : 			{	// pad as needed
; 1105 : 			_Alty _Alval(this->_Getal());
; 1106 : 			_Reserve(_Newsize - size());
; 1107 : 			_TRY_BEGIN
; 1108 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1109 : 				_Alval);
; 1110 : 			_CATCH_ALL
; 1111 : 			_Tidy();
; 1112 : 			_RERAISE;
; 1113 : 			_CATCH_END
; 1114 : 			this->_Mylast += _Newsize - size();
; 1115 : 			}
; 1116 : 		}
; 1117 : 
; 1118 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1119 : 		{	// determine new length, padding with _Val elements as needed
; 1120 : 		if (_Newsize < size())
; 1121 : 			_Pop_back_n(size() - _Newsize);
; 1122 : 		else if (size() < _Newsize)
; 1123 : 			{	// pad as needed
; 1124 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1125 : 
; 1126 : 			if (_Inside(_Ptr))
; 1127 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1128 : 				const difference_type _Idx = _Ptr
; 1129 : 					- _STD addressof(*this->_Myfirst);
; 1130 : 				_Reserve(_Newsize - size());
; 1131 : 				_Ptr = _STD addressof(*this->_Myfirst) + _Idx;
; 1132 : 				}
; 1133 : 			else
; 1134 : 				_Reserve(_Newsize - size());
; 1135 : 
; 1136 : 			_TRY_BEGIN
; 1137 : 			_Ufill(this->_Mylast, _Newsize - size(), _Ptr);
; 1138 : 			_CATCH_ALL
; 1139 : 			_Tidy();
; 1140 : 			_RERAISE;
; 1141 : 			_CATCH_END
; 1142 : 			this->_Mylast += _Newsize - size();
; 1143 : 			}
; 1144 : 		}
; 1145 : 
; 1146 : 	size_type size() const _NOEXCEPT
; 1147 : 		{	// return length of sequence
; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00c25	03 d7		 add	 edx, edi
  00c27	c1 fa 07	 sar	 edx, 7
  00c2a	8b fa		 mov	 edi, edx
  00c2c	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00c2f	03 fa		 add	 edi, edx

; 1614 : 			{	// need more room, try to get it
; 1615 : 			if (max_size() - size() < _Count)

  00c31	2b c7		 sub	 eax, edi
  00c33	83 f8 01	 cmp	 eax, 1
  00c36	0f 82 74 01 00
	00		 jb	 $LN746@Render

; 884  : 			}
; 885  : 		}
; 886  : 
; 887  : 	iterator insert(const_iterator _Where, _Ty&& _Val)
; 888  : 		{	// insert by moving _Val at _Where
; 889  : 		return (emplace(_Where, _STD move(_Val)));
; 890  : 		}
; 891  : 
; 892  : 	template<class... _Valty>
; 893  : 		void emplace_back(_Valty&&... _Val)
; 894  : 		{	// insert by moving into element at end
; 895  : 		if (this->_Mylast == this->_Myend)
; 896  : 			_Reserve(1);
; 897  : 		_Orphan_range(this->_Mylast, this->_Mylast);
; 898  : 		this->_Getal().construct(this->_Mylast,
; 899  : 			_STD forward<_Valty>(_Val)...);
; 900  : 		++this->_Mylast;
; 901  : 		}
; 902  : 
; 903  : 	template<class... _Valty>
; 904  : 		iterator emplace(const_iterator _Where, _Valty&&... _Val)
; 905  : 		{	// insert by moving _Val at _Where
; 906  : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 907  : 
; 908  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 909  : 		if (size() < _Off)
; 910  : 			_DEBUG_ERROR("vector emplace iterator outside range");
; 911  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 912  : 
; 913  : 		emplace_back(_STD forward<_Valty>(_Val)...);
; 914  : 		_STD rotate(begin() + _Off, end() - 1, end());
; 915  : 		return (begin() + _Off);
; 916  : 		}
; 917  : 
; 918  : 
; 919  : 	vector(_XSTD initializer_list<value_type> _Ilist,
; 920  : 		const _Alloc& _Al = allocator_type())
; 921  : 		: _Mybase(_Al)
; 922  : 		{	// construct from initializer_list
; 923  : 		insert(begin(), _Ilist.begin(), _Ilist.end());
; 924  : 		}
; 925  : 
; 926  : 	_Myt& operator=(_XSTD initializer_list<value_type> _Ilist)
; 927  : 		{	// assign initializer_list
; 928  : 		assign(_Ilist.begin(), _Ilist.end());
; 929  : 		return (*this);
; 930  : 		}
; 931  : 
; 932  : 	void assign(_XSTD initializer_list<value_type> _Ilist)
; 933  : 		{	// assign initializer_list
; 934  : 		assign(_Ilist.begin(), _Ilist.end());
; 935  : 		}
; 936  : 
; 937  : 	iterator insert(const_iterator _Where,
; 938  : 		_XSTD initializer_list<value_type> _Ilist)
; 939  : 		{	// insert initializer_list
; 940  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 941  : 		}
; 942  : 
; 943  : 	~vector() _NOEXCEPT
; 944  : 		{	// destroy the object
; 945  : 		_Tidy();
; 946  : 		}
; 947  : 
; 948  : 	_Myt& operator=(const _Myt& _Right)
; 949  : 		{	// assign _Right
; 950  : 		if (this != &_Right)
; 951  : 			{	// different, assign it
; 952  : 			if (this->_Getal() != _Right._Getal()
; 953  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 954  : 				{	// change allocator before copying
; 955  : 				_Tidy();
; 956  : 				this->_Change_alloc(_Right._Getal());
; 957  : 				}
; 958  : 
; 959  : 			this->_Orphan_all();
; 960  : 
; 961  : 			if (_Right.empty())
; 962  : 				clear();	// new sequence empty, erase existing sequence
; 963  : 			else if (_Right.size() <= size())
; 964  : 				{	// enough elements, copy new and destroy old
; 965  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst,
; 966  : 					_Right._Mylast, this->_Myfirst);	// copy new
; 967  : 				_Destroy(_Ptr, this->_Mylast);	// destroy old
; 968  : 				this->_Mylast = this->_Myfirst + _Right.size();
; 969  : 				}
; 970  : 			else if (_Right.size() <= capacity())
; 971  : 				{	// enough room, copy and construct new
; 972  : 				pointer _Ptr = _Right._Myfirst + size();
; 973  : 				_Copy_impl(_Right._Myfirst,
; 974  : 					_Ptr, this->_Myfirst);
; 975  : 				this->_Mylast = _Ucopy(_Ptr, _Right._Mylast, this->_Mylast);
; 976  : 				}
; 977  : 			else
; 978  : 				{	// not enough room, allocate new array and construct new
; 979  : 				if (this->_Myfirst != pointer())
; 980  : 					{	// discard old array
; 981  : 					_Destroy(this->_Myfirst, this->_Mylast);
; 982  : 					this->_Getal().deallocate(this->_Myfirst,
; 983  : 						this->_Myend - this->_Myfirst);
; 984  : 					}
; 985  : 				if (_Buy(_Right.size()))
; 986  : 					_TRY_BEGIN
; 987  : 					this->_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 988  : 						this->_Myfirst);
; 989  : 					_CATCH_ALL
; 990  : 					_Tidy();
; 991  : 					_RERAISE;
; 992  : 					_CATCH_END
; 993  : 				}
; 994  : 			}
; 995  : 		return (*this);
; 996  : 		}
; 997  : 
; 998  : 	void reserve(size_type _Count)
; 999  : 		{	// determine new minimum length of allocated storage
; 1000 : 		if (capacity() < _Count)
; 1001 : 			{	// something to do, check and reallocate
; 1002 : 			if (max_size() < _Count)
; 1003 : 				_Xlen();
; 1004 : 			_Reallocate(_Count);
; 1005 : 			}
; 1006 : 		}
; 1007 : 
; 1008 : 	size_type capacity() const _NOEXCEPT
; 1009 : 		{	// return current length of allocated storage
; 1010 : 		return (this->_Myend - this->_Myfirst);

  00c3c	2b f1		 sub	 esi, ecx
  00c3e	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00c43	f7 ee		 imul	 esi

; 1149 : 		}
; 1150 : 
; 1151 : 	size_type max_size() const _NOEXCEPT
; 1152 : 		{	// return maximum possible length of sequence
; 1153 : 		return (this->_Getal().max_size());
; 1154 : 		}
; 1155 : 
; 1156 : 	bool empty() const _NOEXCEPT
; 1157 : 		{	// test if sequence is empty
; 1158 : 		return (this->_Myfirst == this->_Mylast);
; 1159 : 		}
; 1160 : 
; 1161 : 	_Alloc get_allocator() const _NOEXCEPT
; 1162 : 		{	// return allocator object for values
; 1163 : 		return (this->_Getal());
; 1164 : 		}
; 1165 : 
; 1166 : 	const_reference at(size_type _Pos) const
; 1167 : 		{	// subscript nonmutable sequence with checking
; 1168 : 		if (size() <= _Pos)
; 1169 : 			_Xran();
; 1170 : 		return (*(this->_Myfirst + _Pos));
; 1171 : 		}
; 1172 : 
; 1173 : 	reference at(size_type _Pos)
; 1174 : 		{	// subscript mutable sequence with checking
; 1175 : 		if (size() <= _Pos)
; 1176 : 			_Xran();
; 1177 : 		return (*(this->_Myfirst + _Pos));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reference operator[](size_type _Pos) const
; 1181 : 		{	// subscript nonmutable sequence
; 1182 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1183 : 		if (size() <= _Pos)
; 1184 : 			{	// report error
; 1185 : 			_DEBUG_ERROR("vector subscript out of range");
; 1186 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1187 : 			}
; 1188 : 
; 1189 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1190 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1191 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1192 : 
; 1193 : 		return (*(this->_Myfirst + _Pos));
; 1194 : 		}
; 1195 : 
; 1196 : 	reference operator[](size_type _Pos)
; 1197 : 		{	// subscript mutable sequence
; 1198 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1199 : 		if (size() <= _Pos)
; 1200 : 			{	// report error
; 1201 : 			_DEBUG_ERROR("vector subscript out of range");
; 1202 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1203 : 			}
; 1204 : 
; 1205 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1206 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1207 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1208 : 
; 1209 : 		return (*(this->_Myfirst + _Pos));
; 1210 : 		}
; 1211 : 
; 1212 : 	pointer data() _NOEXCEPT
; 1213 : 		{	// return address of first element
; 1214 : 		return (this->_Myfirst);
; 1215 : 		}
; 1216 : 
; 1217 : 	const_pointer data() const _NOEXCEPT
; 1218 : 		{	// return address of first element
; 1219 : 		return (this->_Myfirst);
; 1220 : 		}
; 1221 : 
; 1222 : 	reference front()
; 1223 : 		{	// return first element of mutable sequence
; 1224 : 		return (*begin());
; 1225 : 		}
; 1226 : 
; 1227 : 	const_reference front() const
; 1228 : 		{	// return first element of nonmutable sequence
; 1229 : 		return (*begin());
; 1230 : 		}
; 1231 : 
; 1232 : 	reference back()
; 1233 : 		{	// return last element of mutable sequence
; 1234 : 		return (*(end() - 1));
; 1235 : 		}
; 1236 : 
; 1237 : 	const_reference back() const
; 1238 : 		{	// return last element of nonmutable sequence
; 1239 : 		return (*(end() - 1));
; 1240 : 		}
; 1241 : 
; 1242 : 	void push_back(const value_type& _Val)
; 1243 : 		{	// insert element at end
; 1244 : 		if (_Inside(_STD addressof(_Val)))
; 1245 : 			{	// push back an element
; 1246 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1247 : 			if (this->_Mylast == this->_Myend)
; 1248 : 				_Reserve(1);
; 1249 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1250 : 			this->_Getal().construct(this->_Mylast,
; 1251 : 				this->_Myfirst[_Idx]);
; 1252 : 			++this->_Mylast;
; 1253 : 			}
; 1254 : 		else
; 1255 : 			{	// push back a non-element
; 1256 : 			if (this->_Mylast == this->_Myend)
; 1257 : 				_Reserve(1);
; 1258 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1259 : 			this->_Getal().construct(this->_Mylast,
; 1260 : 				_Val);
; 1261 : 			++this->_Mylast;
; 1262 : 			}
; 1263 : 		}
; 1264 : 
; 1265 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1266 : 	void pop_back()
; 1267 : 		{	// erase element at end
; 1268 : 		if (empty())
; 1269 : 			_DEBUG_ERROR("vector empty before pop");
; 1270 : 		else
; 1271 : 			{	// erase last element
; 1272 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1273 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1274 : 			--this->_Mylast;
; 1275 : 			}
; 1276 : 		}
; 1277 : 
; 1278 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1279 : 	void pop_back()
; 1280 : 		{	// erase element at end
; 1281 : 		this->_Getal().destroy(this->_Mylast - 1);
; 1282 : 		--this->_Mylast;
; 1283 : 		}
; 1284 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1285 : 
; 1286 : 	template<class _Iter>
; 1287 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1288 : 			void>::type
; 1289 : 		assign(_Iter _First, _Iter _Last)
; 1290 : 		{	// assign [_First, _Last)
; 1291 : 		clear();
; 1292 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1293 : 		}
; 1294 : 
; 1295 : 	template<class _Iter>
; 1296 : 		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
; 1297 : 		{	// assign [_First, _Last), input iterators
; 1298 : 		for (; _First != _Last; ++_First)
; 1299 : 			emplace_back(*_First);
; 1300 : 		}
; 1301 : 
; 1302 : 	template<class _Iter>
; 1303 : 		void _Assign(_Iter _First, _Iter _Last, forward_iterator_tag)
; 1304 : 		{	// assign [_First, _Last), forward iterators
; 1305 : 		if (_First == _Last)
; 1306 : 			return;	// nothing to do
; 1307 : 
; 1308 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1309 : 
; 1310 : 		if (capacity() < _Newsize)
; 1311 : 			{	// need more room, try to get it
; 1312 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1313 : 			_Tidy();
; 1314 : 			_Buy(_Newcapacity);
; 1315 : 			}
; 1316 : 
; 1317 : 		this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
; 1318 : 		}
; 1319 : 
; 1320 : 	void assign(size_type _Count, const value_type& _Val)
; 1321 : 		{	// assign _Count * _Val
; 1322 : 		clear();
; 1323 : 		insert(begin(), _Count, _Val);
; 1324 : 		}
; 1325 : 
; 1326 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1327 : 		{	// insert _Val at _Where
; 1328 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1329 : 		}
; 1330 : 
; 1331 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1332 : 		const _Ty& _Val)
; 1333 : 		{	// insert _Count * _Val at _Where
; 1334 : 		return (_Insert_n(_Where, _Count, _Val));
; 1335 : 		}
; 1336 : 
; 1337 : 	template<class _Iter>
; 1338 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1339 : 			iterator>::type
; 1340 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1341 : 		{	// insert [_First, _Last) at _Where
; 1342 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1343 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1344 : 		return (begin() + _Off);
; 1345 : 		}
; 1346 : 
; 1347 : 	template<class _Iter>
; 1348 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1349 : 			input_iterator_tag)
; 1350 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1351 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1352 : 
; 1353 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1354 : 		if (size() < _Off)
; 1355 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1356 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1357 : 
; 1358 : 		if (_First != _Last)
; 1359 : 			{	// worth doing, gather at end and rotate into place
; 1360 : 			size_type _Oldsize = size();
; 1361 : 
; 1362 : 			_TRY_BEGIN
; 1363 : 			for (; _First != _Last; ++_First)
; 1364 : 				push_back(*_First);	// append
; 1365 : 
; 1366 : 			_CATCH_ALL
; 1367 : 			erase(begin() + _Oldsize, end());
; 1368 : 			_RERAISE;
; 1369 : 			_CATCH_END
; 1370 : 
; 1371 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1372 : 			}
; 1373 : 		}
; 1374 : 
; 1375 : 	template<class _Iter>
; 1376 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1377 : 			forward_iterator_tag)
; 1378 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_VICONT(_Where) != this
; 1381 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1382 : 			|| this->_Mylast < _VIPTR(_Where))
; 1383 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1384 : 		_DEBUG_RANGE(_First, _Last);
; 1385 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1386 : 
; 1387 : 		size_type _Count = 0;
; 1388 : 		_Distance(_First, _Last, _Count);
; 1389 : 
; 1390 : 		if (_Count == 0)
; 1391 : 			;
; 1392 : 		else if (_Unused_capacity() < _Count)
; 1393 : 			{	// not enough room, reallocate
; 1394 : 			if (max_size() - size() < _Count)
; 1395 : 				_Xlen();	// result too long
; 1396 : 
; 1397 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1398 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1399 : 			pointer _Ptr = _Newvec;
; 1400 : 
; 1401 : 			_TRY_BEGIN
; 1402 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1403 : 				_Newvec);	// copy prefix
; 1404 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1405 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1406 : 				_Ptr);	// copy suffix
; 1407 : 			_CATCH_ALL
; 1408 : 			_Destroy(_Newvec, _Ptr);
; 1409 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1410 : 			_RERAISE;
; 1411 : 			_CATCH_END
; 1412 : 
; 1413 : 			_Count += size();
; 1414 : 			if (this->_Myfirst != pointer())
; 1415 : 				{	// destroy and deallocate old array
; 1416 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1417 : 				this->_Getal().deallocate(this->_Myfirst,
; 1418 : 					this->_Myend - this->_Myfirst);
; 1419 : 				}
; 1420 : 
; 1421 : 			this->_Orphan_all();
; 1422 : 			this->_Myend = _Newvec + _Capacity;
; 1423 : 			this->_Mylast = _Newvec + _Count;
; 1424 : 			this->_Myfirst = _Newvec;
; 1425 : 			}
; 1426 : 		else
; 1427 : 			{	// new stuff fits, append and rotate into place
; 1428 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1429 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1430 : 				this->_Mylast + _Count);
; 1431 : 			this->_Mylast += _Count;
; 1432 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1433 : 			}
; 1434 : 		}
; 1435 : 
; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 	iterator erase(const_iterator _Where)
; 1438 : 		{	// erase element at where
; 1439 : 		if (_VICONT(_Where) != this
; 1440 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1441 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1442 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1443 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1444 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1445 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1446 : 		--this->_Mylast;
; 1447 : 		return (_Make_iter(_Where));
; 1448 : 		}
; 1449 : 
; 1450 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 	iterator erase(const_iterator _Where)
; 1452 : 		{	// erase element at where
; 1453 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1454 : 			_VIPTR(_Where));
; 1455 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1456 : 		--this->_Mylast;
; 1457 : 		return (_Make_iter(_Where));
; 1458 : 		}
; 1459 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1460 : 
; 1461 : 	iterator erase(const_iterator _First_arg,
; 1462 : 		const_iterator _Last_arg)
; 1463 : 		{	// erase [_First, _Last)
; 1464 : 		if (_First_arg == begin() && _Last_arg == end())
; 1465 : 			clear();
; 1466 : 		else if (_First_arg != _Last_arg)
; 1467 : 			{	// clear partial
; 1468 : 			iterator _First = _Make_iter(_First_arg);
; 1469 : 			iterator _Last = _Make_iter(_Last_arg);
; 1470 : 
; 1471 : 			if (_First != _Last)
; 1472 : 				{	// worth doing, copy down over hole
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 				if (_Last < _First || _VICONT(_First) != this
; 1475 : 					|| _VIPTR(_First) < this->_Myfirst
; 1476 : 					|| this->_Mylast < _VIPTR(_Last))
; 1477 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1478 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1479 : 					_VIPTR(_First));
; 1480 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1484 : 					_VIPTR(_First));
; 1485 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1486 : 
; 1487 : 				_Destroy(_Ptr, this->_Mylast);
; 1488 : 				this->_Mylast = _Ptr;
; 1489 : 				}
; 1490 : 			}
; 1491 : 		return (_Make_iter(_First_arg));
; 1492 : 		}
; 1493 : 
; 1494 : 	void _Pop_back_n(size_type _Count)
; 1495 : 		{	// erase _Count elements at end
; 1496 : 		pointer _Ptr = this->_Mylast - _Count;
; 1497 : 
; 1498 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1499 : 		_Orphan_range(_Ptr, this->_Mylast);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 
; 1502 : 		_Destroy(_Ptr, this->_Mylast);
; 1503 : 		this->_Mylast = _Ptr;
; 1504 : 		}
; 1505 : 
; 1506 : 	void clear() _NOEXCEPT
; 1507 : 		{	// erase all
; 1508 : 		this->_Orphan_all();
; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1510 : 		this->_Mylast = this->_Myfirst;
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		{	// exchange contents with _Right
; 1515 : 		if (this == &_Right)
; 1516 : 			;	// same object, do nothing
; 1517 : 		else if (this->_Getal() == _Right._Getal())
; 1518 : 			{	// same allocator, swap control information
; 1519 : 			this->_Swap_all(_Right);
; 1520 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1521 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1522 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1529 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1530 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1531 : 			}
; 1532 : 
; 1533 : 		else
; 1534 : 			{	// containers are incompatible
; 1535 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1536 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1537 : 
; 1538 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1539 : 			_XSTD terminate();
; 1540 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1541 : 			}
; 1542 : 		}
; 1543 : 
; 1544 : protected:
; 1545 : 	bool _Buy(size_type _Capacity)
; 1546 : 		{	// allocate array with _Capacity elements
; 1547 : 		this->_Myfirst = pointer();
; 1548 : 		this->_Mylast = pointer();
; 1549 : 		this->_Myend = pointer();
; 1550 : 
; 1551 : 		if (_Capacity == 0)
; 1552 : 			return (false);
; 1553 : 		else if (max_size() < _Capacity)
; 1554 : 			_Xlen();	// result too long
; 1555 : 		else
; 1556 : 			{	// nonempty array, allocate storage
; 1557 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1558 : 			this->_Mylast = this->_Myfirst;
; 1559 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1560 : 			}
; 1561 : 		return (true);
; 1562 : 		}
; 1563 : 
; 1564 : 	void _Destroy(pointer _First, pointer _Last)
; 1565 : 		{	// destroy [_First, _Last) using allocator
; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}
; 1569 : 
; 1570 : 	size_type _Grow_to(size_type _Count) const
; 1571 : 		{	// grow by 50% or at least to _Count
; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00c45	b8 91 cf ba 01	 mov	 eax, 29020049		; 01bacf91H

; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));

  00c4a	47		 inc	 edi

; 884  : 			}
; 885  : 		}
; 886  : 
; 887  : 	iterator insert(const_iterator _Where, _Ty&& _Val)
; 888  : 		{	// insert by moving _Val at _Where
; 889  : 		return (emplace(_Where, _STD move(_Val)));
; 890  : 		}
; 891  : 
; 892  : 	template<class... _Valty>
; 893  : 		void emplace_back(_Valty&&... _Val)
; 894  : 		{	// insert by moving into element at end
; 895  : 		if (this->_Mylast == this->_Myend)
; 896  : 			_Reserve(1);
; 897  : 		_Orphan_range(this->_Mylast, this->_Mylast);
; 898  : 		this->_Getal().construct(this->_Mylast,
; 899  : 			_STD forward<_Valty>(_Val)...);
; 900  : 		++this->_Mylast;
; 901  : 		}
; 902  : 
; 903  : 	template<class... _Valty>
; 904  : 		iterator emplace(const_iterator _Where, _Valty&&... _Val)
; 905  : 		{	// insert by moving _Val at _Where
; 906  : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 907  : 
; 908  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 909  : 		if (size() < _Off)
; 910  : 			_DEBUG_ERROR("vector emplace iterator outside range");
; 911  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 912  : 
; 913  : 		emplace_back(_STD forward<_Valty>(_Val)...);
; 914  : 		_STD rotate(begin() + _Off, end() - 1, end());
; 915  : 		return (begin() + _Off);
; 916  : 		}
; 917  : 
; 918  : 
; 919  : 	vector(_XSTD initializer_list<value_type> _Ilist,
; 920  : 		const _Alloc& _Al = allocator_type())
; 921  : 		: _Mybase(_Al)
; 922  : 		{	// construct from initializer_list
; 923  : 		insert(begin(), _Ilist.begin(), _Ilist.end());
; 924  : 		}
; 925  : 
; 926  : 	_Myt& operator=(_XSTD initializer_list<value_type> _Ilist)
; 927  : 		{	// assign initializer_list
; 928  : 		assign(_Ilist.begin(), _Ilist.end());
; 929  : 		return (*this);
; 930  : 		}
; 931  : 
; 932  : 	void assign(_XSTD initializer_list<value_type> _Ilist)
; 933  : 		{	// assign initializer_list
; 934  : 		assign(_Ilist.begin(), _Ilist.end());
; 935  : 		}
; 936  : 
; 937  : 	iterator insert(const_iterator _Where,
; 938  : 		_XSTD initializer_list<value_type> _Ilist)
; 939  : 		{	// insert initializer_list
; 940  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 941  : 		}
; 942  : 
; 943  : 	~vector() _NOEXCEPT
; 944  : 		{	// destroy the object
; 945  : 		_Tidy();
; 946  : 		}
; 947  : 
; 948  : 	_Myt& operator=(const _Myt& _Right)
; 949  : 		{	// assign _Right
; 950  : 		if (this != &_Right)
; 951  : 			{	// different, assign it
; 952  : 			if (this->_Getal() != _Right._Getal()
; 953  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 954  : 				{	// change allocator before copying
; 955  : 				_Tidy();
; 956  : 				this->_Change_alloc(_Right._Getal());
; 957  : 				}
; 958  : 
; 959  : 			this->_Orphan_all();
; 960  : 
; 961  : 			if (_Right.empty())
; 962  : 				clear();	// new sequence empty, erase existing sequence
; 963  : 			else if (_Right.size() <= size())
; 964  : 				{	// enough elements, copy new and destroy old
; 965  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst,
; 966  : 					_Right._Mylast, this->_Myfirst);	// copy new
; 967  : 				_Destroy(_Ptr, this->_Mylast);	// destroy old
; 968  : 				this->_Mylast = this->_Myfirst + _Right.size();
; 969  : 				}
; 970  : 			else if (_Right.size() <= capacity())
; 971  : 				{	// enough room, copy and construct new
; 972  : 				pointer _Ptr = _Right._Myfirst + size();
; 973  : 				_Copy_impl(_Right._Myfirst,
; 974  : 					_Ptr, this->_Myfirst);
; 975  : 				this->_Mylast = _Ucopy(_Ptr, _Right._Mylast, this->_Mylast);
; 976  : 				}
; 977  : 			else
; 978  : 				{	// not enough room, allocate new array and construct new
; 979  : 				if (this->_Myfirst != pointer())
; 980  : 					{	// discard old array
; 981  : 					_Destroy(this->_Myfirst, this->_Mylast);
; 982  : 					this->_Getal().deallocate(this->_Myfirst,
; 983  : 						this->_Myend - this->_Myfirst);
; 984  : 					}
; 985  : 				if (_Buy(_Right.size()))
; 986  : 					_TRY_BEGIN
; 987  : 					this->_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 988  : 						this->_Myfirst);
; 989  : 					_CATCH_ALL
; 990  : 					_Tidy();
; 991  : 					_RERAISE;
; 992  : 					_CATCH_END
; 993  : 				}
; 994  : 			}
; 995  : 		return (*this);
; 996  : 		}
; 997  : 
; 998  : 	void reserve(size_type _Count)
; 999  : 		{	// determine new minimum length of allocated storage
; 1000 : 		if (capacity() < _Count)
; 1001 : 			{	// something to do, check and reallocate
; 1002 : 			if (max_size() < _Count)
; 1003 : 				_Xlen();
; 1004 : 			_Reallocate(_Count);
; 1005 : 			}
; 1006 : 		}
; 1007 : 
; 1008 : 	size_type capacity() const _NOEXCEPT
; 1009 : 		{	// return current length of allocated storage
; 1010 : 		return (this->_Myend - this->_Myfirst);

  00c4b	03 d6		 add	 edx, esi
  00c4d	c1 fa 07	 sar	 edx, 7
  00c50	8b ca		 mov	 ecx, edx
  00c52	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00c55	03 ca		 add	 ecx, edx

; 1149 : 		}
; 1150 : 
; 1151 : 	size_type max_size() const _NOEXCEPT
; 1152 : 		{	// return maximum possible length of sequence
; 1153 : 		return (this->_Getal().max_size());
; 1154 : 		}
; 1155 : 
; 1156 : 	bool empty() const _NOEXCEPT
; 1157 : 		{	// test if sequence is empty
; 1158 : 		return (this->_Myfirst == this->_Mylast);
; 1159 : 		}
; 1160 : 
; 1161 : 	_Alloc get_allocator() const _NOEXCEPT
; 1162 : 		{	// return allocator object for values
; 1163 : 		return (this->_Getal());
; 1164 : 		}
; 1165 : 
; 1166 : 	const_reference at(size_type _Pos) const
; 1167 : 		{	// subscript nonmutable sequence with checking
; 1168 : 		if (size() <= _Pos)
; 1169 : 			_Xran();
; 1170 : 		return (*(this->_Myfirst + _Pos));
; 1171 : 		}
; 1172 : 
; 1173 : 	reference at(size_type _Pos)
; 1174 : 		{	// subscript mutable sequence with checking
; 1175 : 		if (size() <= _Pos)
; 1176 : 			_Xran();
; 1177 : 		return (*(this->_Myfirst + _Pos));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reference operator[](size_type _Pos) const
; 1181 : 		{	// subscript nonmutable sequence
; 1182 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1183 : 		if (size() <= _Pos)
; 1184 : 			{	// report error
; 1185 : 			_DEBUG_ERROR("vector subscript out of range");
; 1186 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1187 : 			}
; 1188 : 
; 1189 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1190 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1191 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1192 : 
; 1193 : 		return (*(this->_Myfirst + _Pos));
; 1194 : 		}
; 1195 : 
; 1196 : 	reference operator[](size_type _Pos)
; 1197 : 		{	// subscript mutable sequence
; 1198 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1199 : 		if (size() <= _Pos)
; 1200 : 			{	// report error
; 1201 : 			_DEBUG_ERROR("vector subscript out of range");
; 1202 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1203 : 			}
; 1204 : 
; 1205 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1206 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1207 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1208 : 
; 1209 : 		return (*(this->_Myfirst + _Pos));
; 1210 : 		}
; 1211 : 
; 1212 : 	pointer data() _NOEXCEPT
; 1213 : 		{	// return address of first element
; 1214 : 		return (this->_Myfirst);
; 1215 : 		}
; 1216 : 
; 1217 : 	const_pointer data() const _NOEXCEPT
; 1218 : 		{	// return address of first element
; 1219 : 		return (this->_Myfirst);
; 1220 : 		}
; 1221 : 
; 1222 : 	reference front()
; 1223 : 		{	// return first element of mutable sequence
; 1224 : 		return (*begin());
; 1225 : 		}
; 1226 : 
; 1227 : 	const_reference front() const
; 1228 : 		{	// return first element of nonmutable sequence
; 1229 : 		return (*begin());
; 1230 : 		}
; 1231 : 
; 1232 : 	reference back()
; 1233 : 		{	// return last element of mutable sequence
; 1234 : 		return (*(end() - 1));
; 1235 : 		}
; 1236 : 
; 1237 : 	const_reference back() const
; 1238 : 		{	// return last element of nonmutable sequence
; 1239 : 		return (*(end() - 1));
; 1240 : 		}
; 1241 : 
; 1242 : 	void push_back(const value_type& _Val)
; 1243 : 		{	// insert element at end
; 1244 : 		if (_Inside(_STD addressof(_Val)))
; 1245 : 			{	// push back an element
; 1246 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1247 : 			if (this->_Mylast == this->_Myend)
; 1248 : 				_Reserve(1);
; 1249 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1250 : 			this->_Getal().construct(this->_Mylast,
; 1251 : 				this->_Myfirst[_Idx]);
; 1252 : 			++this->_Mylast;
; 1253 : 			}
; 1254 : 		else
; 1255 : 			{	// push back a non-element
; 1256 : 			if (this->_Mylast == this->_Myend)
; 1257 : 				_Reserve(1);
; 1258 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1259 : 			this->_Getal().construct(this->_Mylast,
; 1260 : 				_Val);
; 1261 : 			++this->_Mylast;
; 1262 : 			}
; 1263 : 		}
; 1264 : 
; 1265 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1266 : 	void pop_back()
; 1267 : 		{	// erase element at end
; 1268 : 		if (empty())
; 1269 : 			_DEBUG_ERROR("vector empty before pop");
; 1270 : 		else
; 1271 : 			{	// erase last element
; 1272 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1273 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1274 : 			--this->_Mylast;
; 1275 : 			}
; 1276 : 		}
; 1277 : 
; 1278 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1279 : 	void pop_back()
; 1280 : 		{	// erase element at end
; 1281 : 		this->_Getal().destroy(this->_Mylast - 1);
; 1282 : 		--this->_Mylast;
; 1283 : 		}
; 1284 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1285 : 
; 1286 : 	template<class _Iter>
; 1287 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1288 : 			void>::type
; 1289 : 		assign(_Iter _First, _Iter _Last)
; 1290 : 		{	// assign [_First, _Last)
; 1291 : 		clear();
; 1292 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1293 : 		}
; 1294 : 
; 1295 : 	template<class _Iter>
; 1296 : 		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
; 1297 : 		{	// assign [_First, _Last), input iterators
; 1298 : 		for (; _First != _Last; ++_First)
; 1299 : 			emplace_back(*_First);
; 1300 : 		}
; 1301 : 
; 1302 : 	template<class _Iter>
; 1303 : 		void _Assign(_Iter _First, _Iter _Last, forward_iterator_tag)
; 1304 : 		{	// assign [_First, _Last), forward iterators
; 1305 : 		if (_First == _Last)
; 1306 : 			return;	// nothing to do
; 1307 : 
; 1308 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1309 : 
; 1310 : 		if (capacity() < _Newsize)
; 1311 : 			{	// need more room, try to get it
; 1312 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1313 : 			_Tidy();
; 1314 : 			_Buy(_Newcapacity);
; 1315 : 			}
; 1316 : 
; 1317 : 		this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
; 1318 : 		}
; 1319 : 
; 1320 : 	void assign(size_type _Count, const value_type& _Val)
; 1321 : 		{	// assign _Count * _Val
; 1322 : 		clear();
; 1323 : 		insert(begin(), _Count, _Val);
; 1324 : 		}
; 1325 : 
; 1326 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1327 : 		{	// insert _Val at _Where
; 1328 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1329 : 		}
; 1330 : 
; 1331 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1332 : 		const _Ty& _Val)
; 1333 : 		{	// insert _Count * _Val at _Where
; 1334 : 		return (_Insert_n(_Where, _Count, _Val));
; 1335 : 		}
; 1336 : 
; 1337 : 	template<class _Iter>
; 1338 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1339 : 			iterator>::type
; 1340 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1341 : 		{	// insert [_First, _Last) at _Where
; 1342 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1343 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1344 : 		return (begin() + _Off);
; 1345 : 		}
; 1346 : 
; 1347 : 	template<class _Iter>
; 1348 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1349 : 			input_iterator_tag)
; 1350 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1351 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1352 : 
; 1353 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1354 : 		if (size() < _Off)
; 1355 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1356 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1357 : 
; 1358 : 		if (_First != _Last)
; 1359 : 			{	// worth doing, gather at end and rotate into place
; 1360 : 			size_type _Oldsize = size();
; 1361 : 
; 1362 : 			_TRY_BEGIN
; 1363 : 			for (; _First != _Last; ++_First)
; 1364 : 				push_back(*_First);	// append
; 1365 : 
; 1366 : 			_CATCH_ALL
; 1367 : 			erase(begin() + _Oldsize, end());
; 1368 : 			_RERAISE;
; 1369 : 			_CATCH_END
; 1370 : 
; 1371 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1372 : 			}
; 1373 : 		}
; 1374 : 
; 1375 : 	template<class _Iter>
; 1376 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1377 : 			forward_iterator_tag)
; 1378 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_VICONT(_Where) != this
; 1381 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1382 : 			|| this->_Mylast < _VIPTR(_Where))
; 1383 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1384 : 		_DEBUG_RANGE(_First, _Last);
; 1385 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1386 : 
; 1387 : 		size_type _Count = 0;
; 1388 : 		_Distance(_First, _Last, _Count);
; 1389 : 
; 1390 : 		if (_Count == 0)
; 1391 : 			;
; 1392 : 		else if (_Unused_capacity() < _Count)
; 1393 : 			{	// not enough room, reallocate
; 1394 : 			if (max_size() - size() < _Count)
; 1395 : 				_Xlen();	// result too long
; 1396 : 
; 1397 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1398 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1399 : 			pointer _Ptr = _Newvec;
; 1400 : 
; 1401 : 			_TRY_BEGIN
; 1402 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1403 : 				_Newvec);	// copy prefix
; 1404 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1405 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1406 : 				_Ptr);	// copy suffix
; 1407 : 			_CATCH_ALL
; 1408 : 			_Destroy(_Newvec, _Ptr);
; 1409 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1410 : 			_RERAISE;
; 1411 : 			_CATCH_END
; 1412 : 
; 1413 : 			_Count += size();
; 1414 : 			if (this->_Myfirst != pointer())
; 1415 : 				{	// destroy and deallocate old array
; 1416 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1417 : 				this->_Getal().deallocate(this->_Myfirst,
; 1418 : 					this->_Myend - this->_Myfirst);
; 1419 : 				}
; 1420 : 
; 1421 : 			this->_Orphan_all();
; 1422 : 			this->_Myend = _Newvec + _Capacity;
; 1423 : 			this->_Mylast = _Newvec + _Count;
; 1424 : 			this->_Myfirst = _Newvec;
; 1425 : 			}
; 1426 : 		else
; 1427 : 			{	// new stuff fits, append and rotate into place
; 1428 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1429 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1430 : 				this->_Mylast + _Count);
; 1431 : 			this->_Mylast += _Count;
; 1432 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1433 : 			}
; 1434 : 		}
; 1435 : 
; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 	iterator erase(const_iterator _Where)
; 1438 : 		{	// erase element at where
; 1439 : 		if (_VICONT(_Where) != this
; 1440 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1441 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1442 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1443 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1444 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1445 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1446 : 		--this->_Mylast;
; 1447 : 		return (_Make_iter(_Where));
; 1448 : 		}
; 1449 : 
; 1450 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 	iterator erase(const_iterator _Where)
; 1452 : 		{	// erase element at where
; 1453 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1454 : 			_VIPTR(_Where));
; 1455 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1456 : 		--this->_Mylast;
; 1457 : 		return (_Make_iter(_Where));
; 1458 : 		}
; 1459 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1460 : 
; 1461 : 	iterator erase(const_iterator _First_arg,
; 1462 : 		const_iterator _Last_arg)
; 1463 : 		{	// erase [_First, _Last)
; 1464 : 		if (_First_arg == begin() && _Last_arg == end())
; 1465 : 			clear();
; 1466 : 		else if (_First_arg != _Last_arg)
; 1467 : 			{	// clear partial
; 1468 : 			iterator _First = _Make_iter(_First_arg);
; 1469 : 			iterator _Last = _Make_iter(_Last_arg);
; 1470 : 
; 1471 : 			if (_First != _Last)
; 1472 : 				{	// worth doing, copy down over hole
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 				if (_Last < _First || _VICONT(_First) != this
; 1475 : 					|| _VIPTR(_First) < this->_Myfirst
; 1476 : 					|| this->_Mylast < _VIPTR(_Last))
; 1477 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1478 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1479 : 					_VIPTR(_First));
; 1480 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1484 : 					_VIPTR(_First));
; 1485 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1486 : 
; 1487 : 				_Destroy(_Ptr, this->_Mylast);
; 1488 : 				this->_Mylast = _Ptr;
; 1489 : 				}
; 1490 : 			}
; 1491 : 		return (_Make_iter(_First_arg));
; 1492 : 		}
; 1493 : 
; 1494 : 	void _Pop_back_n(size_type _Count)
; 1495 : 		{	// erase _Count elements at end
; 1496 : 		pointer _Ptr = this->_Mylast - _Count;
; 1497 : 
; 1498 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1499 : 		_Orphan_range(_Ptr, this->_Mylast);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 
; 1502 : 		_Destroy(_Ptr, this->_Mylast);
; 1503 : 		this->_Mylast = _Ptr;
; 1504 : 		}
; 1505 : 
; 1506 : 	void clear() _NOEXCEPT
; 1507 : 		{	// erase all
; 1508 : 		this->_Orphan_all();
; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1510 : 		this->_Mylast = this->_Myfirst;
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		{	// exchange contents with _Right
; 1515 : 		if (this == &_Right)
; 1516 : 			;	// same object, do nothing
; 1517 : 		else if (this->_Getal() == _Right._Getal())
; 1518 : 			{	// same allocator, swap control information
; 1519 : 			this->_Swap_all(_Right);
; 1520 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1521 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1522 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1529 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1530 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1531 : 			}
; 1532 : 
; 1533 : 		else
; 1534 : 			{	// containers are incompatible
; 1535 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1536 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1537 : 
; 1538 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1539 : 			_XSTD terminate();
; 1540 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1541 : 			}
; 1542 : 		}
; 1543 : 
; 1544 : protected:
; 1545 : 	bool _Buy(size_type _Capacity)
; 1546 : 		{	// allocate array with _Capacity elements
; 1547 : 		this->_Myfirst = pointer();
; 1548 : 		this->_Mylast = pointer();
; 1549 : 		this->_Myend = pointer();
; 1550 : 
; 1551 : 		if (_Capacity == 0)
; 1552 : 			return (false);
; 1553 : 		else if (max_size() < _Capacity)
; 1554 : 			_Xlen();	// result too long
; 1555 : 		else
; 1556 : 			{	// nonempty array, allocate storage
; 1557 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1558 : 			this->_Mylast = this->_Myfirst;
; 1559 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1560 : 			}
; 1561 : 		return (true);
; 1562 : 		}
; 1563 : 
; 1564 : 	void _Destroy(pointer _First, pointer _Last)
; 1565 : 		{	// destroy [_First, _Last) using allocator
; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}
; 1569 : 
; 1570 : 	size_type _Grow_to(size_type _Count) const
; 1571 : 		{	// grow by 50% or at least to _Count
; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00c57	8b d1		 mov	 edx, ecx
  00c59	d1 ea		 shr	 edx, 1
  00c5b	2b c2		 sub	 eax, edx
  00c5d	3b c1		 cmp	 eax, ecx
  00c5f	73 04		 jae	 SHORT $LN521@Render
  00c61	33 c9		 xor	 ecx, ecx
  00c63	eb 02		 jmp	 SHORT $LN522@Render
$LN521@Render:
  00c65	03 ca		 add	 ecx, edx
$LN522@Render:

; 1576 : 		if (_Capacity < _Count)

  00c67	3b cf		 cmp	 ecx, edi
  00c69	0f 42 cf	 cmovb	 ecx, edi

; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));

  00c6c	51		 push	 ecx
  00c6d	8d 8d 08 fe ff
	ff		 lea	 ecx, DWORD PTR _VSVector$[ebp]
  00c73	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IAEXI@Z ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Reallocate
  00c78	8b 85 10 fe ff
	ff		 mov	 eax, DWORD PTR _VSVector$[ebp+8]
  00c7e	8b bd 0c fe ff
	ff		 mov	 edi, DWORD PTR _VSVector$[ebp+4]
  00c84	89 85 04 fe ff
	ff		 mov	 DWORD PTR _VSVector$2$[ebp], eax
  00c8a	89 bd 2c fe ff
	ff		 mov	 DWORD PTR _VSVector$3$[ebp], edi
$LN496@Render:

; 870  : 				_Reserve(1);
; 871  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 872  : 			this->_Getal().construct(this->_Mylast,
; 873  : 				_STD forward<value_type>(this->_Myfirst[_Idx]));

  00c90	69 b5 24 fe ff
	ff 94 00 00 00	 imul	 esi, DWORD PTR __Idx$1$[ebp], 148
  00c9a	03 b5 08 fe ff
	ff		 add	 esi, DWORD PTR _VSVector$[ebp]
; File a:\vs\vc\include\xmemory0

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00ca0	85 ff		 test	 edi, edi
  00ca2	0f 84 df 00 00
	00		 je	 $LN620@Render
; File a:\vs\vc\include\utility

; 157  : 		{	// construct from moved compatible pair

  00ca8	8b 06		 mov	 eax, DWORD PTR [esi]
  00caa	83 c6 04	 add	 esi, 4
  00cad	89 07		 mov	 DWORD PTR [edi], eax
; File a:\vs\vc\include\vector

; 876  : 		else

  00caf	e9 c3 00 00 00	 jmp	 $LN787@Render
$LN484@Render:

; 877  : 			{	// push back a non-element
; 878  : 			if (this->_Mylast == this->_Myend)

  00cb4	8b b5 04 fe ff
	ff		 mov	 esi, DWORD PTR _VSVector$2$[ebp]
  00cba	3b fe		 cmp	 edi, esi
  00cbc	0f 85 a7 00 00
	00		 jne	 $LN565@Render

; 1011 : 		}
; 1012 : 
; 1013 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1014 : 		{	// micro-optimization for capacity() - size()
; 1015 : 		return (this->_Myend - this->_Mylast);

  00cc2	8b ce		 mov	 ecx, esi
  00cc4	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00cc9	2b cf		 sub	 ecx, edi
  00ccb	f7 e9		 imul	 ecx
  00ccd	03 d1		 add	 edx, ecx
  00ccf	c1 fa 07	 sar	 edx, 7
  00cd2	8b c2		 mov	 eax, edx
  00cd4	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00cd7	03 c2		 add	 eax, edx

; 1584 : 		}
; 1585 : 
; 1586 : 	void _Reallocate(size_type _Count)
; 1587 : 		{	// move to array of exactly _Count elements
; 1588 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1589 : 
; 1590 : 		_TRY_BEGIN
; 1591 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);
; 1592 : 		_CATCH_ALL
; 1593 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1594 : 		_RERAISE;
; 1595 : 		_CATCH_END
; 1596 : 
; 1597 : 		size_type _Size = size();
; 1598 : 		if (this->_Myfirst != pointer())
; 1599 : 			{	// destroy and deallocate old array
; 1600 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1601 : 			this->_Getal().deallocate(this->_Myfirst,
; 1602 : 				this->_Myend - this->_Myfirst);
; 1603 : 			}
; 1604 : 
; 1605 : 		this->_Orphan_all();
; 1606 : 		this->_Myend = _Ptr + _Count;
; 1607 : 		this->_Mylast = _Ptr + _Size;
; 1608 : 		this->_Myfirst = _Ptr;
; 1609 : 		}
; 1610 : 
; 1611 : 	void _Reserve(size_type _Count)
; 1612 : 		{	// ensure room for _Count new elements, grow exponentially
; 1613 : 		if (_Unused_capacity() < _Count)

  00cd9	83 f8 01	 cmp	 eax, 1
  00cdc	0f 83 87 00 00
	00		 jae	 $LN565@Render

; 1016 : 		}
; 1017 : 
; 1018 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1019 : 		{	// micro-optimization for capacity() != size()
; 1020 : 		return (this->_Myend != this->_Mylast);
; 1021 : 		}
; 1022 : 
; 1023 : 	iterator begin() _NOEXCEPT
; 1024 : 		{	// return iterator for beginning of mutable sequence
; 1025 : 		return (iterator(this->_Myfirst, this));
; 1026 : 		}
; 1027 : 
; 1028 : 	const_iterator begin() const _NOEXCEPT
; 1029 : 		{	// return iterator for beginning of nonmutable sequence
; 1030 : 		return (const_iterator(this->_Myfirst, this));
; 1031 : 		}
; 1032 : 
; 1033 : 	iterator end() _NOEXCEPT
; 1034 : 		{	// return iterator for end of mutable sequence
; 1035 : 		return (iterator(this->_Mylast, this));
; 1036 : 		}
; 1037 : 
; 1038 : 	const_iterator end() const _NOEXCEPT
; 1039 : 		{	// return iterator for end of nonmutable sequence
; 1040 : 		return (const_iterator(this->_Mylast, this));
; 1041 : 		}
; 1042 : 
; 1043 : 	iterator _Make_iter(const_iterator _Where) const
; 1044 : 		{	// make iterator from const_iterator
; 1045 : 		return (iterator(_Where._Ptr, this));
; 1046 : 		}
; 1047 : 
; 1048 : 	reverse_iterator rbegin() _NOEXCEPT
; 1049 : 		{	// return iterator for beginning of reversed mutable sequence
; 1050 : 		return (reverse_iterator(end()));
; 1051 : 		}
; 1052 : 
; 1053 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1054 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1055 : 		return (const_reverse_iterator(end()));
; 1056 : 		}
; 1057 : 
; 1058 : 	reverse_iterator rend() _NOEXCEPT
; 1059 : 		{	// return iterator for end of reversed mutable sequence
; 1060 : 		return (reverse_iterator(begin()));
; 1061 : 		}
; 1062 : 
; 1063 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1064 : 		{	// return iterator for end of reversed nonmutable sequence
; 1065 : 		return (const_reverse_iterator(begin()));
; 1066 : 		}
; 1067 : 
; 1068 : 	const_iterator cbegin() const _NOEXCEPT
; 1069 : 		{	// return iterator for beginning of nonmutable sequence
; 1070 : 		return (((const _Myt *)this)->begin());
; 1071 : 		}
; 1072 : 
; 1073 : 	const_iterator cend() const _NOEXCEPT
; 1074 : 		{	// return iterator for end of nonmutable sequence
; 1075 : 		return (((const _Myt *)this)->end());
; 1076 : 		}
; 1077 : 
; 1078 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1079 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1080 : 		return (((const _Myt *)this)->rbegin());
; 1081 : 		}
; 1082 : 
; 1083 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1084 : 		{	// return iterator for end of reversed nonmutable sequence
; 1085 : 		return (((const _Myt *)this)->rend());
; 1086 : 		}
; 1087 : 
; 1088 : 	void shrink_to_fit()
; 1089 : 		{	// reduce capacity
; 1090 : 		if (_Has_unused_capacity())
; 1091 : 			{	// worth shrinking, do it
; 1092 : 			if (empty())
; 1093 : 				_Tidy();
; 1094 : 			else
; 1095 : 				_Reallocate(size());
; 1096 : 			}
; 1097 : 		}
; 1098 : 
; 1099 : 	void resize(size_type _Newsize)
; 1100 : 		{	// determine new length, padding as needed
; 1101 : 		if (_Newsize < size())
; 1102 : 			_Pop_back_n(size() - _Newsize);
; 1103 : 		else if (size() < _Newsize)
; 1104 : 			{	// pad as needed
; 1105 : 			_Alty _Alval(this->_Getal());
; 1106 : 			_Reserve(_Newsize - size());
; 1107 : 			_TRY_BEGIN
; 1108 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1109 : 				_Alval);
; 1110 : 			_CATCH_ALL
; 1111 : 			_Tidy();
; 1112 : 			_RERAISE;
; 1113 : 			_CATCH_END
; 1114 : 			this->_Mylast += _Newsize - size();
; 1115 : 			}
; 1116 : 		}
; 1117 : 
; 1118 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1119 : 		{	// determine new length, padding with _Val elements as needed
; 1120 : 		if (_Newsize < size())
; 1121 : 			_Pop_back_n(size() - _Newsize);
; 1122 : 		else if (size() < _Newsize)
; 1123 : 			{	// pad as needed
; 1124 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1125 : 
; 1126 : 			if (_Inside(_Ptr))
; 1127 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1128 : 				const difference_type _Idx = _Ptr
; 1129 : 					- _STD addressof(*this->_Myfirst);
; 1130 : 				_Reserve(_Newsize - size());
; 1131 : 				_Ptr = _STD addressof(*this->_Myfirst) + _Idx;
; 1132 : 				}
; 1133 : 			else
; 1134 : 				_Reserve(_Newsize - size());
; 1135 : 
; 1136 : 			_TRY_BEGIN
; 1137 : 			_Ufill(this->_Mylast, _Newsize - size(), _Ptr);
; 1138 : 			_CATCH_ALL
; 1139 : 			_Tidy();
; 1140 : 			_RERAISE;
; 1141 : 			_CATCH_END
; 1142 : 			this->_Mylast += _Newsize - size();
; 1143 : 			}
; 1144 : 		}
; 1145 : 
; 1146 : 	size_type size() const _NOEXCEPT
; 1147 : 		{	// return length of sequence
; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00ce2	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _VSVector$[ebp]
  00ce8	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00ced	2b f9		 sub	 edi, ecx
  00cef	f7 ef		 imul	 edi

; 1614 : 			{	// need more room, try to get it
; 1615 : 			if (max_size() - size() < _Count)

  00cf1	b8 91 cf ba 01	 mov	 eax, 29020049		; 01bacf91H

; 1016 : 		}
; 1017 : 
; 1018 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1019 : 		{	// micro-optimization for capacity() != size()
; 1020 : 		return (this->_Myend != this->_Mylast);
; 1021 : 		}
; 1022 : 
; 1023 : 	iterator begin() _NOEXCEPT
; 1024 : 		{	// return iterator for beginning of mutable sequence
; 1025 : 		return (iterator(this->_Myfirst, this));
; 1026 : 		}
; 1027 : 
; 1028 : 	const_iterator begin() const _NOEXCEPT
; 1029 : 		{	// return iterator for beginning of nonmutable sequence
; 1030 : 		return (const_iterator(this->_Myfirst, this));
; 1031 : 		}
; 1032 : 
; 1033 : 	iterator end() _NOEXCEPT
; 1034 : 		{	// return iterator for end of mutable sequence
; 1035 : 		return (iterator(this->_Mylast, this));
; 1036 : 		}
; 1037 : 
; 1038 : 	const_iterator end() const _NOEXCEPT
; 1039 : 		{	// return iterator for end of nonmutable sequence
; 1040 : 		return (const_iterator(this->_Mylast, this));
; 1041 : 		}
; 1042 : 
; 1043 : 	iterator _Make_iter(const_iterator _Where) const
; 1044 : 		{	// make iterator from const_iterator
; 1045 : 		return (iterator(_Where._Ptr, this));
; 1046 : 		}
; 1047 : 
; 1048 : 	reverse_iterator rbegin() _NOEXCEPT
; 1049 : 		{	// return iterator for beginning of reversed mutable sequence
; 1050 : 		return (reverse_iterator(end()));
; 1051 : 		}
; 1052 : 
; 1053 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1054 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1055 : 		return (const_reverse_iterator(end()));
; 1056 : 		}
; 1057 : 
; 1058 : 	reverse_iterator rend() _NOEXCEPT
; 1059 : 		{	// return iterator for end of reversed mutable sequence
; 1060 : 		return (reverse_iterator(begin()));
; 1061 : 		}
; 1062 : 
; 1063 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1064 : 		{	// return iterator for end of reversed nonmutable sequence
; 1065 : 		return (const_reverse_iterator(begin()));
; 1066 : 		}
; 1067 : 
; 1068 : 	const_iterator cbegin() const _NOEXCEPT
; 1069 : 		{	// return iterator for beginning of nonmutable sequence
; 1070 : 		return (((const _Myt *)this)->begin());
; 1071 : 		}
; 1072 : 
; 1073 : 	const_iterator cend() const _NOEXCEPT
; 1074 : 		{	// return iterator for end of nonmutable sequence
; 1075 : 		return (((const _Myt *)this)->end());
; 1076 : 		}
; 1077 : 
; 1078 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1079 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1080 : 		return (((const _Myt *)this)->rbegin());
; 1081 : 		}
; 1082 : 
; 1083 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1084 : 		{	// return iterator for end of reversed nonmutable sequence
; 1085 : 		return (((const _Myt *)this)->rend());
; 1086 : 		}
; 1087 : 
; 1088 : 	void shrink_to_fit()
; 1089 : 		{	// reduce capacity
; 1090 : 		if (_Has_unused_capacity())
; 1091 : 			{	// worth shrinking, do it
; 1092 : 			if (empty())
; 1093 : 				_Tidy();
; 1094 : 			else
; 1095 : 				_Reallocate(size());
; 1096 : 			}
; 1097 : 		}
; 1098 : 
; 1099 : 	void resize(size_type _Newsize)
; 1100 : 		{	// determine new length, padding as needed
; 1101 : 		if (_Newsize < size())
; 1102 : 			_Pop_back_n(size() - _Newsize);
; 1103 : 		else if (size() < _Newsize)
; 1104 : 			{	// pad as needed
; 1105 : 			_Alty _Alval(this->_Getal());
; 1106 : 			_Reserve(_Newsize - size());
; 1107 : 			_TRY_BEGIN
; 1108 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1109 : 				_Alval);
; 1110 : 			_CATCH_ALL
; 1111 : 			_Tidy();
; 1112 : 			_RERAISE;
; 1113 : 			_CATCH_END
; 1114 : 			this->_Mylast += _Newsize - size();
; 1115 : 			}
; 1116 : 		}
; 1117 : 
; 1118 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1119 : 		{	// determine new length, padding with _Val elements as needed
; 1120 : 		if (_Newsize < size())
; 1121 : 			_Pop_back_n(size() - _Newsize);
; 1122 : 		else if (size() < _Newsize)
; 1123 : 			{	// pad as needed
; 1124 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1125 : 
; 1126 : 			if (_Inside(_Ptr))
; 1127 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1128 : 				const difference_type _Idx = _Ptr
; 1129 : 					- _STD addressof(*this->_Myfirst);
; 1130 : 				_Reserve(_Newsize - size());
; 1131 : 				_Ptr = _STD addressof(*this->_Myfirst) + _Idx;
; 1132 : 				}
; 1133 : 			else
; 1134 : 				_Reserve(_Newsize - size());
; 1135 : 
; 1136 : 			_TRY_BEGIN
; 1137 : 			_Ufill(this->_Mylast, _Newsize - size(), _Ptr);
; 1138 : 			_CATCH_ALL
; 1139 : 			_Tidy();
; 1140 : 			_RERAISE;
; 1141 : 			_CATCH_END
; 1142 : 			this->_Mylast += _Newsize - size();
; 1143 : 			}
; 1144 : 		}
; 1145 : 
; 1146 : 	size_type size() const _NOEXCEPT
; 1147 : 		{	// return length of sequence
; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00cf6	03 d7		 add	 edx, edi
  00cf8	c1 fa 07	 sar	 edx, 7
  00cfb	8b fa		 mov	 edi, edx
  00cfd	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00d00	03 fa		 add	 edi, edx

; 1614 : 			{	// need more room, try to get it
; 1615 : 			if (max_size() - size() < _Count)

  00d02	2b c7		 sub	 eax, edi
  00d04	83 f8 01	 cmp	 eax, 1
  00d07	0f 82 a3 00 00
	00		 jb	 $LN746@Render

; 884  : 			}
; 885  : 		}
; 886  : 
; 887  : 	iterator insert(const_iterator _Where, _Ty&& _Val)
; 888  : 		{	// insert by moving _Val at _Where
; 889  : 		return (emplace(_Where, _STD move(_Val)));
; 890  : 		}
; 891  : 
; 892  : 	template<class... _Valty>
; 893  : 		void emplace_back(_Valty&&... _Val)
; 894  : 		{	// insert by moving into element at end
; 895  : 		if (this->_Mylast == this->_Myend)
; 896  : 			_Reserve(1);
; 897  : 		_Orphan_range(this->_Mylast, this->_Mylast);
; 898  : 		this->_Getal().construct(this->_Mylast,
; 899  : 			_STD forward<_Valty>(_Val)...);
; 900  : 		++this->_Mylast;
; 901  : 		}
; 902  : 
; 903  : 	template<class... _Valty>
; 904  : 		iterator emplace(const_iterator _Where, _Valty&&... _Val)
; 905  : 		{	// insert by moving _Val at _Where
; 906  : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 907  : 
; 908  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 909  : 		if (size() < _Off)
; 910  : 			_DEBUG_ERROR("vector emplace iterator outside range");
; 911  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 912  : 
; 913  : 		emplace_back(_STD forward<_Valty>(_Val)...);
; 914  : 		_STD rotate(begin() + _Off, end() - 1, end());
; 915  : 		return (begin() + _Off);
; 916  : 		}
; 917  : 
; 918  : 
; 919  : 	vector(_XSTD initializer_list<value_type> _Ilist,
; 920  : 		const _Alloc& _Al = allocator_type())
; 921  : 		: _Mybase(_Al)
; 922  : 		{	// construct from initializer_list
; 923  : 		insert(begin(), _Ilist.begin(), _Ilist.end());
; 924  : 		}
; 925  : 
; 926  : 	_Myt& operator=(_XSTD initializer_list<value_type> _Ilist)
; 927  : 		{	// assign initializer_list
; 928  : 		assign(_Ilist.begin(), _Ilist.end());
; 929  : 		return (*this);
; 930  : 		}
; 931  : 
; 932  : 	void assign(_XSTD initializer_list<value_type> _Ilist)
; 933  : 		{	// assign initializer_list
; 934  : 		assign(_Ilist.begin(), _Ilist.end());
; 935  : 		}
; 936  : 
; 937  : 	iterator insert(const_iterator _Where,
; 938  : 		_XSTD initializer_list<value_type> _Ilist)
; 939  : 		{	// insert initializer_list
; 940  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 941  : 		}
; 942  : 
; 943  : 	~vector() _NOEXCEPT
; 944  : 		{	// destroy the object
; 945  : 		_Tidy();
; 946  : 		}
; 947  : 
; 948  : 	_Myt& operator=(const _Myt& _Right)
; 949  : 		{	// assign _Right
; 950  : 		if (this != &_Right)
; 951  : 			{	// different, assign it
; 952  : 			if (this->_Getal() != _Right._Getal()
; 953  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 954  : 				{	// change allocator before copying
; 955  : 				_Tidy();
; 956  : 				this->_Change_alloc(_Right._Getal());
; 957  : 				}
; 958  : 
; 959  : 			this->_Orphan_all();
; 960  : 
; 961  : 			if (_Right.empty())
; 962  : 				clear();	// new sequence empty, erase existing sequence
; 963  : 			else if (_Right.size() <= size())
; 964  : 				{	// enough elements, copy new and destroy old
; 965  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst,
; 966  : 					_Right._Mylast, this->_Myfirst);	// copy new
; 967  : 				_Destroy(_Ptr, this->_Mylast);	// destroy old
; 968  : 				this->_Mylast = this->_Myfirst + _Right.size();
; 969  : 				}
; 970  : 			else if (_Right.size() <= capacity())
; 971  : 				{	// enough room, copy and construct new
; 972  : 				pointer _Ptr = _Right._Myfirst + size();
; 973  : 				_Copy_impl(_Right._Myfirst,
; 974  : 					_Ptr, this->_Myfirst);
; 975  : 				this->_Mylast = _Ucopy(_Ptr, _Right._Mylast, this->_Mylast);
; 976  : 				}
; 977  : 			else
; 978  : 				{	// not enough room, allocate new array and construct new
; 979  : 				if (this->_Myfirst != pointer())
; 980  : 					{	// discard old array
; 981  : 					_Destroy(this->_Myfirst, this->_Mylast);
; 982  : 					this->_Getal().deallocate(this->_Myfirst,
; 983  : 						this->_Myend - this->_Myfirst);
; 984  : 					}
; 985  : 				if (_Buy(_Right.size()))
; 986  : 					_TRY_BEGIN
; 987  : 					this->_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 988  : 						this->_Myfirst);
; 989  : 					_CATCH_ALL
; 990  : 					_Tidy();
; 991  : 					_RERAISE;
; 992  : 					_CATCH_END
; 993  : 				}
; 994  : 			}
; 995  : 		return (*this);
; 996  : 		}
; 997  : 
; 998  : 	void reserve(size_type _Count)
; 999  : 		{	// determine new minimum length of allocated storage
; 1000 : 		if (capacity() < _Count)
; 1001 : 			{	// something to do, check and reallocate
; 1002 : 			if (max_size() < _Count)
; 1003 : 				_Xlen();
; 1004 : 			_Reallocate(_Count);
; 1005 : 			}
; 1006 : 		}
; 1007 : 
; 1008 : 	size_type capacity() const _NOEXCEPT
; 1009 : 		{	// return current length of allocated storage
; 1010 : 		return (this->_Myend - this->_Myfirst);

  00d0d	2b f1		 sub	 esi, ecx
  00d0f	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00d14	f7 ee		 imul	 esi

; 1149 : 		}
; 1150 : 
; 1151 : 	size_type max_size() const _NOEXCEPT
; 1152 : 		{	// return maximum possible length of sequence
; 1153 : 		return (this->_Getal().max_size());
; 1154 : 		}
; 1155 : 
; 1156 : 	bool empty() const _NOEXCEPT
; 1157 : 		{	// test if sequence is empty
; 1158 : 		return (this->_Myfirst == this->_Mylast);
; 1159 : 		}
; 1160 : 
; 1161 : 	_Alloc get_allocator() const _NOEXCEPT
; 1162 : 		{	// return allocator object for values
; 1163 : 		return (this->_Getal());
; 1164 : 		}
; 1165 : 
; 1166 : 	const_reference at(size_type _Pos) const
; 1167 : 		{	// subscript nonmutable sequence with checking
; 1168 : 		if (size() <= _Pos)
; 1169 : 			_Xran();
; 1170 : 		return (*(this->_Myfirst + _Pos));
; 1171 : 		}
; 1172 : 
; 1173 : 	reference at(size_type _Pos)
; 1174 : 		{	// subscript mutable sequence with checking
; 1175 : 		if (size() <= _Pos)
; 1176 : 			_Xran();
; 1177 : 		return (*(this->_Myfirst + _Pos));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reference operator[](size_type _Pos) const
; 1181 : 		{	// subscript nonmutable sequence
; 1182 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1183 : 		if (size() <= _Pos)
; 1184 : 			{	// report error
; 1185 : 			_DEBUG_ERROR("vector subscript out of range");
; 1186 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1187 : 			}
; 1188 : 
; 1189 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1190 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1191 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1192 : 
; 1193 : 		return (*(this->_Myfirst + _Pos));
; 1194 : 		}
; 1195 : 
; 1196 : 	reference operator[](size_type _Pos)
; 1197 : 		{	// subscript mutable sequence
; 1198 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1199 : 		if (size() <= _Pos)
; 1200 : 			{	// report error
; 1201 : 			_DEBUG_ERROR("vector subscript out of range");
; 1202 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1203 : 			}
; 1204 : 
; 1205 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1206 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1207 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1208 : 
; 1209 : 		return (*(this->_Myfirst + _Pos));
; 1210 : 		}
; 1211 : 
; 1212 : 	pointer data() _NOEXCEPT
; 1213 : 		{	// return address of first element
; 1214 : 		return (this->_Myfirst);
; 1215 : 		}
; 1216 : 
; 1217 : 	const_pointer data() const _NOEXCEPT
; 1218 : 		{	// return address of first element
; 1219 : 		return (this->_Myfirst);
; 1220 : 		}
; 1221 : 
; 1222 : 	reference front()
; 1223 : 		{	// return first element of mutable sequence
; 1224 : 		return (*begin());
; 1225 : 		}
; 1226 : 
; 1227 : 	const_reference front() const
; 1228 : 		{	// return first element of nonmutable sequence
; 1229 : 		return (*begin());
; 1230 : 		}
; 1231 : 
; 1232 : 	reference back()
; 1233 : 		{	// return last element of mutable sequence
; 1234 : 		return (*(end() - 1));
; 1235 : 		}
; 1236 : 
; 1237 : 	const_reference back() const
; 1238 : 		{	// return last element of nonmutable sequence
; 1239 : 		return (*(end() - 1));
; 1240 : 		}
; 1241 : 
; 1242 : 	void push_back(const value_type& _Val)
; 1243 : 		{	// insert element at end
; 1244 : 		if (_Inside(_STD addressof(_Val)))
; 1245 : 			{	// push back an element
; 1246 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1247 : 			if (this->_Mylast == this->_Myend)
; 1248 : 				_Reserve(1);
; 1249 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1250 : 			this->_Getal().construct(this->_Mylast,
; 1251 : 				this->_Myfirst[_Idx]);
; 1252 : 			++this->_Mylast;
; 1253 : 			}
; 1254 : 		else
; 1255 : 			{	// push back a non-element
; 1256 : 			if (this->_Mylast == this->_Myend)
; 1257 : 				_Reserve(1);
; 1258 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1259 : 			this->_Getal().construct(this->_Mylast,
; 1260 : 				_Val);
; 1261 : 			++this->_Mylast;
; 1262 : 			}
; 1263 : 		}
; 1264 : 
; 1265 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1266 : 	void pop_back()
; 1267 : 		{	// erase element at end
; 1268 : 		if (empty())
; 1269 : 			_DEBUG_ERROR("vector empty before pop");
; 1270 : 		else
; 1271 : 			{	// erase last element
; 1272 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1273 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1274 : 			--this->_Mylast;
; 1275 : 			}
; 1276 : 		}
; 1277 : 
; 1278 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1279 : 	void pop_back()
; 1280 : 		{	// erase element at end
; 1281 : 		this->_Getal().destroy(this->_Mylast - 1);
; 1282 : 		--this->_Mylast;
; 1283 : 		}
; 1284 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1285 : 
; 1286 : 	template<class _Iter>
; 1287 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1288 : 			void>::type
; 1289 : 		assign(_Iter _First, _Iter _Last)
; 1290 : 		{	// assign [_First, _Last)
; 1291 : 		clear();
; 1292 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1293 : 		}
; 1294 : 
; 1295 : 	template<class _Iter>
; 1296 : 		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
; 1297 : 		{	// assign [_First, _Last), input iterators
; 1298 : 		for (; _First != _Last; ++_First)
; 1299 : 			emplace_back(*_First);
; 1300 : 		}
; 1301 : 
; 1302 : 	template<class _Iter>
; 1303 : 		void _Assign(_Iter _First, _Iter _Last, forward_iterator_tag)
; 1304 : 		{	// assign [_First, _Last), forward iterators
; 1305 : 		if (_First == _Last)
; 1306 : 			return;	// nothing to do
; 1307 : 
; 1308 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1309 : 
; 1310 : 		if (capacity() < _Newsize)
; 1311 : 			{	// need more room, try to get it
; 1312 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1313 : 			_Tidy();
; 1314 : 			_Buy(_Newcapacity);
; 1315 : 			}
; 1316 : 
; 1317 : 		this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
; 1318 : 		}
; 1319 : 
; 1320 : 	void assign(size_type _Count, const value_type& _Val)
; 1321 : 		{	// assign _Count * _Val
; 1322 : 		clear();
; 1323 : 		insert(begin(), _Count, _Val);
; 1324 : 		}
; 1325 : 
; 1326 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1327 : 		{	// insert _Val at _Where
; 1328 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1329 : 		}
; 1330 : 
; 1331 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1332 : 		const _Ty& _Val)
; 1333 : 		{	// insert _Count * _Val at _Where
; 1334 : 		return (_Insert_n(_Where, _Count, _Val));
; 1335 : 		}
; 1336 : 
; 1337 : 	template<class _Iter>
; 1338 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1339 : 			iterator>::type
; 1340 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1341 : 		{	// insert [_First, _Last) at _Where
; 1342 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1343 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1344 : 		return (begin() + _Off);
; 1345 : 		}
; 1346 : 
; 1347 : 	template<class _Iter>
; 1348 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1349 : 			input_iterator_tag)
; 1350 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1351 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1352 : 
; 1353 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1354 : 		if (size() < _Off)
; 1355 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1356 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1357 : 
; 1358 : 		if (_First != _Last)
; 1359 : 			{	// worth doing, gather at end and rotate into place
; 1360 : 			size_type _Oldsize = size();
; 1361 : 
; 1362 : 			_TRY_BEGIN
; 1363 : 			for (; _First != _Last; ++_First)
; 1364 : 				push_back(*_First);	// append
; 1365 : 
; 1366 : 			_CATCH_ALL
; 1367 : 			erase(begin() + _Oldsize, end());
; 1368 : 			_RERAISE;
; 1369 : 			_CATCH_END
; 1370 : 
; 1371 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1372 : 			}
; 1373 : 		}
; 1374 : 
; 1375 : 	template<class _Iter>
; 1376 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1377 : 			forward_iterator_tag)
; 1378 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_VICONT(_Where) != this
; 1381 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1382 : 			|| this->_Mylast < _VIPTR(_Where))
; 1383 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1384 : 		_DEBUG_RANGE(_First, _Last);
; 1385 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1386 : 
; 1387 : 		size_type _Count = 0;
; 1388 : 		_Distance(_First, _Last, _Count);
; 1389 : 
; 1390 : 		if (_Count == 0)
; 1391 : 			;
; 1392 : 		else if (_Unused_capacity() < _Count)
; 1393 : 			{	// not enough room, reallocate
; 1394 : 			if (max_size() - size() < _Count)
; 1395 : 				_Xlen();	// result too long
; 1396 : 
; 1397 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1398 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1399 : 			pointer _Ptr = _Newvec;
; 1400 : 
; 1401 : 			_TRY_BEGIN
; 1402 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1403 : 				_Newvec);	// copy prefix
; 1404 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1405 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1406 : 				_Ptr);	// copy suffix
; 1407 : 			_CATCH_ALL
; 1408 : 			_Destroy(_Newvec, _Ptr);
; 1409 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1410 : 			_RERAISE;
; 1411 : 			_CATCH_END
; 1412 : 
; 1413 : 			_Count += size();
; 1414 : 			if (this->_Myfirst != pointer())
; 1415 : 				{	// destroy and deallocate old array
; 1416 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1417 : 				this->_Getal().deallocate(this->_Myfirst,
; 1418 : 					this->_Myend - this->_Myfirst);
; 1419 : 				}
; 1420 : 
; 1421 : 			this->_Orphan_all();
; 1422 : 			this->_Myend = _Newvec + _Capacity;
; 1423 : 			this->_Mylast = _Newvec + _Count;
; 1424 : 			this->_Myfirst = _Newvec;
; 1425 : 			}
; 1426 : 		else
; 1427 : 			{	// new stuff fits, append and rotate into place
; 1428 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1429 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1430 : 				this->_Mylast + _Count);
; 1431 : 			this->_Mylast += _Count;
; 1432 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1433 : 			}
; 1434 : 		}
; 1435 : 
; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 	iterator erase(const_iterator _Where)
; 1438 : 		{	// erase element at where
; 1439 : 		if (_VICONT(_Where) != this
; 1440 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1441 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1442 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1443 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1444 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1445 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1446 : 		--this->_Mylast;
; 1447 : 		return (_Make_iter(_Where));
; 1448 : 		}
; 1449 : 
; 1450 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 	iterator erase(const_iterator _Where)
; 1452 : 		{	// erase element at where
; 1453 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1454 : 			_VIPTR(_Where));
; 1455 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1456 : 		--this->_Mylast;
; 1457 : 		return (_Make_iter(_Where));
; 1458 : 		}
; 1459 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1460 : 
; 1461 : 	iterator erase(const_iterator _First_arg,
; 1462 : 		const_iterator _Last_arg)
; 1463 : 		{	// erase [_First, _Last)
; 1464 : 		if (_First_arg == begin() && _Last_arg == end())
; 1465 : 			clear();
; 1466 : 		else if (_First_arg != _Last_arg)
; 1467 : 			{	// clear partial
; 1468 : 			iterator _First = _Make_iter(_First_arg);
; 1469 : 			iterator _Last = _Make_iter(_Last_arg);
; 1470 : 
; 1471 : 			if (_First != _Last)
; 1472 : 				{	// worth doing, copy down over hole
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 				if (_Last < _First || _VICONT(_First) != this
; 1475 : 					|| _VIPTR(_First) < this->_Myfirst
; 1476 : 					|| this->_Mylast < _VIPTR(_Last))
; 1477 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1478 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1479 : 					_VIPTR(_First));
; 1480 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1484 : 					_VIPTR(_First));
; 1485 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1486 : 
; 1487 : 				_Destroy(_Ptr, this->_Mylast);
; 1488 : 				this->_Mylast = _Ptr;
; 1489 : 				}
; 1490 : 			}
; 1491 : 		return (_Make_iter(_First_arg));
; 1492 : 		}
; 1493 : 
; 1494 : 	void _Pop_back_n(size_type _Count)
; 1495 : 		{	// erase _Count elements at end
; 1496 : 		pointer _Ptr = this->_Mylast - _Count;
; 1497 : 
; 1498 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1499 : 		_Orphan_range(_Ptr, this->_Mylast);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 
; 1502 : 		_Destroy(_Ptr, this->_Mylast);
; 1503 : 		this->_Mylast = _Ptr;
; 1504 : 		}
; 1505 : 
; 1506 : 	void clear() _NOEXCEPT
; 1507 : 		{	// erase all
; 1508 : 		this->_Orphan_all();
; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1510 : 		this->_Mylast = this->_Myfirst;
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		{	// exchange contents with _Right
; 1515 : 		if (this == &_Right)
; 1516 : 			;	// same object, do nothing
; 1517 : 		else if (this->_Getal() == _Right._Getal())
; 1518 : 			{	// same allocator, swap control information
; 1519 : 			this->_Swap_all(_Right);
; 1520 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1521 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1522 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1529 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1530 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1531 : 			}
; 1532 : 
; 1533 : 		else
; 1534 : 			{	// containers are incompatible
; 1535 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1536 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1537 : 
; 1538 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1539 : 			_XSTD terminate();
; 1540 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1541 : 			}
; 1542 : 		}
; 1543 : 
; 1544 : protected:
; 1545 : 	bool _Buy(size_type _Capacity)
; 1546 : 		{	// allocate array with _Capacity elements
; 1547 : 		this->_Myfirst = pointer();
; 1548 : 		this->_Mylast = pointer();
; 1549 : 		this->_Myend = pointer();
; 1550 : 
; 1551 : 		if (_Capacity == 0)
; 1552 : 			return (false);
; 1553 : 		else if (max_size() < _Capacity)
; 1554 : 			_Xlen();	// result too long
; 1555 : 		else
; 1556 : 			{	// nonempty array, allocate storage
; 1557 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1558 : 			this->_Mylast = this->_Myfirst;
; 1559 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1560 : 			}
; 1561 : 		return (true);
; 1562 : 		}
; 1563 : 
; 1564 : 	void _Destroy(pointer _First, pointer _Last)
; 1565 : 		{	// destroy [_First, _Last) using allocator
; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}
; 1569 : 
; 1570 : 	size_type _Grow_to(size_type _Count) const
; 1571 : 		{	// grow by 50% or at least to _Count
; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00d16	b8 91 cf ba 01	 mov	 eax, 29020049		; 01bacf91H

; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));

  00d1b	47		 inc	 edi

; 884  : 			}
; 885  : 		}
; 886  : 
; 887  : 	iterator insert(const_iterator _Where, _Ty&& _Val)
; 888  : 		{	// insert by moving _Val at _Where
; 889  : 		return (emplace(_Where, _STD move(_Val)));
; 890  : 		}
; 891  : 
; 892  : 	template<class... _Valty>
; 893  : 		void emplace_back(_Valty&&... _Val)
; 894  : 		{	// insert by moving into element at end
; 895  : 		if (this->_Mylast == this->_Myend)
; 896  : 			_Reserve(1);
; 897  : 		_Orphan_range(this->_Mylast, this->_Mylast);
; 898  : 		this->_Getal().construct(this->_Mylast,
; 899  : 			_STD forward<_Valty>(_Val)...);
; 900  : 		++this->_Mylast;
; 901  : 		}
; 902  : 
; 903  : 	template<class... _Valty>
; 904  : 		iterator emplace(const_iterator _Where, _Valty&&... _Val)
; 905  : 		{	// insert by moving _Val at _Where
; 906  : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 907  : 
; 908  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 909  : 		if (size() < _Off)
; 910  : 			_DEBUG_ERROR("vector emplace iterator outside range");
; 911  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 912  : 
; 913  : 		emplace_back(_STD forward<_Valty>(_Val)...);
; 914  : 		_STD rotate(begin() + _Off, end() - 1, end());
; 915  : 		return (begin() + _Off);
; 916  : 		}
; 917  : 
; 918  : 
; 919  : 	vector(_XSTD initializer_list<value_type> _Ilist,
; 920  : 		const _Alloc& _Al = allocator_type())
; 921  : 		: _Mybase(_Al)
; 922  : 		{	// construct from initializer_list
; 923  : 		insert(begin(), _Ilist.begin(), _Ilist.end());
; 924  : 		}
; 925  : 
; 926  : 	_Myt& operator=(_XSTD initializer_list<value_type> _Ilist)
; 927  : 		{	// assign initializer_list
; 928  : 		assign(_Ilist.begin(), _Ilist.end());
; 929  : 		return (*this);
; 930  : 		}
; 931  : 
; 932  : 	void assign(_XSTD initializer_list<value_type> _Ilist)
; 933  : 		{	// assign initializer_list
; 934  : 		assign(_Ilist.begin(), _Ilist.end());
; 935  : 		}
; 936  : 
; 937  : 	iterator insert(const_iterator _Where,
; 938  : 		_XSTD initializer_list<value_type> _Ilist)
; 939  : 		{	// insert initializer_list
; 940  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 941  : 		}
; 942  : 
; 943  : 	~vector() _NOEXCEPT
; 944  : 		{	// destroy the object
; 945  : 		_Tidy();
; 946  : 		}
; 947  : 
; 948  : 	_Myt& operator=(const _Myt& _Right)
; 949  : 		{	// assign _Right
; 950  : 		if (this != &_Right)
; 951  : 			{	// different, assign it
; 952  : 			if (this->_Getal() != _Right._Getal()
; 953  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 954  : 				{	// change allocator before copying
; 955  : 				_Tidy();
; 956  : 				this->_Change_alloc(_Right._Getal());
; 957  : 				}
; 958  : 
; 959  : 			this->_Orphan_all();
; 960  : 
; 961  : 			if (_Right.empty())
; 962  : 				clear();	// new sequence empty, erase existing sequence
; 963  : 			else if (_Right.size() <= size())
; 964  : 				{	// enough elements, copy new and destroy old
; 965  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst,
; 966  : 					_Right._Mylast, this->_Myfirst);	// copy new
; 967  : 				_Destroy(_Ptr, this->_Mylast);	// destroy old
; 968  : 				this->_Mylast = this->_Myfirst + _Right.size();
; 969  : 				}
; 970  : 			else if (_Right.size() <= capacity())
; 971  : 				{	// enough room, copy and construct new
; 972  : 				pointer _Ptr = _Right._Myfirst + size();
; 973  : 				_Copy_impl(_Right._Myfirst,
; 974  : 					_Ptr, this->_Myfirst);
; 975  : 				this->_Mylast = _Ucopy(_Ptr, _Right._Mylast, this->_Mylast);
; 976  : 				}
; 977  : 			else
; 978  : 				{	// not enough room, allocate new array and construct new
; 979  : 				if (this->_Myfirst != pointer())
; 980  : 					{	// discard old array
; 981  : 					_Destroy(this->_Myfirst, this->_Mylast);
; 982  : 					this->_Getal().deallocate(this->_Myfirst,
; 983  : 						this->_Myend - this->_Myfirst);
; 984  : 					}
; 985  : 				if (_Buy(_Right.size()))
; 986  : 					_TRY_BEGIN
; 987  : 					this->_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 988  : 						this->_Myfirst);
; 989  : 					_CATCH_ALL
; 990  : 					_Tidy();
; 991  : 					_RERAISE;
; 992  : 					_CATCH_END
; 993  : 				}
; 994  : 			}
; 995  : 		return (*this);
; 996  : 		}
; 997  : 
; 998  : 	void reserve(size_type _Count)
; 999  : 		{	// determine new minimum length of allocated storage
; 1000 : 		if (capacity() < _Count)
; 1001 : 			{	// something to do, check and reallocate
; 1002 : 			if (max_size() < _Count)
; 1003 : 				_Xlen();
; 1004 : 			_Reallocate(_Count);
; 1005 : 			}
; 1006 : 		}
; 1007 : 
; 1008 : 	size_type capacity() const _NOEXCEPT
; 1009 : 		{	// return current length of allocated storage
; 1010 : 		return (this->_Myend - this->_Myfirst);

  00d1c	03 d6		 add	 edx, esi
  00d1e	c1 fa 07	 sar	 edx, 7
  00d21	8b ca		 mov	 ecx, edx
  00d23	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00d26	03 ca		 add	 ecx, edx

; 1149 : 		}
; 1150 : 
; 1151 : 	size_type max_size() const _NOEXCEPT
; 1152 : 		{	// return maximum possible length of sequence
; 1153 : 		return (this->_Getal().max_size());
; 1154 : 		}
; 1155 : 
; 1156 : 	bool empty() const _NOEXCEPT
; 1157 : 		{	// test if sequence is empty
; 1158 : 		return (this->_Myfirst == this->_Mylast);
; 1159 : 		}
; 1160 : 
; 1161 : 	_Alloc get_allocator() const _NOEXCEPT
; 1162 : 		{	// return allocator object for values
; 1163 : 		return (this->_Getal());
; 1164 : 		}
; 1165 : 
; 1166 : 	const_reference at(size_type _Pos) const
; 1167 : 		{	// subscript nonmutable sequence with checking
; 1168 : 		if (size() <= _Pos)
; 1169 : 			_Xran();
; 1170 : 		return (*(this->_Myfirst + _Pos));
; 1171 : 		}
; 1172 : 
; 1173 : 	reference at(size_type _Pos)
; 1174 : 		{	// subscript mutable sequence with checking
; 1175 : 		if (size() <= _Pos)
; 1176 : 			_Xran();
; 1177 : 		return (*(this->_Myfirst + _Pos));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reference operator[](size_type _Pos) const
; 1181 : 		{	// subscript nonmutable sequence
; 1182 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1183 : 		if (size() <= _Pos)
; 1184 : 			{	// report error
; 1185 : 			_DEBUG_ERROR("vector subscript out of range");
; 1186 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1187 : 			}
; 1188 : 
; 1189 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1190 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1191 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1192 : 
; 1193 : 		return (*(this->_Myfirst + _Pos));
; 1194 : 		}
; 1195 : 
; 1196 : 	reference operator[](size_type _Pos)
; 1197 : 		{	// subscript mutable sequence
; 1198 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1199 : 		if (size() <= _Pos)
; 1200 : 			{	// report error
; 1201 : 			_DEBUG_ERROR("vector subscript out of range");
; 1202 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1203 : 			}
; 1204 : 
; 1205 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1206 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1207 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1208 : 
; 1209 : 		return (*(this->_Myfirst + _Pos));
; 1210 : 		}
; 1211 : 
; 1212 : 	pointer data() _NOEXCEPT
; 1213 : 		{	// return address of first element
; 1214 : 		return (this->_Myfirst);
; 1215 : 		}
; 1216 : 
; 1217 : 	const_pointer data() const _NOEXCEPT
; 1218 : 		{	// return address of first element
; 1219 : 		return (this->_Myfirst);
; 1220 : 		}
; 1221 : 
; 1222 : 	reference front()
; 1223 : 		{	// return first element of mutable sequence
; 1224 : 		return (*begin());
; 1225 : 		}
; 1226 : 
; 1227 : 	const_reference front() const
; 1228 : 		{	// return first element of nonmutable sequence
; 1229 : 		return (*begin());
; 1230 : 		}
; 1231 : 
; 1232 : 	reference back()
; 1233 : 		{	// return last element of mutable sequence
; 1234 : 		return (*(end() - 1));
; 1235 : 		}
; 1236 : 
; 1237 : 	const_reference back() const
; 1238 : 		{	// return last element of nonmutable sequence
; 1239 : 		return (*(end() - 1));
; 1240 : 		}
; 1241 : 
; 1242 : 	void push_back(const value_type& _Val)
; 1243 : 		{	// insert element at end
; 1244 : 		if (_Inside(_STD addressof(_Val)))
; 1245 : 			{	// push back an element
; 1246 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1247 : 			if (this->_Mylast == this->_Myend)
; 1248 : 				_Reserve(1);
; 1249 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1250 : 			this->_Getal().construct(this->_Mylast,
; 1251 : 				this->_Myfirst[_Idx]);
; 1252 : 			++this->_Mylast;
; 1253 : 			}
; 1254 : 		else
; 1255 : 			{	// push back a non-element
; 1256 : 			if (this->_Mylast == this->_Myend)
; 1257 : 				_Reserve(1);
; 1258 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1259 : 			this->_Getal().construct(this->_Mylast,
; 1260 : 				_Val);
; 1261 : 			++this->_Mylast;
; 1262 : 			}
; 1263 : 		}
; 1264 : 
; 1265 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1266 : 	void pop_back()
; 1267 : 		{	// erase element at end
; 1268 : 		if (empty())
; 1269 : 			_DEBUG_ERROR("vector empty before pop");
; 1270 : 		else
; 1271 : 			{	// erase last element
; 1272 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1273 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1274 : 			--this->_Mylast;
; 1275 : 			}
; 1276 : 		}
; 1277 : 
; 1278 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1279 : 	void pop_back()
; 1280 : 		{	// erase element at end
; 1281 : 		this->_Getal().destroy(this->_Mylast - 1);
; 1282 : 		--this->_Mylast;
; 1283 : 		}
; 1284 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1285 : 
; 1286 : 	template<class _Iter>
; 1287 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1288 : 			void>::type
; 1289 : 		assign(_Iter _First, _Iter _Last)
; 1290 : 		{	// assign [_First, _Last)
; 1291 : 		clear();
; 1292 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1293 : 		}
; 1294 : 
; 1295 : 	template<class _Iter>
; 1296 : 		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
; 1297 : 		{	// assign [_First, _Last), input iterators
; 1298 : 		for (; _First != _Last; ++_First)
; 1299 : 			emplace_back(*_First);
; 1300 : 		}
; 1301 : 
; 1302 : 	template<class _Iter>
; 1303 : 		void _Assign(_Iter _First, _Iter _Last, forward_iterator_tag)
; 1304 : 		{	// assign [_First, _Last), forward iterators
; 1305 : 		if (_First == _Last)
; 1306 : 			return;	// nothing to do
; 1307 : 
; 1308 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1309 : 
; 1310 : 		if (capacity() < _Newsize)
; 1311 : 			{	// need more room, try to get it
; 1312 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1313 : 			_Tidy();
; 1314 : 			_Buy(_Newcapacity);
; 1315 : 			}
; 1316 : 
; 1317 : 		this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
; 1318 : 		}
; 1319 : 
; 1320 : 	void assign(size_type _Count, const value_type& _Val)
; 1321 : 		{	// assign _Count * _Val
; 1322 : 		clear();
; 1323 : 		insert(begin(), _Count, _Val);
; 1324 : 		}
; 1325 : 
; 1326 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1327 : 		{	// insert _Val at _Where
; 1328 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1329 : 		}
; 1330 : 
; 1331 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1332 : 		const _Ty& _Val)
; 1333 : 		{	// insert _Count * _Val at _Where
; 1334 : 		return (_Insert_n(_Where, _Count, _Val));
; 1335 : 		}
; 1336 : 
; 1337 : 	template<class _Iter>
; 1338 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1339 : 			iterator>::type
; 1340 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1341 : 		{	// insert [_First, _Last) at _Where
; 1342 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1343 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1344 : 		return (begin() + _Off);
; 1345 : 		}
; 1346 : 
; 1347 : 	template<class _Iter>
; 1348 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1349 : 			input_iterator_tag)
; 1350 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1351 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1352 : 
; 1353 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1354 : 		if (size() < _Off)
; 1355 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1356 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1357 : 
; 1358 : 		if (_First != _Last)
; 1359 : 			{	// worth doing, gather at end and rotate into place
; 1360 : 			size_type _Oldsize = size();
; 1361 : 
; 1362 : 			_TRY_BEGIN
; 1363 : 			for (; _First != _Last; ++_First)
; 1364 : 				push_back(*_First);	// append
; 1365 : 
; 1366 : 			_CATCH_ALL
; 1367 : 			erase(begin() + _Oldsize, end());
; 1368 : 			_RERAISE;
; 1369 : 			_CATCH_END
; 1370 : 
; 1371 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1372 : 			}
; 1373 : 		}
; 1374 : 
; 1375 : 	template<class _Iter>
; 1376 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1377 : 			forward_iterator_tag)
; 1378 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_VICONT(_Where) != this
; 1381 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1382 : 			|| this->_Mylast < _VIPTR(_Where))
; 1383 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1384 : 		_DEBUG_RANGE(_First, _Last);
; 1385 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1386 : 
; 1387 : 		size_type _Count = 0;
; 1388 : 		_Distance(_First, _Last, _Count);
; 1389 : 
; 1390 : 		if (_Count == 0)
; 1391 : 			;
; 1392 : 		else if (_Unused_capacity() < _Count)
; 1393 : 			{	// not enough room, reallocate
; 1394 : 			if (max_size() - size() < _Count)
; 1395 : 				_Xlen();	// result too long
; 1396 : 
; 1397 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1398 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1399 : 			pointer _Ptr = _Newvec;
; 1400 : 
; 1401 : 			_TRY_BEGIN
; 1402 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1403 : 				_Newvec);	// copy prefix
; 1404 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1405 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1406 : 				_Ptr);	// copy suffix
; 1407 : 			_CATCH_ALL
; 1408 : 			_Destroy(_Newvec, _Ptr);
; 1409 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1410 : 			_RERAISE;
; 1411 : 			_CATCH_END
; 1412 : 
; 1413 : 			_Count += size();
; 1414 : 			if (this->_Myfirst != pointer())
; 1415 : 				{	// destroy and deallocate old array
; 1416 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1417 : 				this->_Getal().deallocate(this->_Myfirst,
; 1418 : 					this->_Myend - this->_Myfirst);
; 1419 : 				}
; 1420 : 
; 1421 : 			this->_Orphan_all();
; 1422 : 			this->_Myend = _Newvec + _Capacity;
; 1423 : 			this->_Mylast = _Newvec + _Count;
; 1424 : 			this->_Myfirst = _Newvec;
; 1425 : 			}
; 1426 : 		else
; 1427 : 			{	// new stuff fits, append and rotate into place
; 1428 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1429 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1430 : 				this->_Mylast + _Count);
; 1431 : 			this->_Mylast += _Count;
; 1432 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1433 : 			}
; 1434 : 		}
; 1435 : 
; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 	iterator erase(const_iterator _Where)
; 1438 : 		{	// erase element at where
; 1439 : 		if (_VICONT(_Where) != this
; 1440 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1441 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1442 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1443 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1444 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1445 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1446 : 		--this->_Mylast;
; 1447 : 		return (_Make_iter(_Where));
; 1448 : 		}
; 1449 : 
; 1450 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 	iterator erase(const_iterator _Where)
; 1452 : 		{	// erase element at where
; 1453 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1454 : 			_VIPTR(_Where));
; 1455 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1456 : 		--this->_Mylast;
; 1457 : 		return (_Make_iter(_Where));
; 1458 : 		}
; 1459 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1460 : 
; 1461 : 	iterator erase(const_iterator _First_arg,
; 1462 : 		const_iterator _Last_arg)
; 1463 : 		{	// erase [_First, _Last)
; 1464 : 		if (_First_arg == begin() && _Last_arg == end())
; 1465 : 			clear();
; 1466 : 		else if (_First_arg != _Last_arg)
; 1467 : 			{	// clear partial
; 1468 : 			iterator _First = _Make_iter(_First_arg);
; 1469 : 			iterator _Last = _Make_iter(_Last_arg);
; 1470 : 
; 1471 : 			if (_First != _Last)
; 1472 : 				{	// worth doing, copy down over hole
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 				if (_Last < _First || _VICONT(_First) != this
; 1475 : 					|| _VIPTR(_First) < this->_Myfirst
; 1476 : 					|| this->_Mylast < _VIPTR(_Last))
; 1477 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1478 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1479 : 					_VIPTR(_First));
; 1480 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1484 : 					_VIPTR(_First));
; 1485 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1486 : 
; 1487 : 				_Destroy(_Ptr, this->_Mylast);
; 1488 : 				this->_Mylast = _Ptr;
; 1489 : 				}
; 1490 : 			}
; 1491 : 		return (_Make_iter(_First_arg));
; 1492 : 		}
; 1493 : 
; 1494 : 	void _Pop_back_n(size_type _Count)
; 1495 : 		{	// erase _Count elements at end
; 1496 : 		pointer _Ptr = this->_Mylast - _Count;
; 1497 : 
; 1498 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1499 : 		_Orphan_range(_Ptr, this->_Mylast);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 
; 1502 : 		_Destroy(_Ptr, this->_Mylast);
; 1503 : 		this->_Mylast = _Ptr;
; 1504 : 		}
; 1505 : 
; 1506 : 	void clear() _NOEXCEPT
; 1507 : 		{	// erase all
; 1508 : 		this->_Orphan_all();
; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1510 : 		this->_Mylast = this->_Myfirst;
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		{	// exchange contents with _Right
; 1515 : 		if (this == &_Right)
; 1516 : 			;	// same object, do nothing
; 1517 : 		else if (this->_Getal() == _Right._Getal())
; 1518 : 			{	// same allocator, swap control information
; 1519 : 			this->_Swap_all(_Right);
; 1520 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1521 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1522 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1529 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1530 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1531 : 			}
; 1532 : 
; 1533 : 		else
; 1534 : 			{	// containers are incompatible
; 1535 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1536 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1537 : 
; 1538 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1539 : 			_XSTD terminate();
; 1540 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1541 : 			}
; 1542 : 		}
; 1543 : 
; 1544 : protected:
; 1545 : 	bool _Buy(size_type _Capacity)
; 1546 : 		{	// allocate array with _Capacity elements
; 1547 : 		this->_Myfirst = pointer();
; 1548 : 		this->_Mylast = pointer();
; 1549 : 		this->_Myend = pointer();
; 1550 : 
; 1551 : 		if (_Capacity == 0)
; 1552 : 			return (false);
; 1553 : 		else if (max_size() < _Capacity)
; 1554 : 			_Xlen();	// result too long
; 1555 : 		else
; 1556 : 			{	// nonempty array, allocate storage
; 1557 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1558 : 			this->_Mylast = this->_Myfirst;
; 1559 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1560 : 			}
; 1561 : 		return (true);
; 1562 : 		}
; 1563 : 
; 1564 : 	void _Destroy(pointer _First, pointer _Last)
; 1565 : 		{	// destroy [_First, _Last) using allocator
; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}
; 1569 : 
; 1570 : 	size_type _Grow_to(size_type _Count) const
; 1571 : 		{	// grow by 50% or at least to _Count
; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00d28	8b d1		 mov	 edx, ecx
  00d2a	d1 ea		 shr	 edx, 1
  00d2c	2b c2		 sub	 eax, edx
  00d2e	3b c1		 cmp	 eax, ecx
  00d30	73 04		 jae	 SHORT $LN590@Render
  00d32	33 c9		 xor	 ecx, ecx
  00d34	eb 02		 jmp	 SHORT $LN591@Render
$LN590@Render:
  00d36	03 ca		 add	 ecx, edx
$LN591@Render:

; 1576 : 		if (_Capacity < _Count)

  00d38	3b cf		 cmp	 ecx, edi
  00d3a	0f 42 cf	 cmovb	 ecx, edi

; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));

  00d3d	51		 push	 ecx
  00d3e	8d 8d 08 fe ff
	ff		 lea	 ecx, DWORD PTR _VSVector$[ebp]
  00d44	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@IAEXI@Z ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Reallocate
  00d49	8b 85 10 fe ff
	ff		 mov	 eax, DWORD PTR _VSVector$[ebp+8]
  00d4f	8b bd 0c fe ff
	ff		 mov	 edi, DWORD PTR _VSVector$[ebp+4]
  00d55	f3 0f 10 8d 24
	fe ff ff	 movss	 xmm1, DWORD PTR $T18[ebp]
  00d5d	89 85 04 fe ff
	ff		 mov	 DWORD PTR _VSVector$2$[ebp], eax
  00d63	89 bd 2c fe ff
	ff		 mov	 DWORD PTR _VSVector$3$[ebp], edi
$LN565@Render:
; File a:\vs\vc\include\xmemory0

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00d69	85 ff		 test	 edi, edi
  00d6b	74 1a		 je	 SHORT $LN620@Render
; File a:\vs\vc\include\utility

; 157  : 		{	// construct from moved compatible pair

  00d6d	f3 0f 11 0f	 movss	 DWORD PTR [edi], xmm1
  00d71	8d b5 38 fe ff
	ff		 lea	 esi, DWORD PTR $T20[ebp+4]
$LN787@Render:
  00d77	83 c7 04	 add	 edi, 4
  00d7a	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00d7f	f3 a5		 rep movsd
  00d81	8b bd 2c fe ff
	ff		 mov	 edi, DWORD PTR _VSVector$3$[ebp]
$LN620@Render:
  00d87	8b b5 14 fe ff
	ff		 mov	 esi, DWORD PTR _it1$1$[ebp]
; File a:\vs\vc\include\vector

; 883  : 			++this->_Mylast;

  00d8d	81 c7 94 00 00
	00		 add	 edi, 148		; 00000094H
  00d93	89 bd 0c fe ff
	ff		 mov	 DWORD PTR _VSVector$[ebp+4], edi
  00d99	89 bd 2c fe ff
	ff		 mov	 DWORD PTR _VSVector$3$[ebp], edi
$LN16@Render:
; File a:\vs\vc\include\deque

; 370  : 		++_Myoff;

  00d9f	ff 85 28 fe ff
	ff		 inc	 DWORD PTR _it2$2$[ebp]
  00da5	ff 85 20 fe ff
	ff		 inc	 DWORD PTR _it1$2$[ebp]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 182  : 	for(;it2!=m_TimePositionDeque.end();++it2,++it1)

  00dab	e9 11 f6 ff ff	 jmp	 $LN789@Render
$LN746@Render:
; File a:\vs\vc\include\vector

; 1754 : 		_Xlength_error("vector<T> too long");

  00db0	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00db5	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN790@Render:
$LN782@Render:

; 194  : 		return (this->_Ptr - _Right._Ptr);

  00dba	8b b5 08 fe ff
	ff		 mov	 esi, DWORD PTR _VSVector$[ebp]
  00dc0	8b cf		 mov	 ecx, edi
  00dc2	2b ce		 sub	 ecx, esi
; File a:\vs\vc\include\algorithm

; 3164 : 	_STD sort(_First, _Last, less<>());

  00dc4	c6 85 24 fe ff
	ff 00		 mov	 BYTE PTR $T19[ebp], 0

; 3157 : 	_Sort(_Unchecked(_First), _Unchecked(_Last), _Last - _First, _Pred);

  00dcb	ff b5 24 fe ff
	ff		 push	 DWORD PTR $T19[ebp]
; File a:\vs\vc\include\vector

; 194  : 		return (this->_Ptr - _Right._Ptr);

  00dd1	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00dd6	f7 e9		 imul	 ecx
  00dd8	03 d1		 add	 edx, ecx
  00dda	c1 fa 07	 sar	 edx, 7
  00ddd	8b c2		 mov	 eax, edx
  00ddf	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00de2	03 c2		 add	 eax, edx
; File a:\vs\vc\include\algorithm

; 3157 : 	_Sort(_Unchecked(_First), _Unchecked(_Last), _Last - _First, _Pred);

  00de4	50		 push	 eax
  00de5	57		 push	 edi
  00de6	56		 push	 esi
  00de7	e8 00 00 00 00	 call	 ??$_Sort@PAU?$pair@MUTFlyVertexSet@@@std@@HU?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0HU?$less@X@0@@Z ; std::_Sort<std::pair<float,TFlyVertexSet> *,int,std::less<void> >
  00dec	83 c4 10	 add	 esp, 16			; 00000010H
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 273  : 	for(TFlyVertexSetVector::iterator it = VSVector.begin();it!=VSVector.end();++it)

  00def	3b f7		 cmp	 esi, edi
  00df1	74 1f		 je	 SHORT $LN1@Render
$LL677@Render:

; 274  : 	{
; 275  : 		STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLESTRIP, 4, it->second.v, sizeof(TVertex));

  00df3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00df9	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00dfc	6a 18		 push	 24			; 00000018H
  00dfe	50		 push	 eax
  00dff	6a 04		 push	 4
  00e01	6a 05		 push	 5
  00e03	e8 00 00 00 00	 call	 ?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; CStateManager::DrawPrimitiveUP
; File a:\vs\vc\include\vector

; 112  : 		++this->_Ptr;

  00e08	81 c6 94 00 00
	00		 add	 esi, 148		; 00000094H
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 273  : 	for(TFlyVertexSetVector::iterator it = VSVector.begin();it!=VSVector.end();++it)

  00e0e	3b f7		 cmp	 esi, edi
  00e10	75 e1		 jne	 SHORT $LL677@Render
$LN1@Render:

; 276  : 	}
; 277  : 	STATEMANAGER.RestoreRenderState(D3DRS_DESTBLEND);

  00e12	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00e18	6a 14		 push	 20			; 00000014H
  00e1a	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 278  : 	STATEMANAGER.RestoreRenderState(D3DRS_SRCBLEND);

  00e1f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00e25	6a 13		 push	 19			; 00000013H
  00e27	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 279  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHABLENDENABLE);

  00e2c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00e32	6a 1b		 push	 27			; 0000001bH
  00e34	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 280  : 	STATEMANAGER.RestoreRenderState(D3DRS_CULLMODE);

  00e39	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00e3f	6a 16		 push	 22			; 00000016H
  00e41	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 281  : 	STATEMANAGER.RestoreVertexShader();

  00e46	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00e4c	e8 00 00 00 00	 call	 ?RestoreVertexShader@CStateManager@@QAEXXZ ; CStateManager::RestoreVertexShader

; 282  : 	STATEMANAGER.RestoreTransform(D3DTS_WORLD);

  00e51	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00e57	68 00 01 00 00	 push	 256			; 00000100H
  00e5c	e8 00 00 00 00	 call	 ?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z ; CStateManager::RestoreTransform

; 283  : 	//STATEMANAGER.RestoreRenderState(D3DRS_ZWRITEENABLE);
; 284  : 	STATEMANAGER.RestoreRenderState(D3DRS_ZFUNC);

  00e61	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00e67	6a 17		 push	 23			; 00000017H
  00e69	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 285  : 	STATEMANAGER.RestoreRenderState(D3DRS_BLENDOP);

  00e6e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00e74	68 ab 00 00 00	 push	 171			; 000000abH
  00e79	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 286  : 
; 287  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHATESTENABLE);

  00e7e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00e84	6a 0f		 push	 15			; 0000000fH
  00e86	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 288  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHAFUNC);

  00e8b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00e91	6a 19		 push	 25			; 00000019H
  00e93	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 289  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHAREF);

  00e98	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00e9e	6a 18		 push	 24			; 00000018H
  00ea0	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 291  : }

  00ea5	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _s$[ebp]
  00eab	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00eaf	e8 00 00 00 00	 call	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
; File a:\vs\vc\include\vector

; 1623 : 		if (this->_Myfirst != pointer())

  00eb4	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _VSVector$[ebp]
  00eba	85 c0		 test	 eax, eax
  00ebc	74 09		 je	 SHORT $LN729@Render
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00ebe	50		 push	 eax
  00ebf	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00ec4	83 c4 04	 add	 esp, 4
$LN729@Render:
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 291  : }

  00ec7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00eca	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00ed1	59		 pop	 ecx
  00ed2	5f		 pop	 edi
  00ed3	5e		 pop	 esi
  00ed4	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00ed7	33 cd		 xor	 ecx, ebp
  00ed9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00ede	8b e5		 mov	 esp, ebp
  00ee0	5d		 pop	 ebp
  00ee1	c3		 ret	 0
$LN784@Render:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Render@CFlyTrace@@QAEXXZ$0:
  00000	8d 8d 08 fe ff
	ff		 lea	 ecx, DWORD PTR _VSVector$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::~vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >
__unwindfunclet$?Render@CFlyTrace@@QAEXXZ$1:
  0000b	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _s$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
__ehhandler$?Render@CFlyTrace@@QAEXXZ:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 8a 3c fd ff
	ff		 mov	 ecx, DWORD PTR [edx-708]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002d	33 c8		 xor	 ecx, eax
  0002f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00034	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Render@CFlyTrace@@QAEXXZ
  00039	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Render@CFlyTrace@@QAEXXZ ENDP				; CFlyTrace::Render
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
;	COMDAT ?Update@CFlyTrace@@QAEXXZ
_TEXT	SEGMENT
?Update@CFlyTrace@@QAEXXZ PROC				; CFlyTrace::Update, COMDAT
; _this$ = ecx

; 83   : 	
; 84   : }

  00000	c3		 ret	 0
?Update@CFlyTrace@@QAEXXZ ENDP				; CFlyTrace::Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\utility
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\deque
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\deque
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\deque
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
;	COMDAT ?UpdateNewPosition@CFlyTrace@@QAEXABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 16
$T2 = -28						; size = 12
$T3 = -16						; size = 12
tv297 = -4						; size = 4
tv305 = 8						; size = 4
_v3Position$ = 8					; size = 4
?UpdateNewPosition@CFlyTrace@@QAEXABUD3DXVECTOR3@@@Z PROC ; CFlyTrace::UpdateNewPosition, COMDAT
; _this$ = ecx

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx

; 63   : 	m_TimePositionDeque.push_front(TTimePosition(CTimer::Instance().GetCurrentSecond(),v3Position));

  0000a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  00010	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond
; File a:\vs\vc\include\utility

; 144  : 		{	// construct from moved values

  00015	8b 45 08	 mov	 eax, DWORD PTR _v3Position$[ebp]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 63   : 	m_TimePositionDeque.push_front(TTimePosition(CTimer::Instance().GetCurrentSecond(),v3Position));

  00018	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
; File a:\vs\vc\include\utility

; 144  : 		{	// construct from moved values

  0001b	d9 5d e0	 fstp	 DWORD PTR $T1[ebp]
  0001e	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00022	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00025	89 45 ec	 mov	 DWORD PTR $T1[ebp+12], eax
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 63   : 	m_TimePositionDeque.push_front(TTimePosition(CTimer::Instance().GetCurrentSecond(),v3Position));

  00028	8d 45 e0	 lea	 eax, DWORD PTR $T1[ebp]
  0002b	50		 push	 eax
; File a:\vs\vc\include\utility

; 144  : 		{	// construct from moved values

  0002c	66 0f d6 45 e4	 movq	 QWORD PTR $T1[ebp+4], xmm0
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 63   : 	m_TimePositionDeque.push_front(TTimePosition(CTimer::Instance().GetCurrentSecond(),v3Position));

  00031	e8 00 00 00 00	 call	 ?push_front@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAEX$$QAU?$pair@MUD3DXVECTOR3@@@2@@Z ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::push_front
; File a:\vs\vc\include\deque

; 1362 : 		return (this->_Mysize == 0);

  00036	83 7f 24 00	 cmp	 DWORD PTR [edi+36], 0
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 65   : 	while(!m_TimePositionDeque.empty() && m_TimePositionDeque.back().first+m_fTailLength<CTimer::Instance().GetCurrentSecond())

  0003a	74 6d		 je	 SHORT $LN39@UpdateNewP
  0003c	8d 64 24 00	 npad	 4
$LL2@UpdateNewP:
; File a:\vs\vc\include\deque

; 1416 : 		return (*(end() - 1));

  00040	6a 01		 push	 1
  00042	8d 45 f0	 lea	 eax, DWORD PTR $T3[ebp]
  00045	50		 push	 eax
  00046	8d 45 e4	 lea	 eax, DWORD PTR $T2[ebp]
  00049	50		 push	 eax
  0004a	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  0004d	e8 00 00 00 00	 call	 ?end@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@2@XZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::end
  00052	8b c8		 mov	 ecx, eax
  00054	e8 00 00 00 00	 call	 ??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator-
  00059	8b d0		 mov	 edx, eax
; File a:\vs\vc\include\xutility

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  0005b	8b 02		 mov	 eax, DWORD PTR [edx]
  0005d	85 c0		 test	 eax, eax
  0005f	74 02		 je	 SHORT $LN24@UpdateNewP
$LN23@UpdateNewP:
  00061	8b 00		 mov	 eax, DWORD PTR [eax]
$LN24@UpdateNewP:
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00063	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 1416 : 		return (*(end() - 1));

  00066	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00069	49		 dec	 ecx
  0006a	23 4a 08	 and	 ecx, DWORD PTR [edx+8]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 65   : 	while(!m_TimePositionDeque.empty() && m_TimePositionDeque.back().first+m_fTailLength<CTimer::Instance().GetCurrentSecond())

  0006d	f3 0f 10 47 10	 movss	 xmm0, DWORD PTR [edi+16]
; File a:\vs\vc\include\deque

; 1416 : 		return (*(end() - 1));

  00072	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 65   : 	while(!m_TimePositionDeque.empty() && m_TimePositionDeque.back().first+m_fTailLength<CTimer::Instance().GetCurrentSecond())

  00075	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  0007b	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  0007f	f3 0f 11 45 fc	 movss	 DWORD PTR tv297[ebp], xmm0
  00084	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond
  00089	d9 5d 08	 fstp	 DWORD PTR tv305[ebp]
  0008c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR tv305[ebp]
  00091	0f 2f 45 fc	 comiss	 xmm0, DWORD PTR tv297[ebp]
  00095	76 12		 jbe	 SHORT $LN39@UpdateNewP
; File a:\vs\vc\include\deque

; 1491 : 		if (--this->_Mysize == 0)

  00097	ff 4f 24	 dec	 DWORD PTR [edi+36]
  0009a	75 07		 jne	 SHORT $LN29@UpdateNewP

; 1492 : 			this->_Myoff = 0;

  0009c	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], 0
$LN29@UpdateNewP:

; 1362 : 		return (this->_Mysize == 0);

  000a3	83 7f 24 00	 cmp	 DWORD PTR [edi+36], 0
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 65   : 	while(!m_TimePositionDeque.empty() && m_TimePositionDeque.back().first+m_fTailLength<CTimer::Instance().GetCurrentSecond())

  000a7	75 97		 jne	 SHORT $LL2@UpdateNewP
$LN39@UpdateNewP:
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi

; 66   : 	{
; 67   : 		m_TimePositionDeque.pop_back();
; 68   : 	}
; 69   : }

  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c2 04 00	 ret	 4
?UpdateNewPosition@CFlyTrace@@QAEXABUD3DXVECTOR3@@@Z ENDP ; CFlyTrace::UpdateNewPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
;	COMDAT ?Create@CFlyTrace@@QAEXABUTFlyingAttachData@CFlyingData@@@Z
_TEXT	SEGMENT
_rFlyingAttachData$ = 8					; size = 4
?Create@CFlyTrace@@QAEXABUTFlyingAttachData@CFlyingData@@@Z PROC ; CFlyTrace::Create, COMDAT
; _this$ = ecx

; 72   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   : 	//assert(rFlyingAttachData.bHasTail);
; 74   : 	m_dwColor = rFlyingAttachData.dwTailColor;

  00003	8b 55 08	 mov	 edx, DWORD PTR _rFlyingAttachData$[ebp]
  00006	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00009	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 75   : 	m_fTailLength = rFlyingAttachData.fTailLength;

  0000c	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  0000f	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 76   : 	m_fSize = rFlyingAttachData.fTailSize;

  00012	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00015	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 77   : 	m_bRectShape = rFlyingAttachData.bRectShape;

  00018	8a 42 30	 mov	 al, BYTE PTR [edx+48]
  0001b	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 78   : }

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?Create@CFlyTrace@@QAEXABUTFlyingAttachData@CFlyingData@@@Z ENDP ; CFlyTrace::Create
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\deque
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
;	COMDAT ?Destroy@CFlyTrace@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CFlyTrace@@QAEXXZ PROC				; CFlyTrace::Destroy, COMDAT
; _this$ = ecx

; 55   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 56   : 	m_TimePositionDeque.clear();

  00003	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
; File a:\vs\vc\include\deque

; 1643 : 		_Tidy();

  00006	e8 00 00 00 00	 call	 ?_Tidy@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@IAEXXZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Tidy
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 58   : 	__Initialize();

  0000b	8b ce		 mov	 ecx, esi
  0000d	5e		 pop	 esi
  0000e	e9 00 00 00 00	 jmp	 ?__Initialize@CFlyTrace@@IAEXXZ ; CFlyTrace::__Initialize
?Destroy@CFlyTrace@@QAEXXZ ENDP				; CFlyTrace::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
;	COMDAT ??1CFlyTrace@@UAE@XZ
_TEXT	SEGMENT
??1CFlyTrace@@UAE@XZ PROC				; CFlyTrace::~CFlyTrace, COMDAT
; _this$ = ecx

; 41   : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
  00004	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CFlyTrace@@6B@

; 42   : 	Destroy();

  0000a	e8 00 00 00 00	 call	 ?Destroy@CFlyTrace@@QAEXXZ ; CFlyTrace::Destroy
; File a:\vs\vc\include\deque

; 1215 : 		_Tidy();

  0000f	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  00012	e8 00 00 00 00	 call	 ?_Tidy@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@IAEXXZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Tidy
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00017	ff 77 14	 push	 DWORD PTR [edi+20]
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001f	83 c4 04	 add	 esp, 4
; File a:\vs\vc\include\deque

; 907  : 		this->_Myproxy = 0;

  00022	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 43   : }

  00029	8b cf		 mov	 ecx, edi
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
??1CFlyTrace@@UAE@XZ ENDP				; CFlyTrace::~CFlyTrace
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\xmemory0
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp
;	COMDAT ??0CFlyTrace@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CFlyTrace@@QAE@XZ PROC				; CFlyTrace::CFlyTrace, COMDAT
; _this$ = ecx

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CFlyTrace@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002a	e8 00 00 00 00	 call	 ??0CScreen@@QAE@XZ	; CScreen::CScreen
  0002f	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CFlyTrace@@6B@
  00035	8d 77 14	 lea	 esi, DWORD PTR [edi+20]
; File a:\vs\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00038	6a 08		 push	 8
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 27   : {

  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File a:\vs\vc\include\xutility

; 80   : 		{	// construct childless container

  00041	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File a:\vs\vc\include\deque

; 773  : 		_Map = _Mapptr();

  00047	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 774  : 		_Mapsize = 0;

  0004e	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 775  : 		_Myoff = 0;

  00055	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 776  : 		_Mysize = 0;

  0005c	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File a:\vs\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00063	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00068	83 c4 04	 add	 esp, 4
  0006b	85 c0		 test	 eax, eax
  0006d	75 05		 jne	 SHORT $LN23@CFlyTrace

; 29   : 		_Xbad_alloc();	// report no memory

  0006f	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN54@CFlyTrace:
$LN23@CFlyTrace:
  00074	89 06		 mov	 DWORD PTR [esi], eax
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 28   : 	__Initialize();

  00076	8b cf		 mov	 ecx, edi
; File a:\vs\vc\include\xmemory0

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00078	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0007e	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File a:\vs\vc\include\deque

; 897  : 		this->_Myproxy->_Mycont = this;

  00085	8b 06		 mov	 eax, DWORD PTR [esi]
  00087	89 30		 mov	 DWORD PTR [eax], esi
; File a:\from c\desktop\serwer\source\source client\client\gamelib\flytrace.cpp

; 28   : 	__Initialize();

  00089	e8 00 00 00 00	 call	 ?__Initialize@CFlyTrace@@IAEXXZ ; CFlyTrace::__Initialize

; 29   : 
; 30   : 	/*
; 31   : 	// Code for texture
; 32   : 	CGraphicImage * pImage = (CGraphicImage *)CResourceManager::Instance().GetResourcePointer("d:/ray.jpg");
; 33   : 	m_ImageInstance.SetImagePointer(pImage);
; 34   : 	
; 35   : 	CGraphicTexture * pTexture = m_ImageInstance.GetTexturePointer();
; 36   : 	m_lpTexture = pTexture->GetD3DTexture();
; 37   : 	*/
; 38   : }

  0008e	8b c7		 mov	 eax, edi
  00090	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00093	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009a	59		 pop	 ecx
  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
$LN53@CFlyTrace:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CFlyTrace@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
__ehhandler$??0CFlyTrace@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CFlyTrace@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CFlyTrace@@QAE@XZ ENDP				; CFlyTrace::CFlyTrace
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterbase\singleton.h
;	COMDAT ?Instance@?$CSingleton@VCCameraManager@@@@SAAAVCCameraManager@@XZ
_TEXT	SEGMENT
?Instance@?$CSingleton@VCCameraManager@@@@SAAAVCCameraManager@@XZ PROC ; CSingleton<CCameraManager>::Instance, COMDAT

; 26   : 		assert(ms_singleton);
; 27   : 		return (*ms_singleton);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton

; 28   : 	}

  00005	c3		 ret	 0
?Instance@?$CSingleton@VCCameraManager@@@@SAAAVCCameraManager@@XZ ENDP ; CSingleton<CCameraManager>::Instance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterlib\camera.h
;	COMDAT ?GetViewMatrix@CCamera@@QBEABUD3DXMATRIX@@XZ
_TEXT	SEGMENT
?GetViewMatrix@CCamera@@QBEABUD3DXMATRIX@@XZ PROC	; CCamera::GetViewMatrix, COMDAT
; _this$ = ecx

; 174  : 		const D3DXMATRIX & GetViewMatrix() const		{ return m_matView; }

  00000	8d 41 6c	 lea	 eax, DWORD PTR [ecx+108]
  00003	c3		 ret	 0
?GetViewMatrix@CCamera@@QBEABUD3DXMATRIX@@XZ ENDP	; CCamera::GetViewMatrix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterlib\camera.h
;	COMDAT ?GetView@CCamera@@QBEABUD3DXVECTOR3@@XZ
_TEXT	SEGMENT
?GetView@CCamera@@QBEABUD3DXVECTOR3@@XZ PROC		; CCamera::GetView, COMDAT
; _this$ = ecx

; 171  : 		const D3DXVECTOR3 & GetView() const		{ return m_v3View; }

  00000	8d 41 54	 lea	 eax, DWORD PTR [ecx+84]
  00003	c3		 ret	 0
?GetView@CCamera@@QBEABUD3DXVECTOR3@@XZ ENDP		; CCamera::GetView
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterlib\camera.h
;	COMDAT ?GetEye@CCamera@@QBEABUD3DXVECTOR3@@XZ
_TEXT	SEGMENT
?GetEye@CCamera@@QBEABUD3DXVECTOR3@@XZ PROC		; CCamera::GetEye, COMDAT
; _this$ = ecx

; 168  : 		const D3DXVECTOR3 & GetEye() const		{ return m_v3Eye; }

  00000	8d 41 30	 lea	 eax, DWORD PTR [ecx+48]
  00003	c3		 ret	 0
?GetEye@CCamera@@QBEABUD3DXVECTOR3@@XZ ENDP		; CCamera::GetEye
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterbase\singleton.h
;	COMDAT ?Instance@?$CSingleton@VCStateManager@@@@SAAAVCStateManager@@XZ
_TEXT	SEGMENT
?Instance@?$CSingleton@VCStateManager@@@@SAAAVCStateManager@@XZ PROC ; CSingleton<CStateManager>::Instance, COMDAT

; 26   : 		assert(ms_singleton);
; 27   : 		return (*ms_singleton);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton

; 28   : 	}

  00005	c3		 ret	 0
?Instance@?$CSingleton@VCStateManager@@@@SAAAVCStateManager@@XZ ENDP ; CSingleton<CStateManager>::Instance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterlib\grpscreen.h
;	COMDAT ?GetFrustum@CScreen@@SAAAVFrustum@@XZ
_TEXT	SEGMENT
?GetFrustum@CScreen@@SAAAVFrustum@@XZ PROC		; CScreen::GetFrustum, COMDAT

; 73   : 	static Frustum & GetFrustum() { return ms_frustum; }

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?ms_frustum@CScreen@@1VFrustum@@A ; CScreen::ms_frustum
  00005	c3		 ret	 0
?GetFrustum@CScreen@@SAAAVFrustum@@XZ ENDP		; CScreen::GetFrustum
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
;	COMDAT ??0Vector3d@@QAE@MMM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??0Vector3d@@QAE@MMM@Z PROC				; Vector3d::Vector3d, COMDAT
; _this$ = ecx

; 35   : 	Vector3d(float a,float b,float c) // construct with initial point.

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 36   : 	{
; 37   : 		x = a;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _a$[ebp]

; 38   : 		y = b;
; 39   : 		z = c;
; 40   : 	};

  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _b$[ebp]
  00013	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0
  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _c$[ebp]
  0001d	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??0Vector3d@@QAE@MMM@Z ENDP				; Vector3d::Vector3d
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterbase\singleton.h
;	COMDAT ?Instance@?$CSingleton@VCTimer@@@@SAAAVCTimer@@XZ
_TEXT	SEGMENT
?Instance@?$CSingleton@VCTimer@@@@SAAAVCTimer@@XZ PROC	; CSingleton<CTimer>::Instance, COMDAT

; 26   : 		assert(ms_singleton);
; 27   : 		return (*ms_singleton);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton

; 28   : 	}

  00005	c3		 ret	 0
?Instance@?$CSingleton@VCTimer@@@@SAAAVCTimer@@XZ ENDP	; CSingleton<CTimer>::Instance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
;	COMDAT ?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z
_TEXT	SEGMENT
_pOut$ = 8						; size = 4
?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z PROC	; D3DXMatrixIdentity, COMDAT

; 1510 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1511 : #ifdef D3DX_DEBUG
; 1512 :     if(!pOut)
; 1513 :         return NULL;
; 1514 : #endif
; 1515 : 
; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =
; 1517 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1518 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pOut$[ebp]
  00006	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0
  0000d	c7 40 34 00 00
	00 00		 mov	 DWORD PTR [eax+52], 0
  00014	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0
  0001b	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0
  00022	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0
  00029	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0
  00030	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0
  00037	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0
  0003e	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  00045	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  0004c	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  00053	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  0005a	c7 40 3c 00 00
	80 3f		 mov	 DWORD PTR [eax+60], 1065353216 ; 3f800000H
  00061	c7 40 28 00 00
	80 3f		 mov	 DWORD PTR [eax+40], 1065353216 ; 3f800000H
  00068	c7 40 14 00 00
	80 3f		 mov	 DWORD PTR [eax+20], 1065353216 ; 3f800000H
  0006f	c7 00 00 00 80
	3f		 mov	 DWORD PTR [eax], 1065353216 ; 3f800000H

; 1522 :     return pOut;
; 1523 : }

  00075	5d		 pop	 ebp
  00076	c3		 ret	 0
?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ENDP	; D3DXMatrixIdentity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
;	COMDAT ?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z
_TEXT	SEGMENT
_v$ = -12						; size = 12
_pOut$ = 8						; size = 4
_pV1$ = 12						; size = 4
_pV2$ = 16						; size = 4
?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z PROC	; D3DXVec3Cross, COMDAT

; 1269 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1270 :     D3DXVECTOR3 v;
; 1271 : 
; 1272 : #ifdef D3DX_DEBUG
; 1273 :     if(!pOut || !pV1 || !pV2)
; 1274 :         return NULL;
; 1275 : #endif
; 1276 : 
; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00006	8b 45 10	 mov	 eax, DWORD PTR _pV2$[ebp]
  00009	8b 4d 0c	 mov	 ecx, DWORD PTR _pV1$[ebp]
  0000c	f3 0f 10 78 08	 movss	 xmm7, DWORD PTR [eax+8]
  00011	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00016	f3 0f 59 41 08	 mulss	 xmm0, DWORD PTR [ecx+8]
  0001b	f3 0f 59 79 04	 mulss	 xmm7, DWORD PTR [ecx+4]

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00020	f3 0f 10 18	 movss	 xmm3, DWORD PTR [eax]
  00024	f3 0f 10 11	 movss	 xmm2, DWORD PTR [ecx]
  00028	0f 28 cb	 movaps	 xmm1, xmm3
  0002b	f3 0f 59 49 08	 mulss	 xmm1, DWORD PTR [ecx+8]
  00030	f3 0f 5c f8	 subss	 xmm7, xmm0

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00034	f3 0f 59 59 04	 mulss	 xmm3, DWORD PTR [ecx+4]
  00039	0f 28 c2	 movaps	 xmm0, xmm2
  0003c	f3 0f 59 40 08	 mulss	 xmm0, DWORD PTR [eax+8]
  00041	f3 0f 59 50 04	 mulss	 xmm2, DWORD PTR [eax+4]

; 1280 : 
; 1281 :     *pOut = v;

  00046	8b 45 08	 mov	 eax, DWORD PTR _pOut$[ebp]
  00049	f3 0f 5c c8	 subss	 xmm1, xmm0
  0004d	f3 0f 5c d3	 subss	 xmm2, xmm3
  00051	0f 14 f9	 unpcklps xmm7, xmm1
  00054	66 0f d6 38	 movq	 QWORD PTR [eax], xmm7
  00058	f3 0f 11 55 fc	 movss	 DWORD PTR _v$[ebp+8], xmm2
  0005d	8b 4d fc	 mov	 ecx, DWORD PTR _v$[ebp+8]
  00060	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1282 :     return pOut;
; 1283 : }

  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z ENDP	; D3DXVec3Cross
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
;	COMDAT ?D3DXVec3Dot@@YAMPBUD3DXVECTOR3@@0@Z
_TEXT	SEGMENT
_pV1$ = 8						; size = 4
_pV2$ = 12						; size = 4
?D3DXVec3Dot@@YAMPBUD3DXVECTOR3@@0@Z PROC		; D3DXVec3Dot, COMDAT

; 1258 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1259 : #ifdef D3DX_DEBUG
; 1260 :     if(!pV1 || !pV2)
; 1261 :         return 0.0f;
; 1262 : #endif
; 1263 : 
; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pV1$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR _pV2$[ebp]
  00009	d9 41 04	 fld	 DWORD PTR [ecx+4]
  0000c	d8 48 04	 fmul	 DWORD PTR [eax+4]
  0000f	d9 01		 fld	 DWORD PTR [ecx]
  00011	d8 08		 fmul	 DWORD PTR [eax]
  00013	de c1		 faddp	 ST(1), ST(0)
  00015	d9 41 08	 fld	 DWORD PTR [ecx+8]
  00018	d8 48 08	 fmul	 DWORD PTR [eax+8]
  0001b	de c1		 faddp	 ST(1), ST(0)

; 1265 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?D3DXVec3Dot@@YAMPBUD3DXVECTOR3@@0@Z ENDP		; D3DXVec3Dot
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 177  :     D3DXMATRIX() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
;	COMDAT ??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z PROC			; D3DXVECTOR3::operator-, COMDAT
; _this$ = ecx

; 262  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  00006	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]

; 180  :     x = fx;

  0000a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0000d	f3 0f 5c 02	 subss	 xmm0, DWORD PTR [edx]

; 180  :     x = fx;

  00011	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00015	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0001a	f3 0f 5c 42 04	 subss	 xmm0, DWORD PTR [edx+4]

; 181  :     y = fy;

  0001f	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00024	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00029	f3 0f 5c 42 08	 subss	 xmm0, DWORD PTR [edx+8]

; 182  :     z = fz;

  0002e	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 264  : }

  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
;	COMDAT ??ZD3DXVECTOR3@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??ZD3DXVECTOR3@@QAEAAU0@ABU0@@Z PROC			; D3DXVECTOR3::operator-=, COMDAT
; _this$ = ecx

; 212  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  :     x -= v.x;

  00003	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00006	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0000a	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  0000e	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 214  :     y -= v.y;

  00012	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  00017	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [eax+4]
  0001c	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 215  :     z -= v.z;

  00021	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00026	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]

; 216  :     return *this;

  0002b	8b c1		 mov	 eax, ecx
  0002d	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 217  : }

  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??ZD3DXVECTOR3@@QAEAAU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator-=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
;	COMDAT ??YD3DXVECTOR3@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??YD3DXVECTOR3@@QAEAAU0@ABU0@@Z PROC			; D3DXVECTOR3::operator+=, COMDAT
; _this$ = ecx

; 203  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 204  :     x += v.x;

  00003	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00006	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0000a	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  0000e	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 205  :     y += v.y;

  00012	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00017	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  0001c	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 206  :     z += v.z;

  00021	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]

; 207  :     return *this;

  00026	8b c1		 mov	 eax, ecx
  00028	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  0002d	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 208  : }

  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??YD3DXVECTOR3@@QAEAAU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 179  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 180  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]

; 181  :     y = fy;
; 182  :     z = fz;
; 183  : }

  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0
  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 89   :     D3DXVECTOR3() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
;	COMDAT ??0D3DXVECTOR2@@QAE@MM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
??0D3DXVECTOR2@@QAE@MM@Z PROC				; D3DXVECTOR2::D3DXVECTOR2, COMDAT
; _this$ = ecx

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 41   :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]

; 42   :     y = fy;
; 43   : }

  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0
  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
??0D3DXVECTOR2@@QAE@MM@Z ENDP				; D3DXVECTOR2::D3DXVECTOR2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.h
;	COMDAT ??0D3DXVECTOR2@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR2@@QAE@XZ PROC				; D3DXVECTOR2::D3DXVECTOR2, COMDAT
; _this$ = ecx

; 46   :     D3DXVECTOR2() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR2@@QAE@XZ ENDP				; D3DXVECTOR2::D3DXVECTOR2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
_TEXT	SEGMENT
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ PROC ; std::_Iterator_base12::_Getcont, COMDAT
; _this$ = ecx

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	85 c0		 test	 eax, eax
  00004	75 01		 jne	 SHORT $LN3@Getcont

; 184  : 		}

  00006	c3		 ret	 0
$LN3@Getcont:

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00007	8b 00		 mov	 eax, DWORD PTR [eax]

; 184  : 		}

  00009	c3		 ret	 0
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ENDP ; std::_Iterator_base12::_Getcont
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
__Parent$ = 8						; size = 4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt, COMDAT
; _this$ = ecx

; 148  : 		{	// adopt this iterator by parent

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 149  : 		if (_Parent == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parent$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 04		 je	 SHORT $LN1@Adopt

; 150  : 			{	// no future parent, just disown current parent
; 151  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 152  : 			_Lockit _Lock(_LOCK_DEBUG);
; 153  : 			_Orphan_me();
; 154  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 155  : 			}
; 156  : 		else
; 157  : 			{	// have a parent, do adoption
; 158  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 159  : 
; 160  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 161  : 			if (_Myproxy != _Parent_proxy)
; 162  : 				{	// change parentage
; 163  : 				_Lockit _Lock(_LOCK_DEBUG);
; 164  : 				_Orphan_me();
; 165  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 166  : 				_Parent_proxy->_Myfirstiter = this;
; 167  : 				_Myproxy = _Parent_proxy;
; 168  : 				}
; 169  : 
; 170  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 171  : 			_Myproxy = _Parent_proxy;

  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	89 01		 mov	 DWORD PTR [ecx], eax
$LN1@Adopt:

; 172  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 173  : 			}
; 174  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??1_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
??1_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::~_Iterator_base12, COMDAT
; _this$ = ecx

; 141  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 142  : 		_Lockit _Lock(_LOCK_DEBUG);
; 143  : 		_Orphan_me();
; 144  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 145  : 		}

  00000	c3		 ret	 0
??1_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::~_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z PROC		; std::_Iterator_base12::operator=, COMDAT
; _this$ = ecx

; 124  : 		{	// assign an iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 125  : 		if (_Myproxy == _Right._Myproxy)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	39 01		 cmp	 DWORD PTR [ecx], eax
  0000a	74 0e		 je	 SHORT $LN12@operator

; 126  : 			;
; 127  : 		else if (_Right._Myproxy != 0)

  0000c	85 c0		 test	 eax, eax
  0000e	74 0a		 je	 SHORT $LN12@operator

; 128  : 			_Adopt(_Right._Myproxy->_Mycont);

  00010	8b 00		 mov	 eax, DWORD PTR [eax]

; 138  : 
; 139  : 	~_Iterator_base12() _NOEXCEPT
; 140  : 		{	// destroy the iterator
; 141  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 142  : 		_Lockit _Lock(_LOCK_DEBUG);
; 143  : 		_Orphan_me();
; 144  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 145  : 		}
; 146  : 
; 147  : 	void _Adopt(const _Container_base12 *_Parent)
; 148  : 		{	// adopt this iterator by parent
; 149  : 		if (_Parent == 0)

  00012	85 c0		 test	 eax, eax
  00014	74 04		 je	 SHORT $LN12@operator

; 150  : 			{	// no future parent, just disown current parent
; 151  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 152  : 			_Lockit _Lock(_LOCK_DEBUG);
; 153  : 			_Orphan_me();
; 154  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 155  : 			}
; 156  : 		else
; 157  : 			{	// have a parent, do adoption
; 158  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 159  : 
; 160  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 161  : 			if (_Myproxy != _Parent_proxy)
; 162  : 				{	// change parentage
; 163  : 				_Lockit _Lock(_LOCK_DEBUG);
; 164  : 				_Orphan_me();
; 165  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 166  : 				_Parent_proxy->_Myfirstiter = this;
; 167  : 				_Myproxy = _Parent_proxy;
; 168  : 				}
; 169  : 
; 170  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 171  : 			_Myproxy = _Parent_proxy;

  00016	8b 00		 mov	 eax, DWORD PTR [eax]
  00018	89 01		 mov	 DWORD PTR [ecx], eax
$LN12@operator:

; 129  : 		else
; 130  : 			{	// becoming invalid, disown current parent
; 131  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 132  : 			_Lockit _Lock(_LOCK_DEBUG);
; 133  : 			_Orphan_me();
; 134  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 135  : 			}
; 136  : 		return (*this);

  0001a	8b c1		 mov	 eax, ecx

; 137  : 		}

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ENDP		; std::_Iterator_base12::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??0_Iterator_base12@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0_Iterator_base12@std@@QAE@ABU01@@Z PROC		; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 119  : 		{	// copy an iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 122  : 
; 123  : 	_Iterator_base12& operator=(const _Iterator_base12& _Right)
; 124  : 		{	// assign an iterator
; 125  : 		if (_Myproxy == _Right._Myproxy)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]

; 119  : 		{	// copy an iterator

  00006	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0000c	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 122  : 
; 123  : 	_Iterator_base12& operator=(const _Iterator_base12& _Right)
; 124  : 		{	// assign an iterator
; 125  : 		if (_Myproxy == _Right._Myproxy)

  00013	8b 00		 mov	 eax, DWORD PTR [eax]
  00015	85 c0		 test	 eax, eax
  00017	74 0a		 je	 SHORT $LN15@Iterator_b

; 126  : 			;
; 127  : 		else if (_Right._Myproxy != 0)
; 128  : 			_Adopt(_Right._Myproxy->_Mycont);

  00019	8b 00		 mov	 eax, DWORD PTR [eax]

; 129  : 		else
; 130  : 			{	// becoming invalid, disown current parent
; 131  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 132  : 			_Lockit _Lock(_LOCK_DEBUG);
; 133  : 			_Orphan_me();
; 134  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 135  : 			}
; 136  : 		return (*this);
; 137  : 		}
; 138  : 
; 139  : 	~_Iterator_base12() _NOEXCEPT
; 140  : 		{	// destroy the iterator
; 141  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 142  : 		_Lockit _Lock(_LOCK_DEBUG);
; 143  : 		_Orphan_me();
; 144  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 145  : 		}
; 146  : 
; 147  : 	void _Adopt(const _Container_base12 *_Parent)
; 148  : 		{	// adopt this iterator by parent
; 149  : 		if (_Parent == 0)

  0001b	85 c0		 test	 eax, eax
  0001d	74 04		 je	 SHORT $LN15@Iterator_b

; 150  : 			{	// no future parent, just disown current parent
; 151  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 152  : 			_Lockit _Lock(_LOCK_DEBUG);
; 153  : 			_Orphan_me();
; 154  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 155  : 			}
; 156  : 		else
; 157  : 			{	// have a parent, do adoption
; 158  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 159  : 
; 160  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 161  : 			if (_Myproxy != _Parent_proxy)
; 162  : 				{	// change parentage
; 163  : 				_Lockit _Lock(_LOCK_DEBUG);
; 164  : 				_Orphan_me();
; 165  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 166  : 				_Parent_proxy->_Myfirstiter = this;
; 167  : 				_Myproxy = _Parent_proxy;
; 168  : 				}
; 169  : 
; 170  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 171  : 			_Myproxy = _Parent_proxy;

  0001f	8b 00		 mov	 eax, DWORD PTR [eax]
  00021	89 01		 mov	 DWORD PTR [ecx], eax
$LN15@Iterator_b:

; 120  : 		*this = _Right;
; 121  : 		}

  00023	8b c1		 mov	 eax, ecx
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??0_Iterator_base12@std@@QAE@ABU01@@Z ENDP		; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??0_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
??0_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 114  : 		{	// construct orphaned iterator

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 115  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c3		 ret	 0
??0_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx

; 215  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 216  : 	if (_Myproxy != 0)
; 217  : 		{	// proxy allocated, drain it
; 218  : 		_Lockit _Lock(_LOCK_DEBUG);
; 219  : 
; 220  : 		for (_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;
; 221  : 			*_Pnext != 0; *_Pnext = (*_Pnext)->_Mynextiter)
; 222  : 			(*_Pnext)->_Myproxy = 0;
; 223  : 		_Myproxy->_Myfirstiter = 0;
; 224  : 		}
; 225  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 226  : 	}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??1_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
??1_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::~_Container_base12, COMDAT
; _this$ = ecx

; 95   : 		_Orphan_all();
; 96   : 		}

  00000	c3		 ret	 0
??1_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::~_Container_base12
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx

; 80   : 		{	// construct childless container

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 81   : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??0_Container_proxy@std@@QAE@XZ
_TEXT	SEGMENT
??0_Container_proxy@std@@QAE@XZ PROC			; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 68   : 		{	// construct from pointers

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 69   : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c3		 ret	 0
??0_Container_proxy@std@@QAE@XZ ENDP			; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 55   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 44   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 65   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 60   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 61   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
tv65 = 8						; size = 4
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 1066 :         {return (fabsf(_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __X$[ebp]

; 687  :     return (float)fabs(_X);

  00008	0f 5a c0	 cvtps2pd xmm0, xmm0
  0000b	66 0f 54 05 00
	00 00 00	 andpd	 xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  00013	66 0f 5a c0	 cvtpd2ps xmm0, xmm0

; 1066 :         {return (fabsf(_X)); }

  00017	f3 0f 11 45 08	 movss	 DWORD PTR tv65[ebp], xmm0
  0001c	d9 45 08	 fld	 DWORD PTR tv65[ebp]
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv68 = 8						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 686  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __X$[ebp]

; 687  :     return (float)fabs(_X);

  00008	0f 5a c0	 cvtps2pd xmm0, xmm0
  0000b	66 0f 54 05 00
	00 00 00	 andpd	 xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  00013	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00017	f3 0f 11 45 08	 movss	 DWORD PTR tv68[ebp], xmm0
  0001c	d9 45 08	 fld	 DWORD PTR tv68[ebp]

; 688  : }

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
_fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	4e		 dec	 esi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	57		 push	 edi
  0000f	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b cf		 mov	 ecx, edi
  00014	ff d3		 call	 ebx
  00016	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  00019	4e		 dec	 esi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5f		 pop	 edi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
