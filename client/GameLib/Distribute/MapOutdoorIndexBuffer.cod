; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	A:\From C\Desktop\Serwer\Source\Source Client\client\GameLib\MapOutdoorIndexBuffer.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?ADDLvl1TL@CMapOutdoor@@IAEXPAGAAGABGABE@Z	; CMapOutdoor::ADDLvl1TL
PUBLIC	?ADDLvl1T@CMapOutdoor@@IAEXPAGAAGABGABE@Z	; CMapOutdoor::ADDLvl1T
PUBLIC	?ADDLvl1TR@CMapOutdoor@@IAEXPAGAAGABGABE@Z	; CMapOutdoor::ADDLvl1TR
PUBLIC	?ADDLvl1L@CMapOutdoor@@IAEXPAGAAGABGABE@Z	; CMapOutdoor::ADDLvl1L
PUBLIC	?ADDLvl1R@CMapOutdoor@@IAEXPAGAAGABGABE@Z	; CMapOutdoor::ADDLvl1R
PUBLIC	?ADDLvl1BL@CMapOutdoor@@IAEXPAGAAGABGABE@Z	; CMapOutdoor::ADDLvl1BL
PUBLIC	?ADDLvl1B@CMapOutdoor@@IAEXPAGAAGABGABE@Z	; CMapOutdoor::ADDLvl1B
PUBLIC	?ADDLvl1BR@CMapOutdoor@@IAEXPAGAAGABGABE@Z	; CMapOutdoor::ADDLvl1BR
PUBLIC	?ADDLvl1M@CMapOutdoor@@IAEXPAGAAGABGABE@Z	; CMapOutdoor::ADDLvl1M
PUBLIC	?ADDLvl2TL@CMapOutdoor@@IAEXPAGAAGABGABE@Z	; CMapOutdoor::ADDLvl2TL
PUBLIC	?ADDLvl2T@CMapOutdoor@@IAEXPAGAAGABGABE@Z	; CMapOutdoor::ADDLvl2T
PUBLIC	?ADDLvl2TR@CMapOutdoor@@IAEXPAGAAGABGABE@Z	; CMapOutdoor::ADDLvl2TR
PUBLIC	?ADDLvl2L@CMapOutdoor@@IAEXPAGAAGABGABE@Z	; CMapOutdoor::ADDLvl2L
PUBLIC	?ADDLvl2R@CMapOutdoor@@IAEXPAGAAGABGABE@Z	; CMapOutdoor::ADDLvl2R
PUBLIC	?ADDLvl2BL@CMapOutdoor@@IAEXPAGAAGABGABE@Z	; CMapOutdoor::ADDLvl2BL
PUBLIC	?ADDLvl2B@CMapOutdoor@@IAEXPAGAAGABGABE@Z	; CMapOutdoor::ADDLvl2B
PUBLIC	?ADDLvl2BR@CMapOutdoor@@IAEXPAGAAGABGABE@Z	; CMapOutdoor::ADDLvl2BR
PUBLIC	?ADDLvl2M@CMapOutdoor@@IAEXPAGAAGABGABE@Z	; CMapOutdoor::ADDLvl2M
PUBLIC	?SetIndexBuffer@CMapOutdoor@@IAEXXZ		; CMapOutdoor::SetIndexBuffer
PUBLIC	??_C@_0DH@CONECCIF@CMapOutdoor?3?3SetIndexBuffer?$CI?$CJ?5In@ ; `string'
PUBLIC	??_C@_0DH@ILILMIED@CMapOutdoor?3?3SetIndexBuffer?$CI?$CJ?5In@ ; `string'
EXTRN	___report_rangecheckfailure:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	?Create@CGraphicIndexBuffer@@QAE_NHW4_D3DFORMAT@@@Z:PROC ; CGraphicIndexBuffer::Create
EXTRN	?Lock@CGraphicIndexBuffer@@QAE_NPAPAX@Z:PROC	; CGraphicIndexBuffer::Lock
EXTRN	?Unlock@CGraphicIndexBuffer@@QAEXXZ:PROC	; CGraphicIndexBuffer::Unlock
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ??_C@_0DH@ILILMIED@CMapOutdoor?3?3SetIndexBuffer?$CI?$CJ?5In@
CONST	SEGMENT
??_C@_0DH@ILILMIED@CMapOutdoor?3?3SetIndexBuffer?$CI?$CJ?5In@ DB 'CMapOut'
	DB	'door::SetIndexBuffer() IndexBuffer Unlock Error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@CONECCIF@CMapOutdoor?3?3SetIndexBuffer?$CI?$CJ?5In@
CONST	SEGMENT
??_C@_0DH@CONECCIF@CMapOutdoor?3?3SetIndexBuffer?$CI?$CJ?5In@ DB 'CMapOut'
	DB	'door::SetIndexBuffer() IndexBuffer Create Error', 00H ; `string'
CONST	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\mapoutdoorindexbuffer.cpp
;	COMDAT ?SetIndexBuffer@CMapOutdoor@@IAEXXZ
_TEXT	SEGMENT
tv876 = -48						; size = 4
_pIndices$ = -44					; size = 4
tv868 = -40						; size = 4
_y$1$ = -36						; size = 4
tv879 = -32						; size = 4
tv874 = -32						; size = 4
tv869 = -28						; size = 4
_ucNumLineWarp$ = -21					; size = 1
_count2$ = -20						; size = 6
_count$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?SetIndexBuffer@CMapOutdoor@@IAEXXZ PROC		; CMapOutdoor::SetIndexBuffer, COMDAT
; _this$ = ecx

; 5    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8b f1		 mov	 esi, ecx

; 6    : 	void * pIndices;
; 7    : 	long x, y;
; 8    : 	
; 9    : 	DWORD dwIndexNum = TERRAIN_PATCHSIZE * TERRAIN_PATCHSIZE * 4;
; 10   : 
; 11   : #ifdef WORLD_EDITOR
; 12   : 	m_pwIndices = new WORD[dwIndexNum];
; 13   : 	if (!m_pwIndices)
; 14   : 		TraceError("CMapOutdoor::SetIndexBuffer() IndexBuffer is NULL");
; 15   : 
; 16   : 	memset(m_pwIndices, 0, sizeof(WORD) * dwIndexNum);
; 17   : 	if (!m_IndexBuffer.Create(dwIndexNum, D3DFMT_INDEX16))
; 18   : 		TraceError("CMapOutdoor::SetIndexBuffer() IndexBuffer Create Error");
; 19   : 	
; 20   : 	WORD count = 0;
; 21   : 	WORD count2 = 0;
; 22   : 	long ry = 0;
; 23   : 	
; 24   : 	BYTE ucNumLineWarp = TERRAIN_PATCHSIZE + 1;
; 25   : 	
; 26   : 	for (y = 0; y < TERRAIN_PATCHSIZE; y++)
; 27   : 	{
; 28   : 		if (ry % 2 == 0)
; 29   : 		{
; 30   : 			m_pwIndices[count++] = count2;
; 31   : 			m_pwIndices[count++] = count2+ucNumLineWarp;
; 32   : 		}
; 33   : 		else
; 34   : 		{
; 35   : 			m_pwIndices[count++] = count2+ucNumLineWarp;
; 36   : 			m_pwIndices[count++] = count2;
; 37   : 		}
; 38   : 		
; 39   : 		for (x = 0; x < TERRAIN_PATCHSIZE; x++)
; 40   : 		{
; 41   : 			if (ry % 2 == 1)
; 42   : 			{
; 43   : 				m_pwIndices[count++] = (WORD) (count2+ucNumLineWarp-1);
; 44   : 				m_pwIndices[count++] = (WORD) (count2-1);
; 45   : 				count2 -= (short) 1;
; 46   : 			}
; 47   : 			else
; 48   : 			{
; 49   : 				m_pwIndices[count++] = (WORD) (count2+1);
; 50   : 				m_pwIndices[count++] = (WORD) (count2+ucNumLineWarp+1);
; 51   : 				count2 += (short) 1;
; 52   : 			}
; 53   : 		}
; 54   : 		
; 55   : 		if (y < TERRAIN_PATCHSIZE-1)
; 56   : 		{
; 57   : 			m_pwIndices[count++] = (WORD) (count2+ucNumLineWarp);
; 58   : 			m_pwIndices[count++] = (WORD) (count2+ucNumLineWarp);
; 59   : 			count2 += ucNumLineWarp;
; 60   : 		}
; 61   : 		ry++;
; 62   : 	}
; 63   : 	
; 64   : 	m_wNumIndices = count;
; 65   : 	if (!m_IndexBuffer.Lock((void **) &pIndices))
; 66   : 		TraceError("CMapOutdoor::SetIndexBuffer() IndexBuffer Unlock Error");
; 67   : 	memcpy(pIndices, m_pwIndices, count * sizeof(WORD));
; 68   : 	m_IndexBuffer.Unlock();
; 69   : 	
; 70   : 	delete [] m_pwIndices;
; 71   : 	m_pwIndices = NULL;
; 72   : #else
; 73   : 	WORD	count[TERRAINPATCH_LODMAX], count2[TERRAINPATCH_LODMAX];
; 74   : 	BYTE uci;
; 75   : 	for (uci = 0; uci < TERRAINPATCH_LODMAX; ++uci)

  00015	32 db		 xor	 bl, bl
  00017	ba 02 00 00 00	 mov	 edx, 2
  0001c	8d 64 24 00	 npad	 4
$LL57@SetIndexBu:

; 76   : 	{		
; 77   : 		m_pwaIndices[uci] = new WORD[dwIndexNum];

  00020	33 c9		 xor	 ecx, ecx
  00022	b8 00 04 00 00	 mov	 eax, 1024		; 00000400H
  00027	f7 e2		 mul	 edx
  00029	0f 90 c1	 seto	 cl
  0002c	f7 d9		 neg	 ecx
  0002e	0b c8		 or	 ecx, eax
  00030	51		 push	 ecx
  00031	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 78   : 		memset(m_pwaIndices[uci], 0, sizeof(WORD) * dwIndexNum);

  00036	68 00 08 00 00	 push	 2048			; 00000800H
  0003b	0f b6 fb	 movzx	 edi, bl
  0003e	6a 00		 push	 0
  00040	50		 push	 eax
  00041	89 84 be 90 00
	00 00		 mov	 DWORD PTR [esi+edi*4+144], eax
  00048	e8 00 00 00 00	 call	 _memset

; 79   : 		count[uci] = 0;

  0004d	8d 04 3f	 lea	 eax, DWORD PTR [edi+edi]
  00050	83 c4 10	 add	 esp, 16			; 00000010H
  00053	83 f8 06	 cmp	 eax, 6
  00056	0f 83 93 03 00
	00		 jae	 $LN92@SetIndexBu
  0005c	33 c9		 xor	 ecx, ecx
  0005e	66 89 4c 05 f4	 mov	 WORD PTR _count$[ebp+eax], cx

; 80   : 		count2[uci] = 0;

  00063	66 89 4c 05 ec	 mov	 WORD PTR _count2$[ebp+eax], cx

; 81   : 		if ( !m_IndexBuffer[uci].Create(dwIndexNum, D3DFMT_INDEX16) )

  00068	8d 0c bd 27 00
	00 00		 lea	 ecx, DWORD PTR [edi*4+39]
  0006f	03 cf		 add	 ecx, edi
  00071	6a 65		 push	 101			; 00000065H
  00073	68 00 04 00 00	 push	 1024			; 00000400H
  00078	8d 0c 8e	 lea	 ecx, DWORD PTR [esi+ecx*4]
  0007b	e8 00 00 00 00	 call	 ?Create@CGraphicIndexBuffer@@QAE_NHW4_D3DFORMAT@@@Z ; CGraphicIndexBuffer::Create
  00080	84 c0		 test	 al, al
  00082	75 0d		 jne	 SHORT $LN56@SetIndexBu

; 82   : 			TraceError("CMapOutdoor::SetIndexBuffer() IndexBuffer Create Error");

  00084	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@CONECCIF@CMapOutdoor?3?3SetIndexBuffer?$CI?$CJ?5In@
  00089	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  0008e	83 c4 04	 add	 esp, 4
$LN56@SetIndexBu:

; 6    : 	void * pIndices;
; 7    : 	long x, y;
; 8    : 	
; 9    : 	DWORD dwIndexNum = TERRAIN_PATCHSIZE * TERRAIN_PATCHSIZE * 4;
; 10   : 
; 11   : #ifdef WORLD_EDITOR
; 12   : 	m_pwIndices = new WORD[dwIndexNum];
; 13   : 	if (!m_pwIndices)
; 14   : 		TraceError("CMapOutdoor::SetIndexBuffer() IndexBuffer is NULL");
; 15   : 
; 16   : 	memset(m_pwIndices, 0, sizeof(WORD) * dwIndexNum);
; 17   : 	if (!m_IndexBuffer.Create(dwIndexNum, D3DFMT_INDEX16))
; 18   : 		TraceError("CMapOutdoor::SetIndexBuffer() IndexBuffer Create Error");
; 19   : 	
; 20   : 	WORD count = 0;
; 21   : 	WORD count2 = 0;
; 22   : 	long ry = 0;
; 23   : 	
; 24   : 	BYTE ucNumLineWarp = TERRAIN_PATCHSIZE + 1;
; 25   : 	
; 26   : 	for (y = 0; y < TERRAIN_PATCHSIZE; y++)
; 27   : 	{
; 28   : 		if (ry % 2 == 0)
; 29   : 		{
; 30   : 			m_pwIndices[count++] = count2;
; 31   : 			m_pwIndices[count++] = count2+ucNumLineWarp;
; 32   : 		}
; 33   : 		else
; 34   : 		{
; 35   : 			m_pwIndices[count++] = count2+ucNumLineWarp;
; 36   : 			m_pwIndices[count++] = count2;
; 37   : 		}
; 38   : 		
; 39   : 		for (x = 0; x < TERRAIN_PATCHSIZE; x++)
; 40   : 		{
; 41   : 			if (ry % 2 == 1)
; 42   : 			{
; 43   : 				m_pwIndices[count++] = (WORD) (count2+ucNumLineWarp-1);
; 44   : 				m_pwIndices[count++] = (WORD) (count2-1);
; 45   : 				count2 -= (short) 1;
; 46   : 			}
; 47   : 			else
; 48   : 			{
; 49   : 				m_pwIndices[count++] = (WORD) (count2+1);
; 50   : 				m_pwIndices[count++] = (WORD) (count2+ucNumLineWarp+1);
; 51   : 				count2 += (short) 1;
; 52   : 			}
; 53   : 		}
; 54   : 		
; 55   : 		if (y < TERRAIN_PATCHSIZE-1)
; 56   : 		{
; 57   : 			m_pwIndices[count++] = (WORD) (count2+ucNumLineWarp);
; 58   : 			m_pwIndices[count++] = (WORD) (count2+ucNumLineWarp);
; 59   : 			count2 += ucNumLineWarp;
; 60   : 		}
; 61   : 		ry++;
; 62   : 	}
; 63   : 	
; 64   : 	m_wNumIndices = count;
; 65   : 	if (!m_IndexBuffer.Lock((void **) &pIndices))
; 66   : 		TraceError("CMapOutdoor::SetIndexBuffer() IndexBuffer Unlock Error");
; 67   : 	memcpy(pIndices, m_pwIndices, count * sizeof(WORD));
; 68   : 	m_IndexBuffer.Unlock();
; 69   : 	
; 70   : 	delete [] m_pwIndices;
; 71   : 	m_pwIndices = NULL;
; 72   : #else
; 73   : 	WORD	count[TERRAINPATCH_LODMAX], count2[TERRAINPATCH_LODMAX];
; 74   : 	BYTE uci;
; 75   : 	for (uci = 0; uci < TERRAINPATCH_LODMAX; ++uci)

  00091	fe c3		 inc	 bl
  00093	ba 02 00 00 00	 mov	 edx, 2
  00098	80 fb 03	 cmp	 bl, 3
  0009b	72 83		 jb	 SHORT $LL57@SetIndexBu

; 83   : 	}
; 84   : 
; 85   : 	BYTE ucNumLineWarp = TERRAIN_PATCHSIZE + 1;
; 86   : 	
; 87   : 	for (y = 0; y < TERRAIN_PATCHSIZE; y++)

  0009d	66 8b 55 ec	 mov	 dx, WORD PTR _count2$[ebp]
  000a1	8d 86 90 00 00
	00		 lea	 eax, DWORD PTR [esi+144]
  000a7	66 8b 7d f4	 mov	 di, WORD PTR _count$[ebp]
  000ab	33 db		 xor	 ebx, ebx
  000ad	c6 45 eb 11	 mov	 BYTE PTR _ucNumLineWarp$[ebp], 17 ; 00000011H
  000b1	89 5d dc	 mov	 DWORD PTR _y$1$[ebp], ebx
  000b4	89 45 d8	 mov	 DWORD PTR tv868[ebp], eax
  000b7	89 55 e4	 mov	 DWORD PTR tv869[ebp], edx
  000ba	eb 0a		 jmp	 SHORT $LN53@SetIndexBu
  000bc	8d 64 24 00	 npad	 4
$LL85@SetIndexBu:
  000c0	8d 86 90 00 00
	00		 lea	 eax, DWORD PTR [esi+144]
$LN53@SetIndexBu:

; 88   : 	{
; 89   : 		if (y%2 == 0)
; 90   : 		{
; 91   : 			m_pwaIndices[0][(count[0])++] = count2[0];

  000c6	8b 00		 mov	 eax, DWORD PTR [eax]
  000c8	8b cb		 mov	 ecx, ebx
  000ca	83 e1 01	 and	 ecx, 1
  000cd	89 4d d0	 mov	 DWORD PTR tv876[ebp], ecx
  000d0	0f b7 cf	 movzx	 ecx, di
  000d3	75 0c		 jne	 SHORT $LN50@SetIndexBu
  000d5	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 92   : 			m_pwaIndices[0][(count[0])++] = count2[0]+ucNumLineWarp;

  000d9	8b 55 ec	 mov	 edx, DWORD PTR _count2$[ebp]
  000dc	83 c2 11	 add	 edx, 17			; 00000011H

; 93   : 		}
; 94   : 		else

  000df	eb 0d		 jmp	 SHORT $LN88@SetIndexBu
$LN50@SetIndexBu:

; 95   : 		{
; 96   : 			m_pwaIndices[0][(count[0])++] = count2[0]+ucNumLineWarp;

  000e1	8b 55 ec	 mov	 edx, DWORD PTR _count2$[ebp]
  000e4	83 c2 11	 add	 edx, 17			; 00000011H
  000e7	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 97   : 			m_pwaIndices[0][(count[0])++] = count2[0];

  000eb	8b 55 e4	 mov	 edx, DWORD PTR tv869[ebp]
$LN88@SetIndexBu:
  000ee	8b 86 90 00 00
	00		 mov	 eax, DWORD PTR [esi+144]
  000f4	66 47		 inc	 di
  000f6	0f b7 cf	 movzx	 ecx, di

; 98   : 		}
; 99   : 		
; 100  : 		for (x = 0; x < TERRAIN_PATCHSIZE; x++)

  000f9	33 db		 xor	 ebx, ebx
  000fb	66 47		 inc	 di
  000fd	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
  00101	8b 45 dc	 mov	 eax, DWORD PTR _y$1$[ebp]
  00104	83 e0 01	 and	 eax, 1
  00107	89 45 e0	 mov	 DWORD PTR tv874[ebp], eax
  0010a	8d 9b 00 00 00
	00		 npad	 6
$LL48@SetIndexBu:

; 101  : 		{
; 102  : 			if (y%2 == 0)
; 103  : 			{
; 104  : 				m_pwaIndices[0][(count[0])++] = (WORD) (count2[0]+1);

  00110	0f b7 cf	 movzx	 ecx, di
  00113	66 47		 inc	 di
  00115	85 c0		 test	 eax, eax
  00117	75 2c		 jne	 SHORT $LN45@SetIndexBu
  00119	8b 45 ec	 mov	 eax, DWORD PTR _count2$[ebp]
  0011c	40		 inc	 eax
  0011d	89 45 e4	 mov	 DWORD PTR tv869[ebp], eax
  00120	8b 86 90 00 00
	00		 mov	 eax, DWORD PTR [esi+144]
  00126	8b 55 e4	 mov	 edx, DWORD PTR tv869[ebp]
  00129	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 105  : 				m_pwaIndices[0][(count[0])++] = (WORD) (count2[0]+ucNumLineWarp+1);

  0012d	8b 86 90 00 00
	00		 mov	 eax, DWORD PTR [esi+144]
  00133	8b 55 ec	 mov	 edx, DWORD PTR _count2$[ebp]
  00136	0f b7 cf	 movzx	 ecx, di
  00139	83 c2 12	 add	 edx, 18			; 00000012H
  0013c	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 106  : 				count2[0] += (short) 1;

  00140	8b 45 e4	 mov	 eax, DWORD PTR tv869[ebp]

; 107  : 			}
; 108  : 			else

  00143	eb 27		 jmp	 SHORT $LN89@SetIndexBu
$LN45@SetIndexBu:

; 109  : 			{
; 110  : 				m_pwaIndices[0][(count[0])++] = (WORD) (count2[0]+ucNumLineWarp-1);

  00145	8b 86 90 00 00
	00		 mov	 eax, DWORD PTR [esi+144]
  0014b	8b 55 ec	 mov	 edx, DWORD PTR _count2$[ebp]
  0014e	83 c2 10	 add	 edx, 16			; 00000010H
  00151	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 111  : 				m_pwaIndices[0][(count[0])++] = (WORD) (count2[0]-1);

  00155	8b 86 90 00 00
	00		 mov	 eax, DWORD PTR [esi+144]
  0015b	8b 55 ec	 mov	 edx, DWORD PTR _count2$[ebp]
  0015e	0f b7 cf	 movzx	 ecx, di
  00161	4a		 dec	 edx
  00162	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 112  : 				count2[0] -= (short) 1;

  00166	66 8b c2	 mov	 ax, dx
  00169	89 45 e4	 mov	 DWORD PTR tv869[ebp], eax
$LN89@SetIndexBu:
  0016c	66 47		 inc	 di
  0016e	66 89 45 ec	 mov	 WORD PTR _count2$[ebp], ax
  00172	66 89 7d f4	 mov	 WORD PTR _count$[ebp], di

; 113  : 			}
; 114  : 			
; 115  : 			if (0 == x%2)

  00176	f7 c3 01 00 00
	00		 test	 ebx, 1
  0017c	0f 85 b2 00 00
	00		 jne	 $LN43@SetIndexBu

; 116  : 			{
; 117  : 				if (0 == y)

  00182	8b 45 dc	 mov	 eax, DWORD PTR _y$1$[ebp]
  00185	85 c0		 test	 eax, eax
  00187	75 35		 jne	 SHORT $LN42@SetIndexBu

; 118  : 				{
; 119  : 					if (0 == x)
; 120  : 						ADDLvl1TL(m_pwaIndices[1], count[1], count2[1], ucNumLineWarp);

  00189	8d 45 eb	 lea	 eax, DWORD PTR _ucNumLineWarp$[ebp]
  0018c	8b ce		 mov	 ecx, esi
  0018e	50		 push	 eax
  0018f	8d 45 ee	 lea	 eax, DWORD PTR _count2$[ebp+2]
  00192	50		 push	 eax
  00193	8d 45 f6	 lea	 eax, DWORD PTR _count$[ebp+2]
  00196	50		 push	 eax
  00197	ff b6 94 00 00
	00		 push	 DWORD PTR [esi+148]
  0019d	85 db		 test	 ebx, ebx
  0019f	75 0a		 jne	 SHORT $LN41@SetIndexBu
  001a1	e8 00 00 00 00	 call	 ?ADDLvl1TL@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1TL
  001a6	e9 80 00 00 00	 jmp	 $LN90@SetIndexBu
$LN41@SetIndexBu:

; 121  : 					else if ((TERRAIN_PATCHSIZE - 2) == x)

  001ab	83 fb 0e	 cmp	 ebx, 14			; 0000000eH
  001ae	75 07		 jne	 SHORT $LN39@SetIndexBu

; 122  : 						ADDLvl1TR(m_pwaIndices[1], count[1], count2[1], ucNumLineWarp);

  001b0	e8 00 00 00 00	 call	 ?ADDLvl1TR@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1TR

; 123  : 					else

  001b5	eb 74		 jmp	 SHORT $LN90@SetIndexBu
$LN39@SetIndexBu:

; 124  : 						ADDLvl1T(m_pwaIndices[1], count[1], count2[1], ucNumLineWarp);

  001b7	e8 00 00 00 00	 call	 ?ADDLvl1T@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1T
  001bc	eb 6d		 jmp	 SHORT $LN90@SetIndexBu
$LN42@SetIndexBu:

; 125  : 				}
; 126  : 				else if ((TERRAIN_PATCHSIZE - 2) == y)

  001be	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  001c1	75 32		 jne	 SHORT $LN36@SetIndexBu

; 127  : 				{
; 128  : 					if (0 == x)
; 129  : 						ADDLvl1BL(m_pwaIndices[1], count[1], count2[1], ucNumLineWarp);

  001c3	8d 45 eb	 lea	 eax, DWORD PTR _ucNumLineWarp$[ebp]
  001c6	8b ce		 mov	 ecx, esi
  001c8	50		 push	 eax
  001c9	8d 45 ee	 lea	 eax, DWORD PTR _count2$[ebp+2]
  001cc	50		 push	 eax
  001cd	8d 45 f6	 lea	 eax, DWORD PTR _count$[ebp+2]
  001d0	50		 push	 eax
  001d1	ff b6 94 00 00
	00		 push	 DWORD PTR [esi+148]
  001d7	85 db		 test	 ebx, ebx
  001d9	75 07		 jne	 SHORT $LN35@SetIndexBu
  001db	e8 00 00 00 00	 call	 ?ADDLvl1BL@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1BL
  001e0	eb 49		 jmp	 SHORT $LN90@SetIndexBu
$LN35@SetIndexBu:

; 130  : 					else if ((TERRAIN_PATCHSIZE - 2) == x)

  001e2	83 fb 0e	 cmp	 ebx, 14			; 0000000eH
  001e5	75 07		 jne	 SHORT $LN33@SetIndexBu

; 131  : 						ADDLvl1BR(m_pwaIndices[1], count[1], count2[1], ucNumLineWarp);

  001e7	e8 00 00 00 00	 call	 ?ADDLvl1BR@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1BR

; 132  : 					else

  001ec	eb 3d		 jmp	 SHORT $LN90@SetIndexBu
$LN33@SetIndexBu:

; 133  : 						ADDLvl1B(m_pwaIndices[1], count[1], count2[1], ucNumLineWarp);

  001ee	e8 00 00 00 00	 call	 ?ADDLvl1B@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1B
  001f3	eb 36		 jmp	 SHORT $LN90@SetIndexBu
$LN36@SetIndexBu:

; 134  : 				}
; 135  : 				else if (0 == y%2)

  001f5	83 7d e0 00	 cmp	 DWORD PTR tv874[ebp], 0
  001f9	75 34		 jne	 SHORT $LN26@SetIndexBu

; 136  : 				{
; 137  : 					if (0 == x)
; 138  : 						ADDLvl1L(m_pwaIndices[1], count[1], count2[1], ucNumLineWarp);

  001fb	8d 45 eb	 lea	 eax, DWORD PTR _ucNumLineWarp$[ebp]
  001fe	8b ce		 mov	 ecx, esi
  00200	50		 push	 eax
  00201	8d 45 ee	 lea	 eax, DWORD PTR _count2$[ebp+2]
  00204	50		 push	 eax
  00205	8d 45 f6	 lea	 eax, DWORD PTR _count$[ebp+2]
  00208	50		 push	 eax
  00209	ff b6 94 00 00
	00		 push	 DWORD PTR [esi+148]
  0020f	85 db		 test	 ebx, ebx
  00211	75 07		 jne	 SHORT $LN29@SetIndexBu
  00213	e8 00 00 00 00	 call	 ?ADDLvl1L@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1L
  00218	eb 11		 jmp	 SHORT $LN90@SetIndexBu
$LN29@SetIndexBu:

; 139  : 					else if ((TERRAIN_PATCHSIZE - 2) == x)

  0021a	83 fb 0e	 cmp	 ebx, 14			; 0000000eH
  0021d	75 07		 jne	 SHORT $LN27@SetIndexBu

; 140  : 						ADDLvl1R(m_pwaIndices[1], count[1], count2[1], ucNumLineWarp);

  0021f	e8 00 00 00 00	 call	 ?ADDLvl1R@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1R

; 141  : 					else

  00224	eb 05		 jmp	 SHORT $LN90@SetIndexBu
$LN27@SetIndexBu:

; 142  : 						ADDLvl1M(m_pwaIndices[1], count[1], count2[1], ucNumLineWarp);

  00226	e8 00 00 00 00	 call	 ?ADDLvl1M@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1M
$LN90@SetIndexBu:
  0022b	66 8b 7d f4	 mov	 di, WORD PTR _count$[ebp]
$LN26@SetIndexBu:

; 143  : 				}
; 144  : 				count2[1] += 2;

  0022f	66 83 45 ee 02	 add	 WORD PTR _count2$[ebp+2], 2
$LN43@SetIndexBu:

; 145  : 			}
; 146  : 			
; 147  : 			if (0 == x%4)

  00234	f7 c3 03 00 00
	00		 test	 ebx, 3
  0023a	0f 85 b0 00 00
	00		 jne	 $LN47@SetIndexBu

; 148  : 			{
; 149  : 				if (0 == y)

  00240	8b 45 dc	 mov	 eax, DWORD PTR _y$1$[ebp]
  00243	85 c0		 test	 eax, eax
  00245	75 35		 jne	 SHORT $LN24@SetIndexBu

; 150  : 				{
; 151  : 					if (0 == x)
; 152  : 						ADDLvl2TL(m_pwaIndices[2], count[2], count2[2], ucNumLineWarp);

  00247	8d 45 eb	 lea	 eax, DWORD PTR _ucNumLineWarp$[ebp]
  0024a	8b ce		 mov	 ecx, esi
  0024c	50		 push	 eax
  0024d	8d 45 f0	 lea	 eax, DWORD PTR _count2$[ebp+4]
  00250	50		 push	 eax
  00251	8d 45 f8	 lea	 eax, DWORD PTR _count$[ebp+4]
  00254	50		 push	 eax
  00255	ff b6 98 00 00
	00		 push	 DWORD PTR [esi+152]
  0025b	85 db		 test	 ebx, ebx
  0025d	75 0a		 jne	 SHORT $LN23@SetIndexBu
  0025f	e8 00 00 00 00	 call	 ?ADDLvl2TL@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl2TL
  00264	e9 7e 00 00 00	 jmp	 $LN91@SetIndexBu
$LN23@SetIndexBu:

; 153  : 					else if ((TERRAIN_PATCHSIZE - 4) == x)

  00269	83 fb 0c	 cmp	 ebx, 12			; 0000000cH
  0026c	75 07		 jne	 SHORT $LN21@SetIndexBu

; 154  : 						ADDLvl2TR(m_pwaIndices[2], count[2], count2[2], ucNumLineWarp);

  0026e	e8 00 00 00 00	 call	 ?ADDLvl2TR@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl2TR

; 155  : 					else

  00273	eb 72		 jmp	 SHORT $LN91@SetIndexBu
$LN21@SetIndexBu:

; 156  : 						ADDLvl2T(m_pwaIndices[2], count[2], count2[2], ucNumLineWarp);

  00275	e8 00 00 00 00	 call	 ?ADDLvl2T@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl2T
  0027a	eb 6b		 jmp	 SHORT $LN91@SetIndexBu
$LN24@SetIndexBu:

; 157  : 				}
; 158  : 				else if ((TERRAIN_PATCHSIZE - 4) == y)

  0027c	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  0027f	75 32		 jne	 SHORT $LN18@SetIndexBu

; 159  : 				{
; 160  : 					if (0 == x)
; 161  : 						ADDLvl2BL(m_pwaIndices[2], count[2], count2[2], ucNumLineWarp);

  00281	8d 45 eb	 lea	 eax, DWORD PTR _ucNumLineWarp$[ebp]
  00284	8b ce		 mov	 ecx, esi
  00286	50		 push	 eax
  00287	8d 45 f0	 lea	 eax, DWORD PTR _count2$[ebp+4]
  0028a	50		 push	 eax
  0028b	8d 45 f8	 lea	 eax, DWORD PTR _count$[ebp+4]
  0028e	50		 push	 eax
  0028f	ff b6 98 00 00
	00		 push	 DWORD PTR [esi+152]
  00295	85 db		 test	 ebx, ebx
  00297	75 07		 jne	 SHORT $LN17@SetIndexBu
  00299	e8 00 00 00 00	 call	 ?ADDLvl2BL@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl2BL
  0029e	eb 47		 jmp	 SHORT $LN91@SetIndexBu
$LN17@SetIndexBu:

; 162  : 					else if ((TERRAIN_PATCHSIZE - 4) == x)

  002a0	83 fb 0c	 cmp	 ebx, 12			; 0000000cH
  002a3	75 07		 jne	 SHORT $LN15@SetIndexBu

; 163  : 						ADDLvl2BR(m_pwaIndices[2], count[2], count2[2], ucNumLineWarp);

  002a5	e8 00 00 00 00	 call	 ?ADDLvl2BR@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl2BR

; 164  : 					else

  002aa	eb 3b		 jmp	 SHORT $LN91@SetIndexBu
$LN15@SetIndexBu:

; 165  : 						ADDLvl2B(m_pwaIndices[2], count[2], count2[2], ucNumLineWarp);

  002ac	e8 00 00 00 00	 call	 ?ADDLvl2B@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl2B
  002b1	eb 34		 jmp	 SHORT $LN91@SetIndexBu
$LN18@SetIndexBu:

; 166  : 				}
; 167  : 				else if (0 == y%4)

  002b3	a8 03		 test	 al, 3
  002b5	75 34		 jne	 SHORT $LN8@SetIndexBu

; 168  : 				{
; 169  : 					if (0 == x)
; 170  : 						ADDLvl2L(m_pwaIndices[2], count[2], count2[2], ucNumLineWarp);

  002b7	8d 45 eb	 lea	 eax, DWORD PTR _ucNumLineWarp$[ebp]
  002ba	8b ce		 mov	 ecx, esi
  002bc	50		 push	 eax
  002bd	8d 45 f0	 lea	 eax, DWORD PTR _count2$[ebp+4]
  002c0	50		 push	 eax
  002c1	8d 45 f8	 lea	 eax, DWORD PTR _count$[ebp+4]
  002c4	50		 push	 eax
  002c5	ff b6 98 00 00
	00		 push	 DWORD PTR [esi+152]
  002cb	85 db		 test	 ebx, ebx
  002cd	75 07		 jne	 SHORT $LN11@SetIndexBu
  002cf	e8 00 00 00 00	 call	 ?ADDLvl2L@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl2L
  002d4	eb 11		 jmp	 SHORT $LN91@SetIndexBu
$LN11@SetIndexBu:

; 171  : 					else if ((TERRAIN_PATCHSIZE - 4) == x)

  002d6	83 fb 0c	 cmp	 ebx, 12			; 0000000cH
  002d9	75 07		 jne	 SHORT $LN9@SetIndexBu

; 172  : 						ADDLvl2R(m_pwaIndices[2], count[2], count2[2], ucNumLineWarp);

  002db	e8 00 00 00 00	 call	 ?ADDLvl2R@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl2R

; 173  : 					else

  002e0	eb 05		 jmp	 SHORT $LN91@SetIndexBu
$LN9@SetIndexBu:

; 174  : 						ADDLvl2M(m_pwaIndices[2], count[2], count2[2], ucNumLineWarp);

  002e2	e8 00 00 00 00	 call	 ?ADDLvl2M@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl2M
$LN91@SetIndexBu:
  002e7	66 8b 7d f4	 mov	 di, WORD PTR _count$[ebp]
$LN8@SetIndexBu:

; 175  : 				}
; 176  : 				count2[2] += 4;

  002eb	66 83 45 f0 04	 add	 WORD PTR _count2$[ebp+4], 4
$LN47@SetIndexBu:

; 98   : 		}
; 99   : 		
; 100  : 		for (x = 0; x < TERRAIN_PATCHSIZE; x++)

  002f0	43		 inc	 ebx
  002f1	83 fb 10	 cmp	 ebx, 16			; 00000010H
  002f4	7d 08		 jge	 SHORT $LN84@SetIndexBu
  002f6	8b 45 e0	 mov	 eax, DWORD PTR tv874[ebp]
  002f9	e9 12 fe ff ff	 jmp	 $LL48@SetIndexBu
$LN84@SetIndexBu:

; 177  : 			}
; 178  : 		}
; 179  : 		
; 180  : 		if (y < TERRAIN_PATCHSIZE-1)

  002fe	8b 5d dc	 mov	 ebx, DWORD PTR _y$1$[ebp]
  00301	83 fb 0f	 cmp	 ebx, 15			; 0000000fH
  00304	7d 49		 jge	 SHORT $LN86@SetIndexBu

; 181  : 		{
; 182  : 			m_pwaIndices[0][(count[0])++] = (WORD) (count2[0]+ucNumLineWarp);

  00306	8b 86 90 00 00
	00		 mov	 eax, DWORD PTR [esi+144]
  0030c	8b 55 ec	 mov	 edx, DWORD PTR _count2$[ebp]
  0030f	0f b7 cf	 movzx	 ecx, di
  00312	83 c2 11	 add	 edx, 17			; 00000011H
  00315	66 47		 inc	 di

; 183  : 			m_pwaIndices[0][(count[0])++] = (WORD) (count2[0]+ucNumLineWarp);
; 184  : 			count2[0] += ucNumLineWarp;

  00317	89 55 e4	 mov	 DWORD PTR tv869[ebp], edx
  0031a	66 89 55 ec	 mov	 WORD PTR _count2$[ebp], dx
  0031e	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
  00322	8b 86 90 00 00
	00		 mov	 eax, DWORD PTR [esi+144]
  00328	0f b7 cf	 movzx	 ecx, di
  0032b	66 47		 inc	 di

; 185  : 			if (0 == y%2)

  0032d	83 7d d0 00	 cmp	 DWORD PTR tv876[ebp], 0
  00331	66 89 7d f4	 mov	 WORD PTR _count$[ebp], di
  00335	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
  00339	75 05		 jne	 SHORT $LN6@SetIndexBu

; 186  : 				count2[1] += 2;

  0033b	66 83 45 ee 02	 add	 WORD PTR _count2$[ebp+2], 2
$LN6@SetIndexBu:

; 187  : 			if (0 == y%4)

  00340	f7 c3 03 00 00
	00		 test	 ebx, 3
  00346	75 0a		 jne	 SHORT $LN52@SetIndexBu

; 188  : 				count2[2] += 4;

  00348	66 83 45 f0 04	 add	 WORD PTR _count2$[ebp+4], 4
  0034d	eb 03		 jmp	 SHORT $LN52@SetIndexBu
$LN86@SetIndexBu:
  0034f	8b 55 e4	 mov	 edx, DWORD PTR tv869[ebp]
$LN52@SetIndexBu:

; 83   : 	}
; 84   : 
; 85   : 	BYTE ucNumLineWarp = TERRAIN_PATCHSIZE + 1;
; 86   : 	
; 87   : 	for (y = 0; y < TERRAIN_PATCHSIZE; y++)

  00352	43		 inc	 ebx
  00353	89 5d dc	 mov	 DWORD PTR _y$1$[ebp], ebx
  00356	83 fb 10	 cmp	 ebx, 16			; 00000010H
  00359	0f 8c 61 fd ff
	ff		 jl	 $LL85@SetIndexBu

; 189  : 		}
; 190  : 	}
; 191  : 
; 192  : 	for (uci = 0; uci < TERRAINPATCH_LODMAX; ++uci)

  0035f	8d be 9c 00 00
	00		 lea	 edi, DWORD PTR [esi+156]
  00365	c7 45 e0 03 00
	00 00		 mov	 DWORD PTR tv879[ebp], 3
  0036c	8d 5d f4	 lea	 ebx, DWORD PTR _count$[ebp]
  0036f	81 c6 d8 00 00
	00		 add	 esi, 216		; 000000d8H
$LL4@SetIndexBu:

; 193  : 	{
; 194  : 		m_wNumIndices[uci] = count[uci];

  00375	0f b7 03	 movzx	 eax, WORD PTR [ebx]

; 195  : 		if( !m_IndexBuffer[uci].Lock((void **) &pIndices) )

  00378	8b cf		 mov	 ecx, edi
  0037a	66 89 06	 mov	 WORD PTR [esi], ax
  0037d	8d 45 d4	 lea	 eax, DWORD PTR _pIndices$[ebp]
  00380	50		 push	 eax
  00381	e8 00 00 00 00	 call	 ?Lock@CGraphicIndexBuffer@@QAE_NPAPAX@Z ; CGraphicIndexBuffer::Lock
  00386	84 c0		 test	 al, al
  00388	75 0d		 jne	 SHORT $LN1@SetIndexBu

; 196  : 			TraceError("CMapOutdoor::SetIndexBuffer() IndexBuffer Unlock Error");

  0038a	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@ILILMIED@CMapOutdoor?3?3SetIndexBuffer?$CI?$CJ?5In@
  0038f	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00394	83 c4 04	 add	 esp, 4
$LN1@SetIndexBu:

; 197  : 		memcpy(pIndices, m_pwaIndices[uci], count[uci] * sizeof(WORD));

  00397	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  0039a	03 c0		 add	 eax, eax
  0039c	50		 push	 eax
  0039d	8b 45 d8	 mov	 eax, DWORD PTR tv868[ebp]
  003a0	ff 30		 push	 DWORD PTR [eax]
  003a2	ff 75 d4	 push	 DWORD PTR _pIndices$[ebp]
  003a5	e8 00 00 00 00	 call	 _memcpy
  003aa	83 c4 0c	 add	 esp, 12			; 0000000cH

; 198  : 		m_IndexBuffer[uci].Unlock();

  003ad	8b cf		 mov	 ecx, edi
  003af	e8 00 00 00 00	 call	 ?Unlock@CGraphicIndexBuffer@@QAEXXZ ; CGraphicIndexBuffer::Unlock

; 199  : 		delete [] m_pwaIndices[uci];

  003b4	8b 45 d8	 mov	 eax, DWORD PTR tv868[ebp]
  003b7	ff 30		 push	 DWORD PTR [eax]
  003b9	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]

; 200  : 		m_pwaIndices[uci] = NULL;

  003be	8b 45 d8	 mov	 eax, DWORD PTR tv868[ebp]
  003c1	83 c4 04	 add	 esp, 4
  003c4	83 c6 02	 add	 esi, 2
  003c7	83 c3 02	 add	 ebx, 2
  003ca	83 c7 14	 add	 edi, 20			; 00000014H
  003cd	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  003d3	83 c0 04	 add	 eax, 4
  003d6	ff 4d e0	 dec	 DWORD PTR tv879[ebp]
  003d9	89 45 d8	 mov	 DWORD PTR tv868[ebp], eax
  003dc	75 97		 jne	 SHORT $LL4@SetIndexBu

; 201  : 	}
; 202  : #endif
; 203  : }

  003de	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003e1	5f		 pop	 edi
  003e2	5e		 pop	 esi
  003e3	33 cd		 xor	 ecx, ebp
  003e5	5b		 pop	 ebx
  003e6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003eb	8b e5		 mov	 esp, ebp
  003ed	5d		 pop	 ebp
  003ee	c3		 ret	 0
$LN92@SetIndexBu:

; 79   : 		count[uci] = 0;

  003ef	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN93@SetIndexBu:
$LN87@SetIndexBu:
  003f4	cc		 int	 3
?SetIndexBuffer@CMapOutdoor@@IAEXXZ ENDP		; CMapOutdoor::SetIndexBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\mapoutdoorindexbuffer.cpp
;	COMDAT ?ADDLvl2M@CMapOutdoor@@IAEXPAGAAGABGABE@Z
_TEXT	SEGMENT
_pIndices$ = 8						; size = 4
_rwCount$ = 12						; size = 4
_c_rwCurCount$ = 16					; size = 4
_c_rucNumLineWarp$ = 20					; size = 4
?ADDLvl2M@CMapOutdoor@@IAEXPAGAAGABGABE@Z PROC		; CMapOutdoor::ADDLvl2M, COMDAT
; _this$ = ecx

; 521  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 522  : 	pIndices[rwCount++] = c_rwCurCount;
; 523  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 4;

  00003	8b 55 14	 mov	 edx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 0c	 mov	 ebx, DWORD PTR _rwCount$[ebp]
  0000a	56		 push	 esi
  0000b	8b 75 10	 mov	 esi, DWORD PTR _c_rwCurCount$[ebp]
  0000e	57		 push	 edi
  0000f	0f b7 0b	 movzx	 ecx, WORD PTR [ebx]
  00012	8b 7d 08	 mov	 edi, DWORD PTR _pIndices$[ebp]
  00015	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00018	66 89 04 4f	 mov	 WORD PTR [edi+ecx*2], ax
  0001c	66 ff 03	 inc	 WORD PTR [ebx]
  0001f	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00022	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00025	66 c1 e1 02	 shl	 cx, 2
  00029	66 03 0e	 add	 cx, WORD PTR [esi]
  0002c	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00030	66 ff 03	 inc	 WORD PTR [ebx]
  00033	0f b7 03	 movzx	 eax, WORD PTR [ebx]

; 524  : 	pIndices[rwCount++] = c_rwCurCount + 4;

  00036	0f b7 0e	 movzx	 ecx, WORD PTR [esi]
  00039	66 83 c1 04	 add	 cx, 4
  0003d	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00041	66 ff 03	 inc	 WORD PTR [ebx]

; 525  : 	
; 526  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 4;

  00044	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00047	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  0004a	66 c1 e1 02	 shl	 cx, 2
  0004e	66 03 0e	 add	 cx, WORD PTR [esi]
  00051	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00055	66 ff 03	 inc	 WORD PTR [ebx]

; 527  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 4 + 4;

  00058	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  0005b	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  0005e	66 41		 inc	 cx
  00060	66 c1 e1 02	 shl	 cx, 2
  00064	66 03 0e	 add	 cx, WORD PTR [esi]
  00067	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  0006b	66 ff 03	 inc	 WORD PTR [ebx]
  0006e	0f b7 03	 movzx	 eax, WORD PTR [ebx]

; 528  : 	pIndices[rwCount++] = c_rwCurCount + 4;

  00071	0f b7 0e	 movzx	 ecx, WORD PTR [esi]
  00074	66 83 c1 04	 add	 cx, 4
  00078	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  0007c	66 ff 03	 inc	 WORD PTR [ebx]
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx

; 529  : }

  00082	5d		 pop	 ebp
  00083	c2 10 00	 ret	 16			; 00000010H
?ADDLvl2M@CMapOutdoor@@IAEXPAGAAGABGABE@Z ENDP		; CMapOutdoor::ADDLvl2M
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\mapoutdoorindexbuffer.cpp
;	COMDAT ?ADDLvl2BR@CMapOutdoor@@IAEXPAGAAGABGABE@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_pIndices$ = 8						; size = 4
_rwCount$ = 12						; size = 4
$T1 = 16						; size = 2
$T2 = 16						; size = 2
_c_rwCurCount$ = 16					; size = 4
$T3 = 20						; size = 2
_c_rucNumLineWarp$ = 20					; size = 4
?ADDLvl2BR@CMapOutdoor@@IAEXPAGAAGABGABE@Z PROC		; CMapOutdoor::ADDLvl2BR, COMDAT
; _this$ = ecx

; 513  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 514  : 	ADDLvl1M(pIndices, rwCount, c_rwCurCount, c_rucNumLineWarp);

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR _rwCount$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	56		 push	 esi
  0000b	8b 75 10	 mov	 esi, DWORD PTR _c_rwCurCount$[ebp]
  0000e	57		 push	 edi
  0000f	ff 75 14	 push	 DWORD PTR _c_rucNumLineWarp$[ebp]
  00012	8b 7d 08	 mov	 edi, DWORD PTR _pIndices$[ebp]
  00015	56		 push	 esi
  00016	53		 push	 ebx
  00017	57		 push	 edi
  00018	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0001b	e8 00 00 00 00	 call	 ?ADDLvl1M@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1M

; 515  : 	ADDLvl1R(pIndices, rwCount, c_rwCurCount + 2, c_rucNumLineWarp);

  00020	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00023	ff 75 14	 push	 DWORD PTR _c_rucNumLineWarp$[ebp]
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00029	66 83 c0 02	 add	 ax, 2
  0002d	0f b7 c0	 movzx	 eax, ax
  00030	89 45 10	 mov	 DWORD PTR $T1[ebp], eax
  00033	8d 45 10	 lea	 eax, DWORD PTR $T1[ebp]
  00036	50		 push	 eax
  00037	53		 push	 ebx
  00038	57		 push	 edi
  00039	e8 00 00 00 00	 call	 ?ADDLvl1R@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1R

; 516  : 	ADDLvl1B(pIndices, rwCount, c_rwCurCount + c_rucNumLineWarp * 2, c_rucNumLineWarp);

  0003e	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00041	51		 push	 ecx
  00042	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00048	66 03 c0	 add	 ax, ax
  0004b	66 03 06	 add	 ax, WORD PTR [esi]
  0004e	0f b7 c0	 movzx	 eax, ax
  00051	89 45 10	 mov	 DWORD PTR $T2[ebp], eax
  00054	8d 45 10	 lea	 eax, DWORD PTR $T2[ebp]
  00057	50		 push	 eax
  00058	53		 push	 ebx
  00059	57		 push	 edi
  0005a	e8 00 00 00 00	 call	 ?ADDLvl1B@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1B

; 517  : 	ADDLvl1BR(pIndices, rwCount, c_rwCurCount + c_rucNumLineWarp * 2 + 2, c_rucNumLineWarp);

  0005f	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00062	51		 push	 ecx
  00063	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00066	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00069	66 40		 inc	 ax
  0006b	66 03 c0	 add	 ax, ax
  0006e	66 03 06	 add	 ax, WORD PTR [esi]
  00071	0f b7 c0	 movzx	 eax, ax
  00074	89 45 14	 mov	 DWORD PTR $T3[ebp], eax
  00077	8d 45 14	 lea	 eax, DWORD PTR $T3[ebp]
  0007a	50		 push	 eax
  0007b	53		 push	 ebx
  0007c	57		 push	 edi
  0007d	e8 00 00 00 00	 call	 ?ADDLvl1BR@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1BR
  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx

; 518  : }

  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 10 00	 ret	 16			; 00000010H
?ADDLvl2BR@CMapOutdoor@@IAEXPAGAAGABGABE@Z ENDP		; CMapOutdoor::ADDLvl2BR
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\mapoutdoorindexbuffer.cpp
;	COMDAT ?ADDLvl2B@CMapOutdoor@@IAEXPAGAAGABGABE@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_pIndices$ = 8						; size = 4
_rwCount$ = 12						; size = 4
$T1 = 16						; size = 2
_c_rwCurCount$ = 16					; size = 4
$T2 = 20						; size = 2
_c_rucNumLineWarp$ = 20					; size = 4
?ADDLvl2B@CMapOutdoor@@IAEXPAGAAGABGABE@Z PROC		; CMapOutdoor::ADDLvl2B, COMDAT
; _this$ = ecx

; 495  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 496  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  00004	8b 55 14	 mov	 edx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00007	53		 push	 ebx
  00008	8b 5d 0c	 mov	 ebx, DWORD PTR _rwCount$[ebp]
  0000b	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000e	0f b6 12	 movzx	 edx, BYTE PTR [edx]
  00011	56		 push	 esi
  00012	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00015	66 03 d2	 add	 dx, dx
  00018	8b 75 10	 mov	 esi, DWORD PTR _c_rwCurCount$[ebp]
  0001b	57		 push	 edi
  0001c	8b 7d 08	 mov	 edi, DWORD PTR _pIndices$[ebp]
  0001f	66 03 16	 add	 dx, WORD PTR [esi]
  00022	66 89 14 47	 mov	 WORD PTR [edi+eax*2], dx
  00026	66 ff 03	 inc	 WORD PTR [ebx]
  00029	0f b7 03	 movzx	 eax, WORD PTR [ebx]

; 497  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  0002c	8b 55 14	 mov	 edx, DWORD PTR _c_rucNumLineWarp$[ebp]

; 498  : 	pIndices[rwCount++] = c_rwCurCount;
; 499  : 	
; 500  : 	pIndices[rwCount++] = c_rwCurCount;
; 501  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;
; 502  : 	pIndices[rwCount++] = c_rwCurCount + 4;
; 503  : 	
; 504  : 	pIndices[rwCount++] = c_rwCurCount + 4;
; 505  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;
; 506  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 4;
; 507  : 
; 508  : 	ADDLvl1B(pIndices, rwCount, c_rwCurCount + c_rucNumLineWarp * 2, c_rucNumLineWarp);

  0002f	52		 push	 edx
  00030	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00033	66 41		 inc	 cx
  00035	66 03 c9	 add	 cx, cx
  00038	66 03 0e	 add	 cx, WORD PTR [esi]
  0003b	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  0003f	66 ff 03	 inc	 WORD PTR [ebx]
  00042	0f b7 0b	 movzx	 ecx, WORD PTR [ebx]
  00045	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00048	66 89 04 4f	 mov	 WORD PTR [edi+ecx*2], ax
  0004c	66 ff 03	 inc	 WORD PTR [ebx]
  0004f	0f b7 0b	 movzx	 ecx, WORD PTR [ebx]
  00052	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00055	66 89 04 4f	 mov	 WORD PTR [edi+ecx*2], ax
  00059	66 ff 03	 inc	 WORD PTR [ebx]
  0005c	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  0005f	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00062	66 41		 inc	 cx
  00064	66 03 c9	 add	 cx, cx
  00067	66 03 0e	 add	 cx, WORD PTR [esi]
  0006a	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  0006e	66 ff 03	 inc	 WORD PTR [ebx]
  00071	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00074	0f b7 0e	 movzx	 ecx, WORD PTR [esi]
  00077	66 83 c1 04	 add	 cx, 4
  0007b	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  0007f	66 ff 03	 inc	 WORD PTR [ebx]
  00082	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00085	0f b7 0e	 movzx	 ecx, WORD PTR [esi]
  00088	66 83 c1 04	 add	 cx, 4
  0008c	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00090	66 ff 03	 inc	 WORD PTR [ebx]
  00093	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00096	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00099	66 41		 inc	 cx
  0009b	66 03 c9	 add	 cx, cx
  0009e	66 03 0e	 add	 cx, WORD PTR [esi]
  000a1	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000a5	66 ff 03	 inc	 WORD PTR [ebx]
  000a8	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  000ab	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  000ae	66 83 c1 02	 add	 cx, 2
  000b2	66 03 c9	 add	 cx, cx
  000b5	66 03 0e	 add	 cx, WORD PTR [esi]
  000b8	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000bc	66 ff 03	 inc	 WORD PTR [ebx]
  000bf	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  000c2	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000c5	66 03 c0	 add	 ax, ax
  000c8	66 03 06	 add	 ax, WORD PTR [esi]
  000cb	0f b7 c0	 movzx	 eax, ax
  000ce	89 45 10	 mov	 DWORD PTR $T1[ebp], eax
  000d1	8d 45 10	 lea	 eax, DWORD PTR $T1[ebp]
  000d4	50		 push	 eax
  000d5	53		 push	 ebx
  000d6	57		 push	 edi
  000d7	e8 00 00 00 00	 call	 ?ADDLvl1B@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1B

; 509  : 	ADDLvl1B(pIndices, rwCount, c_rwCurCount + c_rucNumLineWarp * 2 + 2, c_rucNumLineWarp);

  000dc	8b 55 14	 mov	 edx, DWORD PTR _c_rucNumLineWarp$[ebp]
  000df	52		 push	 edx
  000e0	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  000e3	66 40		 inc	 ax
  000e5	66 03 c0	 add	 ax, ax
  000e8	66 03 06	 add	 ax, WORD PTR [esi]
  000eb	0f b7 c0	 movzx	 eax, ax
  000ee	89 45 14	 mov	 DWORD PTR $T2[ebp], eax
  000f1	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000f4	8d 45 14	 lea	 eax, DWORD PTR $T2[ebp]
  000f7	50		 push	 eax
  000f8	53		 push	 ebx
  000f9	57		 push	 edi
  000fa	e8 00 00 00 00	 call	 ?ADDLvl1B@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1B
  000ff	5f		 pop	 edi
  00100	5e		 pop	 esi
  00101	5b		 pop	 ebx

; 510  : }

  00102	8b e5		 mov	 esp, ebp
  00104	5d		 pop	 ebp
  00105	c2 10 00	 ret	 16			; 00000010H
?ADDLvl2B@CMapOutdoor@@IAEXPAGAAGABGABE@Z ENDP		; CMapOutdoor::ADDLvl2B
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\mapoutdoorindexbuffer.cpp
;	COMDAT ?ADDLvl2BL@CMapOutdoor@@IAEXPAGAAGABGABE@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_pIndices$ = 8						; size = 4
_rwCount$ = 12						; size = 4
$T1 = 16						; size = 2
$T2 = 16						; size = 2
_c_rwCurCount$ = 16					; size = 4
$T3 = 20						; size = 2
_c_rucNumLineWarp$ = 20					; size = 4
?ADDLvl2BL@CMapOutdoor@@IAEXPAGAAGABGABE@Z PROC		; CMapOutdoor::ADDLvl2BL, COMDAT
; _this$ = ecx

; 487  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 488  : 	ADDLvl1L(pIndices, rwCount, c_rwCurCount, c_rucNumLineWarp);

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR _rwCount$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	56		 push	 esi
  0000b	8b 75 10	 mov	 esi, DWORD PTR _c_rwCurCount$[ebp]
  0000e	57		 push	 edi
  0000f	ff 75 14	 push	 DWORD PTR _c_rucNumLineWarp$[ebp]
  00012	8b 7d 08	 mov	 edi, DWORD PTR _pIndices$[ebp]
  00015	56		 push	 esi
  00016	53		 push	 ebx
  00017	57		 push	 edi
  00018	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0001b	e8 00 00 00 00	 call	 ?ADDLvl1L@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1L

; 489  : 	ADDLvl1M(pIndices, rwCount, c_rwCurCount + 2, c_rucNumLineWarp);

  00020	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00023	ff 75 14	 push	 DWORD PTR _c_rucNumLineWarp$[ebp]
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00029	66 83 c0 02	 add	 ax, 2
  0002d	0f b7 c0	 movzx	 eax, ax
  00030	89 45 10	 mov	 DWORD PTR $T1[ebp], eax
  00033	8d 45 10	 lea	 eax, DWORD PTR $T1[ebp]
  00036	50		 push	 eax
  00037	53		 push	 ebx
  00038	57		 push	 edi
  00039	e8 00 00 00 00	 call	 ?ADDLvl1M@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1M

; 490  : 	ADDLvl1BL(pIndices, rwCount, c_rwCurCount + c_rucNumLineWarp * 2, c_rucNumLineWarp);

  0003e	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00041	51		 push	 ecx
  00042	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00048	66 03 c0	 add	 ax, ax
  0004b	66 03 06	 add	 ax, WORD PTR [esi]
  0004e	0f b7 c0	 movzx	 eax, ax
  00051	89 45 10	 mov	 DWORD PTR $T2[ebp], eax
  00054	8d 45 10	 lea	 eax, DWORD PTR $T2[ebp]
  00057	50		 push	 eax
  00058	53		 push	 ebx
  00059	57		 push	 edi
  0005a	e8 00 00 00 00	 call	 ?ADDLvl1BL@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1BL

; 491  : 	ADDLvl1B(pIndices, rwCount, c_rwCurCount + c_rucNumLineWarp * 2 + 2, c_rucNumLineWarp);

  0005f	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00062	51		 push	 ecx
  00063	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00066	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00069	66 40		 inc	 ax
  0006b	66 03 c0	 add	 ax, ax
  0006e	66 03 06	 add	 ax, WORD PTR [esi]
  00071	0f b7 c0	 movzx	 eax, ax
  00074	89 45 14	 mov	 DWORD PTR $T3[ebp], eax
  00077	8d 45 14	 lea	 eax, DWORD PTR $T3[ebp]
  0007a	50		 push	 eax
  0007b	53		 push	 ebx
  0007c	57		 push	 edi
  0007d	e8 00 00 00 00	 call	 ?ADDLvl1B@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1B
  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx

; 492  : }

  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 10 00	 ret	 16			; 00000010H
?ADDLvl2BL@CMapOutdoor@@IAEXPAGAAGABGABE@Z ENDP		; CMapOutdoor::ADDLvl2BL
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\mapoutdoorindexbuffer.cpp
;	COMDAT ?ADDLvl2R@CMapOutdoor@@IAEXPAGAAGABGABE@Z
_TEXT	SEGMENT
$T1 = -4						; size = 2
_pIndices$ = 8						; size = 4
_rwCount$ = 12						; size = 4
_c_rwCurCount$ = 16					; size = 4
$T2 = 20						; size = 2
_c_rucNumLineWarp$ = 20					; size = 4
?ADDLvl2R@CMapOutdoor@@IAEXPAGAAGABGABE@Z PROC		; CMapOutdoor::ADDLvl2R, COMDAT
; _this$ = ecx

; 469  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	ADDLvl1R(pIndices, rwCount, c_rwCurCount + 2, c_rucNumLineWarp);

  00004	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00007	53		 push	 ebx
  00008	8b 5d 08	 mov	 ebx, DWORD PTR _pIndices$[ebp]
  0000b	56		 push	 esi
  0000c	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0000f	8b f1		 mov	 esi, ecx
  00011	57		 push	 edi
  00012	8b 7d 14	 mov	 edi, DWORD PTR _c_rucNumLineWarp$[ebp]
  00015	66 83 c0 02	 add	 ax, 2
  00019	0f b7 c0	 movzx	 eax, ax
  0001c	57		 push	 edi
  0001d	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  00020	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  00023	50		 push	 eax
  00024	ff 75 0c	 push	 DWORD PTR _rwCount$[ebp]
  00027	53		 push	 ebx
  00028	e8 00 00 00 00	 call	 ?ADDLvl1R@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1R

; 471  : 	ADDLvl1R(pIndices, rwCount, c_rwCurCount + c_rucNumLineWarp * 2 + 2, c_rucNumLineWarp);

  0002d	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00030	8b 4d 10	 mov	 ecx, DWORD PTR _c_rwCurCount$[ebp]
  00033	66 40		 inc	 ax
  00035	66 03 c0	 add	 ax, ax
  00038	57		 push	 edi
  00039	66 03 01	 add	 ax, WORD PTR [ecx]
  0003c	8b ce		 mov	 ecx, esi
  0003e	0f b7 c0	 movzx	 eax, ax
  00041	89 45 14	 mov	 DWORD PTR $T2[ebp], eax
  00044	8d 45 14	 lea	 eax, DWORD PTR $T2[ebp]
  00047	50		 push	 eax
  00048	ff 75 0c	 push	 DWORD PTR _rwCount$[ebp]
  0004b	53		 push	 ebx
  0004c	e8 00 00 00 00	 call	 ?ADDLvl1R@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1R

; 472  : 	
; 473  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  00051	8b 55 0c	 mov	 edx, DWORD PTR _rwCount$[ebp]
  00054	8b 75 10	 mov	 esi, DWORD PTR _c_rwCurCount$[ebp]
  00057	0f b7 02	 movzx	 eax, WORD PTR [edx]
  0005a	0f b7 0e	 movzx	 ecx, WORD PTR [esi]
  0005d	66 83 c1 02	 add	 cx, 2
  00061	66 89 0c 43	 mov	 WORD PTR [ebx+eax*2], cx
  00065	66 ff 02	 inc	 WORD PTR [edx]
  00068	0f b7 0a	 movzx	 ecx, WORD PTR [edx]

; 474  : 	pIndices[rwCount++] = c_rwCurCount;

  0006b	0f b7 06	 movzx	 eax, WORD PTR [esi]
  0006e	66 89 04 4b	 mov	 WORD PTR [ebx+ecx*2], ax
  00072	66 ff 02	 inc	 WORD PTR [edx]

; 475  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  00075	0f b6 0f	 movzx	 ecx, BYTE PTR [edi]
  00078	0f b7 02	 movzx	 eax, WORD PTR [edx]
  0007b	66 41		 inc	 cx
  0007d	66 03 c9	 add	 cx, cx
  00080	66 03 0e	 add	 cx, WORD PTR [esi]
  00083	66 89 0c 43	 mov	 WORD PTR [ebx+eax*2], cx
  00087	66 ff 02	 inc	 WORD PTR [edx]
  0008a	0f b7 0a	 movzx	 ecx, WORD PTR [edx]

; 476  : 	
; 477  : 	pIndices[rwCount++] = c_rwCurCount;

  0008d	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00090	66 89 04 4b	 mov	 WORD PTR [ebx+ecx*2], ax
  00094	66 ff 02	 inc	 WORD PTR [edx]

; 478  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 4;

  00097	0f b6 0f	 movzx	 ecx, BYTE PTR [edi]
  0009a	0f b7 02	 movzx	 eax, WORD PTR [edx]
  0009d	66 c1 e1 02	 shl	 cx, 2
  000a1	66 03 0e	 add	 cx, WORD PTR [esi]
  000a4	66 89 0c 43	 mov	 WORD PTR [ebx+eax*2], cx
  000a8	66 ff 02	 inc	 WORD PTR [edx]

; 479  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  000ab	0f b6 0f	 movzx	 ecx, BYTE PTR [edi]
  000ae	0f b7 02	 movzx	 eax, WORD PTR [edx]
  000b1	66 41		 inc	 cx
  000b3	66 03 c9	 add	 cx, cx
  000b6	66 03 0e	 add	 cx, WORD PTR [esi]
  000b9	66 89 0c 43	 mov	 WORD PTR [ebx+eax*2], cx
  000bd	66 ff 02	 inc	 WORD PTR [edx]

; 480  : 	
; 481  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  000c0	0f b6 0f	 movzx	 ecx, BYTE PTR [edi]
  000c3	0f b7 02	 movzx	 eax, WORD PTR [edx]
  000c6	66 41		 inc	 cx
  000c8	66 03 c9	 add	 cx, cx
  000cb	66 03 0e	 add	 cx, WORD PTR [esi]
  000ce	66 89 0c 43	 mov	 WORD PTR [ebx+eax*2], cx
  000d2	66 ff 02	 inc	 WORD PTR [edx]

; 482  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 4;

  000d5	0f b6 0f	 movzx	 ecx, BYTE PTR [edi]
  000d8	0f b7 02	 movzx	 eax, WORD PTR [edx]
  000db	66 c1 e1 02	 shl	 cx, 2
  000df	66 03 0e	 add	 cx, WORD PTR [esi]
  000e2	66 89 0c 43	 mov	 WORD PTR [ebx+eax*2], cx
  000e6	66 ff 02	 inc	 WORD PTR [edx]
  000e9	0f b7 02	 movzx	 eax, WORD PTR [edx]

; 483  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 4 + 2;

  000ec	0f b6 0f	 movzx	 ecx, BYTE PTR [edi]
  000ef	66 c1 e1 02	 shl	 cx, 2
  000f3	66 83 c1 02	 add	 cx, 2
  000f7	66 03 0e	 add	 cx, WORD PTR [esi]
  000fa	5f		 pop	 edi
  000fb	66 89 0c 43	 mov	 WORD PTR [ebx+eax*2], cx
  000ff	66 ff 02	 inc	 WORD PTR [edx]
  00102	5e		 pop	 esi
  00103	5b		 pop	 ebx

; 484  : }

  00104	8b e5		 mov	 esp, ebp
  00106	5d		 pop	 ebp
  00107	c2 10 00	 ret	 16			; 00000010H
?ADDLvl2R@CMapOutdoor@@IAEXPAGAAGABGABE@Z ENDP		; CMapOutdoor::ADDLvl2R
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\mapoutdoorindexbuffer.cpp
;	COMDAT ?ADDLvl2L@CMapOutdoor@@IAEXPAGAAGABGABE@Z
_TEXT	SEGMENT
_pIndices$ = 8						; size = 4
_rwCount$ = 12						; size = 4
_c_rwCurCount$ = 16					; size = 4
$T1 = 20						; size = 2
_c_rucNumLineWarp$ = 20					; size = 4
?ADDLvl2L@CMapOutdoor@@IAEXPAGAAGABGABE@Z PROC		; CMapOutdoor::ADDLvl2L, COMDAT
; _this$ = ecx

; 451  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 452  : 	ADDLvl1L(pIndices, rwCount, c_rwCurCount, c_rucNumLineWarp);

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _pIndices$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 14	 mov	 edi, DWORD PTR _c_rucNumLineWarp$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	57		 push	 edi
  0000f	ff 75 10	 push	 DWORD PTR _c_rwCurCount$[ebp]
  00012	ff 75 0c	 push	 DWORD PTR _rwCount$[ebp]
  00015	53		 push	 ebx
  00016	e8 00 00 00 00	 call	 ?ADDLvl1L@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1L

; 453  : 	ADDLvl1L(pIndices, rwCount, c_rwCurCount + c_rucNumLineWarp * 2, c_rucNumLineWarp);

  0001b	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  0001e	8b 4d 10	 mov	 ecx, DWORD PTR _c_rwCurCount$[ebp]
  00021	66 03 c0	 add	 ax, ax
  00024	57		 push	 edi
  00025	66 03 01	 add	 ax, WORD PTR [ecx]
  00028	8b ce		 mov	 ecx, esi
  0002a	0f b7 c0	 movzx	 eax, ax
  0002d	89 45 14	 mov	 DWORD PTR $T1[ebp], eax
  00030	8d 45 14	 lea	 eax, DWORD PTR $T1[ebp]
  00033	50		 push	 eax
  00034	ff 75 0c	 push	 DWORD PTR _rwCount$[ebp]
  00037	53		 push	 ebx
  00038	e8 00 00 00 00	 call	 ?ADDLvl1L@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1L

; 454  : 
; 455  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  0003d	8b 75 0c	 mov	 esi, DWORD PTR _rwCount$[ebp]
  00040	8b 55 10	 mov	 edx, DWORD PTR _c_rwCurCount$[ebp]
  00043	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00046	0f b7 0a	 movzx	 ecx, WORD PTR [edx]
  00049	66 83 c1 02	 add	 cx, 2
  0004d	66 89 0c 43	 mov	 WORD PTR [ebx+eax*2], cx
  00051	66 ff 06	 inc	 WORD PTR [esi]

; 456  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  00054	0f b6 0f	 movzx	 ecx, BYTE PTR [edi]
  00057	0f b7 06	 movzx	 eax, WORD PTR [esi]
  0005a	66 41		 inc	 cx
  0005c	66 03 c9	 add	 cx, cx
  0005f	66 03 0a	 add	 cx, WORD PTR [edx]
  00062	66 89 0c 43	 mov	 WORD PTR [ebx+eax*2], cx
  00066	66 ff 06	 inc	 WORD PTR [esi]
  00069	0f b7 06	 movzx	 eax, WORD PTR [esi]

; 457  : 	pIndices[rwCount++] = c_rwCurCount + 4;

  0006c	0f b7 0a	 movzx	 ecx, WORD PTR [edx]
  0006f	66 83 c1 04	 add	 cx, 4
  00073	66 89 0c 43	 mov	 WORD PTR [ebx+eax*2], cx
  00077	66 ff 06	 inc	 WORD PTR [esi]
  0007a	0f b7 06	 movzx	 eax, WORD PTR [esi]

; 458  : 	
; 459  : 	pIndices[rwCount++] = c_rwCurCount + 4;

  0007d	0f b7 0a	 movzx	 ecx, WORD PTR [edx]
  00080	66 83 c1 04	 add	 cx, 4
  00084	66 89 0c 43	 mov	 WORD PTR [ebx+eax*2], cx
  00088	66 ff 06	 inc	 WORD PTR [esi]

; 460  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  0008b	0f b6 0f	 movzx	 ecx, BYTE PTR [edi]
  0008e	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00091	66 41		 inc	 cx
  00093	66 03 c9	 add	 cx, cx
  00096	66 03 0a	 add	 cx, WORD PTR [edx]
  00099	66 89 0c 43	 mov	 WORD PTR [ebx+eax*2], cx
  0009d	66 ff 06	 inc	 WORD PTR [esi]

; 461  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 4 + 4;

  000a0	0f b6 0f	 movzx	 ecx, BYTE PTR [edi]
  000a3	0f b7 06	 movzx	 eax, WORD PTR [esi]
  000a6	66 41		 inc	 cx
  000a8	66 c1 e1 02	 shl	 cx, 2
  000ac	66 03 0a	 add	 cx, WORD PTR [edx]
  000af	66 89 0c 43	 mov	 WORD PTR [ebx+eax*2], cx
  000b3	66 ff 06	 inc	 WORD PTR [esi]

; 462  : 	
; 463  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 4 + 4;

  000b6	0f b6 0f	 movzx	 ecx, BYTE PTR [edi]
  000b9	0f b7 06	 movzx	 eax, WORD PTR [esi]
  000bc	66 41		 inc	 cx
  000be	66 c1 e1 02	 shl	 cx, 2
  000c2	66 03 0a	 add	 cx, WORD PTR [edx]
  000c5	66 89 0c 43	 mov	 WORD PTR [ebx+eax*2], cx
  000c9	66 ff 06	 inc	 WORD PTR [esi]

; 464  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  000cc	0f b6 0f	 movzx	 ecx, BYTE PTR [edi]
  000cf	0f b7 06	 movzx	 eax, WORD PTR [esi]
  000d2	66 41		 inc	 cx
  000d4	66 03 c9	 add	 cx, cx
  000d7	66 03 0a	 add	 cx, WORD PTR [edx]
  000da	66 89 0c 43	 mov	 WORD PTR [ebx+eax*2], cx
  000de	66 ff 06	 inc	 WORD PTR [esi]

; 465  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 4 + 2;

  000e1	0f b6 0f	 movzx	 ecx, BYTE PTR [edi]
  000e4	0f b7 06	 movzx	 eax, WORD PTR [esi]
  000e7	66 c1 e1 02	 shl	 cx, 2
  000eb	66 83 c1 02	 add	 cx, 2
  000ef	66 03 0a	 add	 cx, WORD PTR [edx]
  000f2	66 89 0c 43	 mov	 WORD PTR [ebx+eax*2], cx
  000f6	66 ff 06	 inc	 WORD PTR [esi]
  000f9	5f		 pop	 edi
  000fa	5e		 pop	 esi
  000fb	5b		 pop	 ebx

; 466  : }

  000fc	5d		 pop	 ebp
  000fd	c2 10 00	 ret	 16			; 00000010H
?ADDLvl2L@CMapOutdoor@@IAEXPAGAAGABGABE@Z ENDP		; CMapOutdoor::ADDLvl2L
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\mapoutdoorindexbuffer.cpp
;	COMDAT ?ADDLvl2TR@CMapOutdoor@@IAEXPAGAAGABGABE@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_pIndices$ = 8						; size = 4
_rwCount$ = 12						; size = 4
$T1 = 16						; size = 2
$T2 = 16						; size = 2
_c_rwCurCount$ = 16					; size = 4
$T3 = 20						; size = 2
_c_rucNumLineWarp$ = 20					; size = 4
?ADDLvl2TR@CMapOutdoor@@IAEXPAGAAGABGABE@Z PROC		; CMapOutdoor::ADDLvl2TR, COMDAT
; _this$ = ecx

; 443  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 444  : 	ADDLvl1T(pIndices, rwCount, c_rwCurCount, c_rucNumLineWarp);

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR _rwCount$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	56		 push	 esi
  0000b	8b 75 10	 mov	 esi, DWORD PTR _c_rwCurCount$[ebp]
  0000e	57		 push	 edi
  0000f	ff 75 14	 push	 DWORD PTR _c_rucNumLineWarp$[ebp]
  00012	8b 7d 08	 mov	 edi, DWORD PTR _pIndices$[ebp]
  00015	56		 push	 esi
  00016	53		 push	 ebx
  00017	57		 push	 edi
  00018	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0001b	e8 00 00 00 00	 call	 ?ADDLvl1T@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1T

; 445  : 	ADDLvl1TR(pIndices, rwCount, c_rwCurCount + 2, c_rucNumLineWarp);

  00020	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00023	ff 75 14	 push	 DWORD PTR _c_rucNumLineWarp$[ebp]
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00029	66 83 c0 02	 add	 ax, 2
  0002d	0f b7 c0	 movzx	 eax, ax
  00030	89 45 10	 mov	 DWORD PTR $T1[ebp], eax
  00033	8d 45 10	 lea	 eax, DWORD PTR $T1[ebp]
  00036	50		 push	 eax
  00037	53		 push	 ebx
  00038	57		 push	 edi
  00039	e8 00 00 00 00	 call	 ?ADDLvl1TR@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1TR

; 446  : 	ADDLvl1M(pIndices, rwCount, c_rwCurCount + c_rucNumLineWarp * 2, c_rucNumLineWarp);

  0003e	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00041	51		 push	 ecx
  00042	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00048	66 03 c0	 add	 ax, ax
  0004b	66 03 06	 add	 ax, WORD PTR [esi]
  0004e	0f b7 c0	 movzx	 eax, ax
  00051	89 45 10	 mov	 DWORD PTR $T2[ebp], eax
  00054	8d 45 10	 lea	 eax, DWORD PTR $T2[ebp]
  00057	50		 push	 eax
  00058	53		 push	 ebx
  00059	57		 push	 edi
  0005a	e8 00 00 00 00	 call	 ?ADDLvl1M@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1M

; 447  : 	ADDLvl1R(pIndices, rwCount, c_rwCurCount + c_rucNumLineWarp * 2 + 2, c_rucNumLineWarp);

  0005f	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00062	51		 push	 ecx
  00063	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00066	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00069	66 40		 inc	 ax
  0006b	66 03 c0	 add	 ax, ax
  0006e	66 03 06	 add	 ax, WORD PTR [esi]
  00071	0f b7 c0	 movzx	 eax, ax
  00074	89 45 14	 mov	 DWORD PTR $T3[ebp], eax
  00077	8d 45 14	 lea	 eax, DWORD PTR $T3[ebp]
  0007a	50		 push	 eax
  0007b	53		 push	 ebx
  0007c	57		 push	 edi
  0007d	e8 00 00 00 00	 call	 ?ADDLvl1R@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1R
  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx

; 448  : }

  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 10 00	 ret	 16			; 00000010H
?ADDLvl2TR@CMapOutdoor@@IAEXPAGAAGABGABE@Z ENDP		; CMapOutdoor::ADDLvl2TR
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\mapoutdoorindexbuffer.cpp
;	COMDAT ?ADDLvl2T@CMapOutdoor@@IAEXPAGAAGABGABE@Z
_TEXT	SEGMENT
_pIndices$ = 8						; size = 4
_rwCount$ = 12						; size = 4
_c_rwCurCount$ = 16					; size = 4
$T1 = 20						; size = 2
_c_rucNumLineWarp$ = 20					; size = 4
?ADDLvl2T@CMapOutdoor@@IAEXPAGAAGABGABE@Z PROC		; CMapOutdoor::ADDLvl2T, COMDAT
; _this$ = ecx

; 425  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 426  : 	ADDLvl1T(pIndices, rwCount, c_rwCurCount, c_rucNumLineWarp);

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _pIndices$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 14	 mov	 edi, DWORD PTR _c_rucNumLineWarp$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	57		 push	 edi
  0000f	ff 75 10	 push	 DWORD PTR _c_rwCurCount$[ebp]
  00012	ff 75 0c	 push	 DWORD PTR _rwCount$[ebp]
  00015	53		 push	 ebx
  00016	e8 00 00 00 00	 call	 ?ADDLvl1T@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1T

; 427  : 	ADDLvl1T(pIndices, rwCount, c_rwCurCount + 2, c_rucNumLineWarp);

  0001b	8b 4d 10	 mov	 ecx, DWORD PTR _c_rwCurCount$[ebp]
  0001e	57		 push	 edi
  0001f	0f b7 01	 movzx	 eax, WORD PTR [ecx]
  00022	8b ce		 mov	 ecx, esi
  00024	66 83 c0 02	 add	 ax, 2
  00028	0f b7 c0	 movzx	 eax, ax
  0002b	89 45 14	 mov	 DWORD PTR $T1[ebp], eax
  0002e	8d 45 14	 lea	 eax, DWORD PTR $T1[ebp]
  00031	50		 push	 eax
  00032	ff 75 0c	 push	 DWORD PTR _rwCount$[ebp]
  00035	53		 push	 ebx
  00036	e8 00 00 00 00	 call	 ?ADDLvl1T@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1T

; 428  : 	
; 429  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  0003b	8b 75 0c	 mov	 esi, DWORD PTR _rwCount$[ebp]
  0003e	0f b6 0f	 movzx	 ecx, BYTE PTR [edi]
  00041	8b 55 10	 mov	 edx, DWORD PTR _c_rwCurCount$[ebp]
  00044	66 03 c9	 add	 cx, cx
  00047	0f b7 06	 movzx	 eax, WORD PTR [esi]
  0004a	66 03 0a	 add	 cx, WORD PTR [edx]
  0004d	66 89 0c 43	 mov	 WORD PTR [ebx+eax*2], cx
  00051	66 ff 06	 inc	 WORD PTR [esi]

; 430  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 4;

  00054	0f b6 0f	 movzx	 ecx, BYTE PTR [edi]
  00057	0f b7 06	 movzx	 eax, WORD PTR [esi]
  0005a	66 c1 e1 02	 shl	 cx, 2
  0005e	66 03 0a	 add	 cx, WORD PTR [edx]
  00061	66 89 0c 43	 mov	 WORD PTR [ebx+eax*2], cx
  00065	66 ff 06	 inc	 WORD PTR [esi]

; 431  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  00068	0f b6 0f	 movzx	 ecx, BYTE PTR [edi]
  0006b	0f b7 06	 movzx	 eax, WORD PTR [esi]
  0006e	66 41		 inc	 cx
  00070	66 03 c9	 add	 cx, cx
  00073	66 03 0a	 add	 cx, WORD PTR [edx]
  00076	66 89 0c 43	 mov	 WORD PTR [ebx+eax*2], cx
  0007a	66 ff 06	 inc	 WORD PTR [esi]

; 432  : 
; 433  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 4;

  0007d	0f b6 0f	 movzx	 ecx, BYTE PTR [edi]
  00080	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00083	66 c1 e1 02	 shl	 cx, 2
  00087	66 03 0a	 add	 cx, WORD PTR [edx]
  0008a	66 89 0c 43	 mov	 WORD PTR [ebx+eax*2], cx
  0008e	66 ff 06	 inc	 WORD PTR [esi]

; 434  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 4 + 4;

  00091	0f b6 0f	 movzx	 ecx, BYTE PTR [edi]
  00094	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00097	66 41		 inc	 cx
  00099	66 c1 e1 02	 shl	 cx, 2
  0009d	66 03 0a	 add	 cx, WORD PTR [edx]
  000a0	66 89 0c 43	 mov	 WORD PTR [ebx+eax*2], cx
  000a4	66 ff 06	 inc	 WORD PTR [esi]

; 435  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  000a7	0f b6 0f	 movzx	 ecx, BYTE PTR [edi]
  000aa	0f b7 06	 movzx	 eax, WORD PTR [esi]
  000ad	66 41		 inc	 cx
  000af	66 03 c9	 add	 cx, cx
  000b2	66 03 0a	 add	 cx, WORD PTR [edx]
  000b5	66 89 0c 43	 mov	 WORD PTR [ebx+eax*2], cx
  000b9	66 ff 06	 inc	 WORD PTR [esi]

; 436  : 	
; 437  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 4 + 4;

  000bc	0f b6 0f	 movzx	 ecx, BYTE PTR [edi]
  000bf	0f b7 06	 movzx	 eax, WORD PTR [esi]
  000c2	66 41		 inc	 cx
  000c4	66 c1 e1 02	 shl	 cx, 2
  000c8	66 03 0a	 add	 cx, WORD PTR [edx]
  000cb	66 89 0c 43	 mov	 WORD PTR [ebx+eax*2], cx
  000cf	66 ff 06	 inc	 WORD PTR [esi]

; 438  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 4;

  000d2	0f b6 0f	 movzx	 ecx, BYTE PTR [edi]
  000d5	0f b7 06	 movzx	 eax, WORD PTR [esi]
  000d8	66 83 c1 02	 add	 cx, 2
  000dc	66 03 c9	 add	 cx, cx
  000df	66 03 0a	 add	 cx, WORD PTR [edx]
  000e2	66 89 0c 43	 mov	 WORD PTR [ebx+eax*2], cx
  000e6	66 ff 06	 inc	 WORD PTR [esi]

; 439  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  000e9	0f b6 0f	 movzx	 ecx, BYTE PTR [edi]
  000ec	0f b7 06	 movzx	 eax, WORD PTR [esi]
  000ef	66 41		 inc	 cx
  000f1	66 03 c9	 add	 cx, cx
  000f4	66 03 0a	 add	 cx, WORD PTR [edx]
  000f7	66 89 0c 43	 mov	 WORD PTR [ebx+eax*2], cx
  000fb	66 ff 06	 inc	 WORD PTR [esi]
  000fe	5f		 pop	 edi
  000ff	5e		 pop	 esi
  00100	5b		 pop	 ebx

; 440  : }

  00101	5d		 pop	 ebp
  00102	c2 10 00	 ret	 16			; 00000010H
?ADDLvl2T@CMapOutdoor@@IAEXPAGAAGABGABE@Z ENDP		; CMapOutdoor::ADDLvl2T
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\mapoutdoorindexbuffer.cpp
;	COMDAT ?ADDLvl2TL@CMapOutdoor@@IAEXPAGAAGABGABE@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_pIndices$ = 8						; size = 4
_rwCount$ = 12						; size = 4
$T1 = 16						; size = 2
$T2 = 16						; size = 2
_c_rwCurCount$ = 16					; size = 4
$T3 = 20						; size = 2
_c_rucNumLineWarp$ = 20					; size = 4
?ADDLvl2TL@CMapOutdoor@@IAEXPAGAAGABGABE@Z PROC		; CMapOutdoor::ADDLvl2TL, COMDAT
; _this$ = ecx

; 417  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 418  : 	ADDLvl1TL(pIndices, rwCount, c_rwCurCount, c_rucNumLineWarp);

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR _rwCount$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	56		 push	 esi
  0000b	8b 75 10	 mov	 esi, DWORD PTR _c_rwCurCount$[ebp]
  0000e	57		 push	 edi
  0000f	ff 75 14	 push	 DWORD PTR _c_rucNumLineWarp$[ebp]
  00012	8b 7d 08	 mov	 edi, DWORD PTR _pIndices$[ebp]
  00015	56		 push	 esi
  00016	53		 push	 ebx
  00017	57		 push	 edi
  00018	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0001b	e8 00 00 00 00	 call	 ?ADDLvl1TL@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1TL

; 419  : 	ADDLvl1T(pIndices, rwCount, c_rwCurCount + 2, c_rucNumLineWarp);

  00020	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00023	ff 75 14	 push	 DWORD PTR _c_rucNumLineWarp$[ebp]
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00029	66 83 c0 02	 add	 ax, 2
  0002d	0f b7 c0	 movzx	 eax, ax
  00030	89 45 10	 mov	 DWORD PTR $T1[ebp], eax
  00033	8d 45 10	 lea	 eax, DWORD PTR $T1[ebp]
  00036	50		 push	 eax
  00037	53		 push	 ebx
  00038	57		 push	 edi
  00039	e8 00 00 00 00	 call	 ?ADDLvl1T@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1T

; 420  : 	ADDLvl1L(pIndices, rwCount, c_rwCurCount + c_rucNumLineWarp * 2, c_rucNumLineWarp);

  0003e	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00041	51		 push	 ecx
  00042	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00048	66 03 c0	 add	 ax, ax
  0004b	66 03 06	 add	 ax, WORD PTR [esi]
  0004e	0f b7 c0	 movzx	 eax, ax
  00051	89 45 10	 mov	 DWORD PTR $T2[ebp], eax
  00054	8d 45 10	 lea	 eax, DWORD PTR $T2[ebp]
  00057	50		 push	 eax
  00058	53		 push	 ebx
  00059	57		 push	 edi
  0005a	e8 00 00 00 00	 call	 ?ADDLvl1L@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1L

; 421  : 	ADDLvl1M(pIndices, rwCount, c_rwCurCount + c_rucNumLineWarp * 2 + 2, c_rucNumLineWarp);

  0005f	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00062	51		 push	 ecx
  00063	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00066	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00069	66 40		 inc	 ax
  0006b	66 03 c0	 add	 ax, ax
  0006e	66 03 06	 add	 ax, WORD PTR [esi]
  00071	0f b7 c0	 movzx	 eax, ax
  00074	89 45 14	 mov	 DWORD PTR $T3[ebp], eax
  00077	8d 45 14	 lea	 eax, DWORD PTR $T3[ebp]
  0007a	50		 push	 eax
  0007b	53		 push	 ebx
  0007c	57		 push	 edi
  0007d	e8 00 00 00 00	 call	 ?ADDLvl1M@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1M
  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx

; 422  : }

  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 10 00	 ret	 16			; 00000010H
?ADDLvl2TL@CMapOutdoor@@IAEXPAGAAGABGABE@Z ENDP		; CMapOutdoor::ADDLvl2TL
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\mapoutdoorindexbuffer.cpp
;	COMDAT ?ADDLvl1M@CMapOutdoor@@IAEXPAGAAGABGABE@Z
_TEXT	SEGMENT
_pIndices$ = 8						; size = 4
_rwCount$ = 12						; size = 4
_c_rwCurCount$ = 16					; size = 4
_c_rucNumLineWarp$ = 20					; size = 4
?ADDLvl1M@CMapOutdoor@@IAEXPAGAAGABGABE@Z PROC		; CMapOutdoor::ADDLvl1M, COMDAT
; _this$ = ecx

; 406  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 407  : 	pIndices[rwCount++] = c_rwCurCount;
; 408  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  00003	8b 55 14	 mov	 edx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 0c	 mov	 ebx, DWORD PTR _rwCount$[ebp]
  0000a	56		 push	 esi
  0000b	8b 75 10	 mov	 esi, DWORD PTR _c_rwCurCount$[ebp]
  0000e	57		 push	 edi
  0000f	0f b7 0b	 movzx	 ecx, WORD PTR [ebx]
  00012	8b 7d 08	 mov	 edi, DWORD PTR _pIndices$[ebp]
  00015	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00018	66 89 04 4f	 mov	 WORD PTR [edi+ecx*2], ax
  0001c	66 ff 03	 inc	 WORD PTR [ebx]
  0001f	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00022	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00025	66 03 c9	 add	 cx, cx
  00028	66 03 0e	 add	 cx, WORD PTR [esi]
  0002b	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  0002f	66 ff 03	 inc	 WORD PTR [ebx]
  00032	0f b7 03	 movzx	 eax, WORD PTR [ebx]

; 409  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  00035	0f b7 0e	 movzx	 ecx, WORD PTR [esi]
  00038	66 83 c1 02	 add	 cx, 2
  0003c	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00040	66 ff 03	 inc	 WORD PTR [ebx]

; 410  : 	
; 411  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  00043	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00046	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00049	66 03 c9	 add	 cx, cx
  0004c	66 03 0e	 add	 cx, WORD PTR [esi]
  0004f	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00053	66 ff 03	 inc	 WORD PTR [ebx]

; 412  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  00056	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00059	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  0005c	66 41		 inc	 cx
  0005e	66 03 c9	 add	 cx, cx
  00061	66 03 0e	 add	 cx, WORD PTR [esi]
  00064	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00068	66 ff 03	 inc	 WORD PTR [ebx]
  0006b	0f b7 03	 movzx	 eax, WORD PTR [ebx]

; 413  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  0006e	0f b7 0e	 movzx	 ecx, WORD PTR [esi]
  00071	66 83 c1 02	 add	 cx, 2
  00075	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00079	66 ff 03	 inc	 WORD PTR [ebx]
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx

; 414  : }

  0007f	5d		 pop	 ebp
  00080	c2 10 00	 ret	 16			; 00000010H
?ADDLvl1M@CMapOutdoor@@IAEXPAGAAGABGABE@Z ENDP		; CMapOutdoor::ADDLvl1M
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\mapoutdoorindexbuffer.cpp
;	COMDAT ?ADDLvl1BR@CMapOutdoor@@IAEXPAGAAGABGABE@Z
_TEXT	SEGMENT
_pIndices$ = 8						; size = 4
_rwCount$ = 12						; size = 4
_c_rwCurCount$ = 16					; size = 4
_c_rucNumLineWarp$ = 20					; size = 4
?ADDLvl1BR@CMapOutdoor@@IAEXPAGAAGABGABE@Z PROC		; CMapOutdoor::ADDLvl1BR, COMDAT
; _this$ = ecx

; 379  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 380  : 	pIndices[rwCount++] = c_rwCurCount;
; 381  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  00003	8b 55 14	 mov	 edx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 0c	 mov	 ebx, DWORD PTR _rwCount$[ebp]
  0000a	56		 push	 esi
  0000b	8b 75 10	 mov	 esi, DWORD PTR _c_rwCurCount$[ebp]
  0000e	57		 push	 edi
  0000f	0f b7 0b	 movzx	 ecx, WORD PTR [ebx]
  00012	8b 7d 08	 mov	 edi, DWORD PTR _pIndices$[ebp]
  00015	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00018	66 89 04 4f	 mov	 WORD PTR [edi+ecx*2], ax
  0001c	66 ff 03	 inc	 WORD PTR [ebx]
  0001f	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00022	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00025	66 03 c9	 add	 cx, cx
  00028	66 03 0e	 add	 cx, WORD PTR [esi]
  0002b	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  0002f	66 ff 03	 inc	 WORD PTR [ebx]

; 382  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  00032	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00035	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00038	66 41		 inc	 cx
  0003a	66 03 0e	 add	 cx, WORD PTR [esi]
  0003d	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00041	66 ff 03	 inc	 WORD PTR [ebx]

; 383  : 	
; 384  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  00044	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00047	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  0004a	66 03 c9	 add	 cx, cx
  0004d	66 03 0e	 add	 cx, WORD PTR [esi]
  00050	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00054	66 ff 03	 inc	 WORD PTR [ebx]

; 385  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 1;

  00057	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  0005a	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  0005d	66 03 c9	 add	 cx, cx
  00060	66 41		 inc	 cx
  00062	66 03 0e	 add	 cx, WORD PTR [esi]
  00065	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00069	66 ff 03	 inc	 WORD PTR [ebx]

; 386  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  0006c	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  0006f	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00072	66 41		 inc	 cx
  00074	66 03 0e	 add	 cx, WORD PTR [esi]
  00077	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  0007b	66 ff 03	 inc	 WORD PTR [ebx]

; 387  : 	
; 388  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 1;

  0007e	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00081	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00084	66 03 c9	 add	 cx, cx
  00087	66 41		 inc	 cx
  00089	66 03 0e	 add	 cx, WORD PTR [esi]
  0008c	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00090	66 ff 03	 inc	 WORD PTR [ebx]

; 389  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  00093	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00096	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00099	66 41		 inc	 cx
  0009b	66 03 c9	 add	 cx, cx
  0009e	66 03 0e	 add	 cx, WORD PTR [esi]
  000a1	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000a5	66 ff 03	 inc	 WORD PTR [ebx]

; 390  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  000a8	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  000ab	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  000ae	66 41		 inc	 cx
  000b0	66 03 0e	 add	 cx, WORD PTR [esi]
  000b3	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000b7	66 ff 03	 inc	 WORD PTR [ebx]

; 391  : 	
; 392  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  000ba	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  000bd	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  000c0	66 41		 inc	 cx
  000c2	66 03 c9	 add	 cx, cx
  000c5	66 03 0e	 add	 cx, WORD PTR [esi]
  000c8	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000cc	66 ff 03	 inc	 WORD PTR [ebx]

; 393  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 2;

  000cf	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  000d2	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  000d5	66 83 c1 02	 add	 cx, 2
  000d9	66 03 0e	 add	 cx, WORD PTR [esi]
  000dc	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000e0	66 ff 03	 inc	 WORD PTR [ebx]

; 394  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  000e3	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  000e6	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  000e9	66 41		 inc	 cx
  000eb	66 03 0e	 add	 cx, WORD PTR [esi]
  000ee	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000f2	66 ff 03	 inc	 WORD PTR [ebx]

; 395  : 	
; 396  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 2;

  000f5	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  000f8	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  000fb	66 83 c1 02	 add	 cx, 2
  000ff	66 03 0e	 add	 cx, WORD PTR [esi]
  00102	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00106	66 ff 03	 inc	 WORD PTR [ebx]
  00109	0f b7 03	 movzx	 eax, WORD PTR [ebx]

; 397  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  0010c	0f b7 0e	 movzx	 ecx, WORD PTR [esi]
  0010f	66 83 c1 02	 add	 cx, 2
  00113	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00117	66 ff 03	 inc	 WORD PTR [ebx]

; 398  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  0011a	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  0011d	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00120	66 41		 inc	 cx
  00122	66 03 0e	 add	 cx, WORD PTR [esi]
  00125	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00129	66 ff 03	 inc	 WORD PTR [ebx]
  0012c	0f b7 03	 movzx	 eax, WORD PTR [ebx]

; 399  : 	
; 400  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  0012f	0f b7 0e	 movzx	 ecx, WORD PTR [esi]
  00132	66 83 c1 02	 add	 cx, 2
  00136	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  0013a	66 ff 03	 inc	 WORD PTR [ebx]
  0013d	0f b7 0b	 movzx	 ecx, WORD PTR [ebx]

; 401  : 	pIndices[rwCount++] = c_rwCurCount;

  00140	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00143	66 89 04 4f	 mov	 WORD PTR [edi+ecx*2], ax
  00147	66 ff 03	 inc	 WORD PTR [ebx]

; 402  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  0014a	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  0014d	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00150	66 41		 inc	 cx
  00152	66 03 0e	 add	 cx, WORD PTR [esi]
  00155	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00159	66 ff 03	 inc	 WORD PTR [ebx]
  0015c	5f		 pop	 edi
  0015d	5e		 pop	 esi
  0015e	5b		 pop	 ebx

; 403  : }

  0015f	5d		 pop	 ebp
  00160	c2 10 00	 ret	 16			; 00000010H
?ADDLvl1BR@CMapOutdoor@@IAEXPAGAAGABGABE@Z ENDP		; CMapOutdoor::ADDLvl1BR
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\mapoutdoorindexbuffer.cpp
;	COMDAT ?ADDLvl1B@CMapOutdoor@@IAEXPAGAAGABGABE@Z
_TEXT	SEGMENT
_pIndices$ = 8						; size = 4
_rwCount$ = 12						; size = 4
_c_rwCurCount$ = 16					; size = 4
_c_rucNumLineWarp$ = 20					; size = 4
?ADDLvl1B@CMapOutdoor@@IAEXPAGAAGABGABE@Z PROC		; CMapOutdoor::ADDLvl1B, COMDAT
; _this$ = ecx

; 356  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 357  : 	pIndices[rwCount++] = c_rwCurCount;
; 358  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  00003	8b 55 14	 mov	 edx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 0c	 mov	 ebx, DWORD PTR _rwCount$[ebp]
  0000a	56		 push	 esi
  0000b	8b 75 10	 mov	 esi, DWORD PTR _c_rwCurCount$[ebp]
  0000e	57		 push	 edi
  0000f	0f b7 0b	 movzx	 ecx, WORD PTR [ebx]
  00012	8b 7d 08	 mov	 edi, DWORD PTR _pIndices$[ebp]
  00015	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00018	66 89 04 4f	 mov	 WORD PTR [edi+ecx*2], ax
  0001c	66 ff 03	 inc	 WORD PTR [ebx]
  0001f	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00022	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00025	66 03 c9	 add	 cx, cx
  00028	66 03 0e	 add	 cx, WORD PTR [esi]
  0002b	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  0002f	66 ff 03	 inc	 WORD PTR [ebx]

; 359  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  00032	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00035	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00038	66 41		 inc	 cx
  0003a	66 03 0e	 add	 cx, WORD PTR [esi]
  0003d	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00041	66 ff 03	 inc	 WORD PTR [ebx]

; 360  : 	
; 361  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  00044	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00047	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  0004a	66 03 c9	 add	 cx, cx
  0004d	66 03 0e	 add	 cx, WORD PTR [esi]
  00050	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00054	66 ff 03	 inc	 WORD PTR [ebx]

; 362  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 1;

  00057	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  0005a	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  0005d	66 03 c9	 add	 cx, cx
  00060	66 41		 inc	 cx
  00062	66 03 0e	 add	 cx, WORD PTR [esi]
  00065	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00069	66 ff 03	 inc	 WORD PTR [ebx]

; 363  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  0006c	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  0006f	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00072	66 41		 inc	 cx
  00074	66 03 0e	 add	 cx, WORD PTR [esi]
  00077	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  0007b	66 ff 03	 inc	 WORD PTR [ebx]

; 364  : 	
; 365  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 1;

  0007e	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00081	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00084	66 03 c9	 add	 cx, cx
  00087	66 41		 inc	 cx
  00089	66 03 0e	 add	 cx, WORD PTR [esi]
  0008c	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00090	66 ff 03	 inc	 WORD PTR [ebx]

; 366  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  00093	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00096	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00099	66 41		 inc	 cx
  0009b	66 03 c9	 add	 cx, cx
  0009e	66 03 0e	 add	 cx, WORD PTR [esi]
  000a1	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000a5	66 ff 03	 inc	 WORD PTR [ebx]

; 367  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  000a8	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  000ab	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  000ae	66 41		 inc	 cx
  000b0	66 03 0e	 add	 cx, WORD PTR [esi]
  000b3	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000b7	66 ff 03	 inc	 WORD PTR [ebx]

; 368  : 	
; 369  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  000ba	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  000bd	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  000c0	66 41		 inc	 cx
  000c2	66 03 c9	 add	 cx, cx
  000c5	66 03 0e	 add	 cx, WORD PTR [esi]
  000c8	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000cc	66 ff 03	 inc	 WORD PTR [ebx]
  000cf	0f b7 03	 movzx	 eax, WORD PTR [ebx]

; 370  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  000d2	0f b7 0e	 movzx	 ecx, WORD PTR [esi]
  000d5	66 83 c1 02	 add	 cx, 2
  000d9	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000dd	66 ff 03	 inc	 WORD PTR [ebx]

; 371  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  000e0	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  000e3	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  000e6	66 41		 inc	 cx
  000e8	66 03 0e	 add	 cx, WORD PTR [esi]
  000eb	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000ef	66 ff 03	 inc	 WORD PTR [ebx]
  000f2	0f b7 03	 movzx	 eax, WORD PTR [ebx]

; 372  : 	
; 373  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  000f5	0f b7 0e	 movzx	 ecx, WORD PTR [esi]
  000f8	66 83 c1 02	 add	 cx, 2
  000fc	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00100	66 ff 03	 inc	 WORD PTR [ebx]
  00103	0f b7 0b	 movzx	 ecx, WORD PTR [ebx]

; 374  : 	pIndices[rwCount++] = c_rwCurCount;

  00106	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00109	66 89 04 4f	 mov	 WORD PTR [edi+ecx*2], ax
  0010d	66 ff 03	 inc	 WORD PTR [ebx]

; 375  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  00110	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00113	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00116	66 41		 inc	 cx
  00118	66 03 0e	 add	 cx, WORD PTR [esi]
  0011b	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  0011f	66 ff 03	 inc	 WORD PTR [ebx]
  00122	5f		 pop	 edi
  00123	5e		 pop	 esi
  00124	5b		 pop	 ebx

; 376  : }

  00125	5d		 pop	 ebp
  00126	c2 10 00	 ret	 16			; 00000010H
?ADDLvl1B@CMapOutdoor@@IAEXPAGAAGABGABE@Z ENDP		; CMapOutdoor::ADDLvl1B
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\mapoutdoorindexbuffer.cpp
;	COMDAT ?ADDLvl1BL@CMapOutdoor@@IAEXPAGAAGABGABE@Z
_TEXT	SEGMENT
_pIndices$ = 8						; size = 4
_rwCount$ = 12						; size = 4
_c_rwCurCount$ = 16					; size = 4
_c_rucNumLineWarp$ = 20					; size = 4
?ADDLvl1BL@CMapOutdoor@@IAEXPAGAAGABGABE@Z PROC		; CMapOutdoor::ADDLvl1BL, COMDAT
; _this$ = ecx

; 329  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 330  : 	pIndices[rwCount++] = c_rwCurCount;
; 331  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp;

  00003	8b 55 14	 mov	 edx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 0c	 mov	 ebx, DWORD PTR _rwCount$[ebp]
  0000a	56		 push	 esi
  0000b	8b 75 10	 mov	 esi, DWORD PTR _c_rwCurCount$[ebp]
  0000e	57		 push	 edi
  0000f	0f b7 0b	 movzx	 ecx, WORD PTR [ebx]
  00012	8b 7d 08	 mov	 edi, DWORD PTR _pIndices$[ebp]
  00015	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00018	66 89 04 4f	 mov	 WORD PTR [edi+ecx*2], ax
  0001c	66 ff 03	 inc	 WORD PTR [ebx]
  0001f	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00022	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00025	66 03 0e	 add	 cx, WORD PTR [esi]
  00028	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  0002c	66 ff 03	 inc	 WORD PTR [ebx]

; 332  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  0002f	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00032	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00035	66 41		 inc	 cx
  00037	66 03 0e	 add	 cx, WORD PTR [esi]
  0003a	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  0003e	66 ff 03	 inc	 WORD PTR [ebx]
  00041	0f b7 03	 movzx	 eax, WORD PTR [ebx]

; 333  : 	
; 334  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp;

  00044	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00047	66 03 0e	 add	 cx, WORD PTR [esi]
  0004a	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  0004e	66 ff 03	 inc	 WORD PTR [ebx]

; 335  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  00051	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00054	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00057	66 03 c9	 add	 cx, cx
  0005a	66 03 0e	 add	 cx, WORD PTR [esi]
  0005d	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00061	66 ff 03	 inc	 WORD PTR [ebx]

; 336  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  00064	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00067	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  0006a	66 41		 inc	 cx
  0006c	66 03 0e	 add	 cx, WORD PTR [esi]
  0006f	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00073	66 ff 03	 inc	 WORD PTR [ebx]

; 337  : 	
; 338  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  00076	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00079	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  0007c	66 41		 inc	 cx
  0007e	66 03 0e	 add	 cx, WORD PTR [esi]
  00081	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00085	66 ff 03	 inc	 WORD PTR [ebx]

; 339  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  00088	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  0008b	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  0008e	66 03 c9	 add	 cx, cx
  00091	66 03 0e	 add	 cx, WORD PTR [esi]
  00094	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00098	66 ff 03	 inc	 WORD PTR [ebx]

; 340  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 1;

  0009b	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  0009e	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  000a1	66 03 c9	 add	 cx, cx
  000a4	66 41		 inc	 cx
  000a6	66 03 0e	 add	 cx, WORD PTR [esi]
  000a9	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000ad	66 ff 03	 inc	 WORD PTR [ebx]

; 341  : 	
; 342  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  000b0	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  000b3	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  000b6	66 41		 inc	 cx
  000b8	66 03 0e	 add	 cx, WORD PTR [esi]
  000bb	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000bf	66 ff 03	 inc	 WORD PTR [ebx]

; 343  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 1;

  000c2	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  000c5	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  000c8	66 03 c9	 add	 cx, cx
  000cb	66 41		 inc	 cx
  000cd	66 03 0e	 add	 cx, WORD PTR [esi]
  000d0	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000d4	66 ff 03	 inc	 WORD PTR [ebx]

; 344  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  000d7	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  000da	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  000dd	66 41		 inc	 cx
  000df	66 03 c9	 add	 cx, cx
  000e2	66 03 0e	 add	 cx, WORD PTR [esi]
  000e5	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000e9	66 ff 03	 inc	 WORD PTR [ebx]

; 345  : 	
; 346  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  000ec	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  000ef	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  000f2	66 41		 inc	 cx
  000f4	66 03 c9	 add	 cx, cx
  000f7	66 03 0e	 add	 cx, WORD PTR [esi]
  000fa	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000fe	66 ff 03	 inc	 WORD PTR [ebx]
  00101	0f b7 03	 movzx	 eax, WORD PTR [ebx]

; 347  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  00104	0f b7 0e	 movzx	 ecx, WORD PTR [esi]
  00107	66 83 c1 02	 add	 cx, 2
  0010b	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  0010f	66 ff 03	 inc	 WORD PTR [ebx]

; 348  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  00112	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00115	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00118	66 41		 inc	 cx
  0011a	66 03 0e	 add	 cx, WORD PTR [esi]
  0011d	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00121	66 ff 03	 inc	 WORD PTR [ebx]
  00124	0f b7 03	 movzx	 eax, WORD PTR [ebx]

; 349  : 	
; 350  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  00127	0f b7 0e	 movzx	 ecx, WORD PTR [esi]
  0012a	66 83 c1 02	 add	 cx, 2
  0012e	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00132	66 ff 03	 inc	 WORD PTR [ebx]
  00135	0f b7 0b	 movzx	 ecx, WORD PTR [ebx]

; 351  : 	pIndices[rwCount++] = c_rwCurCount;

  00138	0f b7 06	 movzx	 eax, WORD PTR [esi]
  0013b	66 89 04 4f	 mov	 WORD PTR [edi+ecx*2], ax
  0013f	66 ff 03	 inc	 WORD PTR [ebx]

; 352  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  00142	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00145	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00148	66 41		 inc	 cx
  0014a	66 03 0e	 add	 cx, WORD PTR [esi]
  0014d	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00151	66 ff 03	 inc	 WORD PTR [ebx]
  00154	5f		 pop	 edi
  00155	5e		 pop	 esi
  00156	5b		 pop	 ebx

; 353  : }

  00157	5d		 pop	 ebp
  00158	c2 10 00	 ret	 16			; 00000010H
?ADDLvl1BL@CMapOutdoor@@IAEXPAGAAGABGABE@Z ENDP		; CMapOutdoor::ADDLvl1BL
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\mapoutdoorindexbuffer.cpp
;	COMDAT ?ADDLvl1R@CMapOutdoor@@IAEXPAGAAGABGABE@Z
_TEXT	SEGMENT
_pIndices$ = 8						; size = 4
_rwCount$ = 12						; size = 4
_c_rwCurCount$ = 16					; size = 4
_c_rucNumLineWarp$ = 20					; size = 4
?ADDLvl1R@CMapOutdoor@@IAEXPAGAAGABGABE@Z PROC		; CMapOutdoor::ADDLvl1R, COMDAT
; _this$ = ecx

; 306  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 307  : 	pIndices[rwCount++] = c_rwCurCount;
; 308  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  00003	8b 55 14	 mov	 edx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 0c	 mov	 ebx, DWORD PTR _rwCount$[ebp]
  0000a	56		 push	 esi
  0000b	8b 75 10	 mov	 esi, DWORD PTR _c_rwCurCount$[ebp]
  0000e	57		 push	 edi
  0000f	0f b7 0b	 movzx	 ecx, WORD PTR [ebx]
  00012	8b 7d 08	 mov	 edi, DWORD PTR _pIndices$[ebp]
  00015	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00018	66 89 04 4f	 mov	 WORD PTR [edi+ecx*2], ax
  0001c	66 ff 03	 inc	 WORD PTR [ebx]
  0001f	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00022	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00025	66 03 c9	 add	 cx, cx
  00028	66 03 0e	 add	 cx, WORD PTR [esi]
  0002b	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  0002f	66 ff 03	 inc	 WORD PTR [ebx]

; 309  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  00032	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00035	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00038	66 41		 inc	 cx
  0003a	66 03 0e	 add	 cx, WORD PTR [esi]
  0003d	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00041	66 ff 03	 inc	 WORD PTR [ebx]

; 310  : 	
; 311  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  00044	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00047	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  0004a	66 03 c9	 add	 cx, cx
  0004d	66 03 0e	 add	 cx, WORD PTR [esi]
  00050	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00054	66 ff 03	 inc	 WORD PTR [ebx]

; 312  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  00057	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  0005a	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  0005d	66 41		 inc	 cx
  0005f	66 03 c9	 add	 cx, cx
  00062	66 03 0e	 add	 cx, WORD PTR [esi]
  00065	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00069	66 ff 03	 inc	 WORD PTR [ebx]

; 313  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  0006c	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  0006f	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00072	66 41		 inc	 cx
  00074	66 03 0e	 add	 cx, WORD PTR [esi]
  00077	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  0007b	66 ff 03	 inc	 WORD PTR [ebx]

; 314  : 	
; 315  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  0007e	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00081	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00084	66 41		 inc	 cx
  00086	66 03 c9	 add	 cx, cx
  00089	66 03 0e	 add	 cx, WORD PTR [esi]
  0008c	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00090	66 ff 03	 inc	 WORD PTR [ebx]

; 316  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 2;

  00093	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00096	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00099	66 83 c1 02	 add	 cx, 2
  0009d	66 03 0e	 add	 cx, WORD PTR [esi]
  000a0	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000a4	66 ff 03	 inc	 WORD PTR [ebx]

; 317  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  000a7	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  000aa	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  000ad	66 41		 inc	 cx
  000af	66 03 0e	 add	 cx, WORD PTR [esi]
  000b2	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000b6	66 ff 03	 inc	 WORD PTR [ebx]

; 318  : 	
; 319  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 2;

  000b9	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  000bc	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  000bf	66 83 c1 02	 add	 cx, 2
  000c3	66 03 0e	 add	 cx, WORD PTR [esi]
  000c6	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000ca	66 ff 03	 inc	 WORD PTR [ebx]
  000cd	0f b7 03	 movzx	 eax, WORD PTR [ebx]

; 320  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  000d0	0f b7 0e	 movzx	 ecx, WORD PTR [esi]
  000d3	66 83 c1 02	 add	 cx, 2
  000d7	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000db	66 ff 03	 inc	 WORD PTR [ebx]

; 321  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  000de	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  000e1	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  000e4	66 41		 inc	 cx
  000e6	66 03 0e	 add	 cx, WORD PTR [esi]
  000e9	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000ed	66 ff 03	 inc	 WORD PTR [ebx]

; 322  : 	
; 323  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  000f0	0f b7 0e	 movzx	 ecx, WORD PTR [esi]
  000f3	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  000f6	66 83 c1 02	 add	 cx, 2
  000fa	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000fe	66 ff 03	 inc	 WORD PTR [ebx]
  00101	0f b7 0b	 movzx	 ecx, WORD PTR [ebx]

; 324  : 	pIndices[rwCount++] = c_rwCurCount;

  00104	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00107	66 89 04 4f	 mov	 WORD PTR [edi+ecx*2], ax
  0010b	66 ff 03	 inc	 WORD PTR [ebx]

; 325  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  0010e	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00111	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00114	66 41		 inc	 cx
  00116	66 03 0e	 add	 cx, WORD PTR [esi]
  00119	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  0011d	66 ff 03	 inc	 WORD PTR [ebx]
  00120	5f		 pop	 edi
  00121	5e		 pop	 esi
  00122	5b		 pop	 ebx

; 326  : }

  00123	5d		 pop	 ebp
  00124	c2 10 00	 ret	 16			; 00000010H
?ADDLvl1R@CMapOutdoor@@IAEXPAGAAGABGABE@Z ENDP		; CMapOutdoor::ADDLvl1R
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\mapoutdoorindexbuffer.cpp
;	COMDAT ?ADDLvl1L@CMapOutdoor@@IAEXPAGAAGABGABE@Z
_TEXT	SEGMENT
_pIndices$ = 8						; size = 4
_rwCount$ = 12						; size = 4
_c_rwCurCount$ = 16					; size = 4
_c_rucNumLineWarp$ = 20					; size = 4
?ADDLvl1L@CMapOutdoor@@IAEXPAGAAGABGABE@Z PROC		; CMapOutdoor::ADDLvl1L, COMDAT
; _this$ = ecx

; 283  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 284  : 	pIndices[rwCount++] = c_rwCurCount;
; 285  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp;

  00003	8b 55 14	 mov	 edx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 0c	 mov	 ebx, DWORD PTR _rwCount$[ebp]
  0000a	56		 push	 esi
  0000b	8b 75 10	 mov	 esi, DWORD PTR _c_rwCurCount$[ebp]
  0000e	57		 push	 edi
  0000f	0f b7 0b	 movzx	 ecx, WORD PTR [ebx]
  00012	8b 7d 08	 mov	 edi, DWORD PTR _pIndices$[ebp]
  00015	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00018	66 89 04 4f	 mov	 WORD PTR [edi+ecx*2], ax
  0001c	66 ff 03	 inc	 WORD PTR [ebx]
  0001f	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00022	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00025	66 03 0e	 add	 cx, WORD PTR [esi]
  00028	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  0002c	66 ff 03	 inc	 WORD PTR [ebx]

; 286  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  0002f	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00032	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00035	66 41		 inc	 cx
  00037	66 03 0e	 add	 cx, WORD PTR [esi]
  0003a	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  0003e	66 ff 03	 inc	 WORD PTR [ebx]
  00041	0f b7 03	 movzx	 eax, WORD PTR [ebx]

; 287  : 	
; 288  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp;

  00044	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00047	66 03 0e	 add	 cx, WORD PTR [esi]
  0004a	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  0004e	66 ff 03	 inc	 WORD PTR [ebx]

; 289  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  00051	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00054	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00057	66 03 c9	 add	 cx, cx
  0005a	66 03 0e	 add	 cx, WORD PTR [esi]
  0005d	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00061	66 ff 03	 inc	 WORD PTR [ebx]

; 290  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  00064	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00067	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  0006a	66 41		 inc	 cx
  0006c	66 03 0e	 add	 cx, WORD PTR [esi]
  0006f	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00073	66 ff 03	 inc	 WORD PTR [ebx]

; 291  : 	
; 292  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  00076	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00079	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  0007c	66 03 c9	 add	 cx, cx
  0007f	66 03 0e	 add	 cx, WORD PTR [esi]
  00082	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00086	66 ff 03	 inc	 WORD PTR [ebx]

; 293  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  00089	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  0008c	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  0008f	66 41		 inc	 cx
  00091	66 03 c9	 add	 cx, cx
  00094	66 03 0e	 add	 cx, WORD PTR [esi]
  00097	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  0009b	66 ff 03	 inc	 WORD PTR [ebx]

; 294  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  0009e	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  000a1	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  000a4	66 41		 inc	 cx
  000a6	66 03 0e	 add	 cx, WORD PTR [esi]
  000a9	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000ad	66 ff 03	 inc	 WORD PTR [ebx]

; 295  : 	
; 296  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  000b0	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  000b3	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  000b6	66 41		 inc	 cx
  000b8	66 03 c9	 add	 cx, cx
  000bb	66 03 0e	 add	 cx, WORD PTR [esi]
  000be	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000c2	66 ff 03	 inc	 WORD PTR [ebx]
  000c5	0f b7 03	 movzx	 eax, WORD PTR [ebx]

; 297  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  000c8	0f b7 0e	 movzx	 ecx, WORD PTR [esi]
  000cb	66 83 c1 02	 add	 cx, 2
  000cf	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000d3	66 ff 03	 inc	 WORD PTR [ebx]

; 298  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  000d6	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  000d9	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  000dc	66 41		 inc	 cx
  000de	66 03 0e	 add	 cx, WORD PTR [esi]
  000e1	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000e5	66 ff 03	 inc	 WORD PTR [ebx]
  000e8	0f b7 03	 movzx	 eax, WORD PTR [ebx]

; 299  : 	
; 300  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  000eb	0f b7 0e	 movzx	 ecx, WORD PTR [esi]
  000ee	66 83 c1 02	 add	 cx, 2
  000f2	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000f6	66 ff 03	 inc	 WORD PTR [ebx]
  000f9	0f b7 0b	 movzx	 ecx, WORD PTR [ebx]

; 301  : 	pIndices[rwCount++] = c_rwCurCount;

  000fc	0f b7 06	 movzx	 eax, WORD PTR [esi]
  000ff	66 89 04 4f	 mov	 WORD PTR [edi+ecx*2], ax
  00103	66 ff 03	 inc	 WORD PTR [ebx]

; 302  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  00106	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00109	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  0010c	66 41		 inc	 cx
  0010e	66 03 0e	 add	 cx, WORD PTR [esi]
  00111	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00115	66 ff 03	 inc	 WORD PTR [ebx]
  00118	5f		 pop	 edi
  00119	5e		 pop	 esi
  0011a	5b		 pop	 ebx

; 303  : }

  0011b	5d		 pop	 ebp
  0011c	c2 10 00	 ret	 16			; 00000010H
?ADDLvl1L@CMapOutdoor@@IAEXPAGAAGABGABE@Z ENDP		; CMapOutdoor::ADDLvl1L
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\mapoutdoorindexbuffer.cpp
;	COMDAT ?ADDLvl1TR@CMapOutdoor@@IAEXPAGAAGABGABE@Z
_TEXT	SEGMENT
_pIndices$ = 8						; size = 4
_rwCount$ = 12						; size = 4
_c_rwCurCount$ = 16					; size = 4
_c_rucNumLineWarp$ = 20					; size = 4
?ADDLvl1TR@CMapOutdoor@@IAEXPAGAAGABGABE@Z PROC		; CMapOutdoor::ADDLvl1TR, COMDAT
; _this$ = ecx

; 256  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 257  : 	pIndices[rwCount++] = c_rwCurCount;
; 258  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  00003	8b 55 14	 mov	 edx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 0c	 mov	 ebx, DWORD PTR _rwCount$[ebp]
  0000a	56		 push	 esi
  0000b	8b 75 10	 mov	 esi, DWORD PTR _c_rwCurCount$[ebp]
  0000e	57		 push	 edi
  0000f	0f b7 0b	 movzx	 ecx, WORD PTR [ebx]
  00012	8b 7d 08	 mov	 edi, DWORD PTR _pIndices$[ebp]
  00015	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00018	66 89 04 4f	 mov	 WORD PTR [edi+ecx*2], ax
  0001c	66 ff 03	 inc	 WORD PTR [ebx]
  0001f	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00022	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00025	66 03 c9	 add	 cx, cx
  00028	66 03 0e	 add	 cx, WORD PTR [esi]
  0002b	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  0002f	66 ff 03	 inc	 WORD PTR [ebx]

; 259  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  00032	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00035	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00038	66 41		 inc	 cx
  0003a	66 03 0e	 add	 cx, WORD PTR [esi]
  0003d	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00041	66 ff 03	 inc	 WORD PTR [ebx]

; 260  : 	
; 261  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  00044	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00047	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  0004a	66 03 c9	 add	 cx, cx
  0004d	66 03 0e	 add	 cx, WORD PTR [esi]
  00050	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00054	66 ff 03	 inc	 WORD PTR [ebx]

; 262  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  00057	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  0005a	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  0005d	66 41		 inc	 cx
  0005f	66 03 c9	 add	 cx, cx
  00062	66 03 0e	 add	 cx, WORD PTR [esi]
  00065	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00069	66 ff 03	 inc	 WORD PTR [ebx]

; 263  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  0006c	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  0006f	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00072	66 41		 inc	 cx
  00074	66 03 0e	 add	 cx, WORD PTR [esi]
  00077	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  0007b	66 ff 03	 inc	 WORD PTR [ebx]

; 264  : 	
; 265  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  0007e	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00081	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00084	66 41		 inc	 cx
  00086	66 03 c9	 add	 cx, cx
  00089	66 03 0e	 add	 cx, WORD PTR [esi]
  0008c	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00090	66 ff 03	 inc	 WORD PTR [ebx]

; 266  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 2;

  00093	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00096	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00099	66 83 c1 02	 add	 cx, 2
  0009d	66 03 0e	 add	 cx, WORD PTR [esi]
  000a0	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000a4	66 ff 03	 inc	 WORD PTR [ebx]

; 267  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  000a7	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  000aa	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  000ad	66 41		 inc	 cx
  000af	66 03 0e	 add	 cx, WORD PTR [esi]
  000b2	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000b6	66 ff 03	 inc	 WORD PTR [ebx]

; 268  : 	
; 269  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 2;

  000b9	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  000bc	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  000bf	66 83 c1 02	 add	 cx, 2
  000c3	66 03 0e	 add	 cx, WORD PTR [esi]
  000c6	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000ca	66 ff 03	 inc	 WORD PTR [ebx]
  000cd	0f b7 03	 movzx	 eax, WORD PTR [ebx]

; 270  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  000d0	0f b7 0e	 movzx	 ecx, WORD PTR [esi]
  000d3	66 83 c1 02	 add	 cx, 2
  000d7	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000db	66 ff 03	 inc	 WORD PTR [ebx]

; 271  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  000de	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  000e1	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  000e4	66 41		 inc	 cx
  000e6	66 03 0e	 add	 cx, WORD PTR [esi]
  000e9	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000ed	66 ff 03	 inc	 WORD PTR [ebx]

; 272  : 	
; 273  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  000f0	0f b7 0e	 movzx	 ecx, WORD PTR [esi]
  000f3	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  000f6	66 83 c1 02	 add	 cx, 2
  000fa	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000fe	66 ff 03	 inc	 WORD PTR [ebx]
  00101	0f b7 03	 movzx	 eax, WORD PTR [ebx]

; 274  : 	pIndices[rwCount++] = c_rwCurCount + 1;

  00104	0f b7 0e	 movzx	 ecx, WORD PTR [esi]
  00107	66 41		 inc	 cx
  00109	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  0010d	66 ff 03	 inc	 WORD PTR [ebx]

; 275  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  00110	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00113	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00116	66 41		 inc	 cx
  00118	66 03 0e	 add	 cx, WORD PTR [esi]
  0011b	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  0011f	66 ff 03	 inc	 WORD PTR [ebx]
  00122	0f b7 03	 movzx	 eax, WORD PTR [ebx]

; 276  : 
; 277  : 	pIndices[rwCount++] = c_rwCurCount + 1;

  00125	0f b7 0e	 movzx	 ecx, WORD PTR [esi]
  00128	66 41		 inc	 cx
  0012a	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  0012e	66 ff 03	 inc	 WORD PTR [ebx]
  00131	0f b7 0b	 movzx	 ecx, WORD PTR [ebx]

; 278  : 	pIndices[rwCount++] = c_rwCurCount;

  00134	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00137	66 89 04 4f	 mov	 WORD PTR [edi+ecx*2], ax
  0013b	66 ff 03	 inc	 WORD PTR [ebx]

; 279  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  0013e	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00141	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00144	66 41		 inc	 cx
  00146	66 03 0e	 add	 cx, WORD PTR [esi]
  00149	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  0014d	66 ff 03	 inc	 WORD PTR [ebx]
  00150	5f		 pop	 edi
  00151	5e		 pop	 esi
  00152	5b		 pop	 ebx

; 280  : }

  00153	5d		 pop	 ebp
  00154	c2 10 00	 ret	 16			; 00000010H
?ADDLvl1TR@CMapOutdoor@@IAEXPAGAAGABGABE@Z ENDP		; CMapOutdoor::ADDLvl1TR
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\mapoutdoorindexbuffer.cpp
;	COMDAT ?ADDLvl1T@CMapOutdoor@@IAEXPAGAAGABGABE@Z
_TEXT	SEGMENT
_pIndices$ = 8						; size = 4
_rwCount$ = 12						; size = 4
_c_rwCurCount$ = 16					; size = 4
_c_rucNumLineWarp$ = 20					; size = 4
?ADDLvl1T@CMapOutdoor@@IAEXPAGAAGABGABE@Z PROC		; CMapOutdoor::ADDLvl1T, COMDAT
; _this$ = ecx

; 233  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 234  : 	pIndices[rwCount++] = c_rwCurCount;
; 235  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  00003	8b 55 14	 mov	 edx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 0c	 mov	 ebx, DWORD PTR _rwCount$[ebp]
  0000a	56		 push	 esi
  0000b	8b 75 10	 mov	 esi, DWORD PTR _c_rwCurCount$[ebp]
  0000e	57		 push	 edi
  0000f	0f b7 0b	 movzx	 ecx, WORD PTR [ebx]
  00012	8b 7d 08	 mov	 edi, DWORD PTR _pIndices$[ebp]
  00015	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00018	66 89 04 4f	 mov	 WORD PTR [edi+ecx*2], ax
  0001c	66 ff 03	 inc	 WORD PTR [ebx]
  0001f	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00022	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00025	66 03 c9	 add	 cx, cx
  00028	66 03 0e	 add	 cx, WORD PTR [esi]
  0002b	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  0002f	66 ff 03	 inc	 WORD PTR [ebx]

; 236  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  00032	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00035	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00038	66 41		 inc	 cx
  0003a	66 03 0e	 add	 cx, WORD PTR [esi]
  0003d	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00041	66 ff 03	 inc	 WORD PTR [ebx]

; 237  : 	
; 238  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  00044	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00047	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  0004a	66 03 c9	 add	 cx, cx
  0004d	66 03 0e	 add	 cx, WORD PTR [esi]
  00050	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00054	66 ff 03	 inc	 WORD PTR [ebx]

; 239  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  00057	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  0005a	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  0005d	66 41		 inc	 cx
  0005f	66 03 c9	 add	 cx, cx
  00062	66 03 0e	 add	 cx, WORD PTR [esi]
  00065	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00069	66 ff 03	 inc	 WORD PTR [ebx]

; 240  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  0006c	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  0006f	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00072	66 41		 inc	 cx
  00074	66 03 0e	 add	 cx, WORD PTR [esi]
  00077	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  0007b	66 ff 03	 inc	 WORD PTR [ebx]

; 241  : 	
; 242  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  0007e	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00081	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00084	66 41		 inc	 cx
  00086	66 03 c9	 add	 cx, cx
  00089	66 03 0e	 add	 cx, WORD PTR [esi]
  0008c	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00090	66 ff 03	 inc	 WORD PTR [ebx]
  00093	0f b7 03	 movzx	 eax, WORD PTR [ebx]

; 243  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  00096	0f b7 0e	 movzx	 ecx, WORD PTR [esi]
  00099	66 83 c1 02	 add	 cx, 2
  0009d	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000a1	66 ff 03	 inc	 WORD PTR [ebx]

; 244  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  000a4	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  000a7	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  000aa	66 41		 inc	 cx
  000ac	66 03 0e	 add	 cx, WORD PTR [esi]
  000af	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000b3	66 ff 03	 inc	 WORD PTR [ebx]
  000b6	0f b7 03	 movzx	 eax, WORD PTR [ebx]

; 245  : 	
; 246  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  000b9	0f b7 0e	 movzx	 ecx, WORD PTR [esi]
  000bc	66 83 c1 02	 add	 cx, 2
  000c0	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000c4	66 ff 03	 inc	 WORD PTR [ebx]
  000c7	0f b7 03	 movzx	 eax, WORD PTR [ebx]

; 247  : 	pIndices[rwCount++] = c_rwCurCount + 1;

  000ca	0f b7 0e	 movzx	 ecx, WORD PTR [esi]
  000cd	66 41		 inc	 cx
  000cf	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000d3	66 ff 03	 inc	 WORD PTR [ebx]

; 248  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  000d6	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  000d9	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  000dc	66 41		 inc	 cx
  000de	66 03 0e	 add	 cx, WORD PTR [esi]
  000e1	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000e5	66 ff 03	 inc	 WORD PTR [ebx]
  000e8	0f b7 03	 movzx	 eax, WORD PTR [ebx]

; 249  : 	
; 250  : 	pIndices[rwCount++] = c_rwCurCount + 1;

  000eb	0f b7 0e	 movzx	 ecx, WORD PTR [esi]
  000ee	66 41		 inc	 cx
  000f0	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  000f4	66 ff 03	 inc	 WORD PTR [ebx]
  000f7	0f b7 0b	 movzx	 ecx, WORD PTR [ebx]

; 251  : 	pIndices[rwCount++] = c_rwCurCount;

  000fa	0f b7 06	 movzx	 eax, WORD PTR [esi]
  000fd	66 89 04 4f	 mov	 WORD PTR [edi+ecx*2], ax
  00101	66 ff 03	 inc	 WORD PTR [ebx]

; 252  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  00104	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00107	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  0010a	66 41		 inc	 cx
  0010c	66 03 0e	 add	 cx, WORD PTR [esi]
  0010f	66 89 0c 47	 mov	 WORD PTR [edi+eax*2], cx
  00113	66 ff 03	 inc	 WORD PTR [ebx]
  00116	5f		 pop	 edi
  00117	5e		 pop	 esi
  00118	5b		 pop	 ebx

; 253  : }

  00119	5d		 pop	 ebp
  0011a	c2 10 00	 ret	 16			; 00000010H
?ADDLvl1T@CMapOutdoor@@IAEXPAGAAGABGABE@Z ENDP		; CMapOutdoor::ADDLvl1T
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\mapoutdoorindexbuffer.cpp
;	COMDAT ?ADDLvl1TL@CMapOutdoor@@IAEXPAGAAGABGABE@Z
_TEXT	SEGMENT
_pIndices$ = 8						; size = 4
_rwCount$ = 12						; size = 4
_c_rwCurCount$ = 16					; size = 4
_c_rucNumLineWarp$ = 20					; size = 4
?ADDLvl1TL@CMapOutdoor@@IAEXPAGAAGABGABE@Z PROC		; CMapOutdoor::ADDLvl1TL, COMDAT
; _this$ = ecx

; 206  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  : 	pIndices[rwCount++] = c_rwCurCount;
; 208  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp;

  00003	8b 55 14	 mov	 edx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 0c	 mov	 ebx, DWORD PTR _rwCount$[ebp]
  0000a	56		 push	 esi
  0000b	8b 75 08	 mov	 esi, DWORD PTR _pIndices$[ebp]
  0000e	57		 push	 edi
  0000f	0f b7 0b	 movzx	 ecx, WORD PTR [ebx]
  00012	8b 7d 10	 mov	 edi, DWORD PTR _c_rwCurCount$[ebp]
  00015	0f b7 07	 movzx	 eax, WORD PTR [edi]
  00018	66 89 04 4e	 mov	 WORD PTR [esi+ecx*2], ax
  0001c	66 ff 03	 inc	 WORD PTR [ebx]
  0001f	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00022	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00025	66 03 0f	 add	 cx, WORD PTR [edi]
  00028	66 89 0c 46	 mov	 WORD PTR [esi+eax*2], cx
  0002c	66 ff 03	 inc	 WORD PTR [ebx]

; 209  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  0002f	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00032	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00035	66 41		 inc	 cx
  00037	66 03 0f	 add	 cx, WORD PTR [edi]
  0003a	66 89 0c 46	 mov	 WORD PTR [esi+eax*2], cx
  0003e	66 ff 03	 inc	 WORD PTR [ebx]
  00041	0f b7 03	 movzx	 eax, WORD PTR [ebx]

; 210  : 
; 211  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp;

  00044	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00047	66 03 0f	 add	 cx, WORD PTR [edi]
  0004a	66 89 0c 46	 mov	 WORD PTR [esi+eax*2], cx
  0004e	66 ff 03	 inc	 WORD PTR [ebx]

; 212  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  00051	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00054	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00057	66 03 c9	 add	 cx, cx
  0005a	66 03 0f	 add	 cx, WORD PTR [edi]
  0005d	66 89 0c 46	 mov	 WORD PTR [esi+eax*2], cx
  00061	66 ff 03	 inc	 WORD PTR [ebx]

; 213  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  00064	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00067	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  0006a	66 41		 inc	 cx
  0006c	66 03 0f	 add	 cx, WORD PTR [edi]
  0006f	66 89 0c 46	 mov	 WORD PTR [esi+eax*2], cx
  00073	66 ff 03	 inc	 WORD PTR [ebx]

; 214  : 
; 215  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  00076	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00079	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  0007c	66 41		 inc	 cx
  0007e	66 03 0f	 add	 cx, WORD PTR [edi]
  00081	66 89 0c 46	 mov	 WORD PTR [esi+eax*2], cx
  00085	66 ff 03	 inc	 WORD PTR [ebx]

; 216  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  00088	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  0008b	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  0008e	66 03 c9	 add	 cx, cx
  00091	66 03 0f	 add	 cx, WORD PTR [edi]
  00094	66 89 0c 46	 mov	 WORD PTR [esi+eax*2], cx
  00098	66 ff 03	 inc	 WORD PTR [ebx]

; 217  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  0009b	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  0009e	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  000a1	66 41		 inc	 cx
  000a3	66 03 c9	 add	 cx, cx
  000a6	66 03 0f	 add	 cx, WORD PTR [edi]
  000a9	66 89 0c 46	 mov	 WORD PTR [esi+eax*2], cx
  000ad	66 ff 03	 inc	 WORD PTR [ebx]

; 218  : 
; 219  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  000b0	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  000b3	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  000b6	66 41		 inc	 cx
  000b8	66 03 0f	 add	 cx, WORD PTR [edi]
  000bb	66 89 0c 46	 mov	 WORD PTR [esi+eax*2], cx
  000bf	66 ff 03	 inc	 WORD PTR [ebx]

; 220  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  000c2	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  000c5	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  000c8	66 41		 inc	 cx
  000ca	66 03 c9	 add	 cx, cx
  000cd	66 03 0f	 add	 cx, WORD PTR [edi]
  000d0	66 89 0c 46	 mov	 WORD PTR [esi+eax*2], cx
  000d4	66 ff 03	 inc	 WORD PTR [ebx]
  000d7	0f b7 03	 movzx	 eax, WORD PTR [ebx]

; 221  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  000da	0f b7 0f	 movzx	 ecx, WORD PTR [edi]
  000dd	66 83 c1 02	 add	 cx, 2
  000e1	66 89 0c 46	 mov	 WORD PTR [esi+eax*2], cx
  000e5	66 ff 03	 inc	 WORD PTR [ebx]

; 222  : 
; 223  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  000e8	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  000eb	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  000ee	66 41		 inc	 cx
  000f0	66 03 0f	 add	 cx, WORD PTR [edi]
  000f3	66 89 0c 46	 mov	 WORD PTR [esi+eax*2], cx
  000f7	66 ff 03	 inc	 WORD PTR [ebx]
  000fa	0f b7 03	 movzx	 eax, WORD PTR [ebx]

; 224  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  000fd	0f b7 0f	 movzx	 ecx, WORD PTR [edi]
  00100	66 83 c1 02	 add	 cx, 2
  00104	66 89 0c 46	 mov	 WORD PTR [esi+eax*2], cx
  00108	66 ff 03	 inc	 WORD PTR [ebx]
  0010b	0f b7 03	 movzx	 eax, WORD PTR [ebx]

; 225  : 	pIndices[rwCount++] = c_rwCurCount + 1;

  0010e	0f b7 0f	 movzx	 ecx, WORD PTR [edi]
  00111	66 41		 inc	 cx
  00113	66 89 0c 46	 mov	 WORD PTR [esi+eax*2], cx
  00117	66 ff 03	 inc	 WORD PTR [ebx]

; 226  : 
; 227  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  0011a	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  0011d	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00120	66 41		 inc	 cx
  00122	66 03 0f	 add	 cx, WORD PTR [edi]
  00125	66 89 0c 46	 mov	 WORD PTR [esi+eax*2], cx
  00129	66 ff 03	 inc	 WORD PTR [ebx]
  0012c	0f b7 03	 movzx	 eax, WORD PTR [ebx]

; 228  : 	pIndices[rwCount++] = c_rwCurCount + 1;

  0012f	0f b7 0f	 movzx	 ecx, WORD PTR [edi]
  00132	66 41		 inc	 cx
  00134	66 89 0c 46	 mov	 WORD PTR [esi+eax*2], cx
  00138	66 ff 03	 inc	 WORD PTR [ebx]
  0013b	0f b7 0b	 movzx	 ecx, WORD PTR [ebx]

; 229  : 	pIndices[rwCount++] = c_rwCurCount;

  0013e	0f b7 07	 movzx	 eax, WORD PTR [edi]
  00141	5f		 pop	 edi
  00142	66 89 04 4e	 mov	 WORD PTR [esi+ecx*2], ax
  00146	66 ff 03	 inc	 WORD PTR [ebx]
  00149	5e		 pop	 esi
  0014a	5b		 pop	 ebx

; 230  : }

  0014b	5d		 pop	 ebp
  0014c	c2 10 00	 ret	 16			; 00000010H
?ADDLvl1TL@CMapOutdoor@@IAEXPAGAAGABGABE@Z ENDP		; CMapOutdoor::ADDLvl1TL
_TEXT	ENDS
END
