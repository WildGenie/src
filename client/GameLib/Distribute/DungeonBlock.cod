; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	A:\From C\Desktop\Serwer\Source\Source Client\client\GameLib\DungeonBlock.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	_sqrtf
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z			; D3DXVECTOR3::operator+
PUBLIC	??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z			; D3DXVECTOR3::operator-
PUBLIC	??DD3DXVECTOR3@@QBE?AU0@M@Z			; D3DXVECTOR3::operator*
PUBLIC	?D3DXVec3Length@@YAMPBUD3DXVECTOR3@@@Z		; D3DXVec3Length
PUBLIC	?Instance@?$CSingleton@VCResourceManager@@@@SAAAVCResourceManager@@XZ ; CSingleton<CResourceManager>::Instance
PUBLIC	?begin@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCStaticCollisionData@@@std@@@std@@@2@XZ ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::begin
PUBLIC	?end@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCStaticCollisionData@@@std@@@std@@@2@XZ ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::end
PUBLIC	?OnClear@CGraphicObjectInstance@@UAEXXZ		; CGraphicObjectInstance::OnClear
PUBLIC	?OnUpdate@CGraphicObjectInstance@@UAEXXZ	; CGraphicObjectInstance::OnUpdate
PUBLIC	?OnDeform@CGraphicObjectInstance@@UAEXXZ	; CGraphicObjectInstance::OnDeform
PUBLIC	?GetType@CDungeonBlock@@UBEHXZ			; CDungeonBlock::GetType
PUBLIC	??0CDungeonBlock@@QAE@XZ			; CDungeonBlock::CDungeonBlock
PUBLIC	??1CDungeonBlock@@UAE@XZ			; CDungeonBlock::~CDungeonBlock
PUBLIC	?Destroy@CDungeonBlock@@QAEXXZ			; CDungeonBlock::Destroy
PUBLIC	?BuildBoundingSphere@CDungeonBlock@@QAEXXZ	; CDungeonBlock::BuildBoundingSphere
PUBLIC	?Load@CDungeonBlock@@QAE_NPBD@Z			; CDungeonBlock::Load
PUBLIC	?Intersect@CDungeonBlock@@QAE_NPAM00@Z		; CDungeonBlock::Intersect
PUBLIC	?GetBoundBox@CDungeonBlock@@QAEXPAUD3DXVECTOR3@@0@Z ; CDungeonBlock::GetBoundBox
PUBLIC	?Update@CDungeonBlock@@QAEXXZ			; CDungeonBlock::Update
PUBLIC	?Render@CDungeonBlock@@QAEXXZ			; CDungeonBlock::Render
PUBLIC	?GetBoundingSphere@CDungeonBlock@@UAE_NAAUD3DXVECTOR3@@AAM@Z ; CDungeonBlock::GetBoundingSphere
PUBLIC	?OnUpdateCollisionData@CDungeonBlock@@UAEXPBV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@@Z ; CDungeonBlock::OnUpdateCollisionData
PUBLIC	?OnUpdateHeighInstance@CDungeonBlock@@UAEXPAVCAttributeInstance@@@Z ; CDungeonBlock::OnUpdateHeighInstance
PUBLIC	?OnGetObjectHeight@CDungeonBlock@@UAE_NMMPAM@Z	; CDungeonBlock::OnGetObjectHeight
PUBLIC	?OnRender@CDungeonBlock@@UAEXXZ			; CDungeonBlock::OnRender
PUBLIC	?OnBlendRender@CDungeonBlock@@UAEXXZ		; CDungeonBlock::OnBlendRender
PUBLIC	?OnRenderToShadowMap@CDungeonBlock@@UAEXXZ	; CDungeonBlock::OnRenderToShadowMap
PUBLIC	?OnRenderShadow@CDungeonBlock@@UAEXXZ		; CDungeonBlock::OnRenderShadow
PUBLIC	?OnRenderPCBlocker@CDungeonBlock@@UAEXXZ	; CDungeonBlock::OnRenderPCBlocker
PUBLIC	?__Initialize@CDungeonBlock@@IAEXXZ		; CDungeonBlock::__Initialize
PUBLIC	??0?$allocator@PAVCDungeonModelInstance@@@std@@QAE@XZ ; std::allocator<CDungeonModelInstance *>::allocator<CDungeonModelInstance *>
PUBLIC	?deallocate@?$allocator@PAVCDungeonModelInstance@@@std@@QAEXPAPAVCDungeonModelInstance@@I@Z ; std::allocator<CDungeonModelInstance *>::deallocate
PUBLIC	?allocate@?$allocator@PAVCDungeonModelInstance@@@std@@QAEPAPAVCDungeonModelInstance@@I@Z ; std::allocator<CDungeonModelInstance *>::allocate
PUBLIC	?construct@?$allocator@PAVCDungeonModelInstance@@@std@@QAEXPAPAVCDungeonModelInstance@@ABQAV3@@Z ; std::allocator<CDungeonModelInstance *>::construct
PUBLIC	?max_size@?$allocator@PAVCDungeonModelInstance@@@std@@QBEIXZ ; std::allocator<CDungeonModelInstance *>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@SAIABV?$allocator@PAVCDungeonModelInstance@@@2@@Z ; std::allocator_traits<std::allocator<CDungeonModelInstance *> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<CDungeonModelInstance *> >::_Wrap_alloc<std::allocator<CDungeonModelInstance *> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAEPAPAVCDungeonModelInstance@@I@Z ; std::_Wrap_alloc<std::allocator<CDungeonModelInstance *> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAEXPAPAVCDungeonModelInstance@@I@Z ; std::_Wrap_alloc<std::allocator<CDungeonModelInstance *> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<CDungeonModelInstance *> >::max_size
PUBLIC	??0?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> >::_Vector_val<std::_Simple_types<CDungeonModelInstance *> >
PUBLIC	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCDungeonModelInstance@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> > >::_Vector_alloc<0,std::_Vec_base_types<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> > >
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> > >::_Getal
PUBLIC	??0?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAE@XZ ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >
PUBLIC	??1?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAE@XZ ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::~vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >
PUBLIC	?reserve@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAEXI@Z ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::reserve
PUBLIC	?capacity@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QBEIXZ ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::capacity
PUBLIC	?_Unused_capacity@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QBEIXZ ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::_Unused_capacity
PUBLIC	?begin@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@2@XZ ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::begin
PUBLIC	?end@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@2@XZ ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::end
PUBLIC	?size@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QBEIXZ ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::size
PUBLIC	?max_size@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QBEIXZ ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::max_size
PUBLIC	?push_back@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAEXABQAVCDungeonModelInstance@@@Z ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::push_back
PUBLIC	?clear@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAEXXZ ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::clear
PUBLIC	?_Destroy@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IAEXPAPAVCDungeonModelInstance@@0@Z ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::_Destroy
PUBLIC	?_Grow_to@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IBEII@Z ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::_Grow_to
PUBLIC	?_Inside@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IBE_NPBQAVCDungeonModelInstance@@@Z ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::_Inside
PUBLIC	?_Reallocate@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IAEXI@Z ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::_Reallocate
PUBLIC	?_Reserve@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IAEXI@Z ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::_Reserve
PUBLIC	?_Tidy@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IAEXXZ ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::_Tidy
PUBLIC	?_Xlen@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IBEXXZ ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::_Xlen
PUBLIC	?_Orphan_range@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IBEXPAPAVCDungeonModelInstance@@0@Z ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::_Orphan_range
PUBLIC	??_GCDungeonBlock@@UAEPAXI@Z			; CDungeonBlock::`scalar deleting destructor'
PUBLIC	?Instance@?$CSingleton@VCStateManager@@@@SAAAVCStateManager@@XZ ; CSingleton<CStateManager>::Instance
PUBLIC	??0CDungeonModelInstance@@QAE@XZ		; CDungeonModelInstance::CDungeonModelInstance
PUBLIC	??1CDungeonModelInstance@@UAE@XZ		; CDungeonModelInstance::~CDungeonModelInstance
PUBLIC	?RenderDungeonBlock@CDungeonModelInstance@@QAEXXZ ; CDungeonModelInstance::RenderDungeonBlock
PUBLIC	?RenderDungeonBlockShadow@CDungeonModelInstance@@QAEXXZ ; CDungeonModelInstance::RenderDungeonBlockShadow
PUBLIC	??_GCDungeonModelInstance@@UAEPAXI@Z		; CDungeonModelInstance::`scalar deleting destructor'
PUBLIC	??RFUpdate@@QAEXPAVCGrannyModelInstance@@@Z	; FUpdate::operator()
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QAE@PAPAVCDungeonModelInstance@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QBEABQAVCDungeonModelInstance@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >::operator*
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >::operator++
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >::operator==
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >::operator!=
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >::_Compat
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QAE@PAPAVCDungeonModelInstance@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >
PUBLIC	?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QBEPAPAVCDungeonModelInstance@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >::_Unchecked
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QBEAAPAVCDungeonModelInstance@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >::operator*
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >::operator++
PUBLIC	??$for_each@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@UFUpdate@@@std@@YA?AUFUpdate@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@0@0U1@@Z ; std::for_each<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >,FUpdate>
PUBLIC	??RFRender@@QAEXPAVCDungeonModelInstance@@@Z	; FRender::operator()
PUBLIC	??$for_each@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@UFRender@@@std@@YA?AUFRender@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@0@0U1@@Z ; std::for_each<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >,FRender>
PUBLIC	??RFRenderShadow@@QAEXPAVCDungeonModelInstance@@@Z ; FRenderShadow::operator()
PUBLIC	??$for_each@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@UFRenderShadow@@@std@@YA?AUFRenderShadow@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@0@0U1@@Z ; std::for_each<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >,FRenderShadow>
PUBLIC	??0FBoundBox@@QAE@PAUD3DXVECTOR3@@0@Z		; FBoundBox::FBoundBox
PUBLIC	??RFBoundBox@@QAEXPAVCGrannyModelInstance@@@Z	; FBoundBox::operator()
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCStaticCollisionData@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CStaticCollisionData> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CStaticCollisionData> > >
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCStaticCollisionData@@@std@@@std@@@std@@QAE@PAVCStaticCollisionData@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CStaticCollisionData> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CStaticCollisionData> > >
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCStaticCollisionData@@@std@@@std@@@std@@QBEABVCStaticCollisionData@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CStaticCollisionData> > >::operator*
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCStaticCollisionData@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CStaticCollisionData> > >::operator++
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCStaticCollisionData@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CStaticCollisionData> > >::operator==
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCStaticCollisionData@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CStaticCollisionData> > >::operator!=
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCStaticCollisionData@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CStaticCollisionData> > >::_Compat
PUBLIC	??$for_each@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@UFBoundBox@@@std@@YA?AUFBoundBox@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@0@0U1@@Z ; std::for_each<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >,FBoundBox>
PUBLIC	??$stl_wipe@V?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@@@YAXAAV?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@@Z ; stl_wipe<std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> > >
PUBLIC	??$addressof@QAVCDungeonModelInstance@@@std@@YAPBQAVCDungeonModelInstance@@ABQAV1@@Z ; std::addressof<CDungeonModelInstance * const>
PUBLIC	??$construct@PAVCDungeonModelInstance@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAEXPAPAVCDungeonModelInstance@@AAPAV2@@Z ; std::_Wrap_alloc<std::allocator<CDungeonModelInstance *> >::construct<CDungeonModelInstance *,CDungeonModelInstance * &>
PUBLIC	??$construct@PAVCDungeonModelInstance@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAEXPAPAVCDungeonModelInstance@@ABQAV2@@Z ; std::_Wrap_alloc<std::allocator<CDungeonModelInstance *> >::construct<CDungeonModelInstance *,CDungeonModelInstance * const &>
PUBLIC	??$_Umove@PAPAVCDungeonModelInstance@@@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IAEPAPAVCDungeonModelInstance@@PAPAV2@00@Z ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::_Umove<CDungeonModelInstance * *>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@@std@@YAXPAPAVCDungeonModelInstance@@0AAU?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CDungeonModelInstance *> > >
PUBLIC	??$_Allocate@PAVCDungeonModelInstance@@@std@@YAPAPAVCDungeonModelInstance@@IPAPAV1@@Z ; std::_Allocate<CDungeonModelInstance *>
PUBLIC	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@YAPAPAVCDungeonModelInstance@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >
PUBLIC	??$_For_each@PAPAVCDungeonModelInstance@@UFUpdate@@@std@@YAXPAPAVCDungeonModelInstance@@0AAUFUpdate@@@Z ; std::_For_each<CDungeonModelInstance * *,FUpdate>
PUBLIC	??$move@AAUFUpdate@@@std@@YA$$QAUFUpdate@@AAU1@@Z ; std::move<FUpdate &>
PUBLIC	??$_For_each@PAPAVCDungeonModelInstance@@UFRender@@@std@@YAXPAPAVCDungeonModelInstance@@0AAUFRender@@@Z ; std::_For_each<CDungeonModelInstance * *,FRender>
PUBLIC	??$move@AAUFRender@@@std@@YA$$QAUFRender@@AAU1@@Z ; std::move<FRender &>
PUBLIC	??$_For_each@PAPAVCDungeonModelInstance@@UFRenderShadow@@@std@@YAXPAPAVCDungeonModelInstance@@0AAUFRenderShadow@@@Z ; std::_For_each<CDungeonModelInstance * *,FRenderShadow>
PUBLIC	??$move@AAUFRenderShadow@@@std@@YA$$QAUFRenderShadow@@AAU1@@Z ; std::move<FRenderShadow &>
PUBLIC	??$_For_each@PAPAVCDungeonModelInstance@@UFBoundBox@@@std@@YAXPAPAVCDungeonModelInstance@@0AAUFBoundBox@@@Z ; std::_For_each<CDungeonModelInstance * *,FBoundBox>
PUBLIC	??$move@AAUFBoundBox@@@std@@YA$$QAUFBoundBox@@AAU1@@Z ; std::move<FBoundBox &>
PUBLIC	??$forward@AAPAVCDungeonModelInstance@@@std@@YAAAPAVCDungeonModelInstance@@AAPAV1@@Z ; std::forward<CDungeonModelInstance * &>
PUBLIC	??$construct@PAVCDungeonModelInstance@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@SAXAAV?$allocator@PAVCDungeonModelInstance@@@1@PAPAVCDungeonModelInstance@@AAPAV3@@Z ; std::allocator_traits<std::allocator<CDungeonModelInstance *> >::construct<CDungeonModelInstance *,CDungeonModelInstance * &>
PUBLIC	??$forward@ABQAVCDungeonModelInstance@@@std@@YAABQAVCDungeonModelInstance@@ABQAV1@@Z ; std::forward<CDungeonModelInstance * const &>
PUBLIC	??$construct@PAVCDungeonModelInstance@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@SAXAAV?$allocator@PAVCDungeonModelInstance@@@1@PAPAVCDungeonModelInstance@@ABQAV3@@Z ; std::allocator_traits<std::allocator<CDungeonModelInstance *> >::construct<CDungeonModelInstance *,CDungeonModelInstance * const &>
PUBLIC	??$_Uninitialized_move@PAPAVCDungeonModelInstance@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@@std@@YAPAPAVCDungeonModelInstance@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@0@@Z ; std::_Uninitialized_move<CDungeonModelInstance * *,CDungeonModelInstance * *,std::_Wrap_alloc<std::allocator<CDungeonModelInstance *> > >
PUBLIC	??$_Ptr_cat@PAVCDungeonModelInstance@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCDungeonModelInstance@@0@Z ; std::_Ptr_cat<CDungeonModelInstance *,CDungeonModelInstance *>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@@std@@YAXPAPAVCDungeonModelInstance@@0AAU?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CDungeonModelInstance *> > >
PUBLIC	??$construct@PAVCDungeonModelInstance@@AAPAV1@@?$allocator@PAVCDungeonModelInstance@@@std@@QAEXPAPAVCDungeonModelInstance@@AAPAV2@@Z ; std::allocator<CDungeonModelInstance *>::construct<CDungeonModelInstance *,CDungeonModelInstance * &>
PUBLIC	??$_Unchecked@PAPAVCDungeonModelInstance@@@std@@YAPAPAVCDungeonModelInstance@@PAPAV1@@Z ; std::_Unchecked<CDungeonModelInstance * *>
PUBLIC	??$_Uninit_move@PAPAVCDungeonModelInstance@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@@std@@YAPAPAVCDungeonModelInstance@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@0@@Z ; std::_Uninit_move<CDungeonModelInstance * *,CDungeonModelInstance * *,std::_Wrap_alloc<std::allocator<CDungeonModelInstance *> > >
PUBLIC	??$_Rechecked@PAPAVCDungeonModelInstance@@PAPAV1@@std@@YAAAPAPAVCDungeonModelInstance@@AAPAPAV1@PAPAV1@@Z ; std::_Rechecked<CDungeonModelInstance * *,CDungeonModelInstance * *>
PUBLIC	??$_Val_type@PAPAVCDungeonModelInstance@@@std@@YAPAPAVCDungeonModelInstance@@PAPAV1@@Z ; std::_Val_type<CDungeonModelInstance * *>
PUBLIC	??$_Uninit_move@PAVCDungeonModelInstance@@PAV1@PAV1@@std@@YAPAPAVCDungeonModelInstance@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CDungeonModelInstance *,CDungeonModelInstance *,CDungeonModelInstance *>
PUBLIC	?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
PUBLIC	??_7CDungeonBlock@@6B@				; CDungeonBlock::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	??_7CDungeonModelInstance@@6B@			; CDungeonModelInstance::`vftable'
PUBLIC	??_C@_0DG@ODGGGKHC@CDungeonBlock?3?3Load?$CIfilename?$DN?$CFs?$CJ@ ; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_R4CDungeonModelInstance@@6B@			; CDungeonModelInstance::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDungeonModelInstance@@@8		; CDungeonModelInstance `RTTI Type Descriptor'
PUBLIC	??_R3CDungeonModelInstance@@8			; CDungeonModelInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDungeonModelInstance@@8			; CDungeonModelInstance::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDungeonModelInstance@@8		; CDungeonModelInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CGrannyModelInstance@@8		; CGrannyModelInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGrannyModelInstance@@@8		; CGrannyModelInstance `RTTI Type Descriptor'
PUBLIC	??_R3CGrannyModelInstance@@8			; CGrannyModelInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGrannyModelInstance@@8			; CGrannyModelInstance::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicCollisionObject@@8	; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicCollisionObject@@@8		; CGraphicCollisionObject `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicBase@@@8			; CGraphicBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicBase@@8				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicBase@@8				; CGraphicBase::`RTTI Base Class Array'
PUBLIC	??_R4CDungeonBlock@@6B@				; CDungeonBlock::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDungeonBlock@@@8			; CDungeonBlock `RTTI Type Descriptor'
PUBLIC	??_R3CDungeonBlock@@8				; CDungeonBlock::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDungeonBlock@@8				; CDungeonBlock::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDungeonBlock@@8			; CDungeonBlock::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CGraphicObjectInstance@@8		; CGraphicObjectInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicObjectInstance@@@8		; CGraphicObjectInstance `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicObjectInstance@@8			; CGraphicObjectInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicObjectInstance@@8			; CGraphicObjectInstance::`RTTI Base Class Array'
PUBLIC	__real@3f000000
PUBLIC	__real@43160000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_memmove:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	_D3DXVec3TransformCoord@12:PROC
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	?AddReference@CReferenceObject@@QAEXXZ:PROC	; CReferenceObject::AddReference
EXTRN	?Release@CReferenceObject@@QAEXXZ:PROC		; CReferenceObject::Release
EXTRN	??0CGraphicVertexBuffer@@QAE@XZ:PROC		; CGraphicVertexBuffer::CGraphicVertexBuffer
EXTRN	??1CGraphicVertexBuffer@@UAE@XZ:PROC		; CGraphicVertexBuffer::~CGraphicVertexBuffer
EXTRN	?Destroy@CGraphicVertexBuffer@@QAEXXZ:PROC	; CGraphicVertexBuffer::Destroy
EXTRN	?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z:PROC ; CResourceManager::GetResourcePointer
EXTRN	?GetHeight@CAttributeInstance@@QAEHMMPAM@Z:PROC	; CAttributeInstance::GetHeight
EXTRN	??0CGraphicObjectInstance@@QAE@XZ:PROC		; CGraphicObjectInstance::CGraphicObjectInstance
EXTRN	??1CGraphicObjectInstance@@UAE@XZ:PROC		; CGraphicObjectInstance::~CGraphicObjectInstance
EXTRN	?Transform@CGraphicObjectInstance@@QAEXXZ:PROC	; CGraphicObjectInstance::Transform
EXTRN	?GetTransform@CGraphicObjectInstance@@QAEAAUD3DXMATRIX@@XZ:PROC ; CGraphicObjectInstance::GetTransform
EXTRN	?OnInitialize@CGraphicObjectInstance@@UAEXXZ:PROC ; CGraphicObjectInstance::OnInitialize
EXTRN	?AddCollision@CGraphicObjectInstance@@QAEXPBVCStaticCollisionData@@PBUD3DXMATRIX@@@Z:PROC ; CGraphicObjectInstance::AddCollision
EXTRN	?SetHeightInstance@CGraphicObjectInstance@@QAEXPAVCAttributeInstance@@@Z:PROC ; CGraphicObjectInstance::SetHeightInstance
EXTRN	?GetPNTD3DVertexBuffer@CGrannyModel@@QBEPAUIDirect3DVertexBuffer8@@XZ:PROC ; CGrannyModel::GetPNTD3DVertexBuffer
EXTRN	??0CGrannyModelInstance@@QAE@XZ:PROC		; CGrannyModelInstance::CGrannyModelInstance
EXTRN	??1CGrannyModelInstance@@UAE@XZ:PROC		; CGrannyModelInstance::~CGrannyModelInstance
EXTRN	?IsEmpty@CGrannyModelInstance@@QAE_NXZ:PROC	; CGrannyModelInstance::IsEmpty
EXTRN	?Update@CGrannyModelInstance@@QAEXK@Z:PROC	; CGrannyModelInstance::Update
EXTRN	?UpdateLocalTime@CGrannyModelInstance@@QAEXM@Z:PROC ; CGrannyModelInstance::UpdateLocalTime
EXTRN	?Deform@CGrannyModelInstance@@QAEXPBUD3DXMATRIX@@@Z:PROC ; CGrannyModelInstance::Deform
EXTRN	?SetMainModelPointer@CGrannyModelInstance@@QAEXPAVCGrannyModel@@PAVCGraphicVertexBuffer@@@Z:PROC ; CGrannyModelInstance::SetMainModelPointer
EXTRN	?GetVertexCount@CGrannyModelInstance@@QAEKXZ:PROC ; CGrannyModelInstance::GetVertexCount
EXTRN	?Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z:PROC ; CGrannyModelInstance::Intersect
EXTRN	?GetBoundBox@CGrannyModelInstance@@QAEXPAUD3DXVECTOR3@@0@Z:PROC ; CGrannyModelInstance::GetBoundBox
EXTRN	?RenderMeshNodeListWithTwoTexture@CGrannyModelInstance@@IAEXW4EType@CGrannyMesh@@W42CGrannyMaterial@@@Z:PROC ; CGrannyModelInstance::RenderMeshNodeListWithTwoTexture
EXTRN	?RenderMeshNodeListWithoutTexture@CGrannyModelInstance@@IAEXW4EType@CGrannyMesh@@W42CGrannyMaterial@@@Z:PROC ; CGrannyModelInstance::RenderMeshNodeListWithoutTexture
EXTRN	?GetModelPointer@CGraphicThing@@QAEPAVCGrannyModel@@H@Z:PROC ; CGraphicThing::GetModelPointer
EXTRN	?GetModelCount@CGraphicThing@@QBEHXZ:PROC	; CGraphicThing::GetModelCount
EXTRN	??_ECDungeonBlock@@UAEPAXI@Z:PROC		; CDungeonBlock::`vector deleting destructor'
EXTRN	?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SaveRenderState
EXTRN	?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z:PROC ; CStateManager::RestoreRenderState
EXTRN	?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SetRenderState
EXTRN	?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z:PROC ; CStateManager::SaveTextureStageState
EXTRN	?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z:PROC ; CStateManager::RestoreTextureStageState
EXTRN	?SetVertexShader@CStateManager@@QAEXK@Z:PROC	; CStateManager::SetVertexShader
EXTRN	?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z:PROC ; CStateManager::SetStreamSource
EXTRN	??_ECDungeonModelInstance@@UAEPAXI@Z:PROC	; CDungeonModelInstance::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ms_pnt2VS@CGraphicBase@@1KA:DWORD		; CGraphicBase::ms_pnt2VS
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A DD 01H DUP (?) ; CSingleton<CResourceManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT __real@43160000
CONST	SEGMENT
__real@43160000 DD 043160000r			; 150
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT ??_R2CGraphicObjectInstance@@8
rdata$r	SEGMENT
??_R2CGraphicObjectInstance@@8 DD FLAT:??_R1A@?0A@EA@CGraphicObjectInstance@@8 ; CGraphicObjectInstance::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicObjectInstance@@8
rdata$r	SEGMENT
??_R3CGraphicObjectInstance@@8 DD 00H			; CGraphicObjectInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CGraphicObjectInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicObjectInstance@@@8
data$r	SEGMENT
??_R0?AVCGraphicObjectInstance@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicObjectInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicObjectInstance@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicObjectInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicObjectInstance@@8 DD FLAT:??_R0?AVCGraphicObjectInstance@@@8 ; CGraphicObjectInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicObjectInstance@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CDungeonBlock@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDungeonBlock@@8 DD FLAT:??_R0?AVCDungeonBlock@@@8 ; CDungeonBlock::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDungeonBlock@@8
rdata$r	ENDS
;	COMDAT ??_R2CDungeonBlock@@8
rdata$r	SEGMENT
??_R2CDungeonBlock@@8 DD FLAT:??_R1A@?0A@EA@CDungeonBlock@@8 ; CDungeonBlock::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicObjectInstance@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CDungeonBlock@@8
rdata$r	SEGMENT
??_R3CDungeonBlock@@8 DD 00H				; CDungeonBlock::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2CDungeonBlock@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDungeonBlock@@@8
data$r	SEGMENT
??_R0?AVCDungeonBlock@@@8 DD FLAT:??_7type_info@@6B@	; CDungeonBlock `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDungeonBlock@@', 00H
data$r	ENDS
;	COMDAT ??_R4CDungeonBlock@@6B@
rdata$r	SEGMENT
??_R4CDungeonBlock@@6B@ DD 00H				; CDungeonBlock::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDungeonBlock@@@8
	DD	FLAT:??_R3CDungeonBlock@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicBase@@8
rdata$r	SEGMENT
??_R2CGraphicBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphicBase@@8 ; CGraphicBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicBase@@8
rdata$r	SEGMENT
??_R3CGraphicBase@@8 DD 00H				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicBase@@@8
data$r	SEGMENT
??_R0?AVCGraphicBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicBase@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R2CGraphicCollisionObject@@8 DD FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8 ; CGraphicCollisionObject::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R3CGraphicCollisionObject@@8 DD 00H			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicCollisionObject@@@8
data$r	SEGMENT
??_R0?AVCGraphicCollisionObject@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicCollisionObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicCollisionObject@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicCollisionObject@@8 DD FLAT:??_R0?AVCGraphicCollisionObject@@@8 ; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CGrannyModelInstance@@8
rdata$r	SEGMENT
??_R2CGrannyModelInstance@@8 DD FLAT:??_R1A@?0A@EA@CGrannyModelInstance@@8 ; CGrannyModelInstance::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGrannyModelInstance@@8
rdata$r	SEGMENT
??_R3CGrannyModelInstance@@8 DD 00H			; CGrannyModelInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CGrannyModelInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGrannyModelInstance@@@8
data$r	SEGMENT
??_R0?AVCGrannyModelInstance@@@8 DD FLAT:??_7type_info@@6B@ ; CGrannyModelInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGrannyModelInstance@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGrannyModelInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGrannyModelInstance@@8 DD FLAT:??_R0?AVCGrannyModelInstance@@@8 ; CGrannyModelInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGrannyModelInstance@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CDungeonModelInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDungeonModelInstance@@8 DD FLAT:??_R0?AVCDungeonModelInstance@@@8 ; CDungeonModelInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDungeonModelInstance@@8
rdata$r	ENDS
;	COMDAT ??_R2CDungeonModelInstance@@8
rdata$r	SEGMENT
??_R2CDungeonModelInstance@@8 DD FLAT:??_R1A@?0A@EA@CDungeonModelInstance@@8 ; CDungeonModelInstance::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGrannyModelInstance@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CDungeonModelInstance@@8
rdata$r	SEGMENT
??_R3CDungeonModelInstance@@8 DD 00H			; CDungeonModelInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2CDungeonModelInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDungeonModelInstance@@@8
data$r	SEGMENT
??_R0?AVCDungeonModelInstance@@@8 DD FLAT:??_7type_info@@6B@ ; CDungeonModelInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDungeonModelInstance@@', 00H
data$r	ENDS
;	COMDAT ??_R4CDungeonModelInstance@@6B@
rdata$r	SEGMENT
??_R4CDungeonModelInstance@@6B@ DD 00H			; CDungeonModelInstance::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDungeonModelInstance@@@8
	DD	FLAT:??_R3CDungeonModelInstance@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@ODGGGKHC@CDungeonBlock?3?3Load?$CIfilename?$DN?$CFs?$CJ@
CONST	SEGMENT
??_C@_0DG@ODGGGKHC@CDungeonBlock?3?3Load?$CIfilename?$DN?$CFs?$CJ@ DB 'CD'
	DB	'ungeonBlock::Load(filename=%s) - model count is %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CDungeonModelInstance@@6B@
CONST	SEGMENT
??_7CDungeonModelInstance@@6B@ DD FLAT:??_R4CDungeonModelInstance@@6B@ ; CDungeonModelInstance::`vftable'
	DD	FLAT:??_ECDungeonModelInstance@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CDungeonBlock@@6B@
CONST	SEGMENT
??_7CDungeonBlock@@6B@ DD FLAT:??_R4CDungeonBlock@@6B@	; CDungeonBlock::`vftable'
	DD	FLAT:??_ECDungeonBlock@@UAEPAXI@Z
	DD	FLAT:?GetType@CDungeonBlock@@UBEHXZ
	DD	FLAT:?OnInitialize@CGraphicObjectInstance@@UAEXXZ
	DD	FLAT:?GetBoundingSphere@CDungeonBlock@@UAE_NAAUD3DXVECTOR3@@AAM@Z
	DD	FLAT:?OnRender@CDungeonBlock@@UAEXXZ
	DD	FLAT:?OnBlendRender@CDungeonBlock@@UAEXXZ
	DD	FLAT:?OnRenderToShadowMap@CDungeonBlock@@UAEXXZ
	DD	FLAT:?OnRenderShadow@CDungeonBlock@@UAEXXZ
	DD	FLAT:?OnRenderPCBlocker@CDungeonBlock@@UAEXXZ
	DD	FLAT:?OnClear@CGraphicObjectInstance@@UAEXXZ
	DD	FLAT:?OnUpdate@CGraphicObjectInstance@@UAEXXZ
	DD	FLAT:?OnDeform@CGraphicObjectInstance@@UAEXXZ
	DD	FLAT:?OnUpdateCollisionData@CDungeonBlock@@UAEXPBV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@@Z
	DD	FLAT:?OnUpdateHeighInstance@CDungeonBlock@@UAEXPAVCAttributeInstance@@@Z
	DD	FLAT:?OnGetObjectHeight@CDungeonBlock@@UAE_NMMPAM@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Load@CDungeonBlock@@QAE_NPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@CDungeonBlock@@QAE_NPBD@Z$0
__ehfuncinfo$?Load@CDungeonBlock@@QAE_NPBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Load@CDungeonBlock@@QAE_NPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CDungeonBlock@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CDungeonBlock@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CDungeonBlock@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CDungeonBlock@@UAE@XZ$2
__ehfuncinfo$??1CDungeonBlock@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1CDungeonBlock@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CDungeonBlock@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CDungeonBlock@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CDungeonBlock@@QAE@XZ$1
__ehfuncinfo$??0CDungeonBlock@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CDungeonBlock@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAVCDungeonModelInstance@@PAV1@PAV1@@std@@YAPAPAVCDungeonModelInstance@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAVCDungeonModelInstance@@PAV1@PAV1@@std@@YAPAPAVCDungeonModelInstance@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<CDungeonModelInstance *,CDungeonModelInstance *,CDungeonModelInstance *>, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 470  : 	_DEBUG_RANGE(_First, _Last);
; 471  : 	_DEBUG_POINTER(_Dest);
; 472  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 473  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 474  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 475  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninit_move@PAVCDungeonModelInstance@@PAV1@PAV1@@std@@YAPAPAVCDungeonModelInstance@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<CDungeonModelInstance *,CDungeonModelInstance *,CDungeonModelInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??$_Val_type@PAPAVCDungeonModelInstance@@@std@@YAPAPAVCDungeonModelInstance@@PAPAV1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAPAVCDungeonModelInstance@@@std@@YAPAPAVCDungeonModelInstance@@PAPAV1@@Z PROC ; std::_Val_type<CDungeonModelInstance * *>, COMDAT

; 646  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 647  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAPAVCDungeonModelInstance@@@std@@YAPAPAVCDungeonModelInstance@@PAPAV1@@Z ENDP ; std::_Val_type<CDungeonModelInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??$_Rechecked@PAPAVCDungeonModelInstance@@PAPAV1@@std@@YAAAPAPAVCDungeonModelInstance@@AAPAPAV1@PAPAV1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAPAVCDungeonModelInstance@@PAPAV1@@std@@YAAAPAPAVCDungeonModelInstance@@AAPAPAV1@PAPAV1@@Z PROC ; std::_Rechecked<CDungeonModelInstance * *,CDungeonModelInstance * *>, COMDAT

; 288  : 	{	// reset checked from unchecked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 289  : 	_Dest = _Src;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 290  : 	return (_Dest);
; 291  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Rechecked@PAPAVCDungeonModelInstance@@PAPAV1@@std@@YAAAPAPAVCDungeonModelInstance@@AAPAPAV1@PAPAV1@@Z ENDP ; std::_Rechecked<CDungeonModelInstance * *,CDungeonModelInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAPAVCDungeonModelInstance@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@@std@@YAPAPAVCDungeonModelInstance@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAPAVCDungeonModelInstance@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@@std@@YAPAPAVCDungeonModelInstance@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@0@@Z PROC ; std::_Uninit_move<CDungeonModelInstance * *,CDungeonModelInstance * *,std::_Wrap_alloc<std::allocator<CDungeonModelInstance *> > >, COMDAT

; 482  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 472  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 473  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 474  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 483  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 484  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));
; 485  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninit_move@PAPAVCDungeonModelInstance@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@@std@@YAPAPAVCDungeonModelInstance@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@0@@Z ENDP ; std::_Uninit_move<CDungeonModelInstance * *,CDungeonModelInstance * *,std::_Wrap_alloc<std::allocator<CDungeonModelInstance *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??$_Unchecked@PAPAVCDungeonModelInstance@@@std@@YAPAPAVCDungeonModelInstance@@PAPAV1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAPAVCDungeonModelInstance@@@std@@YAPAPAVCDungeonModelInstance@@PAPAV1@@Z PROC ; std::_Unchecked<CDungeonModelInstance * *>, COMDAT

; 280  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 281  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 282  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAPAVCDungeonModelInstance@@@std@@YAPAPAVCDungeonModelInstance@@PAPAV1@@Z ENDP ; std::_Unchecked<CDungeonModelInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@PAVCDungeonModelInstance@@AAPAV1@@?$allocator@PAVCDungeonModelInstance@@@std@@QAEXPAPAVCDungeonModelInstance@@AAPAV2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAVCDungeonModelInstance@@AAPAV1@@?$allocator@PAVCDungeonModelInstance@@@std@@QAEXPAPAVCDungeonModelInstance@@AAPAV2@@Z PROC ; std::allocator<CDungeonModelInstance *>::construct<CDungeonModelInstance *,CDungeonModelInstance * &>, COMDAT
; _this$ = ecx

; 598  : 		void construct(_Objty *_Ptr, _Types&&... _Args)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 599  : 		{	// construct _Objty(_Types...) at _Ptr
; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 601  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAVCDungeonModelInstance@@AAPAV1@@?$allocator@PAVCDungeonModelInstance@@@std@@QAEXPAPAVCDungeonModelInstance@@AAPAV2@@Z ENDP ; std::allocator<CDungeonModelInstance *>::construct<CDungeonModelInstance *,CDungeonModelInstance * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@@std@@YAXPAPAVCDungeonModelInstance@@0AAU?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@@std@@YAXPAPAVCDungeonModelInstance@@0AAU?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CDungeonModelInstance *> > >, COMDAT

; 90   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@@std@@YAXPAPAVCDungeonModelInstance@@0AAU?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CDungeonModelInstance *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??$_Ptr_cat@PAVCDungeonModelInstance@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCDungeonModelInstance@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAVCDungeonModelInstance@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCDungeonModelInstance@@0@Z PROC ; std::_Ptr_cat<CDungeonModelInstance *,CDungeonModelInstance *>, COMDAT

; 444  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 445  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 446  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 447  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@PAVCDungeonModelInstance@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCDungeonModelInstance@@0@Z ENDP ; std::_Ptr_cat<CDungeonModelInstance *,CDungeonModelInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAVCDungeonModelInstance@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@@std@@YAPAPAVCDungeonModelInstance@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVCDungeonModelInstance@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@@std@@YAPAPAVCDungeonModelInstance@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@0@@Z PROC ; std::_Uninitialized_move<CDungeonModelInstance * *,CDungeonModelInstance * *,std::_Wrap_alloc<std::allocator<CDungeonModelInstance *> > >, COMDAT

; 492  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 472  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 473  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 474  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 493  : 	return (_Rechecked(_Dest,
; 494  : 		_Uninit_move(_Unchecked(_First), _Unchecked(_Last),
; 495  : 			_Unchecked(_Dest), _Al)));
; 496  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninitialized_move@PAPAVCDungeonModelInstance@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@@std@@YAPAPAVCDungeonModelInstance@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<CDungeonModelInstance * *,CDungeonModelInstance * *,std::_Wrap_alloc<std::allocator<CDungeonModelInstance *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@PAVCDungeonModelInstance@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@SAXAAV?$allocator@PAVCDungeonModelInstance@@@1@PAPAVCDungeonModelInstance@@ABQAV3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAVCDungeonModelInstance@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@SAXAAV?$allocator@PAVCDungeonModelInstance@@@1@PAPAVCDungeonModelInstance@@ABQAV3@@Z PROC ; std::allocator_traits<std::allocator<CDungeonModelInstance *> >::construct<CDungeonModelInstance *,CDungeonModelInstance * const &>, COMDAT

; 720  : 		static void construct(_Alloc& _Al, _Objty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 593  : 		::new ((void *)_Ptr) _Ty(_Val);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN7@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN7@construct:

; 721  : 			_Types&&... _Args)
; 722  : 		{	// construct _Objty(_Types...) at _Ptr
; 723  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 724  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@PAVCDungeonModelInstance@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@SAXAAV?$allocator@PAVCDungeonModelInstance@@@1@PAPAVCDungeonModelInstance@@ABQAV3@@Z ENDP ; std::allocator_traits<std::allocator<CDungeonModelInstance *> >::construct<CDungeonModelInstance *,CDungeonModelInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\type_traits
;	COMDAT ??$forward@ABQAVCDungeonModelInstance@@@std@@YAABQAVCDungeonModelInstance@@ABQAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAVCDungeonModelInstance@@@std@@YAABQAVCDungeonModelInstance@@ABQAV1@@Z PROC ; std::forward<CDungeonModelInstance * const &>, COMDAT

; 1504 : 	{	// forward an lvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABQAVCDungeonModelInstance@@@std@@YAABQAVCDungeonModelInstance@@ABQAV1@@Z ENDP ; std::forward<CDungeonModelInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@PAVCDungeonModelInstance@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@SAXAAV?$allocator@PAVCDungeonModelInstance@@@1@PAPAVCDungeonModelInstance@@AAPAV3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAVCDungeonModelInstance@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@SAXAAV?$allocator@PAVCDungeonModelInstance@@@1@PAPAVCDungeonModelInstance@@AAPAV3@@Z PROC ; std::allocator_traits<std::allocator<CDungeonModelInstance *> >::construct<CDungeonModelInstance *,CDungeonModelInstance * &>, COMDAT

; 720  : 		static void construct(_Alloc& _Al, _Objty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN7@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN7@construct:

; 721  : 			_Types&&... _Args)
; 722  : 		{	// construct _Objty(_Types...) at _Ptr
; 723  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 724  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@PAVCDungeonModelInstance@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@SAXAAV?$allocator@PAVCDungeonModelInstance@@@1@PAPAVCDungeonModelInstance@@AAPAV3@@Z ENDP ; std::allocator_traits<std::allocator<CDungeonModelInstance *> >::construct<CDungeonModelInstance *,CDungeonModelInstance * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\type_traits
;	COMDAT ??$forward@AAPAVCDungeonModelInstance@@@std@@YAAAPAVCDungeonModelInstance@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAVCDungeonModelInstance@@@std@@YAAAPAVCDungeonModelInstance@@AAPAV1@@Z PROC ; std::forward<CDungeonModelInstance * &>, COMDAT

; 1504 : 	{	// forward an lvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAVCDungeonModelInstance@@@std@@YAAAPAVCDungeonModelInstance@@AAPAV1@@Z ENDP ; std::forward<CDungeonModelInstance * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\type_traits
;	COMDAT ??$move@AAUFBoundBox@@@std@@YA$$QAUFBoundBox@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUFBoundBox@@@std@@YA$$QAUFBoundBox@@AAU1@@Z PROC ; std::move<FBoundBox &>, COMDAT

; 1519 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1520 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1521 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUFBoundBox@@@std@@YA$$QAUFBoundBox@@AAU1@@Z ENDP ; std::move<FBoundBox &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\algorithm
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
; File a:\vs\vc\include\algorithm
;	COMDAT ??$_For_each@PAPAVCDungeonModelInstance@@UFBoundBox@@@std@@YAXPAPAVCDungeonModelInstance@@0AAUFBoundBox@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Func$ = 16						; size = 4
??$_For_each@PAPAVCDungeonModelInstance@@UFBoundBox@@@std@@YAXPAPAVCDungeonModelInstance@@0AAUFBoundBox@@@Z PROC ; std::_For_each<CDungeonModelInstance * *,FBoundBox>, COMDAT

; 22   : 	{	// perform function for each element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0000e	33 db		 xor	 ebx, ebx
  00010	2b f7		 sub	 esi, edi
  00012	83 c6 03	 add	 esi, 3
  00015	c1 ee 02	 shr	 esi, 2
  00018	3b 7d 0c	 cmp	 edi, DWORD PTR __Last$[ebp]
  0001b	0f 47 f1	 cmova	 esi, ecx

; 23   : 	for (; _First != _Last; ++_First)

  0001e	85 f6		 test	 esi, esi
  00020	74 17		 je	 SHORT $LN1@For_each
$LL3@For_each:
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp

; 120  : 		pInstance->GetBoundBox(m_pv3Min, m_pv3Max);

  00022	8b 45 10	 mov	 eax, DWORD PTR __Func$[ebp]
  00025	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00027	ff 70 04	 push	 DWORD PTR [eax+4]
  0002a	ff 30		 push	 DWORD PTR [eax]
  0002c	e8 00 00 00 00	 call	 ?GetBoundBox@CGrannyModelInstance@@QAEXPAUD3DXVECTOR3@@0@Z ; CGrannyModelInstance::GetBoundBox
; File a:\vs\vc\include\algorithm

; 23   : 	for (; _First != _Last; ++_First)

  00031	43		 inc	 ebx
  00032	8d 7f 04	 lea	 edi, DWORD PTR [edi+4]
  00035	3b de		 cmp	 ebx, esi
  00037	75 e9		 jne	 SHORT $LL3@For_each
$LN1@For_each:
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx

; 24   : 		_Func(*_First);
; 25   : 	}

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
??$_For_each@PAPAVCDungeonModelInstance@@UFBoundBox@@@std@@YAXPAPAVCDungeonModelInstance@@0AAUFBoundBox@@@Z ENDP ; std::_For_each<CDungeonModelInstance * *,FBoundBox>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\type_traits
;	COMDAT ??$move@AAUFRenderShadow@@@std@@YA$$QAUFRenderShadow@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUFRenderShadow@@@std@@YA$$QAUFRenderShadow@@AAU1@@Z PROC ; std::move<FRenderShadow &>, COMDAT

; 1519 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1520 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1521 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUFRenderShadow@@@std@@YA$$QAUFRenderShadow@@AAU1@@Z ENDP ; std::move<FRenderShadow &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\algorithm
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
; File a:\vs\vc\include\algorithm
;	COMDAT ??$_For_each@PAPAVCDungeonModelInstance@@UFRenderShadow@@@std@@YAXPAPAVCDungeonModelInstance@@0AAUFRenderShadow@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Func$ = 16						; size = 4
??$_For_each@PAPAVCDungeonModelInstance@@UFRenderShadow@@@std@@YAXPAPAVCDungeonModelInstance@@0AAUFRenderShadow@@@Z PROC ; std::_For_each<CDungeonModelInstance * *,FRenderShadow>, COMDAT

; 22   : 	{	// perform function for each element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	33 c9		 xor	 ecx, ecx
  00009	56		 push	 esi
  0000a	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000d	2b de		 sub	 ebx, esi
  0000f	83 c3 03	 add	 ebx, 3
  00012	c1 eb 02	 shr	 ebx, 2
  00015	57		 push	 edi
  00016	33 ff		 xor	 edi, edi
  00018	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001b	0f 47 d9	 cmova	 ebx, ecx

; 23   : 	for (; _First != _Last; ++_First)

  0001e	85 db		 test	 ebx, ebx
  00020	74 0f		 je	 SHORT $LN1@For_each
$LL3@For_each:
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp

; 99   : 		pInstance->RenderDungeonBlockShadow();

  00022	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00024	e8 00 00 00 00	 call	 ?RenderDungeonBlockShadow@CDungeonModelInstance@@QAEXXZ ; CDungeonModelInstance::RenderDungeonBlockShadow
; File a:\vs\vc\include\algorithm

; 23   : 	for (; _First != _Last; ++_First)

  00029	47		 inc	 edi
  0002a	8d 76 04	 lea	 esi, DWORD PTR [esi+4]
  0002d	3b fb		 cmp	 edi, ebx
  0002f	75 f1		 jne	 SHORT $LL3@For_each
$LN1@For_each:
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx

; 24   : 		_Func(*_First);
; 25   : 	}

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
??$_For_each@PAPAVCDungeonModelInstance@@UFRenderShadow@@@std@@YAXPAPAVCDungeonModelInstance@@0AAUFRenderShadow@@@Z ENDP ; std::_For_each<CDungeonModelInstance * *,FRenderShadow>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\type_traits
;	COMDAT ??$move@AAUFRender@@@std@@YA$$QAUFRender@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUFRender@@@std@@YA$$QAUFRender@@AAU1@@Z PROC	; std::move<FRender &>, COMDAT

; 1519 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1520 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1521 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUFRender@@@std@@YA$$QAUFRender@@AAU1@@Z ENDP	; std::move<FRender &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\algorithm
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
; File a:\vs\vc\include\algorithm
;	COMDAT ??$_For_each@PAPAVCDungeonModelInstance@@UFRender@@@std@@YAXPAPAVCDungeonModelInstance@@0AAUFRender@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
tv179 = 12						; size = 4
__Last$ = 12						; size = 4
__Func$ = 16						; size = 4
??$_For_each@PAPAVCDungeonModelInstance@@UFRender@@@std@@YAXPAPAVCDungeonModelInstance@@0AAUFRender@@@Z PROC ; std::_For_each<CDungeonModelInstance * *,FRender>, COMDAT

; 22   : 	{	// perform function for each element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00006	33 d2		 xor	 edx, edx
  00008	56		 push	 esi
  00009	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000c	2b ce		 sub	 ecx, esi
  0000e	83 c1 03	 add	 ecx, 3
  00011	c1 e9 02	 shr	 ecx, 2
  00014	57		 push	 edi
  00015	33 ff		 xor	 edi, edi
  00017	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001a	0f 47 ca	 cmova	 ecx, edx
  0001d	89 4d 0c	 mov	 DWORD PTR tv179[ebp], ecx

; 23   : 	for (; _First != _Last; ++_First)

  00020	85 c9		 test	 ecx, ecx
  00022	74 50		 je	 SHORT $LN1@For_each
  00024	53		 push	 ebx
$LL3@For_each:

; 24   : 		_Func(*_First);

  00025	8b 1e		 mov	 ebx, DWORD PTR [esi]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp

; 14   : 			if (IsEmpty())

  00027	8b cb		 mov	 ecx, ebx
  00029	e8 00 00 00 00	 call	 ?IsEmpty@CGrannyModelInstance@@QAE_NXZ ; CGrannyModelInstance::IsEmpty
  0002e	84 c0		 test	 al, al
  00030	75 38		 jne	 SHORT $LN2@For_each

; 15   : 				return;
; 16   : 
; 17   : 			STATEMANAGER.SetVertexShader(ms_pnt2VS);

  00032	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_pnt2VS@CGraphicBase@@1KA ; CGraphicBase::ms_pnt2VS
  00038	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0003e	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 18   : 			LPDIRECT3DVERTEXBUFFER8 lpd3dRigidPNTVtxBuf = m_pModel->GetPNTD3DVertexBuffer();

  00043	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00046	e8 00 00 00 00	 call	 ?GetPNTD3DVertexBuffer@CGrannyModel@@QBEPAUIDirect3DVertexBuffer8@@XZ ; CGrannyModel::GetPNTD3DVertexBuffer

; 19   : 			if (lpd3dRigidPNTVtxBuf)

  0004b	85 c0		 test	 eax, eax
  0004d	74 1b		 je	 SHORT $LN2@For_each

; 20   : 			{
; 21   : 				STATEMANAGER.SetStreamSource(0, lpd3dRigidPNTVtxBuf, sizeof(TPNT2Vertex));

  0004f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00055	6a 28		 push	 40			; 00000028H
  00057	50		 push	 eax
  00058	6a 00		 push	 0
  0005a	e8 00 00 00 00	 call	 ?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z ; CStateManager::SetStreamSource

; 22   : 				RenderMeshNodeListWithTwoTexture(CGrannyMesh::TYPE_RIGID, CGrannyMaterial::TYPE_BLEND_PNT);

  0005f	6a 01		 push	 1
  00061	6a 00		 push	 0
  00063	8b cb		 mov	 ecx, ebx
  00065	e8 00 00 00 00	 call	 ?RenderMeshNodeListWithTwoTexture@CGrannyModelInstance@@IAEXW4EType@CGrannyMesh@@W42CGrannyMaterial@@@Z ; CGrannyModelInstance::RenderMeshNodeListWithTwoTexture
$LN2@For_each:
; File a:\vs\vc\include\algorithm

; 23   : 	for (; _First != _Last; ++_First)

  0006a	47		 inc	 edi
  0006b	83 c6 04	 add	 esi, 4
  0006e	3b 7d 0c	 cmp	 edi, DWORD PTR tv179[ebp]
  00071	75 b2		 jne	 SHORT $LL3@For_each
  00073	5b		 pop	 ebx
$LN1@For_each:
  00074	5f		 pop	 edi
  00075	5e		 pop	 esi

; 25   : 	}

  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
??$_For_each@PAPAVCDungeonModelInstance@@UFRender@@@std@@YAXPAPAVCDungeonModelInstance@@0AAUFRender@@@Z ENDP ; std::_For_each<CDungeonModelInstance * *,FRender>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\type_traits
;	COMDAT ??$move@AAUFUpdate@@@std@@YA$$QAUFUpdate@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUFUpdate@@@std@@YA$$QAUFUpdate@@AAU1@@Z PROC	; std::move<FUpdate &>, COMDAT

; 1519 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1520 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1521 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUFUpdate@@@std@@YA$$QAUFUpdate@@AAU1@@Z ENDP	; std::move<FUpdate &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\algorithm
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
; File a:\vs\vc\include\algorithm
;	COMDAT ??$_For_each@PAPAVCDungeonModelInstance@@UFUpdate@@@std@@YAXPAPAVCDungeonModelInstance@@0AAUFUpdate@@@Z
_TEXT	SEGMENT
tv145 = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Func$ = 16						; size = 4
??$_For_each@PAPAVCDungeonModelInstance@@UFUpdate@@@std@@YAXPAPAVCDungeonModelInstance@@0AAUFUpdate@@@Z PROC ; std::_For_each<CDungeonModelInstance * *,FUpdate>, COMDAT

; 22   : 	{	// perform function for each element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b fb		 sub	 edi, ebx
  00010	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv145[ebp], 0
  00017	83 c7 03	 add	 edi, 3
  0001a	c1 ef 02	 shr	 edi, 2
  0001d	3b 5d 0c	 cmp	 ebx, DWORD PTR __Last$[ebp]
  00020	0f 47 f9	 cmova	 edi, ecx

; 23   : 	for (; _First != _Last; ++_First)

  00023	85 ff		 test	 edi, edi
  00025	74 3c		 je	 SHORT $LN1@For_each
  00027	56		 push	 esi
$LL3@For_each:

; 24   : 		_Func(*_First);

  00028	8b 33		 mov	 esi, DWORD PTR [ebx]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp

; 63   : 		pInstance->Update(CGrannyModelInstance::ANIFPS_MIN);

  0002a	8b ce		 mov	 ecx, esi
  0002c	6a 1e		 push	 30			; 0000001eH
  0002e	e8 00 00 00 00	 call	 ?Update@CGrannyModelInstance@@QAEXK@Z ; CGrannyModelInstance::Update

; 64   : 		pInstance->UpdateLocalTime(fElapsedTime);

  00033	8b 45 10	 mov	 eax, DWORD PTR __Func$[ebp]
  00036	51		 push	 ecx
  00037	8b ce		 mov	 ecx, esi
  00039	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0003d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00042	e8 00 00 00 00	 call	 ?UpdateLocalTime@CGrannyModelInstance@@QAEXM@Z ; CGrannyModelInstance::UpdateLocalTime

; 65   : 		pInstance->Deform(pmatWorld);

  00047	8b 45 10	 mov	 eax, DWORD PTR __Func$[ebp]
  0004a	8b ce		 mov	 ecx, esi
  0004c	ff 70 04	 push	 DWORD PTR [eax+4]
  0004f	e8 00 00 00 00	 call	 ?Deform@CGrannyModelInstance@@QAEXPBUD3DXMATRIX@@@Z ; CGrannyModelInstance::Deform
; File a:\vs\vc\include\algorithm

; 23   : 	for (; _First != _Last; ++_First)

  00054	8b 45 fc	 mov	 eax, DWORD PTR tv145[ebp]
  00057	8d 5b 04	 lea	 ebx, DWORD PTR [ebx+4]
  0005a	40		 inc	 eax
  0005b	89 45 fc	 mov	 DWORD PTR tv145[ebp], eax
  0005e	3b c7		 cmp	 eax, edi
  00060	75 c6		 jne	 SHORT $LL3@For_each
  00062	5e		 pop	 esi
$LN1@For_each:
  00063	5f		 pop	 edi
  00064	5b		 pop	 ebx

; 25   : 	}

  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
??$_For_each@PAPAVCDungeonModelInstance@@UFUpdate@@@std@@YAXPAPAVCDungeonModelInstance@@0AAUFUpdate@@@Z ENDP ; std::_For_each<CDungeonModelInstance * *,FUpdate>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@YAPAPAVCDungeonModelInstance@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__Iter$ = 8						; size = 4
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@YAPAPAVCDungeonModelInstance@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@0@@Z PROC ; std::_Unchecked<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >, COMDAT

; 395  : 	{	// convert to unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 396  : 	return (_Iter._Unchecked());

  00003	8b 45 08	 mov	 eax, DWORD PTR __Iter$[ebp]

; 397  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@YAPAPAVCDungeonModelInstance@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@0@@Z ENDP ; std::_Unchecked<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$_Allocate@PAVCDungeonModelInstance@@@std@@YAPAPAVCDungeonModelInstance@@IPAPAV1@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCDungeonModelInstance@@@std@@YAPAPAVCDungeonModelInstance@@IPAPAV1@@Z PROC ; std::_Allocate<CDungeonModelInstance *>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 23   : 	void *_Ptr = 0;
; 24   : 
; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 1e		 je	 SHORT $LN2@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00011	77 12		 ja	 SHORT $LN1@Allocate
  00013	c1 e0 02	 shl	 eax, 2
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	75 05		 jne	 SHORT $LN2@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00025	e9 00 00 00 00	 jmp	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

  0002a	8b c1		 mov	 eax, ecx

; 32   : 	}

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??$_Allocate@PAVCDungeonModelInstance@@@std@@YAPAPAVCDungeonModelInstance@@IPAPAV1@@Z ENDP ; std::_Allocate<CDungeonModelInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@@std@@YAXPAPAVCDungeonModelInstance@@0AAU?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@@std@@YAXPAPAVCDungeonModelInstance@@0AAU?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CDungeonModelInstance *> > >, COMDAT

; 96   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 97   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@@std@@YAXPAPAVCDungeonModelInstance@@0AAU?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CDungeonModelInstance *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\vector
;	COMDAT ??$_Umove@PAPAVCDungeonModelInstance@@@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IAEPAPAVCDungeonModelInstance@@PAPAV2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAPAVCDungeonModelInstance@@@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IAEPAPAVCDungeonModelInstance@@PAPAV2@00@Z PROC ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::_Umove<CDungeonModelInstance * *>, COMDAT
; _this$ = ecx

; 1644 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File a:\vs\vc\include\xmemory

; 472  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 473  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 474  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi
; File a:\vs\vc\include\vector

; 1649 : 		}

  00026	5d		 pop	 ebp
  00027	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAPAVCDungeonModelInstance@@@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IAEPAPAVCDungeonModelInstance@@PAPAV2@00@Z ENDP ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::_Umove<CDungeonModelInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@PAVCDungeonModelInstance@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAEXPAPAVCDungeonModelInstance@@ABQAV2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAVCDungeonModelInstance@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAEXPAPAVCDungeonModelInstance@@ABQAV2@@Z PROC ; std::_Wrap_alloc<std::allocator<CDungeonModelInstance *> >::construct<CDungeonModelInstance *,CDungeonModelInstance * const &>, COMDAT
; _this$ = ecx

; 868  : 		void construct(_Ty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 593  : 		::new ((void *)_Ptr) _Ty(_Val);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN11@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN11@construct:

; 869  : 			_Types&&... _Args)
; 870  : 		{	// construct _Ty(_Types...) at _Ptr
; 871  : 		_Mytraits::construct(*this, _Ptr,
; 872  : 			_STD forward<_Types>(_Args)...);
; 873  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAVCDungeonModelInstance@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAEXPAPAVCDungeonModelInstance@@ABQAV2@@Z ENDP ; std::_Wrap_alloc<std::allocator<CDungeonModelInstance *> >::construct<CDungeonModelInstance *,CDungeonModelInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@PAVCDungeonModelInstance@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAEXPAPAVCDungeonModelInstance@@AAPAV2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAVCDungeonModelInstance@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAEXPAPAVCDungeonModelInstance@@AAPAV2@@Z PROC ; std::_Wrap_alloc<std::allocator<CDungeonModelInstance *> >::construct<CDungeonModelInstance *,CDungeonModelInstance * &>, COMDAT
; _this$ = ecx

; 868  : 		void construct(_Ty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN11@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN11@construct:

; 869  : 			_Types&&... _Args)
; 870  : 		{	// construct _Ty(_Types...) at _Ptr
; 871  : 		_Mytraits::construct(*this, _Ptr,
; 872  : 			_STD forward<_Types>(_Args)...);
; 873  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAVCDungeonModelInstance@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAEXPAPAVCDungeonModelInstance@@AAPAV2@@Z ENDP ; std::_Wrap_alloc<std::allocator<CDungeonModelInstance *> >::construct<CDungeonModelInstance *,CDungeonModelInstance * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xstddef
;	COMDAT ??$addressof@QAVCDungeonModelInstance@@@std@@YAPBQAVCDungeonModelInstance@@ABQAV1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@QAVCDungeonModelInstance@@@std@@YAPBQAVCDungeonModelInstance@@ABQAV1@@Z PROC ; std::addressof<CDungeonModelInstance * const>, COMDAT

; 92   : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 93   : 	return (reinterpret_cast<_Ty *>(
; 94   : 		(&const_cast<char&>(
; 95   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 96   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@QAVCDungeonModelInstance@@@std@@YAPBQAVCDungeonModelInstance@@ABQAV1@@Z ENDP ; std::addressof<CDungeonModelInstance * const>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterbase\stl.h
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\eterbase\stl.h
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\eterbase\stl.h
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\eterbase\stl.h
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\eterbase\stl.h
;	COMDAT ??$stl_wipe@V?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@@@YAXAAV?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@@Z
_TEXT	SEGMENT
_container$ = 8						; size = 4
??$stl_wipe@V?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@@@YAXAAV?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@@Z PROC ; stl_wipe<std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> > >, COMDAT

; 94   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
; File a:\vs\vc\include\vector

; 47   : 		{	// construct with pointer _Parg

  00005	8b 7d 08	 mov	 edi, DWORD PTR _container$[ebp]
  00008	8b 37		 mov	 esi, DWORD PTR [edi]

; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		_Compat(_Right);
; 205  : 		return (this->_Ptr == _Right._Ptr);

  0000a	3b 77 04	 cmp	 esi, DWORD PTR [edi+4]
; File a:\from c\desktop\serwer\source\source client\client\eterbase\stl.h

; 95   : 	for (TContainer::iterator i = container.begin(); i != container.end(); ++i)

  0000d	74 24		 je	 SHORT $LN50@stl_wipe
  0000f	90		 npad	 1
$LL18@stl_wipe:

; 96   : 	{
; 97   : 		delete *i;

  00010	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00012	85 c9		 test	 ecx, ecx
  00014	74 06		 je	 SHORT $LN6@stl_wipe
  00016	8b 01		 mov	 eax, DWORD PTR [ecx]
  00018	6a 01		 push	 1
  0001a	ff 10		 call	 DWORD PTR [eax]
$LN6@stl_wipe:

; 98   : 		*i = NULL;

  0001c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File a:\vs\vc\include\vector

; 112  : 		++this->_Ptr;

  00022	83 c6 04	 add	 esi, 4

; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		_Compat(_Right);
; 205  : 		return (this->_Ptr == _Right._Ptr);

  00025	3b 77 04	 cmp	 esi, DWORD PTR [edi+4]
; File a:\from c\desktop\serwer\source\source client\client\eterbase\stl.h

; 95   : 	for (TContainer::iterator i = container.begin(); i != container.end(); ++i)

  00028	75 e6		 jne	 SHORT $LL18@stl_wipe
; File a:\vs\vc\include\vector

; 1510 : 		this->_Mylast = this->_Myfirst;

  0002a	8b 07		 mov	 eax, DWORD PTR [edi]
  0002c	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
; File a:\from c\desktop\serwer\source\source client\client\eterbase\stl.h

; 102  : }

  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
$LN50@stl_wipe:
; File a:\vs\vc\include\vector

; 1510 : 		this->_Mylast = this->_Myfirst;

  00033	8b c6		 mov	 eax, esi
  00035	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
; File a:\from c\desktop\serwer\source\source client\client\eterbase\stl.h

; 102  : }

  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??$stl_wipe@V?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@@@YAXAAV?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@@Z ENDP ; stl_wipe<std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\algorithm
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
; File a:\vs\vc\include\algorithm
;	COMDAT ??$for_each@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@UFBoundBox@@@std@@YA?AUFBoundBox@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@0@0U1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Func$ = 20						; size = 8
??$for_each@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@UFBoundBox@@@std@@YA?AUFBoundBox@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@0@0U1@@Z PROC ; std::for_each<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >,FBoundBox>, COMDAT

; 30   : 	{	// perform function for each element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b 5d 10	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	33 c9		 xor	 ecx, ecx
  00009	56		 push	 esi

; 31   : 	_DEBUG_RANGE(_First, _Last);
; 32   : 	_DEBUG_POINTER(_Func);
; 33   : 	_For_each(_Unchecked(_First), _Unchecked(_Last), _Func);

  0000a	8b 75 0c	 mov	 esi, DWORD PTR __First$[ebp]
  0000d	2b de		 sub	 ebx, esi
  0000f	83 c3 03	 add	 ebx, 3
  00012	c1 eb 02	 shr	 ebx, 2
  00015	57		 push	 edi
  00016	33 ff		 xor	 edi, edi
  00018	3b 75 10	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001b	0f 47 d9	 cmova	 ebx, ecx

; 23   : 	for (; _First != _Last; ++_First)

  0001e	85 db		 test	 ebx, ebx
  00020	74 15		 je	 SHORT $LN11@for_each
$LL13@for_each:
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp

; 120  : 		pInstance->GetBoundBox(m_pv3Min, m_pv3Max);

  00022	ff 75 18	 push	 DWORD PTR __Func$[ebp+4]
  00025	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00027	ff 75 14	 push	 DWORD PTR __Func$[ebp]
  0002a	e8 00 00 00 00	 call	 ?GetBoundBox@CGrannyModelInstance@@QAEXPAUD3DXVECTOR3@@0@Z ; CGrannyModelInstance::GetBoundBox
; File a:\vs\vc\include\algorithm

; 23   : 	for (; _First != _Last; ++_First)

  0002f	47		 inc	 edi
  00030	8d 76 04	 lea	 esi, DWORD PTR [esi+4]
  00033	3b fb		 cmp	 edi, ebx
  00035	75 eb		 jne	 SHORT $LL13@for_each
$LN11@for_each:

; 34   : 
; 35   : 	return (_STD move(_Func));

  00037	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0003a	8b 4d 14	 mov	 ecx, DWORD PTR __Func$[ebp]
  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	89 08		 mov	 DWORD PTR [eax], ecx
  00041	8b 4d 18	 mov	 ecx, DWORD PTR __Func$[ebp+4]
  00044	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00047	5b		 pop	 ebx

; 36   : 	}

  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
??$for_each@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@UFBoundBox@@@std@@YA?AUFBoundBox@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@0@0U1@@Z ENDP ; std::for_each<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >,FBoundBox>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCStaticCollisionData@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCStaticCollisionData@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CStaticCollisionData> > >::_Compat, COMDAT
; _this$ = ecx

; 255  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCStaticCollisionData@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CStaticCollisionData> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCStaticCollisionData@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCStaticCollisionData@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CStaticCollisionData> > >::operator!=, COMDAT
; _this$ = ecx

; 209  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 205  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]

; 210  : 		return (!(*this == _Right));

  00005	33 c0		 xor	 eax, eax

; 205  : 		return (this->_Ptr == _Right._Ptr);

  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]

; 210  : 		return (!(*this == _Right));

  0000c	0f 95 c0	 setne	 al

; 211  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCStaticCollisionData@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CStaticCollisionData> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCStaticCollisionData@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCStaticCollisionData@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CStaticCollisionData> > >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 204  : 		_Compat(_Right);
; 205  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	33 c0		 xor	 eax, eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000c	0f 94 c0	 sete	 al

; 206  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCStaticCollisionData@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CStaticCollisionData> > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCStaticCollisionData@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCStaticCollisionData@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CStaticCollisionData> > >::operator++, COMDAT
; _this$ = ecx

; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;

  00000	83 01 50	 add	 DWORD PTR [ecx], 80	; 00000050H

; 113  : 		return (*this);

  00003	8b c1		 mov	 eax, ecx

; 114  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCStaticCollisionData@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CStaticCollisionData> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCStaticCollisionData@@@std@@@std@@@std@@QBEABVCStaticCollisionData@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCStaticCollisionData@@@std@@@std@@@std@@QBEABVCStaticCollisionData@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CStaticCollisionData> > >::operator*, COMDAT
; _this$ = ecx

; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 87   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCStaticCollisionData@@@std@@@std@@@std@@QBEABVCStaticCollisionData@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CStaticCollisionData> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCStaticCollisionData@@@std@@@std@@@std@@QAE@PAVCStaticCollisionData@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCStaticCollisionData@@@std@@@std@@@std@@QAE@PAVCStaticCollisionData@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CStaticCollisionData> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CStaticCollisionData> > >, COMDAT
; _this$ = ecx

; 47   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCStaticCollisionData@@@std@@@std@@@std@@QAE@PAVCStaticCollisionData@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CStaticCollisionData> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CStaticCollisionData> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCStaticCollisionData@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCStaticCollisionData@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CStaticCollisionData> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CStaticCollisionData> > >, COMDAT
; _this$ = ecx

; 42   : 		{	// construct with null pointer

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 43   : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCStaticCollisionData@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CStaticCollisionData> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CStaticCollisionData> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
;	COMDAT ??RFBoundBox@@QAEXPAVCGrannyModelInstance@@@Z
_TEXT	SEGMENT
_pInstance$ = 8						; size = 4
??RFBoundBox@@QAEXPAVCGrannyModelInstance@@@Z PROC	; FBoundBox::operator(), COMDAT
; _this$ = ecx

; 119  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 120  : 		pInstance->GetBoundBox(m_pv3Min, m_pv3Max);

  00003	ff 71 04	 push	 DWORD PTR [ecx+4]
  00006	ff 31		 push	 DWORD PTR [ecx]
  00008	8b 4d 08	 mov	 ecx, DWORD PTR _pInstance$[ebp]
  0000b	e8 00 00 00 00	 call	 ?GetBoundBox@CGrannyModelInstance@@QAEXPAUD3DXVECTOR3@@0@Z ; CGrannyModelInstance::GetBoundBox

; 121  : 	}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
??RFBoundBox@@QAEXPAVCGrannyModelInstance@@@Z ENDP	; FBoundBox::operator()
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
;	COMDAT ??0FBoundBox@@QAE@PAUD3DXVECTOR3@@0@Z
_TEXT	SEGMENT
_pv3Min$ = 8						; size = 4
_pv3Max$ = 12						; size = 4
??0FBoundBox@@QAE@PAUD3DXVECTOR3@@0@Z PROC		; FBoundBox::FBoundBox, COMDAT
; _this$ = ecx

; 113  : 	FBoundBox(D3DXVECTOR3 * pv3Min, D3DXVECTOR3 * pv3Max)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  : 	{
; 115  : 		m_pv3Min = pv3Min;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pv3Min$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 116  : 		m_pv3Max = pv3Max;

  00008	8b 45 0c	 mov	 eax, DWORD PTR _pv3Max$[ebp]
  0000b	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 117  : 	}

  0000e	8b c1		 mov	 eax, ecx
  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
??0FBoundBox@@QAE@PAUD3DXVECTOR3@@0@Z ENDP		; FBoundBox::FBoundBox
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\algorithm
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
; File a:\vs\vc\include\algorithm
;	COMDAT ??$for_each@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@UFRenderShadow@@@std@@YA?AUFRenderShadow@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@0@0U1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Func$ = 16						; size = 1
??$for_each@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@UFRenderShadow@@@std@@YA?AUFRenderShadow@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@0@0U1@@Z PROC ; std::for_each<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >,FRenderShadow>, COMDAT

; 30   : 	{	// perform function for each element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	33 c9		 xor	 ecx, ecx
  00009	56		 push	 esi

; 31   : 	_DEBUG_RANGE(_First, _Last);
; 32   : 	_DEBUG_POINTER(_Func);
; 33   : 	_For_each(_Unchecked(_First), _Unchecked(_Last), _Func);

  0000a	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000d	2b de		 sub	 ebx, esi
  0000f	83 c3 03	 add	 ebx, 3
  00012	c1 eb 02	 shr	 ebx, 2
  00015	57		 push	 edi
  00016	33 ff		 xor	 edi, edi
  00018	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001b	0f 47 d9	 cmova	 ebx, ecx

; 23   : 	for (; _First != _Last; ++_First)

  0001e	85 db		 test	 ebx, ebx
  00020	74 0f		 je	 SHORT $LN24@for_each
$LL13@for_each:
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp

; 99   : 		pInstance->RenderDungeonBlockShadow();

  00022	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00024	e8 00 00 00 00	 call	 ?RenderDungeonBlockShadow@CDungeonModelInstance@@QAEXXZ ; CDungeonModelInstance::RenderDungeonBlockShadow
; File a:\vs\vc\include\algorithm

; 23   : 	for (; _First != _Last; ++_First)

  00029	47		 inc	 edi
  0002a	8d 76 04	 lea	 esi, DWORD PTR [esi+4]
  0002d	3b fb		 cmp	 edi, ebx
  0002f	75 f1		 jne	 SHORT $LL13@for_each
$LN24@for_each:

; 34   : 
; 35   : 	return (_STD move(_Func));

  00031	8a 45 10	 mov	 al, BYTE PTR __Func$[ebp]
  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx

; 36   : 	}

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$for_each@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@UFRenderShadow@@@std@@YA?AUFRenderShadow@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@0@0U1@@Z ENDP ; std::for_each<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >,FRenderShadow>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
;	COMDAT ??RFRenderShadow@@QAEXPAVCDungeonModelInstance@@@Z
_TEXT	SEGMENT
_pInstance$ = 8						; size = 4
??RFRenderShadow@@QAEXPAVCDungeonModelInstance@@@Z PROC	; FRenderShadow::operator(), COMDAT
; _this$ = ecx

; 98   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 99   : 		pInstance->RenderDungeonBlockShadow();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pInstance$[ebp]
  00006	e8 00 00 00 00	 call	 ?RenderDungeonBlockShadow@CDungeonModelInstance@@QAEXXZ ; CDungeonModelInstance::RenderDungeonBlockShadow

; 100  : 	}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??RFRenderShadow@@QAEXPAVCDungeonModelInstance@@@Z ENDP	; FRenderShadow::operator()
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\algorithm
;	COMDAT ??$for_each@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@UFRender@@@std@@YA?AUFRender@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@0@0U1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Func$ = 16						; size = 1
??$for_each@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@UFRender@@@std@@YA?AUFRender@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@0@0U1@@Z PROC ; std::for_each<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >,FRender>, COMDAT

; 30   : 	{	// perform function for each element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	_DEBUG_RANGE(_First, _Last);
; 32   : 	_DEBUG_POINTER(_Func);
; 33   : 	_For_each(_Unchecked(_First), _Unchecked(_Last), _Func);

  00003	8d 45 10	 lea	 eax, DWORD PTR __Func$[ebp]
  00006	50		 push	 eax
  00007	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000a	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000d	e8 00 00 00 00	 call	 ??$_For_each@PAPAVCDungeonModelInstance@@UFRender@@@std@@YAXPAPAVCDungeonModelInstance@@0AAUFRender@@@Z ; std::_For_each<CDungeonModelInstance * *,FRender>

; 34   : 
; 35   : 	return (_STD move(_Func));

  00012	8a 45 10	 mov	 al, BYTE PTR __Func$[ebp]
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 36   : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$for_each@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@UFRender@@@std@@YA?AUFRender@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@0@0U1@@Z ENDP ; std::for_each<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >,FRender>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
;	COMDAT ??RFRender@@QAEXPAVCDungeonModelInstance@@@Z
_TEXT	SEGMENT
_pInstance$ = 8						; size = 4
??RFRender@@QAEXPAVCDungeonModelInstance@@@Z PROC	; FRender::operator(), COMDAT
; _this$ = ecx

; 82   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 14   : 			if (IsEmpty())

  00004	8b 75 08	 mov	 esi, DWORD PTR _pInstance$[ebp]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?IsEmpty@CGrannyModelInstance@@QAE_NXZ ; CGrannyModelInstance::IsEmpty
  0000e	84 c0		 test	 al, al
  00010	75 38		 jne	 SHORT $LN3@operator

; 15   : 				return;
; 16   : 
; 17   : 			STATEMANAGER.SetVertexShader(ms_pnt2VS);

  00012	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_pnt2VS@CGraphicBase@@1KA ; CGraphicBase::ms_pnt2VS
  00018	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0001e	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 18   : 			LPDIRECT3DVERTEXBUFFER8 lpd3dRigidPNTVtxBuf = m_pModel->GetPNTD3DVertexBuffer();

  00023	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00026	e8 00 00 00 00	 call	 ?GetPNTD3DVertexBuffer@CGrannyModel@@QBEPAUIDirect3DVertexBuffer8@@XZ ; CGrannyModel::GetPNTD3DVertexBuffer

; 19   : 			if (lpd3dRigidPNTVtxBuf)

  0002b	85 c0		 test	 eax, eax
  0002d	74 1b		 je	 SHORT $LN3@operator

; 20   : 			{
; 21   : 				STATEMANAGER.SetStreamSource(0, lpd3dRigidPNTVtxBuf, sizeof(TPNT2Vertex));

  0002f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00035	6a 28		 push	 40			; 00000028H
  00037	50		 push	 eax
  00038	6a 00		 push	 0
  0003a	e8 00 00 00 00	 call	 ?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z ; CStateManager::SetStreamSource

; 22   : 				RenderMeshNodeListWithTwoTexture(CGrannyMesh::TYPE_RIGID, CGrannyMaterial::TYPE_BLEND_PNT);

  0003f	6a 01		 push	 1
  00041	6a 00		 push	 0
  00043	8b ce		 mov	 ecx, esi
  00045	e8 00 00 00 00	 call	 ?RenderMeshNodeListWithTwoTexture@CGrannyModelInstance@@IAEXW4EType@CGrannyMesh@@W42CGrannyMaterial@@@Z ; CGrannyModelInstance::RenderMeshNodeListWithTwoTexture
$LN3@operator:
  0004a	5e		 pop	 esi

; 83   : 		pInstance->RenderDungeonBlock();
; 84   : 	}

  0004b	5d		 pop	 ebp
  0004c	c2 04 00	 ret	 4
??RFRender@@QAEXPAVCDungeonModelInstance@@@Z ENDP	; FRender::operator()
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\algorithm
;	COMDAT ??$for_each@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@UFUpdate@@@std@@YA?AUFUpdate@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@0@0U1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Func$ = 16						; size = 8
??$for_each@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@UFUpdate@@@std@@YA?AUFUpdate@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@0@0U1@@Z PROC ; std::for_each<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >,FUpdate>, COMDAT

; 30   : 	{	// perform function for each element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	_DEBUG_RANGE(_First, _Last);
; 32   : 	_DEBUG_POINTER(_Func);
; 33   : 	_For_each(_Unchecked(_First), _Unchecked(_Last), _Func);

  00003	8d 45 10	 lea	 eax, DWORD PTR __Func$[ebp]
  00006	50		 push	 eax
  00007	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000a	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000d	e8 00 00 00 00	 call	 ??$_For_each@PAPAVCDungeonModelInstance@@UFUpdate@@@std@@YAXPAPAVCDungeonModelInstance@@0AAUFUpdate@@@Z ; std::_For_each<CDungeonModelInstance * *,FUpdate>

; 34   : 
; 35   : 	return (_STD move(_Func));

  00012	8b 45 10	 mov	 eax, DWORD PTR __Func$[ebp]
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH
  00018	8b 55 14	 mov	 edx, DWORD PTR __Func$[ebp+4]

; 36   : 	}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$for_each@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@UFUpdate@@@std@@YA?AUFUpdate@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@0@0U1@@Z ENDP ; std::for_each<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >,FUpdate>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >::operator++, COMDAT
; _this$ = ecx

; 112  : 		++this->_Ptr;

  00000	83 01 04	 add	 DWORD PTR [ecx], 4

; 334  : 		++*(_Mybase *)this;
; 335  : 		return (*this);

  00003	8b c1		 mov	 eax, ecx

; 336  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QBEAAPAVCDungeonModelInstance@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QBEAAPAVCDungeonModelInstance@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >::operator*, COMDAT
; _this$ = ecx

; 324  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 325  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QBEAAPAVCDungeonModelInstance@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QBEPAPAVCDungeonModelInstance@@XZ
_TEXT	SEGMENT
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QBEPAPAVCDungeonModelInstance@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >::_Unchecked, COMDAT
; _this$ = ecx

; 319  : 		return (_Unchecked_type(this->_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 320  : 		}

  00002	c3		 ret	 0
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QBEPAPAVCDungeonModelInstance@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >::_Unchecked
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QAE@PAPAVCDungeonModelInstance@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QAE@PAPAVCDungeonModelInstance@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >, COMDAT
; _this$ = ecx

; 306  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 		{	// construct with pointer _Parg

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 307  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QAE@PAPAVCDungeonModelInstance@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >::_Compat, COMDAT
; _this$ = ecx

; 255  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >::operator!=, COMDAT
; _this$ = ecx

; 209  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 205  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]

; 210  : 		return (!(*this == _Right));

  00005	33 c0		 xor	 eax, eax

; 205  : 		return (this->_Ptr == _Right._Ptr);

  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]

; 210  : 		return (!(*this == _Right));

  0000c	0f 95 c0	 setne	 al

; 211  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 204  : 		_Compat(_Right);
; 205  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	33 c0		 xor	 eax, eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000c	0f 94 c0	 sete	 al

; 206  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >::operator++, COMDAT
; _this$ = ecx

; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;

  00000	83 01 04	 add	 DWORD PTR [ecx], 4

; 113  : 		return (*this);

  00003	8b c1		 mov	 eax, ecx

; 114  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QBEABQAVCDungeonModelInstance@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QBEABQAVCDungeonModelInstance@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >::operator*, COMDAT
; _this$ = ecx

; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 87   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QBEABQAVCDungeonModelInstance@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QAE@PAPAVCDungeonModelInstance@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QAE@PAPAVCDungeonModelInstance@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >, COMDAT
; _this$ = ecx

; 47   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@std@@QAE@PAPAVCDungeonModelInstance@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
;	COMDAT ??RFUpdate@@QAEXPAVCGrannyModelInstance@@@Z
_TEXT	SEGMENT
_pInstance$ = 8						; size = 4
??RFUpdate@@QAEXPAVCGrannyModelInstance@@@Z PROC	; FUpdate::operator(), COMDAT
; _this$ = ecx

; 62   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 63   : 		pInstance->Update(CGrannyModelInstance::ANIFPS_MIN);

  00004	8b 75 08	 mov	 esi, DWORD PTR _pInstance$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	8b ce		 mov	 ecx, esi
  0000c	6a 1e		 push	 30			; 0000001eH
  0000e	e8 00 00 00 00	 call	 ?Update@CGrannyModelInstance@@QAEXK@Z ; CGrannyModelInstance::Update

; 64   : 		pInstance->UpdateLocalTime(fElapsedTime);

  00013	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  00017	51		 push	 ecx
  00018	8b ce		 mov	 ecx, esi
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 ?UpdateLocalTime@CGrannyModelInstance@@QAEXM@Z ; CGrannyModelInstance::UpdateLocalTime

; 65   : 		pInstance->Deform(pmatWorld);

  00024	ff 77 04	 push	 DWORD PTR [edi+4]
  00027	8b ce		 mov	 ecx, esi
  00029	e8 00 00 00 00	 call	 ?Deform@CGrannyModelInstance@@QAEXPBUD3DXMATRIX@@@Z ; CGrannyModelInstance::Deform
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi

; 66   : 	}

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??RFUpdate@@QAEXPAVCGrannyModelInstance@@@Z ENDP	; FUpdate::operator()
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
;	COMDAT ??_GCDungeonModelInstance@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCDungeonModelInstance@@UAEPAXI@Z PROC		; CDungeonModelInstance::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 10   : 		virtual ~CDungeonModelInstance() {}

  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CDungeonModelInstance@@6B@
  0000c	e8 00 00 00 00	 call	 ??1CGrannyModelInstance@@UAE@XZ ; CGrannyModelInstance::~CGrannyModelInstance
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 09		 je	 SHORT $LN7@scalar
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	83 c4 04	 add	 esp, 4
$LN7@scalar:
  00020	8b c6		 mov	 eax, esi
  00022	5e		 pop	 esi
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
??_GCDungeonModelInstance@@UAEPAXI@Z ENDP		; CDungeonModelInstance::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
;	COMDAT ?RenderDungeonBlockShadow@CDungeonModelInstance@@QAEXXZ
_TEXT	SEGMENT
?RenderDungeonBlockShadow@CDungeonModelInstance@@QAEXXZ PROC ; CDungeonModelInstance::RenderDungeonBlockShadow, COMDAT
; _this$ = ecx

; 27   : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 28   : 			if (IsEmpty())

  00003	e8 00 00 00 00	 call	 ?IsEmpty@CGrannyModelInstance@@QAE_NXZ ; CGrannyModelInstance::IsEmpty
  00008	84 c0		 test	 al, al
  0000a	0f 85 fb 00 00
	00		 jne	 $LN3@RenderDung

; 29   : 				return;
; 30   : 
; 31   : 			STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, 0xffffffff);

  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00016	6a ff		 push	 -1
  00018	6a 3c		 push	 60			; 0000003cH
  0001a	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 32   : 			STATEMANAGER.SaveTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TFACTOR);

  0001f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00025	6a 03		 push	 3
  00027	6a 02		 push	 2
  00029	6a 00		 push	 0
  0002b	e8 00 00 00 00	 call	 ?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SaveTextureStageState

; 33   : 			STATEMANAGER.SaveTextureStageState(0, D3DTSS_COLOROP,   D3DTOP_SELECTARG1);

  00030	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00036	6a 02		 push	 2
  00038	6a 01		 push	 1
  0003a	6a 00		 push	 0
  0003c	e8 00 00 00 00	 call	 ?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SaveTextureStageState

; 34   : 			STATEMANAGER.SaveTextureStageState(0, D3DTSS_ALPHAOP,   D3DTOP_DISABLE);

  00041	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00047	6a 01		 push	 1
  00049	6a 04		 push	 4
  0004b	6a 00		 push	 0
  0004d	e8 00 00 00 00	 call	 ?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SaveTextureStageState

; 35   : 			STATEMANAGER.SaveRenderState(D3DRS_ALPHABLENDENABLE, TRUE);

  00052	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00058	6a 01		 push	 1
  0005a	6a 1b		 push	 27			; 0000001bH
  0005c	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 36   : 			STATEMANAGER.SaveRenderState(D3DRS_SRCBLEND, D3DBLEND_ZERO);

  00061	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00067	6a 01		 push	 1
  00069	6a 13		 push	 19			; 00000013H
  0006b	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 37   : 			STATEMANAGER.SaveRenderState(D3DRS_DESTBLEND, D3DBLEND_SRCCOLOR);

  00070	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00076	6a 03		 push	 3
  00078	6a 14		 push	 20			; 00000014H
  0007a	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 38   : 
; 39   : 			STATEMANAGER.SetVertexShader(ms_pnt2VS);

  0007f	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_pnt2VS@CGraphicBase@@1KA ; CGraphicBase::ms_pnt2VS
  00085	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0008b	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 40   : 			LPDIRECT3DVERTEXBUFFER8 lpd3dRigidPNTVtxBuf = m_pModel->GetPNTD3DVertexBuffer();

  00090	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00093	e8 00 00 00 00	 call	 ?GetPNTD3DVertexBuffer@CGrannyModel@@QBEPAUIDirect3DVertexBuffer8@@XZ ; CGrannyModel::GetPNTD3DVertexBuffer

; 41   : 			if (lpd3dRigidPNTVtxBuf)

  00098	85 c0		 test	 eax, eax
  0009a	74 1b		 je	 SHORT $LN1@RenderDung

; 42   : 			{
; 43   : 				STATEMANAGER.SetStreamSource(0, lpd3dRigidPNTVtxBuf, sizeof(TPNT2Vertex));

  0009c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000a2	6a 28		 push	 40			; 00000028H
  000a4	50		 push	 eax
  000a5	6a 00		 push	 0
  000a7	e8 00 00 00 00	 call	 ?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z ; CStateManager::SetStreamSource

; 44   : 				RenderMeshNodeListWithoutTexture(CGrannyMesh::TYPE_RIGID, CGrannyMaterial::TYPE_BLEND_PNT);

  000ac	6a 01		 push	 1
  000ae	6a 00		 push	 0
  000b0	8b ce		 mov	 ecx, esi
  000b2	e8 00 00 00 00	 call	 ?RenderMeshNodeListWithoutTexture@CGrannyModelInstance@@IAEXW4EType@CGrannyMesh@@W42CGrannyMaterial@@@Z ; CGrannyModelInstance::RenderMeshNodeListWithoutTexture
$LN1@RenderDung:

; 45   : 			}
; 46   : 
; 47   : 			STATEMANAGER.RestoreTextureStageState(0, D3DTSS_COLORARG1);

  000b7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000bd	6a 02		 push	 2
  000bf	6a 00		 push	 0
  000c1	e8 00 00 00 00	 call	 ?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z ; CStateManager::RestoreTextureStageState

; 48   : 			STATEMANAGER.RestoreTextureStageState(0, D3DTSS_COLOROP);

  000c6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000cc	6a 01		 push	 1
  000ce	6a 00		 push	 0
  000d0	e8 00 00 00 00	 call	 ?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z ; CStateManager::RestoreTextureStageState

; 49   : 			STATEMANAGER.RestoreTextureStageState(0, D3DTSS_ALPHAOP);

  000d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000db	6a 04		 push	 4
  000dd	6a 00		 push	 0
  000df	e8 00 00 00 00	 call	 ?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z ; CStateManager::RestoreTextureStageState

; 50   : 			STATEMANAGER.RestoreRenderState(D3DRS_ALPHABLENDENABLE);

  000e4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000ea	6a 1b		 push	 27			; 0000001bH
  000ec	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 51   : 			STATEMANAGER.RestoreRenderState(D3DRS_SRCBLEND);

  000f1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000f7	6a 13		 push	 19			; 00000013H
  000f9	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 52   : 			STATEMANAGER.RestoreRenderState(D3DRS_DESTBLEND);

  000fe	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00104	6a 14		 push	 20			; 00000014H
  00106	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState
$LN3@RenderDung:
  0010b	5e		 pop	 esi

; 53   : 		}

  0010c	c3		 ret	 0
?RenderDungeonBlockShadow@CDungeonModelInstance@@QAEXXZ ENDP ; CDungeonModelInstance::RenderDungeonBlockShadow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
;	COMDAT ?RenderDungeonBlock@CDungeonModelInstance@@QAEXXZ
_TEXT	SEGMENT
?RenderDungeonBlock@CDungeonModelInstance@@QAEXXZ PROC	; CDungeonModelInstance::RenderDungeonBlock, COMDAT
; _this$ = ecx

; 13   : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 14   : 			if (IsEmpty())

  00003	e8 00 00 00 00	 call	 ?IsEmpty@CGrannyModelInstance@@QAE_NXZ ; CGrannyModelInstance::IsEmpty
  00008	84 c0		 test	 al, al
  0000a	75 38		 jne	 SHORT $LN1@RenderDung

; 15   : 				return;
; 16   : 
; 17   : 			STATEMANAGER.SetVertexShader(ms_pnt2VS);

  0000c	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_pnt2VS@CGraphicBase@@1KA ; CGraphicBase::ms_pnt2VS
  00012	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00018	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 18   : 			LPDIRECT3DVERTEXBUFFER8 lpd3dRigidPNTVtxBuf = m_pModel->GetPNTD3DVertexBuffer();

  0001d	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00020	e8 00 00 00 00	 call	 ?GetPNTD3DVertexBuffer@CGrannyModel@@QBEPAUIDirect3DVertexBuffer8@@XZ ; CGrannyModel::GetPNTD3DVertexBuffer

; 19   : 			if (lpd3dRigidPNTVtxBuf)

  00025	85 c0		 test	 eax, eax
  00027	74 1b		 je	 SHORT $LN1@RenderDung

; 20   : 			{
; 21   : 				STATEMANAGER.SetStreamSource(0, lpd3dRigidPNTVtxBuf, sizeof(TPNT2Vertex));

  00029	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0002f	6a 28		 push	 40			; 00000028H
  00031	50		 push	 eax
  00032	6a 00		 push	 0
  00034	e8 00 00 00 00	 call	 ?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z ; CStateManager::SetStreamSource

; 22   : 				RenderMeshNodeListWithTwoTexture(CGrannyMesh::TYPE_RIGID, CGrannyMaterial::TYPE_BLEND_PNT);

  00039	6a 01		 push	 1
  0003b	6a 00		 push	 0
  0003d	8b ce		 mov	 ecx, esi
  0003f	e8 00 00 00 00	 call	 ?RenderMeshNodeListWithTwoTexture@CGrannyModelInstance@@IAEXW4EType@CGrannyMesh@@W42CGrannyMaterial@@@Z ; CGrannyModelInstance::RenderMeshNodeListWithTwoTexture
$LN1@RenderDung:
  00044	5e		 pop	 esi

; 23   : 			}
; 24   : 		}

  00045	c3		 ret	 0
?RenderDungeonBlock@CDungeonModelInstance@@QAEXXZ ENDP	; CDungeonModelInstance::RenderDungeonBlock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
;	COMDAT ??1CDungeonModelInstance@@UAE@XZ
_TEXT	SEGMENT
??1CDungeonModelInstance@@UAE@XZ PROC			; CDungeonModelInstance::~CDungeonModelInstance, COMDAT
; _this$ = ecx

; 10   : 		virtual ~CDungeonModelInstance() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CDungeonModelInstance@@6B@
  00006	e9 00 00 00 00	 jmp	 ??1CGrannyModelInstance@@UAE@XZ ; CGrannyModelInstance::~CGrannyModelInstance
??1CDungeonModelInstance@@UAE@XZ ENDP			; CDungeonModelInstance::~CDungeonModelInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
;	COMDAT ??0CDungeonModelInstance@@QAE@XZ
_TEXT	SEGMENT
??0CDungeonModelInstance@@QAE@XZ PROC			; CDungeonModelInstance::CDungeonModelInstance, COMDAT
; _this$ = ecx

; 9    : 		CDungeonModelInstance() {}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??0CGrannyModelInstance@@QAE@XZ ; CGrannyModelInstance::CGrannyModelInstance
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CDungeonModelInstance@@6B@
  0000e	8b c6		 mov	 eax, esi
  00010	5e		 pop	 esi
  00011	c3		 ret	 0
??0CDungeonModelInstance@@QAE@XZ ENDP			; CDungeonModelInstance::CDungeonModelInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterbase\singleton.h
;	COMDAT ?Instance@?$CSingleton@VCStateManager@@@@SAAAVCStateManager@@XZ
_TEXT	SEGMENT
?Instance@?$CSingleton@VCStateManager@@@@SAAAVCStateManager@@XZ PROC ; CSingleton<CStateManager>::Instance, COMDAT

; 26   : 		assert(ms_singleton);
; 27   : 		return (*ms_singleton);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton

; 28   : 	}

  00005	c3		 ret	 0
?Instance@?$CSingleton@VCStateManager@@@@SAAAVCStateManager@@XZ ENDP ; CSingleton<CStateManager>::Instance
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCDungeonBlock@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCDungeonBlock@@UAEPAXI@Z PROC			; CDungeonBlock::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CDungeonBlock@@UAE@XZ ; CDungeonBlock::~CDungeonBlock
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCDungeonBlock@@UAEPAXI@Z ENDP			; CDungeonBlock::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IBEXPAPAVCDungeonModelInstance@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IBEXPAPAVCDungeonModelInstance@@0@Z PROC ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1781 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IBEXPAPAVCDungeonModelInstance@@0@Z ENDP ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Xlen@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IBEXXZ PROC ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::_Xlen, COMDAT
; _this$ = ecx

; 1754 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IBEXXZ ENDP ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
;	COMDAT ?_Tidy@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IAEXXZ PROC ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::_Tidy, COMDAT
; _this$ = ecx

; 1622 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1623 : 		if (this->_Myfirst != pointer())

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 1d		 je	 SHORT $LN1@Tidy
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
; File a:\vs\vc\include\vector

; 1629 : 			this->_Myfirst = pointer();

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1630 : 			this->_Mylast = pointer();

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1631 : 			this->_Myend = pointer();

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN1@Tidy:
  00026	5e		 pop	 esi

; 1632 : 			}
; 1633 : 		}

  00027	c3		 ret	 0
?_Tidy@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IAEXXZ ENDP ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Reserve@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IAEXI@Z PROC ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::_Reserve, COMDAT
; _this$ = ecx

; 1612 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1011 : 		}
; 1012 : 
; 1013 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1014 : 		{	// micro-optimization for capacity() - size()
; 1015 : 		return (this->_Myend - this->_Mylast);

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00006	8b c2		 mov	 eax, edx
  00008	56		 push	 esi
  00009	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0000c	2b c6		 sub	 eax, esi
  0000e	57		 push	 edi

; 1613 : 		if (_Unused_capacity() < _Count)

  0000f	8b 7d 08	 mov	 edi, DWORD PTR __Count$[ebp]

; 1011 : 		}
; 1012 : 
; 1013 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1014 : 		{	// micro-optimization for capacity() - size()
; 1015 : 		return (this->_Myend - this->_Mylast);

  00012	c1 f8 02	 sar	 eax, 2

; 1613 : 		if (_Unused_capacity() < _Count)

  00015	3b c7		 cmp	 eax, edi
  00017	73 49		 jae	 SHORT $LN2@Reserve

; 1016 : 		}
; 1017 : 
; 1018 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1019 : 		{	// micro-optimization for capacity() != size()
; 1020 : 		return (this->_Myend != this->_Mylast);
; 1021 : 		}
; 1022 : 
; 1023 : 	iterator begin() _NOEXCEPT
; 1024 : 		{	// return iterator for beginning of mutable sequence
; 1025 : 		return (iterator(this->_Myfirst, this));
; 1026 : 		}
; 1027 : 
; 1028 : 	const_iterator begin() const _NOEXCEPT
; 1029 : 		{	// return iterator for beginning of nonmutable sequence
; 1030 : 		return (const_iterator(this->_Myfirst, this));
; 1031 : 		}
; 1032 : 
; 1033 : 	iterator end() _NOEXCEPT
; 1034 : 		{	// return iterator for end of mutable sequence
; 1035 : 		return (iterator(this->_Mylast, this));
; 1036 : 		}
; 1037 : 
; 1038 : 	const_iterator end() const _NOEXCEPT
; 1039 : 		{	// return iterator for end of nonmutable sequence
; 1040 : 		return (const_iterator(this->_Mylast, this));
; 1041 : 		}
; 1042 : 
; 1043 : 	iterator _Make_iter(const_iterator _Where) const
; 1044 : 		{	// make iterator from const_iterator
; 1045 : 		return (iterator(_Where._Ptr, this));
; 1046 : 		}
; 1047 : 
; 1048 : 	reverse_iterator rbegin() _NOEXCEPT
; 1049 : 		{	// return iterator for beginning of reversed mutable sequence
; 1050 : 		return (reverse_iterator(end()));
; 1051 : 		}
; 1052 : 
; 1053 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1054 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1055 : 		return (const_reverse_iterator(end()));
; 1056 : 		}
; 1057 : 
; 1058 : 	reverse_iterator rend() _NOEXCEPT
; 1059 : 		{	// return iterator for end of reversed mutable sequence
; 1060 : 		return (reverse_iterator(begin()));
; 1061 : 		}
; 1062 : 
; 1063 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1064 : 		{	// return iterator for end of reversed nonmutable sequence
; 1065 : 		return (const_reverse_iterator(begin()));
; 1066 : 		}
; 1067 : 
; 1068 : 	const_iterator cbegin() const _NOEXCEPT
; 1069 : 		{	// return iterator for beginning of nonmutable sequence
; 1070 : 		return (((const _Myt *)this)->begin());
; 1071 : 		}
; 1072 : 
; 1073 : 	const_iterator cend() const _NOEXCEPT
; 1074 : 		{	// return iterator for end of nonmutable sequence
; 1075 : 		return (((const _Myt *)this)->end());
; 1076 : 		}
; 1077 : 
; 1078 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1079 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1080 : 		return (((const _Myt *)this)->rbegin());
; 1081 : 		}
; 1082 : 
; 1083 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1084 : 		{	// return iterator for end of reversed nonmutable sequence
; 1085 : 		return (((const _Myt *)this)->rend());
; 1086 : 		}
; 1087 : 
; 1088 : 	void shrink_to_fit()
; 1089 : 		{	// reduce capacity
; 1090 : 		if (_Has_unused_capacity())
; 1091 : 			{	// worth shrinking, do it
; 1092 : 			if (empty())
; 1093 : 				_Tidy();
; 1094 : 			else
; 1095 : 				_Reallocate(size());
; 1096 : 			}
; 1097 : 		}
; 1098 : 
; 1099 : 	void resize(size_type _Newsize)
; 1100 : 		{	// determine new length, padding as needed
; 1101 : 		if (_Newsize < size())
; 1102 : 			_Pop_back_n(size() - _Newsize);
; 1103 : 		else if (size() < _Newsize)
; 1104 : 			{	// pad as needed
; 1105 : 			_Alty _Alval(this->_Getal());
; 1106 : 			_Reserve(_Newsize - size());
; 1107 : 			_TRY_BEGIN
; 1108 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1109 : 				_Alval);
; 1110 : 			_CATCH_ALL
; 1111 : 			_Tidy();
; 1112 : 			_RERAISE;
; 1113 : 			_CATCH_END
; 1114 : 			this->_Mylast += _Newsize - size();
; 1115 : 			}
; 1116 : 		}
; 1117 : 
; 1118 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1119 : 		{	// determine new length, padding with _Val elements as needed
; 1120 : 		if (_Newsize < size())
; 1121 : 			_Pop_back_n(size() - _Newsize);
; 1122 : 		else if (size() < _Newsize)
; 1123 : 			{	// pad as needed
; 1124 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1125 : 
; 1126 : 			if (_Inside(_Ptr))
; 1127 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1128 : 				const difference_type _Idx = _Ptr
; 1129 : 					- _STD addressof(*this->_Myfirst);
; 1130 : 				_Reserve(_Newsize - size());
; 1131 : 				_Ptr = _STD addressof(*this->_Myfirst) + _Idx;
; 1132 : 				}
; 1133 : 			else
; 1134 : 				_Reserve(_Newsize - size());
; 1135 : 
; 1136 : 			_TRY_BEGIN
; 1137 : 			_Ufill(this->_Mylast, _Newsize - size(), _Ptr);
; 1138 : 			_CATCH_ALL
; 1139 : 			_Tidy();
; 1140 : 			_RERAISE;
; 1141 : 			_CATCH_END
; 1142 : 			this->_Mylast += _Newsize - size();
; 1143 : 			}
; 1144 : 		}
; 1145 : 
; 1146 : 	size_type size() const _NOEXCEPT
; 1147 : 		{	// return length of sequence
; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00019	2b 31		 sub	 esi, DWORD PTR [ecx]
  0001b	53		 push	 ebx

; 1614 : 			{	// need more room, try to get it
; 1615 : 			if (max_size() - size() < _Count)

  0001c	bb ff ff ff 3f	 mov	 ebx, 1073741823		; 3fffffffH

; 1016 : 		}
; 1017 : 
; 1018 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1019 : 		{	// micro-optimization for capacity() != size()
; 1020 : 		return (this->_Myend != this->_Mylast);
; 1021 : 		}
; 1022 : 
; 1023 : 	iterator begin() _NOEXCEPT
; 1024 : 		{	// return iterator for beginning of mutable sequence
; 1025 : 		return (iterator(this->_Myfirst, this));
; 1026 : 		}
; 1027 : 
; 1028 : 	const_iterator begin() const _NOEXCEPT
; 1029 : 		{	// return iterator for beginning of nonmutable sequence
; 1030 : 		return (const_iterator(this->_Myfirst, this));
; 1031 : 		}
; 1032 : 
; 1033 : 	iterator end() _NOEXCEPT
; 1034 : 		{	// return iterator for end of mutable sequence
; 1035 : 		return (iterator(this->_Mylast, this));
; 1036 : 		}
; 1037 : 
; 1038 : 	const_iterator end() const _NOEXCEPT
; 1039 : 		{	// return iterator for end of nonmutable sequence
; 1040 : 		return (const_iterator(this->_Mylast, this));
; 1041 : 		}
; 1042 : 
; 1043 : 	iterator _Make_iter(const_iterator _Where) const
; 1044 : 		{	// make iterator from const_iterator
; 1045 : 		return (iterator(_Where._Ptr, this));
; 1046 : 		}
; 1047 : 
; 1048 : 	reverse_iterator rbegin() _NOEXCEPT
; 1049 : 		{	// return iterator for beginning of reversed mutable sequence
; 1050 : 		return (reverse_iterator(end()));
; 1051 : 		}
; 1052 : 
; 1053 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1054 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1055 : 		return (const_reverse_iterator(end()));
; 1056 : 		}
; 1057 : 
; 1058 : 	reverse_iterator rend() _NOEXCEPT
; 1059 : 		{	// return iterator for end of reversed mutable sequence
; 1060 : 		return (reverse_iterator(begin()));
; 1061 : 		}
; 1062 : 
; 1063 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1064 : 		{	// return iterator for end of reversed nonmutable sequence
; 1065 : 		return (const_reverse_iterator(begin()));
; 1066 : 		}
; 1067 : 
; 1068 : 	const_iterator cbegin() const _NOEXCEPT
; 1069 : 		{	// return iterator for beginning of nonmutable sequence
; 1070 : 		return (((const _Myt *)this)->begin());
; 1071 : 		}
; 1072 : 
; 1073 : 	const_iterator cend() const _NOEXCEPT
; 1074 : 		{	// return iterator for end of nonmutable sequence
; 1075 : 		return (((const _Myt *)this)->end());
; 1076 : 		}
; 1077 : 
; 1078 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1079 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1080 : 		return (((const _Myt *)this)->rbegin());
; 1081 : 		}
; 1082 : 
; 1083 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1084 : 		{	// return iterator for end of reversed nonmutable sequence
; 1085 : 		return (((const _Myt *)this)->rend());
; 1086 : 		}
; 1087 : 
; 1088 : 	void shrink_to_fit()
; 1089 : 		{	// reduce capacity
; 1090 : 		if (_Has_unused_capacity())
; 1091 : 			{	// worth shrinking, do it
; 1092 : 			if (empty())
; 1093 : 				_Tidy();
; 1094 : 			else
; 1095 : 				_Reallocate(size());
; 1096 : 			}
; 1097 : 		}
; 1098 : 
; 1099 : 	void resize(size_type _Newsize)
; 1100 : 		{	// determine new length, padding as needed
; 1101 : 		if (_Newsize < size())
; 1102 : 			_Pop_back_n(size() - _Newsize);
; 1103 : 		else if (size() < _Newsize)
; 1104 : 			{	// pad as needed
; 1105 : 			_Alty _Alval(this->_Getal());
; 1106 : 			_Reserve(_Newsize - size());
; 1107 : 			_TRY_BEGIN
; 1108 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1109 : 				_Alval);
; 1110 : 			_CATCH_ALL
; 1111 : 			_Tidy();
; 1112 : 			_RERAISE;
; 1113 : 			_CATCH_END
; 1114 : 			this->_Mylast += _Newsize - size();
; 1115 : 			}
; 1116 : 		}
; 1117 : 
; 1118 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1119 : 		{	// determine new length, padding with _Val elements as needed
; 1120 : 		if (_Newsize < size())
; 1121 : 			_Pop_back_n(size() - _Newsize);
; 1122 : 		else if (size() < _Newsize)
; 1123 : 			{	// pad as needed
; 1124 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1125 : 
; 1126 : 			if (_Inside(_Ptr))
; 1127 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1128 : 				const difference_type _Idx = _Ptr
; 1129 : 					- _STD addressof(*this->_Myfirst);
; 1130 : 				_Reserve(_Newsize - size());
; 1131 : 				_Ptr = _STD addressof(*this->_Myfirst) + _Idx;
; 1132 : 				}
; 1133 : 			else
; 1134 : 				_Reserve(_Newsize - size());
; 1135 : 
; 1136 : 			_TRY_BEGIN
; 1137 : 			_Ufill(this->_Mylast, _Newsize - size(), _Ptr);
; 1138 : 			_CATCH_ALL
; 1139 : 			_Tidy();
; 1140 : 			_RERAISE;
; 1141 : 			_CATCH_END
; 1142 : 			this->_Mylast += _Newsize - size();
; 1143 : 			}
; 1144 : 		}
; 1145 : 
; 1146 : 	size_type size() const _NOEXCEPT
; 1147 : 		{	// return length of sequence
; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00021	c1 fe 02	 sar	 esi, 2

; 1614 : 			{	// need more room, try to get it
; 1615 : 			if (max_size() - size() < _Count)

  00024	8b c3		 mov	 eax, ebx
  00026	2b c6		 sub	 eax, esi
  00028	3b c7		 cmp	 eax, edi
  0002a	72 3c		 jb	 SHORT $LN43@Reserve

; 1010 : 		return (this->_Myend - this->_Myfirst);

  0002c	2b 11		 sub	 edx, DWORD PTR [ecx]

; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));

  0002e	03 f7		 add	 esi, edi

; 1010 : 		return (this->_Myend - this->_Myfirst);

  00030	c1 fa 02	 sar	 edx, 2

; 1149 : 		}
; 1150 : 
; 1151 : 	size_type max_size() const _NOEXCEPT
; 1152 : 		{	// return maximum possible length of sequence
; 1153 : 		return (this->_Getal().max_size());
; 1154 : 		}
; 1155 : 
; 1156 : 	bool empty() const _NOEXCEPT
; 1157 : 		{	// test if sequence is empty
; 1158 : 		return (this->_Myfirst == this->_Mylast);
; 1159 : 		}
; 1160 : 
; 1161 : 	_Alloc get_allocator() const _NOEXCEPT
; 1162 : 		{	// return allocator object for values
; 1163 : 		return (this->_Getal());
; 1164 : 		}
; 1165 : 
; 1166 : 	const_reference at(size_type _Pos) const
; 1167 : 		{	// subscript nonmutable sequence with checking
; 1168 : 		if (size() <= _Pos)
; 1169 : 			_Xran();
; 1170 : 		return (*(this->_Myfirst + _Pos));
; 1171 : 		}
; 1172 : 
; 1173 : 	reference at(size_type _Pos)
; 1174 : 		{	// subscript mutable sequence with checking
; 1175 : 		if (size() <= _Pos)
; 1176 : 			_Xran();
; 1177 : 		return (*(this->_Myfirst + _Pos));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reference operator[](size_type _Pos) const
; 1181 : 		{	// subscript nonmutable sequence
; 1182 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1183 : 		if (size() <= _Pos)
; 1184 : 			{	// report error
; 1185 : 			_DEBUG_ERROR("vector subscript out of range");
; 1186 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1187 : 			}
; 1188 : 
; 1189 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1190 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1191 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1192 : 
; 1193 : 		return (*(this->_Myfirst + _Pos));
; 1194 : 		}
; 1195 : 
; 1196 : 	reference operator[](size_type _Pos)
; 1197 : 		{	// subscript mutable sequence
; 1198 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1199 : 		if (size() <= _Pos)
; 1200 : 			{	// report error
; 1201 : 			_DEBUG_ERROR("vector subscript out of range");
; 1202 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1203 : 			}
; 1204 : 
; 1205 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1206 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1207 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1208 : 
; 1209 : 		return (*(this->_Myfirst + _Pos));
; 1210 : 		}
; 1211 : 
; 1212 : 	pointer data() _NOEXCEPT
; 1213 : 		{	// return address of first element
; 1214 : 		return (this->_Myfirst);
; 1215 : 		}
; 1216 : 
; 1217 : 	const_pointer data() const _NOEXCEPT
; 1218 : 		{	// return address of first element
; 1219 : 		return (this->_Myfirst);
; 1220 : 		}
; 1221 : 
; 1222 : 	reference front()
; 1223 : 		{	// return first element of mutable sequence
; 1224 : 		return (*begin());
; 1225 : 		}
; 1226 : 
; 1227 : 	const_reference front() const
; 1228 : 		{	// return first element of nonmutable sequence
; 1229 : 		return (*begin());
; 1230 : 		}
; 1231 : 
; 1232 : 	reference back()
; 1233 : 		{	// return last element of mutable sequence
; 1234 : 		return (*(end() - 1));
; 1235 : 		}
; 1236 : 
; 1237 : 	const_reference back() const
; 1238 : 		{	// return last element of nonmutable sequence
; 1239 : 		return (*(end() - 1));
; 1240 : 		}
; 1241 : 
; 1242 : 	void push_back(const value_type& _Val)
; 1243 : 		{	// insert element at end
; 1244 : 		if (_Inside(_STD addressof(_Val)))
; 1245 : 			{	// push back an element
; 1246 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1247 : 			if (this->_Mylast == this->_Myend)
; 1248 : 				_Reserve(1);
; 1249 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1250 : 			this->_Getal().construct(this->_Mylast,
; 1251 : 				this->_Myfirst[_Idx]);
; 1252 : 			++this->_Mylast;
; 1253 : 			}
; 1254 : 		else
; 1255 : 			{	// push back a non-element
; 1256 : 			if (this->_Mylast == this->_Myend)
; 1257 : 				_Reserve(1);
; 1258 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1259 : 			this->_Getal().construct(this->_Mylast,
; 1260 : 				_Val);
; 1261 : 			++this->_Mylast;
; 1262 : 			}
; 1263 : 		}
; 1264 : 
; 1265 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1266 : 	void pop_back()
; 1267 : 		{	// erase element at end
; 1268 : 		if (empty())
; 1269 : 			_DEBUG_ERROR("vector empty before pop");
; 1270 : 		else
; 1271 : 			{	// erase last element
; 1272 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1273 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1274 : 			--this->_Mylast;
; 1275 : 			}
; 1276 : 		}
; 1277 : 
; 1278 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1279 : 	void pop_back()
; 1280 : 		{	// erase element at end
; 1281 : 		this->_Getal().destroy(this->_Mylast - 1);
; 1282 : 		--this->_Mylast;
; 1283 : 		}
; 1284 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1285 : 
; 1286 : 	template<class _Iter>
; 1287 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1288 : 			void>::type
; 1289 : 		assign(_Iter _First, _Iter _Last)
; 1290 : 		{	// assign [_First, _Last)
; 1291 : 		clear();
; 1292 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1293 : 		}
; 1294 : 
; 1295 : 	template<class _Iter>
; 1296 : 		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
; 1297 : 		{	// assign [_First, _Last), input iterators
; 1298 : 		for (; _First != _Last; ++_First)
; 1299 : 			emplace_back(*_First);
; 1300 : 		}
; 1301 : 
; 1302 : 	template<class _Iter>
; 1303 : 		void _Assign(_Iter _First, _Iter _Last, forward_iterator_tag)
; 1304 : 		{	// assign [_First, _Last), forward iterators
; 1305 : 		if (_First == _Last)
; 1306 : 			return;	// nothing to do
; 1307 : 
; 1308 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1309 : 
; 1310 : 		if (capacity() < _Newsize)
; 1311 : 			{	// need more room, try to get it
; 1312 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1313 : 			_Tidy();
; 1314 : 			_Buy(_Newcapacity);
; 1315 : 			}
; 1316 : 
; 1317 : 		this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
; 1318 : 		}
; 1319 : 
; 1320 : 	void assign(size_type _Count, const value_type& _Val)
; 1321 : 		{	// assign _Count * _Val
; 1322 : 		clear();
; 1323 : 		insert(begin(), _Count, _Val);
; 1324 : 		}
; 1325 : 
; 1326 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1327 : 		{	// insert _Val at _Where
; 1328 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1329 : 		}
; 1330 : 
; 1331 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1332 : 		const _Ty& _Val)
; 1333 : 		{	// insert _Count * _Val at _Where
; 1334 : 		return (_Insert_n(_Where, _Count, _Val));
; 1335 : 		}
; 1336 : 
; 1337 : 	template<class _Iter>
; 1338 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1339 : 			iterator>::type
; 1340 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1341 : 		{	// insert [_First, _Last) at _Where
; 1342 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1343 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1344 : 		return (begin() + _Off);
; 1345 : 		}
; 1346 : 
; 1347 : 	template<class _Iter>
; 1348 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1349 : 			input_iterator_tag)
; 1350 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1351 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1352 : 
; 1353 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1354 : 		if (size() < _Off)
; 1355 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1356 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1357 : 
; 1358 : 		if (_First != _Last)
; 1359 : 			{	// worth doing, gather at end and rotate into place
; 1360 : 			size_type _Oldsize = size();
; 1361 : 
; 1362 : 			_TRY_BEGIN
; 1363 : 			for (; _First != _Last; ++_First)
; 1364 : 				push_back(*_First);	// append
; 1365 : 
; 1366 : 			_CATCH_ALL
; 1367 : 			erase(begin() + _Oldsize, end());
; 1368 : 			_RERAISE;
; 1369 : 			_CATCH_END
; 1370 : 
; 1371 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1372 : 			}
; 1373 : 		}
; 1374 : 
; 1375 : 	template<class _Iter>
; 1376 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1377 : 			forward_iterator_tag)
; 1378 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_VICONT(_Where) != this
; 1381 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1382 : 			|| this->_Mylast < _VIPTR(_Where))
; 1383 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1384 : 		_DEBUG_RANGE(_First, _Last);
; 1385 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1386 : 
; 1387 : 		size_type _Count = 0;
; 1388 : 		_Distance(_First, _Last, _Count);
; 1389 : 
; 1390 : 		if (_Count == 0)
; 1391 : 			;
; 1392 : 		else if (_Unused_capacity() < _Count)
; 1393 : 			{	// not enough room, reallocate
; 1394 : 			if (max_size() - size() < _Count)
; 1395 : 				_Xlen();	// result too long
; 1396 : 
; 1397 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1398 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1399 : 			pointer _Ptr = _Newvec;
; 1400 : 
; 1401 : 			_TRY_BEGIN
; 1402 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1403 : 				_Newvec);	// copy prefix
; 1404 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1405 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1406 : 				_Ptr);	// copy suffix
; 1407 : 			_CATCH_ALL
; 1408 : 			_Destroy(_Newvec, _Ptr);
; 1409 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1410 : 			_RERAISE;
; 1411 : 			_CATCH_END
; 1412 : 
; 1413 : 			_Count += size();
; 1414 : 			if (this->_Myfirst != pointer())
; 1415 : 				{	// destroy and deallocate old array
; 1416 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1417 : 				this->_Getal().deallocate(this->_Myfirst,
; 1418 : 					this->_Myend - this->_Myfirst);
; 1419 : 				}
; 1420 : 
; 1421 : 			this->_Orphan_all();
; 1422 : 			this->_Myend = _Newvec + _Capacity;
; 1423 : 			this->_Mylast = _Newvec + _Count;
; 1424 : 			this->_Myfirst = _Newvec;
; 1425 : 			}
; 1426 : 		else
; 1427 : 			{	// new stuff fits, append and rotate into place
; 1428 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1429 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1430 : 				this->_Mylast + _Count);
; 1431 : 			this->_Mylast += _Count;
; 1432 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1433 : 			}
; 1434 : 		}
; 1435 : 
; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 	iterator erase(const_iterator _Where)
; 1438 : 		{	// erase element at where
; 1439 : 		if (_VICONT(_Where) != this
; 1440 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1441 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1442 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1443 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1444 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1445 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1446 : 		--this->_Mylast;
; 1447 : 		return (_Make_iter(_Where));
; 1448 : 		}
; 1449 : 
; 1450 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 	iterator erase(const_iterator _Where)
; 1452 : 		{	// erase element at where
; 1453 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1454 : 			_VIPTR(_Where));
; 1455 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1456 : 		--this->_Mylast;
; 1457 : 		return (_Make_iter(_Where));
; 1458 : 		}
; 1459 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1460 : 
; 1461 : 	iterator erase(const_iterator _First_arg,
; 1462 : 		const_iterator _Last_arg)
; 1463 : 		{	// erase [_First, _Last)
; 1464 : 		if (_First_arg == begin() && _Last_arg == end())
; 1465 : 			clear();
; 1466 : 		else if (_First_arg != _Last_arg)
; 1467 : 			{	// clear partial
; 1468 : 			iterator _First = _Make_iter(_First_arg);
; 1469 : 			iterator _Last = _Make_iter(_Last_arg);
; 1470 : 
; 1471 : 			if (_First != _Last)
; 1472 : 				{	// worth doing, copy down over hole
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 				if (_Last < _First || _VICONT(_First) != this
; 1475 : 					|| _VIPTR(_First) < this->_Myfirst
; 1476 : 					|| this->_Mylast < _VIPTR(_Last))
; 1477 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1478 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1479 : 					_VIPTR(_First));
; 1480 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1484 : 					_VIPTR(_First));
; 1485 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1486 : 
; 1487 : 				_Destroy(_Ptr, this->_Mylast);
; 1488 : 				this->_Mylast = _Ptr;
; 1489 : 				}
; 1490 : 			}
; 1491 : 		return (_Make_iter(_First_arg));
; 1492 : 		}
; 1493 : 
; 1494 : 	void _Pop_back_n(size_type _Count)
; 1495 : 		{	// erase _Count elements at end
; 1496 : 		pointer _Ptr = this->_Mylast - _Count;
; 1497 : 
; 1498 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1499 : 		_Orphan_range(_Ptr, this->_Mylast);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 
; 1502 : 		_Destroy(_Ptr, this->_Mylast);
; 1503 : 		this->_Mylast = _Ptr;
; 1504 : 		}
; 1505 : 
; 1506 : 	void clear() _NOEXCEPT
; 1507 : 		{	// erase all
; 1508 : 		this->_Orphan_all();
; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1510 : 		this->_Mylast = this->_Myfirst;
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		{	// exchange contents with _Right
; 1515 : 		if (this == &_Right)
; 1516 : 			;	// same object, do nothing
; 1517 : 		else if (this->_Getal() == _Right._Getal())
; 1518 : 			{	// same allocator, swap control information
; 1519 : 			this->_Swap_all(_Right);
; 1520 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1521 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1522 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1529 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1530 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1531 : 			}
; 1532 : 
; 1533 : 		else
; 1534 : 			{	// containers are incompatible
; 1535 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1536 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1537 : 
; 1538 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1539 : 			_XSTD terminate();
; 1540 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1541 : 			}
; 1542 : 		}
; 1543 : 
; 1544 : protected:
; 1545 : 	bool _Buy(size_type _Capacity)
; 1546 : 		{	// allocate array with _Capacity elements
; 1547 : 		this->_Myfirst = pointer();
; 1548 : 		this->_Mylast = pointer();
; 1549 : 		this->_Myend = pointer();
; 1550 : 
; 1551 : 		if (_Capacity == 0)
; 1552 : 			return (false);
; 1553 : 		else if (max_size() < _Capacity)
; 1554 : 			_Xlen();	// result too long
; 1555 : 		else
; 1556 : 			{	// nonempty array, allocate storage
; 1557 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1558 : 			this->_Mylast = this->_Myfirst;
; 1559 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1560 : 			}
; 1561 : 		return (true);
; 1562 : 		}
; 1563 : 
; 1564 : 	void _Destroy(pointer _First, pointer _Last)
; 1565 : 		{	// destroy [_First, _Last) using allocator
; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}
; 1569 : 
; 1570 : 	size_type _Grow_to(size_type _Count) const
; 1571 : 		{	// grow by 50% or at least to _Count
; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00033	8b c2		 mov	 eax, edx
  00035	d1 e8		 shr	 eax, 1
  00037	2b d8		 sub	 ebx, eax
  00039	3b da		 cmp	 ebx, edx
  0003b	5b		 pop	 ebx
  0003c	73 12		 jae	 SHORT $LN27@Reserve
  0003e	33 d2		 xor	 edx, edx

; 1576 : 		if (_Capacity < _Count)

  00040	3b d6		 cmp	 edx, esi
  00042	5f		 pop	 edi
  00043	0f 42 d6	 cmovb	 edx, esi
  00046	5e		 pop	 esi

; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));

  00047	89 55 08	 mov	 DWORD PTR __Count$[ebp], edx

; 1618 : 			}
; 1619 : 		}

  0004a	5d		 pop	 ebp

; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));

  0004b	e9 00 00 00 00	 jmp	 ?_Reallocate@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IAEXI@Z ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::_Reallocate
$LN27@Reserve:

; 1149 : 		}
; 1150 : 
; 1151 : 	size_type max_size() const _NOEXCEPT
; 1152 : 		{	// return maximum possible length of sequence
; 1153 : 		return (this->_Getal().max_size());
; 1154 : 		}
; 1155 : 
; 1156 : 	bool empty() const _NOEXCEPT
; 1157 : 		{	// test if sequence is empty
; 1158 : 		return (this->_Myfirst == this->_Mylast);
; 1159 : 		}
; 1160 : 
; 1161 : 	_Alloc get_allocator() const _NOEXCEPT
; 1162 : 		{	// return allocator object for values
; 1163 : 		return (this->_Getal());
; 1164 : 		}
; 1165 : 
; 1166 : 	const_reference at(size_type _Pos) const
; 1167 : 		{	// subscript nonmutable sequence with checking
; 1168 : 		if (size() <= _Pos)
; 1169 : 			_Xran();
; 1170 : 		return (*(this->_Myfirst + _Pos));
; 1171 : 		}
; 1172 : 
; 1173 : 	reference at(size_type _Pos)
; 1174 : 		{	// subscript mutable sequence with checking
; 1175 : 		if (size() <= _Pos)
; 1176 : 			_Xran();
; 1177 : 		return (*(this->_Myfirst + _Pos));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reference operator[](size_type _Pos) const
; 1181 : 		{	// subscript nonmutable sequence
; 1182 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1183 : 		if (size() <= _Pos)
; 1184 : 			{	// report error
; 1185 : 			_DEBUG_ERROR("vector subscript out of range");
; 1186 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1187 : 			}
; 1188 : 
; 1189 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1190 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1191 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1192 : 
; 1193 : 		return (*(this->_Myfirst + _Pos));
; 1194 : 		}
; 1195 : 
; 1196 : 	reference operator[](size_type _Pos)
; 1197 : 		{	// subscript mutable sequence
; 1198 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1199 : 		if (size() <= _Pos)
; 1200 : 			{	// report error
; 1201 : 			_DEBUG_ERROR("vector subscript out of range");
; 1202 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1203 : 			}
; 1204 : 
; 1205 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1206 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1207 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1208 : 
; 1209 : 		return (*(this->_Myfirst + _Pos));
; 1210 : 		}
; 1211 : 
; 1212 : 	pointer data() _NOEXCEPT
; 1213 : 		{	// return address of first element
; 1214 : 		return (this->_Myfirst);
; 1215 : 		}
; 1216 : 
; 1217 : 	const_pointer data() const _NOEXCEPT
; 1218 : 		{	// return address of first element
; 1219 : 		return (this->_Myfirst);
; 1220 : 		}
; 1221 : 
; 1222 : 	reference front()
; 1223 : 		{	// return first element of mutable sequence
; 1224 : 		return (*begin());
; 1225 : 		}
; 1226 : 
; 1227 : 	const_reference front() const
; 1228 : 		{	// return first element of nonmutable sequence
; 1229 : 		return (*begin());
; 1230 : 		}
; 1231 : 
; 1232 : 	reference back()
; 1233 : 		{	// return last element of mutable sequence
; 1234 : 		return (*(end() - 1));
; 1235 : 		}
; 1236 : 
; 1237 : 	const_reference back() const
; 1238 : 		{	// return last element of nonmutable sequence
; 1239 : 		return (*(end() - 1));
; 1240 : 		}
; 1241 : 
; 1242 : 	void push_back(const value_type& _Val)
; 1243 : 		{	// insert element at end
; 1244 : 		if (_Inside(_STD addressof(_Val)))
; 1245 : 			{	// push back an element
; 1246 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1247 : 			if (this->_Mylast == this->_Myend)
; 1248 : 				_Reserve(1);
; 1249 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1250 : 			this->_Getal().construct(this->_Mylast,
; 1251 : 				this->_Myfirst[_Idx]);
; 1252 : 			++this->_Mylast;
; 1253 : 			}
; 1254 : 		else
; 1255 : 			{	// push back a non-element
; 1256 : 			if (this->_Mylast == this->_Myend)
; 1257 : 				_Reserve(1);
; 1258 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1259 : 			this->_Getal().construct(this->_Mylast,
; 1260 : 				_Val);
; 1261 : 			++this->_Mylast;
; 1262 : 			}
; 1263 : 		}
; 1264 : 
; 1265 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1266 : 	void pop_back()
; 1267 : 		{	// erase element at end
; 1268 : 		if (empty())
; 1269 : 			_DEBUG_ERROR("vector empty before pop");
; 1270 : 		else
; 1271 : 			{	// erase last element
; 1272 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1273 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1274 : 			--this->_Mylast;
; 1275 : 			}
; 1276 : 		}
; 1277 : 
; 1278 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1279 : 	void pop_back()
; 1280 : 		{	// erase element at end
; 1281 : 		this->_Getal().destroy(this->_Mylast - 1);
; 1282 : 		--this->_Mylast;
; 1283 : 		}
; 1284 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1285 : 
; 1286 : 	template<class _Iter>
; 1287 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1288 : 			void>::type
; 1289 : 		assign(_Iter _First, _Iter _Last)
; 1290 : 		{	// assign [_First, _Last)
; 1291 : 		clear();
; 1292 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1293 : 		}
; 1294 : 
; 1295 : 	template<class _Iter>
; 1296 : 		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
; 1297 : 		{	// assign [_First, _Last), input iterators
; 1298 : 		for (; _First != _Last; ++_First)
; 1299 : 			emplace_back(*_First);
; 1300 : 		}
; 1301 : 
; 1302 : 	template<class _Iter>
; 1303 : 		void _Assign(_Iter _First, _Iter _Last, forward_iterator_tag)
; 1304 : 		{	// assign [_First, _Last), forward iterators
; 1305 : 		if (_First == _Last)
; 1306 : 			return;	// nothing to do
; 1307 : 
; 1308 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1309 : 
; 1310 : 		if (capacity() < _Newsize)
; 1311 : 			{	// need more room, try to get it
; 1312 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1313 : 			_Tidy();
; 1314 : 			_Buy(_Newcapacity);
; 1315 : 			}
; 1316 : 
; 1317 : 		this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
; 1318 : 		}
; 1319 : 
; 1320 : 	void assign(size_type _Count, const value_type& _Val)
; 1321 : 		{	// assign _Count * _Val
; 1322 : 		clear();
; 1323 : 		insert(begin(), _Count, _Val);
; 1324 : 		}
; 1325 : 
; 1326 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1327 : 		{	// insert _Val at _Where
; 1328 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1329 : 		}
; 1330 : 
; 1331 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1332 : 		const _Ty& _Val)
; 1333 : 		{	// insert _Count * _Val at _Where
; 1334 : 		return (_Insert_n(_Where, _Count, _Val));
; 1335 : 		}
; 1336 : 
; 1337 : 	template<class _Iter>
; 1338 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1339 : 			iterator>::type
; 1340 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1341 : 		{	// insert [_First, _Last) at _Where
; 1342 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1343 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1344 : 		return (begin() + _Off);
; 1345 : 		}
; 1346 : 
; 1347 : 	template<class _Iter>
; 1348 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1349 : 			input_iterator_tag)
; 1350 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1351 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1352 : 
; 1353 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1354 : 		if (size() < _Off)
; 1355 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1356 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1357 : 
; 1358 : 		if (_First != _Last)
; 1359 : 			{	// worth doing, gather at end and rotate into place
; 1360 : 			size_type _Oldsize = size();
; 1361 : 
; 1362 : 			_TRY_BEGIN
; 1363 : 			for (; _First != _Last; ++_First)
; 1364 : 				push_back(*_First);	// append
; 1365 : 
; 1366 : 			_CATCH_ALL
; 1367 : 			erase(begin() + _Oldsize, end());
; 1368 : 			_RERAISE;
; 1369 : 			_CATCH_END
; 1370 : 
; 1371 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1372 : 			}
; 1373 : 		}
; 1374 : 
; 1375 : 	template<class _Iter>
; 1376 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1377 : 			forward_iterator_tag)
; 1378 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_VICONT(_Where) != this
; 1381 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1382 : 			|| this->_Mylast < _VIPTR(_Where))
; 1383 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1384 : 		_DEBUG_RANGE(_First, _Last);
; 1385 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1386 : 
; 1387 : 		size_type _Count = 0;
; 1388 : 		_Distance(_First, _Last, _Count);
; 1389 : 
; 1390 : 		if (_Count == 0)
; 1391 : 			;
; 1392 : 		else if (_Unused_capacity() < _Count)
; 1393 : 			{	// not enough room, reallocate
; 1394 : 			if (max_size() - size() < _Count)
; 1395 : 				_Xlen();	// result too long
; 1396 : 
; 1397 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1398 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1399 : 			pointer _Ptr = _Newvec;
; 1400 : 
; 1401 : 			_TRY_BEGIN
; 1402 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1403 : 				_Newvec);	// copy prefix
; 1404 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1405 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1406 : 				_Ptr);	// copy suffix
; 1407 : 			_CATCH_ALL
; 1408 : 			_Destroy(_Newvec, _Ptr);
; 1409 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1410 : 			_RERAISE;
; 1411 : 			_CATCH_END
; 1412 : 
; 1413 : 			_Count += size();
; 1414 : 			if (this->_Myfirst != pointer())
; 1415 : 				{	// destroy and deallocate old array
; 1416 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1417 : 				this->_Getal().deallocate(this->_Myfirst,
; 1418 : 					this->_Myend - this->_Myfirst);
; 1419 : 				}
; 1420 : 
; 1421 : 			this->_Orphan_all();
; 1422 : 			this->_Myend = _Newvec + _Capacity;
; 1423 : 			this->_Mylast = _Newvec + _Count;
; 1424 : 			this->_Myfirst = _Newvec;
; 1425 : 			}
; 1426 : 		else
; 1427 : 			{	// new stuff fits, append and rotate into place
; 1428 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1429 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1430 : 				this->_Mylast + _Count);
; 1431 : 			this->_Mylast += _Count;
; 1432 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1433 : 			}
; 1434 : 		}
; 1435 : 
; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 	iterator erase(const_iterator _Where)
; 1438 : 		{	// erase element at where
; 1439 : 		if (_VICONT(_Where) != this
; 1440 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1441 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1442 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1443 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1444 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1445 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1446 : 		--this->_Mylast;
; 1447 : 		return (_Make_iter(_Where));
; 1448 : 		}
; 1449 : 
; 1450 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 	iterator erase(const_iterator _Where)
; 1452 : 		{	// erase element at where
; 1453 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1454 : 			_VIPTR(_Where));
; 1455 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1456 : 		--this->_Mylast;
; 1457 : 		return (_Make_iter(_Where));
; 1458 : 		}
; 1459 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1460 : 
; 1461 : 	iterator erase(const_iterator _First_arg,
; 1462 : 		const_iterator _Last_arg)
; 1463 : 		{	// erase [_First, _Last)
; 1464 : 		if (_First_arg == begin() && _Last_arg == end())
; 1465 : 			clear();
; 1466 : 		else if (_First_arg != _Last_arg)
; 1467 : 			{	// clear partial
; 1468 : 			iterator _First = _Make_iter(_First_arg);
; 1469 : 			iterator _Last = _Make_iter(_Last_arg);
; 1470 : 
; 1471 : 			if (_First != _Last)
; 1472 : 				{	// worth doing, copy down over hole
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 				if (_Last < _First || _VICONT(_First) != this
; 1475 : 					|| _VIPTR(_First) < this->_Myfirst
; 1476 : 					|| this->_Mylast < _VIPTR(_Last))
; 1477 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1478 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1479 : 					_VIPTR(_First));
; 1480 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1484 : 					_VIPTR(_First));
; 1485 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1486 : 
; 1487 : 				_Destroy(_Ptr, this->_Mylast);
; 1488 : 				this->_Mylast = _Ptr;
; 1489 : 				}
; 1490 : 			}
; 1491 : 		return (_Make_iter(_First_arg));
; 1492 : 		}
; 1493 : 
; 1494 : 	void _Pop_back_n(size_type _Count)
; 1495 : 		{	// erase _Count elements at end
; 1496 : 		pointer _Ptr = this->_Mylast - _Count;
; 1497 : 
; 1498 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1499 : 		_Orphan_range(_Ptr, this->_Mylast);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 
; 1502 : 		_Destroy(_Ptr, this->_Mylast);
; 1503 : 		this->_Mylast = _Ptr;
; 1504 : 		}
; 1505 : 
; 1506 : 	void clear() _NOEXCEPT
; 1507 : 		{	// erase all
; 1508 : 		this->_Orphan_all();
; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1510 : 		this->_Mylast = this->_Myfirst;
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		{	// exchange contents with _Right
; 1515 : 		if (this == &_Right)
; 1516 : 			;	// same object, do nothing
; 1517 : 		else if (this->_Getal() == _Right._Getal())
; 1518 : 			{	// same allocator, swap control information
; 1519 : 			this->_Swap_all(_Right);
; 1520 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1521 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1522 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1529 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1530 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1531 : 			}
; 1532 : 
; 1533 : 		else
; 1534 : 			{	// containers are incompatible
; 1535 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1536 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1537 : 
; 1538 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1539 : 			_XSTD terminate();
; 1540 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1541 : 			}
; 1542 : 		}
; 1543 : 
; 1544 : protected:
; 1545 : 	bool _Buy(size_type _Capacity)
; 1546 : 		{	// allocate array with _Capacity elements
; 1547 : 		this->_Myfirst = pointer();
; 1548 : 		this->_Mylast = pointer();
; 1549 : 		this->_Myend = pointer();
; 1550 : 
; 1551 : 		if (_Capacity == 0)
; 1552 : 			return (false);
; 1553 : 		else if (max_size() < _Capacity)
; 1554 : 			_Xlen();	// result too long
; 1555 : 		else
; 1556 : 			{	// nonempty array, allocate storage
; 1557 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1558 : 			this->_Mylast = this->_Myfirst;
; 1559 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1560 : 			}
; 1561 : 		return (true);
; 1562 : 		}
; 1563 : 
; 1564 : 	void _Destroy(pointer _First, pointer _Last)
; 1565 : 		{	// destroy [_First, _Last) using allocator
; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}
; 1569 : 
; 1570 : 	size_type _Grow_to(size_type _Count) const
; 1571 : 		{	// grow by 50% or at least to _Count
; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00050	03 d0		 add	 edx, eax

; 1576 : 		if (_Capacity < _Count)

  00052	3b d6		 cmp	 edx, esi
  00054	5f		 pop	 edi
  00055	0f 42 d6	 cmovb	 edx, esi
  00058	5e		 pop	 esi

; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));

  00059	89 55 08	 mov	 DWORD PTR __Count$[ebp], edx

; 1618 : 			}
; 1619 : 		}

  0005c	5d		 pop	 ebp

; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));

  0005d	e9 00 00 00 00	 jmp	 ?_Reallocate@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IAEXI@Z ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::_Reallocate
$LN2@Reserve:
  00062	5f		 pop	 edi
  00063	5e		 pop	 esi

; 1618 : 			}
; 1619 : 		}

  00064	5d		 pop	 ebp
  00065	c2 04 00	 ret	 4
$LN43@Reserve:

; 1620 : 
; 1621 : 	void _Tidy()
; 1622 : 		{	// free all storage
; 1623 : 		if (this->_Myfirst != pointer())
; 1624 : 			{	// something to free, destroy and deallocate it
; 1625 : 			this->_Orphan_all();
; 1626 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1627 : 			this->_Getal().deallocate(this->_Myfirst,
; 1628 : 				this->_Myend - this->_Myfirst);
; 1629 : 			this->_Myfirst = pointer();
; 1630 : 			this->_Mylast = pointer();
; 1631 : 			this->_Myend = pointer();
; 1632 : 			}
; 1633 : 		}
; 1634 : 
; 1635 : 	template<class _Iter>
; 1636 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1637 : 		{	// copy initializing [_First, _Last), using allocator
; 1638 : 		_Alty _Alval(this->_Getal());
; 1639 : 		return (_Uninitialized_copy(_First, _Last,
; 1640 : 			_Ptr, _Alval));
; 1641 : 		}
; 1642 : 
; 1643 : 	template<class _Iter>
; 1644 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1645 : 		{	// move initializing [_First, _Last), using allocator
; 1646 : 		_Alty _Alval(this->_Getal());
; 1647 : 		return (_Uninitialized_move(_First, _Last,
; 1648 : 			_Ptr, _Alval));
; 1649 : 		}
; 1650 : 
; 1651 : 	iterator _Insert_n(const_iterator _Where,
; 1652 : 		size_type _Count, const value_type& _Val)
; 1653 : 		{	// insert _Count * _Val at _Where
; 1654 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1655 : 		if (_VICONT(_Where) != this
; 1656 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1657 : 			|| this->_Mylast < _VIPTR(_Where))
; 1658 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1659 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1660 : 
; 1661 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1662 : 		if (_Count == 0)
; 1663 : 			;
; 1664 : 		else if (_Unused_capacity() < _Count)
; 1665 : 			{	// not enough room, reallocate
; 1666 : 			if (max_size() - size() < _Count)
; 1667 : 				_Xlen();	// result too long
; 1668 : 
; 1669 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1670 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1671 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst;
; 1672 : 			int _Ncopied = 0;
; 1673 : 
; 1674 : 			_TRY_BEGIN
; 1675 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1676 : 				_STD addressof(_Val));	// add new stuff
; 1677 : 			++_Ncopied;
; 1678 : 			_Umove(this->_Myfirst, _VIPTR(_Where),
; 1679 : 				_Newvec);	// copy prefix
; 1680 : 			++_Ncopied;
; 1681 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1682 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1683 : 			_CATCH_ALL
; 1684 : 			if (1 < _Ncopied)
; 1685 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1686 : 			if (0 < _Ncopied)
; 1687 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1688 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1689 : 			_RERAISE;
; 1690 : 			_CATCH_END
; 1691 : 
; 1692 : 			_Count += size();
; 1693 : 			if (this->_Myfirst != pointer())
; 1694 : 				{	// destroy and deallocate old array
; 1695 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1696 : 				this->_Getal().deallocate(this->_Myfirst,
; 1697 : 					this->_Myend - this->_Myfirst);
; 1698 : 				}
; 1699 : 
; 1700 : 			this->_Orphan_all();
; 1701 : 			this->_Myend = _Newvec + _Capacity;
; 1702 : 			this->_Mylast = _Newvec + _Count;
; 1703 : 			this->_Myfirst = _Newvec;
; 1704 : 			}
; 1705 : 		else if ((size_type)(this->_Mylast - _VIPTR(_Where))
; 1706 : 			< _Count)
; 1707 : 			{	// new stuff spills off end
; 1708 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1709 : 
; 1710 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1711 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1712 : 
; 1713 : 			_TRY_BEGIN
; 1714 : 			_Ufill(this->_Mylast,
; 1715 : 				_Count - (this->_Mylast - _VIPTR(_Where)),
; 1716 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1717 : 			_CATCH_ALL
; 1718 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1719 : 				this->_Mylast + _Count);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			this->_Mylast += _Count;
; 1724 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1725 : 			_STD fill(_VIPTR(_Where), this->_Mylast - _Count,
; 1726 : 				_Tmp);	// insert up to old end
; 1727 : 			}
; 1728 : 		else
; 1729 : 			{	// new stuff can all be assigned
; 1730 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1731 : 
; 1732 : 			pointer _Oldend = this->_Mylast;
; 1733 : 			this->_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1734 : 				this->_Mylast);	// copy suffix
; 1735 : 
; 1736 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1737 : 			_Copy_backward(_VIPTR(_Where), _Oldend - _Count,
; 1738 : 				_Oldend);	// copy hole
; 1739 : 			_STD fill(_VIPTR(_Where),
; 1740 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1741 : 			}
; 1742 : 		return (begin() + _Off);
; 1743 : 		}
; 1744 : 
; 1745 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1746 : 		{	// copy initializing _Count * _Val, using allocator
; 1747 : 		_Alty _Alval(this->_Getal());
; 1748 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, _Alval);
; 1749 : 		return (_Ptr + _Count);
; 1750 : 		}
; 1751 : 
; 1752 : 	__declspec(noreturn) void _Xlen() const
; 1753 : 		{	// report a length_error
; 1754 : 		_Xlength_error("vector<T> too long");

  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0006d	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN45@Reserve:
$LN42@Reserve:
  00072	cc		 int	 3
?_Reserve@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$1$ = 8						; size = 4
__Count$ = 8						; size = 4
?_Reallocate@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IAEXI@Z PROC ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::_Reallocate, COMDAT
; _this$ = ecx

; 1587 : 		{	// move to array of exactly _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; File a:\vs\vc\include\xmemory0

; 25   : 	if (_Count == 0)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00007	56		 push	 esi

; 23   : 	void *_Ptr = 0;

  00008	33 f6		 xor	 esi, esi
  0000a	57		 push	 edi
; File a:\vs\vc\include\vector

; 1587 : 		{	// move to array of exactly _Count elements

  0000b	8b f9		 mov	 edi, ecx
; File a:\vs\vc\include\xmemory0

; 25   : 	if (_Count == 0)

  0000d	85 db		 test	 ebx, ebx
  0000f	74 1e		 je	 SHORT $LN16@Reallocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00011	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  00017	77 5d		 ja	 SHORT $LN61@Reallocate
  00019	8d 04 9d 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*4]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00026	8b f0		 mov	 esi, eax
  00028	83 c4 04	 add	 esp, 4
  0002b	85 f6		 test	 esi, esi
  0002d	74 47		 je	 SHORT $LN61@Reallocate
$LN16@Reallocate:
; File a:\vs\vc\include\vector

; 1591 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  0002f	8b 0f		 mov	 ecx, DWORD PTR [edi]
; File a:\vs\vc\include\xmemory

; 472  : 	size_t _Count = (size_t)(_Last - _First);

  00031	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00034	2b c1		 sub	 eax, ecx

; 474  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  00036	83 e0 fc	 and	 eax, -4			; fffffffcH
  00039	50		 push	 eax
  0003a	51		 push	 ecx
  0003b	56		 push	 esi
  0003c	e8 00 00 00 00	 call	 _memmove
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00041	8b 0f		 mov	 ecx, DWORD PTR [edi]
; File a:\vs\vc\include\xmemory

; 474  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  00043	83 c4 0c	 add	 esp, 12			; 0000000cH
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00046	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00049	2b c1		 sub	 eax, ecx
  0004b	c1 f8 02	 sar	 eax, 2
  0004e	89 45 08	 mov	 DWORD PTR __Size$1$[ebp], eax

; 1592 : 		_CATCH_ALL
; 1593 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1594 : 		_RERAISE;
; 1595 : 		_CATCH_END
; 1596 : 
; 1597 : 		size_type _Size = size();
; 1598 : 		if (this->_Myfirst != pointer())

  00051	85 c9		 test	 ecx, ecx
  00053	74 09		 je	 SHORT $LN56@Reallocate
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00055	51		 push	 ecx
  00056	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0005b	83 c4 04	 add	 esp, 4
$LN56@Reallocate:
; File a:\vs\vc\include\vector

; 1606 : 		this->_Myend = _Ptr + _Count;

  0005e	8d 04 9e	 lea	 eax, DWORD PTR [esi+ebx*4]

; 1607 : 		this->_Mylast = _Ptr + _Size;
; 1608 : 		this->_Myfirst = _Ptr;

  00061	89 37		 mov	 DWORD PTR [edi], esi
  00063	89 47 08	 mov	 DWORD PTR [edi+8], eax
  00066	8b 45 08	 mov	 eax, DWORD PTR __Size$1$[ebp]
  00069	8d 04 86	 lea	 eax, DWORD PTR [esi+eax*4]
  0006c	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx

; 1609 : 		}

  00072	5d		 pop	 ebp
  00073	c2 04 00	 ret	 4
$LN61@Reallocate:
; File a:\vs\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  00076	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN63@Reallocate:
$LN60@Reallocate:
  0007b	cc		 int	 3
?_Reallocate@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::_Reallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Inside@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IBE_NPBQAVCDungeonModelInstance@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IBE_NPBQAVCDungeonModelInstance@@@Z PROC ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::_Inside, COMDAT
; _this$ = ecx

; 1582 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1583 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0a		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 06		 ja	 SHORT $LN3@Inside
  0000f	b0 01		 mov	 al, 1

; 1584 : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
$LN3@Inside:

; 1583 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00015	32 c0		 xor	 al, al

; 1584 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?_Inside@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IBE_NPBQAVCDungeonModelInstance@@@Z ENDP ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IBEII@Z PROC ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::_Grow_to, COMDAT
; _this$ = ecx

; 1571 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1010 : 		return (this->_Myend - this->_Myfirst);

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]

; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00006	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 1010 : 		return (this->_Myend - this->_Myfirst);

  0000b	2b 11		 sub	 edx, DWORD PTR [ecx]
  0000d	c1 fa 02	 sar	 edx, 2

; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00010	8b ca		 mov	 ecx, edx
  00012	d1 e9		 shr	 ecx, 1
  00014	2b c1		 sub	 eax, ecx
  00016	3b c2		 cmp	 eax, edx
  00018	73 0f		 jae	 SHORT $LN4@Grow_to
  0001a	33 d2		 xor	 edx, edx

; 1576 : 		if (_Capacity < _Count)

  0001c	3b 55 08	 cmp	 edx, DWORD PTR __Count$[ebp]
  0001f	0f 42 55 08	 cmovb	 edx, DWORD PTR __Count$[ebp]

; 1577 : 			_Capacity = _Count;
; 1578 : 		return (_Capacity);

  00023	8b c2		 mov	 eax, edx

; 1579 : 		}

  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
$LN4@Grow_to:

; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00029	03 d1		 add	 edx, ecx

; 1576 : 		if (_Capacity < _Count)

  0002b	3b 55 08	 cmp	 edx, DWORD PTR __Count$[ebp]
  0002e	0f 42 55 08	 cmovb	 edx, DWORD PTR __Count$[ebp]

; 1577 : 			_Capacity = _Count;
; 1578 : 		return (_Capacity);

  00032	8b c2		 mov	 eax, edx

; 1579 : 		}

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
?_Grow_to@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IBEII@Z ENDP ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Destroy@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IAEXPAPAVCDungeonModelInstance@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IAEXPAPAVCDungeonModelInstance@@0@Z PROC ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::_Destroy, COMDAT
; _this$ = ecx

; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IAEXPAPAVCDungeonModelInstance@@0@Z ENDP ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?clear@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAEXXZ PROC ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::clear, COMDAT
; _this$ = ecx

; 1508 : 		this->_Orphan_all();
; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1510 : 		this->_Mylast = this->_Myfirst;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1511 : 		}

  00005	c3		 ret	 0
?clear@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAEXXZ ENDP ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
;	COMDAT ?push_back@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAEXABQAVCDungeonModelInstance@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAEXABQAVCDungeonModelInstance@@@Z PROC ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::push_back, COMDAT
; _this$ = ecx

; 1243 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 1264 : 
; 1265 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1266 : 	void pop_back()
; 1267 : 		{	// erase element at end
; 1268 : 		if (empty())
; 1269 : 			_DEBUG_ERROR("vector empty before pop");
; 1270 : 		else
; 1271 : 			{	// erase last element
; 1272 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1273 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1274 : 			--this->_Mylast;
; 1275 : 			}
; 1276 : 		}
; 1277 : 
; 1278 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1279 : 	void pop_back()
; 1280 : 		{	// erase element at end
; 1281 : 		this->_Getal().destroy(this->_Mylast - 1);
; 1282 : 		--this->_Mylast;
; 1283 : 		}
; 1284 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1285 : 
; 1286 : 	template<class _Iter>
; 1287 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1288 : 			void>::type
; 1289 : 		assign(_Iter _First, _Iter _Last)
; 1290 : 		{	// assign [_First, _Last)
; 1291 : 		clear();
; 1292 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1293 : 		}
; 1294 : 
; 1295 : 	template<class _Iter>
; 1296 : 		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
; 1297 : 		{	// assign [_First, _Last), input iterators
; 1298 : 		for (; _First != _Last; ++_First)
; 1299 : 			emplace_back(*_First);
; 1300 : 		}
; 1301 : 
; 1302 : 	template<class _Iter>
; 1303 : 		void _Assign(_Iter _First, _Iter _Last, forward_iterator_tag)
; 1304 : 		{	// assign [_First, _Last), forward iterators
; 1305 : 		if (_First == _Last)
; 1306 : 			return;	// nothing to do
; 1307 : 
; 1308 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1309 : 
; 1310 : 		if (capacity() < _Newsize)
; 1311 : 			{	// need more room, try to get it
; 1312 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1313 : 			_Tidy();
; 1314 : 			_Buy(_Newcapacity);
; 1315 : 			}
; 1316 : 
; 1317 : 		this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
; 1318 : 		}
; 1319 : 
; 1320 : 	void assign(size_type _Count, const value_type& _Val)
; 1321 : 		{	// assign _Count * _Val
; 1322 : 		clear();
; 1323 : 		insert(begin(), _Count, _Val);
; 1324 : 		}
; 1325 : 
; 1326 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1327 : 		{	// insert _Val at _Where
; 1328 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1329 : 		}
; 1330 : 
; 1331 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1332 : 		const _Ty& _Val)
; 1333 : 		{	// insert _Count * _Val at _Where
; 1334 : 		return (_Insert_n(_Where, _Count, _Val));
; 1335 : 		}
; 1336 : 
; 1337 : 	template<class _Iter>
; 1338 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1339 : 			iterator>::type
; 1340 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1341 : 		{	// insert [_First, _Last) at _Where
; 1342 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1343 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1344 : 		return (begin() + _Off);
; 1345 : 		}
; 1346 : 
; 1347 : 	template<class _Iter>
; 1348 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1349 : 			input_iterator_tag)
; 1350 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1351 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1352 : 
; 1353 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1354 : 		if (size() < _Off)
; 1355 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1356 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1357 : 
; 1358 : 		if (_First != _Last)
; 1359 : 			{	// worth doing, gather at end and rotate into place
; 1360 : 			size_type _Oldsize = size();
; 1361 : 
; 1362 : 			_TRY_BEGIN
; 1363 : 			for (; _First != _Last; ++_First)
; 1364 : 				push_back(*_First);	// append
; 1365 : 
; 1366 : 			_CATCH_ALL
; 1367 : 			erase(begin() + _Oldsize, end());
; 1368 : 			_RERAISE;
; 1369 : 			_CATCH_END
; 1370 : 
; 1371 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1372 : 			}
; 1373 : 		}
; 1374 : 
; 1375 : 	template<class _Iter>
; 1376 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1377 : 			forward_iterator_tag)
; 1378 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_VICONT(_Where) != this
; 1381 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1382 : 			|| this->_Mylast < _VIPTR(_Where))
; 1383 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1384 : 		_DEBUG_RANGE(_First, _Last);
; 1385 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1386 : 
; 1387 : 		size_type _Count = 0;
; 1388 : 		_Distance(_First, _Last, _Count);
; 1389 : 
; 1390 : 		if (_Count == 0)
; 1391 : 			;
; 1392 : 		else if (_Unused_capacity() < _Count)
; 1393 : 			{	// not enough room, reallocate
; 1394 : 			if (max_size() - size() < _Count)
; 1395 : 				_Xlen();	// result too long
; 1396 : 
; 1397 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1398 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1399 : 			pointer _Ptr = _Newvec;
; 1400 : 
; 1401 : 			_TRY_BEGIN
; 1402 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1403 : 				_Newvec);	// copy prefix
; 1404 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1405 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1406 : 				_Ptr);	// copy suffix
; 1407 : 			_CATCH_ALL
; 1408 : 			_Destroy(_Newvec, _Ptr);
; 1409 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1410 : 			_RERAISE;
; 1411 : 			_CATCH_END
; 1412 : 
; 1413 : 			_Count += size();
; 1414 : 			if (this->_Myfirst != pointer())
; 1415 : 				{	// destroy and deallocate old array
; 1416 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1417 : 				this->_Getal().deallocate(this->_Myfirst,
; 1418 : 					this->_Myend - this->_Myfirst);
; 1419 : 				}
; 1420 : 
; 1421 : 			this->_Orphan_all();
; 1422 : 			this->_Myend = _Newvec + _Capacity;
; 1423 : 			this->_Mylast = _Newvec + _Count;
; 1424 : 			this->_Myfirst = _Newvec;
; 1425 : 			}
; 1426 : 		else
; 1427 : 			{	// new stuff fits, append and rotate into place
; 1428 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1429 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1430 : 				this->_Mylast + _Count);
; 1431 : 			this->_Mylast += _Count;
; 1432 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1433 : 			}
; 1434 : 		}
; 1435 : 
; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 	iterator erase(const_iterator _Where)
; 1438 : 		{	// erase element at where
; 1439 : 		if (_VICONT(_Where) != this
; 1440 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1441 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1442 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1443 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1444 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1445 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1446 : 		--this->_Mylast;
; 1447 : 		return (_Make_iter(_Where));
; 1448 : 		}
; 1449 : 
; 1450 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 	iterator erase(const_iterator _Where)
; 1452 : 		{	// erase element at where
; 1453 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1454 : 			_VIPTR(_Where));
; 1455 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1456 : 		--this->_Mylast;
; 1457 : 		return (_Make_iter(_Where));
; 1458 : 		}
; 1459 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1460 : 
; 1461 : 	iterator erase(const_iterator _First_arg,
; 1462 : 		const_iterator _Last_arg)
; 1463 : 		{	// erase [_First, _Last)
; 1464 : 		if (_First_arg == begin() && _Last_arg == end())
; 1465 : 			clear();
; 1466 : 		else if (_First_arg != _Last_arg)
; 1467 : 			{	// clear partial
; 1468 : 			iterator _First = _Make_iter(_First_arg);
; 1469 : 			iterator _Last = _Make_iter(_Last_arg);
; 1470 : 
; 1471 : 			if (_First != _Last)
; 1472 : 				{	// worth doing, copy down over hole
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 				if (_Last < _First || _VICONT(_First) != this
; 1475 : 					|| _VIPTR(_First) < this->_Myfirst
; 1476 : 					|| this->_Mylast < _VIPTR(_Last))
; 1477 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1478 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1479 : 					_VIPTR(_First));
; 1480 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1484 : 					_VIPTR(_First));
; 1485 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1486 : 
; 1487 : 				_Destroy(_Ptr, this->_Mylast);
; 1488 : 				this->_Mylast = _Ptr;
; 1489 : 				}
; 1490 : 			}
; 1491 : 		return (_Make_iter(_First_arg));
; 1492 : 		}
; 1493 : 
; 1494 : 	void _Pop_back_n(size_type _Count)
; 1495 : 		{	// erase _Count elements at end
; 1496 : 		pointer _Ptr = this->_Mylast - _Count;
; 1497 : 
; 1498 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1499 : 		_Orphan_range(_Ptr, this->_Mylast);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 
; 1502 : 		_Destroy(_Ptr, this->_Mylast);
; 1503 : 		this->_Mylast = _Ptr;
; 1504 : 		}
; 1505 : 
; 1506 : 	void clear() _NOEXCEPT
; 1507 : 		{	// erase all
; 1508 : 		this->_Orphan_all();
; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1510 : 		this->_Mylast = this->_Myfirst;
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		{	// exchange contents with _Right
; 1515 : 		if (this == &_Right)
; 1516 : 			;	// same object, do nothing
; 1517 : 		else if (this->_Getal() == _Right._Getal())
; 1518 : 			{	// same allocator, swap control information
; 1519 : 			this->_Swap_all(_Right);
; 1520 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1521 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1522 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1529 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1530 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1531 : 			}
; 1532 : 
; 1533 : 		else
; 1534 : 			{	// containers are incompatible
; 1535 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1536 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1537 : 
; 1538 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1539 : 			_XSTD terminate();
; 1540 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1541 : 			}
; 1542 : 		}
; 1543 : 
; 1544 : protected:
; 1545 : 	bool _Buy(size_type _Capacity)
; 1546 : 		{	// allocate array with _Capacity elements
; 1547 : 		this->_Myfirst = pointer();
; 1548 : 		this->_Mylast = pointer();
; 1549 : 		this->_Myend = pointer();
; 1550 : 
; 1551 : 		if (_Capacity == 0)
; 1552 : 			return (false);
; 1553 : 		else if (max_size() < _Capacity)
; 1554 : 			_Xlen();	// result too long
; 1555 : 		else
; 1556 : 			{	// nonempty array, allocate storage
; 1557 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1558 : 			this->_Mylast = this->_Myfirst;
; 1559 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1560 : 			}
; 1561 : 		return (true);
; 1562 : 		}
; 1563 : 
; 1564 : 	void _Destroy(pointer _First, pointer _Last)
; 1565 : 		{	// destroy [_First, _Last) using allocator
; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}
; 1569 : 
; 1570 : 	size_type _Grow_to(size_type _Count) const
; 1571 : 		{	// grow by 50% or at least to _Count
; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1576 : 		if (_Capacity < _Count)
; 1577 : 			_Capacity = _Count;
; 1578 : 		return (_Capacity);
; 1579 : 		}
; 1580 : 
; 1581 : 	bool _Inside(const value_type *_Ptr) const
; 1582 : 		{	// test if _Ptr points inside vector
; 1583 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 31		 jae	 SHORT $LN4@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 2b		 ja	 SHORT $LN4@push_back

; 1244 : 		if (_Inside(_STD addressof(_Val)))
; 1245 : 			{	// push back an element
; 1246 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 02	 sar	 edi, 2

; 1247 : 			if (this->_Mylast == this->_Myend)

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN3@push_back

; 1248 : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IAEXI@Z ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::_Reserve
$LN3@push_back:
; File a:\vs\vc\include\xmemory0

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  0002a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0002d	85 c9		 test	 ecx, ecx
  0002f	74 2a		 je	 SHORT $LN49@push_back
  00031	8b 06		 mov	 eax, DWORD PTR [esi]
  00033	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]

; 593  : 		::new ((void *)_Ptr) _Ty(_Val);

  00036	89 01		 mov	 DWORD PTR [ecx], eax
; File a:\vs\vc\include\vector

; 1261 : 			++this->_Mylast;

  00038	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi

; 1262 : 			}
; 1263 : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN4@push_back:

; 1249 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1250 : 			this->_Getal().construct(this->_Mylast,
; 1251 : 				this->_Myfirst[_Idx]);
; 1252 : 			++this->_Mylast;
; 1253 : 			}
; 1254 : 		else
; 1255 : 			{	// push back a non-element
; 1256 : 			if (this->_Mylast == this->_Myend)

  00042	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  00045	75 09		 jne	 SHORT $LN1@push_back

; 1257 : 				_Reserve(1);

  00047	6a 01		 push	 1
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IAEXI@Z ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::_Reserve
$LN1@push_back:
; File a:\vs\vc\include\xmemory0

; 593  : 		::new ((void *)_Ptr) _Ty(_Val);

  00050	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00053	85 c9		 test	 ecx, ecx
  00055	74 04		 je	 SHORT $LN49@push_back
  00057	8b 07		 mov	 eax, DWORD PTR [edi]
  00059	89 01		 mov	 DWORD PTR [ecx], eax
$LN49@push_back:
; File a:\vs\vc\include\vector

; 1261 : 			++this->_Mylast;

  0005b	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi

; 1262 : 			}
; 1263 : 		}

  00061	5d		 pop	 ebp
  00062	c2 04 00	 ret	 4
?push_back@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAEXABQAVCDungeonModelInstance@@@Z ENDP ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?max_size@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QBEIXZ PROC ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::max_size, COMDAT
; _this$ = ecx

; 1153 : 		return (this->_Getal().max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 1154 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QBEIXZ ENDP ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?size@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QBEIXZ PROC ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::size, COMDAT
; _this$ = ecx

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 1149 : 		}

  00008	c3		 ret	 0
?size@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QBEIXZ ENDP ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?end@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@2@XZ PROC ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::end, COMDAT
; _this$ = ecx

; 1034 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 		{	// construct with pointer _Parg

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 1035 : 		return (iterator(this->_Mylast, this));
; 1036 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@2@XZ ENDP ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?begin@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@2@XZ PROC ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::begin, COMDAT
; _this$ = ecx

; 1024 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 		{	// construct with pointer _Parg

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1025 : 		return (iterator(this->_Myfirst, this));
; 1026 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@@2@XZ ENDP ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QBEIXZ PROC ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 1015 : 		return (this->_Myend - this->_Mylast);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00006	c1 f8 02	 sar	 eax, 2

; 1016 : 		}

  00009	c3		 ret	 0
?_Unused_capacity@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QBEIXZ ENDP ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?capacity@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QBEIXZ PROC ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::capacity, COMDAT
; _this$ = ecx

; 1010 : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 1011 : 		}

  00008	c3		 ret	 0
?capacity@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QBEIXZ ENDP ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?reserve@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?reserve@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAEXI@Z PROC ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::reserve, COMDAT
; _this$ = ecx

; 999  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1007 : 
; 1008 : 	size_type capacity() const _NOEXCEPT
; 1009 : 		{	// return current length of allocated storage
; 1010 : 		return (this->_Myend - this->_Myfirst);

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1000 : 		if (capacity() < _Count)

  00008	8b 55 08	 mov	 edx, DWORD PTR __Count$[ebp]

; 1007 : 
; 1008 : 	size_type capacity() const _NOEXCEPT
; 1009 : 		{	// return current length of allocated storage
; 1010 : 		return (this->_Myend - this->_Myfirst);

  0000b	c1 f8 02	 sar	 eax, 2

; 1000 : 		if (capacity() < _Count)

  0000e	3b c2		 cmp	 eax, edx
  00010	73 11		 jae	 SHORT $LN2@reserve

; 1001 : 			{	// something to do, check and reallocate
; 1002 : 			if (max_size() < _Count)

  00012	81 fa ff ff ff
	3f		 cmp	 edx, 1073741823		; 3fffffffH
  00018	77 0d		 ja	 SHORT $LN22@reserve

; 1003 : 				_Xlen();
; 1004 : 			_Reallocate(_Count);

  0001a	89 55 08	 mov	 DWORD PTR __Count$[ebp], edx

; 1005 : 			}
; 1006 : 		}

  0001d	5d		 pop	 ebp

; 1003 : 				_Xlen();
; 1004 : 			_Reallocate(_Count);

  0001e	e9 00 00 00 00	 jmp	 ?_Reallocate@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IAEXI@Z ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::_Reallocate
$LN2@reserve:

; 1005 : 			}
; 1006 : 		}

  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
$LN22@reserve:

; 1011 : 		}
; 1012 : 
; 1013 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1014 : 		{	// micro-optimization for capacity() - size()
; 1015 : 		return (this->_Myend - this->_Mylast);
; 1016 : 		}
; 1017 : 
; 1018 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1019 : 		{	// micro-optimization for capacity() != size()
; 1020 : 		return (this->_Myend != this->_Mylast);
; 1021 : 		}
; 1022 : 
; 1023 : 	iterator begin() _NOEXCEPT
; 1024 : 		{	// return iterator for beginning of mutable sequence
; 1025 : 		return (iterator(this->_Myfirst, this));
; 1026 : 		}
; 1027 : 
; 1028 : 	const_iterator begin() const _NOEXCEPT
; 1029 : 		{	// return iterator for beginning of nonmutable sequence
; 1030 : 		return (const_iterator(this->_Myfirst, this));
; 1031 : 		}
; 1032 : 
; 1033 : 	iterator end() _NOEXCEPT
; 1034 : 		{	// return iterator for end of mutable sequence
; 1035 : 		return (iterator(this->_Mylast, this));
; 1036 : 		}
; 1037 : 
; 1038 : 	const_iterator end() const _NOEXCEPT
; 1039 : 		{	// return iterator for end of nonmutable sequence
; 1040 : 		return (const_iterator(this->_Mylast, this));
; 1041 : 		}
; 1042 : 
; 1043 : 	iterator _Make_iter(const_iterator _Where) const
; 1044 : 		{	// make iterator from const_iterator
; 1045 : 		return (iterator(_Where._Ptr, this));
; 1046 : 		}
; 1047 : 
; 1048 : 	reverse_iterator rbegin() _NOEXCEPT
; 1049 : 		{	// return iterator for beginning of reversed mutable sequence
; 1050 : 		return (reverse_iterator(end()));
; 1051 : 		}
; 1052 : 
; 1053 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1054 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1055 : 		return (const_reverse_iterator(end()));
; 1056 : 		}
; 1057 : 
; 1058 : 	reverse_iterator rend() _NOEXCEPT
; 1059 : 		{	// return iterator for end of reversed mutable sequence
; 1060 : 		return (reverse_iterator(begin()));
; 1061 : 		}
; 1062 : 
; 1063 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1064 : 		{	// return iterator for end of reversed nonmutable sequence
; 1065 : 		return (const_reverse_iterator(begin()));
; 1066 : 		}
; 1067 : 
; 1068 : 	const_iterator cbegin() const _NOEXCEPT
; 1069 : 		{	// return iterator for beginning of nonmutable sequence
; 1070 : 		return (((const _Myt *)this)->begin());
; 1071 : 		}
; 1072 : 
; 1073 : 	const_iterator cend() const _NOEXCEPT
; 1074 : 		{	// return iterator for end of nonmutable sequence
; 1075 : 		return (((const _Myt *)this)->end());
; 1076 : 		}
; 1077 : 
; 1078 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1079 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1080 : 		return (((const _Myt *)this)->rbegin());
; 1081 : 		}
; 1082 : 
; 1083 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1084 : 		{	// return iterator for end of reversed nonmutable sequence
; 1085 : 		return (((const _Myt *)this)->rend());
; 1086 : 		}
; 1087 : 
; 1088 : 	void shrink_to_fit()
; 1089 : 		{	// reduce capacity
; 1090 : 		if (_Has_unused_capacity())
; 1091 : 			{	// worth shrinking, do it
; 1092 : 			if (empty())
; 1093 : 				_Tidy();
; 1094 : 			else
; 1095 : 				_Reallocate(size());
; 1096 : 			}
; 1097 : 		}
; 1098 : 
; 1099 : 	void resize(size_type _Newsize)
; 1100 : 		{	// determine new length, padding as needed
; 1101 : 		if (_Newsize < size())
; 1102 : 			_Pop_back_n(size() - _Newsize);
; 1103 : 		else if (size() < _Newsize)
; 1104 : 			{	// pad as needed
; 1105 : 			_Alty _Alval(this->_Getal());
; 1106 : 			_Reserve(_Newsize - size());
; 1107 : 			_TRY_BEGIN
; 1108 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1109 : 				_Alval);
; 1110 : 			_CATCH_ALL
; 1111 : 			_Tidy();
; 1112 : 			_RERAISE;
; 1113 : 			_CATCH_END
; 1114 : 			this->_Mylast += _Newsize - size();
; 1115 : 			}
; 1116 : 		}
; 1117 : 
; 1118 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1119 : 		{	// determine new length, padding with _Val elements as needed
; 1120 : 		if (_Newsize < size())
; 1121 : 			_Pop_back_n(size() - _Newsize);
; 1122 : 		else if (size() < _Newsize)
; 1123 : 			{	// pad as needed
; 1124 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1125 : 
; 1126 : 			if (_Inside(_Ptr))
; 1127 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1128 : 				const difference_type _Idx = _Ptr
; 1129 : 					- _STD addressof(*this->_Myfirst);
; 1130 : 				_Reserve(_Newsize - size());
; 1131 : 				_Ptr = _STD addressof(*this->_Myfirst) + _Idx;
; 1132 : 				}
; 1133 : 			else
; 1134 : 				_Reserve(_Newsize - size());
; 1135 : 
; 1136 : 			_TRY_BEGIN
; 1137 : 			_Ufill(this->_Mylast, _Newsize - size(), _Ptr);
; 1138 : 			_CATCH_ALL
; 1139 : 			_Tidy();
; 1140 : 			_RERAISE;
; 1141 : 			_CATCH_END
; 1142 : 			this->_Mylast += _Newsize - size();
; 1143 : 			}
; 1144 : 		}
; 1145 : 
; 1146 : 	size_type size() const _NOEXCEPT
; 1147 : 		{	// return length of sequence
; 1148 : 		return (this->_Mylast - this->_Myfirst);
; 1149 : 		}
; 1150 : 
; 1151 : 	size_type max_size() const _NOEXCEPT
; 1152 : 		{	// return maximum possible length of sequence
; 1153 : 		return (this->_Getal().max_size());
; 1154 : 		}
; 1155 : 
; 1156 : 	bool empty() const _NOEXCEPT
; 1157 : 		{	// test if sequence is empty
; 1158 : 		return (this->_Myfirst == this->_Mylast);
; 1159 : 		}
; 1160 : 
; 1161 : 	_Alloc get_allocator() const _NOEXCEPT
; 1162 : 		{	// return allocator object for values
; 1163 : 		return (this->_Getal());
; 1164 : 		}
; 1165 : 
; 1166 : 	const_reference at(size_type _Pos) const
; 1167 : 		{	// subscript nonmutable sequence with checking
; 1168 : 		if (size() <= _Pos)
; 1169 : 			_Xran();
; 1170 : 		return (*(this->_Myfirst + _Pos));
; 1171 : 		}
; 1172 : 
; 1173 : 	reference at(size_type _Pos)
; 1174 : 		{	// subscript mutable sequence with checking
; 1175 : 		if (size() <= _Pos)
; 1176 : 			_Xran();
; 1177 : 		return (*(this->_Myfirst + _Pos));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reference operator[](size_type _Pos) const
; 1181 : 		{	// subscript nonmutable sequence
; 1182 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1183 : 		if (size() <= _Pos)
; 1184 : 			{	// report error
; 1185 : 			_DEBUG_ERROR("vector subscript out of range");
; 1186 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1187 : 			}
; 1188 : 
; 1189 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1190 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1191 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1192 : 
; 1193 : 		return (*(this->_Myfirst + _Pos));
; 1194 : 		}
; 1195 : 
; 1196 : 	reference operator[](size_type _Pos)
; 1197 : 		{	// subscript mutable sequence
; 1198 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1199 : 		if (size() <= _Pos)
; 1200 : 			{	// report error
; 1201 : 			_DEBUG_ERROR("vector subscript out of range");
; 1202 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1203 : 			}
; 1204 : 
; 1205 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1206 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1207 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1208 : 
; 1209 : 		return (*(this->_Myfirst + _Pos));
; 1210 : 		}
; 1211 : 
; 1212 : 	pointer data() _NOEXCEPT
; 1213 : 		{	// return address of first element
; 1214 : 		return (this->_Myfirst);
; 1215 : 		}
; 1216 : 
; 1217 : 	const_pointer data() const _NOEXCEPT
; 1218 : 		{	// return address of first element
; 1219 : 		return (this->_Myfirst);
; 1220 : 		}
; 1221 : 
; 1222 : 	reference front()
; 1223 : 		{	// return first element of mutable sequence
; 1224 : 		return (*begin());
; 1225 : 		}
; 1226 : 
; 1227 : 	const_reference front() const
; 1228 : 		{	// return first element of nonmutable sequence
; 1229 : 		return (*begin());
; 1230 : 		}
; 1231 : 
; 1232 : 	reference back()
; 1233 : 		{	// return last element of mutable sequence
; 1234 : 		return (*(end() - 1));
; 1235 : 		}
; 1236 : 
; 1237 : 	const_reference back() const
; 1238 : 		{	// return last element of nonmutable sequence
; 1239 : 		return (*(end() - 1));
; 1240 : 		}
; 1241 : 
; 1242 : 	void push_back(const value_type& _Val)
; 1243 : 		{	// insert element at end
; 1244 : 		if (_Inside(_STD addressof(_Val)))
; 1245 : 			{	// push back an element
; 1246 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1247 : 			if (this->_Mylast == this->_Myend)
; 1248 : 				_Reserve(1);
; 1249 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1250 : 			this->_Getal().construct(this->_Mylast,
; 1251 : 				this->_Myfirst[_Idx]);
; 1252 : 			++this->_Mylast;
; 1253 : 			}
; 1254 : 		else
; 1255 : 			{	// push back a non-element
; 1256 : 			if (this->_Mylast == this->_Myend)
; 1257 : 				_Reserve(1);
; 1258 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1259 : 			this->_Getal().construct(this->_Mylast,
; 1260 : 				_Val);
; 1261 : 			++this->_Mylast;
; 1262 : 			}
; 1263 : 		}
; 1264 : 
; 1265 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1266 : 	void pop_back()
; 1267 : 		{	// erase element at end
; 1268 : 		if (empty())
; 1269 : 			_DEBUG_ERROR("vector empty before pop");
; 1270 : 		else
; 1271 : 			{	// erase last element
; 1272 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1273 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1274 : 			--this->_Mylast;
; 1275 : 			}
; 1276 : 		}
; 1277 : 
; 1278 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1279 : 	void pop_back()
; 1280 : 		{	// erase element at end
; 1281 : 		this->_Getal().destroy(this->_Mylast - 1);
; 1282 : 		--this->_Mylast;
; 1283 : 		}
; 1284 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1285 : 
; 1286 : 	template<class _Iter>
; 1287 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1288 : 			void>::type
; 1289 : 		assign(_Iter _First, _Iter _Last)
; 1290 : 		{	// assign [_First, _Last)
; 1291 : 		clear();
; 1292 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1293 : 		}
; 1294 : 
; 1295 : 	template<class _Iter>
; 1296 : 		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
; 1297 : 		{	// assign [_First, _Last), input iterators
; 1298 : 		for (; _First != _Last; ++_First)
; 1299 : 			emplace_back(*_First);
; 1300 : 		}
; 1301 : 
; 1302 : 	template<class _Iter>
; 1303 : 		void _Assign(_Iter _First, _Iter _Last, forward_iterator_tag)
; 1304 : 		{	// assign [_First, _Last), forward iterators
; 1305 : 		if (_First == _Last)
; 1306 : 			return;	// nothing to do
; 1307 : 
; 1308 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1309 : 
; 1310 : 		if (capacity() < _Newsize)
; 1311 : 			{	// need more room, try to get it
; 1312 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1313 : 			_Tidy();
; 1314 : 			_Buy(_Newcapacity);
; 1315 : 			}
; 1316 : 
; 1317 : 		this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
; 1318 : 		}
; 1319 : 
; 1320 : 	void assign(size_type _Count, const value_type& _Val)
; 1321 : 		{	// assign _Count * _Val
; 1322 : 		clear();
; 1323 : 		insert(begin(), _Count, _Val);
; 1324 : 		}
; 1325 : 
; 1326 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1327 : 		{	// insert _Val at _Where
; 1328 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1329 : 		}
; 1330 : 
; 1331 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1332 : 		const _Ty& _Val)
; 1333 : 		{	// insert _Count * _Val at _Where
; 1334 : 		return (_Insert_n(_Where, _Count, _Val));
; 1335 : 		}
; 1336 : 
; 1337 : 	template<class _Iter>
; 1338 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1339 : 			iterator>::type
; 1340 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1341 : 		{	// insert [_First, _Last) at _Where
; 1342 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1343 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1344 : 		return (begin() + _Off);
; 1345 : 		}
; 1346 : 
; 1347 : 	template<class _Iter>
; 1348 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1349 : 			input_iterator_tag)
; 1350 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1351 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1352 : 
; 1353 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1354 : 		if (size() < _Off)
; 1355 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1356 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1357 : 
; 1358 : 		if (_First != _Last)
; 1359 : 			{	// worth doing, gather at end and rotate into place
; 1360 : 			size_type _Oldsize = size();
; 1361 : 
; 1362 : 			_TRY_BEGIN
; 1363 : 			for (; _First != _Last; ++_First)
; 1364 : 				push_back(*_First);	// append
; 1365 : 
; 1366 : 			_CATCH_ALL
; 1367 : 			erase(begin() + _Oldsize, end());
; 1368 : 			_RERAISE;
; 1369 : 			_CATCH_END
; 1370 : 
; 1371 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1372 : 			}
; 1373 : 		}
; 1374 : 
; 1375 : 	template<class _Iter>
; 1376 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1377 : 			forward_iterator_tag)
; 1378 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_VICONT(_Where) != this
; 1381 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1382 : 			|| this->_Mylast < _VIPTR(_Where))
; 1383 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1384 : 		_DEBUG_RANGE(_First, _Last);
; 1385 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1386 : 
; 1387 : 		size_type _Count = 0;
; 1388 : 		_Distance(_First, _Last, _Count);
; 1389 : 
; 1390 : 		if (_Count == 0)
; 1391 : 			;
; 1392 : 		else if (_Unused_capacity() < _Count)
; 1393 : 			{	// not enough room, reallocate
; 1394 : 			if (max_size() - size() < _Count)
; 1395 : 				_Xlen();	// result too long
; 1396 : 
; 1397 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1398 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1399 : 			pointer _Ptr = _Newvec;
; 1400 : 
; 1401 : 			_TRY_BEGIN
; 1402 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1403 : 				_Newvec);	// copy prefix
; 1404 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1405 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1406 : 				_Ptr);	// copy suffix
; 1407 : 			_CATCH_ALL
; 1408 : 			_Destroy(_Newvec, _Ptr);
; 1409 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1410 : 			_RERAISE;
; 1411 : 			_CATCH_END
; 1412 : 
; 1413 : 			_Count += size();
; 1414 : 			if (this->_Myfirst != pointer())
; 1415 : 				{	// destroy and deallocate old array
; 1416 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1417 : 				this->_Getal().deallocate(this->_Myfirst,
; 1418 : 					this->_Myend - this->_Myfirst);
; 1419 : 				}
; 1420 : 
; 1421 : 			this->_Orphan_all();
; 1422 : 			this->_Myend = _Newvec + _Capacity;
; 1423 : 			this->_Mylast = _Newvec + _Count;
; 1424 : 			this->_Myfirst = _Newvec;
; 1425 : 			}
; 1426 : 		else
; 1427 : 			{	// new stuff fits, append and rotate into place
; 1428 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1429 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1430 : 				this->_Mylast + _Count);
; 1431 : 			this->_Mylast += _Count;
; 1432 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1433 : 			}
; 1434 : 		}
; 1435 : 
; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 	iterator erase(const_iterator _Where)
; 1438 : 		{	// erase element at where
; 1439 : 		if (_VICONT(_Where) != this
; 1440 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1441 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1442 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1443 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1444 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1445 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1446 : 		--this->_Mylast;
; 1447 : 		return (_Make_iter(_Where));
; 1448 : 		}
; 1449 : 
; 1450 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 	iterator erase(const_iterator _Where)
; 1452 : 		{	// erase element at where
; 1453 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1454 : 			_VIPTR(_Where));
; 1455 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1456 : 		--this->_Mylast;
; 1457 : 		return (_Make_iter(_Where));
; 1458 : 		}
; 1459 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1460 : 
; 1461 : 	iterator erase(const_iterator _First_arg,
; 1462 : 		const_iterator _Last_arg)
; 1463 : 		{	// erase [_First, _Last)
; 1464 : 		if (_First_arg == begin() && _Last_arg == end())
; 1465 : 			clear();
; 1466 : 		else if (_First_arg != _Last_arg)
; 1467 : 			{	// clear partial
; 1468 : 			iterator _First = _Make_iter(_First_arg);
; 1469 : 			iterator _Last = _Make_iter(_Last_arg);
; 1470 : 
; 1471 : 			if (_First != _Last)
; 1472 : 				{	// worth doing, copy down over hole
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 				if (_Last < _First || _VICONT(_First) != this
; 1475 : 					|| _VIPTR(_First) < this->_Myfirst
; 1476 : 					|| this->_Mylast < _VIPTR(_Last))
; 1477 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1478 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1479 : 					_VIPTR(_First));
; 1480 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1484 : 					_VIPTR(_First));
; 1485 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1486 : 
; 1487 : 				_Destroy(_Ptr, this->_Mylast);
; 1488 : 				this->_Mylast = _Ptr;
; 1489 : 				}
; 1490 : 			}
; 1491 : 		return (_Make_iter(_First_arg));
; 1492 : 		}
; 1493 : 
; 1494 : 	void _Pop_back_n(size_type _Count)
; 1495 : 		{	// erase _Count elements at end
; 1496 : 		pointer _Ptr = this->_Mylast - _Count;
; 1497 : 
; 1498 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1499 : 		_Orphan_range(_Ptr, this->_Mylast);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 
; 1502 : 		_Destroy(_Ptr, this->_Mylast);
; 1503 : 		this->_Mylast = _Ptr;
; 1504 : 		}
; 1505 : 
; 1506 : 	void clear() _NOEXCEPT
; 1507 : 		{	// erase all
; 1508 : 		this->_Orphan_all();
; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1510 : 		this->_Mylast = this->_Myfirst;
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		{	// exchange contents with _Right
; 1515 : 		if (this == &_Right)
; 1516 : 			;	// same object, do nothing
; 1517 : 		else if (this->_Getal() == _Right._Getal())
; 1518 : 			{	// same allocator, swap control information
; 1519 : 			this->_Swap_all(_Right);
; 1520 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1521 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1522 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1529 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1530 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1531 : 			}
; 1532 : 
; 1533 : 		else
; 1534 : 			{	// containers are incompatible
; 1535 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1536 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1537 : 
; 1538 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1539 : 			_XSTD terminate();
; 1540 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1541 : 			}
; 1542 : 		}
; 1543 : 
; 1544 : protected:
; 1545 : 	bool _Buy(size_type _Capacity)
; 1546 : 		{	// allocate array with _Capacity elements
; 1547 : 		this->_Myfirst = pointer();
; 1548 : 		this->_Mylast = pointer();
; 1549 : 		this->_Myend = pointer();
; 1550 : 
; 1551 : 		if (_Capacity == 0)
; 1552 : 			return (false);
; 1553 : 		else if (max_size() < _Capacity)
; 1554 : 			_Xlen();	// result too long
; 1555 : 		else
; 1556 : 			{	// nonempty array, allocate storage
; 1557 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1558 : 			this->_Mylast = this->_Myfirst;
; 1559 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1560 : 			}
; 1561 : 		return (true);
; 1562 : 		}
; 1563 : 
; 1564 : 	void _Destroy(pointer _First, pointer _Last)
; 1565 : 		{	// destroy [_First, _Last) using allocator
; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}
; 1569 : 
; 1570 : 	size_type _Grow_to(size_type _Count) const
; 1571 : 		{	// grow by 50% or at least to _Count
; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1576 : 		if (_Capacity < _Count)
; 1577 : 			_Capacity = _Count;
; 1578 : 		return (_Capacity);
; 1579 : 		}
; 1580 : 
; 1581 : 	bool _Inside(const value_type *_Ptr) const
; 1582 : 		{	// test if _Ptr points inside vector
; 1583 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);
; 1584 : 		}
; 1585 : 
; 1586 : 	void _Reallocate(size_type _Count)
; 1587 : 		{	// move to array of exactly _Count elements
; 1588 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1589 : 
; 1590 : 		_TRY_BEGIN
; 1591 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);
; 1592 : 		_CATCH_ALL
; 1593 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1594 : 		_RERAISE;
; 1595 : 		_CATCH_END
; 1596 : 
; 1597 : 		size_type _Size = size();
; 1598 : 		if (this->_Myfirst != pointer())
; 1599 : 			{	// destroy and deallocate old array
; 1600 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1601 : 			this->_Getal().deallocate(this->_Myfirst,
; 1602 : 				this->_Myend - this->_Myfirst);
; 1603 : 			}
; 1604 : 
; 1605 : 		this->_Orphan_all();
; 1606 : 		this->_Myend = _Ptr + _Count;
; 1607 : 		this->_Mylast = _Ptr + _Size;
; 1608 : 		this->_Myfirst = _Ptr;
; 1609 : 		}
; 1610 : 
; 1611 : 	void _Reserve(size_type _Count)
; 1612 : 		{	// ensure room for _Count new elements, grow exponentially
; 1613 : 		if (_Unused_capacity() < _Count)
; 1614 : 			{	// need more room, try to get it
; 1615 : 			if (max_size() - size() < _Count)
; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));
; 1618 : 			}
; 1619 : 		}
; 1620 : 
; 1621 : 	void _Tidy()
; 1622 : 		{	// free all storage
; 1623 : 		if (this->_Myfirst != pointer())
; 1624 : 			{	// something to free, destroy and deallocate it
; 1625 : 			this->_Orphan_all();
; 1626 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1627 : 			this->_Getal().deallocate(this->_Myfirst,
; 1628 : 				this->_Myend - this->_Myfirst);
; 1629 : 			this->_Myfirst = pointer();
; 1630 : 			this->_Mylast = pointer();
; 1631 : 			this->_Myend = pointer();
; 1632 : 			}
; 1633 : 		}
; 1634 : 
; 1635 : 	template<class _Iter>
; 1636 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1637 : 		{	// copy initializing [_First, _Last), using allocator
; 1638 : 		_Alty _Alval(this->_Getal());
; 1639 : 		return (_Uninitialized_copy(_First, _Last,
; 1640 : 			_Ptr, _Alval));
; 1641 : 		}
; 1642 : 
; 1643 : 	template<class _Iter>
; 1644 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1645 : 		{	// move initializing [_First, _Last), using allocator
; 1646 : 		_Alty _Alval(this->_Getal());
; 1647 : 		return (_Uninitialized_move(_First, _Last,
; 1648 : 			_Ptr, _Alval));
; 1649 : 		}
; 1650 : 
; 1651 : 	iterator _Insert_n(const_iterator _Where,
; 1652 : 		size_type _Count, const value_type& _Val)
; 1653 : 		{	// insert _Count * _Val at _Where
; 1654 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1655 : 		if (_VICONT(_Where) != this
; 1656 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1657 : 			|| this->_Mylast < _VIPTR(_Where))
; 1658 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1659 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1660 : 
; 1661 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1662 : 		if (_Count == 0)
; 1663 : 			;
; 1664 : 		else if (_Unused_capacity() < _Count)
; 1665 : 			{	// not enough room, reallocate
; 1666 : 			if (max_size() - size() < _Count)
; 1667 : 				_Xlen();	// result too long
; 1668 : 
; 1669 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1670 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1671 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst;
; 1672 : 			int _Ncopied = 0;
; 1673 : 
; 1674 : 			_TRY_BEGIN
; 1675 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1676 : 				_STD addressof(_Val));	// add new stuff
; 1677 : 			++_Ncopied;
; 1678 : 			_Umove(this->_Myfirst, _VIPTR(_Where),
; 1679 : 				_Newvec);	// copy prefix
; 1680 : 			++_Ncopied;
; 1681 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1682 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1683 : 			_CATCH_ALL
; 1684 : 			if (1 < _Ncopied)
; 1685 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1686 : 			if (0 < _Ncopied)
; 1687 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1688 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1689 : 			_RERAISE;
; 1690 : 			_CATCH_END
; 1691 : 
; 1692 : 			_Count += size();
; 1693 : 			if (this->_Myfirst != pointer())
; 1694 : 				{	// destroy and deallocate old array
; 1695 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1696 : 				this->_Getal().deallocate(this->_Myfirst,
; 1697 : 					this->_Myend - this->_Myfirst);
; 1698 : 				}
; 1699 : 
; 1700 : 			this->_Orphan_all();
; 1701 : 			this->_Myend = _Newvec + _Capacity;
; 1702 : 			this->_Mylast = _Newvec + _Count;
; 1703 : 			this->_Myfirst = _Newvec;
; 1704 : 			}
; 1705 : 		else if ((size_type)(this->_Mylast - _VIPTR(_Where))
; 1706 : 			< _Count)
; 1707 : 			{	// new stuff spills off end
; 1708 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1709 : 
; 1710 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1711 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1712 : 
; 1713 : 			_TRY_BEGIN
; 1714 : 			_Ufill(this->_Mylast,
; 1715 : 				_Count - (this->_Mylast - _VIPTR(_Where)),
; 1716 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1717 : 			_CATCH_ALL
; 1718 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1719 : 				this->_Mylast + _Count);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			this->_Mylast += _Count;
; 1724 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1725 : 			_STD fill(_VIPTR(_Where), this->_Mylast - _Count,
; 1726 : 				_Tmp);	// insert up to old end
; 1727 : 			}
; 1728 : 		else
; 1729 : 			{	// new stuff can all be assigned
; 1730 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1731 : 
; 1732 : 			pointer _Oldend = this->_Mylast;
; 1733 : 			this->_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1734 : 				this->_Mylast);	// copy suffix
; 1735 : 
; 1736 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1737 : 			_Copy_backward(_VIPTR(_Where), _Oldend - _Count,
; 1738 : 				_Oldend);	// copy hole
; 1739 : 			_STD fill(_VIPTR(_Where),
; 1740 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1741 : 			}
; 1742 : 		return (begin() + _Off);
; 1743 : 		}
; 1744 : 
; 1745 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1746 : 		{	// copy initializing _Count * _Val, using allocator
; 1747 : 		_Alty _Alval(this->_Getal());
; 1748 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, _Alval);
; 1749 : 		return (_Ptr + _Count);
; 1750 : 		}
; 1751 : 
; 1752 : 	__declspec(noreturn) void _Xlen() const
; 1753 : 		{	// report a length_error
; 1754 : 		_Xlength_error("vector<T> too long");

  00027	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0002c	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN24@reserve:
$LN21@reserve:
  00031	cc		 int	 3
?reserve@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAEXI@Z ENDP ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
;	COMDAT ??1?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAE@XZ PROC ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::~vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >, COMDAT
; _this$ = ecx

; 944  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 947  : 
; 948  : 	_Myt& operator=(const _Myt& _Right)
; 949  : 		{	// assign _Right
; 950  : 		if (this != &_Right)
; 951  : 			{	// different, assign it
; 952  : 			if (this->_Getal() != _Right._Getal()
; 953  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 954  : 				{	// change allocator before copying
; 955  : 				_Tidy();
; 956  : 				this->_Change_alloc(_Right._Getal());
; 957  : 				}
; 958  : 
; 959  : 			this->_Orphan_all();
; 960  : 
; 961  : 			if (_Right.empty())
; 962  : 				clear();	// new sequence empty, erase existing sequence
; 963  : 			else if (_Right.size() <= size())
; 964  : 				{	// enough elements, copy new and destroy old
; 965  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst,
; 966  : 					_Right._Mylast, this->_Myfirst);	// copy new
; 967  : 				_Destroy(_Ptr, this->_Mylast);	// destroy old
; 968  : 				this->_Mylast = this->_Myfirst + _Right.size();
; 969  : 				}
; 970  : 			else if (_Right.size() <= capacity())
; 971  : 				{	// enough room, copy and construct new
; 972  : 				pointer _Ptr = _Right._Myfirst + size();
; 973  : 				_Copy_impl(_Right._Myfirst,
; 974  : 					_Ptr, this->_Myfirst);
; 975  : 				this->_Mylast = _Ucopy(_Ptr, _Right._Mylast, this->_Mylast);
; 976  : 				}
; 977  : 			else
; 978  : 				{	// not enough room, allocate new array and construct new
; 979  : 				if (this->_Myfirst != pointer())
; 980  : 					{	// discard old array
; 981  : 					_Destroy(this->_Myfirst, this->_Mylast);
; 982  : 					this->_Getal().deallocate(this->_Myfirst,
; 983  : 						this->_Myend - this->_Myfirst);
; 984  : 					}
; 985  : 				if (_Buy(_Right.size()))
; 986  : 					_TRY_BEGIN
; 987  : 					this->_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 988  : 						this->_Myfirst);
; 989  : 					_CATCH_ALL
; 990  : 					_Tidy();
; 991  : 					_RERAISE;
; 992  : 					_CATCH_END
; 993  : 				}
; 994  : 			}
; 995  : 		return (*this);
; 996  : 		}
; 997  : 
; 998  : 	void reserve(size_type _Count)
; 999  : 		{	// determine new minimum length of allocated storage
; 1000 : 		if (capacity() < _Count)
; 1001 : 			{	// something to do, check and reallocate
; 1002 : 			if (max_size() < _Count)
; 1003 : 				_Xlen();
; 1004 : 			_Reallocate(_Count);
; 1005 : 			}
; 1006 : 		}
; 1007 : 
; 1008 : 	size_type capacity() const _NOEXCEPT
; 1009 : 		{	// return current length of allocated storage
; 1010 : 		return (this->_Myend - this->_Myfirst);
; 1011 : 		}
; 1012 : 
; 1013 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1014 : 		{	// micro-optimization for capacity() - size()
; 1015 : 		return (this->_Myend - this->_Mylast);
; 1016 : 		}
; 1017 : 
; 1018 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1019 : 		{	// micro-optimization for capacity() != size()
; 1020 : 		return (this->_Myend != this->_Mylast);
; 1021 : 		}
; 1022 : 
; 1023 : 	iterator begin() _NOEXCEPT
; 1024 : 		{	// return iterator for beginning of mutable sequence
; 1025 : 		return (iterator(this->_Myfirst, this));
; 1026 : 		}
; 1027 : 
; 1028 : 	const_iterator begin() const _NOEXCEPT
; 1029 : 		{	// return iterator for beginning of nonmutable sequence
; 1030 : 		return (const_iterator(this->_Myfirst, this));
; 1031 : 		}
; 1032 : 
; 1033 : 	iterator end() _NOEXCEPT
; 1034 : 		{	// return iterator for end of mutable sequence
; 1035 : 		return (iterator(this->_Mylast, this));
; 1036 : 		}
; 1037 : 
; 1038 : 	const_iterator end() const _NOEXCEPT
; 1039 : 		{	// return iterator for end of nonmutable sequence
; 1040 : 		return (const_iterator(this->_Mylast, this));
; 1041 : 		}
; 1042 : 
; 1043 : 	iterator _Make_iter(const_iterator _Where) const
; 1044 : 		{	// make iterator from const_iterator
; 1045 : 		return (iterator(_Where._Ptr, this));
; 1046 : 		}
; 1047 : 
; 1048 : 	reverse_iterator rbegin() _NOEXCEPT
; 1049 : 		{	// return iterator for beginning of reversed mutable sequence
; 1050 : 		return (reverse_iterator(end()));
; 1051 : 		}
; 1052 : 
; 1053 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1054 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1055 : 		return (const_reverse_iterator(end()));
; 1056 : 		}
; 1057 : 
; 1058 : 	reverse_iterator rend() _NOEXCEPT
; 1059 : 		{	// return iterator for end of reversed mutable sequence
; 1060 : 		return (reverse_iterator(begin()));
; 1061 : 		}
; 1062 : 
; 1063 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1064 : 		{	// return iterator for end of reversed nonmutable sequence
; 1065 : 		return (const_reverse_iterator(begin()));
; 1066 : 		}
; 1067 : 
; 1068 : 	const_iterator cbegin() const _NOEXCEPT
; 1069 : 		{	// return iterator for beginning of nonmutable sequence
; 1070 : 		return (((const _Myt *)this)->begin());
; 1071 : 		}
; 1072 : 
; 1073 : 	const_iterator cend() const _NOEXCEPT
; 1074 : 		{	// return iterator for end of nonmutable sequence
; 1075 : 		return (((const _Myt *)this)->end());
; 1076 : 		}
; 1077 : 
; 1078 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1079 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1080 : 		return (((const _Myt *)this)->rbegin());
; 1081 : 		}
; 1082 : 
; 1083 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1084 : 		{	// return iterator for end of reversed nonmutable sequence
; 1085 : 		return (((const _Myt *)this)->rend());
; 1086 : 		}
; 1087 : 
; 1088 : 	void shrink_to_fit()
; 1089 : 		{	// reduce capacity
; 1090 : 		if (_Has_unused_capacity())
; 1091 : 			{	// worth shrinking, do it
; 1092 : 			if (empty())
; 1093 : 				_Tidy();
; 1094 : 			else
; 1095 : 				_Reallocate(size());
; 1096 : 			}
; 1097 : 		}
; 1098 : 
; 1099 : 	void resize(size_type _Newsize)
; 1100 : 		{	// determine new length, padding as needed
; 1101 : 		if (_Newsize < size())
; 1102 : 			_Pop_back_n(size() - _Newsize);
; 1103 : 		else if (size() < _Newsize)
; 1104 : 			{	// pad as needed
; 1105 : 			_Alty _Alval(this->_Getal());
; 1106 : 			_Reserve(_Newsize - size());
; 1107 : 			_TRY_BEGIN
; 1108 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1109 : 				_Alval);
; 1110 : 			_CATCH_ALL
; 1111 : 			_Tidy();
; 1112 : 			_RERAISE;
; 1113 : 			_CATCH_END
; 1114 : 			this->_Mylast += _Newsize - size();
; 1115 : 			}
; 1116 : 		}
; 1117 : 
; 1118 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1119 : 		{	// determine new length, padding with _Val elements as needed
; 1120 : 		if (_Newsize < size())
; 1121 : 			_Pop_back_n(size() - _Newsize);
; 1122 : 		else if (size() < _Newsize)
; 1123 : 			{	// pad as needed
; 1124 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1125 : 
; 1126 : 			if (_Inside(_Ptr))
; 1127 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1128 : 				const difference_type _Idx = _Ptr
; 1129 : 					- _STD addressof(*this->_Myfirst);
; 1130 : 				_Reserve(_Newsize - size());
; 1131 : 				_Ptr = _STD addressof(*this->_Myfirst) + _Idx;
; 1132 : 				}
; 1133 : 			else
; 1134 : 				_Reserve(_Newsize - size());
; 1135 : 
; 1136 : 			_TRY_BEGIN
; 1137 : 			_Ufill(this->_Mylast, _Newsize - size(), _Ptr);
; 1138 : 			_CATCH_ALL
; 1139 : 			_Tidy();
; 1140 : 			_RERAISE;
; 1141 : 			_CATCH_END
; 1142 : 			this->_Mylast += _Newsize - size();
; 1143 : 			}
; 1144 : 		}
; 1145 : 
; 1146 : 	size_type size() const _NOEXCEPT
; 1147 : 		{	// return length of sequence
; 1148 : 		return (this->_Mylast - this->_Myfirst);
; 1149 : 		}
; 1150 : 
; 1151 : 	size_type max_size() const _NOEXCEPT
; 1152 : 		{	// return maximum possible length of sequence
; 1153 : 		return (this->_Getal().max_size());
; 1154 : 		}
; 1155 : 
; 1156 : 	bool empty() const _NOEXCEPT
; 1157 : 		{	// test if sequence is empty
; 1158 : 		return (this->_Myfirst == this->_Mylast);
; 1159 : 		}
; 1160 : 
; 1161 : 	_Alloc get_allocator() const _NOEXCEPT
; 1162 : 		{	// return allocator object for values
; 1163 : 		return (this->_Getal());
; 1164 : 		}
; 1165 : 
; 1166 : 	const_reference at(size_type _Pos) const
; 1167 : 		{	// subscript nonmutable sequence with checking
; 1168 : 		if (size() <= _Pos)
; 1169 : 			_Xran();
; 1170 : 		return (*(this->_Myfirst + _Pos));
; 1171 : 		}
; 1172 : 
; 1173 : 	reference at(size_type _Pos)
; 1174 : 		{	// subscript mutable sequence with checking
; 1175 : 		if (size() <= _Pos)
; 1176 : 			_Xran();
; 1177 : 		return (*(this->_Myfirst + _Pos));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reference operator[](size_type _Pos) const
; 1181 : 		{	// subscript nonmutable sequence
; 1182 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1183 : 		if (size() <= _Pos)
; 1184 : 			{	// report error
; 1185 : 			_DEBUG_ERROR("vector subscript out of range");
; 1186 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1187 : 			}
; 1188 : 
; 1189 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1190 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1191 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1192 : 
; 1193 : 		return (*(this->_Myfirst + _Pos));
; 1194 : 		}
; 1195 : 
; 1196 : 	reference operator[](size_type _Pos)
; 1197 : 		{	// subscript mutable sequence
; 1198 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1199 : 		if (size() <= _Pos)
; 1200 : 			{	// report error
; 1201 : 			_DEBUG_ERROR("vector subscript out of range");
; 1202 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1203 : 			}
; 1204 : 
; 1205 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1206 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1207 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1208 : 
; 1209 : 		return (*(this->_Myfirst + _Pos));
; 1210 : 		}
; 1211 : 
; 1212 : 	pointer data() _NOEXCEPT
; 1213 : 		{	// return address of first element
; 1214 : 		return (this->_Myfirst);
; 1215 : 		}
; 1216 : 
; 1217 : 	const_pointer data() const _NOEXCEPT
; 1218 : 		{	// return address of first element
; 1219 : 		return (this->_Myfirst);
; 1220 : 		}
; 1221 : 
; 1222 : 	reference front()
; 1223 : 		{	// return first element of mutable sequence
; 1224 : 		return (*begin());
; 1225 : 		}
; 1226 : 
; 1227 : 	const_reference front() const
; 1228 : 		{	// return first element of nonmutable sequence
; 1229 : 		return (*begin());
; 1230 : 		}
; 1231 : 
; 1232 : 	reference back()
; 1233 : 		{	// return last element of mutable sequence
; 1234 : 		return (*(end() - 1));
; 1235 : 		}
; 1236 : 
; 1237 : 	const_reference back() const
; 1238 : 		{	// return last element of nonmutable sequence
; 1239 : 		return (*(end() - 1));
; 1240 : 		}
; 1241 : 
; 1242 : 	void push_back(const value_type& _Val)
; 1243 : 		{	// insert element at end
; 1244 : 		if (_Inside(_STD addressof(_Val)))
; 1245 : 			{	// push back an element
; 1246 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1247 : 			if (this->_Mylast == this->_Myend)
; 1248 : 				_Reserve(1);
; 1249 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1250 : 			this->_Getal().construct(this->_Mylast,
; 1251 : 				this->_Myfirst[_Idx]);
; 1252 : 			++this->_Mylast;
; 1253 : 			}
; 1254 : 		else
; 1255 : 			{	// push back a non-element
; 1256 : 			if (this->_Mylast == this->_Myend)
; 1257 : 				_Reserve(1);
; 1258 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1259 : 			this->_Getal().construct(this->_Mylast,
; 1260 : 				_Val);
; 1261 : 			++this->_Mylast;
; 1262 : 			}
; 1263 : 		}
; 1264 : 
; 1265 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1266 : 	void pop_back()
; 1267 : 		{	// erase element at end
; 1268 : 		if (empty())
; 1269 : 			_DEBUG_ERROR("vector empty before pop");
; 1270 : 		else
; 1271 : 			{	// erase last element
; 1272 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1273 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1274 : 			--this->_Mylast;
; 1275 : 			}
; 1276 : 		}
; 1277 : 
; 1278 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1279 : 	void pop_back()
; 1280 : 		{	// erase element at end
; 1281 : 		this->_Getal().destroy(this->_Mylast - 1);
; 1282 : 		--this->_Mylast;
; 1283 : 		}
; 1284 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1285 : 
; 1286 : 	template<class _Iter>
; 1287 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1288 : 			void>::type
; 1289 : 		assign(_Iter _First, _Iter _Last)
; 1290 : 		{	// assign [_First, _Last)
; 1291 : 		clear();
; 1292 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1293 : 		}
; 1294 : 
; 1295 : 	template<class _Iter>
; 1296 : 		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
; 1297 : 		{	// assign [_First, _Last), input iterators
; 1298 : 		for (; _First != _Last; ++_First)
; 1299 : 			emplace_back(*_First);
; 1300 : 		}
; 1301 : 
; 1302 : 	template<class _Iter>
; 1303 : 		void _Assign(_Iter _First, _Iter _Last, forward_iterator_tag)
; 1304 : 		{	// assign [_First, _Last), forward iterators
; 1305 : 		if (_First == _Last)
; 1306 : 			return;	// nothing to do
; 1307 : 
; 1308 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1309 : 
; 1310 : 		if (capacity() < _Newsize)
; 1311 : 			{	// need more room, try to get it
; 1312 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1313 : 			_Tidy();
; 1314 : 			_Buy(_Newcapacity);
; 1315 : 			}
; 1316 : 
; 1317 : 		this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
; 1318 : 		}
; 1319 : 
; 1320 : 	void assign(size_type _Count, const value_type& _Val)
; 1321 : 		{	// assign _Count * _Val
; 1322 : 		clear();
; 1323 : 		insert(begin(), _Count, _Val);
; 1324 : 		}
; 1325 : 
; 1326 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1327 : 		{	// insert _Val at _Where
; 1328 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1329 : 		}
; 1330 : 
; 1331 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1332 : 		const _Ty& _Val)
; 1333 : 		{	// insert _Count * _Val at _Where
; 1334 : 		return (_Insert_n(_Where, _Count, _Val));
; 1335 : 		}
; 1336 : 
; 1337 : 	template<class _Iter>
; 1338 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1339 : 			iterator>::type
; 1340 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1341 : 		{	// insert [_First, _Last) at _Where
; 1342 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1343 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1344 : 		return (begin() + _Off);
; 1345 : 		}
; 1346 : 
; 1347 : 	template<class _Iter>
; 1348 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1349 : 			input_iterator_tag)
; 1350 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1351 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1352 : 
; 1353 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1354 : 		if (size() < _Off)
; 1355 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1356 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1357 : 
; 1358 : 		if (_First != _Last)
; 1359 : 			{	// worth doing, gather at end and rotate into place
; 1360 : 			size_type _Oldsize = size();
; 1361 : 
; 1362 : 			_TRY_BEGIN
; 1363 : 			for (; _First != _Last; ++_First)
; 1364 : 				push_back(*_First);	// append
; 1365 : 
; 1366 : 			_CATCH_ALL
; 1367 : 			erase(begin() + _Oldsize, end());
; 1368 : 			_RERAISE;
; 1369 : 			_CATCH_END
; 1370 : 
; 1371 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1372 : 			}
; 1373 : 		}
; 1374 : 
; 1375 : 	template<class _Iter>
; 1376 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1377 : 			forward_iterator_tag)
; 1378 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_VICONT(_Where) != this
; 1381 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1382 : 			|| this->_Mylast < _VIPTR(_Where))
; 1383 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1384 : 		_DEBUG_RANGE(_First, _Last);
; 1385 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1386 : 
; 1387 : 		size_type _Count = 0;
; 1388 : 		_Distance(_First, _Last, _Count);
; 1389 : 
; 1390 : 		if (_Count == 0)
; 1391 : 			;
; 1392 : 		else if (_Unused_capacity() < _Count)
; 1393 : 			{	// not enough room, reallocate
; 1394 : 			if (max_size() - size() < _Count)
; 1395 : 				_Xlen();	// result too long
; 1396 : 
; 1397 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1398 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1399 : 			pointer _Ptr = _Newvec;
; 1400 : 
; 1401 : 			_TRY_BEGIN
; 1402 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1403 : 				_Newvec);	// copy prefix
; 1404 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1405 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1406 : 				_Ptr);	// copy suffix
; 1407 : 			_CATCH_ALL
; 1408 : 			_Destroy(_Newvec, _Ptr);
; 1409 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1410 : 			_RERAISE;
; 1411 : 			_CATCH_END
; 1412 : 
; 1413 : 			_Count += size();
; 1414 : 			if (this->_Myfirst != pointer())
; 1415 : 				{	// destroy and deallocate old array
; 1416 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1417 : 				this->_Getal().deallocate(this->_Myfirst,
; 1418 : 					this->_Myend - this->_Myfirst);
; 1419 : 				}
; 1420 : 
; 1421 : 			this->_Orphan_all();
; 1422 : 			this->_Myend = _Newvec + _Capacity;
; 1423 : 			this->_Mylast = _Newvec + _Count;
; 1424 : 			this->_Myfirst = _Newvec;
; 1425 : 			}
; 1426 : 		else
; 1427 : 			{	// new stuff fits, append and rotate into place
; 1428 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1429 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1430 : 				this->_Mylast + _Count);
; 1431 : 			this->_Mylast += _Count;
; 1432 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1433 : 			}
; 1434 : 		}
; 1435 : 
; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 	iterator erase(const_iterator _Where)
; 1438 : 		{	// erase element at where
; 1439 : 		if (_VICONT(_Where) != this
; 1440 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1441 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1442 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1443 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1444 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1445 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1446 : 		--this->_Mylast;
; 1447 : 		return (_Make_iter(_Where));
; 1448 : 		}
; 1449 : 
; 1450 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 	iterator erase(const_iterator _Where)
; 1452 : 		{	// erase element at where
; 1453 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1454 : 			_VIPTR(_Where));
; 1455 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1456 : 		--this->_Mylast;
; 1457 : 		return (_Make_iter(_Where));
; 1458 : 		}
; 1459 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1460 : 
; 1461 : 	iterator erase(const_iterator _First_arg,
; 1462 : 		const_iterator _Last_arg)
; 1463 : 		{	// erase [_First, _Last)
; 1464 : 		if (_First_arg == begin() && _Last_arg == end())
; 1465 : 			clear();
; 1466 : 		else if (_First_arg != _Last_arg)
; 1467 : 			{	// clear partial
; 1468 : 			iterator _First = _Make_iter(_First_arg);
; 1469 : 			iterator _Last = _Make_iter(_Last_arg);
; 1470 : 
; 1471 : 			if (_First != _Last)
; 1472 : 				{	// worth doing, copy down over hole
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 				if (_Last < _First || _VICONT(_First) != this
; 1475 : 					|| _VIPTR(_First) < this->_Myfirst
; 1476 : 					|| this->_Mylast < _VIPTR(_Last))
; 1477 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1478 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1479 : 					_VIPTR(_First));
; 1480 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1484 : 					_VIPTR(_First));
; 1485 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1486 : 
; 1487 : 				_Destroy(_Ptr, this->_Mylast);
; 1488 : 				this->_Mylast = _Ptr;
; 1489 : 				}
; 1490 : 			}
; 1491 : 		return (_Make_iter(_First_arg));
; 1492 : 		}
; 1493 : 
; 1494 : 	void _Pop_back_n(size_type _Count)
; 1495 : 		{	// erase _Count elements at end
; 1496 : 		pointer _Ptr = this->_Mylast - _Count;
; 1497 : 
; 1498 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1499 : 		_Orphan_range(_Ptr, this->_Mylast);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 
; 1502 : 		_Destroy(_Ptr, this->_Mylast);
; 1503 : 		this->_Mylast = _Ptr;
; 1504 : 		}
; 1505 : 
; 1506 : 	void clear() _NOEXCEPT
; 1507 : 		{	// erase all
; 1508 : 		this->_Orphan_all();
; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1510 : 		this->_Mylast = this->_Myfirst;
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		{	// exchange contents with _Right
; 1515 : 		if (this == &_Right)
; 1516 : 			;	// same object, do nothing
; 1517 : 		else if (this->_Getal() == _Right._Getal())
; 1518 : 			{	// same allocator, swap control information
; 1519 : 			this->_Swap_all(_Right);
; 1520 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1521 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1522 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1529 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1530 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1531 : 			}
; 1532 : 
; 1533 : 		else
; 1534 : 			{	// containers are incompatible
; 1535 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1536 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1537 : 
; 1538 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1539 : 			_XSTD terminate();
; 1540 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1541 : 			}
; 1542 : 		}
; 1543 : 
; 1544 : protected:
; 1545 : 	bool _Buy(size_type _Capacity)
; 1546 : 		{	// allocate array with _Capacity elements
; 1547 : 		this->_Myfirst = pointer();
; 1548 : 		this->_Mylast = pointer();
; 1549 : 		this->_Myend = pointer();
; 1550 : 
; 1551 : 		if (_Capacity == 0)
; 1552 : 			return (false);
; 1553 : 		else if (max_size() < _Capacity)
; 1554 : 			_Xlen();	// result too long
; 1555 : 		else
; 1556 : 			{	// nonempty array, allocate storage
; 1557 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1558 : 			this->_Mylast = this->_Myfirst;
; 1559 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1560 : 			}
; 1561 : 		return (true);
; 1562 : 		}
; 1563 : 
; 1564 : 	void _Destroy(pointer _First, pointer _Last)
; 1565 : 		{	// destroy [_First, _Last) using allocator
; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}
; 1569 : 
; 1570 : 	size_type _Grow_to(size_type _Count) const
; 1571 : 		{	// grow by 50% or at least to _Count
; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1576 : 		if (_Capacity < _Count)
; 1577 : 			_Capacity = _Count;
; 1578 : 		return (_Capacity);
; 1579 : 		}
; 1580 : 
; 1581 : 	bool _Inside(const value_type *_Ptr) const
; 1582 : 		{	// test if _Ptr points inside vector
; 1583 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);
; 1584 : 		}
; 1585 : 
; 1586 : 	void _Reallocate(size_type _Count)
; 1587 : 		{	// move to array of exactly _Count elements
; 1588 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1589 : 
; 1590 : 		_TRY_BEGIN
; 1591 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);
; 1592 : 		_CATCH_ALL
; 1593 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1594 : 		_RERAISE;
; 1595 : 		_CATCH_END
; 1596 : 
; 1597 : 		size_type _Size = size();
; 1598 : 		if (this->_Myfirst != pointer())
; 1599 : 			{	// destroy and deallocate old array
; 1600 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1601 : 			this->_Getal().deallocate(this->_Myfirst,
; 1602 : 				this->_Myend - this->_Myfirst);
; 1603 : 			}
; 1604 : 
; 1605 : 		this->_Orphan_all();
; 1606 : 		this->_Myend = _Ptr + _Count;
; 1607 : 		this->_Mylast = _Ptr + _Size;
; 1608 : 		this->_Myfirst = _Ptr;
; 1609 : 		}
; 1610 : 
; 1611 : 	void _Reserve(size_type _Count)
; 1612 : 		{	// ensure room for _Count new elements, grow exponentially
; 1613 : 		if (_Unused_capacity() < _Count)
; 1614 : 			{	// need more room, try to get it
; 1615 : 			if (max_size() - size() < _Count)
; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));
; 1618 : 			}
; 1619 : 		}
; 1620 : 
; 1621 : 	void _Tidy()
; 1622 : 		{	// free all storage
; 1623 : 		if (this->_Myfirst != pointer())

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 1d		 je	 SHORT $LN3@vector
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
; File a:\vs\vc\include\vector

; 1629 : 			this->_Myfirst = pointer();

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1630 : 			this->_Mylast = pointer();

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1631 : 			this->_Myend = pointer();

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN3@vector:
  00026	5e		 pop	 esi

; 945  : 		_Tidy();
; 946  : 		}

  00027	c3		 ret	 0
??1?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAE@XZ ENDP ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::~vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??0?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAE@XZ PROC ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >, COMDAT
; _this$ = ecx

; 482  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 681  : 		}

  00006	8b c1		 mov	 eax, ecx

; 483  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 484  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 681  : 		}

  00016	c3		 ret	 0
??0?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAE@XZ ENDP ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> > >::_Getal, COMDAT
; _this$ = ecx

; 641  : 		{	// get reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 642  : 		return (_Alty());

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 643  : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCDungeonModelInstance@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCDungeonModelInstance@@@1@@Z PROC ; std::_Vector_alloc<0,std::_Vec_base_types<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> > >::_Vector_alloc<0,std::_Vec_base_types<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> > >, COMDAT
; _this$ = ecx

; 482  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 589  : 		{	// construct allocator from _Al
; 590  : 		}

  00006	8b c1		 mov	 eax, ecx

; 483  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 484  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 589  : 		{	// construct allocator from _Al
; 590  : 		}

  00016	c2 04 00	 ret	 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCDungeonModelInstance@@@1@@Z ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> > >::_Vector_alloc<0,std::_Vec_base_types<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> >::_Vector_val<std::_Simple_types<CDungeonModelInstance *> >, COMDAT
; _this$ = ecx

; 481  : 		{	// initialize values
; 482  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 483  : 		_Mylast = pointer();
; 484  : 		_Myend = pointer();
; 485  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@PAVCDungeonModelInstance@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<CDungeonModelInstance *> >::_Vector_val<std::_Simple_types<CDungeonModelInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<CDungeonModelInstance *> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (_Mytraits::max_size(*this));

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<CDungeonModelInstance *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAEXPAPAVCDungeonModelInstance@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAEXPAPAVCDungeonModelInstance@@I@Z PROC ; std::_Wrap_alloc<std::allocator<CDungeonModelInstance *> >::deallocate, COMDAT
; _this$ = ecx

; 857  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 858  : 		_Mybase::deallocate(_Ptr, _Count);
; 859  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAEXPAPAVCDungeonModelInstance@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<CDungeonModelInstance *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAEPAPAVCDungeonModelInstance@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAEPAPAVCDungeonModelInstance@@I@Z PROC ; std::_Wrap_alloc<std::allocator<CDungeonModelInstance *> >::allocate, COMDAT
; _this$ = ecx

; 846  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 19		 je	 SHORT $LN6@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00011	77 18		 ja	 SHORT $LN14@allocate
  00013	c1 e0 02	 shl	 eax, 2
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	74 06		 je	 SHORT $LN14@allocate
$LN6@allocate:

; 847  : 		return (_Mybase::allocate(_Count));

  00025	8b c1		 mov	 eax, ecx

; 848  : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN14@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002b	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN16@allocate:
$LN13@allocate:
  00030	cc		 int	 3
?allocate@?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAEPAPAVCDungeonModelInstance@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<CDungeonModelInstance *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<CDungeonModelInstance *> >::_Wrap_alloc<std::allocator<CDungeonModelInstance *> >, COMDAT
; _this$ = ecx

; 802  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<CDungeonModelInstance *> >::_Wrap_alloc<std::allocator<CDungeonModelInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@SAIABV?$allocator@PAVCDungeonModelInstance@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@SAIABV?$allocator@PAVCDungeonModelInstance@@@2@@Z PROC ; std::allocator_traits<std::allocator<CDungeonModelInstance *> >::max_size, COMDAT

; 735  : 		return (_Al.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 736  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@SAIABV?$allocator@PAVCDungeonModelInstance@@@2@@Z ENDP ; std::allocator_traits<std::allocator<CDungeonModelInstance *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@PAVCDungeonModelInstance@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@PAVCDungeonModelInstance@@@std@@QBEIXZ PROC ; std::allocator<CDungeonModelInstance *>::max_size, COMDAT
; _this$ = ecx

; 612  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 613  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@PAVCDungeonModelInstance@@@std@@QBEIXZ ENDP ; std::allocator<CDungeonModelInstance *>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?construct@?$allocator@PAVCDungeonModelInstance@@@std@@QAEXPAPAVCDungeonModelInstance@@ABQAV3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAVCDungeonModelInstance@@@std@@QAEXPAPAVCDungeonModelInstance@@ABQAV3@@Z PROC ; std::allocator<CDungeonModelInstance *>::construct, COMDAT
; _this$ = ecx

; 592  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 593  : 		::new ((void *)_Ptr) _Ty(_Val);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 594  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?construct@?$allocator@PAVCDungeonModelInstance@@@std@@QAEXPAPAVCDungeonModelInstance@@ABQAV3@@Z ENDP ; std::allocator<CDungeonModelInstance *>::construct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@PAVCDungeonModelInstance@@@std@@QAEPAPAVCDungeonModelInstance@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVCDungeonModelInstance@@@std@@QAEPAPAVCDungeonModelInstance@@I@Z PROC ; std::allocator<CDungeonModelInstance *>::allocate, COMDAT
; _this$ = ecx

; 577  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 19		 je	 SHORT $LN4@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00011	77 18		 ja	 SHORT $LN11@allocate
  00013	c1 e0 02	 shl	 eax, 2
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	74 06		 je	 SHORT $LN11@allocate
$LN4@allocate:

; 578  : 		return (_Allocate(_Count, (pointer)0));

  00025	8b c1		 mov	 eax, ecx

; 579  : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN11@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002b	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN13@allocate:
$LN10@allocate:
  00030	cc		 int	 3
?allocate@?$allocator@PAVCDungeonModelInstance@@@std@@QAEPAPAVCDungeonModelInstance@@I@Z ENDP ; std::allocator<CDungeonModelInstance *>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@PAVCDungeonModelInstance@@@std@@QAEXPAPAVCDungeonModelInstance@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVCDungeonModelInstance@@@std@@QAEXPAPAVCDungeonModelInstance@@I@Z PROC ; std::allocator<CDungeonModelInstance *>::deallocate, COMDAT
; _this$ = ecx

; 572  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 574  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$allocator@PAVCDungeonModelInstance@@@std@@QAEXPAPAVCDungeonModelInstance@@I@Z ENDP ; std::allocator<CDungeonModelInstance *>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??0?$allocator@PAVCDungeonModelInstance@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@PAVCDungeonModelInstance@@@std@@QAE@XZ PROC ; std::allocator<CDungeonModelInstance *>::allocator<CDungeonModelInstance *>, COMDAT
; _this$ = ecx

; 553  : 		{	// construct default allocator (do nothing)
; 554  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@PAVCDungeonModelInstance@@@std@@QAE@XZ ENDP ; std::allocator<CDungeonModelInstance *>::allocator<CDungeonModelInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
;	COMDAT ?__Initialize@CDungeonBlock@@IAEXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?__Initialize@CDungeonBlock@@IAEXXZ PROC		; CDungeonBlock::__Initialize, COMDAT
; _this$ = ecx

; 237  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	0f 57 c0	 xorps	 xmm0, xmm0
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp+8], 0
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp

; 238  : 	m_v3Center = D3DXVECTOR3(0.0f, 0.0f, 0.0f);

  00010	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp+8]
  00013	0f 14 c0	 unpcklps xmm0, xmm0
  00016	66 0f d6 81 7c
	01 00 00	 movq	 QWORD PTR [ecx+380], xmm0
  0001e	89 81 84 01 00
	00		 mov	 DWORD PTR [ecx+388], eax

; 239  : 	m_fRadius = 0.0f;

  00024	c7 81 88 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+392], 0

; 240  : 
; 241  : 	m_pThing = NULL;

  0002e	c7 81 8c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+396], 0

; 242  : }

  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?__Initialize@CDungeonBlock@@IAEXXZ ENDP		; CDungeonBlock::__Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.h
;	COMDAT ?OnRenderPCBlocker@CDungeonBlock@@UAEXXZ
_TEXT	SEGMENT
?OnRenderPCBlocker@CDungeonBlock@@UAEXXZ PROC		; CDungeonBlock::OnRenderPCBlocker, COMDAT
; _this$ = ecx

; 44   : 		void OnRenderPCBlocker() {}

  00000	c3		 ret	 0
?OnRenderPCBlocker@CDungeonBlock@@UAEXXZ ENDP		; CDungeonBlock::OnRenderPCBlocker
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
; File a:\vs\vc\include\algorithm
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\algorithm
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
; File a:\vs\vc\include\algorithm
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
;	COMDAT ?OnRenderShadow@CDungeonBlock@@UAEXXZ
_TEXT	SEGMENT
?OnRenderShadow@CDungeonBlock@@UAEXXZ PROC		; CDungeonBlock::OnRenderShadow, COMDAT
; _this$ = ecx
; File a:\vs\vc\include\algorithm

; 33   : 	_For_each(_Unchecked(_First), _Unchecked(_Last), _Func);

  00000	8b 81 94 01 00
	00		 mov	 eax, DWORD PTR [ecx+404]
  00006	53		 push	 ebx
  00007	56		 push	 esi
; File a:\vs\vc\include\vector

; 1025 : 		return (iterator(this->_Myfirst, this));

  00008	8b b1 90 01 00
	00		 mov	 esi, DWORD PTR [ecx+400]
  0000e	8b d8		 mov	 ebx, eax
  00010	2b de		 sub	 ebx, esi
  00012	33 c9		 xor	 ecx, ecx
  00014	83 c3 03	 add	 ebx, 3
  00017	c1 eb 02	 shr	 ebx, 2
  0001a	57		 push	 edi
  0001b	33 ff		 xor	 edi, edi
  0001d	3b f0		 cmp	 esi, eax
  0001f	0f 47 d9	 cmova	 ebx, ecx
; File a:\vs\vc\include\algorithm

; 23   : 	for (; _First != _Last; ++_First)

  00022	85 db		 test	 ebx, ebx
  00024	74 0f		 je	 SHORT $LN29@OnRenderSh
$LL31@OnRenderSh:
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp

; 99   : 		pInstance->RenderDungeonBlockShadow();

  00026	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00028	e8 00 00 00 00	 call	 ?RenderDungeonBlockShadow@CDungeonModelInstance@@QAEXXZ ; CDungeonModelInstance::RenderDungeonBlockShadow
; File a:\vs\vc\include\algorithm

; 23   : 	for (; _First != _Last; ++_First)

  0002d	47		 inc	 edi
  0002e	8d 76 04	 lea	 esi, DWORD PTR [esi+4]
  00031	3b fb		 cmp	 edi, ebx
  00033	75 f1		 jne	 SHORT $LL31@OnRenderSh
$LN29@OnRenderSh:
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp

; 106  : }

  00038	c3		 ret	 0
?OnRenderShadow@CDungeonBlock@@UAEXXZ ENDP		; CDungeonBlock::OnRenderShadow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.h
;	COMDAT ?OnRenderToShadowMap@CDungeonBlock@@UAEXXZ
_TEXT	SEGMENT
?OnRenderToShadowMap@CDungeonBlock@@UAEXXZ PROC		; CDungeonBlock::OnRenderToShadowMap, COMDAT
; _this$ = ecx

; 42   : 		void OnRenderToShadowMap() {}

  00000	c3		 ret	 0
?OnRenderToShadowMap@CDungeonBlock@@UAEXXZ ENDP		; CDungeonBlock::OnRenderToShadowMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.h
;	COMDAT ?OnBlendRender@CDungeonBlock@@UAEXXZ
_TEXT	SEGMENT
?OnBlendRender@CDungeonBlock@@UAEXXZ PROC		; CDungeonBlock::OnBlendRender, COMDAT
; _this$ = ecx

; 41   : 		void OnBlendRender() {}

  00000	c3		 ret	 0
?OnBlendRender@CDungeonBlock@@UAEXXZ ENDP		; CDungeonBlock::OnBlendRender
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.h
;	COMDAT ?OnRender@CDungeonBlock@@UAEXXZ
_TEXT	SEGMENT
?OnRender@CDungeonBlock@@UAEXXZ PROC			; CDungeonBlock::OnRender, COMDAT
; _this$ = ecx

; 40   : 		void OnRender() {}

  00000	c3		 ret	 0
?OnRender@CDungeonBlock@@UAEXXZ ENDP			; CDungeonBlock::OnRender
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
;	COMDAT ?OnGetObjectHeight@CDungeonBlock@@UAE_NMMPAM@Z
_TEXT	SEGMENT
_fX$ = 8						; size = 4
_fY$ = 12						; size = 4
_pfHeight$ = 16						; size = 4
?OnGetObjectHeight@CDungeonBlock@@UAE_NMMPAM@Z PROC	; CDungeonBlock::OnGetObjectHeight, COMDAT
; _this$ = ecx

; 149  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 150  : 	if (m_pHeightAttributeInstance && m_pHeightAttributeInstance->GetHeight(fX, fY, pfHeight))

  00003	8b 89 78 01 00
	00		 mov	 ecx, DWORD PTR [ecx+376]
  00009	85 c9		 test	 ecx, ecx
  0000b	74 2a		 je	 SHORT $LN1@OnGetObjec
  0000d	ff 75 10	 push	 DWORD PTR _pfHeight$[ebp]
  00010	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fY$[ebp]
  00015	83 ec 08	 sub	 esp, 8
  00018	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0001e	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fX$[ebp]
  00023	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00028	e8 00 00 00 00	 call	 ?GetHeight@CAttributeInstance@@QAEHMMPAM@Z ; CAttributeInstance::GetHeight
  0002d	85 c0		 test	 eax, eax
  0002f	74 06		 je	 SHORT $LN1@OnGetObjec

; 151  : 		return true;

  00031	b0 01		 mov	 al, 1

; 153  : }

  00033	5d		 pop	 ebp
  00034	c2 0c 00	 ret	 12			; 0000000cH
$LN1@OnGetObjec:

; 152  : 	return false;

  00037	32 c0		 xor	 al, al

; 153  : }

  00039	5d		 pop	 ebp
  0003a	c2 0c 00	 ret	 12			; 0000000cH
?OnGetObjectHeight@CDungeonBlock@@UAE_NMMPAM@Z ENDP	; CDungeonBlock::OnGetObjectHeight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
;	COMDAT ?OnUpdateHeighInstance@CDungeonBlock@@UAEXPAVCAttributeInstance@@@Z
_TEXT	SEGMENT
_pAttributeInstance$ = 8				; size = 4
?OnUpdateHeighInstance@CDungeonBlock@@UAEXPAVCAttributeInstance@@@Z PROC ; CDungeonBlock::OnUpdateHeighInstance, COMDAT
; _this$ = ecx

; 143  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 146  : }

  00003	5d		 pop	 ebp

; 144  : 	assert(pAttributeInstance);
; 145  : 	SetHeightInstance(pAttributeInstance);	

  00004	e9 00 00 00 00	 jmp	 ?SetHeightInstance@CGraphicObjectInstance@@QAEXPAVCAttributeInstance@@@Z ; CGraphicObjectInstance::SetHeightInstance
?OnUpdateHeighInstance@CDungeonBlock@@UAEXPAVCAttributeInstance@@@Z ENDP ; CDungeonBlock::OnUpdateHeighInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
;	COMDAT ?OnUpdateCollisionData@CDungeonBlock@@UAEXPBV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@@Z
_TEXT	SEGMENT
_pscdVector$ = 8					; size = 4
?OnUpdateCollisionData@CDungeonBlock@@UAEXPBV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@@Z PROC ; CDungeonBlock::OnUpdateCollisionData, COMDAT
; _this$ = ecx

; 133  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 136  : 	for(it = pscdVector->begin();it!=pscdVector->end();++it)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _pscdVector$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx
  0000b	8b 33		 mov	 esi, DWORD PTR [ebx]
; File a:\vs\vc\include\vector

; 205  : 		return (this->_Ptr == _Right._Ptr);

  0000d	3b 73 04	 cmp	 esi, DWORD PTR [ebx+4]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp

; 136  : 	for(it = pscdVector->begin();it!=pscdVector->end();++it)

  00010	74 18		 je	 SHORT $LN1@OnUpdateCo
$LL14@OnUpdateCo:

; 137  : 	{
; 138  : 		AddCollision(&(*it),&GetTransform());

  00012	8b cf		 mov	 ecx, edi
  00014	e8 00 00 00 00	 call	 ?GetTransform@CGraphicObjectInstance@@QAEAAUD3DXMATRIX@@XZ ; CGraphicObjectInstance::GetTransform
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	8b cf		 mov	 ecx, edi
  0001d	e8 00 00 00 00	 call	 ?AddCollision@CGraphicObjectInstance@@QAEXPBVCStaticCollisionData@@PBUD3DXMATRIX@@@Z ; CGraphicObjectInstance::AddCollision
; File a:\vs\vc\include\vector

; 112  : 		++this->_Ptr;

  00022	83 c6 50	 add	 esi, 80			; 00000050H

; 205  : 		return (this->_Ptr == _Right._Ptr);

  00025	3b 73 04	 cmp	 esi, DWORD PTR [ebx+4]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp

; 136  : 	for(it = pscdVector->begin();it!=pscdVector->end();++it)

  00028	75 e8		 jne	 SHORT $LL14@OnUpdateCo
$LN1@OnUpdateCo:
  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx

; 139  : 	}
; 140  : }

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?OnUpdateCollisionData@CDungeonBlock@@UAEXPBV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@@Z ENDP ; CDungeonBlock::OnUpdateCollisionData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
;	COMDAT ?GetBoundingSphere@CDungeonBlock@@UAE_NAAUD3DXVECTOR3@@AAM@Z
_TEXT	SEGMENT
_v3Center$ = 8						; size = 4
_fRadius$ = 12						; size = 4
?GetBoundingSphere@CDungeonBlock@@UAE_NAAUD3DXVECTOR3@@AAM@Z PROC ; CDungeonBlock::GetBoundingSphere, COMDAT
; _this$ = ecx

; 125  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 126  : 	v3Center = m_v3Center;

  00003	f3 0f 7e 81 7c
	01 00 00	 movq	 xmm0, QWORD PTR [ecx+380]
  0000b	56		 push	 esi
  0000c	8b 75 08	 mov	 esi, DWORD PTR _v3Center$[ebp]
  0000f	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
  00013	8b 81 84 01 00
	00		 mov	 eax, DWORD PTR [ecx+388]
  00019	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 127  : 	fRadius = m_fRadius;

  0001c	8b 45 0c	 mov	 eax, DWORD PTR _fRadius$[ebp]
  0001f	8b 91 88 01 00
	00		 mov	 edx, DWORD PTR [ecx+392]
  00025	89 10		 mov	 DWORD PTR [eax], edx

; 128  : 	D3DXVec3TransformCoord(&v3Center, &v3Center, &GetTransform());

  00027	e8 00 00 00 00	 call	 ?GetTransform@CGraphicObjectInstance@@QAEAAUD3DXMATRIX@@XZ ; CGraphicObjectInstance::GetTransform
  0002c	50		 push	 eax
  0002d	56		 push	 esi
  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12

; 129  : 	return true;

  00034	b0 01		 mov	 al, 1
  00036	5e		 pop	 esi

; 130  : }

  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
?GetBoundingSphere@CDungeonBlock@@UAE_NAAUD3DXVECTOR3@@AAM@Z ENDP ; CDungeonBlock::GetBoundingSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
; File a:\vs\vc\include\algorithm
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
;	COMDAT ?Render@CDungeonBlock@@QAEXXZ
_TEXT	SEGMENT
__Func$ = -4						; size = 1
?Render@CDungeonBlock@@QAEXXZ PROC			; CDungeonBlock::Render, COMDAT
; _this$ = ecx

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File a:\vs\vc\include\algorithm

; 33   : 	_For_each(_Unchecked(_First), _Unchecked(_Last), _Func);

  00004	8d 45 fc	 lea	 eax, DWORD PTR __Func$[ebp]
  00007	50		 push	 eax
  00008	ff b1 94 01 00
	00		 push	 DWORD PTR [ecx+404]
  0000e	ff b1 90 01 00
	00		 push	 DWORD PTR [ecx+400]
  00014	e8 00 00 00 00	 call	 ??$_For_each@PAPAVCDungeonModelInstance@@UFRender@@@std@@YAXPAPAVCDungeonModelInstance@@0AAUFRender@@@Z ; std::_For_each<CDungeonModelInstance * *,FRender>
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp

; 93   : }

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?Render@CDungeonBlock@@QAEXXZ ENDP			; CDungeonBlock::Render
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
; File a:\vs\vc\include\algorithm
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
; File a:\vs\vc\include\algorithm
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
;	COMDAT ?Update@CDungeonBlock@@QAEXXZ
_TEXT	SEGMENT
__Func$ = -8						; size = 8
_Update$ = -8						; size = 8
?Update@CDungeonBlock@@QAEXXZ PROC			; CDungeonBlock::Update, COMDAT
; _this$ = ecx

; 70   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 71   : 	Transform();

  00009	e8 00 00 00 00	 call	 ?Transform@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Transform

; 72   : 
; 73   : 	FUpdate Update;
; 74   : 	Update.fElapsedTime = 0.0f;

  0000e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _Update$[ebp], 0

; 75   : 	Update.pmatWorld = &m_worldMatrix;

  00015	8d 56 6c	 lea	 edx, DWORD PTR [esi+108]

; 76   : 	for_each(m_ModelInstanceContainer.begin(), m_ModelInstanceContainer.end(), Update);

  00018	8b 45 f8	 mov	 eax, DWORD PTR _Update$[ebp]
  0001b	89 45 f8	 mov	 DWORD PTR __Func$[ebp], eax
; File a:\vs\vc\include\algorithm

; 33   : 	_For_each(_Unchecked(_First), _Unchecked(_Last), _Func);

  0001e	8d 45 f8	 lea	 eax, DWORD PTR __Func$[ebp]
  00021	50		 push	 eax
  00022	ff b6 94 01 00
	00		 push	 DWORD PTR [esi+404]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp

; 76   : 	for_each(m_ModelInstanceContainer.begin(), m_ModelInstanceContainer.end(), Update);

  00028	89 55 fc	 mov	 DWORD PTR __Func$[ebp+4], edx
; File a:\vs\vc\include\algorithm

; 33   : 	_For_each(_Unchecked(_First), _Unchecked(_Last), _Func);

  0002b	ff b6 90 01 00
	00		 push	 DWORD PTR [esi+400]
  00031	e8 00 00 00 00	 call	 ??$_For_each@PAPAVCDungeonModelInstance@@UFUpdate@@@std@@YAXPAPAVCDungeonModelInstance@@0AAUFUpdate@@@Z ; std::_For_each<CDungeonModelInstance * *,FUpdate>
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH
  00039	5e		 pop	 esi
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp

; 77   : }

  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?Update@CDungeonBlock@@QAEXXZ ENDP			; CDungeonBlock::Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
;	COMDAT ?GetBoundBox@CDungeonBlock@@QAEXPAUD3DXVECTOR3@@0@Z
_TEXT	SEGMENT
_this$1$ = -32						; size = 4
_v3Max$1 = -28						; size = 12
_v3Min$2 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_pv3Min$ = 8						; size = 4
_pv3Max$ = 12						; size = 4
?GetBoundBox@CDungeonBlock@@QAEXPAUD3DXVECTOR3@@0@Z PROC ; CDungeonBlock::GetBoundBox, COMDAT
; _this$ = ecx

; 178  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _pv3Min$[ebp]
  00014	8b c1		 mov	 eax, ecx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7d 0c	 mov	 edi, DWORD PTR _pv3Max$[ebp]
; File a:\vs\vc\include\vector

; 47   : 		{	// construct with pointer _Parg

  0001b	8b b0 90 01 00
	00		 mov	 esi, DWORD PTR [eax+400]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp

; 179  : 	pv3Min->x = +10000000.0f;

  00021	c7 03 80 96 18
	4b		 mov	 DWORD PTR [ebx], 1259902592 ; 4b189680H

; 180  : 	pv3Min->y = +10000000.0f;

  00027	c7 43 04 80 96
	18 4b		 mov	 DWORD PTR [ebx+4], 1259902592 ; 4b189680H

; 181  : 	pv3Min->z = +10000000.0f;

  0002e	c7 43 08 80 96
	18 4b		 mov	 DWORD PTR [ebx+8], 1259902592 ; 4b189680H
  00035	89 45 e0	 mov	 DWORD PTR _this$1$[ebp], eax

; 182  : 	pv3Max->x = -10000000.0f;

  00038	c7 07 80 96 18
	cb		 mov	 DWORD PTR [edi], -887581056 ; cb189680H

; 183  : 	pv3Max->y = -10000000.0f;

  0003e	c7 47 04 80 96
	18 cb		 mov	 DWORD PTR [edi+4], -887581056 ; cb189680H

; 184  : 	pv3Max->z = -10000000.0f;

  00045	c7 47 08 80 96
	18 cb		 mov	 DWORD PTR [edi+8], -887581056 ; cb189680H
; File a:\vs\vc\include\vector

; 205  : 		return (this->_Ptr == _Right._Ptr);

  0004c	3b b0 94 01 00
	00		 cmp	 esi, DWORD PTR [eax+404]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp

; 187  : 	for (; itor != m_ModelInstanceContainer.end(); ++itor)

  00052	0f 84 93 00 00
	00		 je	 $LN1@GetBoundBo
$LL28@GetBoundBo:

; 188  : 	{
; 189  : 		CDungeonModelInstance * pInstance = *itor;
; 190  : 
; 191  : 		D3DXVECTOR3 v3Min;
; 192  : 		D3DXVECTOR3 v3Max;
; 193  : 		pInstance->GetBoundBox(&v3Min, &v3Max);

  00058	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0005a	8d 45 e4	 lea	 eax, DWORD PTR _v3Max$1[ebp]
  0005d	50		 push	 eax
  0005e	8d 45 f0	 lea	 eax, DWORD PTR _v3Min$2[ebp]
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ?GetBoundBox@CGrannyModelInstance@@QAEXPAUD3DXVECTOR3@@0@Z ; CGrannyModelInstance::GetBoundBox

; 194  : 
; 195  : 		pv3Min->x = min(v3Min.x, pv3Min->x);

  00067	f3 0f 10 0b	 movss	 xmm1, DWORD PTR [ebx]
  0006b	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _v3Min$2[ebp]
  00070	0f 2f c8	 comiss	 xmm1, xmm0
  00073	76 03		 jbe	 SHORT $LN6@GetBoundBo
  00075	0f 28 c8	 movaps	 xmm1, xmm0
$LN6@GetBoundBo:
  00078	f3 0f 11 0b	 movss	 DWORD PTR [ebx], xmm1

; 196  : 		pv3Min->y = min(v3Min.x, pv3Min->y);

  0007c	f3 0f 10 4b 04	 movss	 xmm1, DWORD PTR [ebx+4]
  00081	0f 2f c8	 comiss	 xmm1, xmm0
  00084	76 03		 jbe	 SHORT $LN8@GetBoundBo
  00086	0f 28 c8	 movaps	 xmm1, xmm0
$LN8@GetBoundBo:
  00089	f3 0f 11 4b 04	 movss	 DWORD PTR [ebx+4], xmm1

; 197  : 		pv3Min->z = min(v3Min.x, pv3Min->z);

  0008e	f3 0f 10 4b 08	 movss	 xmm1, DWORD PTR [ebx+8]
  00093	0f 2f c8	 comiss	 xmm1, xmm0
  00096	77 03		 ja	 SHORT $LN11@GetBoundBo
  00098	0f 28 c1	 movaps	 xmm0, xmm1
$LN11@GetBoundBo:
  0009b	f3 0f 11 43 08	 movss	 DWORD PTR [ebx+8], xmm0

; 198  : 		pv3Max->x = max(v3Max.x, pv3Max->x);

  000a0	f3 0f 10 0f	 movss	 xmm1, DWORD PTR [edi]
  000a4	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _v3Max$1[ebp]
  000a9	0f 2f c1	 comiss	 xmm0, xmm1
  000ac	76 03		 jbe	 SHORT $LN12@GetBoundBo
  000ae	0f 28 c8	 movaps	 xmm1, xmm0
$LN12@GetBoundBo:
  000b1	f3 0f 11 0f	 movss	 DWORD PTR [edi], xmm1

; 199  : 		pv3Max->y = max(v3Max.x, pv3Max->y);

  000b5	f3 0f 10 4f 04	 movss	 xmm1, DWORD PTR [edi+4]
  000ba	0f 2f c1	 comiss	 xmm0, xmm1
  000bd	76 03		 jbe	 SHORT $LN14@GetBoundBo
  000bf	0f 28 c8	 movaps	 xmm1, xmm0
$LN14@GetBoundBo:
  000c2	f3 0f 11 4f 04	 movss	 DWORD PTR [edi+4], xmm1

; 200  : 		pv3Max->z = max(v3Max.x, pv3Max->z);

  000c7	f3 0f 10 4f 08	 movss	 xmm1, DWORD PTR [edi+8]
  000cc	0f 2f c1	 comiss	 xmm0, xmm1
  000cf	77 03		 ja	 SHORT $LN17@GetBoundBo
  000d1	0f 28 c1	 movaps	 xmm0, xmm1
$LN17@GetBoundBo:
; File a:\vs\vc\include\vector

; 205  : 		return (this->_Ptr == _Right._Ptr);

  000d4	8b 45 e0	 mov	 eax, DWORD PTR _this$1$[ebp]

; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}
; 50   : 
; 51   : 	typedef pointer _Unchecked_type;
; 52   : 
; 53   : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 54   : 		{	// reset from unchecked iterator
; 55   : 		this->_Ptr = (_Tptr)_Right;
; 56   : 		return (*this);
; 57   : 		}
; 58   : 
; 59   : 	_Unchecked_type _Unchecked() const
; 60   : 		{	// make an unchecked iterator
; 61   : 		return (_Unchecked_type(this->_Ptr));
; 62   : 		}
; 63   : 
; 64   : 	reference operator*() const
; 65   : 		{	// return designated object
; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);
; 87   : 		}
; 88   : 
; 89   : 	pointer operator->() const
; 90   : 		{	// return pointer to class object
; 91   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 92   : 		}
; 93   : 
; 94   : 	_Myiter& operator++()
; 95   : 		{	// preincrement
; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;

  000d7	83 c6 04	 add	 esi, 4
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp

; 200  : 		pv3Max->z = max(v3Max.x, pv3Max->z);

  000da	f3 0f 11 47 08	 movss	 DWORD PTR [edi+8], xmm0
; File a:\vs\vc\include\vector

; 205  : 		return (this->_Ptr == _Right._Ptr);

  000df	3b b0 94 01 00
	00		 cmp	 esi, DWORD PTR [eax+404]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp

; 187  : 	for (; itor != m_ModelInstanceContainer.end(); ++itor)

  000e5	0f 85 6d ff ff
	ff		 jne	 $LL28@GetBoundBo
$LN1@GetBoundBo:

; 201  : 	}
; 202  : }

  000eb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ee	5f		 pop	 edi
  000ef	5e		 pop	 esi
  000f0	33 cd		 xor	 ecx, ebp
  000f2	5b		 pop	 ebx
  000f3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c2 08 00	 ret	 8
?GetBoundBox@CDungeonBlock@@QAEXPAUD3DXVECTOR3@@0@Z ENDP ; CDungeonBlock::GetBoundBox
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
;	COMDAT ?Intersect@CDungeonBlock@@QAE_NPAM00@Z
_TEXT	SEGMENT
_pfu$ = 8						; size = 4
_pfv$ = 12						; size = 4
_pft$ = 16						; size = 4
?Intersect@CDungeonBlock@@QAE_NPAM00@Z PROC		; CDungeonBlock::Intersect, COMDAT
; _this$ = ecx

; 165  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx
  00006	56		 push	 esi
  00007	57		 push	 edi
; File a:\vs\vc\include\vector

; 47   : 		{	// construct with pointer _Parg

  00008	8b b3 90 01 00
	00		 mov	 esi, DWORD PTR [ebx+400]

; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		_Compat(_Right);
; 205  : 		return (this->_Ptr == _Right._Ptr);

  0000e	3b b3 94 01 00
	00		 cmp	 esi, DWORD PTR [ebx+404]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp

; 167  : 	for (; itor != m_ModelInstanceContainer.end(); ++itor)

  00014	74 29		 je	 SHORT $LN2@Intersect
$LL17@Intersect:

; 168  : 	{
; 169  : 		CDungeonModelInstance * pInstance = *itor;
; 170  : 		if (pInstance->Intersect(&CGraphicObjectInstance::GetTransform(), pfu, pfv, pft))

  00016	ff 75 10	 push	 DWORD PTR _pft$[ebp]
  00019	8b 3e		 mov	 edi, DWORD PTR [esi]
  0001b	8b cb		 mov	 ecx, ebx
  0001d	ff 75 0c	 push	 DWORD PTR _pfv$[ebp]
  00020	ff 75 08	 push	 DWORD PTR _pfu$[ebp]
  00023	e8 00 00 00 00	 call	 ?GetTransform@CGraphicObjectInstance@@QAEAAUD3DXMATRIX@@XZ ; CGraphicObjectInstance::GetTransform
  00028	50		 push	 eax
  00029	8b cf		 mov	 ecx, edi
  0002b	e8 00 00 00 00	 call	 ?Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z ; CGrannyModelInstance::Intersect
  00030	84 c0		 test	 al, al
  00032	75 14		 jne	 SHORT $LN38@Intersect
; File a:\vs\vc\include\vector

; 112  : 		++this->_Ptr;

  00034	83 c6 04	 add	 esi, 4

; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		_Compat(_Right);
; 205  : 		return (this->_Ptr == _Right._Ptr);

  00037	3b b3 94 01 00
	00		 cmp	 esi, DWORD PTR [ebx+404]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp

; 167  : 	for (; itor != m_ModelInstanceContainer.end(); ++itor)

  0003d	75 d7		 jne	 SHORT $LL17@Intersect
$LN2@Intersect:
  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi

; 172  : 	}
; 173  : 
; 174  : 	return false;

  00041	32 c0		 xor	 al, al
  00043	5b		 pop	 ebx

; 175  : }

  00044	5d		 pop	 ebp
  00045	c2 0c 00	 ret	 12			; 0000000cH
$LN38@Intersect:
  00048	5f		 pop	 edi
  00049	5e		 pop	 esi

; 171  : 			return true;

  0004a	b0 01		 mov	 al, 1
  0004c	5b		 pop	 ebx

; 175  : }

  0004d	5d		 pop	 ebp
  0004e	c2 0c 00	 ret	 12			; 0000000cH
?Intersect@CDungeonBlock@@QAE_NPAM00@Z ENDP		; CDungeonBlock::Intersect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
;	COMDAT ?Load@CDungeonBlock@@QAE_NPBD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$1$ = -24						; size = 4
_i$1$ = -20						; size = 4
_pModelInstance$3 = -16					; size = 4
__$EHRec$ = -12						; size = 12
tv481 = 8						; size = 4
_c_szFileName$ = 8					; size = 4
?Load@CDungeonBlock@@QAE_NPBD@Z PROC			; CDungeonBlock::Load, COMDAT
; _this$ = ecx

; 205  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Load@CDungeonBlock@@QAE_NPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d e8	 mov	 DWORD PTR _this$1$[ebp], ebx

; 206  : 	Destroy();

  0002d	e8 00 00 00 00	 call	 ?Destroy@CDungeonBlock@@QAEXXZ ; CDungeonBlock::Destroy

; 207  : 
; 208  : 	m_pThing = (CGraphicThing *)CResourceManager::Instance().GetResourcePointer(c_szFileName);

  00032	8b 75 08	 mov	 esi, DWORD PTR _c_szFileName$[ebp]
  00035	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  0003b	56		 push	 esi
  0003c	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer

; 209  : 
; 210  : 	m_pThing->AddReference();

  00041	8b c8		 mov	 ecx, eax
  00043	89 83 8c 01 00
	00		 mov	 DWORD PTR [ebx+396], eax
  00049	e8 00 00 00 00	 call	 ?AddReference@CReferenceObject@@QAEXXZ ; CReferenceObject::AddReference

; 211  : 	if (m_pThing->GetModelCount() <= 0)

  0004e	8b 8b 8c 01 00
	00		 mov	 ecx, DWORD PTR [ebx+396]
  00054	e8 00 00 00 00	 call	 ?GetModelCount@CGraphicThing@@QBEHXZ ; CGraphicThing::GetModelCount

; 212  : 	{
; 213  : 		TraceError("CDungeonBlock::Load(filename=%s) - model count is %d\n", c_szFileName, m_pThing->GetModelCount());

  00059	8b 8b 8c 01 00
	00		 mov	 ecx, DWORD PTR [ebx+396]
  0005f	85 c0		 test	 eax, eax
  00061	7f 2a		 jg	 SHORT $LN4@Load
  00063	e8 00 00 00 00	 call	 ?GetModelCount@CGraphicThing@@QBEHXZ ; CGraphicThing::GetModelCount
  00068	50		 push	 eax
  00069	56		 push	 esi
  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ODGGGKHC@CDungeonBlock?3?3Load?$CIfilename?$DN?$CFs?$CJ@
  0006f	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00074	83 c4 0c	 add	 esp, 12			; 0000000cH

; 214  : 		return false;

  00077	32 c0		 xor	 al, al

; 234  : }

  00079	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00083	59		 pop	 ecx
  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 04 00	 ret	 4
$LN4@Load:

; 217  : 	m_ModelInstanceContainer.reserve(m_pThing->GetModelCount());

  0008d	e8 00 00 00 00	 call	 ?GetModelCount@CGraphicThing@@QBEHXZ ; CGraphicThing::GetModelCount
; File a:\vs\vc\include\vector

; 1010 : 		return (this->_Myend - this->_Myfirst);

  00092	8b 8b 98 01 00
	00		 mov	 ecx, DWORD PTR [ebx+408]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp

; 217  : 	m_ModelInstanceContainer.reserve(m_pThing->GetModelCount());

  00098	8d b3 90 01 00
	00		 lea	 esi, DWORD PTR [ebx+400]
; File a:\vs\vc\include\vector

; 1010 : 		return (this->_Myend - this->_Myfirst);

  0009e	2b 0e		 sub	 ecx, DWORD PTR [esi]
  000a0	c1 f9 02	 sar	 ecx, 2

; 1000 : 		if (capacity() < _Count)

  000a3	3b c8		 cmp	 ecx, eax
  000a5	73 19		 jae	 SHORT $LN13@Load

; 1001 : 			{	// something to do, check and reallocate
; 1002 : 			if (max_size() < _Count)

  000a7	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  000ac	76 0a		 jbe	 SHORT $LN12@Load

; 1584 : 		}
; 1585 : 
; 1586 : 	void _Reallocate(size_type _Count)
; 1587 : 		{	// move to array of exactly _Count elements
; 1588 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1589 : 
; 1590 : 		_TRY_BEGIN
; 1591 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);
; 1592 : 		_CATCH_ALL
; 1593 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1594 : 		_RERAISE;
; 1595 : 		_CATCH_END
; 1596 : 
; 1597 : 		size_type _Size = size();
; 1598 : 		if (this->_Myfirst != pointer())
; 1599 : 			{	// destroy and deallocate old array
; 1600 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1601 : 			this->_Getal().deallocate(this->_Myfirst,
; 1602 : 				this->_Myend - this->_Myfirst);
; 1603 : 			}
; 1604 : 
; 1605 : 		this->_Orphan_all();
; 1606 : 		this->_Myend = _Ptr + _Count;
; 1607 : 		this->_Mylast = _Ptr + _Size;
; 1608 : 		this->_Myfirst = _Ptr;
; 1609 : 		}
; 1610 : 
; 1611 : 	void _Reserve(size_type _Count)
; 1612 : 		{	// ensure room for _Count new elements, grow exponentially
; 1613 : 		if (_Unused_capacity() < _Count)
; 1614 : 			{	// need more room, try to get it
; 1615 : 			if (max_size() - size() < _Count)
; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));
; 1618 : 			}
; 1619 : 		}
; 1620 : 
; 1621 : 	void _Tidy()
; 1622 : 		{	// free all storage
; 1623 : 		if (this->_Myfirst != pointer())
; 1624 : 			{	// something to free, destroy and deallocate it
; 1625 : 			this->_Orphan_all();
; 1626 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1627 : 			this->_Getal().deallocate(this->_Myfirst,
; 1628 : 				this->_Myend - this->_Myfirst);
; 1629 : 			this->_Myfirst = pointer();
; 1630 : 			this->_Mylast = pointer();
; 1631 : 			this->_Myend = pointer();
; 1632 : 			}
; 1633 : 		}
; 1634 : 
; 1635 : 	template<class _Iter>
; 1636 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1637 : 		{	// copy initializing [_First, _Last), using allocator
; 1638 : 		_Alty _Alval(this->_Getal());
; 1639 : 		return (_Uninitialized_copy(_First, _Last,
; 1640 : 			_Ptr, _Alval));
; 1641 : 		}
; 1642 : 
; 1643 : 	template<class _Iter>
; 1644 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1645 : 		{	// move initializing [_First, _Last), using allocator
; 1646 : 		_Alty _Alval(this->_Getal());
; 1647 : 		return (_Uninitialized_move(_First, _Last,
; 1648 : 			_Ptr, _Alval));
; 1649 : 		}
; 1650 : 
; 1651 : 	iterator _Insert_n(const_iterator _Where,
; 1652 : 		size_type _Count, const value_type& _Val)
; 1653 : 		{	// insert _Count * _Val at _Where
; 1654 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1655 : 		if (_VICONT(_Where) != this
; 1656 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1657 : 			|| this->_Mylast < _VIPTR(_Where))
; 1658 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1659 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1660 : 
; 1661 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1662 : 		if (_Count == 0)
; 1663 : 			;
; 1664 : 		else if (_Unused_capacity() < _Count)
; 1665 : 			{	// not enough room, reallocate
; 1666 : 			if (max_size() - size() < _Count)
; 1667 : 				_Xlen();	// result too long
; 1668 : 
; 1669 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1670 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1671 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst;
; 1672 : 			int _Ncopied = 0;
; 1673 : 
; 1674 : 			_TRY_BEGIN
; 1675 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1676 : 				_STD addressof(_Val));	// add new stuff
; 1677 : 			++_Ncopied;
; 1678 : 			_Umove(this->_Myfirst, _VIPTR(_Where),
; 1679 : 				_Newvec);	// copy prefix
; 1680 : 			++_Ncopied;
; 1681 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1682 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1683 : 			_CATCH_ALL
; 1684 : 			if (1 < _Ncopied)
; 1685 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1686 : 			if (0 < _Ncopied)
; 1687 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1688 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1689 : 			_RERAISE;
; 1690 : 			_CATCH_END
; 1691 : 
; 1692 : 			_Count += size();
; 1693 : 			if (this->_Myfirst != pointer())
; 1694 : 				{	// destroy and deallocate old array
; 1695 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1696 : 				this->_Getal().deallocate(this->_Myfirst,
; 1697 : 					this->_Myend - this->_Myfirst);
; 1698 : 				}
; 1699 : 
; 1700 : 			this->_Orphan_all();
; 1701 : 			this->_Myend = _Newvec + _Capacity;
; 1702 : 			this->_Mylast = _Newvec + _Count;
; 1703 : 			this->_Myfirst = _Newvec;
; 1704 : 			}
; 1705 : 		else if ((size_type)(this->_Mylast - _VIPTR(_Where))
; 1706 : 			< _Count)
; 1707 : 			{	// new stuff spills off end
; 1708 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1709 : 
; 1710 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1711 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1712 : 
; 1713 : 			_TRY_BEGIN
; 1714 : 			_Ufill(this->_Mylast,
; 1715 : 				_Count - (this->_Mylast - _VIPTR(_Where)),
; 1716 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1717 : 			_CATCH_ALL
; 1718 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1719 : 				this->_Mylast + _Count);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			this->_Mylast += _Count;
; 1724 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1725 : 			_STD fill(_VIPTR(_Where), this->_Mylast - _Count,
; 1726 : 				_Tmp);	// insert up to old end
; 1727 : 			}
; 1728 : 		else
; 1729 : 			{	// new stuff can all be assigned
; 1730 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1731 : 
; 1732 : 			pointer _Oldend = this->_Mylast;
; 1733 : 			this->_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1734 : 				this->_Mylast);	// copy suffix
; 1735 : 
; 1736 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1737 : 			_Copy_backward(_VIPTR(_Where), _Oldend - _Count,
; 1738 : 				_Oldend);	// copy hole
; 1739 : 			_STD fill(_VIPTR(_Where),
; 1740 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1741 : 			}
; 1742 : 		return (begin() + _Off);
; 1743 : 		}
; 1744 : 
; 1745 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1746 : 		{	// copy initializing _Count * _Val, using allocator
; 1747 : 		_Alty _Alval(this->_Getal());
; 1748 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, _Alval);
; 1749 : 		return (_Ptr + _Count);
; 1750 : 		}
; 1751 : 
; 1752 : 	__declspec(noreturn) void _Xlen() const
; 1753 : 		{	// report a length_error
; 1754 : 		_Xlength_error("vector<T> too long");

  000ae	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  000b3	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN94@Load:
$LN12@Load:

; 1003 : 				_Xlen();
; 1004 : 			_Reallocate(_Count);

  000b8	50		 push	 eax
  000b9	8b ce		 mov	 ecx, esi
  000bb	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IAEXI@Z ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::_Reallocate
$LN13@Load:
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp

; 219  : 	for (int i = 0; i < m_pThing->GetModelCount(); ++i)

  000c0	8b 8b 8c 01 00
	00		 mov	 ecx, DWORD PTR [ebx+396]
  000c6	33 ff		 xor	 edi, edi
  000c8	89 7d ec	 mov	 DWORD PTR _i$1$[ebp], edi
  000cb	e8 00 00 00 00	 call	 ?GetModelCount@CGraphicThing@@QBEHXZ ; CGraphicThing::GetModelCount
  000d0	85 c0		 test	 eax, eax
  000d2	0f 8e ed 00 00
	00		 jle	 $LN1@Load
  000d8	8d 83 9c 01 00
	00		 lea	 eax, DWORD PTR [ebx+412]
  000de	89 45 08	 mov	 DWORD PTR tv481[ebp], eax
$LL3@Load:

; 220  : 	{
; 221  : 		CDungeonModelInstance * pModelInstance = new CDungeonModelInstance;

  000e1	6a 78		 push	 120			; 00000078H
  000e3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000e8	8b d8		 mov	 ebx, eax
  000ea	83 c4 04	 add	 esp, 4
  000ed	89 5d e4	 mov	 DWORD PTR $T2[ebp], ebx
  000f0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000f7	85 db		 test	 ebx, ebx
  000f9	74 0f		 je	 SHORT $LN7@Load

; 9    : 		CDungeonModelInstance() {}

  000fb	8b cb		 mov	 ecx, ebx
  000fd	e8 00 00 00 00	 call	 ??0CGrannyModelInstance@@QAE@XZ ; CGrannyModelInstance::CGrannyModelInstance
  00102	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7CDungeonModelInstance@@6B@

; 220  : 	{
; 221  : 		CDungeonModelInstance * pModelInstance = new CDungeonModelInstance;

  00108	eb 02		 jmp	 SHORT $LN8@Load
$LN7@Load:
  0010a	33 db		 xor	 ebx, ebx
$LN8@Load:

; 222  : 		pModelInstance->SetMainModelPointer(m_pThing->GetModelPointer(i), &m_kDeformableVertexBuffer);

  0010c	8b 4d e8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0010f	ff 75 08	 push	 DWORD PTR tv481[ebp]
  00112	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00119	57		 push	 edi
  0011a	8b 89 8c 01 00
	00		 mov	 ecx, DWORD PTR [ecx+396]
  00120	89 5d f0	 mov	 DWORD PTR _pModelInstance$3[ebp], ebx
  00123	e8 00 00 00 00	 call	 ?GetModelPointer@CGraphicThing@@QAEPAVCGrannyModel@@H@Z ; CGraphicThing::GetModelPointer
  00128	50		 push	 eax
  00129	8b cb		 mov	 ecx, ebx
  0012b	e8 00 00 00 00	 call	 ?SetMainModelPointer@CGrannyModelInstance@@QAEXPAVCGrannyModel@@PAVCGraphicVertexBuffer@@@Z ; CGrannyModelInstance::SetMainModelPointer

; 223  : 		DWORD dwVertexCount = pModelInstance->GetVertexCount();

  00130	8b cb		 mov	 ecx, ebx
  00132	e8 00 00 00 00	 call	 ?GetVertexCount@CGrannyModelInstance@@QAEKXZ ; CGrannyModelInstance::GetVertexCount

; 224  : 		m_kDeformableVertexBuffer.Destroy();

  00137	8b 4d 08	 mov	 ecx, DWORD PTR tv481[ebp]
  0013a	8b f8		 mov	 edi, eax
  0013c	e8 00 00 00 00	 call	 ?Destroy@CGraphicVertexBuffer@@QAEXXZ ; CGraphicVertexBuffer::Destroy

; 225  : 		m_kDeformableVertexBuffer.Create(
; 226  : 			dwVertexCount, 
; 227  : 			D3DFVF_XYZ|D3DFVF_NORMAL|D3DFVF_TEX1, 
; 228  : 			D3DUSAGE_WRITEONLY, 
; 229  : 			D3DPOOL_MANAGED);	

  00141	8b 45 08	 mov	 eax, DWORD PTR tv481[ebp]
  00144	8b c8		 mov	 ecx, eax
  00146	6a 01		 push	 1
  00148	6a 08		 push	 8
  0014a	68 12 01 00 00	 push	 274			; 00000112H
  0014f	8b 10		 mov	 edx, DWORD PTR [eax]
  00151	57		 push	 edi
  00152	ff 52 04	 call	 DWORD PTR [edx+4]
; File a:\vs\vc\include\vector

; 1583 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00155	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00158	8d 45 f0	 lea	 eax, DWORD PTR _pModelInstance$3[ebp]
  0015b	3b c1		 cmp	 eax, ecx
  0015d	73 2e		 jae	 SHORT $LN38@Load
  0015f	8b 06		 mov	 eax, DWORD PTR [esi]
  00161	8d 55 f0	 lea	 edx, DWORD PTR _pModelInstance$3[ebp]
  00164	3b c2		 cmp	 eax, edx
  00166	77 25		 ja	 SHORT $LN38@Load

; 1011 : 		}
; 1012 : 
; 1013 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1014 : 		{	// micro-optimization for capacity() - size()
; 1015 : 		return (this->_Myend - this->_Mylast);
; 1016 : 		}
; 1017 : 
; 1018 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1019 : 		{	// micro-optimization for capacity() != size()
; 1020 : 		return (this->_Myend != this->_Mylast);
; 1021 : 		}
; 1022 : 
; 1023 : 	iterator begin() _NOEXCEPT
; 1024 : 		{	// return iterator for beginning of mutable sequence
; 1025 : 		return (iterator(this->_Myfirst, this));
; 1026 : 		}
; 1027 : 
; 1028 : 	const_iterator begin() const _NOEXCEPT
; 1029 : 		{	// return iterator for beginning of nonmutable sequence
; 1030 : 		return (const_iterator(this->_Myfirst, this));
; 1031 : 		}
; 1032 : 
; 1033 : 	iterator end() _NOEXCEPT
; 1034 : 		{	// return iterator for end of mutable sequence
; 1035 : 		return (iterator(this->_Mylast, this));
; 1036 : 		}
; 1037 : 
; 1038 : 	const_iterator end() const _NOEXCEPT
; 1039 : 		{	// return iterator for end of nonmutable sequence
; 1040 : 		return (const_iterator(this->_Mylast, this));
; 1041 : 		}
; 1042 : 
; 1043 : 	iterator _Make_iter(const_iterator _Where) const
; 1044 : 		{	// make iterator from const_iterator
; 1045 : 		return (iterator(_Where._Ptr, this));
; 1046 : 		}
; 1047 : 
; 1048 : 	reverse_iterator rbegin() _NOEXCEPT
; 1049 : 		{	// return iterator for beginning of reversed mutable sequence
; 1050 : 		return (reverse_iterator(end()));
; 1051 : 		}
; 1052 : 
; 1053 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1054 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1055 : 		return (const_reverse_iterator(end()));
; 1056 : 		}
; 1057 : 
; 1058 : 	reverse_iterator rend() _NOEXCEPT
; 1059 : 		{	// return iterator for end of reversed mutable sequence
; 1060 : 		return (reverse_iterator(begin()));
; 1061 : 		}
; 1062 : 
; 1063 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1064 : 		{	// return iterator for end of reversed nonmutable sequence
; 1065 : 		return (const_reverse_iterator(begin()));
; 1066 : 		}
; 1067 : 
; 1068 : 	const_iterator cbegin() const _NOEXCEPT
; 1069 : 		{	// return iterator for beginning of nonmutable sequence
; 1070 : 		return (((const _Myt *)this)->begin());
; 1071 : 		}
; 1072 : 
; 1073 : 	const_iterator cend() const _NOEXCEPT
; 1074 : 		{	// return iterator for end of nonmutable sequence
; 1075 : 		return (((const _Myt *)this)->end());
; 1076 : 		}
; 1077 : 
; 1078 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1079 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1080 : 		return (((const _Myt *)this)->rbegin());
; 1081 : 		}
; 1082 : 
; 1083 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1084 : 		{	// return iterator for end of reversed nonmutable sequence
; 1085 : 		return (((const _Myt *)this)->rend());
; 1086 : 		}
; 1087 : 
; 1088 : 	void shrink_to_fit()
; 1089 : 		{	// reduce capacity
; 1090 : 		if (_Has_unused_capacity())
; 1091 : 			{	// worth shrinking, do it
; 1092 : 			if (empty())
; 1093 : 				_Tidy();
; 1094 : 			else
; 1095 : 				_Reallocate(size());
; 1096 : 			}
; 1097 : 		}
; 1098 : 
; 1099 : 	void resize(size_type _Newsize)
; 1100 : 		{	// determine new length, padding as needed
; 1101 : 		if (_Newsize < size())
; 1102 : 			_Pop_back_n(size() - _Newsize);
; 1103 : 		else if (size() < _Newsize)
; 1104 : 			{	// pad as needed
; 1105 : 			_Alty _Alval(this->_Getal());
; 1106 : 			_Reserve(_Newsize - size());
; 1107 : 			_TRY_BEGIN
; 1108 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1109 : 				_Alval);
; 1110 : 			_CATCH_ALL
; 1111 : 			_Tidy();
; 1112 : 			_RERAISE;
; 1113 : 			_CATCH_END
; 1114 : 			this->_Mylast += _Newsize - size();
; 1115 : 			}
; 1116 : 		}
; 1117 : 
; 1118 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1119 : 		{	// determine new length, padding with _Val elements as needed
; 1120 : 		if (_Newsize < size())
; 1121 : 			_Pop_back_n(size() - _Newsize);
; 1122 : 		else if (size() < _Newsize)
; 1123 : 			{	// pad as needed
; 1124 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1125 : 
; 1126 : 			if (_Inside(_Ptr))
; 1127 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1128 : 				const difference_type _Idx = _Ptr
; 1129 : 					- _STD addressof(*this->_Myfirst);
; 1130 : 				_Reserve(_Newsize - size());
; 1131 : 				_Ptr = _STD addressof(*this->_Myfirst) + _Idx;
; 1132 : 				}
; 1133 : 			else
; 1134 : 				_Reserve(_Newsize - size());
; 1135 : 
; 1136 : 			_TRY_BEGIN
; 1137 : 			_Ufill(this->_Mylast, _Newsize - size(), _Ptr);
; 1138 : 			_CATCH_ALL
; 1139 : 			_Tidy();
; 1140 : 			_RERAISE;
; 1141 : 			_CATCH_END
; 1142 : 			this->_Mylast += _Newsize - size();
; 1143 : 			}
; 1144 : 		}
; 1145 : 
; 1146 : 	size_type size() const _NOEXCEPT
; 1147 : 		{	// return length of sequence
; 1148 : 		return (this->_Mylast - this->_Myfirst);
; 1149 : 		}
; 1150 : 
; 1151 : 	size_type max_size() const _NOEXCEPT
; 1152 : 		{	// return maximum possible length of sequence
; 1153 : 		return (this->_Getal().max_size());
; 1154 : 		}
; 1155 : 
; 1156 : 	bool empty() const _NOEXCEPT
; 1157 : 		{	// test if sequence is empty
; 1158 : 		return (this->_Myfirst == this->_Mylast);
; 1159 : 		}
; 1160 : 
; 1161 : 	_Alloc get_allocator() const _NOEXCEPT
; 1162 : 		{	// return allocator object for values
; 1163 : 		return (this->_Getal());
; 1164 : 		}
; 1165 : 
; 1166 : 	const_reference at(size_type _Pos) const
; 1167 : 		{	// subscript nonmutable sequence with checking
; 1168 : 		if (size() <= _Pos)
; 1169 : 			_Xran();
; 1170 : 		return (*(this->_Myfirst + _Pos));
; 1171 : 		}
; 1172 : 
; 1173 : 	reference at(size_type _Pos)
; 1174 : 		{	// subscript mutable sequence with checking
; 1175 : 		if (size() <= _Pos)
; 1176 : 			_Xran();
; 1177 : 		return (*(this->_Myfirst + _Pos));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reference operator[](size_type _Pos) const
; 1181 : 		{	// subscript nonmutable sequence
; 1182 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1183 : 		if (size() <= _Pos)
; 1184 : 			{	// report error
; 1185 : 			_DEBUG_ERROR("vector subscript out of range");
; 1186 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1187 : 			}
; 1188 : 
; 1189 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1190 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1191 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1192 : 
; 1193 : 		return (*(this->_Myfirst + _Pos));
; 1194 : 		}
; 1195 : 
; 1196 : 	reference operator[](size_type _Pos)
; 1197 : 		{	// subscript mutable sequence
; 1198 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1199 : 		if (size() <= _Pos)
; 1200 : 			{	// report error
; 1201 : 			_DEBUG_ERROR("vector subscript out of range");
; 1202 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1203 : 			}
; 1204 : 
; 1205 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1206 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1207 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1208 : 
; 1209 : 		return (*(this->_Myfirst + _Pos));
; 1210 : 		}
; 1211 : 
; 1212 : 	pointer data() _NOEXCEPT
; 1213 : 		{	// return address of first element
; 1214 : 		return (this->_Myfirst);
; 1215 : 		}
; 1216 : 
; 1217 : 	const_pointer data() const _NOEXCEPT
; 1218 : 		{	// return address of first element
; 1219 : 		return (this->_Myfirst);
; 1220 : 		}
; 1221 : 
; 1222 : 	reference front()
; 1223 : 		{	// return first element of mutable sequence
; 1224 : 		return (*begin());
; 1225 : 		}
; 1226 : 
; 1227 : 	const_reference front() const
; 1228 : 		{	// return first element of nonmutable sequence
; 1229 : 		return (*begin());
; 1230 : 		}
; 1231 : 
; 1232 : 	reference back()
; 1233 : 		{	// return last element of mutable sequence
; 1234 : 		return (*(end() - 1));
; 1235 : 		}
; 1236 : 
; 1237 : 	const_reference back() const
; 1238 : 		{	// return last element of nonmutable sequence
; 1239 : 		return (*(end() - 1));
; 1240 : 		}
; 1241 : 
; 1242 : 	void push_back(const value_type& _Val)
; 1243 : 		{	// insert element at end
; 1244 : 		if (_Inside(_STD addressof(_Val)))
; 1245 : 			{	// push back an element
; 1246 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00168	8b fa		 mov	 edi, edx
  0016a	2b f8		 sub	 edi, eax
  0016c	c1 ff 02	 sar	 edi, 2

; 1247 : 			if (this->_Mylast == this->_Myend)

  0016f	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00172	75 09		 jne	 SHORT $LN37@Load

; 1248 : 				_Reserve(1);

  00174	6a 01		 push	 1
  00176	8b ce		 mov	 ecx, esi
  00178	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IAEXI@Z ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::_Reserve
$LN37@Load:
; File a:\vs\vc\include\xmemory0

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  0017d	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00180	85 c9		 test	 ecx, ecx
  00182	74 20		 je	 SHORT $LN83@Load
  00184	8b 06		 mov	 eax, DWORD PTR [esi]
  00186	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  00189	89 01		 mov	 DWORD PTR [ecx], eax
; File a:\vs\vc\include\vector

; 1254 : 		else

  0018b	eb 17		 jmp	 SHORT $LN83@Load
$LN38@Load:

; 1255 : 			{	// push back a non-element
; 1256 : 			if (this->_Mylast == this->_Myend)

  0018d	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00190	75 09		 jne	 SHORT $LN35@Load

; 1257 : 				_Reserve(1);

  00192	6a 01		 push	 1
  00194	8b ce		 mov	 ecx, esi
  00196	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@IAEXI@Z ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::_Reserve
$LN35@Load:
; File a:\vs\vc\include\xmemory0

; 593  : 		::new ((void *)_Ptr) _Ty(_Val);

  0019b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0019e	85 c0		 test	 eax, eax
  001a0	74 02		 je	 SHORT $LN83@Load
  001a2	89 18		 mov	 DWORD PTR [eax], ebx
$LN83@Load:
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp

; 219  : 	for (int i = 0; i < m_pThing->GetModelCount(); ++i)

  001a4	8b 45 e8	 mov	 eax, DWORD PTR _this$1$[ebp]
  001a7	8b 7d ec	 mov	 edi, DWORD PTR _i$1$[ebp]
; File a:\vs\vc\include\vector

; 1261 : 			++this->_Mylast;

  001aa	83 46 04 04	 add	 DWORD PTR [esi+4], 4
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp

; 219  : 	for (int i = 0; i < m_pThing->GetModelCount(); ++i)

  001ae	47		 inc	 edi
  001af	89 7d ec	 mov	 DWORD PTR _i$1$[ebp], edi
  001b2	8b 88 8c 01 00
	00		 mov	 ecx, DWORD PTR [eax+396]
  001b8	e8 00 00 00 00	 call	 ?GetModelCount@CGraphicThing@@QBEHXZ ; CGraphicThing::GetModelCount
  001bd	3b f8		 cmp	 edi, eax
  001bf	0f 8c 1c ff ff
	ff		 jl	 $LL3@Load
$LN1@Load:

; 230  : 		m_ModelInstanceContainer.push_back(pModelInstance);
; 231  : 	}
; 232  : 
; 233  : 	return true;

  001c5	b0 01		 mov	 al, 1

; 234  : }

  001c7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001ca	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001d1	59		 pop	 ecx
  001d2	5f		 pop	 edi
  001d3	5e		 pop	 esi
  001d4	5b		 pop	 ebx
  001d5	8b e5		 mov	 esp, ebp
  001d7	5d		 pop	 ebp
  001d8	c2 04 00	 ret	 4
$LN93@Load:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Load@CDungeonBlock@@QAE_NPBD@Z$0:
  00000	8b 45 e4	 mov	 eax, DWORD PTR $T2[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?Load@CDungeonBlock@@QAE_NPBD@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Load@CDungeonBlock@@QAE_NPBD@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Load@CDungeonBlock@@QAE_NPBD@Z ENDP			; CDungeonBlock::Load
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
; File a:\vs\vc\include\algorithm
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
; File a:\vs\vc\include\algorithm
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
; File a:\vs\vc\include\algorithm
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
;	COMDAT ?BuildBoundingSphere@CDungeonBlock@@QAEXXZ
_TEXT	SEGMENT
_this$GSCopy$1$ = -32					; size = 4
_v3Max$ = -28						; size = 12
$T1 = -16						; size = 12
_v3Min$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?BuildBoundingSphere@CDungeonBlock@@QAEXXZ PROC		; CDungeonBlock::BuildBoundingSphere, COMDAT
; _this$ = ecx

; 156  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 24	 sub	 esp, 36			; 00000024H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c4		 xor	 eax, esp
  00010	89 44 24 20	 mov	 DWORD PTR __$ArrayPad$[esp+36], eax
; File a:\vs\vc\include\algorithm

; 33   : 	_For_each(_Unchecked(_First), _Unchecked(_Last), _Func);

  00014	8b 81 94 01 00
	00		 mov	 eax, DWORD PTR [ecx+404]
  0001a	33 d2		 xor	 edx, edx
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp

; 156  : {

  0001c	53		 push	 ebx
  0001d	56		 push	 esi
; File a:\vs\vc\include\vector

; 1025 : 		return (iterator(this->_Myfirst, this));

  0001e	8b b1 90 01 00
	00		 mov	 esi, DWORD PTR [ecx+400]
  00024	8b d8		 mov	 ebx, eax
  00026	2b de		 sub	 ebx, esi
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp

; 156  : {

  00028	89 4c 24 0c	 mov	 DWORD PTR _this$GSCopy$1$[esp+44], ecx
  0002c	83 c3 03	 add	 ebx, 3
  0002f	c1 eb 02	 shr	 ebx, 2
  00032	57		 push	 edi
  00033	33 ff		 xor	 edi, edi
  00035	3b f0		 cmp	 esi, eax
  00037	0f 47 da	 cmova	 ebx, edx
; File a:\vs\vc\include\algorithm

; 23   : 	for (; _First != _Last; ++_First)

  0003a	85 db		 test	 ebx, ebx
  0003c	74 1f		 je	 SHORT $LN35@BuildBound
  0003e	8b ff		 npad	 2
$LL37@BuildBound:
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp

; 120  : 		pInstance->GetBoundBox(m_pv3Min, m_pv3Max);

  00040	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00042	8d 44 24 14	 lea	 eax, DWORD PTR _v3Max$[esp+48]
  00046	50		 push	 eax
  00047	8d 44 24 24	 lea	 eax, DWORD PTR _v3Min$[esp+52]
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?GetBoundBox@CGrannyModelInstance@@QAEXPAUD3DXVECTOR3@@0@Z ; CGrannyModelInstance::GetBoundBox
; File a:\vs\vc\include\algorithm

; 23   : 	for (; _First != _Last; ++_First)

  00051	47		 inc	 edi
  00052	8d 76 04	 lea	 esi, DWORD PTR [esi+4]
  00055	3b fb		 cmp	 edi, ebx
  00057	75 e7		 jne	 SHORT $LL37@BuildBound
  00059	8b 4c 24 10	 mov	 ecx, DWORD PTR _this$GSCopy$1$[esp+48]
$LN35@BuildBound:
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0005d	f3 0f 10 5c 24
	28		 movss	 xmm3, DWORD PTR _v3Min$[esp+56]
  00063	f3 0f 10 54 24
	14		 movss	 xmm2, DWORD PTR _v3Max$[esp+48]
  00069	0f 28 c3	 movaps	 xmm0, xmm3
  0006c	f3 0f 10 4c 24
	24		 movss	 xmm1, DWORD PTR _v3Min$[esp+52]
  00072	f3 0f 58 4c 24
	18		 addss	 xmm1, DWORD PTR _v3Max$[esp+52]
  00078	f3 0f 10 74 24
	1c		 movss	 xmm6, DWORD PTR _v3Max$[esp+56]
  0007e	f3 0f 58 54 24
	20		 addss	 xmm2, DWORD PTR _v3Min$[esp+48]

; 264  : }
; 265  : 
; 266  : D3DXINLINE D3DXVECTOR3
; 267  : D3DXVECTOR3::operator * ( FLOAT f ) const
; 268  : {
; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00084	f3 0f 10 3d 00
	00 00 00	 movss	 xmm7, DWORD PTR __real@3f000000

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0008c	f3 0f 58 c6	 addss	 xmm0, xmm6

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00090	f3 0f 5c f3	 subss	 xmm6, xmm3

; 264  : }
; 265  : 
; 266  : D3DXINLINE D3DXVECTOR3
; 267  : D3DXVECTOR3::operator * ( FLOAT f ) const
; 268  : {
; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00094	f3 0f 59 cf	 mulss	 xmm1, xmm7
  00098	f3 0f 59 d7	 mulss	 xmm2, xmm7
  0009c	f3 0f 59 c7	 mulss	 xmm0, xmm7
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp

; 160  : 	m_v3Center = (v3Min+v3Max) * 0.5f;

  000a0	0f 14 d1	 unpcklps xmm2, xmm1
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  000a3	f3 0f 10 4c 24
	14		 movss	 xmm1, DWORD PTR _v3Max$[esp+48]
  000a9	f3 0f 5c 4c 24
	20		 subss	 xmm1, DWORD PTR _v3Min$[esp+48]

; 182  :     z = fz;

  000af	f3 0f 11 44 24
	28		 movss	 DWORD PTR $T1[esp+56], xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  000b5	f3 0f 10 44 24
	18		 movss	 xmm0, DWORD PTR _v3Max$[esp+52]
  000bb	f3 0f 5c 44 24
	24		 subss	 xmm0, DWORD PTR _v3Min$[esp+52]
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp

; 160  : 	m_v3Center = (v3Min+v3Max) * 0.5f;

  000c1	8b 44 24 28	 mov	 eax, DWORD PTR $T1[esp+56]
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 1239 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  000c5	f3 0f 59 c9	 mulss	 xmm1, xmm1
  000c9	f3 0f 59 f6	 mulss	 xmm6, xmm6
  000cd	f3 0f 59 c0	 mulss	 xmm0, xmm0
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp

; 160  : 	m_v3Center = (v3Min+v3Max) * 0.5f;

  000d1	66 0f d6 91 7c
	01 00 00	 movq	 QWORD PTR [ecx+380], xmm2
  000d9	89 81 84 01 00
	00		 mov	 DWORD PTR [ecx+388], eax
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 1239 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  000df	f3 0f 58 c1	 addss	 xmm0, xmm1
  000e3	f3 0f 58 c6	 addss	 xmm0, xmm6
; File a:\vs\vc\include\math.h

; 775  :     return (float)sqrt(_X);

  000e7	0f 5a c0	 cvtps2pd xmm0, xmm0
  000ea	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp

; 161  : 	m_fRadius = D3DXVec3Length(&(v3Max-v3Min))*0.5f + 150.0f; // extra length for attached objects

  000ef	8b 44 24 10	 mov	 eax, DWORD PTR _this$GSCopy$1$[esp+48]

; 162  : }

  000f3	8b 4c 24 2c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+48]
; File a:\vs\vc\include\math.h

; 775  :     return (float)sqrt(_X);

  000f7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp

; 162  : }

  000fb	5f		 pop	 edi
  000fc	5e		 pop	 esi
  000fd	5b		 pop	 ebx
  000fe	33 cc		 xor	 ecx, esp
  00100	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00108	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@43160000
  00110	f3 0f 11 80 88
	01 00 00	 movss	 DWORD PTR [eax+392], xmm0
  00118	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011d	8b e5		 mov	 esp, ebp
  0011f	5d		 pop	 ebp
  00120	c3		 ret	 0
?BuildBoundingSphere@CDungeonBlock@@QAEXXZ ENDP		; CDungeonBlock::BuildBoundingSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
;	COMDAT ?Destroy@CDungeonBlock@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CDungeonBlock@@QAEXXZ PROC			; CDungeonBlock::Destroy, COMDAT
; _this$ = ecx

; 245  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 246  : 	if (m_pThing)

  00003	8b 8e 8c 01 00
	00		 mov	 ecx, DWORD PTR [esi+396]
  00009	85 c9		 test	 ecx, ecx
  0000b	74 0f		 je	 SHORT $LN1@Destroy

; 247  : 	{
; 248  : 		m_pThing->Release();

  0000d	e8 00 00 00 00	 call	 ?Release@CReferenceObject@@QAEXXZ ; CReferenceObject::Release

; 249  : 		m_pThing = NULL;

  00012	c7 86 8c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+396], 0
$LN1@Destroy:

; 250  : 	}
; 251  : 
; 252  : 	stl_wipe(m_ModelInstanceContainer);

  0001c	8d 86 90 01 00
	00		 lea	 eax, DWORD PTR [esi+400]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??$stl_wipe@V?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@@@YAXAAV?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@@Z ; stl_wipe<std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> > >
  00028	83 c4 04	 add	 esp, 4

; 253  : 
; 254  : 	__Initialize();

  0002b	8b ce		 mov	 ecx, esi
  0002d	5e		 pop	 esi
  0002e	e9 00 00 00 00	 jmp	 ?__Initialize@CDungeonBlock@@IAEXXZ ; CDungeonBlock::__Initialize
?Destroy@CDungeonBlock@@QAEXXZ ENDP			; CDungeonBlock::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
;	COMDAT ??1CDungeonBlock@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CDungeonBlock@@UAE@XZ PROC				; CDungeonBlock::~CDungeonBlock, COMDAT
; _this$ = ecx

; 262  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CDungeonBlock@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CDungeonBlock@@6B@
  0002f	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 263  : 	Destroy();

  00036	e8 00 00 00 00	 call	 ?Destroy@CDungeonBlock@@QAEXXZ ; CDungeonBlock::Destroy

; 264  : }

  0003b	8d 8e 9c 01 00
	00		 lea	 ecx, DWORD PTR [esi+412]
  00041	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00045	e8 00 00 00 00	 call	 ??1CGraphicVertexBuffer@@UAE@XZ ; CGraphicVertexBuffer::~CGraphicVertexBuffer
; File a:\vs\vc\include\vector

; 1623 : 		if (this->_Myfirst != pointer())

  0004a	8b 86 90 01 00
	00		 mov	 eax, DWORD PTR [esi+400]
  00050	85 c0		 test	 eax, eax
  00052	74 27		 je	 SHORT $LN8@CDungeonBl
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0005a	83 c4 04	 add	 esp, 4
; File a:\vs\vc\include\vector

; 1629 : 			this->_Myfirst = pointer();

  0005d	c7 86 90 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+400], 0

; 1630 : 			this->_Mylast = pointer();

  00067	c7 86 94 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+404], 0

; 1631 : 			this->_Myend = pointer();

  00071	c7 86 98 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+408], 0
$LN8@CDungeonBl:
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp

; 264  : }

  0007b	8b ce		 mov	 ecx, esi
  0007d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00084	e8 00 00 00 00	 call	 ??1CGraphicObjectInstance@@UAE@XZ ; CGraphicObjectInstance::~CGraphicObjectInstance
  00089	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00093	59		 pop	 ecx
  00094	5e		 pop	 esi
  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CDungeonBlock@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CGraphicObjectInstance@@UAE@XZ ; CGraphicObjectInstance::~CGraphicObjectInstance
__unwindfunclet$??1CDungeonBlock@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 90 01 00
	00		 add	 ecx, 400		; 00000190H
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAE@XZ ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::~vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >
__unwindfunclet$??1CDungeonBlock@@UAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	81 c1 9c 01 00
	00		 add	 ecx, 412		; 0000019cH
  0001f	e9 00 00 00 00	 jmp	 ??1CGraphicVertexBuffer@@UAE@XZ ; CGraphicVertexBuffer::~CGraphicVertexBuffer
__ehhandler$??1CDungeonBlock@@UAE@XZ:
  00024	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00028	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002b	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0002e	33 c8		 xor	 ecx, eax
  00030	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00035	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CDungeonBlock@@UAE@XZ
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CDungeonBlock@@UAE@XZ ENDP				; CDungeonBlock::~CDungeonBlock
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp
;	COMDAT ??0CDungeonBlock@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CDungeonBlock@@QAE@XZ PROC				; CDungeonBlock::CDungeonBlock, COMDAT
; _this$ = ecx

; 258  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CDungeonBlock@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	e8 00 00 00 00	 call	 ??0CGraphicObjectInstance@@QAE@XZ ; CGraphicObjectInstance::CGraphicObjectInstance
  0002e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CDungeonBlock@@6B@
  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File a:\vs\vc\include\vector

; 482  : 		_Myfirst = pointer();

  0003b	c7 86 90 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+400], 0

; 483  : 		_Mylast = pointer();

  00045	c7 86 94 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+404], 0

; 484  : 		_Myend = pointer();

  0004f	c7 86 98 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+408], 0
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.cpp

; 258  : {

  00059	8d 8e 9c 01 00
	00		 lea	 ecx, DWORD PTR [esi+412]
  0005f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00063	e8 00 00 00 00	 call	 ??0CGraphicVertexBuffer@@QAE@XZ ; CGraphicVertexBuffer::CGraphicVertexBuffer

; 259  : 	__Initialize();

  00068	8b ce		 mov	 ecx, esi
  0006a	e8 00 00 00 00	 call	 ?__Initialize@CDungeonBlock@@IAEXXZ ; CDungeonBlock::__Initialize

; 260  : }

  0006f	8b c6		 mov	 eax, esi
  00071	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00074	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007b	59		 pop	 ecx
  0007c	5e		 pop	 esi
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CDungeonBlock@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CGraphicObjectInstance@@UAE@XZ ; CGraphicObjectInstance::~CGraphicObjectInstance
__unwindfunclet$??0CDungeonBlock@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 90 01 00
	00		 add	 ecx, 400		; 00000190H
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@PAVCDungeonModelInstance@@V?$allocator@PAVCDungeonModelInstance@@@std@@@std@@QAE@XZ ; std::vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >::~vector<CDungeonModelInstance *,std::allocator<CDungeonModelInstance *> >
__ehhandler$??0CDungeonBlock@@QAE@XZ:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CDungeonBlock@@QAE@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CDungeonBlock@@QAE@XZ ENDP				; CDungeonBlock::CDungeonBlock
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\gamelib\dungeonblock.h
;	COMDAT ?GetType@CDungeonBlock@@UBEHXZ
_TEXT	SEGMENT
?GetType@CDungeonBlock@@UBEHXZ PROC			; CDungeonBlock::GetType, COMDAT
; _this$ = ecx

; 18   : 		int GetType() const { return ID; }

  00000	b8 13 1f f2 ad	 mov	 eax, -1376641261	; adf21f13H
  00005	c3		 ret	 0
?GetType@CDungeonBlock@@UBEHXZ ENDP			; CDungeonBlock::GetType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterlib\grpobjectinstance.h
;	COMDAT ?OnDeform@CGraphicObjectInstance@@UAEXXZ
_TEXT	SEGMENT
?OnDeform@CGraphicObjectInstance@@UAEXXZ PROC		; CGraphicObjectInstance::OnDeform, COMDAT
; _this$ = ecx

; 99   : 		virtual void			OnDeform(){}

  00000	c3		 ret	 0
?OnDeform@CGraphicObjectInstance@@UAEXXZ ENDP		; CGraphicObjectInstance::OnDeform
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterlib\grpobjectinstance.h
;	COMDAT ?OnUpdate@CGraphicObjectInstance@@UAEXXZ
_TEXT	SEGMENT
?OnUpdate@CGraphicObjectInstance@@UAEXXZ PROC		; CGraphicObjectInstance::OnUpdate, COMDAT
; _this$ = ecx

; 98   : 		virtual void			OnUpdate(){}

  00000	c3		 ret	 0
?OnUpdate@CGraphicObjectInstance@@UAEXXZ ENDP		; CGraphicObjectInstance::OnUpdate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterlib\grpobjectinstance.h
;	COMDAT ?OnClear@CGraphicObjectInstance@@UAEXXZ
_TEXT	SEGMENT
?OnClear@CGraphicObjectInstance@@UAEXXZ PROC		; CGraphicObjectInstance::OnClear, COMDAT
; _this$ = ecx

; 97   : 		virtual void			OnClear(){}

  00000	c3		 ret	 0
?OnClear@CGraphicObjectInstance@@UAEXXZ ENDP		; CGraphicObjectInstance::OnClear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?end@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCStaticCollisionData@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCStaticCollisionData@@@std@@@std@@@2@XZ PROC ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::end, COMDAT
; _this$ = ecx

; 1039 : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 		{	// construct with pointer _Parg

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 1040 : 		return (const_iterator(this->_Mylast, this));
; 1041 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCStaticCollisionData@@@std@@@std@@@2@XZ ENDP ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?begin@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCStaticCollisionData@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCStaticCollisionData@@@std@@@std@@@2@XZ PROC ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::begin, COMDAT
; _this$ = ecx

; 1029 : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 		{	// construct with pointer _Parg

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1030 : 		return (const_iterator(this->_Myfirst, this));
; 1031 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VCStaticCollisionData@@@std@@@std@@@2@XZ ENDP ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterbase\singleton.h
;	COMDAT ?Instance@?$CSingleton@VCResourceManager@@@@SAAAVCResourceManager@@XZ
_TEXT	SEGMENT
?Instance@?$CSingleton@VCResourceManager@@@@SAAAVCResourceManager@@XZ PROC ; CSingleton<CResourceManager>::Instance, COMDAT

; 26   : 		assert(ms_singleton);
; 27   : 		return (*ms_singleton);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton

; 28   : 	}

  00005	c3		 ret	 0
?Instance@?$CSingleton@VCResourceManager@@@@SAAAVCResourceManager@@XZ ENDP ; CSingleton<CResourceManager>::Instance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
;	COMDAT ?D3DXVec3Length@@YAMPBUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
tv161 = -4						; size = 4
_pV$ = 8						; size = 4
?D3DXVec3Length@@YAMPBUD3DXVECTOR3@@@Z PROC		; D3DXVec3Length, COMDAT

; 1232 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 08	 sub	 esp, 8

; 1239 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  00009	8b 45 08	 mov	 eax, DWORD PTR _pV$[ebp]
  0000c	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  00011	f3 0f 10 10	 movss	 xmm2, DWORD PTR [eax]
  00015	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0001a	f3 0f 59 d2	 mulss	 xmm2, xmm2
  0001e	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00022	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00026	f3 0f 58 d1	 addss	 xmm2, xmm1
  0002a	f3 0f 58 d0	 addss	 xmm2, xmm0
; File a:\vs\vc\include\math.h

; 775  :     return (float)sqrt(_X);

  0002e	0f 5a c2	 cvtps2pd xmm0, xmm2
  00031	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
  00036	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 1239 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  0003a	f3 0f 11 44 24
	04		 movss	 DWORD PTR tv161[esp+8], xmm0
  00040	d9 44 24 04	 fld	 DWORD PTR tv161[esp+8]

; 1240 : #else
; 1241 :     return (FLOAT) sqrt(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);
; 1242 : #endif
; 1243 : }

  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
?D3DXVec3Length@@YAMPBUD3DXVECTOR3@@@Z ENDP		; D3DXVec3Length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
;	COMDAT ??DD3DXVECTOR3@@QBE?AU0@M@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_f$ = 12						; size = 4
??DD3DXVECTOR3@@QBE?AU0@M@Z PROC			; D3DXVECTOR3::operator*, COMDAT
; _this$ = ecx

; 268  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00003	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _f$[ebp]
  00008	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]

; 180  :     x = fx;

  0000c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  0000f	f3 0f 59 c1	 mulss	 xmm0, xmm1

; 180  :     x = fx;

  00013	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00017	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0001c	f3 0f 59 c1	 mulss	 xmm0, xmm1

; 181  :     y = fy;

  00020	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00025	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  0002a	f3 0f 59 c1	 mulss	 xmm0, xmm1

; 182  :     z = fz;

  0002e	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 270  : }

  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
??DD3DXVECTOR3@@QBE?AU0@M@Z ENDP			; D3DXVECTOR3::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
;	COMDAT ??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z PROC			; D3DXVECTOR3::operator-, COMDAT
; _this$ = ecx

; 262  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  00006	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]

; 180  :     x = fx;

  0000a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0000d	f3 0f 5c 02	 subss	 xmm0, DWORD PTR [edx]

; 180  :     x = fx;

  00011	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00015	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0001a	f3 0f 5c 42 04	 subss	 xmm0, DWORD PTR [edx+4]

; 181  :     y = fy;

  0001f	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00024	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00029	f3 0f 5c 42 08	 subss	 xmm0, DWORD PTR [edx+8]

; 182  :     z = fz;

  0002e	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 264  : }

  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
;	COMDAT ??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z PROC			; D3DXVECTOR3::operator+, COMDAT
; _this$ = ecx

; 256  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]

; 180  :     x = fx;

  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00009	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  0000d	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]

; 180  :     x = fx;

  00011	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00015	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  0001a	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]

; 181  :     y = fy;

  0001f	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00024	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  00029	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]

; 182  :     z = fz;

  0002e	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 258  : }

  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator+
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 179  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 180  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]

; 181  :     y = fy;
; 182  :     z = fz;
; 183  : }

  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0
  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 89   :     D3DXVECTOR3() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 55   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 44   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 65   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 60   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 61   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv68 = -4						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 774  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 08	 sub	 esp, 8
  00009	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __X$[ebp]

; 775  :     return (float)sqrt(_X);

  0000e	0f 5a c0	 cvtps2pd xmm0, xmm0
  00011	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
  00016	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0001a	f3 0f 11 44 24
	04		 movss	 DWORD PTR tv68[esp+8], xmm0
  00020	d9 44 24 04	 fld	 DWORD PTR tv68[esp+8]

; 776  : }

  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	4e		 dec	 esi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	57		 push	 edi
  0000f	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b cf		 mov	 ecx, edi
  00014	ff d3		 call	 ebx
  00016	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  00019	4e		 dec	 esi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5f		 pop	 edi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
