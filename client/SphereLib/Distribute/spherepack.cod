; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	A:\From C\Desktop\Serwer\Source\Source Client\client\SphereLib\spherepack.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_sqrtf
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	??0Vector3d@@QAE@XZ				; Vector3d::Vector3d
PUBLIC	??0Vector3d@@QAE@ABV0@@Z			; Vector3d::Vector3d
PUBLIC	??0Vector3d@@QAE@MMM@Z				; Vector3d::Vector3d
PUBLIC	??4Vector3d@@QAEAAV0@ABV0@@Z			; Vector3d::operator=
PUBLIC	??YVector3d@@QAEXV0@@Z				; Vector3d::operator+=
PUBLIC	??XVector3d@@QAEXM@Z				; Vector3d::operator*=
PUBLIC	?Set@Vector3d@@QAEXMMM@Z			; Vector3d::Set
PUBLIC	?Length@Vector3d@@QBEMXZ			; Vector3d::Length
PUBLIC	?Distance@Vector3d@@QBEMABV1@@Z			; Vector3d::Distance
PUBLIC	?DistanceSq@Vector3d@@QBEMABV1@@Z		; Vector3d::DistanceSq
PUBLIC	?Normalize@Vector3d@@QAEMXZ			; Vector3d::Normalize
PUBLIC	??0Sphere@@QAE@XZ				; Sphere::Sphere
PUBLIC	??1Sphere@@UAE@XZ				; Sphere::~Sphere
PUBLIC	?GetRadius@Sphere@@QBEMXZ			; Sphere::GetRadius
PUBLIC	?GetRadius2@Sphere@@QBEMXZ			; Sphere::GetRadius2
PUBLIC	?SetRadius@Sphere@@QAEXM@Z			; Sphere::SetRadius
PUBLIC	??_GSphere@@UAEPAXI@Z				; Sphere::`scalar deleting destructor'
PUBLIC	??0SpherePackCallback@@QAE@XZ			; SpherePackCallback::SpherePackCallback
PUBLIC	??1SpherePackCallback@@UAE@XZ			; SpherePackCallback::~SpherePackCallback
PUBLIC	?VisibilityCallback@SpherePackCallback@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z ; SpherePackCallback::VisibilityCallback
PUBLIC	?RayTraceCallback@SpherePackCallback@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z ; SpherePackCallback::RayTraceCallback
PUBLIC	?RangeTestCallback@SpherePackCallback@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z ; SpherePackCallback::RangeTestCallback
PUBLIC	?PointTest2dCallback@SpherePackCallback@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z ; SpherePackCallback::PointTest2dCallback
PUBLIC	??_GSpherePackCallback@@UAEPAXI@Z		; SpherePackCallback::`scalar deleting destructor'
PUBLIC	??0SpherePack@@QAE@XZ				; SpherePack::SpherePack
PUBLIC	??1SpherePack@@UAE@XZ				; SpherePack::~SpherePack
PUBLIC	?Init@SpherePack@@QAEXPAVSpherePackFactory@@ABVVector3d@@MPAX_N@Z ; SpherePack::Init
PUBLIC	?SetSpherePackFlag@SpherePack@@QAEXW4SpherePackFlag@@@Z ; SpherePack::SetSpherePackFlag
PUBLIC	?ClearSpherePackFlag@SpherePack@@QAEXW4SpherePackFlag@@@Z ; SpherePack::ClearSpherePackFlag
PUBLIC	?HasSpherePackFlag@SpherePack@@QBE_NW4SpherePackFlag@@@Z ; SpherePack::HasSpherePackFlag
PUBLIC	?SetParent@SpherePack@@QAEXPAV1@@Z		; SpherePack::SetParent
PUBLIC	?NewPosRadius@SpherePack@@QAEXABVVector3d@@M@Z	; SpherePack::NewPosRadius
PUBLIC	?Unlink@SpherePack@@QAEXXZ			; SpherePack::Unlink
PUBLIC	?AddChild@SpherePack@@QAEXPAV1@@Z		; SpherePack::AddChild
PUBLIC	?SetNextSibling@SpherePack@@QAEXPAV1@@Z		; SpherePack::SetNextSibling
PUBLIC	?SetPrevSibling@SpherePack@@QAEXPAV1@@Z		; SpherePack::SetPrevSibling
PUBLIC	?_GetNextSibling@SpherePack@@QBEPAV1@XZ		; SpherePack::_GetNextSibling
PUBLIC	?_GetPrevSibling@SpherePack@@QBEPAV1@XZ		; SpherePack::_GetPrevSibling
PUBLIC	?GetChildren@SpherePack@@QBEPAV1@XZ		; SpherePack::GetChildren
PUBLIC	?GetNext@SpherePack@@QBEPAV1@XZ			; SpherePack::GetNext
PUBLIC	?GetPrevious@SpherePack@@QBEPAV1@XZ		; SpherePack::GetPrevious
PUBLIC	?SetNext@SpherePack@@QAEXPAV1@@Z		; SpherePack::SetNext
PUBLIC	?SetPrevious@SpherePack@@QAEXPAV1@@Z		; SpherePack::SetPrevious
PUBLIC	?GetUserData@SpherePack@@QBEPAXXZ		; SpherePack::GetUserData
PUBLIC	?SetUserData@SpherePack@@QAEXPAX_N@Z		; SpherePack::SetUserData
PUBLIC	?DistanceSquared@SpherePack@@QBEMPBV1@@Z	; SpherePack::DistanceSquared
PUBLIC	?LostChild@SpherePack@@QAEXPAV1@@Z		; SpherePack::LostChild
PUBLIC	?GetPos@SpherePack@@QBEABVVector3d@@XZ		; SpherePack::GetPos
PUBLIC	?Recompute@SpherePack@@QAE_NM@Z			; SpherePack::Recompute
PUBLIC	?GetChildCount@SpherePack@@QBEHXZ		; SpherePack::GetChildCount
PUBLIC	?SetFifo1@SpherePack@@QAEXPAPAV1@@Z		; SpherePack::SetFifo1
PUBLIC	?SetFifo2@SpherePack@@QAEXPAPAV1@@Z		; SpherePack::SetFifo2
PUBLIC	?ComputeBindingDistance@SpherePack@@QAEXPAV1@@Z	; SpherePack::ComputeBindingDistance
PUBLIC	?VisibilityTest@SpherePack@@QAEXABVFrustum@@PAVSpherePackCallback@@W4ViewState@@@Z ; SpherePack::VisibilityTest
PUBLIC	?RayTrace@SpherePack@@QAEXABVVector3d@@0MPAVSpherePackCallback@@@Z ; SpherePack::RayTrace
PUBLIC	?RangeTest@SpherePack@@QAEXABVVector3d@@MPAVSpherePackCallback@@W4ViewState@@@Z ; SpherePack::RangeTest
PUBLIC	?PointTest2d@SpherePack@@QAEXABVVector3d@@PAVSpherePackCallback@@W4ViewState@@@Z ; SpherePack::PointTest2d
PUBLIC	?Reset@SpherePack@@QAEXXZ			; SpherePack::Reset
PUBLIC	??_ESpherePack@@UAEPAXI@Z			; SpherePack::`vector deleting destructor'
PUBLIC	??0SpherePackFifo@@QAE@H@Z			; SpherePackFifo::SpherePackFifo
PUBLIC	??1SpherePackFifo@@UAE@XZ			; SpherePackFifo::~SpherePackFifo
PUBLIC	?Push@SpherePackFifo@@QAEPAPAVSpherePack@@PAV2@@Z ; SpherePackFifo::Push
PUBLIC	?Pop@SpherePackFifo@@QAEPAVSpherePack@@XZ	; SpherePackFifo::Pop
PUBLIC	?GetCount@SpherePackFifo@@QBEHXZ		; SpherePackFifo::GetCount
PUBLIC	??_GSpherePackFifo@@UAEPAXI@Z			; SpherePackFifo::`scalar deleting destructor'
PUBLIC	??0SpherePackFactory@@QAE@HMMM@Z		; SpherePackFactory::SpherePackFactory
PUBLIC	??1SpherePackFactory@@UAE@XZ			; SpherePackFactory::~SpherePackFactory
PUBLIC	?Process@SpherePackFactory@@QAEXXZ		; SpherePackFactory::Process
PUBLIC	?AddSphere_@SpherePackFactory@@QAEPAVSpherePack@@ABVVector3d@@MPAX_NH@Z ; SpherePackFactory::AddSphere_
PUBLIC	?AddIntegrate@SpherePackFactory@@QAEXPAVSpherePack@@@Z ; SpherePackFactory::AddIntegrate
PUBLIC	?AddRecompute@SpherePackFactory@@QAEXPAVSpherePack@@@Z ; SpherePackFactory::AddRecompute
PUBLIC	?Integrate@SpherePackFactory@@QAEXPAVSpherePack@@0M@Z ; SpherePackFactory::Integrate
PUBLIC	?Render@SpherePackFactory@@QAEXXZ		; SpherePackFactory::Render
PUBLIC	?Remove@SpherePackFactory@@QAEXPAVSpherePack@@@Z ; SpherePackFactory::Remove
PUBLIC	?FrustumTest@SpherePackFactory@@QAEXABVFrustum@@PAVSpherePackCallback@@@Z ; SpherePackFactory::FrustumTest
PUBLIC	?RayTrace@SpherePackFactory@@QAEXABVVector3d@@0PAVSpherePackCallback@@@Z ; SpherePackFactory::RayTrace
PUBLIC	?RangeTest@SpherePackFactory@@QAEXABVVector3d@@MPAVSpherePackCallback@@@Z ; SpherePackFactory::RangeTest
PUBLIC	?PointTest2d@SpherePackFactory@@QAEXABVVector3d@@PAVSpherePackCallback@@@Z ; SpherePackFactory::PointTest2d
PUBLIC	?RayTraceCallback@SpherePackFactory@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z ; SpherePackFactory::RayTraceCallback
PUBLIC	?RangeTestCallback@SpherePackFactory@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z ; SpherePackFactory::RangeTestCallback
PUBLIC	?PointTest2dCallback@SpherePackFactory@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z ; SpherePackFactory::PointTest2dCallback
PUBLIC	?VisibilityCallback@SpherePackFactory@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z ; SpherePackFactory::VisibilityCallback
PUBLIC	?Reset@SpherePackFactory@@QAEXXZ		; SpherePackFactory::Reset
PUBLIC	??0?$Pool@VSpherePack@@@@QAE@XZ			; Pool<SpherePack>::Pool<SpherePack>
PUBLIC	??1?$Pool@VSpherePack@@@@QAE@XZ			; Pool<SpherePack>::~Pool<SpherePack>
PUBLIC	?Set@?$Pool@VSpherePack@@@@QAEXH@Z		; Pool<SpherePack>::Set
PUBLIC	?Release@?$Pool@VSpherePack@@@@QAEXPAVSpherePack@@@Z ; Pool<SpherePack>::Release
PUBLIC	?GetFreeLink@?$Pool@VSpherePack@@@@QAEPAVSpherePack@@XZ ; Pool<SpherePack>::GetFreeLink
PUBLIC	??_GSpherePackFactory@@UAEPAXI@Z		; SpherePackFactory::`scalar deleting destructor'
PUBLIC	??_7Sphere@@6B@					; Sphere::`vftable'
PUBLIC	??_7SpherePackCallback@@6B@			; SpherePackCallback::`vftable'
PUBLIC	??_7SpherePack@@6B@				; SpherePack::`vftable'
PUBLIC	??_7SpherePackFifo@@6B@				; SpherePackFifo::`vftable'
PUBLIC	??_7SpherePackFactory@@6B@			; SpherePackFactory::`vftable'
PUBLIC	??_R4Sphere@@6B@				; Sphere::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVSphere@@@8				; Sphere `RTTI Type Descriptor'
PUBLIC	??_R3Sphere@@8					; Sphere::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Sphere@@8					; Sphere::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Sphere@@8				; Sphere::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4SpherePackFactory@@6B@			; SpherePackFactory::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVSpherePackFactory@@@8			; SpherePackFactory `RTTI Type Descriptor'
PUBLIC	??_R3SpherePackFactory@@8			; SpherePackFactory::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SpherePackFactory@@8			; SpherePackFactory::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SpherePackFactory@@8		; SpherePackFactory::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@SpherePackCallback@@8		; SpherePackCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVSpherePackCallback@@@8			; SpherePackCallback `RTTI Type Descriptor'
PUBLIC	??_R3SpherePackCallback@@8			; SpherePackCallback::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SpherePackCallback@@8			; SpherePackCallback::`RTTI Base Class Array'
PUBLIC	??_R4SpherePack@@6B@				; SpherePack::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVSpherePack@@@8				; SpherePack `RTTI Type Descriptor'
PUBLIC	??_R3SpherePack@@8				; SpherePack::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SpherePack@@8				; SpherePack::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SpherePack@@8			; SpherePack::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4SpherePackCallback@@6B@			; SpherePackCallback::`RTTI Complete Object Locator'
PUBLIC	??_R4SpherePackFifo@@6B@			; SpherePackFifo::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVSpherePackFifo@@@8			; SpherePackFifo `RTTI Type Descriptor'
PUBLIC	??_R3SpherePackFifo@@8				; SpherePackFifo::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SpherePackFifo@@8				; SpherePackFifo::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SpherePackFifo@@8			; SpherePackFifo::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3f800000
PUBLIC	__real@49c80000
PUBLIC	__real@4ac80000
PUBLIC	__real@7e967699
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_sqrt:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	?RayIntersection@Sphere@@QAE_NABVVector3d@@0MPAV2@@Z:PROC ; Sphere::RayIntersection
EXTRN	?RayIntersectionInFront@Sphere@@QAE_NABVVector3d@@0PAV2@@Z:PROC ; Sphere::RayIntersectionInFront
EXTRN	??_ESphere@@UAEPAXI@Z:PROC			; Sphere::`vector deleting destructor'
EXTRN	?ViewVolumeTest@Frustum@@QBE?AW4ViewState@@ABVVector3d@@M@Z:PROC ; Frustum::ViewVolumeTest
EXTRN	??_ESpherePackCallback@@UAEPAXI@Z:PROC		; SpherePackCallback::`vector deleting destructor'
EXTRN	??_ESpherePackFifo@@UAEPAXI@Z:PROC		; SpherePackFifo::`vector deleting destructor'
EXTRN	??_ESpherePackFactory@@UAEPAXI@Z:PROC		; SpherePackFactory::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@7e967699
CONST	SEGMENT
__real@7e967699 DD 07e967699r			; 1e+038
CONST	ENDS
;	COMDAT __real@4ac80000
CONST	SEGMENT
__real@4ac80000 DD 04ac80000r			; 6.5536e+006
CONST	ENDS
;	COMDAT __real@49c80000
CONST	SEGMENT
__real@49c80000 DD 049c80000r			; 1.6384e+006
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@SpherePackFifo@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SpherePackFifo@@8 DD FLAT:??_R0?AVSpherePackFifo@@@8 ; SpherePackFifo::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SpherePackFifo@@8
rdata$r	ENDS
;	COMDAT ??_R2SpherePackFifo@@8
rdata$r	SEGMENT
??_R2SpherePackFifo@@8 DD FLAT:??_R1A@?0A@EA@SpherePackFifo@@8 ; SpherePackFifo::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3SpherePackFifo@@8
rdata$r	SEGMENT
??_R3SpherePackFifo@@8 DD 00H				; SpherePackFifo::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2SpherePackFifo@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSpherePackFifo@@@8
data$r	SEGMENT
??_R0?AVSpherePackFifo@@@8 DD FLAT:??_7type_info@@6B@	; SpherePackFifo `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSpherePackFifo@@', 00H
data$r	ENDS
;	COMDAT ??_R4SpherePackFifo@@6B@
rdata$r	SEGMENT
??_R4SpherePackFifo@@6B@ DD 00H				; SpherePackFifo::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVSpherePackFifo@@@8
	DD	FLAT:??_R3SpherePackFifo@@8
rdata$r	ENDS
;	COMDAT ??_R4SpherePackCallback@@6B@
rdata$r	SEGMENT
??_R4SpherePackCallback@@6B@ DD 00H			; SpherePackCallback::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVSpherePackCallback@@@8
	DD	FLAT:??_R3SpherePackCallback@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SpherePack@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SpherePack@@8 DD FLAT:??_R0?AVSpherePack@@@8 ; SpherePack::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SpherePack@@8
rdata$r	ENDS
;	COMDAT ??_R2SpherePack@@8
rdata$r	SEGMENT
??_R2SpherePack@@8 DD FLAT:??_R1A@?0A@EA@SpherePack@@8	; SpherePack::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Sphere@@8
rdata$r	ENDS
;	COMDAT ??_R3SpherePack@@8
rdata$r	SEGMENT
??_R3SpherePack@@8 DD 00H				; SpherePack::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2SpherePack@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSpherePack@@@8
data$r	SEGMENT
??_R0?AVSpherePack@@@8 DD FLAT:??_7type_info@@6B@	; SpherePack `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSpherePack@@', 00H
data$r	ENDS
;	COMDAT ??_R4SpherePack@@6B@
rdata$r	SEGMENT
??_R4SpherePack@@6B@ DD 00H				; SpherePack::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVSpherePack@@@8
	DD	FLAT:??_R3SpherePack@@8
rdata$r	ENDS
;	COMDAT ??_R2SpherePackCallback@@8
rdata$r	SEGMENT
??_R2SpherePackCallback@@8 DD FLAT:??_R1A@?0A@EA@SpherePackCallback@@8 ; SpherePackCallback::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3SpherePackCallback@@8
rdata$r	SEGMENT
??_R3SpherePackCallback@@8 DD 00H			; SpherePackCallback::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2SpherePackCallback@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSpherePackCallback@@@8
data$r	SEGMENT
??_R0?AVSpherePackCallback@@@8 DD FLAT:??_7type_info@@6B@ ; SpherePackCallback `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSpherePackCallback@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SpherePackCallback@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SpherePackCallback@@8 DD FLAT:??_R0?AVSpherePackCallback@@@8 ; SpherePackCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SpherePackCallback@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SpherePackFactory@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SpherePackFactory@@8 DD FLAT:??_R0?AVSpherePackFactory@@@8 ; SpherePackFactory::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SpherePackFactory@@8
rdata$r	ENDS
;	COMDAT ??_R2SpherePackFactory@@8
rdata$r	SEGMENT
??_R2SpherePackFactory@@8 DD FLAT:??_R1A@?0A@EA@SpherePackFactory@@8 ; SpherePackFactory::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SpherePackCallback@@8
rdata$r	ENDS
;	COMDAT ??_R3SpherePackFactory@@8
rdata$r	SEGMENT
??_R3SpherePackFactory@@8 DD 00H			; SpherePackFactory::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2SpherePackFactory@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSpherePackFactory@@@8
data$r	SEGMENT
??_R0?AVSpherePackFactory@@@8 DD FLAT:??_7type_info@@6B@ ; SpherePackFactory `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSpherePackFactory@@', 00H
data$r	ENDS
;	COMDAT ??_R4SpherePackFactory@@6B@
rdata$r	SEGMENT
??_R4SpherePackFactory@@6B@ DD 00H			; SpherePackFactory::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVSpherePackFactory@@@8
	DD	FLAT:??_R3SpherePackFactory@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Sphere@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Sphere@@8 DD FLAT:??_R0?AVSphere@@@8	; Sphere::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Sphere@@8
rdata$r	ENDS
;	COMDAT ??_R2Sphere@@8
rdata$r	SEGMENT
??_R2Sphere@@8 DD FLAT:??_R1A@?0A@EA@Sphere@@8		; Sphere::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Sphere@@8
rdata$r	SEGMENT
??_R3Sphere@@8 DD 00H					; Sphere::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Sphere@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSphere@@@8
data$r	SEGMENT
??_R0?AVSphere@@@8 DD FLAT:??_7type_info@@6B@		; Sphere `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSphere@@', 00H
data$r	ENDS
;	COMDAT ??_R4Sphere@@6B@
rdata$r	SEGMENT
??_R4Sphere@@6B@ DD 00H					; Sphere::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVSphere@@@8
	DD	FLAT:??_R3Sphere@@8
rdata$r	ENDS
;	COMDAT ??_7SpherePackFactory@@6B@
CONST	SEGMENT
??_7SpherePackFactory@@6B@ DD FLAT:??_R4SpherePackFactory@@6B@ ; SpherePackFactory::`vftable'
	DD	FLAT:??_ESpherePackFactory@@UAEPAXI@Z
	DD	FLAT:?VisibilityCallback@SpherePackFactory@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z
	DD	FLAT:?RayTraceCallback@SpherePackFactory@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z
	DD	FLAT:?RangeTestCallback@SpherePackFactory@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z
	DD	FLAT:?PointTest2dCallback@SpherePackFactory@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z
CONST	ENDS
;	COMDAT ??_7SpherePackFifo@@6B@
CONST	SEGMENT
??_7SpherePackFifo@@6B@ DD FLAT:??_R4SpherePackFifo@@6B@ ; SpherePackFifo::`vftable'
	DD	FLAT:??_ESpherePackFifo@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7SpherePack@@6B@
CONST	SEGMENT
??_7SpherePack@@6B@ DD FLAT:??_R4SpherePack@@6B@	; SpherePack::`vftable'
	DD	FLAT:??_ESpherePack@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7SpherePackCallback@@6B@
CONST	SEGMENT
??_7SpherePackCallback@@6B@ DD FLAT:??_R4SpherePackCallback@@6B@ ; SpherePackCallback::`vftable'
	DD	FLAT:??_ESpherePackCallback@@UAEPAXI@Z
	DD	FLAT:?VisibilityCallback@SpherePackCallback@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z
	DD	FLAT:?RayTraceCallback@SpherePackCallback@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z
	DD	FLAT:?RangeTestCallback@SpherePackCallback@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z
	DD	FLAT:?PointTest2dCallback@SpherePackCallback@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z
CONST	ENDS
;	COMDAT ??_7Sphere@@6B@
CONST	SEGMENT
??_7Sphere@@6B@ DD FLAT:??_R4Sphere@@6B@		; Sphere::`vftable'
	DD	FLAT:??_ESphere@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Set@?$Pool@VSpherePack@@@@QAEXH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Set@?$Pool@VSpherePack@@@@QAEXH@Z$0
__ehfuncinfo$?Set@?$Pool@VSpherePack@@@@QAEXH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Set@?$Pool@VSpherePack@@@@QAEXH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1SpherePackFactory@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1SpherePackFactory@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1SpherePackFactory@@UAE@XZ$1
__ehfuncinfo$??1SpherePackFactory@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1SpherePackFactory@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0SpherePackFactory@@QAE@HMMM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SpherePackFactory@@QAE@HMMM@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0SpherePackFactory@@QAE@HMMM@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0SpherePackFactory@@QAE@HMMM@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$??0SpherePackFactory@@QAE@HMMM@Z$3
__ehfuncinfo$??0SpherePackFactory@@QAE@HMMM@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0SpherePackFactory@@QAE@HMMM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GSpherePackFactory@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GSpherePackFactory@@UAEPAXI@Z PROC			; SpherePackFactory::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1SpherePackFactory@@UAE@XZ ; SpherePackFactory::~SpherePackFactory
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GSpherePackFactory@@UAEPAXI@Z ENDP			; SpherePackFactory::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h
;	COMDAT ?GetFreeLink@?$Pool@VSpherePack@@@@QAEPAVSpherePack@@XZ
_TEXT	SEGMENT
?GetFreeLink@?$Pool@VSpherePack@@@@QAEPAVSpherePack@@XZ PROC ; Pool<SpherePack>::GetFreeLink, COMDAT
; _this$ = ecx

; 184  : 	{

  00000	8b d1		 mov	 edx, ecx
  00002	56		 push	 esi

; 185  : 		// Free allocated items are always added to the head of the list
; 186  : 		if ( !mFree ) return 0;

  00003	8b 72 10	 mov	 esi, DWORD PTR [edx+16]
  00006	85 f6		 test	 esi, esi
  00008	75 04		 jne	 SHORT $LN2@GetFreeLin
  0000a	33 c0		 xor	 eax, eax
  0000c	5e		 pop	 esi

; 197  : 	};

  0000d	c3		 ret	 0
$LN2@GetFreeLin:

; 187  : 		Type *ret = mFree;
; 188  : 		mFree = ret->GetNext(); // new head of free list

  0000e	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00011	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 189  : 		Type *temp = mHead; // current head of list

  00014	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]

; 190  : 		mHead = ret;        // new head of list is this free one

  00017	89 72 0c	 mov	 DWORD PTR [edx+12], esi

; 191  : 		if ( temp ) temp->SetPrevious(ret);

  0001a	85 c0		 test	 eax, eax
  0001c	74 03		 je	 SHORT $LN7@GetFreeLin
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 207  : 	void SetPrevious(SpherePack *pack) { mPrevious = pack; };

  0001e	89 70 1c	 mov	 DWORD PTR [eax+28], esi
$LN7@GetFreeLin:

; 206  : 	void SetNext(SpherePack *pack) { mNext = pack; };

  00021	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  00024	89 41 18	 mov	 DWORD PTR [ecx+24], eax
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h

; 196  : 		return ret;

  00027	8b c6		 mov	 eax, esi
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 207  : 	void SetPrevious(SpherePack *pack) { mPrevious = pack; };

  00029	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  0002c	5e		 pop	 esi
  0002d	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h

; 194  : 		mUsedCount++;

  00034	ff 42 14	 inc	 DWORD PTR [edx+20]

; 195  : 		mFreeCount--;

  00037	ff 4a 18	 dec	 DWORD PTR [edx+24]

; 197  : 	};

  0003a	c3		 ret	 0
?GetFreeLink@?$Pool@VSpherePack@@@@QAEPAVSpherePack@@XZ ENDP ; Pool<SpherePack>::GetFreeLink
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h
;	COMDAT ?Release@?$Pool@VSpherePack@@@@QAEXPAVSpherePack@@@Z
_TEXT	SEGMENT
_t$ = 8							; size = 4
?Release@?$Pool@VSpherePack@@@@QAEXPAVSpherePack@@@Z PROC ; Pool<SpherePack>::Release, COMDAT
; _this$ = ecx

; 140  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 141  : 		
; 142  : 		if ( t == mCurrent ) mCurrent = t->GetNext();

  00003	8b 55 08	 mov	 edx, DWORD PTR _t$[ebp]
  00006	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00009	75 06		 jne	 SHORT $LN5@Release
  0000b	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0000e	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN5@Release:
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 204  : 	SpherePack * GetPrevious(void) const { return mPrevious; };

  00011	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00014	56		 push	 esi
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h

; 147  : 		if ( prev )

  00015	85 c0		 test	 eax, eax
  00017	74 0f		 je	 SHORT $LN4@Release
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 203  : 	SpherePack * GetNext(void)     const { return mNext; };

  00019	8b 72 18	 mov	 esi, DWORD PTR [edx+24]

; 205  : 	
; 206  : 	void SetNext(SpherePack *pack) { mNext = pack; };

  0001c	89 70 18	 mov	 DWORD PTR [eax+24], esi
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h

; 151  : 			if ( next ) next->SetPrevious(prev);

  0001f	85 f6		 test	 esi, esi
  00021	74 16		 je	 SHORT $LN20@Release
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 207  : 	void SetPrevious(SpherePack *pack) { mPrevious = pack; };

  00023	89 46 1c	 mov	 DWORD PTR [esi+28], eax
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h

; 154  : 		else

  00026	eb 11		 jmp	 SHORT $LN20@Release
$LN4@Release:

; 155  : 		{
; 156  : 			Type *next = t->GetNext();
; 157  : 			mHead = next;

  00028	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0002b	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 158  : 			if ( mHead ) mHead->SetPrevious(0);

  0002e	85 c0		 test	 eax, eax
  00030	74 07		 je	 SHORT $LN20@Release
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 207  : 	void SetPrevious(SpherePack *pack) { mPrevious = pack; };

  00032	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0
$LN20@Release:
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h

; 161  : 		Type *temp = mFree; // old head of free list.

  00039	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 162  : 		mFree = t; // new head of linked list.

  0003c	89 51 10	 mov	 DWORD PTR [ecx+16], edx
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 207  : 	void SetPrevious(SpherePack *pack) { mPrevious = pack; };

  0003f	c7 42 1c 00 00
	00 00		 mov	 DWORD PTR [edx+28], 0

; 205  : 	
; 206  : 	void SetNext(SpherePack *pack) { mNext = pack; };

  00046	89 42 18	 mov	 DWORD PTR [edx+24], eax
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h

; 166  : 		mUsedCount--;

  00049	ff 49 14	 dec	 DWORD PTR [ecx+20]

; 167  : 		mFreeCount++;

  0004c	ff 41 18	 inc	 DWORD PTR [ecx+24]
  0004f	5e		 pop	 esi

; 168  : 	};

  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?Release@?$Pool@VSpherePack@@@@QAEXPAVSpherePack@@@Z ENDP ; Pool<SpherePack>::Release
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h
;	COMDAT ?Set@?$Pool@VSpherePack@@@@QAEXH@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_maxitems$ = 8						; size = 4
?Set@?$Pool@VSpherePack@@@@QAEXH@Z PROC			; Pool<SpherePack>::Set, COMDAT
; _this$ = ecx

; 54   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Set@?$Pool@VSpherePack@@@@QAEXH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx

; 55   : 		if (mData)

  00028	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0002b	85 c9		 test	 ecx, ecx
  0002d	74 1a		 je	 SHORT $LN10@Set

; 56   : 			delete [] mData; // delete any previous incarnation.

  0002f	83 79 fc 00	 cmp	 DWORD PTR [ecx-4], 0
  00033	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  00036	74 08		 je	 SHORT $LN9@Set
  00038	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003a	6a 03		 push	 3
  0003c	ff 10		 call	 DWORD PTR [eax]
  0003e	eb 09		 jmp	 SHORT $LN10@Set
$LN9@Set:
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00046	83 c4 04	 add	 esp, 4
$LN10@Set:

; 57   : 		mMaxItems = maxitems;

  00049	8b 5d 08	 mov	 ebx, DWORD PTR _maxitems$[ebp]

; 58   : 		mData = new Type[mMaxItems];

  0004c	33 c9		 xor	 ecx, ecx
  0004e	8b c3		 mov	 eax, ebx
  00050	89 1e		 mov	 DWORD PTR [esi], ebx
  00052	ba 50 00 00 00	 mov	 edx, 80			; 00000050H
  00057	f7 e2		 mul	 edx
  00059	0f 90 c1	 seto	 cl
  0005c	f7 d9		 neg	 ecx
  0005e	0b c8		 or	 ecx, eax
  00060	33 c0		 xor	 eax, eax
  00062	83 c1 04	 add	 ecx, 4
  00065	0f 92 c0	 setb	 al
  00068	f7 d8		 neg	 eax
  0006a	0b c1		 or	 eax, ecx
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00072	83 c4 04	 add	 esp, 4
  00075	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00078	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0007f	85 c0		 test	 eax, eax
  00081	74 1a		 je	 SHORT $LN13@Set
  00083	68 00 00 00 00	 push	 OFFSET ??1SpherePack@@UAE@XZ ; SpherePack::~SpherePack
  00088	68 00 00 00 00	 push	 OFFSET ??0SpherePack@@QAE@XZ ; SpherePack::SpherePack
  0008d	53		 push	 ebx
  0008e	8d 78 04	 lea	 edi, DWORD PTR [eax+4]
  00091	89 18		 mov	 DWORD PTR [eax], ebx
  00093	6a 50		 push	 80			; 00000050H
  00095	57		 push	 edi
  00096	e8 00 00 00 00	 call	 ??_L@YGXPAXIHP6EX0@Z1@Z
  0009b	eb 02		 jmp	 SHORT $LN14@Set
$LN13@Set:
  0009d	33 ff		 xor	 edi, edi
$LN14@Set:

; 59   : 		mFree = mData;
; 60   : 		mHead = 0;
; 61   : 		int loopValue = (mMaxItems-1);

  0009f	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 62   : 		for (int i=0; i<loopValue; i++)

  000a1	33 d2		 xor	 edx, edx
  000a3	4b		 dec	 ebx
  000a4	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  000a7	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  000aa	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  000b1	85 db		 test	 ebx, ebx
  000b3	7e 2f		 jle	 SHORT $LN3@Set
$LL5@Set:

; 63   : 		{
; 64   : 			mData[i].SetNext( &mData[i+1] );

  000b5	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000b8	8d 3c 92	 lea	 edi, DWORD PTR [edx+edx*4]
  000bb	c1 e7 04	 shl	 edi, 4
  000be	8d 41 50	 lea	 eax, DWORD PTR [ecx+80]
  000c1	03 c7		 add	 eax, edi
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 206  : 	void SetNext(SpherePack *pack) { mNext = pack; };

  000c3	89 44 39 18	 mov	 DWORD PTR [ecx+edi+24], eax
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h

; 65   : 			if ( i == 0 )

  000c7	85 d2		 test	 edx, edx
  000c9	75 08		 jne	 SHORT $LN2@Set
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 207  : 	void SetPrevious(SpherePack *pack) { mPrevious = pack; };

  000cb	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ce	89 50 1c	 mov	 DWORD PTR [eax+28], edx
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h

; 67   : 			else

  000d1	eb 0c		 jmp	 SHORT $LN4@Set
$LN2@Set:
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 207  : 	void SetPrevious(SpherePack *pack) { mPrevious = pack; };

  000d3	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d6	8d 41 b0	 lea	 eax, DWORD PTR [ecx-80]
  000d9	03 c7		 add	 eax, edi
  000db	89 44 39 1c	 mov	 DWORD PTR [ecx+edi+28], eax
$LN4@Set:
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h

; 62   : 		for (int i=0; i<loopValue; i++)

  000df	42		 inc	 edx
  000e0	3b d3		 cmp	 edx, ebx
  000e2	7c d1		 jl	 SHORT $LL5@Set
$LN3@Set:
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 206  : 	void SetNext(SpherePack *pack) { mNext = pack; };

  000e4	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h

; 71   : 		mData[loopValue].SetNext(0);

  000e7	8d 0c 9b	 lea	 ecx, DWORD PTR [ebx+ebx*4]
  000ea	c1 e1 04	 shl	 ecx, 4
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 206  : 	void SetNext(SpherePack *pack) { mNext = pack; };

  000ed	c7 44 01 18 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+24], 0

; 207  : 	void SetPrevious(SpherePack *pack) { mPrevious = pack; };

  000f5	03 4e 08	 add	 ecx, DWORD PTR [esi+8]
  000f8	8d 41 b0	 lea	 eax, DWORD PTR [ecx-80]
  000fb	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h

; 74   : 		mFreeCount = maxitems;

  000fe	8b 45 08	 mov	 eax, DWORD PTR _maxitems$[ebp]
  00101	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00108	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 75   : 		mUsedCount = 0;

  0010b	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 76   : 	};

  00112	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00115	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011c	59		 pop	 ecx
  0011d	5f		 pop	 edi
  0011e	5e		 pop	 esi
  0011f	5b		 pop	 ebx
  00120	8b e5		 mov	 esp, ebp
  00122	5d		 pop	 ebp
  00123	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Set@?$Pool@VSpherePack@@@@QAEXH@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?Set@?$Pool@VSpherePack@@@@QAEXH@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Set@?$Pool@VSpherePack@@@@QAEXH@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Set@?$Pool@VSpherePack@@@@QAEXH@Z ENDP			; Pool<SpherePack>::Set
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h
;	COMDAT ??1?$Pool@VSpherePack@@@@QAE@XZ
_TEXT	SEGMENT
??1?$Pool@VSpherePack@@@@QAE@XZ PROC			; Pool<SpherePack>::~Pool<SpherePack>, COMDAT
; _this$ = ecx

; 34   : 		if (mData)

  00000	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00003	85 c9		 test	 ecx, ecx
  00005	74 17		 je	 SHORT $LN5@Pool

; 35   : 			delete [] mData;

  00007	83 79 fc 00	 cmp	 DWORD PTR [ecx-4], 0
  0000b	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  0000e	74 07		 je	 SHORT $LN4@Pool
  00010	8b 01		 mov	 eax, DWORD PTR [ecx]
  00012	6a 03		 push	 3
  00014	ff 10		 call	 DWORD PTR [eax]

; 36   : 	};

  00016	c3		 ret	 0
$LN4@Pool:

; 35   : 			delete [] mData;

  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0001d	59		 pop	 ecx
$LN5@Pool:

; 36   : 	};

  0001e	c3		 ret	 0
??1?$Pool@VSpherePack@@@@QAE@XZ ENDP			; Pool<SpherePack>::~Pool<SpherePack>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h
;	COMDAT ??0?$Pool@VSpherePack@@@@QAE@XZ
_TEXT	SEGMENT
??0?$Pool@VSpherePack@@@@QAE@XZ PROC			; Pool<SpherePack>::Pool<SpherePack>, COMDAT
; _this$ = ecx

; 23   : 	{
; 24   : 		mHead = 0;

  00000	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 25   : 		mFree = 0;
; 26   : 		mData = 0;
; 27   : 		mCurrent = 0;
; 28   : 		mFreeCount = 0;
; 29   : 		mUsedCount = 0;
; 30   : 	};

  00007	8b c1		 mov	 eax, ecx
  00009	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  00010	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00017	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0001e	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
  00025	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  0002c	c3		 ret	 0
??0?$Pool@VSpherePack@@@@QAE@XZ ENDP			; Pool<SpherePack>::Pool<SpherePack>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
;	COMDAT ?Reset@SpherePackFactory@@QAEXXZ
_TEXT	SEGMENT
?Reset@SpherePackFactory@@QAEXXZ PROC			; SpherePackFactory::Reset, COMDAT
; _this$ = ecx

; 852  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 853  : 	mRoot->Reset();

  00003	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00006	e8 00 00 00 00	 call	 ?Reset@SpherePack@@QAEXXZ ; SpherePack::Reset

; 854  : 	mLeaf->Reset();

  0000b	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000e	5e		 pop	 esi
  0000f	e9 00 00 00 00	 jmp	 ?Reset@SpherePack@@QAEXXZ ; SpherePack::Reset
?Reset@SpherePackFactory@@QAEXXZ ENDP			; SpherePackFactory::Reset
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
;	COMDAT ?VisibilityCallback@SpherePackFactory@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z
_TEXT	SEGMENT
_f$ = 8							; size = 4
_sphere$ = 12						; size = 4
_state$ = 16						; size = 4
?VisibilityCallback@SpherePackFactory@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z PROC ; SpherePackFactory::VisibilityCallback, COMDAT
; _this$ = ecx

; 871  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 209  : 	void * GetUserData(void) const { return mUserData; };

  00003	8b 45 0c	 mov	 eax, DWORD PTR _sphere$[ebp]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 871  : {

  00006	8b d1		 mov	 edx, ecx
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 209  : 	void * GetUserData(void) const { return mUserData; };

  00008	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 877  : 	if (link) link->VisibilityTest(f,mCallback,state);

  0000b	85 c9		 test	 ecx, ecx
  0000d	74 0e		 je	 SHORT $LN1@Visibility
  0000f	ff 75 10	 push	 DWORD PTR _state$[ebp]
  00012	ff 72 0c	 push	 DWORD PTR [edx+12]
  00015	ff 75 08	 push	 DWORD PTR _f$[ebp]
  00018	e8 00 00 00 00	 call	 ?VisibilityTest@SpherePack@@QAEXABVFrustum@@PAVSpherePackCallback@@W4ViewState@@@Z ; SpherePack::VisibilityTest
$LN1@Visibility:

; 878  : }

  0001d	5d		 pop	 ebp
  0001e	c2 0c 00	 ret	 12			; 0000000cH
?VisibilityCallback@SpherePackFactory@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z ENDP ; SpherePackFactory::VisibilityCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
;	COMDAT ?PointTest2dCallback@SpherePackFactory@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_sphere$ = 12						; size = 4
_state$ = 16						; size = 4
?PointTest2dCallback@SpherePackFactory@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z PROC ; SpherePackFactory::PointTest2dCallback, COMDAT
; _this$ = ecx

; 787  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 209  : 	void * GetUserData(void) const { return mUserData; };

  00003	8b 45 0c	 mov	 eax, DWORD PTR _sphere$[ebp]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 787  : {

  00006	8b d1		 mov	 edx, ecx
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 209  : 	void * GetUserData(void) const { return mUserData; };

  00008	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 793  : 	if (link) link->PointTest2d(p, mCallback,state);

  0000b	85 c9		 test	 ecx, ecx
  0000d	74 0e		 je	 SHORT $LN1@PointTest2
  0000f	ff 75 10	 push	 DWORD PTR _state$[ebp]
  00012	ff 72 0c	 push	 DWORD PTR [edx+12]
  00015	ff 75 08	 push	 DWORD PTR _p$[ebp]
  00018	e8 00 00 00 00	 call	 ?PointTest2d@SpherePack@@QAEXABVVector3d@@PAVSpherePackCallback@@W4ViewState@@@Z ; SpherePack::PointTest2d
$LN1@PointTest2:

; 794  : };

  0001d	5d		 pop	 ebp
  0001e	c2 0c 00	 ret	 12			; 0000000cH
?PointTest2dCallback@SpherePackFactory@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z ENDP ; SpherePackFactory::PointTest2dCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
;	COMDAT ?RangeTestCallback@SpherePackFactory@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_distance$ = 12						; size = 4
_sphere$ = 16						; size = 4
_state$ = 20						; size = 4
?RangeTestCallback@SpherePackFactory@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z PROC ; SpherePackFactory::RangeTestCallback, COMDAT
; _this$ = ecx

; 777  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 209  : 	void * GetUserData(void) const { return mUserData; };

  00003	8b 45 10	 mov	 eax, DWORD PTR _sphere$[ebp]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 777  : {

  00006	8b d1		 mov	 edx, ecx
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 209  : 	void * GetUserData(void) const { return mUserData; };

  00008	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 783  : 	if (link) link->RangeTest(p,distance,mCallback,state);

  0000b	85 c9		 test	 ecx, ecx
  0000d	74 19		 je	 SHORT $LN1@RangeTestC
  0000f	ff 75 14	 push	 DWORD PTR _state$[ebp]
  00012	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _distance$[ebp]
  00017	ff 72 0c	 push	 DWORD PTR [edx+12]
  0001a	51		 push	 ecx
  0001b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00020	ff 75 08	 push	 DWORD PTR _p$[ebp]
  00023	e8 00 00 00 00	 call	 ?RangeTest@SpherePack@@QAEXABVVector3d@@MPAVSpherePackCallback@@W4ViewState@@@Z ; SpherePack::RangeTest
$LN1@RangeTestC:

; 784  : };

  00028	5d		 pop	 ebp
  00029	c2 10 00	 ret	 16			; 00000010H
?RangeTestCallback@SpherePackFactory@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z ENDP ; SpherePackFactory::RangeTestCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
;	COMDAT ?RayTraceCallback@SpherePackFactory@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z
_TEXT	SEGMENT
_p1$ = 8						; size = 4
_dir$ = 12						; size = 4
_distance$ = 16						; size = 4
___formal$ = 20						; size = 4
_sphere$ = 24						; size = 4
?RayTraceCallback@SpherePackFactory@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z PROC ; SpherePackFactory::RayTraceCallback, COMDAT
; _this$ = ecx

; 839  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 209  : 	void * GetUserData(void) const { return mUserData; };

  00003	8b 45 18	 mov	 eax, DWORD PTR _sphere$[ebp]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 839  : {

  00006	8b d1		 mov	 edx, ecx
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 209  : 	void * GetUserData(void) const { return mUserData; };

  00008	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 845  : 	if (link) link->RayTrace(p1,dir,distance,mCallback);

  0000b	85 c9		 test	 ecx, ecx
  0000d	74 19		 je	 SHORT $LN1@RayTraceCa
  0000f	ff 72 0c	 push	 DWORD PTR [edx+12]
  00012	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _distance$[ebp]
  00017	51		 push	 ecx
  00018	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001d	ff 75 0c	 push	 DWORD PTR _dir$[ebp]
  00020	ff 75 08	 push	 DWORD PTR _p1$[ebp]
  00023	e8 00 00 00 00	 call	 ?RayTrace@SpherePack@@QAEXABVVector3d@@0MPAVSpherePackCallback@@@Z ; SpherePack::RayTrace
$LN1@RayTraceCa:

; 846  : };

  00028	5d		 pop	 ebp
  00029	c2 14 00	 ret	 20			; 00000014H
?RayTraceCallback@SpherePackFactory@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z ENDP ; SpherePackFactory::RayTraceCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
;	COMDAT ?PointTest2d@SpherePackFactory@@QAEXABVVector3d@@PAVSpherePackCallback@@@Z
_TEXT	SEGMENT
_center$ = 8						; size = 4
_callback$ = 12						; size = 4
?PointTest2d@SpherePackFactory@@QAEXABVVector3d@@PAVSpherePackCallback@@@Z PROC ; SpherePackFactory::PointTest2d, COMDAT
; _this$ = ecx

; 671  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 672  : #ifdef __STATIC_RANGE__
; 673  : 	if (!center.IsInStaticRange())
; 674  : 	{
; 675  : 		TraceError("SpherePackFactory::RangeTest2d - RANGE ERROR %f, %f, %f",
; 676  : 			center.x, center.y, center.z);
; 677  : 		assert("SpherePackFactory::RangeTest2d - RANGE ERROR");
; 678  : 		return;
; 679  : 	}
; 680  : #endif
; 681  : 	mCallback = callback;

  00003	8b 45 0c	 mov	 eax, DWORD PTR _callback$[ebp]

; 682  : 
; 683  : #ifdef SPHERELIB_STRICT
; 684  : 	mRoot->PointTest2d(center, this,VS_PARTIAL);
; 685  : 	extern bool MAPOUTDOOR_GET_HEIGHT_TRACE;
; 686  : 	if (MAPOUTDOOR_GET_HEIGHT_TRACE)
; 687  : 		puts("================================================");
; 688  : #else
; 689  : 	mRoot->PointTest2d(center, this,VS_PARTIAL);

  00006	6a 01		 push	 1
  00008	51		 push	 ecx
  00009	ff 75 08	 push	 DWORD PTR _center$[ebp]
  0000c	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  0000f	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00012	e8 00 00 00 00	 call	 ?PointTest2d@SpherePack@@QAEXABVVector3d@@PAVSpherePackCallback@@W4ViewState@@@Z ; SpherePack::PointTest2d

; 690  : 	
; 691  : #endif
; 692  : 	
; 693  : }

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?PointTest2d@SpherePackFactory@@QAEXABVVector3d@@PAVSpherePackCallback@@@Z ENDP ; SpherePackFactory::PointTest2d
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
;	COMDAT ?RangeTest@SpherePackFactory@@QAEXABVVector3d@@MPAVSpherePackCallback@@@Z
_TEXT	SEGMENT
_center$ = 8						; size = 4
_radius$ = 12						; size = 4
_callback$ = 16						; size = 4
?RangeTest@SpherePackFactory@@QAEXABVVector3d@@MPAVSpherePackCallback@@@Z PROC ; SpherePackFactory::RangeTest, COMDAT
; _this$ = ecx

; 656  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 657  : #ifdef __STATIC_RANGE__
; 658  : 	if (!center.IsInStaticRange())
; 659  : 	{
; 660  : 		TraceError("SpherePackFactory::RangeTest - RANGE ERROR %f, %f, %f",
; 661  : 			center.x, center.y, center.z);
; 662  : 		assert("SpherePackFactory::RangeTest - RANGE ERROR");
; 663  : 		return;
; 664  : 	}
; 665  : #endif
; 666  : 	mCallback = callback;
; 667  : 	mRoot->RangeTest(center,radius,this,VS_PARTIAL);

  00003	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _radius$[ebp]
  00008	8b 45 10	 mov	 eax, DWORD PTR _callback$[ebp]
  0000b	6a 01		 push	 1
  0000d	51		 push	 ecx
  0000e	51		 push	 ecx
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	ff 75 08	 push	 DWORD PTR _center$[ebp]
  00017	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  0001a	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0001d	e8 00 00 00 00	 call	 ?RangeTest@SpherePack@@QAEXABVVector3d@@MPAVSpherePackCallback@@W4ViewState@@@Z ; SpherePack::RangeTest

; 668  : }

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?RangeTest@SpherePackFactory@@QAEXABVVector3d@@MPAVSpherePackCallback@@@Z ENDP ; SpherePackFactory::RangeTest
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
;	COMDAT ?RayTrace@SpherePackFactory@@QAEXABVVector3d@@0PAVSpherePackCallback@@@Z
_TEXT	SEGMENT
_l$1 = -20						; size = 4
_dir$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_p1$ = 8						; size = 4
_p2$ = 12						; size = 4
_callback$ = 16						; size = 4
?RayTrace@SpherePackFactory@@QAEXABVVector3d@@0PAVSpherePackCallback@@@Z PROC ; SpherePackFactory::RayTrace, COMDAT
; _this$ = ecx

; 645  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _p2$[ebp]
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	8b 7d 08	 mov	 edi, DWORD PTR _p1$[ebp]
; File a:\vs\vc\include\math.h

; 775  :     return (float)sqrt(_X);

  00018	83 ec 08	 sub	 esp, 8
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 30   : 		x = a.x;

  0001b	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 645  : {

  0001f	8b f1		 mov	 esi, ecx
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 31   : 		y = a.y;

  00021	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]

; 32   : 		z = a.z;

  00026	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0002b	f3 0f 11 55 f4	 movss	 DWORD PTR _dir$[ebp+4], xmm2
  00030	f3 0f 11 4d f0	 movss	 DWORD PTR _dir$[ebp], xmm1

; 33   : 	};
; 34   : 	
; 35   : 	Vector3d(float a,float b,float c) // construct with initial point.
; 36   : 	{
; 37   : 		x = a;
; 38   : 		y = b;
; 39   : 		z = c;
; 40   : 	};
; 41   : 	
; 42   : 	bool operator==(const Vector3d &a) const
; 43   : 	{
; 44   : 		if ( a.x == x && a.y == y && a.z == z ) return true;
; 45   : 		return false;
; 46   : 	};
; 47   : 	
; 48   : 	bool operator!=(const Vector3d &a) const
; 49   : 	{
; 50   : 		if ( a.x != x || a.y != y || a.z != z ) return true;
; 51   : 		return false;
; 52   : 	};
; 53   : 	
; 54   : 	
; 55   : 	// Operators
; 56   :     Vector3d& operator = (const Vector3d& A)          // ASSIGNMENT (=)
; 57   : 	{ x=A.x; y=A.y; z=A.z;
; 58   : 	return(*this);  };
; 59   : 	
; 60   :     Vector3d operator + (const Vector3d& A) const     // ADDITION (+)
; 61   : 	{ Vector3d Sum(x+A.x, y+A.y, z+A.z);
; 62   : 	return(Sum); };
; 63   : 	
; 64   :     Vector3d operator - (const Vector3d& A) const     // SUBTRACTION (-)
; 65   : 	{ Vector3d Diff(x-A.x, y-A.y, z-A.z);
; 66   : 	return(Diff); };
; 67   : 	
; 68   :     Vector3d operator * (const float s) const       // MULTIPLY BY SCALAR (*)
; 69   : 	{ Vector3d Scaled(x*s, y*s, z*s);
; 70   : 	return(Scaled); };
; 71   : 	
; 72   :     Vector3d operator / (const float s) const       // DIVIDE BY SCALAR (/)
; 73   :     { 
; 74   : 		float r = 1.0f / s;
; 75   :         Vector3d Scaled(x*r, y*r, z*r);
; 76   :         return(Scaled); 
; 77   :     };
; 78   : 	
; 79   :     void operator += (const Vector3d A)             // ACCUMULATED VECTOR ADDITION (+=)
; 80   : 	{ x+=A.x; y+=A.y; z+=A.z; };
; 81   :     void operator -= (const Vector3d A)             // ACCUMULATED VECTOR SUBTRACTION (+=)
; 82   : 	{ x-=A.x; y-=A.y; z-=A.z; };
; 83   :     void operator *= (const float s)        // ACCUMULATED SCALAR MULTIPLICATION (*=) (bpc 4/24/2000)
; 84   : 	{x*=s; y*=s; z*=s;}
; 85   : 	
; 86   :     Vector3d operator - (void) const                // NEGATION (-)
; 87   : 	{ Vector3d Negated(-x, -y, -z);
; 88   : 	return(Negated); };
; 89   : 	
; 90   :     float operator [] (const int i) const         // ALLOWS VECTOR ACCESS AS AN ARRAY.
; 91   : 	{ return( (i==0)?x:((i==1)?y:z) ); };
; 92   :     float & operator [] (const int i)
; 93   : 	{ return( (i==0)?x:((i==1)?y:z) ); };
; 94   : 	//
; 95   : 	
; 96   : 	// accessor methods.
; 97   : 	float GetX(void) const { return x; };
; 98   : 	float GetY(void) const { return y; };
; 99   : 	float GetZ(void) const { return z; };
; 100  : 	
; 101  : 	void SetX(float t)   { x   = t; };
; 102  : 	void SetY(float t)   { y   = t; };
; 103  : 	void SetZ(float t)   { z   = t; };
; 104  : 	
; 105  : 	void Set(float a,float b,float c)
; 106  : 	{
; 107  : 		x = a;
; 108  : 		y = b;
; 109  : 		z = c;
; 110  : 	};
; 111  : 	
; 112  : 	void Zero(void)
; 113  : 	{
; 114  : 		x = y = z = 0;
; 115  : 	};
; 116  : 	
; 117  : 	// return -(*this).
; 118  : 	Vector3d negative(void) const
; 119  : 	{
; 120  : 		Vector3d result;
; 121  : 		result.x = -x;
; 122  : 		result.y = -y;
; 123  : 		result.z = -z;
; 124  : 		return result;
; 125  : 	}
; 126  : 	
; 127  : 	float Magnitude(void) const
; 128  : 	{
; 129  : 		return (sqrtf(x * x + y * y + z * z));
; 130  : 	};
; 131  : 	
; 132  : 	void Lerp(const Vector3d& from,const Vector3d& to,float slerp)
; 133  : 	{
; 134  : 		*this = to-from; // delta on all 3 axis
; 135  : 		*this*=slerp;    // times interpolant distance.
; 136  : 		*this+=from;     // plus source
; 137  : 	};
; 138  : 	
; 139  : 	float Length(void) const          // length of vector.
; 140  : 	{
; 141  : 		return float(sqrtf( x*x + y*y + z*z ));

  00035	f3 0f 59 d2	 mulss	 xmm2, xmm2
  00039	f3 0f 59 c9	 mulss	 xmm1, xmm1

; 32   : 		z = a.z;

  0003d	f3 0f 11 45 f8	 movss	 DWORD PTR _dir$[ebp+8], xmm0

; 33   : 	};
; 34   : 	
; 35   : 	Vector3d(float a,float b,float c) // construct with initial point.
; 36   : 	{
; 37   : 		x = a;
; 38   : 		y = b;
; 39   : 		z = c;
; 40   : 	};
; 41   : 	
; 42   : 	bool operator==(const Vector3d &a) const
; 43   : 	{
; 44   : 		if ( a.x == x && a.y == y && a.z == z ) return true;
; 45   : 		return false;
; 46   : 	};
; 47   : 	
; 48   : 	bool operator!=(const Vector3d &a) const
; 49   : 	{
; 50   : 		if ( a.x != x || a.y != y || a.z != z ) return true;
; 51   : 		return false;
; 52   : 	};
; 53   : 	
; 54   : 	
; 55   : 	// Operators
; 56   :     Vector3d& operator = (const Vector3d& A)          // ASSIGNMENT (=)
; 57   : 	{ x=A.x; y=A.y; z=A.z;
; 58   : 	return(*this);  };
; 59   : 	
; 60   :     Vector3d operator + (const Vector3d& A) const     // ADDITION (+)
; 61   : 	{ Vector3d Sum(x+A.x, y+A.y, z+A.z);
; 62   : 	return(Sum); };
; 63   : 	
; 64   :     Vector3d operator - (const Vector3d& A) const     // SUBTRACTION (-)
; 65   : 	{ Vector3d Diff(x-A.x, y-A.y, z-A.z);
; 66   : 	return(Diff); };
; 67   : 	
; 68   :     Vector3d operator * (const float s) const       // MULTIPLY BY SCALAR (*)
; 69   : 	{ Vector3d Scaled(x*s, y*s, z*s);
; 70   : 	return(Scaled); };
; 71   : 	
; 72   :     Vector3d operator / (const float s) const       // DIVIDE BY SCALAR (/)
; 73   :     { 
; 74   : 		float r = 1.0f / s;
; 75   :         Vector3d Scaled(x*r, y*r, z*r);
; 76   :         return(Scaled); 
; 77   :     };
; 78   : 	
; 79   :     void operator += (const Vector3d A)             // ACCUMULATED VECTOR ADDITION (+=)
; 80   : 	{ x+=A.x; y+=A.y; z+=A.z; };
; 81   :     void operator -= (const Vector3d A)             // ACCUMULATED VECTOR SUBTRACTION (+=)
; 82   : 	{ x-=A.x; y-=A.y; z-=A.z; };
; 83   :     void operator *= (const float s)        // ACCUMULATED SCALAR MULTIPLICATION (*=) (bpc 4/24/2000)
; 84   : 	{x*=s; y*=s; z*=s;}
; 85   : 	
; 86   :     Vector3d operator - (void) const                // NEGATION (-)
; 87   : 	{ Vector3d Negated(-x, -y, -z);
; 88   : 	return(Negated); };
; 89   : 	
; 90   :     float operator [] (const int i) const         // ALLOWS VECTOR ACCESS AS AN ARRAY.
; 91   : 	{ return( (i==0)?x:((i==1)?y:z) ); };
; 92   :     float & operator [] (const int i)
; 93   : 	{ return( (i==0)?x:((i==1)?y:z) ); };
; 94   : 	//
; 95   : 	
; 96   : 	// accessor methods.
; 97   : 	float GetX(void) const { return x; };
; 98   : 	float GetY(void) const { return y; };
; 99   : 	float GetZ(void) const { return z; };
; 100  : 	
; 101  : 	void SetX(float t)   { x   = t; };
; 102  : 	void SetY(float t)   { y   = t; };
; 103  : 	void SetZ(float t)   { z   = t; };
; 104  : 	
; 105  : 	void Set(float a,float b,float c)
; 106  : 	{
; 107  : 		x = a;
; 108  : 		y = b;
; 109  : 		z = c;
; 110  : 	};
; 111  : 	
; 112  : 	void Zero(void)
; 113  : 	{
; 114  : 		x = y = z = 0;
; 115  : 	};
; 116  : 	
; 117  : 	// return -(*this).
; 118  : 	Vector3d negative(void) const
; 119  : 	{
; 120  : 		Vector3d result;
; 121  : 		result.x = -x;
; 122  : 		result.y = -y;
; 123  : 		result.z = -z;
; 124  : 		return result;
; 125  : 	}
; 126  : 	
; 127  : 	float Magnitude(void) const
; 128  : 	{
; 129  : 		return (sqrtf(x * x + y * y + z * z));
; 130  : 	};
; 131  : 	
; 132  : 	void Lerp(const Vector3d& from,const Vector3d& to,float slerp)
; 133  : 	{
; 134  : 		*this = to-from; // delta on all 3 axis
; 135  : 		*this*=slerp;    // times interpolant distance.
; 136  : 		*this+=from;     // plus source
; 137  : 	};
; 138  : 	
; 139  : 	float Length(void) const          // length of vector.
; 140  : 	{
; 141  : 		return float(sqrtf( x*x + y*y + z*z ));

  00042	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00046	f3 0f 58 d1	 addss	 xmm2, xmm1
  0004a	f3 0f 58 d0	 addss	 xmm2, xmm0
; File a:\vs\vc\include\math.h

; 775  :     return (float)sqrt(_X);

  0004e	0f 5a c2	 cvtps2pd xmm0, xmm2
  00051	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00056	e8 00 00 00 00	 call	 _sqrt
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 185  : 		float l = Length(); // get length.

  0005b	d9 5d ec	 fstp	 DWORD PTR _l$1[ebp]

; 186  : 		if ( l != 0 )

  0005e	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _l$1[ebp]
; File a:\vs\vc\include\math.h

; 775  :     return (float)sqrt(_X);

  00063	83 c4 08	 add	 esp, 8
  00066	0f 57 c0	 xorps	 xmm0, xmm0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 186  : 		if ( l != 0 )

  00069	0f 2e c8	 ucomiss xmm1, xmm0
  0006c	9f		 lahf
  0006d	f6 c4 44	 test	 ah, 68			; 00000044H
  00070	7b 2c		 jnp	 SHORT $LN8@RayTrace

; 187  : 		{
; 188  : 			x/=l;

  00072	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _dir$[ebp]
  00077	f3 0f 5e c1	 divss	 xmm0, xmm1
  0007b	f3 0f 11 45 f0	 movss	 DWORD PTR _dir$[ebp], xmm0

; 189  : 			y/=l;

  00080	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _dir$[ebp+4]
  00085	f3 0f 5e c1	 divss	 xmm0, xmm1
  00089	f3 0f 11 45 f4	 movss	 DWORD PTR _dir$[ebp+4], xmm0

; 190  : 			z/=l;

  0008e	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _dir$[ebp+8]
  00093	f3 0f 5e c1	 divss	 xmm0, xmm1
  00097	f3 0f 11 45 f8	 movss	 DWORD PTR _dir$[ebp+8], xmm0

; 191  : 		}
; 192  : 		else

  0009c	eb 15		 jmp	 SHORT $LN7@RayTrace
$LN8@RayTrace:

; 193  : 		{
; 194  : 			x = y = z = 0;

  0009e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _dir$[ebp+8], 0
  000a5	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dir$[ebp+4], 0
  000ac	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _dir$[ebp], 0
$LN7@RayTrace:
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 649  : 	mCallback = callback;

  000b3	8b 45 10	 mov	 eax, DWORD PTR _callback$[ebp]

; 650  : 	mRoot->RayTrace(p1,dir,dist,this);

  000b6	56		 push	 esi
  000b7	51		 push	 ecx
  000b8	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000bb	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  000be	8d 45 f0	 lea	 eax, DWORD PTR _dir$[ebp]
  000c1	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  000c6	50		 push	 eax
  000c7	57		 push	 edi
  000c8	e8 00 00 00 00	 call	 ?RayTrace@SpherePack@@QAEXABVVector3d@@0MPAVSpherePackCallback@@@Z ; SpherePack::RayTrace

; 651  : }

  000cd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d0	5f		 pop	 edi
  000d1	33 cd		 xor	 ecx, ebp
  000d3	5e		 pop	 esi
  000d4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 0c 00	 ret	 12			; 0000000cH
?RayTrace@SpherePackFactory@@QAEXABVVector3d@@0PAVSpherePackCallback@@@Z ENDP ; SpherePackFactory::RayTrace
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
;	COMDAT ?FrustumTest@SpherePackFactory@@QAEXABVFrustum@@PAVSpherePackCallback@@@Z
_TEXT	SEGMENT
_f$ = 8							; size = 4
_callback$ = 12						; size = 4
?FrustumTest@SpherePackFactory@@QAEXABVFrustum@@PAVSpherePackCallback@@@Z PROC ; SpherePackFactory::FrustumTest, COMDAT
; _this$ = ecx

; 554  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 555  : 	// test case here, just traverse children.
; 556  : 	mCallback = callback;

  00003	8b 45 0c	 mov	 eax, DWORD PTR _callback$[ebp]

; 557  : 	mRoot->VisibilityTest(f,this,VS_PARTIAL);

  00006	6a 01		 push	 1
  00008	51		 push	 ecx
  00009	ff 75 08	 push	 DWORD PTR _f$[ebp]
  0000c	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  0000f	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00012	e8 00 00 00 00	 call	 ?VisibilityTest@SpherePack@@QAEXABVFrustum@@PAVSpherePackCallback@@W4ViewState@@@Z ; SpherePack::VisibilityTest

; 558  : }

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?FrustumTest@SpherePackFactory@@QAEXABVFrustum@@PAVSpherePackCallback@@@Z ENDP ; SpherePackFactory::FrustumTest
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
;	COMDAT ?Remove@SpherePackFactory@@QAEXPAVSpherePack@@@Z
_TEXT	SEGMENT
_pack$ = 8						; size = 4
?Remove@SpherePackFactory@@QAEXPAVSpherePack@@@Z PROC	; SpherePackFactory::Remove, COMDAT
; _this$ = ecx

; 367  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 133  : 		if ( mFlags & flag ) return true;

  00004	8b 75 08	 mov	 esi, DWORD PTR _pack$[ebp]
  00007	57		 push	 edi
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 367  : {

  00008	8b f9		 mov	 edi, ecx
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 133  : 		if ( mFlags & flag ) return true;

  0000a	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  0000d	a8 08		 test	 al, 8
  0000f	75 20		 jne	 SHORT $LN3@Remove
  00011	a8 01		 test	 al, 1
  00013	74 0c		 je	 SHORT $LN1@Remove
  00015	a8 04		 test	 al, 4
  00017	74 08		 je	 SHORT $LN1@Remove
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 379  : 		Remove(link);

  00019	ff 76 44	 push	 DWORD PTR [esi+68]
  0001c	e8 00 00 00 00	 call	 ?Remove@SpherePackFactory@@QAEXPAVSpherePack@@@Z ; SpherePackFactory::Remove
$LN1@Remove:

; 380  : 	}
; 381  : 	
; 382  : 	pack->Unlink();

  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?Unlink@SpherePack@@QAEXXZ ; SpherePack::Unlink

; 383  : 	
; 384  : 	mSpheres.Release(pack);

  00028	56		 push	 esi
  00029	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  0002c	e8 00 00 00 00	 call	 ?Release@?$Pool@VSpherePack@@@@QAEXPAVSpherePack@@@Z ; Pool<SpherePack>::Release
$LN3@Remove:
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi

; 385  : }

  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
?Remove@SpherePackFactory@@QAEXPAVSpherePack@@@Z ENDP	; SpherePackFactory::Remove
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
;	COMDAT ?Render@SpherePackFactory@@QAEXXZ
_TEXT	SEGMENT
?Render@SpherePackFactory@@QAEXXZ PROC			; SpherePackFactory::Render, COMDAT
; _this$ = ecx

; 173  : #if DEMO
; 174  : 	mRoot->Render(mRoot->GetColor());
; 175  : 	mLeaf->Render(mLeaf->GetColor());
; 176  : #endif
; 177  : }

  00000	c3		 ret	 0
?Render@SpherePackFactory@@QAEXXZ ENDP			; SpherePackFactory::Render
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
;	COMDAT ?Integrate@SpherePackFactory@@QAEXPAVSpherePack@@0M@Z
_TEXT	SEGMENT
tv663 = -20						; size = 4
tv654 = -20						; size = 4
_nearest2$1$ = -16					; size = 4
_this$1$ = -12						; size = 4
_neardist1$1$ = -8					; size = 4
_neardist2$1$ = -4					; size = 4
_newsize$1$ = 8						; size = 4
_dist$1$ = 8						; size = 4
_pack$ = 8						; size = 4
_supersphere$ = 12					; size = 4
_node_size$ = 16					; size = 4
?Integrate@SpherePackFactory@@QAEXPAVSpherePack@@0M@Z PROC ; SpherePackFactory::Integrate, COMDAT
; _this$ = ecx

; 400  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 407  : 	float neardist1 = 1e38f;     // enclosed within

  00006	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@7e967699

; 408  : 	
; 409  : 	SpherePack *nearest2 = 0; // supersphere we must grow the least to

  0000e	33 c0		 xor	 eax, eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 201  : 	SpherePack * GetChildren(void)    const { return mChildren; }

  00012	8b 75 0c	 mov	 esi, DWORD PTR _supersphere$[ebp]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 406  : 	SpherePack *nearest1 = 0;  // nearest supersphere we are completely

  00015	33 db		 xor	 ebx, ebx

; 410  : 	float neardist2 = 1e38f;    // add ourselves to.

  00017	0f 28 c3	 movaps	 xmm0, xmm3
  0001a	89 4d f4	 mov	 DWORD PTR _this$1$[ebp], ecx
  0001d	57		 push	 edi

; 414  : 	while (search)

  0001e	8b 7d 08	 mov	 edi, DWORD PTR _pack$[ebp]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 201  : 	SpherePack * GetChildren(void)    const { return mChildren; }

  00021	8b 76 24	 mov	 esi, DWORD PTR [esi+36]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 407  : 	float neardist1 = 1e38f;     // enclosed within

  00024	f3 0f 11 5d f8	 movss	 DWORD PTR _neardist1$1$[ebp], xmm3

; 408  : 	
; 409  : 	SpherePack *nearest2 = 0; // supersphere we must grow the least to

  00029	89 45 f0	 mov	 DWORD PTR _nearest2$1$[ebp], eax

; 410  : 	float neardist2 = 1e38f;    // add ourselves to.

  0002c	f3 0f 11 45 fc	 movss	 DWORD PTR _neardist2$1$[ebp], xmm0

; 414  : 	while (search)

  00031	85 f6		 test	 esi, esi
  00033	0f 84 47 02 00
	00		 je	 $LN190@Integrate
  00039	8d a4 24 00 00
	00 00		 npad	 7
$LL20@Integrate:
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 133  : 		if ( mFlags & flag ) return true;

  00040	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00043	a8 01		 test	 al, 1
  00045	0f 84 f1 00 00
	00		 je	 $LN11@Integrate
  0004b	a8 08		 test	 al, 8
  0004d	0f 85 e9 00 00
	00		 jne	 $LN11@Integrate
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 416  : 		if (search->HasSpherePackFlag(SPF_SUPERSPHERE) && !search->HasSpherePackFlag(SPF_ROOTNODE) && search->GetChildCount())

  00053	83 7e 3c 00	 cmp	 DWORD PTR [esi+60], 0
  00057	0f 84 df 00 00
	00		 je	 $LN11@Integrate
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 170  : 		float dx = a.x - x;

  0005d	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]

; 171  : 		float dy = a.y - y;

  00062	f3 0f 10 56 08	 movss	 xmm2, DWORD PTR [esi+8]

; 172  : 		float dz = a.z - z;

  00067	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
  0006c	f3 0f 5c 57 08	 subss	 xmm2, DWORD PTR [edi+8]
  00071	f3 0f 5c 4f 04	 subss	 xmm1, DWORD PTR [edi+4]
  00076	f3 0f 5c 47 0c	 subss	 xmm0, DWORD PTR [edi+12]

; 173  : 		return dx*dx + dy*dy + dz*dz;

  0007b	f3 0f 59 d2	 mulss	 xmm2, xmm2
  0007f	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00083	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00087	f3 0f 58 d1	 addss	 xmm2, xmm1
  0008b	f3 0f 58 d0	 addss	 xmm2, xmm0
  0008f	f3 0f 11 55 08	 movss	 DWORD PTR _dist$1$[ebp], xmm2
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 421  : 			if (nearest1)

  00094	85 db		 test	 ebx, ebx
  00096	74 46		 je	 SHORT $LN17@Integrate

; 422  : 			{
; 423  : 				if (dist < neardist1)

  00098	0f 2f da	 comiss	 xmm3, xmm2
  0009b	0f 86 96 00 00
	00		 jbe	 $LN196@Integrate
; File a:\vs\vc\include\math.h

; 775  :     return (float)sqrt(_X);

  000a1	0f 5a c2	 cvtps2pd xmm0, xmm2
  000a4	83 ec 08	 sub	 esp, 8
  000a7	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000ac	e8 00 00 00 00	 call	 _sqrt
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h

; 45   : 	float GetRadius(void) const { return mRadius; };

  000b1	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
; File a:\vs\vc\include\math.h

; 775  :     return (float)sqrt(_X);

  000b6	83 c4 08	 add	 esp, 8
  000b9	d9 5d ec	 fstp	 DWORD PTR tv654[ebp]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 426  : 					float d = sqrtf(dist)+pack->GetRadius();

  000bc	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR tv654[ebp]
  000c1	f3 0f 58 4f 10	 addss	 xmm1, DWORD PTR [edi+16]

; 427  : 					
; 428  : 					if (d <= search->GetRadius())

  000c6	0f 2f c1	 comiss	 xmm0, xmm1

; 432  : 					}
; 433  : 				}
; 434  : 			}
; 435  : 			else

  000c9	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _neardist2$1$[ebp]
  000ce	72 5b		 jb	 SHORT $LN194@Integrate

; 429  : 					{
; 430  : 						neardist1 = dist;
; 431  : 						nearest1  = search;

  000d0	f3 0f 10 5d 08	 movss	 xmm3, DWORD PTR _dist$1$[ebp]
  000d5	8b de		 mov	 ebx, esi
  000d7	f3 0f 11 5d f8	 movss	 DWORD PTR _neardist1$1$[ebp], xmm3

; 432  : 					}
; 433  : 				}
; 434  : 			}
; 435  : 			else

  000dc	eb 5e		 jmp	 SHORT $LN11@Integrate
$LN17@Integrate:
; File a:\vs\vc\include\math.h

; 775  :     return (float)sqrt(_X);

  000de	0f 5a c2	 cvtps2pd xmm0, xmm2
  000e1	83 ec 08	 sub	 esp, 8
  000e4	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000e9	e8 00 00 00 00	 call	 _sqrt
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 440  : 				if (d < neardist2)

  000ee	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _neardist2$1$[ebp]
; File a:\vs\vc\include\math.h

; 775  :     return (float)sqrt(_X);

  000f3	83 c4 08	 add	 esp, 8
  000f6	d9 5d ec	 fstp	 DWORD PTR tv663[ebp]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 438  : 				float d = (sqrtf(dist) + pack->GetRadius())-search->GetRadius();

  000f9	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR tv663[ebp]
  000fe	f3 0f 58 47 10	 addss	 xmm0, DWORD PTR [edi+16]
  00103	f3 0f 5c 46 10	 subss	 xmm0, DWORD PTR [esi+16]

; 440  : 				if (d < neardist2)

  00108	0f 2f c8	 comiss	 xmm1, xmm0
  0010b	76 25		 jbe	 SHORT $LN195@Integrate

; 441  : 				{
; 442  : 					if (d < 0)

  0010d	0f 57 c9	 xorps	 xmm1, xmm1
  00110	0f 2f c8	 comiss	 xmm1, xmm0
  00113	76 0e		 jbe	 SHORT $LN12@Integrate

; 443  : 					{
; 444  : 						neardist1 = dist;

  00115	f3 0f 10 5d 08	 movss	 xmm3, DWORD PTR _dist$1$[ebp]

; 445  : 						nearest1  = search;

  0011a	8b de		 mov	 ebx, esi
  0011c	f3 0f 11 5d f8	 movss	 DWORD PTR _neardist1$1$[ebp], xmm3

; 446  : 					}
; 447  : 					else

  00121	eb 14		 jmp	 SHORT $LN196@Integrate
$LN12@Integrate:

; 448  : 					{
; 449  : 						neardist2 = d;

  00123	f3 0f 11 45 fc	 movss	 DWORD PTR _neardist2$1$[ebp], xmm0

; 450  : 						nearest2  = search;

  00128	89 75 f0	 mov	 DWORD PTR _nearest2$1$[ebp], esi
$LN194@Integrate:
  0012b	f3 0f 10 5d f8	 movss	 xmm3, DWORD PTR _neardist1$1$[ebp]
  00130	eb 0a		 jmp	 SHORT $LN11@Integrate
$LN195@Integrate:
  00132	f3 0f 10 5d f8	 movss	 xmm3, DWORD PTR _neardist1$1$[ebp]
$LN196@Integrate:
  00137	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _neardist2$1$[ebp]
$LN11@Integrate:
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 195  : 		return mNextSibling; 

  0013c	8b 76 28	 mov	 esi, DWORD PTR [esi+40]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 414  : 	while (search)

  0013f	85 f6		 test	 esi, esi
  00141	0f 85 f9 fe ff
	ff		 jne	 $LL20@Integrate

; 451  : 					}
; 452  : 				}
; 453  : 			}
; 454  : 		}
; 455  : 		search = search->_GetNextSibling();
; 456  : 	}
; 457  : 	
; 458  : 	// ok...now..on exit let's see what we got.
; 459  : 	if (nearest1)

  00147	85 db		 test	 ebx, ebx
  00149	0f 84 8c 00 00
	00		 je	 $LN10@Integrate

; 460  : 	{
; 461  : 		// if we are inside an existing supersphere, we are all good!
; 462  : 		// we need to detach item from wherever it is, and then add it to
; 463  : 		// this supersphere as a child.
; 464  : 		pack->Unlink();

  0014f	8b cf		 mov	 ecx, edi
  00151	e8 00 00 00 00	 call	 ?Unlink@SpherePack@@QAEXXZ ; SpherePack::Unlink
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 171  : 		SpherePack *my_child = mChildren;

  00156	8b 43 24	 mov	 eax, DWORD PTR [ebx+36]

; 172  : 		mChildren = pack; // new head of list

  00159	89 7b 24	 mov	 DWORD PTR [ebx+36], edi

; 190  : 	void SetNextSibling(SpherePack *child) { mNextSibling = child; }

  0015c	89 47 28	 mov	 DWORD PTR [edi+40], eax

; 191  : 	void SetPrevSibling(SpherePack *child) { mPrevSibling = child; }

  0015f	89 77 2c	 mov	 DWORD PTR [edi+44], esi

; 134  : 		return false;
; 135  : 	};
; 136  : 	
; 137  : 	
; 138  : 	void SetParent(SpherePack *pack) { mParent = pack; };

  00162	89 5f 20	 mov	 DWORD PTR [edi+32], ebx

; 173  : 		
; 174  : 		pack->SetNextSibling(my_child); // his next is my old next
; 175  : 		pack->SetPrevSibling(0); // at head of list, no previous
; 176  : 		pack->SetParent(this);
; 177  : 		
; 178  : 		if ( my_child ) my_child->SetPrevSibling(pack); // previous now this..

  00165	85 c0		 test	 eax, eax
  00167	74 03		 je	 SHORT $LN60@Integrate

; 191  : 	void SetPrevSibling(SpherePack *child) { mPrevSibling = child; }

  00169	89 78 2c	 mov	 DWORD PTR [eax+44], edi
$LN60@Integrate:

; 179  : 		
; 180  : 		mChildCount++;

  0016c	ff 43 3c	 inc	 DWORD PTR [ebx+60]
  0016f	0f 57 c9	 xorps	 xmm1, xmm1
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h

; 45   : 	float GetRadius(void) const { return mRadius; };

  00172	f3 0f 10 43 10	 movss	 xmm0, DWORD PTR [ebx+16]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 241  : 		mBindingDistance = parent->GetRadius() - GetRadius();

  00177	f3 0f 5c 47 10	 subss	 xmm0, DWORD PTR [edi+16]

; 242  : 		if ( mBindingDistance <= 0 )

  0017c	0f 2f c8	 comiss	 xmm1, xmm0
  0017f	f3 0f 11 47 40	 movss	 DWORD PTR [edi+64], xmm0
  00184	72 09		 jb	 SHORT $LN63@Integrate

; 243  : 			mBindingDistance = 0;

  00186	c7 47 40 00 00
	00 00		 mov	 DWORD PTR [edi+64], 0

; 244  : 		else

  0018d	eb 09		 jmp	 SHORT $LN62@Integrate
$LN63@Integrate:

; 245  : 			mBindingDistance*=mBindingDistance;

  0018f	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00193	f3 0f 11 47 40	 movss	 DWORD PTR [edi+64], xmm0
$LN62@Integrate:
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 467  : 		nearest1->Recompute(mSuperSphereGravy);

  00198	8b 75 f4	 mov	 esi, DWORD PTR _this$1$[ebp]
  0019b	51		 push	 ecx
  0019c	8b cb		 mov	 ecx, ebx
  0019e	f3 0f 10 46 3c	 movss	 xmm0, DWORD PTR [esi+60]
  001a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a8	e8 00 00 00 00	 call	 ?Recompute@SpherePack@@QAE_NM@Z ; SpherePack::Recompute
$LN94@Integrate:
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 133  : 		if ( mFlags & flag ) return true;

  001ad	f6 43 38 04	 test	 BYTE PTR [ebx+56], 4
  001b1	0f 84 19 02 00
	00		 je	 $LN179@Integrate
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h

; 45   : 	float GetRadius(void) const { return mRadius; };

  001b7	f3 0f 10 43 10	 movss	 xmm0, DWORD PTR [ebx+16]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 216  : 	const Vector3d& GetPos(void) const { return mCenter; };

  001bc	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 476  : 			link->NewPosRadius(nearest1->GetPos(), nearest1->GetRadius());

  001bf	51		 push	 ecx
  001c0	8b 4b 44	 mov	 ecx, DWORD PTR [ebx+68]
  001c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c8	50		 push	 eax
  001c9	e8 00 00 00 00	 call	 ?NewPosRadius@SpherePack@@QAEXABVVector3d@@M@Z ; SpherePack::NewPosRadius
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 130  : 	void ClearSpherePackFlag(SpherePackFlag flag) { mFlags&=~flag; };

  001ce	83 67 38 df	 and	 DWORD PTR [edi+56], -33	; ffffffdfH
  001d2	5f		 pop	 edi
  001d3	5e		 pop	 esi
  001d4	5b		 pop	 ebx
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 550  : }

  001d5	8b e5		 mov	 esp, ebp
  001d7	5d		 pop	 ebp
  001d8	c2 0c 00	 ret	 12			; 0000000cH
$LN10@Integrate:

; 477  : 		}
; 478  : 		
; 479  : 	}
; 480  : 	else
; 481  : 	{
; 482  : 		bool newsphere = true;
; 483  : 		
; 484  : 		if (nearest2)

  001db	8b 5d f0	 mov	 ebx, DWORD PTR _nearest2$1$[ebp]
  001de	85 db		 test	 ebx, ebx
  001e0	0f 84 9a 00 00
	00		 je	 $LN190@Integrate
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h

; 45   : 	float GetRadius(void) const { return mRadius; };

  001e6	f3 0f 10 4b 10	 movss	 xmm1, DWORD PTR [ebx+16]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 486  : 			float newsize = neardist2 + nearest2->GetRadius() + mSuperSphereGravy;

  001eb	8b 75 f4	 mov	 esi, DWORD PTR _this$1$[ebp]
  001ee	f3 0f 58 c8	 addss	 xmm1, xmm0

; 487  : 			
; 488  : 			if (newsize <= node_size)

  001f2	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _node_size$[ebp]
  001f7	f3 0f 58 4e 3c	 addss	 xmm1, DWORD PTR [esi+60]
  001fc	0f 2f c1	 comiss	 xmm0, xmm1
  001ff	f3 0f 11 4d 08	 movss	 DWORD PTR _newsize$1$[ebp], xmm1
  00204	72 7a		 jb	 SHORT $LN190@Integrate

; 489  : 			{
; 490  : 				pack->Unlink();

  00206	8b cf		 mov	 ecx, edi
  00208	e8 00 00 00 00	 call	 ?Unlink@SpherePack@@QAEXXZ ; SpherePack::Unlink
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h

; 67   : 		mRadius = radius;

  0020d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _newsize$1$[ebp]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 171  : 		SpherePack *my_child = mChildren;

  00212	8b 43 24	 mov	 eax, DWORD PTR [ebx+36]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h

; 67   : 		mRadius = radius;

  00215	f3 0f 11 43 10	 movss	 DWORD PTR [ebx+16], xmm0

; 68   : 		mRadius2 = radius*radius;

  0021a	f3 0f 59 c0	 mulss	 xmm0, xmm0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 172  : 		mChildren = pack; // new head of list

  0021e	89 7b 24	 mov	 DWORD PTR [ebx+36], edi
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h

; 68   : 		mRadius2 = radius*radius;

  00221	f3 0f 11 43 14	 movss	 DWORD PTR [ebx+20], xmm0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 190  : 	void SetNextSibling(SpherePack *child) { mNextSibling = child; }

  00226	89 47 28	 mov	 DWORD PTR [edi+40], eax

; 191  : 	void SetPrevSibling(SpherePack *child) { mPrevSibling = child; }

  00229	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0

; 134  : 		return false;
; 135  : 	};
; 136  : 	
; 137  : 	
; 138  : 	void SetParent(SpherePack *pack) { mParent = pack; };

  00230	89 5f 20	 mov	 DWORD PTR [edi+32], ebx

; 173  : 		
; 174  : 		pack->SetNextSibling(my_child); // his next is my old next
; 175  : 		pack->SetPrevSibling(0); // at head of list, no previous
; 176  : 		pack->SetParent(this);
; 177  : 		
; 178  : 		if ( my_child ) my_child->SetPrevSibling(pack); // previous now this..

  00233	85 c0		 test	 eax, eax
  00235	74 03		 je	 SHORT $LN92@Integrate

; 191  : 	void SetPrevSibling(SpherePack *child) { mPrevSibling = child; }

  00237	89 78 2c	 mov	 DWORD PTR [eax+44], edi
$LN92@Integrate:

; 179  : 		
; 180  : 		mChildCount++;

  0023a	ff 43 3c	 inc	 DWORD PTR [ebx+60]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 494  : 				nearest2->Recompute(mSuperSphereGravy);

  0023d	f3 0f 10 46 3c	 movss	 xmm0, DWORD PTR [esi+60]
  00242	51		 push	 ecx
  00243	8b cb		 mov	 ecx, ebx
  00245	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0024a	e8 00 00 00 00	 call	 ?Recompute@SpherePack@@QAE_NM@Z ; SpherePack::Recompute
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h

; 45   : 	float GetRadius(void) const { return mRadius; };

  0024f	f3 0f 10 43 10	 movss	 xmm0, DWORD PTR [ebx+16]
  00254	0f 57 c9	 xorps	 xmm1, xmm1
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 241  : 		mBindingDistance = parent->GetRadius() - GetRadius();

  00257	f3 0f 5c 47 10	 subss	 xmm0, DWORD PTR [edi+16]

; 242  : 		if ( mBindingDistance <= 0 )

  0025c	0f 2f c8	 comiss	 xmm1, xmm0
  0025f	f3 0f 11 47 40	 movss	 DWORD PTR [edi+64], xmm0
  00264	72 0c		 jb	 SHORT $LN95@Integrate

; 243  : 			mBindingDistance = 0;

  00266	c7 47 40 00 00
	00 00		 mov	 DWORD PTR [edi+64], 0

; 244  : 		else

  0026d	e9 3b ff ff ff	 jmp	 $LN94@Integrate
$LN95@Integrate:

; 245  : 			mBindingDistance*=mBindingDistance;

  00272	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00276	f3 0f 11 47 40	 movss	 DWORD PTR [edi+64], xmm0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 513  : 		if (newsphere)

  0027b	e9 2d ff ff ff	 jmp	 $LN94@Integrate
$LN190@Integrate:

; 514  : 		{
; 515  : 			assert(supersphere->HasSpherePackFlag(SPF_ROOTNODE));
; 516  : 			// we are going to create a new superesphere around this guy!
; 517  : 			pack->Unlink();

  00280	8b cf		 mov	 ecx, edi
  00282	e8 00 00 00 00	 call	 ?Unlink@SpherePack@@QAEXXZ ; SpherePack::Unlink
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h

; 186  : 		if ( !mFree ) return 0;

  00287	8b 5d f4	 mov	 ebx, DWORD PTR _this$1$[ebp]
  0028a	8b 73 20	 mov	 esi, DWORD PTR [ebx+32]
  0028d	85 f6		 test	 esi, esi
  0028f	74 29		 je	 SHORT $LN113@Integrate
$LN112@Integrate:

; 187  : 		Type *ret = mFree;
; 188  : 		mFree = ret->GetNext(); // new head of free list
; 189  : 		Type *temp = mHead; // current head of list

  00291	8b 4b 1c	 mov	 ecx, DWORD PTR [ebx+28]
  00294	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00297	89 43 20	 mov	 DWORD PTR [ebx+32], eax

; 190  : 		mHead = ret;        // new head of list is this free one

  0029a	89 73 1c	 mov	 DWORD PTR [ebx+28], esi

; 191  : 		if ( temp ) temp->SetPrevious(ret);

  0029d	85 c9		 test	 ecx, ecx
  0029f	74 03		 je	 SHORT $LN117@Integrate
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 207  : 	void SetPrevious(SpherePack *pack) { mPrevious = pack; };

  002a1	89 71 1c	 mov	 DWORD PTR [ecx+28], esi
$LN117@Integrate:

; 202  : 	
; 203  : 	SpherePack * GetNext(void)     const { return mNext; };
; 204  : 	SpherePack * GetPrevious(void) const { return mPrevious; };
; 205  : 	
; 206  : 	void SetNext(SpherePack *pack) { mNext = pack; };

  002a4	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  002a7	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 207  : 	void SetPrevious(SpherePack *pack) { mPrevious = pack; };

  002aa	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  002ad	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h

; 194  : 		mUsedCount++;

  002b4	ff 43 24	 inc	 DWORD PTR [ebx+36]

; 195  : 		mFreeCount--;

  002b7	ff 4b 28	 dec	 DWORD PTR [ebx+40]
$LN113@Integrate:
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 521  : 			parent->Init(this, pack->GetPos(), pack->GetRadius()+mSuperSphereGravy, 0, false);

  002ba	f3 0f 10 43 3c	 movss	 xmm0, DWORD PTR [ebx+60]
  002bf	f3 0f 58 47 10	 addss	 xmm0, DWORD PTR [edi+16]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 133  : 		if ( mFlags & flag ) return true;

  002c4	8b 4d 0c	 mov	 ecx, DWORD PTR _supersphere$[ebp]

; 115  : 		IS_SPHERE			= isSphere;

  002c7	c6 46 4c 00	 mov	 BYTE PTR [esi+76], 0

; 116  : 		mUserData         = userdata;

  002cb	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0

; 117  : 		mParent           = 0;

  002d2	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 118  : 		mNextSibling      = 0;

  002d9	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0

; 119  : 		mPrevSibling      = 0;

  002e0	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0

; 120  : 		mFlags            = 0;

  002e7	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0

; 121  : 		mFifo1            = 0;

  002ee	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0

; 122  : 		mFifo2            = 0;

  002f5	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0

; 123  : 		mFactory          = factory;

  002fc	89 5e 48	 mov	 DWORD PTR [esi+72], ebx
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  002ff	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00302	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00305	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00308	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0030b	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0030e	89 46 0c	 mov	 DWORD PTR [esi+12], eax
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h

; 67   : 		mRadius = radius;

  00311	f3 0f 11 46 10	 movss	 DWORD PTR [esi+16], xmm0

; 68   : 		mRadius2 = radius*radius;

  00316	f3 0f 59 c0	 mulss	 xmm0, xmm0
  0031a	f3 0f 11 46 14	 movss	 DWORD PTR [esi+20], xmm0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 133  : 		if ( mFlags & flag ) return true;

  0031f	f6 41 38 02	 test	 BYTE PTR [ecx+56], 2
  00323	74 06		 je	 SHORT $LN3@Integrate

; 129  : 	void SetSpherePackFlag(SpherePackFlag flag) { mFlags|=flag; };

  00325	83 4e 38 02	 or	 DWORD PTR [esi+56], 2
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 525  : 			else

  00329	eb 04		 jmp	 SHORT $LN138@Integrate
$LN3@Integrate:
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 129  : 	void SetSpherePackFlag(SpherePackFlag flag) { mFlags|=flag; };

  0032b	83 4e 38 04	 or	 DWORD PTR [esi+56], 4
$LN138@Integrate:

; 171  : 		SpherePack *my_child = mChildren;

  0032f	8b 46 24	 mov	 eax, DWORD PTR [esi+36]

; 129  : 	void SetSpherePackFlag(SpherePackFlag flag) { mFlags|=flag; };

  00332	83 4e 38 01	 or	 DWORD PTR [esi+56], 1

; 172  : 		mChildren = pack; // new head of list

  00336	89 7e 24	 mov	 DWORD PTR [esi+36], edi

; 190  : 	void SetNextSibling(SpherePack *child) { mNextSibling = child; }

  00339	89 47 28	 mov	 DWORD PTR [edi+40], eax

; 191  : 	void SetPrevSibling(SpherePack *child) { mPrevSibling = child; }

  0033c	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0

; 134  : 		return false;
; 135  : 	};
; 136  : 	
; 137  : 	
; 138  : 	void SetParent(SpherePack *pack) { mParent = pack; };

  00343	89 77 20	 mov	 DWORD PTR [edi+32], esi

; 173  : 		
; 174  : 		pack->SetNextSibling(my_child); // his next is my old next
; 175  : 		pack->SetPrevSibling(0); // at head of list, no previous
; 176  : 		pack->SetParent(this);
; 177  : 		
; 178  : 		if ( my_child ) my_child->SetPrevSibling(pack); // previous now this..

  00346	85 c0		 test	 eax, eax
  00348	74 03		 je	 SHORT $LN151@Integrate

; 191  : 	void SetPrevSibling(SpherePack *child) { mPrevSibling = child; }

  0034a	89 78 2c	 mov	 DWORD PTR [eax+44], edi
$LN151@Integrate:

; 179  : 		
; 180  : 		mChildCount++;

  0034d	ff 46 3c	 inc	 DWORD PTR [esi+60]

; 171  : 		SpherePack *my_child = mChildren;

  00350	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]

; 172  : 		mChildren = pack; // new head of list

  00353	89 71 24	 mov	 DWORD PTR [ecx+36], esi

; 190  : 	void SetNextSibling(SpherePack *child) { mNextSibling = child; }

  00356	89 46 28	 mov	 DWORD PTR [esi+40], eax

; 191  : 	void SetPrevSibling(SpherePack *child) { mPrevSibling = child; }

  00359	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0

; 134  : 		return false;
; 135  : 	};
; 136  : 	
; 137  : 	
; 138  : 	void SetParent(SpherePack *pack) { mParent = pack; };

  00360	89 4e 20	 mov	 DWORD PTR [esi+32], ecx

; 173  : 		
; 174  : 		pack->SetNextSibling(my_child); // his next is my old next
; 175  : 		pack->SetPrevSibling(0); // at head of list, no previous
; 176  : 		pack->SetParent(this);
; 177  : 		
; 178  : 		if ( my_child ) my_child->SetPrevSibling(pack); // previous now this..

  00363	85 c0		 test	 eax, eax
  00365	74 03		 je	 SHORT $LN162@Integrate

; 191  : 	void SetPrevSibling(SpherePack *child) { mPrevSibling = child; }

  00367	89 70 2c	 mov	 DWORD PTR [eax+44], esi
$LN162@Integrate:

; 179  : 		
; 180  : 		mChildCount++;

  0036a	ff 41 3c	 inc	 DWORD PTR [ecx+60]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 536  : 			parent->Recompute(mSuperSphereGravy);

  0036d	f3 0f 10 43 3c	 movss	 xmm0, DWORD PTR [ebx+60]
  00372	51		 push	 ecx
  00373	8b ce		 mov	 ecx, esi
  00375	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0037a	e8 00 00 00 00	 call	 ?Recompute@SpherePack@@QAE_NM@Z ; SpherePack::Recompute
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h

; 45   : 	float GetRadius(void) const { return mRadius; };

  0037f	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
  00384	0f 57 c9	 xorps	 xmm1, xmm1
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 241  : 		mBindingDistance = parent->GetRadius() - GetRadius();

  00387	f3 0f 5c 47 10	 subss	 xmm0, DWORD PTR [edi+16]

; 242  : 		if ( mBindingDistance <= 0 )

  0038c	0f 2f c8	 comiss	 xmm1, xmm0
  0038f	f3 0f 11 47 40	 movss	 DWORD PTR [edi+64], xmm0
  00394	72 09		 jb	 SHORT $LN165@Integrate

; 243  : 			mBindingDistance = 0;

  00396	c7 47 40 00 00
	00 00		 mov	 DWORD PTR [edi+64], 0

; 244  : 		else

  0039d	eb 09		 jmp	 SHORT $LN164@Integrate
$LN165@Integrate:

; 245  : 			mBindingDistance*=mBindingDistance;

  0039f	f3 0f 59 c0	 mulss	 xmm0, xmm0
  003a3	f3 0f 11 47 40	 movss	 DWORD PTR [edi+64], xmm0
$LN164@Integrate:

; 133  : 		if ( mFlags & flag ) return true;

  003a8	f6 46 38 04	 test	 BYTE PTR [esi+56], 4
  003ac	74 22		 je	 SHORT $LN179@Integrate
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h

; 45   : 	float GetRadius(void) const { return mRadius; };

  003ae	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 542  : 				SpherePack *link = AddSphere_(parent->GetPos(), parent->GetRadius(), parent, true, SPF_ROOT_TREE);

  003b3	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  003b6	6a 02		 push	 2
  003b8	6a 01		 push	 1
  003ba	56		 push	 esi
  003bb	51		 push	 ecx
  003bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c1	8b cb		 mov	 ecx, ebx
  003c3	50		 push	 eax
  003c4	e8 00 00 00 00	 call	 ?AddSphere_@SpherePackFactory@@QAEPAVSpherePack@@ABVVector3d@@MPAX_NH@Z ; SpherePackFactory::AddSphere_
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 210  : 	void   SetUserData(void *data, bool isSphere) { mUserData = data; IS_SPHERE=isSphere;};

  003c9	89 46 44	 mov	 DWORD PTR [esi+68], eax
  003cc	c6 46 4c 01	 mov	 BYTE PTR [esi+76], 1
$LN179@Integrate:

; 130  : 	void ClearSpherePackFlag(SpherePackFlag flag) { mFlags&=~flag; };

  003d0	83 67 38 df	 and	 DWORD PTR [edi+56], -33	; ffffffdfH
  003d4	5f		 pop	 edi
  003d5	5e		 pop	 esi
  003d6	5b		 pop	 ebx
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 550  : }

  003d7	8b e5		 mov	 esp, ebp
  003d9	5d		 pop	 ebp
  003da	c2 0c 00	 ret	 12			; 0000000cH
?Integrate@SpherePackFactory@@QAEXPAVSpherePack@@0M@Z ENDP ; SpherePackFactory::Integrate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
;	COMDAT ?AddRecompute@SpherePackFactory@@QAEXPAVSpherePack@@@Z
_TEXT	SEGMENT
_recompute$ = 8						; size = 4
?AddRecompute@SpherePackFactory@@QAEXPAVSpherePack@@@Z PROC ; SpherePackFactory::AddRecompute, COMDAT
; _this$ = ecx

; 155  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 133  : 		if ( mFlags & flag ) return true;

  00003	8b 55 08	 mov	 edx, DWORD PTR _recompute$[ebp]
  00006	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00009	a8 10		 test	 al, 16			; 00000010H
  0000b	75 35		 jne	 SHORT $LN1@AddRecompu
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 158  : 		if (recompute->GetChildCount())

  0000d	83 7a 3c 00	 cmp	 DWORD PTR [edx+60], 0
  00011	74 33		 je	 SHORT $LN2@AddRecompu
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 129  : 	void SetSpherePackFlag(SpherePackFlag flag) { mFlags|=flag; };

  00013	83 c8 10	 or	 eax, 16			; 00000010H
  00016	89 42 38	 mov	 DWORD PTR [edx+56], eax
  00019	56		 push	 esi
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 161  : 			SpherePack **fifo = mRecompute->Push(recompute);

  0001a	8b 71 30	 mov	 esi, DWORD PTR [ecx+48]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 318  : 		SpherePack **ret = &mFifo[mSP];

  0001d	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00020	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00023	ff 46 04	 inc	 DWORD PTR [esi+4]

; 319  : 		mFifo[mSP] = sphere;

  00026	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx

; 320  : 		mSP++;

  00029	ff 46 08	 inc	 DWORD PTR [esi+8]
  0002c	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]
  0002f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 321  : 		if ( mSP == mFifoSize ) mSP = 0;

  00032	3b 46 10	 cmp	 eax, DWORD PTR [esi+16]
  00035	75 07		 jne	 SHORT $LN13@AddRecompu
  00037	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN13@AddRecompu:

; 134  : 		return false;
; 135  : 	};
; 136  : 	
; 137  : 	
; 138  : 	void SetParent(SpherePack *pack) { mParent = pack; };
; 139  : 	SpherePack * GetParent(void) const { return mParent; };
; 140  : 	
; 141  : 	// Sphere has a new position.
; 142  : 	inline void NewPos(const Vector3d &pos);
; 143  : 	// Sphere has a new position and radius
; 144  : 	inline void NewPosRadius(const Vector3d &pos,float radius);
; 145  : 	
; 146  : 	void Unlink(void)
; 147  : 	{
; 148  : 		if ( mFifo1 ) // if we belong to fifo1, null us out
; 149  : 		{
; 150  : 			*mFifo1 = 0;
; 151  : 			mFifo1 = 0;
; 152  : 		}
; 153  : 		
; 154  : 		if ( mFifo2 ) // if we belong to fifo2, null us out
; 155  : 		{
; 156  : 			*mFifo2 = 0;
; 157  : 			mFifo2 = 0;
; 158  : 		}
; 159  : 		
; 160  : 		if ( mParent ) mParent->LostChild(this);
; 161  : 		
; 162  : 		assert( !mChildren ); // can't unlink guys with children!
; 163  : 		
; 164  : 		mParent = 0; // got no father anymore
; 165  : 	}
; 166  : 	
; 167  : 	
; 168  : 	void AddChild(SpherePack *pack)
; 169  : 	{
; 170  : 		
; 171  : 		SpherePack *my_child = mChildren;
; 172  : 		mChildren = pack; // new head of list
; 173  : 		
; 174  : 		pack->SetNextSibling(my_child); // his next is my old next
; 175  : 		pack->SetPrevSibling(0); // at head of list, no previous
; 176  : 		pack->SetParent(this);
; 177  : 		
; 178  : 		if ( my_child ) my_child->SetPrevSibling(pack); // previous now this..
; 179  : 		
; 180  : 		mChildCount++;
; 181  : 
; 182  : #if defined(_DEBUG)
; 183  : 		float dist = DistanceSquared(pack);
; 184  : 		float radius = sqrtf(dist) + pack->GetRadius();
; 185  : 		
; 186  : 		assert( radius <= GetRadius()+0.0001f );
; 187  : #endif
; 188  : 	}
; 189  : 	
; 190  : 	void SetNextSibling(SpherePack *child) { mNextSibling = child; }
; 191  : 	void SetPrevSibling(SpherePack *child) { mPrevSibling = child; }
; 192  : 	
; 193  : 	SpherePack * _GetNextSibling(void) const 
; 194  : 	{ 
; 195  : 		return mNextSibling; 
; 196  : 	}
; 197  : 	SpherePack * _GetPrevSibling(void) const 
; 198  : 	{ 
; 199  : 		return mPrevSibling; 
; 200  : 	}
; 201  : 	SpherePack * GetChildren(void)    const { return mChildren; }
; 202  : 	
; 203  : 	SpherePack * GetNext(void)     const { return mNext; };
; 204  : 	SpherePack * GetPrevious(void) const { return mPrevious; };
; 205  : 	
; 206  : 	void SetNext(SpherePack *pack) { mNext = pack; };
; 207  : 	void SetPrevious(SpherePack *pack) { mPrevious = pack; };
; 208  : 	
; 209  : 	void * GetUserData(void) const { return mUserData; };
; 210  : 	void   SetUserData(void *data, bool isSphere) { mUserData = data; IS_SPHERE=isSphere;};
; 211  : 	
; 212  : 	float DistanceSquared(const SpherePack *pack) const { return mCenter.DistanceSq( pack->mCenter );  };
; 213  : 	
; 214  : 	inline void LostChild(SpherePack *pack);
; 215  : 	
; 216  : 	const Vector3d& GetPos(void) const { return mCenter; };
; 217  : 	
; 218  : 	inline void Render(unsigned int color);
; 219  : 	
; 220  : 	inline bool Recompute(float gravy);
; 221  : 	
; 222  : 	int GetChildCount(void) const { return mChildCount; };
; 223  : 	
; 224  : #if DEMO
; 225  : 	void SetColor(unsigned int color) { mColor = color; };
; 226  : 	unsigned int GetColor(void) const { return mColor; };
; 227  : #endif
; 228  : 	
; 229  : 	void SetFifo1(SpherePack **fifo)
; 230  : 	{
; 231  : 		mFifo1 = fifo;

  0003e	89 4a 30	 mov	 DWORD PTR [edx+48], ecx
  00041	5e		 pop	 esi
$LN1@AddRecompu:
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 169  : }

  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
$LN2@AddRecompu:

; 162  : 			recompute->SetFifo1(fifo);
; 163  : 		}
; 164  : 		else
; 165  : 		{
; 166  : 			Remove(recompute);

  00046	89 55 08	 mov	 DWORD PTR _recompute$[ebp], edx

; 169  : }

  00049	5d		 pop	 ebp

; 162  : 			recompute->SetFifo1(fifo);
; 163  : 		}
; 164  : 		else
; 165  : 		{
; 166  : 			Remove(recompute);

  0004a	e9 00 00 00 00	 jmp	 ?Remove@SpherePackFactory@@QAEXPAVSpherePack@@@Z ; SpherePackFactory::Remove
?AddRecompute@SpherePackFactory@@QAEXPAVSpherePack@@@Z ENDP ; SpherePackFactory::AddRecompute
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
;	COMDAT ?AddIntegrate@SpherePackFactory@@QAEXPAVSpherePack@@@Z
_TEXT	SEGMENT
_pack$ = 8						; size = 4
?AddIntegrate@SpherePackFactory@@QAEXPAVSpherePack@@@Z PROC ; SpherePackFactory::AddIntegrate, COMDAT
; _this$ = ecx

; 143  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 133  : 		if ( mFlags & flag ) return true;

  00003	8b 55 08	 mov	 edx, DWORD PTR _pack$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 143  : {

  00008	8b f9		 mov	 edi, ecx
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 133  : 		if ( mFlags & flag ) return true;

  0000a	f6 42 38 02	 test	 BYTE PTR [edx+56], 2
  0000e	74 1f		 je	 SHORT $LN2@AddIntegra
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 145  : 		mRoot->AddChild(pack);

  00010	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 171  : 		SpherePack *my_child = mChildren;

  00013	8b 70 24	 mov	 esi, DWORD PTR [eax+36]

; 172  : 		mChildren = pack; // new head of list

  00016	89 50 24	 mov	 DWORD PTR [eax+36], edx

; 181  : 
; 182  : #if defined(_DEBUG)
; 183  : 		float dist = DistanceSquared(pack);
; 184  : 		float radius = sqrtf(dist) + pack->GetRadius();
; 185  : 		
; 186  : 		assert( radius <= GetRadius()+0.0001f );
; 187  : #endif
; 188  : 	}
; 189  : 	
; 190  : 	void SetNextSibling(SpherePack *child) { mNextSibling = child; }

  00019	89 72 28	 mov	 DWORD PTR [edx+40], esi

; 191  : 	void SetPrevSibling(SpherePack *child) { mPrevSibling = child; }

  0001c	c7 42 2c 00 00
	00 00		 mov	 DWORD PTR [edx+44], 0

; 134  : 		return false;
; 135  : 	};
; 136  : 	
; 137  : 	
; 138  : 	void SetParent(SpherePack *pack) { mParent = pack; };

  00023	89 42 20	 mov	 DWORD PTR [edx+32], eax

; 173  : 		
; 174  : 		pack->SetNextSibling(my_child); // his next is my old next
; 175  : 		pack->SetPrevSibling(0); // at head of list, no previous
; 176  : 		pack->SetParent(this);
; 177  : 		
; 178  : 		if ( my_child ) my_child->SetPrevSibling(pack); // previous now this..

  00026	85 f6		 test	 esi, esi
  00028	74 22		 je	 SHORT $LN28@AddIntegra

; 191  : 	void SetPrevSibling(SpherePack *child) { mPrevSibling = child; }

  0002a	89 56 2c	 mov	 DWORD PTR [esi+44], edx
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 146  : 	else

  0002d	eb 1d		 jmp	 SHORT $LN28@AddIntegra
$LN2@AddIntegra:

; 147  : 		mLeaf->AddChild(pack);

  0002f	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 171  : 		SpherePack *my_child = mChildren;

  00032	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]

; 172  : 		mChildren = pack; // new head of list

  00035	89 50 24	 mov	 DWORD PTR [eax+36], edx

; 181  : 
; 182  : #if defined(_DEBUG)
; 183  : 		float dist = DistanceSquared(pack);
; 184  : 		float radius = sqrtf(dist) + pack->GetRadius();
; 185  : 		
; 186  : 		assert( radius <= GetRadius()+0.0001f );
; 187  : #endif
; 188  : 	}
; 189  : 	
; 190  : 	void SetNextSibling(SpherePack *child) { mNextSibling = child; }

  00038	89 4a 28	 mov	 DWORD PTR [edx+40], ecx

; 191  : 	void SetPrevSibling(SpherePack *child) { mPrevSibling = child; }

  0003b	c7 42 2c 00 00
	00 00		 mov	 DWORD PTR [edx+44], 0

; 134  : 		return false;
; 135  : 	};
; 136  : 	
; 137  : 	
; 138  : 	void SetParent(SpherePack *pack) { mParent = pack; };

  00042	89 42 20	 mov	 DWORD PTR [edx+32], eax

; 173  : 		
; 174  : 		pack->SetNextSibling(my_child); // his next is my old next
; 175  : 		pack->SetPrevSibling(0); // at head of list, no previous
; 176  : 		pack->SetParent(this);
; 177  : 		
; 178  : 		if ( my_child ) my_child->SetPrevSibling(pack); // previous now this..

  00045	85 c9		 test	 ecx, ecx
  00047	74 03		 je	 SHORT $LN28@AddIntegra

; 191  : 	void SetPrevSibling(SpherePack *child) { mPrevSibling = child; }

  00049	89 51 2c	 mov	 DWORD PTR [ecx+44], edx
$LN28@AddIntegra:

; 179  : 		
; 180  : 		mChildCount++;

  0004c	ff 40 3c	 inc	 DWORD PTR [eax+60]

; 129  : 	void SetSpherePackFlag(SpherePackFlag flag) { mFlags|=flag; };

  0004f	83 4a 38 20	 or	 DWORD PTR [edx+56], 32	; 00000020H
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 150  : 	SpherePack **fifo = mIntegrate->Push(pack); // add it to the integration stack.

  00053	8b 77 2c	 mov	 esi, DWORD PTR [edi+44]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 318  : 		SpherePack **ret = &mFifo[mSP];

  00056	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00059	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0005c	ff 46 04	 inc	 DWORD PTR [esi+4]

; 319  : 		mFifo[mSP] = sphere;

  0005f	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx

; 320  : 		mSP++;

  00062	ff 46 08	 inc	 DWORD PTR [esi+8]
  00065	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]
  00068	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 321  : 		if ( mSP == mFifoSize ) mSP = 0;

  0006b	3b 46 10	 cmp	 eax, DWORD PTR [esi+16]
  0006e	75 07		 jne	 SHORT $LN38@AddIntegra
  00070	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN38@AddIntegra:
  00077	5f		 pop	 edi

; 192  : 	
; 193  : 	SpherePack * _GetNextSibling(void) const 
; 194  : 	{ 
; 195  : 		return mNextSibling; 
; 196  : 	}
; 197  : 	SpherePack * _GetPrevSibling(void) const 
; 198  : 	{ 
; 199  : 		return mPrevSibling; 
; 200  : 	}
; 201  : 	SpherePack * GetChildren(void)    const { return mChildren; }
; 202  : 	
; 203  : 	SpherePack * GetNext(void)     const { return mNext; };
; 204  : 	SpherePack * GetPrevious(void) const { return mPrevious; };
; 205  : 	
; 206  : 	void SetNext(SpherePack *pack) { mNext = pack; };
; 207  : 	void SetPrevious(SpherePack *pack) { mPrevious = pack; };
; 208  : 	
; 209  : 	void * GetUserData(void) const { return mUserData; };
; 210  : 	void   SetUserData(void *data, bool isSphere) { mUserData = data; IS_SPHERE=isSphere;};
; 211  : 	
; 212  : 	float DistanceSquared(const SpherePack *pack) const { return mCenter.DistanceSq( pack->mCenter );  };
; 213  : 	
; 214  : 	inline void LostChild(SpherePack *pack);
; 215  : 	
; 216  : 	const Vector3d& GetPos(void) const { return mCenter; };
; 217  : 	
; 218  : 	inline void Render(unsigned int color);
; 219  : 	
; 220  : 	inline bool Recompute(float gravy);
; 221  : 	
; 222  : 	int GetChildCount(void) const { return mChildCount; };
; 223  : 	
; 224  : #if DEMO
; 225  : 	void SetColor(unsigned int color) { mColor = color; };
; 226  : 	unsigned int GetColor(void) const { return mColor; };
; 227  : #endif
; 228  : 	
; 229  : 	void SetFifo1(SpherePack **fifo)
; 230  : 	{
; 231  : 		mFifo1 = fifo;
; 232  : 	};
; 233  : 	
; 234  : 	void SetFifo2(SpherePack **fifo)
; 235  : 	{
; 236  : 		mFifo2 = fifo;

  00078	89 4a 34	 mov	 DWORD PTR [edx+52], ecx
  0007b	5e		 pop	 esi
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 152  : }

  0007c	5d		 pop	 ebp
  0007d	c2 04 00	 ret	 4
?AddIntegrate@SpherePackFactory@@QAEXPAVSpherePack@@@Z ENDP ; SpherePackFactory::AddIntegrate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
;	COMDAT ?AddSphere_@SpherePackFactory@@QAEPAVSpherePack@@ABVVector3d@@MPAX_NH@Z
_TEXT	SEGMENT
_pos$ = 8						; size = 4
_radius$ = 12						; size = 4
_userdata$ = 16						; size = 4
_isSphere$ = 20						; size = 1
_flags$ = 24						; size = 4
?AddSphere_@SpherePackFactory@@QAEPAVSpherePack@@ABVVector3d@@MPAX_NH@Z PROC ; SpherePackFactory::AddSphere_, COMDAT
; _this$ = ecx

; 117  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b d1		 mov	 edx, ecx
  00005	56		 push	 esi
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h

; 186  : 		if ( !mFree ) return 0;

  00006	8b 72 20	 mov	 esi, DWORD PTR [edx+32]
  00009	85 f6		 test	 esi, esi
  0000b	75 07		 jne	 SHORT $LN7@AddSphere_
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 139  : 	return pack;

  0000d	33 c0		 xor	 eax, eax
  0000f	5e		 pop	 esi

; 140  : }

  00010	5d		 pop	 ebp
  00011	c2 14 00	 ret	 20			; 00000014H
$LN7@AddSphere_:
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h

; 189  : 		Type *temp = mHead; // current head of list

  00014	8b 4a 1c	 mov	 ecx, DWORD PTR [edx+28]
  00017	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0001a	89 42 20	 mov	 DWORD PTR [edx+32], eax

; 190  : 		mHead = ret;        // new head of list is this free one

  0001d	89 72 1c	 mov	 DWORD PTR [edx+28], esi

; 191  : 		if ( temp ) temp->SetPrevious(ret);

  00020	85 c9		 test	 ecx, ecx
  00022	74 03		 je	 SHORT $LN12@AddSphere_
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 207  : 	void SetPrevious(SpherePack *pack) { mPrevious = pack; };

  00024	89 71 1c	 mov	 DWORD PTR [ecx+28], esi
$LN12@AddSphere_:

; 206  : 	void SetNext(SpherePack *pack) { mNext = pack; };

  00027	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h

; 67   : 		mRadius = radius;

  0002a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _radius$[ebp]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 129  : 			AddIntegrate(pack); // add to integration list.

  0002f	56		 push	 esi
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 206  : 	void SetNext(SpherePack *pack) { mNext = pack; };

  00030	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 207  : 	void SetPrevious(SpherePack *pack) { mPrevious = pack; };

  00033	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  00036	8b 4d 08	 mov	 ecx, DWORD PTR _pos$[ebp]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 207  : 	void SetPrevious(SpherePack *pack) { mPrevious = pack; };

  00039	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h

; 194  : 		mUsedCount++;

  00040	ff 42 24	 inc	 DWORD PTR [edx+36]

; 195  : 		mFreeCount--;

  00043	ff 4a 28	 dec	 DWORD PTR [edx+40]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 125  : 		if (flags & SPF_ROOT_TREE)

  00046	f6 45 18 02	 test	 BYTE PTR _flags$[ebp], 2
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 115  : 		IS_SPHERE			= isSphere;

  0004a	8a 45 14	 mov	 al, BYTE PTR _isSphere$[ebp]
  0004d	88 46 4c	 mov	 BYTE PTR [esi+76], al

; 116  : 		mUserData         = userdata;

  00050	8b 45 10	 mov	 eax, DWORD PTR _userdata$[ebp]

; 117  : 		mParent           = 0;

  00053	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 118  : 		mNextSibling      = 0;

  0005a	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0

; 119  : 		mPrevSibling      = 0;

  00061	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0

; 120  : 		mFlags            = 0;

  00068	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0

; 121  : 		mFifo1            = 0;

  0006f	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0

; 122  : 		mFifo2            = 0;

  00076	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0

; 123  : 		mFactory          = factory;

  0007d	89 56 48	 mov	 DWORD PTR [esi+72], edx
  00080	89 46 44	 mov	 DWORD PTR [esi+68], eax
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  00083	8b 01		 mov	 eax, DWORD PTR [ecx]
  00085	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00088	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0008b	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0008e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 129  : 			AddIntegrate(pack); // add to integration list.

  00091	8b ca		 mov	 ecx, edx
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  00093	89 46 0c	 mov	 DWORD PTR [esi+12], eax
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h

; 67   : 		mRadius = radius;

  00096	f3 0f 11 46 10	 movss	 DWORD PTR [esi+16], xmm0

; 68   : 		mRadius2 = radius*radius;

  0009b	f3 0f 59 c0	 mulss	 xmm0, xmm0
  0009f	f3 0f 11 46 14	 movss	 DWORD PTR [esi+20], xmm0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 125  : 		if (flags & SPF_ROOT_TREE)

  000a4	74 10		 je	 SHORT $LN2@AddSphere_
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 129  : 	void SetSpherePackFlag(SpherePackFlag flag) { mFlags|=flag; };

  000a6	83 4e 38 02	 or	 DWORD PTR [esi+56], 2
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 135  : 			AddIntegrate(pack); // add to integration list.

  000aa	e8 00 00 00 00	 call	 ?AddIntegrate@SpherePackFactory@@QAEXPAVSpherePack@@@Z ; SpherePackFactory::AddIntegrate

; 139  : 	return pack;

  000af	8b c6		 mov	 eax, esi
  000b1	5e		 pop	 esi

; 140  : }

  000b2	5d		 pop	 ebp
  000b3	c2 14 00	 ret	 20			; 00000014H
$LN2@AddSphere_:
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 129  : 	void SetSpherePackFlag(SpherePackFlag flag) { mFlags|=flag; };

  000b6	83 4e 38 04	 or	 DWORD PTR [esi+56], 4
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 135  : 			AddIntegrate(pack); // add to integration list.

  000ba	e8 00 00 00 00	 call	 ?AddIntegrate@SpherePackFactory@@QAEXPAVSpherePack@@@Z ; SpherePackFactory::AddIntegrate

; 139  : 	return pack;

  000bf	8b c6		 mov	 eax, esi
  000c1	5e		 pop	 esi

; 140  : }

  000c2	5d		 pop	 ebp
  000c3	c2 14 00	 ret	 20			; 00000014H
?AddSphere_@SpherePackFactory@@QAEPAVSpherePack@@ABVVector3d@@MPAX_NH@Z ENDP ; SpherePackFactory::AddSphere_
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
;	COMDAT ?Process@SpherePackFactory@@QAEXXZ
_TEXT	SEGMENT
tv403 = -8						; size = 4
_maxrecompute$1$ = -8					; size = 4
tv399 = -4						; size = 4
_maxintegrate$1$ = -4					; size = 4
?Process@SpherePackFactory@@QAEXXZ PROC			; SpherePackFactory::Process, COMDAT
; _this$ = ecx

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 81   : 		for (int i = 0; i < maxrecompute; ++i)

  0000a	33 db		 xor	 ebx, ebx
  0000c	57		 push	 edi
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 355  : 	int GetCount(void) const { return mCount; };

  0000d	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00010	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00013	89 45 f8	 mov	 DWORD PTR _maxrecompute$1$[ebp], eax
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 81   : 		for (int i = 0; i < maxrecompute; ++i)

  00016	85 c0		 test	 eax, eax
  00018	7e 5d		 jle	 SHORT $LN58@Process
  0001a	8d 9b 00 00 00
	00		 npad	 6
$LL11@Process:

; 82   : 		{
; 83   : 			SpherePack * pack = mRecompute->Pop();

  00020	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 327  : 		while ( mSP != mBottom )

  00023	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00026	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
$LN61@Process:
  00029	3b d0		 cmp	 edx, eax
  0002b	74 4a		 je	 SHORT $LN58@Process

; 328  : 		{
; 329  : 			mCount--;
; 330  : 			SpherePack *ret = mFifo[mBottom];

  0002d	8b 79 14	 mov	 edi, DWORD PTR [ecx+20]
  00030	ff 49 04	 dec	 DWORD PTR [ecx+4]

; 331  : 			mBottom++;
; 332  : 			if ( mBottom == mFifoSize ) mBottom = 0;

  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv399[ebp], 0
  0003a	8b 3c 87	 mov	 edi, DWORD PTR [edi+eax*4]
  0003d	40		 inc	 eax
  0003e	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  00041	0f 44 45 fc	 cmove	 eax, DWORD PTR tv399[ebp]
  00045	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 333  : 			if ( ret ) return ret;

  00048	85 ff		 test	 edi, edi
  0004a	74 dd		 je	 SHORT $LN61@Process

; 134  : 		return false;
; 135  : 	};
; 136  : 	
; 137  : 	
; 138  : 	void SetParent(SpherePack *pack) { mParent = pack; };
; 139  : 	SpherePack * GetParent(void) const { return mParent; };
; 140  : 	
; 141  : 	// Sphere has a new position.
; 142  : 	inline void NewPos(const Vector3d &pos);
; 143  : 	// Sphere has a new position and radius
; 144  : 	inline void NewPosRadius(const Vector3d &pos,float radius);
; 145  : 	
; 146  : 	void Unlink(void)
; 147  : 	{
; 148  : 		if ( mFifo1 ) // if we belong to fifo1, null us out
; 149  : 		{
; 150  : 			*mFifo1 = 0;
; 151  : 			mFifo1 = 0;
; 152  : 		}
; 153  : 		
; 154  : 		if ( mFifo2 ) // if we belong to fifo2, null us out
; 155  : 		{
; 156  : 			*mFifo2 = 0;
; 157  : 			mFifo2 = 0;
; 158  : 		}
; 159  : 		
; 160  : 		if ( mParent ) mParent->LostChild(this);
; 161  : 		
; 162  : 		assert( !mChildren ); // can't unlink guys with children!
; 163  : 		
; 164  : 		mParent = 0; // got no father anymore
; 165  : 	}
; 166  : 	
; 167  : 	
; 168  : 	void AddChild(SpherePack *pack)
; 169  : 	{
; 170  : 		
; 171  : 		SpherePack *my_child = mChildren;
; 172  : 		mChildren = pack; // new head of list
; 173  : 		
; 174  : 		pack->SetNextSibling(my_child); // his next is my old next
; 175  : 		pack->SetPrevSibling(0); // at head of list, no previous
; 176  : 		pack->SetParent(this);
; 177  : 		
; 178  : 		if ( my_child ) my_child->SetPrevSibling(pack); // previous now this..
; 179  : 		
; 180  : 		mChildCount++;
; 181  : 
; 182  : #if defined(_DEBUG)
; 183  : 		float dist = DistanceSquared(pack);
; 184  : 		float radius = sqrtf(dist) + pack->GetRadius();
; 185  : 		
; 186  : 		assert( radius <= GetRadius()+0.0001f );
; 187  : #endif
; 188  : 	}
; 189  : 	
; 190  : 	void SetNextSibling(SpherePack *child) { mNextSibling = child; }
; 191  : 	void SetPrevSibling(SpherePack *child) { mPrevSibling = child; }
; 192  : 	
; 193  : 	SpherePack * _GetNextSibling(void) const 
; 194  : 	{ 
; 195  : 		return mNextSibling; 
; 196  : 	}
; 197  : 	SpherePack * _GetPrevSibling(void) const 
; 198  : 	{ 
; 199  : 		return mPrevSibling; 
; 200  : 	}
; 201  : 	SpherePack * GetChildren(void)    const { return mChildren; }
; 202  : 	
; 203  : 	SpherePack * GetNext(void)     const { return mNext; };
; 204  : 	SpherePack * GetPrevious(void) const { return mPrevious; };
; 205  : 	
; 206  : 	void SetNext(SpherePack *pack) { mNext = pack; };
; 207  : 	void SetPrevious(SpherePack *pack) { mPrevious = pack; };
; 208  : 	
; 209  : 	void * GetUserData(void) const { return mUserData; };
; 210  : 	void   SetUserData(void *data, bool isSphere) { mUserData = data; IS_SPHERE=isSphere;};
; 211  : 	
; 212  : 	float DistanceSquared(const SpherePack *pack) const { return mCenter.DistanceSq( pack->mCenter );  };
; 213  : 	
; 214  : 	inline void LostChild(SpherePack *pack);
; 215  : 	
; 216  : 	const Vector3d& GetPos(void) const { return mCenter; };
; 217  : 	
; 218  : 	inline void Render(unsigned int color);
; 219  : 	
; 220  : 	inline bool Recompute(float gravy);
; 221  : 	
; 222  : 	int GetChildCount(void) const { return mChildCount; };
; 223  : 	
; 224  : #if DEMO
; 225  : 	void SetColor(unsigned int color) { mColor = color; };
; 226  : 	unsigned int GetColor(void) const { return mColor; };
; 227  : #endif
; 228  : 	
; 229  : 	void SetFifo1(SpherePack **fifo)
; 230  : 	{
; 231  : 		mFifo1 = fifo;

  0004c	c7 47 30 00 00
	00 00		 mov	 DWORD PTR [edi+48], 0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 86   : 			bool kill = pack->Recompute(mSuperSphereGravy);

  00053	f3 0f 10 46 3c	 movss	 xmm0, DWORD PTR [esi+60]
  00058	51		 push	 ecx
  00059	8b cf		 mov	 ecx, edi
  0005b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00060	e8 00 00 00 00	 call	 ?Recompute@SpherePack@@QAE_NM@Z ; SpherePack::Recompute

; 87   : 			if (kill) Remove(pack);

  00065	84 c0		 test	 al, al
  00067	74 08		 je	 SHORT $LN10@Process
  00069	57		 push	 edi
  0006a	8b ce		 mov	 ecx, esi
  0006c	e8 00 00 00 00	 call	 ?Remove@SpherePackFactory@@QAEXPAVSpherePack@@@Z ; SpherePackFactory::Remove
$LN10@Process:

; 81   : 		for (int i = 0; i < maxrecompute; ++i)

  00071	43		 inc	 ebx
  00072	3b 5d f8	 cmp	 ebx, DWORD PTR _maxrecompute$1$[ebp]
  00075	7c a9		 jl	 SHORT $LL11@Process
$LN58@Process:
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 355  : 	int GetCount(void) const { return mCount; };

  00077	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 95   : 		for (int i = 0; i < maxintegrate; ++i)

  0007a	33 db		 xor	 ebx, ebx
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 355  : 	int GetCount(void) const { return mCount; };

  0007c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0007f	89 45 fc	 mov	 DWORD PTR _maxintegrate$1$[ebp], eax
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 95   : 		for (int i = 0; i < maxintegrate; ++i)

  00082	85 c0		 test	 eax, eax
  00084	7e 64		 jle	 SHORT $LN59@Process
$LL6@Process:

; 96   : 		{
; 97   : 			SpherePack * pack = mIntegrate->Pop();

  00086	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 327  : 		while ( mSP != mBottom )

  00089	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
  0008c	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
$LN63@Process:
  0008f	3b f8		 cmp	 edi, eax
  00091	74 57		 je	 SHORT $LN59@Process

; 328  : 		{
; 329  : 			mCount--;
; 330  : 			SpherePack *ret = mFifo[mBottom];

  00093	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00096	ff 49 04	 dec	 DWORD PTR [ecx+4]

; 331  : 			mBottom++;
; 332  : 			if ( mBottom == mFifoSize ) mBottom = 0;

  00099	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv403[ebp], 0
  000a0	8b 14 82	 mov	 edx, DWORD PTR [edx+eax*4]
  000a3	40		 inc	 eax
  000a4	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  000a7	0f 44 45 f8	 cmove	 eax, DWORD PTR tv403[ebp]
  000ab	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 333  : 			if ( ret ) return ret;

  000ae	85 d2		 test	 edx, edx
  000b0	74 dd		 je	 SHORT $LN63@Process

; 133  : 		if ( mFlags & flag ) return true;

  000b2	f6 42 38 02	 test	 BYTE PTR [edx+56], 2
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 103  : 				Integrate(pack,mRoot,mMaxRootSize); // integrate this one single dude against the root node.

  000b6	51		 push	 ecx
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 236  : 		mFifo2 = fifo;

  000b7	c7 42 34 00 00
	00 00		 mov	 DWORD PTR [edx+52], 0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 103  : 				Integrate(pack,mRoot,mMaxRootSize); // integrate this one single dude against the root node.

  000be	8b ce		 mov	 ecx, esi
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 133  : 		if ( mFlags & flag ) return true;

  000c0	74 0f		 je	 SHORT $LN2@Process
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 103  : 				Integrate(pack,mRoot,mMaxRootSize); // integrate this one single dude against the root node.

  000c2	f3 0f 10 46 34	 movss	 xmm0, DWORD PTR [esi+52]
  000c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cc	ff 76 04	 push	 DWORD PTR [esi+4]

; 104  : 			else

  000cf	eb 0d		 jmp	 SHORT $LN64@Process
$LN2@Process:

; 105  : 				Integrate(pack,mLeaf,mMaxLeafSize); // integrate this one single dude against the root node.

  000d1	f3 0f 10 46 38	 movss	 xmm0, DWORD PTR [esi+56]
  000d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000db	ff 76 08	 push	 DWORD PTR [esi+8]
$LN64@Process:
  000de	52		 push	 edx
  000df	e8 00 00 00 00	 call	 ?Integrate@SpherePackFactory@@QAEXPAVSpherePack@@0M@Z ; SpherePackFactory::Integrate
  000e4	43		 inc	 ebx
  000e5	3b 5d fc	 cmp	 ebx, DWORD PTR _maxintegrate$1$[ebp]
  000e8	7c 9c		 jl	 SHORT $LL6@Process
$LN59@Process:
  000ea	5f		 pop	 edi
  000eb	5e		 pop	 esi
  000ec	5b		 pop	 ebx

; 106  : 		}
; 107  : 	}
; 108  : 	
; 109  : }

  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c3		 ret	 0
?Process@SpherePackFactory@@QAEXXZ ENDP			; SpherePackFactory::Process
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
;	COMDAT ??1SpherePackFactory@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1SpherePackFactory@@UAE@XZ PROC			; SpherePackFactory::~SpherePackFactory, COMDAT
; _this$ = ecx

; 68   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1SpherePackFactory@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SpherePackFactory@@6B@

; 69   : 	delete mIntegrate;  // free up integration fifo

  0002f	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  00032	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00039	85 c9		 test	 ecx, ecx
  0003b	74 06		 je	 SHORT $LN3@SpherePack
  0003d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003f	6a 01		 push	 1
  00041	ff 10		 call	 DWORD PTR [eax]
$LN3@SpherePack:

; 70   : 	delete mRecompute;  // free up recomputation fifo.

  00043	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  00046	85 c9		 test	 ecx, ecx
  00048	74 06		 je	 SHORT $LN5@SpherePack
  0004a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004c	6a 01		 push	 1
  0004e	ff 10		 call	 DWORD PTR [eax]
$LN5@SpherePack:
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h

; 34   : 		if (mData)

  00050	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 71   : }

  00053	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h

; 34   : 		if (mData)

  00057	85 c9		 test	 ecx, ecx
  00059	74 1a		 je	 SHORT $LN18@SpherePack

; 35   : 			delete [] mData;

  0005b	83 79 fc 00	 cmp	 DWORD PTR [ecx-4], 0
  0005f	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  00062	74 08		 je	 SHORT $LN12@SpherePack
  00064	8b 01		 mov	 eax, DWORD PTR [ecx]
  00066	6a 03		 push	 3
  00068	ff 10		 call	 DWORD PTR [eax]
  0006a	eb 09		 jmp	 SHORT $LN18@SpherePack
$LN12@SpherePack:
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00072	83 c4 04	 add	 esp, 4
$LN18@SpherePack:
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 56   : 	virtual ~SpherePackCallback() {}

  00075	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SpherePackCallback@@6B@
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 71   : }

  0007b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00085	59		 pop	 ecx
  00086	5e		 pop	 esi
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1SpherePackFactory@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1SpherePackCallback@@UAE@XZ ; SpherePackCallback::~SpherePackCallback
__unwindfunclet$??1SpherePackFactory@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 10	 add	 ecx, 16			; 00000010H
  0000e	e9 00 00 00 00	 jmp	 ??1?$Pool@VSpherePack@@@@QAE@XZ ; Pool<SpherePack>::~Pool<SpherePack>
__ehhandler$??1SpherePackFactory@@UAE@XZ:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1SpherePackFactory@@UAE@XZ
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1SpherePackFactory@@UAE@XZ ENDP			; SpherePackFactory::~SpherePackFactory
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
;	COMDAT ??0SpherePackFactory@@QAE@HMMM@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_maxspheres$1$ = 8					; size = 4
_maxspheres$ = 8					; size = 4
$T2 = 12						; size = 4
$T3 = 12						; size = 4
_rootsize$ = 12						; size = 4
_leafsize$ = 16						; size = 4
_gravy$ = 20						; size = 4
??0SpherePackFactory@@QAE@HMMM@Z PROC			; SpherePackFactory::SpherePackFactory, COMDAT
; _this$ = ecx

; 21   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0SpherePackFactory@@QAE@HMMM@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b d9		 mov	 ebx, ecx
  00028	89 5d f0	 mov	 DWORD PTR _this$[ebp], ebx
  0002b	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7SpherePackFactory@@6B@
  00031	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h

; 24   : 		mHead = 0;

  00038	c7 43 1c 00 00
	00 00		 mov	 DWORD PTR [ebx+28], 0

; 25   : 		mFree = 0;

  0003f	c7 43 20 00 00
	00 00		 mov	 DWORD PTR [ebx+32], 0

; 26   : 		mData = 0;

  00046	c7 43 18 00 00
	00 00		 mov	 DWORD PTR [ebx+24], 0

; 27   : 		mCurrent = 0;

  0004d	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0

; 28   : 		mFreeCount = 0;

  00054	c7 43 28 00 00
	00 00		 mov	 DWORD PTR [ebx+40], 0

; 29   : 		mUsedCount = 0;

  0005b	c7 43 24 00 00
	00 00		 mov	 DWORD PTR [ebx+36], 0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 21   : {

  00062	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 22   : 	NANOBEGIN

  00066	eb		 DB	 -21			; ffffffebH
  00067	03		 DB	 3
  00068	d6		 DB	 -42			; ffffffd6H
  00069	d7		 DB	 -41			; ffffffd7H
  0006a	01		 DB	 1

; 23   : 	maxspheres *= 4; // include room for both trees, the root node and leaf node tree, and the superspheres
; 24   : 	mMaxRootSize      = rootsize;

  0006b	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _rootsize$[ebp]
  00070	8b 45 08	 mov	 eax, DWORD PTR _maxspheres$[ebp]
  00073	f3 0f 11 43 34	 movss	 DWORD PTR [ebx+52], xmm0

; 25   : 	mMaxLeafSize      = leafsize;

  00078	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _leafsize$[ebp]
  0007d	f3 0f 11 43 38	 movss	 DWORD PTR [ebx+56], xmm0

; 26   : 	mSuperSphereGravy = gravy;

  00082	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _gravy$[ebp]
  00087	c1 e0 02	 shl	 eax, 2

; 27   : 	mIntegrate        = new SpherePackFifo(maxspheres);

  0008a	6a 18		 push	 24			; 00000018H
  0008c	89 45 08	 mov	 DWORD PTR _maxspheres$1$[ebp], eax
  0008f	f3 0f 11 43 3c	 movss	 DWORD PTR [ebx+60], xmm0
  00094	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00099	8b f8		 mov	 edi, eax
  0009b	83 c4 04	 add	 esp, 4
  0009e	89 7d 0c	 mov	 DWORD PTR $T3[ebp], edi
  000a1	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000a5	ba 04 00 00 00	 mov	 edx, 4
  000aa	85 ff		 test	 edi, edi
  000ac	74 3a		 je	 SHORT $LN3@SpherePack
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 306  : 		mFifoSize = fifosize;

  000ae	8b 45 08	 mov	 eax, DWORD PTR _maxspheres$1$[ebp]

; 307  : 		mFifo = new SpherePack *[mFifoSize];

  000b1	33 c9		 xor	 ecx, ecx
  000b3	89 47 10	 mov	 DWORD PTR [edi+16], eax
  000b6	f7 e2		 mul	 edx
  000b8	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7SpherePackFifo@@6B@
  000be	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  000c5	0f 90 c1	 seto	 cl
  000c8	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  000cf	f7 d9		 neg	 ecx
  000d1	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  000d8	0b c8		 or	 ecx, eax
  000da	51		 push	 ecx
  000db	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  000e0	83 c4 04	 add	 esp, 4
  000e3	89 47 14	 mov	 DWORD PTR [edi+20], eax
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 27   : 	mIntegrate        = new SpherePackFifo(maxspheres);

  000e6	eb 02		 jmp	 SHORT $LN4@SpherePack
$LN3@SpherePack:
  000e8	33 ff		 xor	 edi, edi
$LN4@SpherePack:

; 28   : 	mRecompute        = new SpherePackFifo(maxspheres);

  000ea	6a 18		 push	 24			; 00000018H
  000ec	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000f0	89 7b 2c	 mov	 DWORD PTR [ebx+44], edi
  000f3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000f8	8b f8		 mov	 edi, eax
  000fa	83 c4 04	 add	 esp, 4
  000fd	89 7d 0c	 mov	 DWORD PTR $T2[ebp], edi
  00100	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00104	85 ff		 test	 edi, edi
  00106	74 3f		 je	 SHORT $LN5@SpherePack
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 306  : 		mFifoSize = fifosize;

  00108	8b 45 08	 mov	 eax, DWORD PTR _maxspheres$1$[ebp]

; 307  : 		mFifo = new SpherePack *[mFifoSize];

  0010b	33 c9		 xor	 ecx, ecx
  0010d	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00110	ba 04 00 00 00	 mov	 edx, 4
  00115	f7 e2		 mul	 edx
  00117	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7SpherePackFifo@@6B@
  0011d	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  00124	0f 90 c1	 seto	 cl
  00127	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  0012e	f7 d9		 neg	 ecx
  00130	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  00137	0b c8		 or	 ecx, eax
  00139	51		 push	 ecx
  0013a	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0013f	83 c4 04	 add	 esp, 4
  00142	89 47 14	 mov	 DWORD PTR [edi+20], eax
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 28   : 	mRecompute        = new SpherePackFifo(maxspheres);

  00145	eb 02		 jmp	 SHORT $LN6@SpherePack
$LN5@SpherePack:
  00147	33 ff		 xor	 edi, edi
$LN6@SpherePack:

; 29   : 	
; 30   : 	mSpheres.Set(maxspheres);       // init pool to hold all possible SpherePack instances.

  00149	ff 75 08	 push	 DWORD PTR _maxspheres$1$[ebp]
  0014c	8d 4b 10	 lea	 ecx, DWORD PTR [ebx+16]
  0014f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00153	89 7b 30	 mov	 DWORD PTR [ebx+48], edi
  00156	e8 00 00 00 00	 call	 ?Set@?$Pool@VSpherePack@@@@QAEXH@Z ; Pool<SpherePack>::Set
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h

; 186  : 		if ( !mFree ) return 0;

  0015b	8b 4b 20	 mov	 ecx, DWORD PTR [ebx+32]
  0015e	85 c9		 test	 ecx, ecx
  00160	74 29		 je	 SHORT $LN25@SpherePack
$LN24@SpherePack:

; 187  : 		Type *ret = mFree;
; 188  : 		mFree = ret->GetNext(); // new head of free list
; 189  : 		Type *temp = mHead; // current head of list

  00162	8b 53 1c	 mov	 edx, DWORD PTR [ebx+28]
  00165	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00168	89 43 20	 mov	 DWORD PTR [ebx+32], eax

; 190  : 		mHead = ret;        // new head of list is this free one

  0016b	89 4b 1c	 mov	 DWORD PTR [ebx+28], ecx

; 191  : 		if ( temp ) temp->SetPrevious(ret);

  0016e	85 d2		 test	 edx, edx
  00170	74 03		 je	 SHORT $LN29@SpherePack
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 207  : 	void SetPrevious(SpherePack *pack) { mPrevious = pack; };

  00172	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx
$LN29@SpherePack:

; 130  : 	void ClearSpherePackFlag(SpherePackFlag flag) { mFlags&=~flag; };
; 131  : 	bool HasSpherePackFlag(SpherePackFlag flag) const
; 132  : 	{
; 133  : 		if ( mFlags & flag ) return true;
; 134  : 		return false;
; 135  : 	};
; 136  : 	
; 137  : 	
; 138  : 	void SetParent(SpherePack *pack) { mParent = pack; };
; 139  : 	SpherePack * GetParent(void) const { return mParent; };
; 140  : 	
; 141  : 	// Sphere has a new position.
; 142  : 	inline void NewPos(const Vector3d &pos);
; 143  : 	// Sphere has a new position and radius
; 144  : 	inline void NewPosRadius(const Vector3d &pos,float radius);
; 145  : 	
; 146  : 	void Unlink(void)
; 147  : 	{
; 148  : 		if ( mFifo1 ) // if we belong to fifo1, null us out
; 149  : 		{
; 150  : 			*mFifo1 = 0;
; 151  : 			mFifo1 = 0;
; 152  : 		}
; 153  : 		
; 154  : 		if ( mFifo2 ) // if we belong to fifo2, null us out
; 155  : 		{
; 156  : 			*mFifo2 = 0;
; 157  : 			mFifo2 = 0;
; 158  : 		}
; 159  : 		
; 160  : 		if ( mParent ) mParent->LostChild(this);
; 161  : 		
; 162  : 		assert( !mChildren ); // can't unlink guys with children!
; 163  : 		
; 164  : 		mParent = 0; // got no father anymore
; 165  : 	}
; 166  : 	
; 167  : 	
; 168  : 	void AddChild(SpherePack *pack)
; 169  : 	{
; 170  : 		
; 171  : 		SpherePack *my_child = mChildren;
; 172  : 		mChildren = pack; // new head of list
; 173  : 		
; 174  : 		pack->SetNextSibling(my_child); // his next is my old next
; 175  : 		pack->SetPrevSibling(0); // at head of list, no previous
; 176  : 		pack->SetParent(this);
; 177  : 		
; 178  : 		if ( my_child ) my_child->SetPrevSibling(pack); // previous now this..
; 179  : 		
; 180  : 		mChildCount++;
; 181  : 
; 182  : #if defined(_DEBUG)
; 183  : 		float dist = DistanceSquared(pack);
; 184  : 		float radius = sqrtf(dist) + pack->GetRadius();
; 185  : 		
; 186  : 		assert( radius <= GetRadius()+0.0001f );
; 187  : #endif
; 188  : 	}
; 189  : 	
; 190  : 	void SetNextSibling(SpherePack *child) { mNextSibling = child; }
; 191  : 	void SetPrevSibling(SpherePack *child) { mPrevSibling = child; }
; 192  : 	
; 193  : 	SpherePack * _GetNextSibling(void) const 
; 194  : 	{ 
; 195  : 		return mNextSibling; 
; 196  : 	}
; 197  : 	SpherePack * _GetPrevSibling(void) const 
; 198  : 	{ 
; 199  : 		return mPrevSibling; 
; 200  : 	}
; 201  : 	SpherePack * GetChildren(void)    const { return mChildren; }
; 202  : 	
; 203  : 	SpherePack * GetNext(void)     const { return mNext; };
; 204  : 	SpherePack * GetPrevious(void) const { return mPrevious; };
; 205  : 	
; 206  : 	void SetNext(SpherePack *pack) { mNext = pack; };

  00175	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00178	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 207  : 	void SetPrevious(SpherePack *pack) { mPrevious = pack; };

  0017b	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  0017e	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h

; 194  : 		mUsedCount++;

  00185	ff 43 24	 inc	 DWORD PTR [ebx+36]

; 195  : 		mFreeCount--;

  00188	ff 4b 28	 dec	 DWORD PTR [ebx+40]
$LN25@SpherePack:
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h

; 67   : 		mRadius = radius;

  0018b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@4ac80000
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 34   : 	mRoot = mSpheres.GetFreeLink(); // initially empty

  00193	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 115  : 		IS_SPHERE			= isSphere;

  00196	c6 41 4c 00	 mov	 BYTE PTR [ecx+76], 0

; 116  : 		mUserData         = userdata;

  0019a	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0

; 117  : 		mParent           = 0;

  001a1	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0

; 118  : 		mNextSibling      = 0;

  001a8	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0

; 119  : 		mPrevSibling      = 0;

  001af	c7 41 2c 00 00
	00 00		 mov	 DWORD PTR [ecx+44], 0

; 120  : 		mFlags            = 0;

  001b6	c7 41 38 00 00
	00 00		 mov	 DWORD PTR [ecx+56], 0

; 121  : 		mFifo1            = 0;

  001bd	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0

; 122  : 		mFifo2            = 0;

  001c4	c7 41 34 00 00
	00 00		 mov	 DWORD PTR [ecx+52], 0

; 123  : 		mFactory          = factory;

  001cb	89 59 48	 mov	 DWORD PTR [ecx+72], ebx
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  001ce	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  001d5	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  001dc	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h

; 68   : 		mRadius2 = radius*radius;

  001e3	f3 0f 59 c0	 mulss	 xmm0, xmm0
  001e7	c7 41 10 00 00
	c8 4a		 mov	 DWORD PTR [ecx+16], 1254621184 ; 4ac80000H
  001ee	f3 0f 11 41 14	 movss	 DWORD PTR [ecx+20], xmm0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 36   : 	mRoot->SetSpherePackFlag(SpherePackFlag(SPF_SUPERSPHERE | SPF_ROOTNODE | SPF_ROOT_TREE));

  001f3	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 129  : 	void SetSpherePackFlag(SpherePackFlag flag) { mFlags|=flag; };

  001f6	83 48 38 0b	 or	 DWORD PTR [eax+56], 11	; 0000000bH
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h

; 186  : 		if ( !mFree ) return 0;

  001fa	8b 4b 20	 mov	 ecx, DWORD PTR [ebx+32]
  001fd	85 c9		 test	 ecx, ecx
  001ff	74 29		 je	 SHORT $LN45@SpherePack
$LN44@SpherePack:

; 187  : 		Type *ret = mFree;
; 188  : 		mFree = ret->GetNext(); // new head of free list
; 189  : 		Type *temp = mHead; // current head of list

  00201	8b 53 1c	 mov	 edx, DWORD PTR [ebx+28]
  00204	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00207	89 43 20	 mov	 DWORD PTR [ebx+32], eax

; 190  : 		mHead = ret;        // new head of list is this free one

  0020a	89 4b 1c	 mov	 DWORD PTR [ebx+28], ecx

; 191  : 		if ( temp ) temp->SetPrevious(ret);

  0020d	85 d2		 test	 edx, edx
  0020f	74 03		 je	 SHORT $LN49@SpherePack
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 207  : 	void SetPrevious(SpherePack *pack) { mPrevious = pack; };

  00211	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx
$LN49@SpherePack:

; 130  : 	void ClearSpherePackFlag(SpherePackFlag flag) { mFlags&=~flag; };
; 131  : 	bool HasSpherePackFlag(SpherePackFlag flag) const
; 132  : 	{
; 133  : 		if ( mFlags & flag ) return true;
; 134  : 		return false;
; 135  : 	};
; 136  : 	
; 137  : 	
; 138  : 	void SetParent(SpherePack *pack) { mParent = pack; };
; 139  : 	SpherePack * GetParent(void) const { return mParent; };
; 140  : 	
; 141  : 	// Sphere has a new position.
; 142  : 	inline void NewPos(const Vector3d &pos);
; 143  : 	// Sphere has a new position and radius
; 144  : 	inline void NewPosRadius(const Vector3d &pos,float radius);
; 145  : 	
; 146  : 	void Unlink(void)
; 147  : 	{
; 148  : 		if ( mFifo1 ) // if we belong to fifo1, null us out
; 149  : 		{
; 150  : 			*mFifo1 = 0;
; 151  : 			mFifo1 = 0;
; 152  : 		}
; 153  : 		
; 154  : 		if ( mFifo2 ) // if we belong to fifo2, null us out
; 155  : 		{
; 156  : 			*mFifo2 = 0;
; 157  : 			mFifo2 = 0;
; 158  : 		}
; 159  : 		
; 160  : 		if ( mParent ) mParent->LostChild(this);
; 161  : 		
; 162  : 		assert( !mChildren ); // can't unlink guys with children!
; 163  : 		
; 164  : 		mParent = 0; // got no father anymore
; 165  : 	}
; 166  : 	
; 167  : 	
; 168  : 	void AddChild(SpherePack *pack)
; 169  : 	{
; 170  : 		
; 171  : 		SpherePack *my_child = mChildren;
; 172  : 		mChildren = pack; // new head of list
; 173  : 		
; 174  : 		pack->SetNextSibling(my_child); // his next is my old next
; 175  : 		pack->SetPrevSibling(0); // at head of list, no previous
; 176  : 		pack->SetParent(this);
; 177  : 		
; 178  : 		if ( my_child ) my_child->SetPrevSibling(pack); // previous now this..
; 179  : 		
; 180  : 		mChildCount++;
; 181  : 
; 182  : #if defined(_DEBUG)
; 183  : 		float dist = DistanceSquared(pack);
; 184  : 		float radius = sqrtf(dist) + pack->GetRadius();
; 185  : 		
; 186  : 		assert( radius <= GetRadius()+0.0001f );
; 187  : #endif
; 188  : 	}
; 189  : 	
; 190  : 	void SetNextSibling(SpherePack *child) { mNextSibling = child; }
; 191  : 	void SetPrevSibling(SpherePack *child) { mPrevSibling = child; }
; 192  : 	
; 193  : 	SpherePack * _GetNextSibling(void) const 
; 194  : 	{ 
; 195  : 		return mNextSibling; 
; 196  : 	}
; 197  : 	SpherePack * _GetPrevSibling(void) const 
; 198  : 	{ 
; 199  : 		return mPrevSibling; 
; 200  : 	}
; 201  : 	SpherePack * GetChildren(void)    const { return mChildren; }
; 202  : 	
; 203  : 	SpherePack * GetNext(void)     const { return mNext; };
; 204  : 	SpherePack * GetPrevious(void) const { return mPrevious; };
; 205  : 	
; 206  : 	void SetNext(SpherePack *pack) { mNext = pack; };

  00214	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00217	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 207  : 	void SetPrevious(SpherePack *pack) { mPrevious = pack; };

  0021a	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  0021d	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\pool.h

; 194  : 		mUsedCount++;

  00224	ff 43 24	 inc	 DWORD PTR [ebx+36]

; 195  : 		mFreeCount--;

  00227	ff 4b 28	 dec	 DWORD PTR [ebx+40]
$LN45@SpherePack:
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h

; 67   : 		mRadius = radius;

  0022a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@49c80000
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 42   : 	mLeaf = mSpheres.GetFreeLink();; // initially empty

  00232	89 4b 08	 mov	 DWORD PTR [ebx+8], ecx
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 115  : 		IS_SPHERE			= isSphere;

  00235	c6 41 4c 00	 mov	 BYTE PTR [ecx+76], 0

; 116  : 		mUserData         = userdata;

  00239	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0

; 117  : 		mParent           = 0;

  00240	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0

; 118  : 		mNextSibling      = 0;

  00247	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0

; 119  : 		mPrevSibling      = 0;

  0024e	c7 41 2c 00 00
	00 00		 mov	 DWORD PTR [ecx+44], 0

; 120  : 		mFlags            = 0;

  00255	c7 41 38 00 00
	00 00		 mov	 DWORD PTR [ecx+56], 0

; 121  : 		mFifo1            = 0;

  0025c	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0

; 122  : 		mFifo2            = 0;

  00263	c7 41 34 00 00
	00 00		 mov	 DWORD PTR [ecx+52], 0

; 123  : 		mFactory          = factory;

  0026a	89 59 48	 mov	 DWORD PTR [ecx+72], ebx
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h

; 68   : 		mRadius2 = radius*radius;

  0026d	f3 0f 59 c0	 mulss	 xmm0, xmm0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  00271	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00278	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0027f	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h

; 67   : 		mRadius = radius;

  00286	c7 41 10 00 00
	c8 49		 mov	 DWORD PTR [ecx+16], 1237843968 ; 49c80000H

; 68   : 		mRadius2 = radius*radius;

  0028d	f3 0f 11 41 14	 movss	 DWORD PTR [ecx+20], xmm0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 44   : 	mLeaf->SetSpherePackFlag(SpherePackFlag(SPF_SUPERSPHERE | SPF_ROOTNODE | SPF_LEAF_TREE));

  00292	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 129  : 	void SetSpherePackFlag(SpherePackFlag flag) { mFlags|=flag; };

  00295	83 48 38 0d	 or	 DWORD PTR [eax+56], 13	; 0000000dH
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 64   : 	NANOEND

  00299	eb		 DB	 -21			; ffffffebH
  0029a	03		 DB	 3
  0029b	d6		 DB	 -42			; ffffffd6H
  0029c	d7		 DB	 -41			; ffffffd7H
  0029d	00		 DB	 0

; 65   : }

  0029e	8b c3		 mov	 eax, ebx
  002a0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002a3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002aa	59		 pop	 ecx
  002ab	5f		 pop	 edi
  002ac	5e		 pop	 esi
  002ad	5b		 pop	 ebx
  002ae	8b e5		 mov	 esp, ebp
  002b0	5d		 pop	 ebp
  002b1	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0SpherePackFactory@@QAE@HMMM@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1SpherePackCallback@@UAE@XZ ; SpherePackCallback::~SpherePackCallback
__unwindfunclet$??0SpherePackFactory@@QAE@HMMM@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 10	 add	 ecx, 16			; 00000010H
  0000e	e9 00 00 00 00	 jmp	 ??1?$Pool@VSpherePack@@@@QAE@XZ ; Pool<SpherePack>::~Pool<SpherePack>
__unwindfunclet$??0SpherePackFactory@@QAE@HMMM@Z$2:
  00013	8b 45 0c	 mov	 eax, DWORD PTR $T3[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001c	59		 pop	 ecx
  0001d	c3		 ret	 0
__unwindfunclet$??0SpherePackFactory@@QAE@HMMM@Z$3:
  0001e	8b 45 0c	 mov	 eax, DWORD PTR $T2[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00027	59		 pop	 ecx
  00028	c3		 ret	 0
__ehhandler$??0SpherePackFactory@@QAE@HMMM@Z:
  00029	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00030	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0SpherePackFactory@@QAE@HMMM@Z
  0003f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0SpherePackFactory@@QAE@HMMM@Z ENDP			; SpherePackFactory::SpherePackFactory
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ??_GSpherePackFifo@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GSpherePackFifo@@UAEPAXI@Z PROC			; SpherePackFifo::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 312  : 		delete [] mFifo;

  00006	ff 76 14	 push	 DWORD PTR [esi+20]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SpherePackFifo@@6B@
  0000f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00014	83 c4 04	 add	 esp, 4
  00017	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001b	74 09		 je	 SHORT $LN6@scalar
  0001d	56		 push	 esi
  0001e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00023	83 c4 04	 add	 esp, 4
$LN6@scalar:
  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??_GSpherePackFifo@@UAEPAXI@Z ENDP			; SpherePackFifo::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ?GetCount@SpherePackFifo@@QBEHXZ
_TEXT	SEGMENT
?GetCount@SpherePackFifo@@QBEHXZ PROC			; SpherePackFifo::GetCount, COMDAT
; _this$ = ecx

; 355  : 	int GetCount(void) const { return mCount; };

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetCount@SpherePackFifo@@QBEHXZ ENDP			; SpherePackFifo::GetCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ?Pop@SpherePackFifo@@QAEPAVSpherePack@@XZ
_TEXT	SEGMENT
tv207 = -4						; size = 4
?Pop@SpherePackFifo@@QAEPAVSpherePack@@XZ PROC		; SpherePackFifo::Pop, COMDAT
; _this$ = ecx

; 326  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 327  : 		while ( mSP != mBottom )

  00004	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00007	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0000a	53		 push	 ebx
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	3b d0		 cmp	 edx, eax
  0000f	74 25		 je	 SHORT $LN3@Pop

; 328  : 		{
; 329  : 			mCount--;
; 330  : 			SpherePack *ret = mFifo[mBottom];

  00011	8b 79 14	 mov	 edi, DWORD PTR [ecx+20]

; 332  : 			if ( mBottom == mFifoSize ) mBottom = 0;

  00014	8b 59 10	 mov	 ebx, DWORD PTR [ecx+16]
$LL4@Pop:

; 328  : 		{
; 329  : 			mCount--;
; 330  : 			SpherePack *ret = mFifo[mBottom];

  00017	ff 49 04	 dec	 DWORD PTR [ecx+4]
  0001a	8b 34 87	 mov	 esi, DWORD PTR [edi+eax*4]

; 331  : 			mBottom++;

  0001d	40		 inc	 eax

; 332  : 			if ( mBottom == mFifoSize ) mBottom = 0;

  0001e	3b c3		 cmp	 eax, ebx
  00020	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv207[ebp], 0
  00027	0f 44 45 fc	 cmove	 eax, DWORD PTR tv207[ebp]
  0002b	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 333  : 			if ( ret ) return ret;

  0002e	85 f6		 test	 esi, esi
  00030	75 0d		 jne	 SHORT $LN8@Pop

; 327  : 		while ( mSP != mBottom )

  00032	3b d0		 cmp	 edx, eax
  00034	75 e1		 jne	 SHORT $LL4@Pop
$LN3@Pop:
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi

; 334  : 		}
; 335  : 		return 0;

  00038	33 c0		 xor	 eax, eax
  0003a	5b		 pop	 ebx

; 336  : 	}

  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
$LN8@Pop:
  0003f	5f		 pop	 edi

; 333  : 			if ( ret ) return ret;

  00040	8b c6		 mov	 eax, esi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx

; 336  : 	}

  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
?Pop@SpherePackFifo@@QAEPAVSpherePack@@XZ ENDP		; SpherePackFifo::Pop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ?Push@SpherePackFifo@@QAEPAPAVSpherePack@@PAV2@@Z
_TEXT	SEGMENT
_sphere$ = 8						; size = 4
?Push@SpherePackFifo@@QAEPAPAVSpherePack@@PAV2@@Z PROC	; SpherePackFifo::Push, COMDAT
; _this$ = ecx

; 316  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 317  : 		mCount++;
; 318  : 		SpherePack **ret = &mFifo[mSP];

  00006	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00009	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0000c	ff 46 04	 inc	 DWORD PTR [esi+4]
  0000f	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]

; 319  : 		mFifo[mSP] = sphere;

  00012	8b 55 08	 mov	 edx, DWORD PTR _sphere$[ebp]
  00015	89 10		 mov	 DWORD PTR [eax], edx

; 320  : 		mSP++;

  00017	ff 46 08	 inc	 DWORD PTR [esi+8]
  0001a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 321  : 		if ( mSP == mFifoSize ) mSP = 0;

  0001d	3b 4e 10	 cmp	 ecx, DWORD PTR [esi+16]
  00020	75 07		 jne	 SHORT $LN1@Push
  00022	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN1@Push:
  00029	5e		 pop	 esi

; 322  : 		return ret;
; 323  : 	};

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?Push@SpherePackFifo@@QAEPAPAVSpherePack@@PAV2@@Z ENDP	; SpherePackFifo::Push
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ??1SpherePackFifo@@UAE@XZ
_TEXT	SEGMENT
??1SpherePackFifo@@UAE@XZ PROC				; SpherePackFifo::~SpherePackFifo, COMDAT
; _this$ = ecx

; 312  : 		delete [] mFifo;

  00000	ff 71 14	 push	 DWORD PTR [ecx+20]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7SpherePackFifo@@6B@
  00009	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0000e	59		 pop	 ecx

; 313  : 	};

  0000f	c3		 ret	 0
??1SpherePackFifo@@UAE@XZ ENDP				; SpherePackFifo::~SpherePackFifo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ??0SpherePackFifo@@QAE@H@Z
_TEXT	SEGMENT
_fifosize$ = 8						; size = 4
??0SpherePackFifo@@QAE@H@Z PROC				; SpherePackFifo::SpherePackFifo, COMDAT
; _this$ = ecx

; 301  : 	SpherePackFifo(int fifosize)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 302  : 	{
; 303  : 		mCount = 0;
; 304  : 		mSP = 0;
; 305  : 		mBottom = 0;
; 306  : 		mFifoSize = fifosize;

  00003	8b 45 08	 mov	 eax, DWORD PTR _fifosize$[ebp]

; 307  : 		mFifo = new SpherePack *[mFifoSize];

  00006	ba 04 00 00 00	 mov	 edx, 4
  0000b	56		 push	 esi
  0000c	8b f1		 mov	 esi, ecx
  0000e	33 c9		 xor	 ecx, ecx
  00010	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00013	f7 e2		 mul	 edx
  00015	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SpherePackFifo@@6B@
  0001b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00022	0f 90 c1	 seto	 cl
  00025	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0002c	f7 d9		 neg	 ecx
  0002e	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00035	0b c8		 or	 ecx, eax
  00037	51		 push	 ecx
  00038	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0003d	83 c4 04	 add	 esp, 4
  00040	89 46 14	 mov	 DWORD PTR [esi+20], eax

; 308  : 	};

  00043	8b c6		 mov	 eax, esi
  00045	5e		 pop	 esi
  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
??0SpherePackFifo@@QAE@H@Z ENDP				; SpherePackFifo::SpherePackFifo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h
;	COMDAT ??_ESpherePack@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_ESpherePack@@UAEPAXI@Z PROC				; SpherePack::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	f6 c3 02	 test	 bl, 2
  0000d	74 2b		 je	 SHORT $LN3@vector
  0000f	57		 push	 edi
  00010	68 00 00 00 00	 push	 OFFSET ??1SpherePack@@UAE@XZ ; SpherePack::~SpherePack
  00015	ff 76 fc	 push	 DWORD PTR [esi-4]
  00018	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0001b	6a 50		 push	 80			; 00000050H
  0001d	56		 push	 esi
  0001e	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  00023	f6 c3 01	 test	 bl, 1
  00026	74 09		 je	 SHORT $LN2@vector
  00028	57		 push	 edi
  00029	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0002e	83 c4 04	 add	 esp, 4
$LN2@vector:
  00031	8b c7		 mov	 eax, edi
  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
$LN3@vector:

; 39   : 	virtual ~Sphere() {}

  0003a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Sphere@@6B@
  00040	f6 c3 01	 test	 bl, 1
  00043	74 09		 je	 SHORT $LN1@vector
  00045	56		 push	 esi
  00046	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004b	83 c4 04	 add	 esp, 4
$LN1@vector:
  0004e	8b c6		 mov	 eax, esi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	5d		 pop	 ebp
  00053	c2 04 00	 ret	 4
??_ESpherePack@@UAEPAXI@Z ENDP				; SpherePack::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
;	COMDAT ?Reset@SpherePack@@QAEXXZ
_TEXT	SEGMENT
?Reset@SpherePack@@QAEXXZ PROC				; SpherePack::Reset, COMDAT
; _this$ = ecx
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 130  : 	void ClearSpherePackFlag(SpherePackFlag flag) { mFlags&=~flag; };

  00000	81 61 38 3f fe
	ff ff		 and	 DWORD PTR [ecx+56], -449 ; fffffe3fH
  00007	56		 push	 esi
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 862  : 	SpherePack *pack = mChildren;

  00008	8b 71 24	 mov	 esi, DWORD PTR [ecx+36]

; 863  : 	while (pack)

  0000b	85 f6		 test	 esi, esi
  0000d	74 0f		 je	 SHORT $LN1@Reset
  0000f	90		 npad	 1
$LL2@Reset:

; 864  : 	{
; 865  : 		pack->Reset();

  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?Reset@SpherePack@@QAEXXZ ; SpherePack::Reset
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 195  : 		return mNextSibling; 

  00017	8b 76 28	 mov	 esi, DWORD PTR [esi+40]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 863  : 	while (pack)

  0001a	85 f6		 test	 esi, esi
  0001c	75 f2		 jne	 SHORT $LL2@Reset
$LN1@Reset:
  0001e	5e		 pop	 esi

; 866  : 		pack = pack->_GetNextSibling();
; 867  : 	}
; 868  : }

  0001f	c3		 ret	 0
?Reset@SpherePack@@QAEXXZ ENDP				; SpherePack::Reset
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
;	COMDAT ?PointTest2d@SpherePack@@QAEXABVVector3d@@PAVSpherePackCallback@@W4ViewState@@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_callback$ = 12						; size = 4
_state$ = 16						; size = 4
?PointTest2d@SpherePack@@QAEXABVVector3d@@PAVSpherePackCallback@@W4ViewState@@@Z PROC ; SpherePack::PointTest2d, COMDAT
; _this$ = ecx

; 733  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 734  : 	if (state == VS_PARTIAL)
; 735  : 	{
; 736  : 		float dx=p.x-mCenter.x;

  00003	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR _state$[ebp]
  0000b	8b f1		 mov	 esi, ecx
  0000d	83 ff 01	 cmp	 edi, 1
  00010	75 35		 jne	 SHORT $LN5@PointTest2
  00012	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]

; 737  : 		float dy=p.y-mCenter.y;

  00016	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  0001b	f3 0f 5c 4e 08	 subss	 xmm1, DWORD PTR [esi+8]
  00020	f3 0f 5c 46 04	 subss	 xmm0, DWORD PTR [esi+4]

; 738  : 		float distSquare = (dx*dx)+(dy*dy);

  00025	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00029	f3 0f 59 c0	 mulss	 xmm0, xmm0
  0002d	f3 0f 58 c8	 addss	 xmm1, xmm0

; 739  : 
; 740  : 		if (distSquare > GetRadius2()) return;;

  00031	0f 2f 4e 14	 comiss	 xmm1, DWORD PTR [esi+20]
  00035	77 44		 ja	 SHORT $LN1@PointTest2

; 741  : 		if (GetRadius2() < -distSquare) state = VS_INSIDE;

  00037	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  0003e	33 c0		 xor	 eax, eax
  00040	0f 2f 4e 14	 comiss	 xmm1, DWORD PTR [esi+20]
  00044	0f 47 f8	 cmova	 edi, eax
$LN5@PointTest2:
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 133  : 		if ( mFlags & flag ) return true;

  00047	f6 46 38 01	 test	 BYTE PTR [esi+56], 1
  0004b	74 23		 je	 SHORT $LN4@PointTest2
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 753  : 		while (pack)

  0004d	8b 76 24	 mov	 esi, DWORD PTR [esi+36]
  00050	85 f6		 test	 esi, esi
  00052	74 27		 je	 SHORT $LN1@PointTest2
$LL3@PointTest2:

; 754  : 		{
; 755  : 			pack->PointTest2d(p, callback, state);

  00054	57		 push	 edi
  00055	ff 75 0c	 push	 DWORD PTR _callback$[ebp]
  00058	8b ce		 mov	 ecx, esi
  0005a	52		 push	 edx
  0005b	e8 00 00 00 00	 call	 ?PointTest2d@SpherePack@@QAEXABVVector3d@@PAVSpherePackCallback@@W4ViewState@@@Z ; SpherePack::PointTest2d
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 195  : 		return mNextSibling; 

  00060	8b 76 28	 mov	 esi, DWORD PTR [esi+40]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 753  : 		while (pack)

  00063	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00066	85 f6		 test	 esi, esi
  00068	75 ea		 jne	 SHORT $LL3@PointTest2
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi

; 773  : 	}
; 774  : }

  0006c	5d		 pop	 ebp
  0006d	c2 0c 00	 ret	 12			; 0000000cH
$LN4@PointTest2:

; 756  : 			pack = pack->_GetNextSibling();
; 757  : 		}
; 758  : 		
; 759  : 	}
; 760  : 	else
; 761  : 	{
; 762  : #ifdef SPHERELIB_STRICT
; 763  : 		extern bool MAPOUTDOOR_GET_HEIGHT_TRACE;
; 764  : 		if (MAPOUTDOOR_GET_HEIGHT_TRACE)
; 765  : 		{
; 766  : 			float dx=p.x-mCenter.x;
; 767  : 			float dy=p.y-mCenter.y;
; 768  : 			float distSquare = (dx*dx)+(dy*dy);
; 769  : 			printf("--- (%f, %f) dist %f radius %f isSphere %d\n", mCenter.x, mCenter.y, distSquare, GetRadius(), IS_SPHERE);
; 770  : 		}
; 771  : #endif
; 772  : 		callback->PointTest2dCallback(p, this, state);

  00070	8b 4d 0c	 mov	 ecx, DWORD PTR _callback$[ebp]
  00073	57		 push	 edi
  00074	56		 push	 esi
  00075	52		 push	 edx
  00076	8b 01		 mov	 eax, DWORD PTR [ecx]
  00078	ff 50 10	 call	 DWORD PTR [eax+16]
$LN1@PointTest2:
  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi

; 773  : 	}
; 774  : }

  0007d	5d		 pop	 ebp
  0007e	c2 0c 00	 ret	 12			; 0000000cH
?PointTest2d@SpherePack@@QAEXABVVector3d@@PAVSpherePackCallback@@W4ViewState@@@Z ENDP ; SpherePack::PointTest2d
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
;	COMDAT ?RangeTest@SpherePack@@QAEXABVVector3d@@MPAVSpherePackCallback@@W4ViewState@@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_distance$ = 12						; size = 4
_callback$ = 16						; size = 4
_d$1 = 20						; size = 4
_state$ = 20						; size = 4
?RangeTest@SpherePack@@QAEXABVVector3d@@MPAVSpherePackCallback@@W4ViewState@@@Z PROC ; SpherePack::RangeTest, COMDAT
; _this$ = ecx

; 699  : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 700  : 
; 701  : 	if (state == VS_PARTIAL)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _p$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 14	 mov	 edi, DWORD PTR _state$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	83 ff 01	 cmp	 edi, 1
  00011	75 6f		 jne	 SHORT $LN5@RangeTest
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 170  : 		float dx = a.x - x;

  00013	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
; File a:\vs\vc\include\math.h

; 775  :     return (float)sqrt(_X);

  00018	83 ec 08	 sub	 esp, 8
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 171  : 		float dy = a.y - y;

  0001b	f3 0f 10 56 08	 movss	 xmm2, DWORD PTR [esi+8]
  00020	f3 0f 5c 53 04	 subss	 xmm2, DWORD PTR [ebx+4]
  00025	f3 0f 5c 0b	 subss	 xmm1, DWORD PTR [ebx]

; 172  : 		float dz = a.z - z;

  00029	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
  0002e	f3 0f 5c 43 08	 subss	 xmm0, DWORD PTR [ebx+8]

; 173  : 		return dx*dx + dy*dy + dz*dz;

  00033	f3 0f 59 d2	 mulss	 xmm2, xmm2
  00037	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0003b	f3 0f 59 c0	 mulss	 xmm0, xmm0
  0003f	f3 0f 58 d1	 addss	 xmm2, xmm1
  00043	f3 0f 58 d0	 addss	 xmm2, xmm0
; File a:\vs\vc\include\math.h

; 775  :     return (float)sqrt(_X);

  00047	0f 5a c2	 cvtps2pd xmm0, xmm2
  0004a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0004f	e8 00 00 00 00	 call	 _sqrt
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 704  : 		if ((d-distance) > GetRadius()) return;;

  00054	f3 0f 10 55 0c	 movss	 xmm2, DWORD PTR _distance$[ebp]
; File a:\vs\vc\include\math.h

; 775  :     return (float)sqrt(_X);

  00059	83 c4 08	 add	 esp, 8
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 703  : 		float d = p.Distance(mCenter);

  0005c	d9 5d 14	 fstp	 DWORD PTR _d$1[ebp]

; 704  : 		if ((d-distance) > GetRadius()) return;;

  0005f	f3 0f 10 4d 14	 movss	 xmm1, DWORD PTR _d$1[ebp]
  00064	0f 28 c1	 movaps	 xmm0, xmm1
  00067	f3 0f 5c c2	 subss	 xmm0, xmm2
  0006b	0f 2f 46 10	 comiss	 xmm0, DWORD PTR [esi+16]
  0006f	77 5a		 ja	 SHORT $LN1@RangeTest
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h

; 45   : 	float GetRadius(void) const { return mRadius; };

  00071	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 705  : 		if ((GetRadius()+d) < distance) state = VS_INSIDE;

  00076	33 c0		 xor	 eax, eax
  00078	f3 0f 58 c1	 addss	 xmm0, xmm1
  0007c	0f 2f d0	 comiss	 xmm2, xmm0
  0007f	0f 47 f8	 cmova	 edi, eax
$LN5@RangeTest:
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 133  : 		if ( mFlags & flag ) return true;

  00082	f6 46 38 01	 test	 BYTE PTR [esi+56], 1
  00086	74 2d		 je	 SHORT $LN4@RangeTest
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 717  : 		while (pack)

  00088	8b 76 24	 mov	 esi, DWORD PTR [esi+36]
  0008b	85 f6		 test	 esi, esi
  0008d	74 3c		 je	 SHORT $LN1@RangeTest
  0008f	90		 npad	 1
$LL3@RangeTest:

; 718  : 		{
; 719  : 			pack->RangeTest(p,distance,callback,state);

  00090	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _distance$[ebp]
  00095	57		 push	 edi
  00096	ff 75 10	 push	 DWORD PTR _callback$[ebp]
  00099	51		 push	 ecx
  0009a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009f	8b ce		 mov	 ecx, esi
  000a1	53		 push	 ebx
  000a2	e8 00 00 00 00	 call	 ?RangeTest@SpherePack@@QAEXABVVector3d@@MPAVSpherePackCallback@@W4ViewState@@@Z ; SpherePack::RangeTest
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 195  : 		return mNextSibling; 

  000a7	8b 76 28	 mov	 esi, DWORD PTR [esi+40]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 717  : 		while (pack)

  000aa	85 f6		 test	 esi, esi
  000ac	75 e2		 jne	 SHORT $LL3@RangeTest
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	5b		 pop	 ebx

; 727  : 	}
; 728  : }

  000b1	5d		 pop	 ebp
  000b2	c2 10 00	 ret	 16			; 00000010H
$LN4@RangeTest:

; 720  : 			pack = pack->_GetNextSibling();
; 721  : 		}
; 722  : 		
; 723  : 	}
; 724  : 	else
; 725  : 	{		
; 726  : 		callback->RangeTestCallback(p,distance,this,state);

  000b5	8b 4d 10	 mov	 ecx, DWORD PTR _callback$[ebp]
  000b8	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _distance$[ebp]
  000bd	57		 push	 edi
  000be	56		 push	 esi
  000bf	8b 01		 mov	 eax, DWORD PTR [ecx]
  000c1	51		 push	 ecx
  000c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c7	53		 push	 ebx
  000c8	ff 50 0c	 call	 DWORD PTR [eax+12]
$LN1@RangeTest:
  000cb	5f		 pop	 edi
  000cc	5e		 pop	 esi
  000cd	5b		 pop	 ebx

; 727  : 	}
; 728  : }

  000ce	5d		 pop	 ebp
  000cf	c2 10 00	 ret	 16			; 00000010H
?RangeTest@SpherePack@@QAEXABVVector3d@@MPAVSpherePackCallback@@W4ViewState@@@Z ENDP ; SpherePack::RangeTest
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
;	COMDAT ?RayTrace@SpherePack@@QAEXABVVector3d@@0MPAVSpherePackCallback@@@Z
_TEXT	SEGMENT
_callback$GSCopy$1$ = -20				; size = 4
_sect$1 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_p1$ = 8						; size = 4
_dir$ = 12						; size = 4
_distance$ = 16						; size = 4
_callback$ = 20						; size = 4
?RayTrace@SpherePack@@QAEXABVVector3d@@0MPAVSpherePackCallback@@@Z PROC ; SpherePack::RayTrace, COMDAT
; _this$ = ecx

; 800  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 14	 mov	 eax, DWORD PTR _callback$[ebp]
  00013	53		 push	 ebx
  00014	8b 5d 0c	 mov	 ebx, DWORD PTR _dir$[ebp]
  00017	56		 push	 esi
  00018	8b f1		 mov	 esi, ecx
  0001a	89 45 ec	 mov	 DWORD PTR _callback$GSCopy$1$[ebp], eax
  0001d	57		 push	 edi
  0001e	8b 7d 08	 mov	 edi, DWORD PTR _p1$[ebp]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 133  : 		if ( mFlags & flag ) return true;

  00021	f6 46 38 01	 test	 BYTE PTR [esi+56], 1
  00025	74 4a		 je	 SHORT $LN6@RayTrace
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 806  : 		hit = RayIntersectionInFront(p1,dir,0);

  00027	6a 00		 push	 0
  00029	53		 push	 ebx
  0002a	57		 push	 edi
  0002b	e8 00 00 00 00	 call	 ?RayIntersectionInFront@Sphere@@QAE_NABVVector3d@@0PAV2@@Z ; Sphere::RayIntersectionInFront

; 807  : 		
; 808  : 		if (hit)

  00030	84 c0		 test	 al, al
  00032	74 71		 je	 SHORT $LN1@RayTrace

; 809  : 		{
; 810  : #if DEMO
; 811  : 			DrawCircle(int(mCenter.x), int(mCenter.y), int(GetRadius()), 0x404040);
; 812  : #endif
; 813  : 			SpherePack *pack = mChildren;

  00034	8b 76 24	 mov	 esi, DWORD PTR [esi+36]

; 815  : 			while (pack)

  00037	85 f6		 test	 esi, esi
  00039	74 6a		 je	 SHORT $LN1@RayTrace
  0003b	eb 03 8d 49 00	 npad	 5
$LL4@RayTrace:

; 816  : 			{
; 817  : 				pack->RayTrace(p1,dir,distance,callback);

  00040	ff 75 ec	 push	 DWORD PTR _callback$GSCopy$1$[ebp]
  00043	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _distance$[ebp]
  00048	51		 push	 ecx
  00049	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004e	8b ce		 mov	 ecx, esi
  00050	53		 push	 ebx
  00051	57		 push	 edi
  00052	e8 00 00 00 00	 call	 ?RayTrace@SpherePack@@QAEXABVVector3d@@0MPAVSpherePackCallback@@@Z ; SpherePack::RayTrace
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 195  : 		return mNextSibling; 

  00057	8b 76 28	 mov	 esi, DWORD PTR [esi+40]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 815  : 			while (pack)

  0005a	85 f6		 test	 esi, esi
  0005c	75 e2		 jne	 SHORT $LL4@RayTrace
  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx

; 830  : 		}
; 831  : 	}
; 832  : }

  00061	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00064	33 cd		 xor	 ecx, ebp
  00066	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 10 00	 ret	 16			; 00000010H
$LN6@RayTrace:

; 818  : 				pack = pack->_GetNextSibling();
; 819  : 			}
; 820  : 		}
; 821  : 		
; 822  : 	}
; 823  : 	else
; 824  : 	{
; 825  : 		Vector3d sect;
; 826  : 		hit = RayIntersection(p1,dir,distance,&sect);

  00071	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _distance$[ebp]
  00076	8d 45 f0	 lea	 eax, DWORD PTR _sect$1[ebp]
  00079	50		 push	 eax
  0007a	51		 push	 ecx
  0007b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00080	53		 push	 ebx
  00081	57		 push	 edi
  00082	e8 00 00 00 00	 call	 ?RayIntersection@Sphere@@QAE_NABVVector3d@@0MPAV2@@Z ; Sphere::RayIntersection

; 827  : 		if (hit)

  00087	84 c0		 test	 al, al
  00089	74 1a		 je	 SHORT $LN1@RayTrace

; 828  : 		{
; 829  : 			callback->RayTraceCallback(p1,dir,distance,sect,this);

  0008b	8b 4d ec	 mov	 ecx, DWORD PTR _callback$GSCopy$1$[ebp]
  0008e	8d 55 f0	 lea	 edx, DWORD PTR _sect$1[ebp]
  00091	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _distance$[ebp]
  00096	56		 push	 esi
  00097	52		 push	 edx
  00098	8b 01		 mov	 eax, DWORD PTR [ecx]
  0009a	51		 push	 ecx
  0009b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a0	53		 push	 ebx
  000a1	57		 push	 edi
  000a2	ff 50 08	 call	 DWORD PTR [eax+8]
$LN1@RayTrace:

; 830  : 		}
; 831  : 	}
; 832  : }

  000a5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	33 cd		 xor	 ecx, ebp
  000ac	5b		 pop	 ebx
  000ad	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c2 10 00	 ret	 16			; 00000010H
?RayTrace@SpherePack@@QAEXABVVector3d@@0MPAVSpherePackCallback@@@Z ENDP ; SpherePack::RayTrace
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
;	COMDAT ?VisibilityTest@SpherePack@@QAEXABVFrustum@@PAVSpherePackCallback@@W4ViewState@@@Z
_TEXT	SEGMENT
_f$ = 8							; size = 4
_callback$ = 12						; size = 4
_state$ = 16						; size = 4
?VisibilityTest@SpherePack@@QAEXABVFrustum@@PAVSpherePackCallback@@W4ViewState@@@Z PROC ; SpherePack::VisibilityTest, COMDAT
; _this$ = ecx

; 562  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 563  : 	
; 564  : 	if (state == VS_PARTIAL)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _f$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 10	 mov	 edi, DWORD PTR _state$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	83 ff 01	 cmp	 edi, 1
  00011	75 18		 jne	 SHORT $LN18@Visibility
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h

; 45   : 	float GetRadius(void) const { return mRadius; };

  00013	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 566  : 		state = f.ViewVolumeTest(mCenter, GetRadius());

  00018	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0001b	51		 push	 ecx
  0001c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00021	8b cb		 mov	 ecx, ebx
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 ?ViewVolumeTest@Frustum@@QBE?AW4ViewState@@ABVVector3d@@M@Z ; Frustum::ViewVolumeTest
  00029	8b f8		 mov	 edi, eax
$LN18@Visibility:
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 133  : 		if ( mFlags & flag ) return true;

  0002b	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0002e	f6 c1 01	 test	 cl, 1
  00031	74 6b		 je	 SHORT $LN17@Visibility
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 579  : 		if (state == VS_OUTSIDE)

  00033	83 ff 02	 cmp	 edi, 2
  00036	75 14		 jne	 SHORT $LN16@Visibility
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 133  : 		if ( mFlags & flag ) return true;

  00038	f6 c1 40	 test	 cl, 64			; 00000040H
  0003b	0f 85 d1 00 00
	00		 jne	 $LN4@Visibility

; 130  : 	void ClearSpherePackFlag(SpherePackFlag flag) { mFlags&=~flag; };

  00041	81 e1 7f fe ff
	ff		 and	 ecx, -385		; fffffe7fH

; 129  : 	void SetSpherePackFlag(SpherePackFlag flag) { mFlags|=flag; };

  00047	83 c9 40	 or	 ecx, 64			; 00000040H
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 585  : 		else

  0004a	eb 2a		 jmp	 SHORT $LN73@Visibility
$LN16@Visibility:

; 586  : 		{
; 587  : 			if (state == VS_INSIDE)

  0004c	85 ff		 test	 edi, edi
  0004e	75 1a		 jne	 SHORT $LN13@Visibility
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 133  : 		if ( mFlags & flag ) return true;

  00050	f7 c1 00 01 00
	00		 test	 ecx, 256		; 00000100H
  00056	0f 85 b6 00 00
	00		 jne	 $LN4@Visibility

; 130  : 	void ClearSpherePackFlag(SpherePackFlag flag) { mFlags&=~flag; };

  0005c	81 e1 3f ff ff
	ff		 and	 ecx, -193		; ffffff3fH

; 129  : 	void SetSpherePackFlag(SpherePackFlag flag) { mFlags|=flag; };

  00062	81 c9 00 01 00
	00		 or	 ecx, 256		; 00000100H
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 593  : 			else

  00068	eb 0c		 jmp	 SHORT $LN73@Visibility
$LN13@Visibility:
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 130  : 	void ClearSpherePackFlag(SpherePackFlag flag) { mFlags&=~flag; };

  0006a	81 e1 bf fe ff
	ff		 and	 ecx, -321		; fffffebfH

; 129  : 	void SetSpherePackFlag(SpherePackFlag flag) { mFlags|=flag; };

  00070	81 c9 80 00 00
	00		 or	 ecx, 128		; 00000080H
$LN73@Visibility:
  00076	89 4e 38	 mov	 DWORD PTR [esi+56], ecx
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 600  : 		SpherePack *pack = mChildren;

  00079	8b 76 24	 mov	 esi, DWORD PTR [esi+36]

; 602  : 		while (pack)

  0007c	85 f6		 test	 esi, esi
  0007e	0f 84 8e 00 00
	00		 je	 $LN4@Visibility
$LL10@Visibility:

; 603  : 		{
; 604  : 			pack->VisibilityTest(f,callback,state);

  00084	57		 push	 edi
  00085	ff 75 0c	 push	 DWORD PTR _callback$[ebp]
  00088	8b ce		 mov	 ecx, esi
  0008a	53		 push	 ebx
  0008b	e8 00 00 00 00	 call	 ?VisibilityTest@SpherePack@@QAEXABVFrustum@@PAVSpherePackCallback@@W4ViewState@@@Z ; SpherePack::VisibilityTest
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 195  : 		return mNextSibling; 

  00090	8b 76 28	 mov	 esi, DWORD PTR [esi+40]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 602  : 		while (pack)

  00093	85 f6		 test	 esi, esi
  00095	75 ed		 jne	 SHORT $LL10@Visibility
  00097	5f		 pop	 edi
  00098	5e		 pop	 esi
  00099	5b		 pop	 ebx

; 635  : 			}
; 636  : 			break;
; 637  : 		}
; 638  : 		
; 639  : 	}
; 640  : }

  0009a	5d		 pop	 ebp
  0009b	c2 0c 00	 ret	 12			; 0000000cH
$LN17@Visibility:

; 605  : 			pack = pack->_GetNextSibling();
; 606  : 		}
; 607  : 		
; 608  : 	}
; 609  : 	else
; 610  : 	{
; 611  : 		switch (state)

  0009e	83 ef 00	 sub	 edi, 0
  000a1	74 4c		 je	 SHORT $LN5@Visibility
  000a3	4f		 dec	 edi
  000a4	74 27		 je	 SHORT $LN1@Visibility
  000a6	4f		 dec	 edi
  000a7	75 69		 jne	 SHORT $LN4@Visibility
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 133  : 		if ( mFlags & flag ) return true;

  000a9	f6 c1 40	 test	 cl, 64			; 00000040H
  000ac	75 64		 jne	 SHORT $LN4@Visibility

; 130  : 	void ClearSpherePackFlag(SpherePackFlag flag) { mFlags&=~flag; };

  000ae	81 e1 7f fe ff
	ff		 and	 ecx, -385		; fffffe7fH

; 129  : 	void SetSpherePackFlag(SpherePackFlag flag) { mFlags|=flag; };

  000b4	83 c9 40	 or	 ecx, 64			; 00000040H
  000b7	89 4e 38	 mov	 DWORD PTR [esi+56], ecx
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 618  : 				callback->VisibilityCallback(f,this,state);

  000ba	8b 4d 0c	 mov	 ecx, DWORD PTR _callback$[ebp]

; 619  : 			}
; 620  : 			break;
; 621  : 		case VS_OUTSIDE:
; 622  : 			if (!HasSpherePackFlag(SPF_HIDDEN))
; 623  : 			{
; 624  : 				ClearSpherePackFlag(SpherePackFlag(SPF_INSIDE | SPF_PARTIAL));
; 625  : 				SetSpherePackFlag(SPF_HIDDEN);
; 626  : 				callback->VisibilityCallback(f,this,state);

  000bd	6a 02		 push	 2
  000bf	56		 push	 esi
  000c0	53		 push	 ebx
  000c1	8b 01		 mov	 eax, DWORD PTR [ecx]
  000c3	ff 50 04	 call	 DWORD PTR [eax+4]
  000c6	5f		 pop	 edi
  000c7	5e		 pop	 esi
  000c8	5b		 pop	 ebx

; 635  : 			}
; 636  : 			break;
; 637  : 		}
; 638  : 		
; 639  : 	}
; 640  : }

  000c9	5d		 pop	 ebp
  000ca	c2 0c 00	 ret	 12			; 0000000cH
$LN1@Visibility:
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 130  : 	void ClearSpherePackFlag(SpherePackFlag flag) { mFlags&=~flag; };

  000cd	81 e1 bf fe ff
	ff		 and	 ecx, -321		; fffffebfH

; 129  : 	void SetSpherePackFlag(SpherePackFlag flag) { mFlags|=flag; };

  000d3	81 c9 80 00 00
	00		 or	 ecx, 128		; 00000080H
  000d9	89 4e 38	 mov	 DWORD PTR [esi+56], ecx
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 618  : 				callback->VisibilityCallback(f,this,state);

  000dc	8b 4d 0c	 mov	 ecx, DWORD PTR _callback$[ebp]

; 627  : 			}
; 628  : 			break;
; 629  : 		case VS_PARTIAL:
; 630  : 			//if (!HasSpherePackFlag(SPF_PARTIAL))
; 631  : 			{
; 632  : 				ClearSpherePackFlag(SpherePackFlag(SPF_INSIDE | SPF_HIDDEN));
; 633  : 				SetSpherePackFlag(SPF_PARTIAL);
; 634  : 				callback->VisibilityCallback(f,this,state);

  000df	6a 01		 push	 1
  000e1	56		 push	 esi
  000e2	53		 push	 ebx
  000e3	8b 01		 mov	 eax, DWORD PTR [ecx]
  000e5	ff 50 04	 call	 DWORD PTR [eax+4]
  000e8	5f		 pop	 edi
  000e9	5e		 pop	 esi
  000ea	5b		 pop	 ebx

; 635  : 			}
; 636  : 			break;
; 637  : 		}
; 638  : 		
; 639  : 	}
; 640  : }

  000eb	5d		 pop	 ebp
  000ec	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Visibility:
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 133  : 		if ( mFlags & flag ) return true;

  000ef	f7 c1 00 01 00
	00		 test	 ecx, 256		; 00000100H
  000f5	75 1b		 jne	 SHORT $LN4@Visibility

; 130  : 	void ClearSpherePackFlag(SpherePackFlag flag) { mFlags&=~flag; };

  000f7	81 e1 3f ff ff
	ff		 and	 ecx, -193		; ffffff3fH

; 129  : 	void SetSpherePackFlag(SpherePackFlag flag) { mFlags|=flag; };

  000fd	81 c9 00 01 00
	00		 or	 ecx, 256		; 00000100H
  00103	89 4e 38	 mov	 DWORD PTR [esi+56], ecx
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 618  : 				callback->VisibilityCallback(f,this,state);

  00106	8b 4d 0c	 mov	 ecx, DWORD PTR _callback$[ebp]
  00109	6a 00		 push	 0
  0010b	56		 push	 esi
  0010c	53		 push	 ebx
  0010d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0010f	ff 50 04	 call	 DWORD PTR [eax+4]
$LN4@Visibility:
  00112	5f		 pop	 edi
  00113	5e		 pop	 esi
  00114	5b		 pop	 ebx

; 635  : 			}
; 636  : 			break;
; 637  : 		}
; 638  : 		
; 639  : 	}
; 640  : }

  00115	5d		 pop	 ebp
  00116	c2 0c 00	 ret	 12			; 0000000cH
?VisibilityTest@SpherePack@@QAEXABVFrustum@@PAVSpherePackCallback@@W4ViewState@@@Z ENDP ; SpherePack::VisibilityTest
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ?ComputeBindingDistance@SpherePack@@QAEXPAV1@@Z
_TEXT	SEGMENT
_parent$ = 8						; size = 4
?ComputeBindingDistance@SpherePack@@QAEXPAV1@@Z PROC	; SpherePack::ComputeBindingDistance, COMDAT
; _this$ = ecx

; 240  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h

; 45   : 	float GetRadius(void) const { return mRadius; };

  00003	8b 45 08	 mov	 eax, DWORD PTR _parent$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	f3 0f 10 48 10	 movss	 xmm1, DWORD PTR [eax+16]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 241  : 		mBindingDistance = parent->GetRadius() - GetRadius();

  0000e	f3 0f 5c 49 10	 subss	 xmm1, DWORD PTR [ecx+16]

; 242  : 		if ( mBindingDistance <= 0 )

  00013	0f 2f c1	 comiss	 xmm0, xmm1
  00016	f3 0f 11 49 40	 movss	 DWORD PTR [ecx+64], xmm1
  0001b	72 0b		 jb	 SHORT $LN2@ComputeBin

; 243  : 			mBindingDistance = 0;

  0001d	c7 41 40 00 00
	00 00		 mov	 DWORD PTR [ecx+64], 0

; 246  : 	}

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
$LN2@ComputeBin:

; 244  : 		else
; 245  : 			mBindingDistance*=mBindingDistance;

  00028	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0002c	f3 0f 11 49 40	 movss	 DWORD PTR [ecx+64], xmm1

; 246  : 	}

  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
?ComputeBindingDistance@SpherePack@@QAEXPAV1@@Z ENDP	; SpherePack::ComputeBindingDistance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ?SetFifo2@SpherePack@@QAEXPAPAV1@@Z
_TEXT	SEGMENT
_fifo$ = 8						; size = 4
?SetFifo2@SpherePack@@QAEXPAPAV1@@Z PROC		; SpherePack::SetFifo2, COMDAT
; _this$ = ecx

; 235  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 236  : 		mFifo2 = fifo;

  00003	8b 45 08	 mov	 eax, DWORD PTR _fifo$[ebp]
  00006	89 41 34	 mov	 DWORD PTR [ecx+52], eax

; 237  : 	};

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetFifo2@SpherePack@@QAEXPAPAV1@@Z ENDP		; SpherePack::SetFifo2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ?SetFifo1@SpherePack@@QAEXPAPAV1@@Z
_TEXT	SEGMENT
_fifo$ = 8						; size = 4
?SetFifo1@SpherePack@@QAEXPAPAV1@@Z PROC		; SpherePack::SetFifo1, COMDAT
; _this$ = ecx

; 230  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 231  : 		mFifo1 = fifo;

  00003	8b 45 08	 mov	 eax, DWORD PTR _fifo$[ebp]
  00006	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 232  : 	};

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetFifo1@SpherePack@@QAEXPAPAV1@@Z ENDP		; SpherePack::SetFifo1
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ?GetChildCount@SpherePack@@QBEHXZ
_TEXT	SEGMENT
?GetChildCount@SpherePack@@QBEHXZ PROC			; SpherePack::GetChildCount, COMDAT
; _this$ = ecx

; 222  : 	int GetChildCount(void) const { return mChildCount; };

  00000	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  00003	c3		 ret	 0
?GetChildCount@SpherePack@@QBEHXZ ENDP			; SpherePack::GetChildCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
;	COMDAT ?Recompute@SpherePack@@QAE_NM@Z
_TEXT	SEGMENT
_oldpos$3$ = -20					; size = 4
_oldpos$2$ = -16					; size = 4
_oldpos$1$ = -12					; size = 4
tv588 = -8						; size = 4
_maxradius$2$ = -4					; size = 4
_gravy$ = 8						; size = 4
?Recompute@SpherePack@@QAE_NM@Z PROC			; SpherePack::Recompute, COMDAT
; _this$ = ecx

; 245  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	57		 push	 edi

; 246  : 	if (!mChildren) return true; // kill it!

  0000a	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0000d	85 c0		 test	 eax, eax
  0000f	75 0a		 jne	 SHORT $LN11@Recompute
  00011	b0 01		 mov	 al, 1

; 316  : }

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
$LN11@Recompute:
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 133  : 		if ( mFlags & flag ) return true;

  0001b	f6 46 38 08	 test	 BYTE PTR [esi+56], 8
  0001f	0f 85 8b 01 00
	00		 jne	 $LN83@Recompute
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 252  : 	int count=0;

  00025	0f 57 ed	 xorps	 xmm5, xmm5
  00028	33 c9		 xor	 ecx, ecx
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 37   : 		x = a;

  0002a	0f 28 e5	 movaps	 xmm4, xmm5

; 38   : 		y = b;

  0002d	0f 28 d5	 movaps	 xmm2, xmm5

; 39   : 		z = c;

  00030	0f 28 dd	 movaps	 xmm3, xmm5
  00033	eb 0b 8d a4 24
	00 00 00 00 8d
	64 24 00	 npad	 13
$LL9@Recompute:

; 58   : 	return(*this);  };
; 59   : 	
; 60   :     Vector3d operator + (const Vector3d& A) const     // ADDITION (+)
; 61   : 	{ Vector3d Sum(x+A.x, y+A.y, z+A.z);
; 62   : 	return(Sum); };
; 63   : 	
; 64   :     Vector3d operator - (const Vector3d& A) const     // SUBTRACTION (-)
; 65   : 	{ Vector3d Diff(x-A.x, y-A.y, z-A.z);
; 66   : 	return(Diff); };
; 67   : 	
; 68   :     Vector3d operator * (const float s) const       // MULTIPLY BY SCALAR (*)
; 69   : 	{ Vector3d Scaled(x*s, y*s, z*s);
; 70   : 	return(Scaled); };
; 71   : 	
; 72   :     Vector3d operator / (const float s) const       // DIVIDE BY SCALAR (/)
; 73   :     { 
; 74   : 		float r = 1.0f / s;
; 75   :         Vector3d Scaled(x*r, y*r, z*r);
; 76   :         return(Scaled); 
; 77   :     };
; 78   : 	
; 79   :     void operator += (const Vector3d A)             // ACCUMULATED VECTOR ADDITION (+=)
; 80   : 	{ x+=A.x; y+=A.y; z+=A.z; };

  00040	f3 0f 58 60 04	 addss	 xmm4, DWORD PTR [eax+4]
  00045	f3 0f 58 50 08	 addss	 xmm2, DWORD PTR [eax+8]
  0004a	f3 0f 58 58 0c	 addss	 xmm3, DWORD PTR [eax+12]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 195  : 		return mNextSibling; 

  0004f	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 257  : 		count++;

  00052	41		 inc	 ecx
  00053	85 c0		 test	 eax, eax
  00055	75 e9		 jne	 SHORT $LL9@Recompute

; 258  : 		pack = pack->_GetNextSibling();
; 259  : 	}
; 260  : 	
; 261  : 	if (count)

  00057	85 c9		 test	 ecx, ecx
  00059	0f 84 4d 01 00
	00		 je	 $LN1@Recompute

; 262  : 	{
; 263  : 		float recip = 1.0f / float(count);

  0005f	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00067	66 0f 6e c1	 movd	 xmm0, ecx
  0006b	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0006e	f3 0f 5e c8	 divss	 xmm1, xmm0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 30   : 		x = a.x;

  00072	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]

; 81   :     void operator -= (const Vector3d A)             // ACCUMULATED VECTOR SUBTRACTION (+=)
; 82   : 	{ x-=A.x; y-=A.y; z-=A.z; };
; 83   :     void operator *= (const float s)        // ACCUMULATED SCALAR MULTIPLICATION (*=) (bpc 4/24/2000)
; 84   : 	{x*=s; y*=s; z*=s;}

  00077	f3 0f 59 e1	 mulss	 xmm4, xmm1
  0007b	f3 0f 59 d1	 mulss	 xmm2, xmm1
  0007f	f3 0f 59 d9	 mulss	 xmm3, xmm1
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 272  : 		float maxradius = 0;

  00083	0f 28 cd	 movaps	 xmm1, xmm5
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 30   : 		x = a.x;

  00086	f3 0f 11 45 f4	 movss	 DWORD PTR _oldpos$1$[ebp], xmm0

; 31   : 		y = a.y;

  0008b	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  00090	f3 0f 11 45 f0	 movss	 DWORD PTR _oldpos$2$[ebp], xmm0

; 32   : 		z = a.z;

  00095	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  0009a	f3 0f 11 66 04	 movss	 DWORD PTR [esi+4], xmm4
  0009f	f3 0f 11 56 08	 movss	 DWORD PTR [esi+8], xmm2
  000a4	f3 0f 11 5e 0c	 movss	 DWORD PTR [esi+12], xmm3
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 274  : 		pack = mChildren;

  000a9	8b 7e 24	 mov	 edi, DWORD PTR [esi+36]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 32   : 		z = a.z;

  000ac	f3 0f 11 45 ec	 movss	 DWORD PTR _oldpos$3$[ebp], xmm0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 272  : 		float maxradius = 0;

  000b1	f3 0f 11 4d fc	 movss	 DWORD PTR _maxradius$2$[ebp], xmm1

; 276  : 		while (pack)

  000b6	85 ff		 test	 edi, edi
  000b8	74 7f		 je	 SHORT $LN81@Recompute
  000ba	8d 9b 00 00 00
	00		 npad	 6
$LL6@Recompute:
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 170  : 		float dx = a.x - x;

  000c0	f3 0f 10 4f 04	 movss	 xmm1, DWORD PTR [edi+4]
; File a:\vs\vc\include\math.h

; 775  :     return (float)sqrt(_X);

  000c5	83 ec 08	 sub	 esp, 8
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 171  : 		float dy = a.y - y;

  000c8	f3 0f 10 57 08	 movss	 xmm2, DWORD PTR [edi+8]
  000cd	f3 0f 5c 56 08	 subss	 xmm2, DWORD PTR [esi+8]
  000d2	f3 0f 5c 4e 04	 subss	 xmm1, DWORD PTR [esi+4]

; 172  : 		float dz = a.z - z;

  000d7	f3 0f 10 47 0c	 movss	 xmm0, DWORD PTR [edi+12]
  000dc	f3 0f 5c 46 0c	 subss	 xmm0, DWORD PTR [esi+12]

; 173  : 		return dx*dx + dy*dy + dz*dz;

  000e1	f3 0f 59 d2	 mulss	 xmm2, xmm2
  000e5	f3 0f 59 c9	 mulss	 xmm1, xmm1
  000e9	f3 0f 59 c0	 mulss	 xmm0, xmm0
  000ed	f3 0f 58 d1	 addss	 xmm2, xmm1
  000f1	f3 0f 58 d0	 addss	 xmm2, xmm0
; File a:\vs\vc\include\math.h

; 775  :     return (float)sqrt(_X);

  000f5	0f 5a c2	 cvtps2pd xmm0, xmm2
  000f8	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000fd	e8 00 00 00 00	 call	 _sqrt
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 280  : 			if (radius > maxradius)

  00102	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _maxradius$2$[ebp]
; File a:\vs\vc\include\math.h

; 775  :     return (float)sqrt(_X);

  00107	83 c4 08	 add	 esp, 8
  0010a	d9 5d f8	 fstp	 DWORD PTR tv588[ebp]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 279  : 			float radius = sqrtf(dist) + pack->GetRadius();

  0010d	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR tv588[ebp]
  00112	f3 0f 58 47 10	 addss	 xmm0, DWORD PTR [edi+16]

; 280  : 			if (radius > maxradius)

  00117	0f 2f c1	 comiss	 xmm0, xmm1
  0011a	76 13		 jbe	 SHORT $LN3@Recompute

; 281  : 			{
; 282  : 				maxradius = radius;

  0011c	0f 28 c8	 movaps	 xmm1, xmm0

; 283  : 				if ((maxradius+gravy) >= GetRadius())

  0011f	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _gravy$[ebp]
  00124	f3 0f 11 4d fc	 movss	 DWORD PTR _maxradius$2$[ebp], xmm1
  00129	0f 2f 46 10	 comiss	 xmm0, DWORD PTR [esi+16]
  0012d	73 41		 jae	 SHORT $LN70@Recompute
$LN3@Recompute:
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 195  : 		return mNextSibling; 

  0012f	8b 7f 28	 mov	 edi, DWORD PTR [edi+40]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 276  : 		while (pack)

  00132	85 ff		 test	 edi, edi
  00134	75 8a		 jne	 SHORT $LL6@Recompute
  00136	0f 57 ed	 xorps	 xmm5, xmm5
$LN81@Recompute:

; 284  : 				{
; 285  : #ifdef __STATIC_RANGE__
; 286  : 					assert(oldpos.IsInStaticRange());
; 287  : #endif
; 288  : 					mCenter = oldpos;
; 289  : 					ClearSpherePackFlag(SPF_RECOMPUTE);
; 290  : 					return false;
; 291  : 				}
; 292  : 			}
; 293  : 			pack = pack->_GetNextSibling();
; 294  : 		}
; 295  : 		
; 296  : 		maxradius+=gravy;

  00139	f3 0f 58 4d 08	 addss	 xmm1, DWORD PTR _gravy$[ebp]

; 297  : 		
; 298  : 		SetRadius(maxradius);
; 299  : 		
; 300  : 		// now all children have to recompute binding distance!!
; 301  : 		pack = mChildren;

  0013e	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h

; 67   : 		mRadius = radius;

  00141	f3 0f 11 4e 10	 movss	 DWORD PTR [esi+16], xmm1

; 68   : 		mRadius2 = radius*radius;

  00146	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0014a	f3 0f 11 4e 14	 movss	 DWORD PTR [esi+20], xmm1
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 303  : 		while (pack)

  0014f	85 c0		 test	 eax, eax
  00151	74 59		 je	 SHORT $LN1@Recompute
$LL2@Recompute:
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h

; 45   : 	float GetRadius(void) const { return mRadius; };

  00153	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 241  : 		mBindingDistance = parent->GetRadius() - GetRadius();

  00158	f3 0f 5c 40 10	 subss	 xmm0, DWORD PTR [eax+16]

; 242  : 		if ( mBindingDistance <= 0 )

  0015d	0f 2f e8	 comiss	 xmm5, xmm0
  00160	f3 0f 11 40 40	 movss	 DWORD PTR [eax+64], xmm0
  00165	72 35		 jb	 SHORT $LN56@Recompute

; 243  : 			mBindingDistance = 0;

  00167	c7 40 40 00 00
	00 00		 mov	 DWORD PTR [eax+64], 0

; 244  : 		else

  0016e	eb 35		 jmp	 SHORT $LN55@Recompute
$LN70@Recompute:
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  00170	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _oldpos$1$[ebp]
  00175	f3 0f 11 46 04	 movss	 DWORD PTR [esi+4], xmm0
  0017a	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _oldpos$2$[ebp]
  0017f	f3 0f 11 46 08	 movss	 DWORD PTR [esi+8], xmm0
  00184	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _oldpos$3$[ebp]
  00189	f3 0f 11 46 0c	 movss	 DWORD PTR [esi+12], xmm0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 130  : 	void ClearSpherePackFlag(SpherePackFlag flag) { mFlags&=~flag; };

  0018e	83 66 38 ef	 and	 DWORD PTR [esi+56], -17	; ffffffefH
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 315  : 	return false;

  00192	32 c0		 xor	 al, al

; 316  : }

  00194	5f		 pop	 edi
  00195	5e		 pop	 esi
  00196	8b e5		 mov	 esp, ebp
  00198	5d		 pop	 ebp
  00199	c2 04 00	 ret	 4
$LN56@Recompute:
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 245  : 			mBindingDistance*=mBindingDistance;

  0019c	f3 0f 59 c0	 mulss	 xmm0, xmm0
  001a0	f3 0f 11 40 40	 movss	 DWORD PTR [eax+64], xmm0
$LN55@Recompute:

; 195  : 		return mNextSibling; 

  001a5	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 303  : 		while (pack)

  001a8	85 c0		 test	 eax, eax
  001aa	75 a7		 jne	 SHORT $LL2@Recompute
$LN1@Recompute:
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 130  : 	void ClearSpherePackFlag(SpherePackFlag flag) { mFlags&=~flag; };

  001ac	83 66 38 ef	 and	 DWORD PTR [esi+56], -17	; ffffffefH
$LN83@Recompute:
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 316  : }

  001b0	5f		 pop	 edi
  001b1	32 c0		 xor	 al, al
  001b3	5e		 pop	 esi
  001b4	8b e5		 mov	 esp, ebp
  001b6	5d		 pop	 ebp
  001b7	c2 04 00	 ret	 4
?Recompute@SpherePack@@QAE_NM@Z ENDP			; SpherePack::Recompute
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ?GetPos@SpherePack@@QBEABVVector3d@@XZ
_TEXT	SEGMENT
?GetPos@SpherePack@@QBEABVVector3d@@XZ PROC		; SpherePack::GetPos, COMDAT
; _this$ = ecx

; 216  : 	const Vector3d& GetPos(void) const { return mCenter; };

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetPos@SpherePack@@QBEABVVector3d@@XZ ENDP		; SpherePack::GetPos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
;	COMDAT ?LostChild@SpherePack@@QAEXPAV1@@Z
_TEXT	SEGMENT
_t$ = 8							; size = 4
?LostChild@SpherePack@@QAEXPAV1@@Z PROC			; SpherePack::LostChild, COMDAT
; _this$ = ecx

; 320  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 199  : 		return mPrevSibling; 

  00003	8b 45 08	 mov	 eax, DWORD PTR _t$[ebp]
  00006	8b 50 2c	 mov	 edx, DWORD PTR [eax+44]

; 192  : 	
; 193  : 	SpherePack * _GetNextSibling(void) const 
; 194  : 	{ 
; 195  : 		return mNextSibling; 

  00009	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 344  : 	if (prev)

  0000c	85 d2		 test	 edx, edx
  0000e	74 0c		 je	 SHORT $LN5@LostChild
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 190  : 	void SetNextSibling(SpherePack *child) { mNextSibling = child; }

  00010	89 42 28	 mov	 DWORD PTR [edx+40], eax
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 348  : 		if (next) next->SetPrevSibling(prev);

  00013	85 c0		 test	 eax, eax
  00015	74 13		 je	 SHORT $LN18@LostChild
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 191  : 	void SetPrevSibling(SpherePack *child) { mPrevSibling = child; }

  00017	89 50 2c	 mov	 DWORD PTR [eax+44], edx
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 351  : 	else

  0001a	eb 0e		 jmp	 SHORT $LN18@LostChild
$LN5@LostChild:

; 352  : 	{
; 353  : 		SpherePack *next = t->_GetNextSibling();
; 354  : 		mChildren = next;

  0001c	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 355  : 		if (mChildren) mChildren->SetPrevSibling(0);

  0001f	85 c0		 test	 eax, eax
  00021	74 07		 je	 SHORT $LN18@LostChild
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 191  : 	void SetPrevSibling(SpherePack *child) { mPrevSibling = child; }

  00023	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0
$LN18@LostChild:
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 358  : 	mChildCount--;

  0002a	ff 49 3c	 dec	 DWORD PTR [ecx+60]

; 359  : 	
; 360  : 	if (!mChildCount && HasSpherePackFlag(SPF_SUPERSPHERE))

  0002d	75 12		 jne	 SHORT $LN1@LostChild
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 133  : 		if ( mFlags & flag ) return true;

  0002f	f6 41 38 01	 test	 BYTE PTR [ecx+56], 1
  00033	74 0c		 je	 SHORT $LN1@LostChild
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 362  : 		mFactory->Remove(this);

  00035	89 4d 08	 mov	 DWORD PTR _t$[ebp], ecx
  00038	8b 49 48	 mov	 ecx, DWORD PTR [ecx+72]

; 363  : 	}
; 364  : }

  0003b	5d		 pop	 ebp

; 362  : 		mFactory->Remove(this);

  0003c	e9 00 00 00 00	 jmp	 ?Remove@SpherePackFactory@@QAEXPAVSpherePack@@@Z ; SpherePackFactory::Remove
$LN1@LostChild:

; 363  : 	}
; 364  : }

  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
?LostChild@SpherePack@@QAEXPAV1@@Z ENDP			; SpherePack::LostChild
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ?DistanceSquared@SpherePack@@QBEMPBV1@@Z
_TEXT	SEGMENT
tv185 = 8						; size = 4
_pack$ = 8						; size = 4
?DistanceSquared@SpherePack@@QBEMPBV1@@Z PROC		; SpherePack::DistanceSquared, COMDAT
; _this$ = ecx

; 212  : 	float DistanceSquared(const SpherePack *pack) const { return mCenter.DistanceSq( pack->mCenter );  };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _pack$[ebp]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 170  : 		float dx = a.x - x;

  00006	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]

; 171  : 		float dy = a.y - y;

  0000b	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  00010	f3 0f 5c 51 08	 subss	 xmm2, DWORD PTR [ecx+8]
  00015	f3 0f 5c 49 04	 subss	 xmm1, DWORD PTR [ecx+4]

; 172  : 		float dz = a.z - z;

  0001a	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  0001f	f3 0f 5c 41 0c	 subss	 xmm0, DWORD PTR [ecx+12]

; 173  : 		return dx*dx + dy*dy + dz*dz;

  00024	f3 0f 59 d2	 mulss	 xmm2, xmm2
  00028	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0002c	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00030	f3 0f 58 d1	 addss	 xmm2, xmm1
  00034	f3 0f 58 d0	 addss	 xmm2, xmm0
  00038	f3 0f 11 55 08	 movss	 DWORD PTR tv185[ebp], xmm2
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 212  : 	float DistanceSquared(const SpherePack *pack) const { return mCenter.DistanceSq( pack->mCenter );  };

  0003d	d9 45 08	 fld	 DWORD PTR tv185[ebp]
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
?DistanceSquared@SpherePack@@QBEMPBV1@@Z ENDP		; SpherePack::DistanceSquared
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ?SetUserData@SpherePack@@QAEXPAX_N@Z
_TEXT	SEGMENT
_data$ = 8						; size = 4
_isSphere$ = 12						; size = 1
?SetUserData@SpherePack@@QAEXPAX_N@Z PROC		; SpherePack::SetUserData, COMDAT
; _this$ = ecx

; 210  : 	void   SetUserData(void *data, bool isSphere) { mUserData = data; IS_SPHERE=isSphere;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  00006	89 41 44	 mov	 DWORD PTR [ecx+68], eax
  00009	8a 45 0c	 mov	 al, BYTE PTR _isSphere$[ebp]
  0000c	88 41 4c	 mov	 BYTE PTR [ecx+76], al
  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?SetUserData@SpherePack@@QAEXPAX_N@Z ENDP		; SpherePack::SetUserData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ?GetUserData@SpherePack@@QBEPAXXZ
_TEXT	SEGMENT
?GetUserData@SpherePack@@QBEPAXXZ PROC			; SpherePack::GetUserData, COMDAT
; _this$ = ecx

; 209  : 	void * GetUserData(void) const { return mUserData; };

  00000	8b 41 44	 mov	 eax, DWORD PTR [ecx+68]
  00003	c3		 ret	 0
?GetUserData@SpherePack@@QBEPAXXZ ENDP			; SpherePack::GetUserData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ?SetPrevious@SpherePack@@QAEXPAV1@@Z
_TEXT	SEGMENT
_pack$ = 8						; size = 4
?SetPrevious@SpherePack@@QAEXPAV1@@Z PROC		; SpherePack::SetPrevious, COMDAT
; _this$ = ecx

; 207  : 	void SetPrevious(SpherePack *pack) { mPrevious = pack; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _pack$[ebp]
  00006	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetPrevious@SpherePack@@QAEXPAV1@@Z ENDP		; SpherePack::SetPrevious
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ?SetNext@SpherePack@@QAEXPAV1@@Z
_TEXT	SEGMENT
_pack$ = 8						; size = 4
?SetNext@SpherePack@@QAEXPAV1@@Z PROC			; SpherePack::SetNext, COMDAT
; _this$ = ecx

; 206  : 	void SetNext(SpherePack *pack) { mNext = pack; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _pack$[ebp]
  00006	89 41 18	 mov	 DWORD PTR [ecx+24], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetNext@SpherePack@@QAEXPAV1@@Z ENDP			; SpherePack::SetNext
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ?GetPrevious@SpherePack@@QBEPAV1@XZ
_TEXT	SEGMENT
?GetPrevious@SpherePack@@QBEPAV1@XZ PROC		; SpherePack::GetPrevious, COMDAT
; _this$ = ecx

; 204  : 	SpherePack * GetPrevious(void) const { return mPrevious; };

  00000	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00003	c3		 ret	 0
?GetPrevious@SpherePack@@QBEPAV1@XZ ENDP		; SpherePack::GetPrevious
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ?GetNext@SpherePack@@QBEPAV1@XZ
_TEXT	SEGMENT
?GetNext@SpherePack@@QBEPAV1@XZ PROC			; SpherePack::GetNext, COMDAT
; _this$ = ecx

; 203  : 	SpherePack * GetNext(void)     const { return mNext; };

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00003	c3		 ret	 0
?GetNext@SpherePack@@QBEPAV1@XZ ENDP			; SpherePack::GetNext
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ?GetChildren@SpherePack@@QBEPAV1@XZ
_TEXT	SEGMENT
?GetChildren@SpherePack@@QBEPAV1@XZ PROC		; SpherePack::GetChildren, COMDAT
; _this$ = ecx

; 201  : 	SpherePack * GetChildren(void)    const { return mChildren; }

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00003	c3		 ret	 0
?GetChildren@SpherePack@@QBEPAV1@XZ ENDP		; SpherePack::GetChildren
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ?_GetPrevSibling@SpherePack@@QBEPAV1@XZ
_TEXT	SEGMENT
?_GetPrevSibling@SpherePack@@QBEPAV1@XZ PROC		; SpherePack::_GetPrevSibling, COMDAT
; _this$ = ecx

; 199  : 		return mPrevSibling; 

  00000	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]

; 200  : 	}

  00003	c3		 ret	 0
?_GetPrevSibling@SpherePack@@QBEPAV1@XZ ENDP		; SpherePack::_GetPrevSibling
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ?_GetNextSibling@SpherePack@@QBEPAV1@XZ
_TEXT	SEGMENT
?_GetNextSibling@SpherePack@@QBEPAV1@XZ PROC		; SpherePack::_GetNextSibling, COMDAT
; _this$ = ecx

; 195  : 		return mNextSibling; 

  00000	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]

; 196  : 	}

  00003	c3		 ret	 0
?_GetNextSibling@SpherePack@@QBEPAV1@XZ ENDP		; SpherePack::_GetNextSibling
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ?SetPrevSibling@SpherePack@@QAEXPAV1@@Z
_TEXT	SEGMENT
_child$ = 8						; size = 4
?SetPrevSibling@SpherePack@@QAEXPAV1@@Z PROC		; SpherePack::SetPrevSibling, COMDAT
; _this$ = ecx

; 191  : 	void SetPrevSibling(SpherePack *child) { mPrevSibling = child; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _child$[ebp]
  00006	89 41 2c	 mov	 DWORD PTR [ecx+44], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetPrevSibling@SpherePack@@QAEXPAV1@@Z ENDP		; SpherePack::SetPrevSibling
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ?SetNextSibling@SpherePack@@QAEXPAV1@@Z
_TEXT	SEGMENT
_child$ = 8						; size = 4
?SetNextSibling@SpherePack@@QAEXPAV1@@Z PROC		; SpherePack::SetNextSibling, COMDAT
; _this$ = ecx

; 190  : 	void SetNextSibling(SpherePack *child) { mNextSibling = child; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _child$[ebp]
  00006	89 41 28	 mov	 DWORD PTR [ecx+40], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetNextSibling@SpherePack@@QAEXPAV1@@Z ENDP		; SpherePack::SetNextSibling
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ?AddChild@SpherePack@@QAEXPAV1@@Z
_TEXT	SEGMENT
_pack$ = 8						; size = 4
?AddChild@SpherePack@@QAEXPAV1@@Z PROC			; SpherePack::AddChild, COMDAT
; _this$ = ecx

; 169  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 170  : 		
; 171  : 		SpherePack *my_child = mChildren;
; 172  : 		mChildren = pack; // new head of list

  00003	8b 45 08	 mov	 eax, DWORD PTR _pack$[ebp]
  00006	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00009	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 189  : 	
; 190  : 	void SetNextSibling(SpherePack *child) { mNextSibling = child; }

  0000c	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 191  : 	void SetPrevSibling(SpherePack *child) { mPrevSibling = child; }

  0000f	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0

; 138  : 	void SetParent(SpherePack *pack) { mParent = pack; };

  00016	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 173  : 		
; 174  : 		pack->SetNextSibling(my_child); // his next is my old next
; 175  : 		pack->SetPrevSibling(0); // at head of list, no previous
; 176  : 		pack->SetParent(this);
; 177  : 		
; 178  : 		if ( my_child ) my_child->SetPrevSibling(pack); // previous now this..

  00019	85 d2		 test	 edx, edx
  0001b	74 03		 je	 SHORT $LN12@AddChild

; 191  : 	void SetPrevSibling(SpherePack *child) { mPrevSibling = child; }

  0001d	89 42 2c	 mov	 DWORD PTR [edx+44], eax
$LN12@AddChild:

; 179  : 		
; 180  : 		mChildCount++;

  00020	ff 41 3c	 inc	 DWORD PTR [ecx+60]

; 181  : 
; 182  : #if defined(_DEBUG)
; 183  : 		float dist = DistanceSquared(pack);
; 184  : 		float radius = sqrtf(dist) + pack->GetRadius();
; 185  : 		
; 186  : 		assert( radius <= GetRadius()+0.0001f );
; 187  : #endif
; 188  : 	}

  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
?AddChild@SpherePack@@QAEXPAV1@@Z ENDP			; SpherePack::AddChild
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ?Unlink@SpherePack@@QAEXXZ
_TEXT	SEGMENT
?Unlink@SpherePack@@QAEXXZ PROC				; SpherePack::Unlink, COMDAT
; _this$ = ecx

; 147  : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 148  : 		if ( mFifo1 ) // if we belong to fifo1, null us out

  00003	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN3@Unlink

; 149  : 		{
; 150  : 			*mFifo1 = 0;

  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 151  : 			mFifo1 = 0;

  00010	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
$LN3@Unlink:

; 152  : 		}
; 153  : 		
; 154  : 		if ( mFifo2 ) // if we belong to fifo2, null us out

  00017	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  0001a	85 c0		 test	 eax, eax
  0001c	74 0d		 je	 SHORT $LN2@Unlink

; 155  : 		{
; 156  : 			*mFifo2 = 0;

  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 157  : 			mFifo2 = 0;

  00024	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0
$LN2@Unlink:

; 158  : 		}
; 159  : 		
; 160  : 		if ( mParent ) mParent->LostChild(this);

  0002b	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  0002e	85 c9		 test	 ecx, ecx
  00030	74 3b		 je	 SHORT $LN30@Unlink

; 196  : 	}
; 197  : 	SpherePack * _GetPrevSibling(void) const 
; 198  : 	{ 
; 199  : 		return mPrevSibling; 

  00032	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 344  : 	if (prev)

  00035	85 c0		 test	 eax, eax
  00037	74 0f		 je	 SHORT $LN10@Unlink
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 195  : 		return mNextSibling; 

  00039	8b 56 28	 mov	 edx, DWORD PTR [esi+40]

; 166  : 	
; 167  : 	
; 168  : 	void AddChild(SpherePack *pack)
; 169  : 	{
; 170  : 		
; 171  : 		SpherePack *my_child = mChildren;
; 172  : 		mChildren = pack; // new head of list
; 173  : 		
; 174  : 		pack->SetNextSibling(my_child); // his next is my old next
; 175  : 		pack->SetPrevSibling(0); // at head of list, no previous
; 176  : 		pack->SetParent(this);
; 177  : 		
; 178  : 		if ( my_child ) my_child->SetPrevSibling(pack); // previous now this..
; 179  : 		
; 180  : 		mChildCount++;
; 181  : 
; 182  : #if defined(_DEBUG)
; 183  : 		float dist = DistanceSquared(pack);
; 184  : 		float radius = sqrtf(dist) + pack->GetRadius();
; 185  : 		
; 186  : 		assert( radius <= GetRadius()+0.0001f );
; 187  : #endif
; 188  : 	}
; 189  : 	
; 190  : 	void SetNextSibling(SpherePack *child) { mNextSibling = child; }

  0003c	89 50 28	 mov	 DWORD PTR [eax+40], edx
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 348  : 		if (next) next->SetPrevSibling(prev);

  0003f	85 d2		 test	 edx, edx
  00041	74 16		 je	 SHORT $LN23@Unlink
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 191  : 	void SetPrevSibling(SpherePack *child) { mPrevSibling = child; }

  00043	89 42 2c	 mov	 DWORD PTR [edx+44], eax
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 351  : 	else

  00046	eb 11		 jmp	 SHORT $LN23@Unlink
$LN10@Unlink:

; 352  : 	{
; 353  : 		SpherePack *next = t->_GetNextSibling();
; 354  : 		mChildren = next;

  00048	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0004b	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 355  : 		if (mChildren) mChildren->SetPrevSibling(0);

  0004e	85 c0		 test	 eax, eax
  00050	74 07		 je	 SHORT $LN23@Unlink
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 191  : 	void SetPrevSibling(SpherePack *child) { mPrevSibling = child; }

  00052	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0
$LN23@Unlink:
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 358  : 	mChildCount--;

  00059	ff 49 3c	 dec	 DWORD PTR [ecx+60]

; 359  : 	
; 360  : 	if (!mChildCount && HasSpherePackFlag(SPF_SUPERSPHERE))

  0005c	75 0f		 jne	 SHORT $LN30@Unlink
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 133  : 		if ( mFlags & flag ) return true;

  0005e	f6 41 38 01	 test	 BYTE PTR [ecx+56], 1
  00062	74 09		 je	 SHORT $LN30@Unlink
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.cpp

; 362  : 		mFactory->Remove(this);

  00064	51		 push	 ecx
  00065	8b 49 48	 mov	 ecx, DWORD PTR [ecx+72]
  00068	e8 00 00 00 00	 call	 ?Remove@SpherePackFactory@@QAEXPAVSpherePack@@@Z ; SpherePackFactory::Remove
$LN30@Unlink:
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 164  : 		mParent = 0; // got no father anymore

  0006d	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  00074	5e		 pop	 esi

; 165  : 	}

  00075	c3		 ret	 0
?Unlink@SpherePack@@QAEXXZ ENDP				; SpherePack::Unlink
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ?NewPosRadius@SpherePack@@QAEXABVVector3d@@M@Z
_TEXT	SEGMENT
_pos$ = 8						; size = 4
_radius$ = 12						; size = 4
?NewPosRadius@SpherePack@@QAEXABVVector3d@@M@Z PROC	; SpherePack::NewPosRadius, COMDAT
; _this$ = ecx

; 470  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  00003	8b 55 08	 mov	 edx, DWORD PTR _pos$[ebp]
  00006	56		 push	 esi
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 470  : {

  00007	8b f1		 mov	 esi, ecx
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  00009	8b 02		 mov	 eax, DWORD PTR [edx]
  0000b	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0000e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00011	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00014	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00017	89 46 0c	 mov	 DWORD PTR [esi+12], eax
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 474  : 	if (mParent && !HasSpherePackFlag(SPF_INTEGRATE))

  0001a	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  0001d	85 c9		 test	 ecx, ecx
  0001f	0f 84 a6 00 00
	00		 je	 $LN1@NewPosRadi

; 133  : 		if ( mFlags & flag ) return true;

  00025	f6 46 38 20	 test	 BYTE PTR [esi+56], 32	; 00000020H
  00029	0f 85 9c 00 00
	00		 jne	 $LN1@NewPosRadi

; 475  : 	{
; 476  : 		if (radius != GetRadius())

  0002f	f3 0f 10 55 0c	 movss	 xmm2, DWORD PTR _radius$[ebp]
  00034	0f 2e 56 10	 ucomiss xmm2, DWORD PTR [esi+16]
  00038	9f		 lahf
  00039	f6 c4 44	 test	 ah, 68			; 00000044H
  0003c	7b 39		 jnp	 SHORT $LN15@NewPosRadi
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h

; 68   : 		mRadius2 = radius*radius;

  0003e	0f 28 c2	 movaps	 xmm0, xmm2
  00041	f3 0f 11 56 10	 movss	 DWORD PTR [esi+16], xmm2
  00046	f3 0f 59 c2	 mulss	 xmm0, xmm2
  0004a	f3 0f 11 46 14	 movss	 DWORD PTR [esi+20], xmm0
  0004f	0f 57 c0	 xorps	 xmm0, xmm0

; 45   : 	float GetRadius(void) const { return mRadius; };

  00052	f3 0f 10 49 10	 movss	 xmm1, DWORD PTR [ecx+16]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 241  : 		mBindingDistance = parent->GetRadius() - GetRadius();

  00057	f3 0f 5c ca	 subss	 xmm1, xmm2

; 242  : 		if ( mBindingDistance <= 0 )

  0005b	0f 2f c1	 comiss	 xmm0, xmm1
  0005e	f3 0f 11 4e 40	 movss	 DWORD PTR [esi+64], xmm1
  00063	72 09		 jb	 SHORT $LN16@NewPosRadi

; 243  : 			mBindingDistance = 0;

  00065	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0

; 244  : 		else

  0006c	eb 09		 jmp	 SHORT $LN15@NewPosRadi
$LN16@NewPosRadi:

; 245  : 			mBindingDistance*=mBindingDistance;

  0006e	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00072	f3 0f 11 4e 40	 movss	 DWORD PTR [esi+64], xmm1
$LN15@NewPosRadi:

; 477  : 		{
; 478  : 			SetRadius(radius);
; 479  : 			ComputeBindingDistance(mParent);
; 480  : 		}
; 481  : 		
; 482  : 		mFactory->AddRecompute(mParent);

  00077	51		 push	 ecx
  00078	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  0007b	e8 00 00 00 00	 call	 ?AddRecompute@SpherePackFactory@@QAEXPAVSpherePack@@@Z ; SpherePackFactory::AddRecompute

; 134  : 		return false;
; 135  : 	};
; 136  : 	
; 137  : 	
; 138  : 	void SetParent(SpherePack *pack) { mParent = pack; };
; 139  : 	SpherePack * GetParent(void) const { return mParent; };
; 140  : 	
; 141  : 	// Sphere has a new position.
; 142  : 	inline void NewPos(const Vector3d &pos);
; 143  : 	// Sphere has a new position and radius
; 144  : 	inline void NewPosRadius(const Vector3d &pos,float radius);
; 145  : 	
; 146  : 	void Unlink(void)
; 147  : 	{
; 148  : 		if ( mFifo1 ) // if we belong to fifo1, null us out
; 149  : 		{
; 150  : 			*mFifo1 = 0;
; 151  : 			mFifo1 = 0;
; 152  : 		}
; 153  : 		
; 154  : 		if ( mFifo2 ) // if we belong to fifo2, null us out
; 155  : 		{
; 156  : 			*mFifo2 = 0;
; 157  : 			mFifo2 = 0;
; 158  : 		}
; 159  : 		
; 160  : 		if ( mParent ) mParent->LostChild(this);
; 161  : 		
; 162  : 		assert( !mChildren ); // can't unlink guys with children!
; 163  : 		
; 164  : 		mParent = 0; // got no father anymore
; 165  : 	}
; 166  : 	
; 167  : 	
; 168  : 	void AddChild(SpherePack *pack)
; 169  : 	{
; 170  : 		
; 171  : 		SpherePack *my_child = mChildren;
; 172  : 		mChildren = pack; // new head of list
; 173  : 		
; 174  : 		pack->SetNextSibling(my_child); // his next is my old next
; 175  : 		pack->SetPrevSibling(0); // at head of list, no previous
; 176  : 		pack->SetParent(this);
; 177  : 		
; 178  : 		if ( my_child ) my_child->SetPrevSibling(pack); // previous now this..
; 179  : 		
; 180  : 		mChildCount++;
; 181  : 
; 182  : #if defined(_DEBUG)
; 183  : 		float dist = DistanceSquared(pack);
; 184  : 		float radius = sqrtf(dist) + pack->GetRadius();
; 185  : 		
; 186  : 		assert( radius <= GetRadius()+0.0001f );
; 187  : #endif
; 188  : 	}
; 189  : 	
; 190  : 	void SetNextSibling(SpherePack *child) { mNextSibling = child; }
; 191  : 	void SetPrevSibling(SpherePack *child) { mPrevSibling = child; }
; 192  : 	
; 193  : 	SpherePack * _GetNextSibling(void) const 
; 194  : 	{ 
; 195  : 		return mNextSibling; 
; 196  : 	}
; 197  : 	SpherePack * _GetPrevSibling(void) const 
; 198  : 	{ 
; 199  : 		return mPrevSibling; 
; 200  : 	}
; 201  : 	SpherePack * GetChildren(void)    const { return mChildren; }
; 202  : 	
; 203  : 	SpherePack * GetNext(void)     const { return mNext; };
; 204  : 	SpherePack * GetPrevious(void) const { return mPrevious; };
; 205  : 	
; 206  : 	void SetNext(SpherePack *pack) { mNext = pack; };
; 207  : 	void SetPrevious(SpherePack *pack) { mPrevious = pack; };
; 208  : 	
; 209  : 	void * GetUserData(void) const { return mUserData; };
; 210  : 	void   SetUserData(void *data, bool isSphere) { mUserData = data; IS_SPHERE=isSphere;};
; 211  : 	
; 212  : 	float DistanceSquared(const SpherePack *pack) const { return mCenter.DistanceSq( pack->mCenter );  };

  00080	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 170  : 		float dx = a.x - x;

  00083	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]

; 171  : 		float dy = a.y - y;

  00088	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  0008d	f3 0f 5c 56 08	 subss	 xmm2, DWORD PTR [esi+8]
  00092	f3 0f 5c 4e 04	 subss	 xmm1, DWORD PTR [esi+4]

; 172  : 		float dz = a.z - z;

  00097	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  0009c	f3 0f 5c 46 0c	 subss	 xmm0, DWORD PTR [esi+12]

; 173  : 		return dx*dx + dy*dy + dz*dz;

  000a1	f3 0f 59 d2	 mulss	 xmm2, xmm2
  000a5	f3 0f 59 c9	 mulss	 xmm1, xmm1
  000a9	f3 0f 59 c0	 mulss	 xmm0, xmm0
  000ad	f3 0f 58 d1	 addss	 xmm2, xmm1
  000b1	f3 0f 58 d0	 addss	 xmm2, xmm0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 486  : 		if (dist >= mBindingDistance)

  000b5	0f 2f 56 40	 comiss	 xmm2, DWORD PTR [esi+64]
  000b9	72 10		 jb	 SHORT $LN1@NewPosRadi

; 487  : 		{
; 488  : 			Unlink();

  000bb	8b ce		 mov	 ecx, esi
  000bd	e8 00 00 00 00	 call	 ?Unlink@SpherePack@@QAEXXZ ; SpherePack::Unlink

; 489  : 			mFactory->AddIntegrate(this);

  000c2	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  000c5	56		 push	 esi
  000c6	e8 00 00 00 00	 call	 ?AddIntegrate@SpherePackFactory@@QAEXPAVSpherePack@@@Z ; SpherePackFactory::AddIntegrate
$LN1@NewPosRadi:
  000cb	5e		 pop	 esi

; 490  : 		}
; 491  : 	}
; 492  : }

  000cc	5d		 pop	 ebp
  000cd	c2 08 00	 ret	 8
?NewPosRadius@SpherePack@@QAEXABVVector3d@@M@Z ENDP	; SpherePack::NewPosRadius
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ?SetParent@SpherePack@@QAEXPAV1@@Z
_TEXT	SEGMENT
_pack$ = 8						; size = 4
?SetParent@SpherePack@@QAEXPAV1@@Z PROC			; SpherePack::SetParent, COMDAT
; _this$ = ecx

; 138  : 	void SetParent(SpherePack *pack) { mParent = pack; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _pack$[ebp]
  00006	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetParent@SpherePack@@QAEXPAV1@@Z ENDP			; SpherePack::SetParent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ?HasSpherePackFlag@SpherePack@@QBE_NW4SpherePackFlag@@@Z
_TEXT	SEGMENT
_flag$ = 8						; size = 4
?HasSpherePackFlag@SpherePack@@QBE_NW4SpherePackFlag@@@Z PROC ; SpherePack::HasSpherePackFlag, COMDAT
; _this$ = ecx

; 132  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 133  : 		if ( mFlags & flag ) return true;

  00003	8b 45 08	 mov	 eax, DWORD PTR _flag$[ebp]
  00006	85 41 38	 test	 DWORD PTR [ecx+56], eax
  00009	0f 95 c0	 setne	 al

; 134  : 		return false;
; 135  : 	};

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?HasSpherePackFlag@SpherePack@@QBE_NW4SpherePackFlag@@@Z ENDP ; SpherePack::HasSpherePackFlag
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ?ClearSpherePackFlag@SpherePack@@QAEXW4SpherePackFlag@@@Z
_TEXT	SEGMENT
_flag$ = 8						; size = 4
?ClearSpherePackFlag@SpherePack@@QAEXW4SpherePackFlag@@@Z PROC ; SpherePack::ClearSpherePackFlag, COMDAT
; _this$ = ecx

; 130  : 	void ClearSpherePackFlag(SpherePackFlag flag) { mFlags&=~flag; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _flag$[ebp]
  00006	f7 d0		 not	 eax
  00008	21 41 38	 and	 DWORD PTR [ecx+56], eax
  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?ClearSpherePackFlag@SpherePack@@QAEXW4SpherePackFlag@@@Z ENDP ; SpherePack::ClearSpherePackFlag
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ?SetSpherePackFlag@SpherePack@@QAEXW4SpherePackFlag@@@Z
_TEXT	SEGMENT
_flag$ = 8						; size = 4
?SetSpherePackFlag@SpherePack@@QAEXW4SpherePackFlag@@@Z PROC ; SpherePack::SetSpherePackFlag, COMDAT
; _this$ = ecx

; 129  : 	void SetSpherePackFlag(SpherePackFlag flag) { mFlags|=flag; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _flag$[ebp]
  00006	09 41 38	 or	 DWORD PTR [ecx+56], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetSpherePackFlag@SpherePack@@QAEXW4SpherePackFlag@@@Z ENDP ; SpherePack::SetSpherePackFlag
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ?Init@SpherePack@@QAEXPAVSpherePackFactory@@ABVVector3d@@MPAX_N@Z
_TEXT	SEGMENT
_factory$ = 8						; size = 4
_pos$ = 12						; size = 4
_radius$ = 16						; size = 4
_userdata$ = 20						; size = 4
_isSphere$ = 24						; size = 1
?Init@SpherePack@@QAEXPAVSpherePackFactory@@ABVVector3d@@MPAX_N@Z PROC ; SpherePack::Init, COMDAT
; _this$ = ecx

; 114  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 115  : 		IS_SPHERE			= isSphere;

  00003	8a 45 18	 mov	 al, BYTE PTR _isSphere$[ebp]
  00006	8b d1		 mov	 edx, ecx
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  00008	8b 4d 0c	 mov	 ecx, DWORD PTR _pos$[ebp]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h

; 67   : 		mRadius = radius;

  0000b	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _radius$[ebp]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 115  : 		IS_SPHERE			= isSphere;

  00010	88 42 4c	 mov	 BYTE PTR [edx+76], al

; 116  : 		mUserData         = userdata;

  00013	8b 45 14	 mov	 eax, DWORD PTR _userdata$[ebp]
  00016	89 42 44	 mov	 DWORD PTR [edx+68], eax

; 117  : 		mParent           = 0;
; 118  : 		mNextSibling      = 0;
; 119  : 		mPrevSibling      = 0;
; 120  : 		mFlags            = 0;
; 121  : 		mFifo1            = 0;
; 122  : 		mFifo2            = 0;
; 123  : 		mFactory          = factory;

  00019	8b 45 08	 mov	 eax, DWORD PTR _factory$[ebp]
  0001c	c7 42 20 00 00
	00 00		 mov	 DWORD PTR [edx+32], 0
  00023	c7 42 28 00 00
	00 00		 mov	 DWORD PTR [edx+40], 0
  0002a	c7 42 2c 00 00
	00 00		 mov	 DWORD PTR [edx+44], 0
  00031	c7 42 38 00 00
	00 00		 mov	 DWORD PTR [edx+56], 0
  00038	c7 42 30 00 00
	00 00		 mov	 DWORD PTR [edx+48], 0
  0003f	c7 42 34 00 00
	00 00		 mov	 DWORD PTR [edx+52], 0
  00046	89 42 48	 mov	 DWORD PTR [edx+72], eax
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  00049	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004b	89 42 04	 mov	 DWORD PTR [edx+4], eax
  0004e	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00051	89 42 08	 mov	 DWORD PTR [edx+8], eax
  00054	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00057	89 42 0c	 mov	 DWORD PTR [edx+12], eax
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h

; 67   : 		mRadius = radius;

  0005a	f3 0f 11 42 10	 movss	 DWORD PTR [edx+16], xmm0

; 68   : 		mRadius2 = radius*radius;

  0005f	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00063	f3 0f 11 42 14	 movss	 DWORD PTR [edx+20], xmm0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 126  : 	};

  00068	5d		 pop	 ebp
  00069	c2 14 00	 ret	 20			; 00000014H
?Init@SpherePack@@QAEXPAVSpherePackFactory@@ABVVector3d@@MPAX_N@Z ENDP ; SpherePack::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ??1SpherePack@@UAE@XZ
_TEXT	SEGMENT
??1SpherePack@@UAE@XZ PROC				; SpherePack::~SpherePack, COMDAT
; _this$ = ecx
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h

; 39   : 	virtual ~Sphere() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Sphere@@6B@
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 108  : 	}

  00006	c3		 ret	 0
??1SpherePack@@UAE@XZ ENDP				; SpherePack::~SpherePack
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ??0SpherePack@@QAE@XZ
_TEXT	SEGMENT
??0SpherePack@@QAE@XZ PROC				; SpherePack::SpherePack, COMDAT
; _this$ = ecx
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 37   : 		x = a;

  00000	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00007	0f 57 c0	 xorps	 xmm0, xmm0

; 38   : 		y = b;

  0000a	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 105  : 	};

  00011	8b c1		 mov	 eax, ecx
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 39   : 		z = c;

  00013	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h

; 68   : 		mRadius2 = radius*radius;

  0001a	f3 0f 59 c0	 mulss	 xmm0, xmm0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 89   : 	SpherePack(void)

  0001e	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7SpherePack@@6B@

; 90   : 	{		
; 91   : 		mUserData         = 0; // default user data is null

  00024	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0

; 92   : 		mFactory          = 0; // factory we are a member of

  0002b	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0

; 93   : 		mNext             = 0; // linked list pointers

  00032	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0

; 94   : 		mPrevious         = 0;

  00039	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 95   : 		mParent           = 0;

  00040	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0

; 96   : 		mNextSibling      = 0; // our brothers and sisters at this level.

  00047	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0

; 97   : 		mPrevSibling      = 0;

  0004e	c7 41 2c 00 00
	00 00		 mov	 DWORD PTR [ecx+44], 0

; 98   : 		mChildren         = 0; // our children.

  00055	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0

; 99   : 		mChildCount       = 0; // number of children we have.

  0005c	c7 41 3c 00 00
	00 00		 mov	 DWORD PTR [ecx+60], 0

; 100  : 		mFifo1            = 0; // our FIFO1 location if we have one.

  00063	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0

; 101  : 		mFifo2            = 0; // our FIFO2 location if we have one.

  0006a	c7 41 34 00 00
	00 00		 mov	 DWORD PTR [ecx+52], 0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h

; 67   : 		mRadius = radius;

  00071	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 68   : 		mRadius2 = radius*radius;

  00078	f3 0f 11 41 14	 movss	 DWORD PTR [ecx+20], xmm0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 107  : 		x = a;

  0007d	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 108  : 		y = b;

  00084	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 109  : 		z = c;

  0008b	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h

; 104  : 		IS_SPHERE	= false;

  00092	c6 41 4c 00	 mov	 BYTE PTR [ecx+76], 0

; 105  : 	};

  00096	c3		 ret	 0
??0SpherePack@@QAE@XZ ENDP				; SpherePack::SpherePack
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ??_GSpherePackCallback@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GSpherePackCallback@@UAEPAXI@Z PROC			; SpherePackCallback::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 56   : 	virtual ~SpherePackCallback() {}

  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SpherePackCallback@@6B@
  00010	74 09		 je	 SHORT $LN6@scalar
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN6@scalar:
  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??_GSpherePackCallback@@UAEPAXI@Z ENDP			; SpherePackCallback::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ?PointTest2dCallback@SpherePackCallback@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z
_TEXT	SEGMENT
_searchpos$ = 8						; size = 4
_sphere$ = 12						; size = 4
_state$ = 16						; size = 4
?PointTest2dCallback@SpherePackCallback@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z PROC ; SpherePackCallback::PointTest2dCallback, COMDAT
; _this$ = ecx

; 79   : 	{};

  00000	c2 0c 00	 ret	 12			; 0000000cH
?PointTest2dCallback@SpherePackCallback@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z ENDP ; SpherePackCallback::PointTest2dCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ?RangeTestCallback@SpherePackCallback@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z
_TEXT	SEGMENT
_searchpos$ = 8						; size = 4
_distance$ = 12						; size = 4
_sphere$ = 16						; size = 4
_state$ = 20						; size = 4
?RangeTestCallback@SpherePackCallback@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z PROC ; SpherePackCallback::RangeTestCallback, COMDAT
; _this$ = ecx

; 74   : 	{};

  00000	c2 10 00	 ret	 16			; 00000010H
?RangeTestCallback@SpherePackCallback@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z ENDP ; SpherePackCallback::RangeTestCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ?RayTraceCallback@SpherePackCallback@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z
_TEXT	SEGMENT
_p1$ = 8						; size = 4
_dir$ = 12						; size = 4
_distance$ = 16						; size = 4
_sect$ = 20						; size = 4
_sphere$ = 24						; size = 4
?RayTraceCallback@SpherePackCallback@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z PROC ; SpherePackCallback::RayTraceCallback, COMDAT
; _this$ = ecx

; 68   : 	{};

  00000	c2 14 00	 ret	 20			; 00000014H
?RayTraceCallback@SpherePackCallback@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z ENDP ; SpherePackCallback::RayTraceCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ?VisibilityCallback@SpherePackCallback@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z
_TEXT	SEGMENT
_f$ = 8							; size = 4
_sphere$ = 12						; size = 4
_state$ = 16						; size = 4
?VisibilityCallback@SpherePackCallback@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z PROC ; SpherePackCallback::VisibilityCallback, COMDAT
; _this$ = ecx

; 61   : 	{};

  00000	c2 0c 00	 ret	 12			; 0000000cH
?VisibilityCallback@SpherePackCallback@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z ENDP ; SpherePackCallback::VisibilityCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ??1SpherePackCallback@@UAE@XZ
_TEXT	SEGMENT
??1SpherePackCallback@@UAE@XZ PROC			; SpherePackCallback::~SpherePackCallback, COMDAT
; _this$ = ecx

; 56   : 	virtual ~SpherePackCallback() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7SpherePackCallback@@6B@
  00006	c3		 ret	 0
??1SpherePackCallback@@UAE@XZ ENDP			; SpherePackCallback::~SpherePackCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\spherepack.h
;	COMDAT ??0SpherePackCallback@@QAE@XZ
_TEXT	SEGMENT
??0SpherePackCallback@@QAE@XZ PROC			; SpherePackCallback::SpherePackCallback, COMDAT
; _this$ = ecx

; 55   : 	SpherePackCallback() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7SpherePackCallback@@6B@
  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0SpherePackCallback@@QAE@XZ ENDP			; SpherePackCallback::SpherePackCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h
;	COMDAT ??_GSphere@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GSphere@@UAEPAXI@Z PROC				; Sphere::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 39   : 	virtual ~Sphere() {}

  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Sphere@@6B@
  00010	74 09		 je	 SHORT $LN6@scalar
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN6@scalar:
  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??_GSphere@@UAEPAXI@Z ENDP				; Sphere::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h
;	COMDAT ?SetRadius@Sphere@@QAEXM@Z
_TEXT	SEGMENT
_radius$ = 8						; size = 4
?SetRadius@Sphere@@QAEXM@Z PROC				; Sphere::SetRadius, COMDAT
; _this$ = ecx

; 66   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 67   : 		mRadius = radius;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _radius$[ebp]
  00008	f3 0f 11 41 10	 movss	 DWORD PTR [ecx+16], xmm0

; 68   : 		mRadius2 = radius*radius;

  0000d	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00011	f3 0f 11 41 14	 movss	 DWORD PTR [ecx+20], xmm0

; 69   : 	}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?SetRadius@Sphere@@QAEXM@Z ENDP				; Sphere::SetRadius
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h
;	COMDAT ?GetRadius2@Sphere@@QBEMXZ
_TEXT	SEGMENT
?GetRadius2@Sphere@@QBEMXZ PROC				; Sphere::GetRadius2, COMDAT
; _this$ = ecx

; 46   : 	float GetRadius2(void) const { return mRadius2; };

  00000	d9 41 14	 fld	 DWORD PTR [ecx+20]
  00003	c3		 ret	 0
?GetRadius2@Sphere@@QBEMXZ ENDP				; Sphere::GetRadius2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h
;	COMDAT ?GetRadius@Sphere@@QBEMXZ
_TEXT	SEGMENT
?GetRadius@Sphere@@QBEMXZ PROC				; Sphere::GetRadius, COMDAT
; _this$ = ecx

; 45   : 	float GetRadius(void) const { return mRadius; };

  00000	d9 41 10	 fld	 DWORD PTR [ecx+16]
  00003	c3		 ret	 0
?GetRadius@Sphere@@QBEMXZ ENDP				; Sphere::GetRadius
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h
;	COMDAT ??1Sphere@@UAE@XZ
_TEXT	SEGMENT
??1Sphere@@UAE@XZ PROC					; Sphere::~Sphere, COMDAT
; _this$ = ecx

; 39   : 	virtual ~Sphere() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Sphere@@6B@
  00006	c3		 ret	 0
??1Sphere@@UAE@XZ ENDP					; Sphere::~Sphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h
;	COMDAT ??0Sphere@@QAE@XZ
_TEXT	SEGMENT
??0Sphere@@QAE@XZ PROC					; Sphere::Sphere, COMDAT
; _this$ = ecx

; 103  : : mCenter(Vector3d(0.0f, 0.0f, 0.0f)), mRadius(0.0f), mRadius2(0.0f) { };

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Sphere@@6B@
  00006	8b c1		 mov	 eax, ecx
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 37   : 		x = a;

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 38   : 		y = b;

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 39   : 		z = c;

  00016	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\sphere.h

; 103  : : mCenter(Vector3d(0.0f, 0.0f, 0.0f)), mRadius(0.0f), mRadius2(0.0f) { };

  0001d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  00024	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  0002b	c3		 ret	 0
??0Sphere@@QAE@XZ ENDP					; Sphere::Sphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
;	COMDAT ?Normalize@Vector3d@@QAEMXZ
_TEXT	SEGMENT
_l$ = -4						; size = 4
?Normalize@Vector3d@@QAEMXZ PROC			; Vector3d::Normalize, COMDAT
; _this$ = ecx

; 184  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
; File a:\vs\vc\include\math.h

; 775  :     return (float)sqrt(_X);

  00007	83 ec 08	 sub	 esp, 8
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 141  : 		return float(sqrtf( x*x + y*y + z*z ));

  0000a	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  0000f	f3 0f 10 16	 movss	 xmm2, DWORD PTR [esi]
  00013	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  00018	f3 0f 59 d2	 mulss	 xmm2, xmm2
  0001c	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00020	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00024	f3 0f 58 d1	 addss	 xmm2, xmm1
  00028	f3 0f 58 d0	 addss	 xmm2, xmm0
; File a:\vs\vc\include\math.h

; 775  :     return (float)sqrt(_X);

  0002c	0f 5a c2	 cvtps2pd xmm0, xmm2
  0002f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00034	e8 00 00 00 00	 call	 _sqrt
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 185  : 		float l = Length(); // get length.

  00039	d9 5d fc	 fstp	 DWORD PTR _l$[ebp]

; 186  : 		if ( l != 0 )

  0003c	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _l$[ebp]
; File a:\vs\vc\include\math.h

; 775  :     return (float)sqrt(_X);

  00041	83 c4 08	 add	 esp, 8
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 196  : 		return l;

  00044	d9 45 fc	 fld	 DWORD PTR _l$[ebp]
  00047	0f 57 c0	 xorps	 xmm0, xmm0
  0004a	0f 2e c8	 ucomiss xmm1, xmm0
  0004d	9f		 lahf
  0004e	f6 c4 44	 test	 ah, 68			; 00000044H
  00051	7b 2d		 jnp	 SHORT $LN2@Normalize

; 187  : 		{
; 188  : 			x/=l;

  00053	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00057	f3 0f 5e c1	 divss	 xmm0, xmm1
  0005b	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0

; 189  : 			y/=l;

  0005f	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  00064	f3 0f 5e c1	 divss	 xmm0, xmm1
  00068	f3 0f 11 46 04	 movss	 DWORD PTR [esi+4], xmm0

; 190  : 			z/=l;

  0006d	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  00072	f3 0f 5e c1	 divss	 xmm0, xmm1
  00076	f3 0f 11 46 08	 movss	 DWORD PTR [esi+8], xmm0
  0007b	5e		 pop	 esi

; 197  : 	};

  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c3		 ret	 0
$LN2@Normalize:

; 191  : 		}
; 192  : 		else
; 193  : 		{
; 194  : 			x = y = z = 0;

  00080	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00087	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0008e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00094	5e		 pop	 esi

; 197  : 	};

  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c3		 ret	 0
?Normalize@Vector3d@@QAEMXZ ENDP			; Vector3d::Normalize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
;	COMDAT ?DistanceSq@Vector3d@@QBEMABV1@@Z
_TEXT	SEGMENT
tv184 = 8						; size = 4
_a$ = 8							; size = 4
?DistanceSq@Vector3d@@QBEMABV1@@Z PROC			; Vector3d::DistanceSq, COMDAT
; _this$ = ecx

; 169  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 170  : 		float dx = a.x - x;

  00003	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  00006	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]

; 171  : 		float dy = a.y - y;

  0000a	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  0000f	f3 0f 5c 51 04	 subss	 xmm2, DWORD PTR [ecx+4]
  00014	f3 0f 5c 09	 subss	 xmm1, DWORD PTR [ecx]

; 172  : 		float dz = a.z - z;

  00018	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0001d	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]

; 173  : 		return dx*dx + dy*dy + dz*dz;

  00022	f3 0f 59 d2	 mulss	 xmm2, xmm2
  00026	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0002a	f3 0f 59 c0	 mulss	 xmm0, xmm0
  0002e	f3 0f 58 d1	 addss	 xmm2, xmm1
  00032	f3 0f 58 d0	 addss	 xmm2, xmm0
  00036	f3 0f 11 55 08	 movss	 DWORD PTR tv184[ebp], xmm2
  0003b	d9 45 08	 fld	 DWORD PTR tv184[ebp]

; 174  : 	};

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
?DistanceSq@Vector3d@@QBEMABV1@@Z ENDP			; Vector3d::DistanceSq
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
;	COMDAT ?Distance@Vector3d@@QBEMABV1@@Z
_TEXT	SEGMENT
tv185 = 8						; size = 4
_a$ = 8							; size = 4
?Distance@Vector3d@@QBEMABV1@@Z PROC			; Vector3d::Distance, COMDAT
; _this$ = ecx

; 151  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 170  : 		float dx = a.x - x;

  00003	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
; File a:\vs\vc\include\math.h

; 775  :     return (float)sqrt(_X);

  00006	83 ec 08	 sub	 esp, 8
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 170  : 		float dx = a.x - x;

  00009	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]

; 171  : 		float dy = a.y - y;

  0000d	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  00012	f3 0f 5c 51 04	 subss	 xmm2, DWORD PTR [ecx+4]
  00017	f3 0f 5c 09	 subss	 xmm1, DWORD PTR [ecx]

; 172  : 		float dz = a.z - z;

  0001b	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00020	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]

; 173  : 		return dx*dx + dy*dy + dz*dz;

  00025	f3 0f 59 d2	 mulss	 xmm2, xmm2
  00029	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0002d	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00031	f3 0f 58 d1	 addss	 xmm2, xmm1
  00035	f3 0f 58 d0	 addss	 xmm2, xmm0
; File a:\vs\vc\include\math.h

; 775  :     return (float)sqrt(_X);

  00039	0f 5a c2	 cvtps2pd xmm0, xmm2
  0003c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00041	e8 00 00 00 00	 call	 _sqrt
  00046	d9 5d 08	 fstp	 DWORD PTR tv185[ebp]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 152  : 		return sqrtf(DistanceSq(a));

  00049	d9 45 08	 fld	 DWORD PTR tv185[ebp]
; File a:\vs\vc\include\math.h

; 775  :     return (float)sqrt(_X);

  0004c	83 c4 08	 add	 esp, 8
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 153  : 	}

  0004f	5d		 pop	 ebp
  00050	c2 04 00	 ret	 4
?Distance@Vector3d@@QBEMABV1@@Z ENDP			; Vector3d::Distance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
;	COMDAT ?Length@Vector3d@@QBEMXZ
_TEXT	SEGMENT
tv174 = -4						; size = 4
?Length@Vector3d@@QBEMXZ PROC				; Vector3d::Length, COMDAT
; _this$ = ecx

; 140  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 141  : 		return float(sqrtf( x*x + y*y + z*z ));

  00004	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
; File a:\vs\vc\include\math.h

; 775  :     return (float)sqrt(_X);

  00009	83 ec 08	 sub	 esp, 8
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 141  : 		return float(sqrtf( x*x + y*y + z*z ));

  0000c	f3 0f 10 11	 movss	 xmm2, DWORD PTR [ecx]
  00010	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00015	f3 0f 59 d2	 mulss	 xmm2, xmm2
  00019	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0001d	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00021	f3 0f 58 d1	 addss	 xmm2, xmm1
  00025	f3 0f 58 d0	 addss	 xmm2, xmm0
; File a:\vs\vc\include\math.h

; 775  :     return (float)sqrt(_X);

  00029	0f 5a c2	 cvtps2pd xmm0, xmm2
  0002c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00031	e8 00 00 00 00	 call	 _sqrt
  00036	d9 5d fc	 fstp	 DWORD PTR tv174[ebp]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 141  : 		return float(sqrtf( x*x + y*y + z*z ));

  00039	d9 45 fc	 fld	 DWORD PTR tv174[ebp]
; File a:\vs\vc\include\math.h

; 775  :     return (float)sqrt(_X);

  0003c	83 c4 08	 add	 esp, 8
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h

; 142  : 	};

  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
?Length@Vector3d@@QBEMXZ ENDP				; Vector3d::Length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
;	COMDAT ?Set@Vector3d@@QAEXMMM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
?Set@Vector3d@@QAEXMMM@Z PROC				; Vector3d::Set, COMDAT
; _this$ = ecx

; 106  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 107  : 		x = a;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _a$[ebp]
  00008	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 108  : 		y = b;

  0000c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _b$[ebp]
  00011	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 109  : 		z = c;

  00016	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _c$[ebp]
  0001b	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 110  : 	};

  00020	5d		 pop	 ebp
  00021	c2 0c 00	 ret	 12			; 0000000cH
?Set@Vector3d@@QAEXMMM@Z ENDP				; Vector3d::Set
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
;	COMDAT ??XVector3d@@QAEXM@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
??XVector3d@@QAEXM@Z PROC				; Vector3d::operator*=, COMDAT
; _this$ = ecx

; 84   : 	{x*=s; y*=s; z*=s;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00007	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _s$[ebp]
  0000c	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00010	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  00014	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  00019	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0001d	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0
  00022	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00027	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0002b	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??XVector3d@@QAEXM@Z ENDP				; Vector3d::operator*=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
;	COMDAT ??YVector3d@@QAEXV0@@Z
_TEXT	SEGMENT
_A$ = 8							; size = 12
??YVector3d@@QAEXV0@@Z PROC				; Vector3d::operator+=, COMDAT
; _this$ = ecx

; 80   : 	{ x+=A.x; y+=A.y; z+=A.z; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00007	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _A$[ebp]
  0000c	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  00010	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  00015	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR _A$[ebp+4]
  0001a	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0
  0001f	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00024	f3 0f 58 45 10	 addss	 xmm0, DWORD PTR _A$[ebp+8]
  00029	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0
  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
??YVector3d@@QAEXV0@@Z ENDP				; Vector3d::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
;	COMDAT ??4Vector3d@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_A$ = 8							; size = 4
??4Vector3d@@QAEAAV0@ABV0@@Z PROC			; Vector3d::operator=, COMDAT
; _this$ = ecx

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR _A$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	89 01		 mov	 DWORD PTR [ecx], eax
  0000a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0000d	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00010	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00013	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 58   : 	return(*this);  };

  00016	8b c1		 mov	 eax, ecx
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??4Vector3d@@QAEAAV0@ABV0@@Z ENDP			; Vector3d::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
;	COMDAT ??0Vector3d@@QAE@MMM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??0Vector3d@@QAE@MMM@Z PROC				; Vector3d::Vector3d, COMDAT
; _this$ = ecx

; 35   : 	Vector3d(float a,float b,float c) // construct with initial point.

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 36   : 	{
; 37   : 		x = a;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _a$[ebp]

; 38   : 		y = b;
; 39   : 		z = c;
; 40   : 	};

  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _b$[ebp]
  00013	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0
  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _c$[ebp]
  0001d	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??0Vector3d@@QAE@MMM@Z ENDP				; Vector3d::Vector3d
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
;	COMDAT ??0Vector3d@@QAE@ABV0@@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
??0Vector3d@@QAE@ABV0@@Z PROC				; Vector3d::Vector3d, COMDAT
; _this$ = ecx

; 28   : 	Vector3d(const Vector3d &a) // constructor copies existing vector.

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 29   : 	{
; 30   : 		x = a.x;

  00003	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	89 01		 mov	 DWORD PTR [ecx], eax

; 31   : 		y = a.y;

  0000a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0000d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 32   : 		z = a.z;

  00010	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00013	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 33   : 	};

  00016	8b c1		 mov	 eax, ecx
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0Vector3d@@QAE@ABV0@@Z ENDP				; Vector3d::Vector3d
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\vector.h
;	COMDAT ??0Vector3d@@QAE@XZ
_TEXT	SEGMENT
??0Vector3d@@QAE@XZ PROC				; Vector3d::Vector3d, COMDAT
; _this$ = ecx

; 26   : 	Vector3d(void) { };  // null constructor, does not inialize point.

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0Vector3d@@QAE@XZ ENDP				; Vector3d::Vector3d
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 89   :     D3DXVECTOR3() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv72 = 8						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 774  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __X$[ebp]

; 775  :     return (float)sqrt(_X);

  00008	83 ec 08	 sub	 esp, 8
  0000b	0f 5a c0	 cvtps2pd xmm0, xmm0
  0000e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00013	e8 00 00 00 00	 call	 _sqrt
  00018	d9 5d 08	 fstp	 DWORD PTR tv72[ebp]
  0001b	d9 45 08	 fld	 DWORD PTR tv72[ebp]
  0001e	83 c4 08	 add	 esp, 8

; 776  : }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
END
