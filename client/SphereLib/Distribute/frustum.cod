; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	A:\From C\Desktop\Serwer\Source\Source Client\client\SphereLib\frustum.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_sqrtf
PUBLIC	_tanf
PUBLIC	?tan@@YAMM@Z					; tan
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z			; D3DXVECTOR3::operator+
PUBLIC	??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z			; D3DXVECTOR3::operator-
PUBLIC	??DD3DXVECTOR3@@QBE?AU0@M@Z			; D3DXVECTOR3::operator*
PUBLIC	??0D3DXPLANE@@QAE@MMMM@Z			; D3DXPLANE::D3DXPLANE
PUBLIC	?D3DXVec3Length@@YAMPBUD3DXVECTOR3@@@Z		; D3DXVec3Length
PUBLIC	?D3DXVec3LengthSq@@YAMPBUD3DXVECTOR3@@@Z	; D3DXVec3LengthSq
PUBLIC	?D3DXPlaneDotCoord@@YAMPBUD3DXPLANE@@PBUD3DXVECTOR3@@@Z ; D3DXPlaneDotCoord
PUBLIC	?BuildViewFrustum@Frustum@@QAEXAAUD3DXMATRIX@@@Z ; Frustum::BuildViewFrustum
PUBLIC	?BuildViewFrustum2@Frustum@@QAEXAAUD3DXMATRIX@@MMMMABUD3DXVECTOR3@@1@Z ; Frustum::BuildViewFrustum2
PUBLIC	?ViewVolumeTest@Frustum@@QBE?AW4ViewState@@ABVVector3d@@M@Z ; Frustum::ViewVolumeTest
PUBLIC	__real@3f000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_sqrt:PROC
EXTRN	_tan:PROC
EXTRN	_D3DXPlaneNormalize@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp
;	COMDAT ?ViewVolumeTest@Frustum@@QBE?AW4ViewState@@ABVVector3d@@M@Z
_TEXT	SEGMENT
_distance$ = -28					; size = 24
_center$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_c_v3Center$ = 8					; size = 4
_c_fRadius$ = 12					; size = 4
?ViewVolumeTest@Frustum@@QBE?AW4ViewState@@ABVVector3d@@M@Z PROC ; Frustum::ViewVolumeTest, COMDAT
; _this$ = ecx

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _c_v3Center$[ebp]
  00013	8b d1		 mov	 edx, ecx

; 27   : 	if (m_bUsingSphere)

  00015	f3 0f 10 5d 0c	 movss	 xmm3, DWORD PTR _c_fRadius$[ebp]
  0001a	80 3a 00	 cmp	 BYTE PTR [edx], 0
  0001d	74 47		 je	 SHORT $LN9@ViewVolume

; 28   : 	{
; 29   : 		D3DXVECTOR3 v(
; 30   : 				c_v3Center.x-m_v3Center.x,
; 31   : 				c_v3Center.y-m_v3Center.y,
; 32   : 				c_v3Center.z-m_v3Center.z);

  0001f	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00024	f3 0f 5c 42 08	 subss	 xmm0, DWORD PTR [edx+8]
  00029	f3 0f 10 10	 movss	 xmm2, DWORD PTR [eax]
  0002d	f3 0f 5c 52 04	 subss	 xmm2, DWORD PTR [edx+4]
  00032	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  00037	f3 0f 5c 4a 0c	 subss	 xmm1, DWORD PTR [edx+12]
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0003c	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00040	f3 0f 59 d2	 mulss	 xmm2, xmm2
  00044	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00048	f3 0f 58 d0	 addss	 xmm2, xmm0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp

; 34   : 		if ((c_fRadius + m_fRadius) * (c_fRadius + m_fRadius) < D3DXVec3LengthSq(&v))

  0004c	f3 0f 10 42 10	 movss	 xmm0, DWORD PTR [edx+16]
  00051	f3 0f 58 c3	 addss	 xmm0, xmm3
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00055	f3 0f 58 d1	 addss	 xmm2, xmm1
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp

; 34   : 		if ((c_fRadius + m_fRadius) * (c_fRadius + m_fRadius) < D3DXVec3LengthSq(&v))

  00059	f3 0f 59 c0	 mulss	 xmm0, xmm0
  0005d	0f 2f d0	 comiss	 xmm2, xmm0
  00060	0f 87 ae 00 00
	00		 ja	 $LN21@ViewVolume
$LN9@ViewVolume:

; 35   : 		{
; 36   : 			return VS_OUTSIDE;
; 37   : 		}
; 38   : 	}	
; 39   : 	
; 40   : 	const int count=6;
; 41   : 
; 42   : 	D3DXVECTOR3 center = c_v3Center;

  00066	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0006a	0f 28 d3	 movaps	 xmm2, xmm3
  0006d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 43   : 	//center.y *=-1;
; 44   : 
; 45   : 	int i;
; 46   : 
; 47   : 	float distance[count];
; 48   : 	for(i=0;i<count;i++)

  00070	33 c9		 xor	 ecx, ecx
  00072	0f 57 15 00 00
	00 00		 xorps	 xmm2, DWORD PTR __xmm@80000000800000008000000080000000
  00079	66 0f d6 45 f0	 movq	 QWORD PTR _center$[ebp], xmm0
  0007e	f3 0f 10 6d f4	 movss	 xmm5, DWORD PTR _center$[ebp+4]
  00083	f3 0f 10 75 f0	 movss	 xmm6, DWORD PTR _center$[ebp]
  00088	89 45 f8	 mov	 DWORD PTR _center$[ebp+8], eax
  0008b	8d 42 1c	 lea	 eax, DWORD PTR [edx+28]
  0008e	f3 0f 10 65 f8	 movss	 xmm4, DWORD PTR _center$[ebp+8]
  00093	eb 0b 8d a4 24
	00 00 00 00 8d
	64 24 00	 npad	 13
$LL8@ViewVolume:
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 1647 :     return pP->a * pV->x + pP->b * pV->y + pP->c * pV->z + pP->d;

  000a0	f3 0f 10 40 f8	 movss	 xmm0, DWORD PTR [eax-8]
  000a5	f3 0f 10 48 fc	 movss	 xmm1, DWORD PTR [eax-4]
  000aa	f3 0f 59 cd	 mulss	 xmm1, xmm5
  000ae	f3 0f 59 c6	 mulss	 xmm0, xmm6
  000b2	f3 0f 58 c8	 addss	 xmm1, xmm0
  000b6	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000ba	f3 0f 59 c4	 mulss	 xmm0, xmm4
  000be	f3 0f 58 c8	 addss	 xmm1, xmm0
  000c2	f3 0f 58 48 04	 addss	 xmm1, DWORD PTR [eax+4]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp

; 51   : 		if (distance[i]<=-c_fRadius) 

  000c7	0f 2f d1	 comiss	 xmm2, xmm1
  000ca	f3 0f 11 4c 8d
	e4		 movss	 DWORD PTR _distance$[ebp+ecx*4], xmm1
  000d0	73 42		 jae	 SHORT $LN21@ViewVolume

; 43   : 	//center.y *=-1;
; 44   : 
; 45   : 	int i;
; 46   : 
; 47   : 	float distance[count];
; 48   : 	for(i=0;i<count;i++)

  000d2	41		 inc	 ecx
  000d3	83 c0 10	 add	 eax, 16			; 00000010H
  000d6	83 f9 06	 cmp	 ecx, 6
  000d9	7c c5		 jl	 SHORT $LL8@ViewVolume

; 52   : 			return VS_OUTSIDE;
; 53   : 	}
; 54   : 
; 55   : 	//return VS_INSIDE;
; 56   : 
; 57   : 	for(i=0;i<count;i++)

  000db	33 c0		 xor	 eax, eax
  000dd	8d 49 00	 npad	 3
$LL4@ViewVolume:

; 58   : 	{
; 59   : 		if (distance[i]<=c_fRadius) 

  000e0	0f 2f 5c 85 e4	 comiss	 xmm3, DWORD PTR _distance$[ebp+eax*4]
  000e5	73 18		 jae	 SHORT $LN22@ViewVolume

; 52   : 			return VS_OUTSIDE;
; 53   : 	}
; 54   : 
; 55   : 	//return VS_INSIDE;
; 56   : 
; 57   : 	for(i=0;i<count;i++)

  000e7	40		 inc	 eax
  000e8	83 f8 06	 cmp	 eax, 6
  000eb	7c f3		 jl	 SHORT $LL4@ViewVolume

; 61   : 	}
; 62   : 	
; 63   : 	return VS_INSIDE;

  000ed	33 c0		 xor	 eax, eax

; 64   : }

  000ef	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f2	33 cd		 xor	 ecx, ebp
  000f4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c2 08 00	 ret	 8
$LN22@ViewVolume:

; 60   : 			return VS_PARTIAL;

  000ff	b8 01 00 00 00	 mov	 eax, 1

; 64   : }

  00104	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00107	33 cd		 xor	 ecx, ebp
  00109	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010e	8b e5		 mov	 esp, ebp
  00110	5d		 pop	 ebp
  00111	c2 08 00	 ret	 8
$LN21@ViewVolume:
  00114	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00117	b8 02 00 00 00	 mov	 eax, 2
  0011c	33 cd		 xor	 ecx, ebp
  0011e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00123	8b e5		 mov	 esp, ebp
  00125	5d		 pop	 ebp
  00126	c2 08 00	 ret	 8
?ViewVolumeTest@Frustum@@QBE?AW4ViewState@@ABVVector3d@@M@Z ENDP ; Frustum::ViewVolumeTest
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp
;	COMDAT ?BuildViewFrustum2@Frustum@@QAEXAAUD3DXMATRIX@@MMMMABUD3DXVECTOR3@@1@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
_mat$ = 8						; size = 4
_fNear$ = 12						; size = 4
_fFar$ = 16						; size = 4
tv401 = 20						; size = 4
tv387 = 20						; size = 4
_fFov$ = 20						; size = 4
_fAspect$ = 24						; size = 4
_vCamera$ = 28						; size = 4
_vLook$ = 32						; size = 4
?BuildViewFrustum2@Frustum@@QAEXAAUD3DXMATRIX@@MMMMABUD3DXVECTOR3@@1@Z PROC ; Frustum::BuildViewFrustum2, COMDAT
; _this$ = ecx

; 82   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 83   : 	float fViewLen = fFar-fNear;

  00006	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fFar$[ebp]
  0000b	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _fNear$[ebp]
  00010	56		 push	 esi
; File a:\vs\vc\include\math.h

; 780  :     return (float)tan(_X);

  00011	83 ec 08	 sub	 esp, 8
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp

; 82   : {

  00014	8b f1		 mov	 esi, ecx

; 83   : 	float fViewLen = fFar-fNear;

  00016	f3 0f 11 45 10	 movss	 DWORD PTR _fFar$[ebp], xmm0

; 84   : 	float fH = fViewLen * tan(fFov*0.5f);

  0001b	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _fFov$[ebp]
  00020	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
; File a:\vs\vc\include\math.h

; 780  :     return (float)tan(_X);

  00028	0f 5a c0	 cvtps2pd xmm0, xmm0
  0002b	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00030	e8 00 00 00 00	 call	 _tan
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp

; 84   : 	float fH = fViewLen * tan(fFov*0.5f);

  00035	f3 0f 10 6d 10	 movss	 xmm5, DWORD PTR _fFar$[ebp]
  0003a	0f 57 c9	 xorps	 xmm1, xmm1
; File a:\vs\vc\include\math.h

; 780  :     return (float)tan(_X);

  0003d	d9 5d 14	 fstp	 DWORD PTR tv387[ebp]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp

; 84   : 	float fH = fViewLen * tan(fFov*0.5f);

  00040	f3 0f 10 55 14	 movss	 xmm2, DWORD PTR tv387[ebp]

; 86   : 	D3DXVECTOR3 P(0.0f, 0.0f, fNear+fViewLen*0.5f);

  00045	0f 28 e5	 movaps	 xmm4, xmm5
  00048	f3 0f 59 25 00
	00 00 00	 mulss	 xmm4, DWORD PTR __real@3f000000
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00050	0f 28 d9	 movaps	 xmm3, xmm1
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp

; 84   : 	float fH = fViewLen * tan(fFov*0.5f);

  00053	f3 0f 59 d5	 mulss	 xmm2, xmm5

; 86   : 	D3DXVECTOR3 P(0.0f, 0.0f, fNear+fViewLen*0.5f);

  00057	f3 0f 58 65 0c	 addss	 xmm4, DWORD PTR _fNear$[ebp]
  0005c	0f 28 c2	 movaps	 xmm0, xmm2
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0005f	f3 0f 5c ca	 subss	 xmm1, xmm2
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp

; 85   : 	float fW = fH*fAspect;

  00063	f3 0f 59 45 18	 mulss	 xmm0, DWORD PTR _fAspect$[ebp]
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00068	f3 0f 5c e5	 subss	 xmm4, xmm5
  0006c	f3 0f 5c d8	 subss	 xmm3, xmm0

; 270  : }
; 271  : 
; 272  : D3DXINLINE D3DXVECTOR3
; 273  : D3DXVECTOR3::operator / ( FLOAT f ) const
; 274  : {
; 275  :     FLOAT fInv = 1.0f / f;
; 276  :     return D3DXVECTOR3(x * fInv, y * fInv, z * fInv);
; 277  : }
; 278  : 
; 279  : 
; 280  : D3DXINLINE D3DXVECTOR3
; 281  : operator * ( FLOAT f, CONST struct D3DXVECTOR3& v )
; 282  : {
; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);
; 284  : }
; 285  : 
; 286  : 
; 287  : D3DXINLINE BOOL
; 288  : D3DXVECTOR3::operator == ( CONST D3DXVECTOR3& v ) const
; 289  : {
; 290  :     return x == v.x && y == v.y && z == v.z;
; 291  : }
; 292  : 
; 293  : D3DXINLINE BOOL
; 294  : D3DXVECTOR3::operator != ( CONST D3DXVECTOR3& v ) const
; 295  : {
; 296  :     return x != v.x || y != v.y || z != v.z;
; 297  : }
; 298  : 
; 299  : 
; 300  : 
; 301  : //--------------------------
; 302  : // 4D Vector
; 303  : //--------------------------
; 304  : D3DXINLINE
; 305  : D3DXVECTOR4::D3DXVECTOR4( CONST FLOAT *pf )
; 306  : {
; 307  : #ifdef D3DX_DEBUG
; 308  :     if(!pf)
; 309  :         return;
; 310  : #endif
; 311  : 
; 312  :     x = pf[0];
; 313  :     y = pf[1];
; 314  :     z = pf[2];
; 315  :     w = pf[3];
; 316  : }
; 317  : 
; 318  : D3DXINLINE
; 319  : D3DXVECTOR4::D3DXVECTOR4( FLOAT fx, FLOAT fy, FLOAT fz, FLOAT fw )
; 320  : {
; 321  :     x = fx;
; 322  :     y = fy;
; 323  :     z = fz;
; 324  :     w = fw;
; 325  : }
; 326  : 
; 327  : 
; 328  : // casting
; 329  : D3DXINLINE
; 330  : D3DXVECTOR4::operator FLOAT* ()
; 331  : {
; 332  :     return (FLOAT *) &x;
; 333  : }
; 334  : 
; 335  : D3DXINLINE
; 336  : D3DXVECTOR4::operator CONST FLOAT* () const
; 337  : {
; 338  :     return (CONST FLOAT *) &x;
; 339  : }
; 340  : 
; 341  : 
; 342  : // assignment operators
; 343  : D3DXINLINE D3DXVECTOR4&
; 344  : D3DXVECTOR4::operator += ( CONST D3DXVECTOR4& v )
; 345  : {
; 346  :     x += v.x;
; 347  :     y += v.y;
; 348  :     z += v.z;
; 349  :     w += v.w;
; 350  :     return *this;
; 351  : }
; 352  : 
; 353  : D3DXINLINE D3DXVECTOR4&
; 354  : D3DXVECTOR4::operator -= ( CONST D3DXVECTOR4& v )
; 355  : {
; 356  :     x -= v.x;
; 357  :     y -= v.y;
; 358  :     z -= v.z;
; 359  :     w -= v.w;
; 360  :     return *this;
; 361  : }
; 362  : 
; 363  : D3DXINLINE D3DXVECTOR4&
; 364  : D3DXVECTOR4::operator *= ( FLOAT f )
; 365  : {
; 366  :     x *= f;
; 367  :     y *= f;
; 368  :     z *= f;
; 369  :     w *= f;
; 370  :     return *this;
; 371  : }
; 372  : 
; 373  : D3DXINLINE D3DXVECTOR4&
; 374  : D3DXVECTOR4::operator /= ( FLOAT f )
; 375  : {
; 376  :     FLOAT fInv = 1.0f / f;
; 377  :     x *= fInv;
; 378  :     y *= fInv;
; 379  :     z *= fInv;
; 380  :     w *= fInv;
; 381  :     return *this;
; 382  : }
; 383  : 
; 384  : 
; 385  : // unary operators
; 386  : D3DXINLINE D3DXVECTOR4
; 387  : D3DXVECTOR4::operator + () const
; 388  : {
; 389  :     return *this;
; 390  : }
; 391  : 
; 392  : D3DXINLINE D3DXVECTOR4
; 393  : D3DXVECTOR4::operator - () const
; 394  : {
; 395  :     return D3DXVECTOR4(-x, -y, -z, -w);
; 396  : }
; 397  : 
; 398  : 
; 399  : // binary operators
; 400  : D3DXINLINE D3DXVECTOR4
; 401  : D3DXVECTOR4::operator + ( CONST D3DXVECTOR4& v ) const
; 402  : {
; 403  :     return D3DXVECTOR4(x + v.x, y + v.y, z + v.z, w + v.w);
; 404  : }
; 405  : 
; 406  : D3DXINLINE D3DXVECTOR4
; 407  : D3DXVECTOR4::operator - ( CONST D3DXVECTOR4& v ) const
; 408  : {
; 409  :     return D3DXVECTOR4(x - v.x, y - v.y, z - v.z, w - v.w);
; 410  : }
; 411  : 
; 412  : D3DXINLINE D3DXVECTOR4
; 413  : D3DXVECTOR4::operator * ( FLOAT f ) const
; 414  : {
; 415  :     return D3DXVECTOR4(x * f, y * f, z * f, w * f);
; 416  : }
; 417  : 
; 418  : D3DXINLINE D3DXVECTOR4
; 419  : D3DXVECTOR4::operator / ( FLOAT f ) const
; 420  : {
; 421  :     FLOAT fInv = 1.0f / f;
; 422  :     return D3DXVECTOR4(x * fInv, y * fInv, z * fInv, w * fInv);
; 423  : }
; 424  : 
; 425  : 
; 426  : D3DXINLINE D3DXVECTOR4
; 427  : operator * ( FLOAT f, CONST D3DXVECTOR4& v )
; 428  : {
; 429  :     return D3DXVECTOR4(f * v.x, f * v.y, f * v.z, f * v.w);
; 430  : }
; 431  : 
; 432  : 
; 433  : D3DXINLINE BOOL
; 434  : D3DXVECTOR4::operator == ( CONST D3DXVECTOR4& v ) const
; 435  : {
; 436  :     return x == v.x && y == v.y && z == v.z && w == v.w;
; 437  : }
; 438  : 
; 439  : D3DXINLINE BOOL
; 440  : D3DXVECTOR4::operator != ( CONST D3DXVECTOR4& v ) const
; 441  : {
; 442  :     return x != v.x || y != v.y || z != v.z || w != v.w;
; 443  : }
; 444  : 
; 445  : 
; 446  : //--------------------------
; 447  : // Matrix
; 448  : //--------------------------
; 449  : D3DXINLINE
; 450  : D3DXMATRIX::D3DXMATRIX( CONST FLOAT* pf )
; 451  : {
; 452  : #ifdef D3DX_DEBUG
; 453  :     if(!pf)
; 454  :         return;
; 455  : #endif
; 456  : 
; 457  :     memcpy(&_11, pf, sizeof(D3DXMATRIX));
; 458  : }
; 459  : 
; 460  : D3DXINLINE
; 461  : D3DXMATRIX::D3DXMATRIX( CONST D3DMATRIX& mat )
; 462  : {
; 463  :     memcpy(&_11, &mat, sizeof(D3DXMATRIX));
; 464  : }
; 465  : 
; 466  : D3DXINLINE
; 467  : D3DXMATRIX::D3DXMATRIX( FLOAT f11, FLOAT f12, FLOAT f13, FLOAT f14,
; 468  :                         FLOAT f21, FLOAT f22, FLOAT f23, FLOAT f24,
; 469  :                         FLOAT f31, FLOAT f32, FLOAT f33, FLOAT f34,
; 470  :                         FLOAT f41, FLOAT f42, FLOAT f43, FLOAT f44 )
; 471  : {
; 472  :     _11 = f11; _12 = f12; _13 = f13; _14 = f14;
; 473  :     _21 = f21; _22 = f22; _23 = f23; _24 = f24;
; 474  :     _31 = f31; _32 = f32; _33 = f33; _34 = f34;
; 475  :     _41 = f41; _42 = f42; _43 = f43; _44 = f44;
; 476  : }
; 477  : 
; 478  : 
; 479  : 
; 480  : // access grants
; 481  : D3DXINLINE FLOAT&
; 482  : D3DXMATRIX::operator () ( UINT iRow, UINT iCol )
; 483  : {
; 484  :     return m[iRow][iCol];
; 485  : }
; 486  : 
; 487  : D3DXINLINE FLOAT
; 488  : D3DXMATRIX::operator () ( UINT iRow, UINT iCol ) const
; 489  : {
; 490  :     return m[iRow][iCol];
; 491  : }
; 492  : 
; 493  : 
; 494  : // casting operators
; 495  : D3DXINLINE
; 496  : D3DXMATRIX::operator FLOAT* ()
; 497  : {
; 498  :     return (FLOAT *) &_11;
; 499  : }
; 500  : 
; 501  : D3DXINLINE
; 502  : D3DXMATRIX::operator CONST FLOAT* () const
; 503  : {
; 504  :     return (CONST FLOAT *) &_11;
; 505  : }
; 506  : 
; 507  : 
; 508  : // assignment operators
; 509  : D3DXINLINE D3DXMATRIX&
; 510  : D3DXMATRIX::operator *= ( CONST D3DXMATRIX& mat )
; 511  : {
; 512  :     D3DXMatrixMultiply(this, this, &mat);
; 513  :     return *this;
; 514  : }
; 515  : 
; 516  : D3DXINLINE D3DXMATRIX&
; 517  : D3DXMATRIX::operator += ( CONST D3DXMATRIX& mat )
; 518  : {
; 519  :     _11 += mat._11; _12 += mat._12; _13 += mat._13; _14 += mat._14;
; 520  :     _21 += mat._21; _22 += mat._22; _23 += mat._23; _24 += mat._24;
; 521  :     _31 += mat._31; _32 += mat._32; _33 += mat._33; _34 += mat._34;
; 522  :     _41 += mat._41; _42 += mat._42; _43 += mat._43; _44 += mat._44;
; 523  :     return *this;
; 524  : }
; 525  : 
; 526  : D3DXINLINE D3DXMATRIX&
; 527  : D3DXMATRIX::operator -= ( CONST D3DXMATRIX& mat )
; 528  : {
; 529  :     _11 -= mat._11; _12 -= mat._12; _13 -= mat._13; _14 -= mat._14;
; 530  :     _21 -= mat._21; _22 -= mat._22; _23 -= mat._23; _24 -= mat._24;
; 531  :     _31 -= mat._31; _32 -= mat._32; _33 -= mat._33; _34 -= mat._34;
; 532  :     _41 -= mat._41; _42 -= mat._42; _43 -= mat._43; _44 -= mat._44;
; 533  :     return *this;
; 534  : }
; 535  : 
; 536  : D3DXINLINE D3DXMATRIX&
; 537  : D3DXMATRIX::operator *= ( FLOAT f )
; 538  : {
; 539  :     _11 *= f; _12 *= f; _13 *= f; _14 *= f;
; 540  :     _21 *= f; _22 *= f; _23 *= f; _24 *= f;
; 541  :     _31 *= f; _32 *= f; _33 *= f; _34 *= f;
; 542  :     _41 *= f; _42 *= f; _43 *= f; _44 *= f;
; 543  :     return *this;
; 544  : }
; 545  : 
; 546  : D3DXINLINE D3DXMATRIX&
; 547  : D3DXMATRIX::operator /= ( FLOAT f )
; 548  : {
; 549  :     FLOAT fInv = 1.0f / f;
; 550  :     _11 *= fInv; _12 *= fInv; _13 *= fInv; _14 *= fInv;
; 551  :     _21 *= fInv; _22 *= fInv; _23 *= fInv; _24 *= fInv;
; 552  :     _31 *= fInv; _32 *= fInv; _33 *= fInv; _34 *= fInv;
; 553  :     _41 *= fInv; _42 *= fInv; _43 *= fInv; _44 *= fInv;
; 554  :     return *this;
; 555  : }
; 556  : 
; 557  : 
; 558  : // unary operators
; 559  : D3DXINLINE D3DXMATRIX
; 560  : D3DXMATRIX::operator + () const
; 561  : {
; 562  :     return *this;
; 563  : }
; 564  : 
; 565  : D3DXINLINE D3DXMATRIX
; 566  : D3DXMATRIX::operator - () const
; 567  : {
; 568  :     return D3DXMATRIX(-_11, -_12, -_13, -_14,
; 569  :                       -_21, -_22, -_23, -_24,
; 570  :                       -_31, -_32, -_33, -_34,
; 571  :                       -_41, -_42, -_43, -_44);
; 572  : }
; 573  : 
; 574  : 
; 575  : // binary operators
; 576  : D3DXINLINE D3DXMATRIX
; 577  : D3DXMATRIX::operator * ( CONST D3DXMATRIX& mat ) const
; 578  : {
; 579  :     D3DXMATRIX matT;
; 580  :     D3DXMatrixMultiply(&matT, this, &mat);
; 581  :     return matT;
; 582  : }
; 583  : 
; 584  : D3DXINLINE D3DXMATRIX
; 585  : D3DXMATRIX::operator + ( CONST D3DXMATRIX& mat ) const
; 586  : {
; 587  :     return D3DXMATRIX(_11 + mat._11, _12 + mat._12, _13 + mat._13, _14 + mat._14,
; 588  :                       _21 + mat._21, _22 + mat._22, _23 + mat._23, _24 + mat._24,
; 589  :                       _31 + mat._31, _32 + mat._32, _33 + mat._33, _34 + mat._34,
; 590  :                       _41 + mat._41, _42 + mat._42, _43 + mat._43, _44 + mat._44);
; 591  : }
; 592  : 
; 593  : D3DXINLINE D3DXMATRIX
; 594  : D3DXMATRIX::operator - ( CONST D3DXMATRIX& mat ) const
; 595  : {
; 596  :     return D3DXMATRIX(_11 - mat._11, _12 - mat._12, _13 - mat._13, _14 - mat._14,
; 597  :                       _21 - mat._21, _22 - mat._22, _23 - mat._23, _24 - mat._24,
; 598  :                       _31 - mat._31, _32 - mat._32, _33 - mat._33, _34 - mat._34,
; 599  :                       _41 - mat._41, _42 - mat._42, _43 - mat._43, _44 - mat._44);
; 600  : }
; 601  : 
; 602  : D3DXINLINE D3DXMATRIX
; 603  : D3DXMATRIX::operator * ( FLOAT f ) const
; 604  : {
; 605  :     return D3DXMATRIX(_11 * f, _12 * f, _13 * f, _14 * f,
; 606  :                       _21 * f, _22 * f, _23 * f, _24 * f,
; 607  :                       _31 * f, _32 * f, _33 * f, _34 * f,
; 608  :                       _41 * f, _42 * f, _43 * f, _44 * f);
; 609  : }
; 610  : 
; 611  : D3DXINLINE D3DXMATRIX
; 612  : D3DXMATRIX::operator / ( FLOAT f ) const
; 613  : {
; 614  :     FLOAT fInv = 1.0f / f;
; 615  :     return D3DXMATRIX(_11 * fInv, _12 * fInv, _13 * fInv, _14 * fInv,
; 616  :                       _21 * fInv, _22 * fInv, _23 * fInv, _24 * fInv,
; 617  :                       _31 * fInv, _32 * fInv, _33 * fInv, _34 * fInv,
; 618  :                       _41 * fInv, _42 * fInv, _43 * fInv, _44 * fInv);
; 619  : }
; 620  : 
; 621  : 
; 622  : D3DXINLINE D3DXMATRIX
; 623  : operator * ( FLOAT f, CONST D3DXMATRIX& mat )
; 624  : {
; 625  :     return D3DXMATRIX(f * mat._11, f * mat._12, f * mat._13, f * mat._14,
; 626  :                       f * mat._21, f * mat._22, f * mat._23, f * mat._24,
; 627  :                       f * mat._31, f * mat._32, f * mat._33, f * mat._34,
; 628  :                       f * mat._41, f * mat._42, f * mat._43, f * mat._44);
; 629  : }
; 630  : 
; 631  : 
; 632  : D3DXINLINE BOOL
; 633  : D3DXMATRIX::operator == ( CONST D3DXMATRIX& mat ) const
; 634  : {
; 635  :     return 0 == memcmp(this, &mat, sizeof(D3DXMATRIX));
; 636  : }
; 637  : 
; 638  : D3DXINLINE BOOL
; 639  : D3DXMATRIX::operator != ( CONST D3DXMATRIX& mat ) const
; 640  : {
; 641  :     return 0 != memcmp(this, &mat, sizeof(D3DXMATRIX));
; 642  : }
; 643  : 
; 644  : 
; 645  : 
; 646  : //--------------------------
; 647  : // Quaternion
; 648  : //--------------------------
; 649  : 
; 650  : D3DXINLINE
; 651  : D3DXQUATERNION::D3DXQUATERNION( CONST FLOAT* pf )
; 652  : {
; 653  : #ifdef D3DX_DEBUG
; 654  :     if(!pf)
; 655  :         return;
; 656  : #endif
; 657  : 
; 658  :     x = pf[0];
; 659  :     y = pf[1];
; 660  :     z = pf[2];
; 661  :     w = pf[3];
; 662  : }
; 663  : 
; 664  : D3DXINLINE
; 665  : D3DXQUATERNION::D3DXQUATERNION( FLOAT fx, FLOAT fy, FLOAT fz, FLOAT fw )
; 666  : {
; 667  :     x = fx;
; 668  :     y = fy;
; 669  :     z = fz;
; 670  :     w = fw;
; 671  : }
; 672  : 
; 673  : 
; 674  : // casting
; 675  : D3DXINLINE
; 676  : D3DXQUATERNION::operator FLOAT* ()
; 677  : {
; 678  :     return (FLOAT *) &x;
; 679  : }
; 680  : 
; 681  : D3DXINLINE
; 682  : D3DXQUATERNION::operator CONST FLOAT* () const
; 683  : {
; 684  :     return (CONST FLOAT *) &x;
; 685  : }
; 686  : 
; 687  : 
; 688  : // assignment operators
; 689  : D3DXINLINE D3DXQUATERNION&
; 690  : D3DXQUATERNION::operator += ( CONST D3DXQUATERNION& q )
; 691  : {
; 692  :     x += q.x;
; 693  :     y += q.y;
; 694  :     z += q.z;
; 695  :     w += q.w;
; 696  :     return *this;
; 697  : }
; 698  : 
; 699  : D3DXINLINE D3DXQUATERNION&
; 700  : D3DXQUATERNION::operator -= ( CONST D3DXQUATERNION& q )
; 701  : {
; 702  :     x -= q.x;
; 703  :     y -= q.y;
; 704  :     z -= q.z;
; 705  :     w -= q.w;
; 706  :     return *this;
; 707  : }
; 708  : 
; 709  : D3DXINLINE D3DXQUATERNION&
; 710  : D3DXQUATERNION::operator *= ( CONST D3DXQUATERNION& q )
; 711  : {
; 712  :     D3DXQuaternionMultiply(this, this, &q);
; 713  :     return *this;
; 714  : }
; 715  : 
; 716  : D3DXINLINE D3DXQUATERNION&
; 717  : D3DXQUATERNION::operator *= ( FLOAT f )
; 718  : {
; 719  :     x *= f;
; 720  :     y *= f;
; 721  :     z *= f;
; 722  :     w *= f;
; 723  :     return *this;
; 724  : }
; 725  : 
; 726  : D3DXINLINE D3DXQUATERNION&
; 727  : D3DXQUATERNION::operator /= ( FLOAT f )
; 728  : {
; 729  :     FLOAT fInv = 1.0f / f;
; 730  :     x *= fInv;
; 731  :     y *= fInv;
; 732  :     z *= fInv;
; 733  :     w *= fInv;
; 734  :     return *this;
; 735  : }
; 736  : 
; 737  : 
; 738  : // unary operators
; 739  : D3DXINLINE D3DXQUATERNION
; 740  : D3DXQUATERNION::operator + () const
; 741  : {
; 742  :     return *this;
; 743  : }
; 744  : 
; 745  : D3DXINLINE D3DXQUATERNION
; 746  : D3DXQUATERNION::operator - () const
; 747  : {
; 748  :     return D3DXQUATERNION(-x, -y, -z, -w);
; 749  : }
; 750  : 
; 751  : 
; 752  : // binary operators
; 753  : D3DXINLINE D3DXQUATERNION
; 754  : D3DXQUATERNION::operator + ( CONST D3DXQUATERNION& q ) const
; 755  : {
; 756  :     return D3DXQUATERNION(x + q.x, y + q.y, z + q.z, w + q.w);
; 757  : }
; 758  : 
; 759  : D3DXINLINE D3DXQUATERNION
; 760  : D3DXQUATERNION::operator - ( CONST D3DXQUATERNION& q ) const
; 761  : {
; 762  :     return D3DXQUATERNION(x - q.x, y - q.y, z - q.z, w - q.w);
; 763  : }
; 764  : 
; 765  : D3DXINLINE D3DXQUATERNION
; 766  : D3DXQUATERNION::operator * ( CONST D3DXQUATERNION& q ) const
; 767  : {
; 768  :     D3DXQUATERNION qT;
; 769  :     D3DXQuaternionMultiply(&qT, this, &q);
; 770  :     return qT;
; 771  : }
; 772  : 
; 773  : D3DXINLINE D3DXQUATERNION
; 774  : D3DXQUATERNION::operator * ( FLOAT f ) const
; 775  : {
; 776  :     return D3DXQUATERNION(x * f, y * f, z * f, w * f);
; 777  : }
; 778  : 
; 779  : D3DXINLINE D3DXQUATERNION
; 780  : D3DXQUATERNION::operator / ( FLOAT f ) const
; 781  : {
; 782  :     FLOAT fInv = 1.0f / f;
; 783  :     return D3DXQUATERNION(x * fInv, y * fInv, z * fInv, w * fInv);
; 784  : }
; 785  : 
; 786  : 
; 787  : D3DXINLINE D3DXQUATERNION
; 788  : operator * (FLOAT f, CONST D3DXQUATERNION& q )
; 789  : {
; 790  :     return D3DXQUATERNION(f * q.x, f * q.y, f * q.z, f * q.w);
; 791  : }
; 792  : 
; 793  : 
; 794  : D3DXINLINE BOOL
; 795  : D3DXQUATERNION::operator == ( CONST D3DXQUATERNION& q ) const
; 796  : {
; 797  :     return x == q.x && y == q.y && z == q.z && w == q.w;
; 798  : }
; 799  : 
; 800  : D3DXINLINE BOOL
; 801  : D3DXQUATERNION::operator != ( CONST D3DXQUATERNION& q ) const
; 802  : {
; 803  :     return x != q.x || y != q.y || z != q.z || w != q.w;
; 804  : }
; 805  : 
; 806  : 
; 807  : 
; 808  : //--------------------------
; 809  : // Plane
; 810  : //--------------------------
; 811  : 
; 812  : D3DXINLINE
; 813  : D3DXPLANE::D3DXPLANE( CONST FLOAT* pf )
; 814  : {
; 815  : #ifdef D3DX_DEBUG
; 816  :     if(!pf)
; 817  :         return;
; 818  : #endif
; 819  : 
; 820  :     a = pf[0];
; 821  :     b = pf[1];
; 822  :     c = pf[2];
; 823  :     d = pf[3];
; 824  : }
; 825  : 
; 826  : D3DXINLINE
; 827  : D3DXPLANE::D3DXPLANE( FLOAT fa, FLOAT fb, FLOAT fc, FLOAT fd )
; 828  : {
; 829  :     a = fa;
; 830  :     b = fb;
; 831  :     c = fc;
; 832  :     d = fd;
; 833  : }
; 834  : 
; 835  : 
; 836  : // casting
; 837  : D3DXINLINE
; 838  : D3DXPLANE::operator FLOAT* ()
; 839  : {
; 840  :     return (FLOAT *) &a;
; 841  : }
; 842  : 
; 843  : D3DXINLINE
; 844  : D3DXPLANE::operator CONST FLOAT* () const
; 845  : {
; 846  :     return (CONST FLOAT *) &a;
; 847  : }
; 848  : 
; 849  : 
; 850  : // unary operators
; 851  : D3DXINLINE D3DXPLANE
; 852  : D3DXPLANE::operator + () const
; 853  : {
; 854  :     return *this;
; 855  : }
; 856  : 
; 857  : D3DXINLINE D3DXPLANE
; 858  : D3DXPLANE::operator - () const
; 859  : {
; 860  :     return D3DXPLANE(-a, -b, -c, -d);
; 861  : }
; 862  : 
; 863  : 
; 864  : // binary operators
; 865  : D3DXINLINE BOOL
; 866  : D3DXPLANE::operator == ( CONST D3DXPLANE& p ) const
; 867  : {
; 868  :     return a == p.a && b == p.b && c == p.c && d == p.d;
; 869  : }
; 870  : 
; 871  : D3DXINLINE BOOL
; 872  : D3DXPLANE::operator != ( CONST D3DXPLANE& p ) const
; 873  : {
; 874  :     return a != p.a || b != p.b || c != p.c || d != p.d;
; 875  : }
; 876  : 
; 877  : 
; 878  : 
; 879  : 
; 880  : //--------------------------
; 881  : // Color
; 882  : //--------------------------
; 883  : 
; 884  : D3DXINLINE
; 885  : D3DXCOLOR::D3DXCOLOR( DWORD dw )
; 886  : {
; 887  :     CONST FLOAT f = 1.0f / 255.0f;
; 888  :     r = f * (FLOAT) (unsigned char) (dw >> 16);
; 889  :     g = f * (FLOAT) (unsigned char) (dw >>  8);
; 890  :     b = f * (FLOAT) (unsigned char) (dw >>  0);
; 891  :     a = f * (FLOAT) (unsigned char) (dw >> 24);
; 892  : }
; 893  : 
; 894  : D3DXINLINE
; 895  : D3DXCOLOR::D3DXCOLOR( CONST FLOAT* pf )
; 896  : {
; 897  : #ifdef D3DX_DEBUG
; 898  :     if(!pf)
; 899  :         return;
; 900  : #endif
; 901  : 
; 902  :     r = pf[0];
; 903  :     g = pf[1];
; 904  :     b = pf[2];
; 905  :     a = pf[3];
; 906  : }
; 907  : 
; 908  : D3DXINLINE
; 909  : D3DXCOLOR::D3DXCOLOR( CONST D3DCOLORVALUE& c )
; 910  : {
; 911  :     r = c.r;
; 912  :     g = c.g;
; 913  :     b = c.b;
; 914  :     a = c.a;
; 915  : }
; 916  : 
; 917  : D3DXINLINE
; 918  : D3DXCOLOR::D3DXCOLOR( FLOAT fr, FLOAT fg, FLOAT fb, FLOAT fa )
; 919  : {
; 920  :     r = fr;
; 921  :     g = fg;
; 922  :     b = fb;
; 923  :     a = fa;
; 924  : }
; 925  : 
; 926  : 
; 927  : // casting
; 928  : D3DXINLINE
; 929  : D3DXCOLOR::operator DWORD () const
; 930  : {
; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);
; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);
; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);
; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);
; 935  : 
; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;
; 937  : }
; 938  : 
; 939  : 
; 940  : D3DXINLINE
; 941  : D3DXCOLOR::operator FLOAT * ()
; 942  : {
; 943  :     return (FLOAT *) &r;
; 944  : }
; 945  : 
; 946  : D3DXINLINE
; 947  : D3DXCOLOR::operator CONST FLOAT * () const
; 948  : {
; 949  :     return (CONST FLOAT *) &r;
; 950  : }
; 951  : 
; 952  : 
; 953  : D3DXINLINE
; 954  : D3DXCOLOR::operator D3DCOLORVALUE * ()
; 955  : {
; 956  :     return (D3DCOLORVALUE *) &r;
; 957  : }
; 958  : 
; 959  : D3DXINLINE
; 960  : D3DXCOLOR::operator CONST D3DCOLORVALUE * () const
; 961  : {
; 962  :     return (CONST D3DCOLORVALUE *) &r;
; 963  : }
; 964  : 
; 965  : 
; 966  : D3DXINLINE
; 967  : D3DXCOLOR::operator D3DCOLORVALUE& ()
; 968  : {
; 969  :     return *((D3DCOLORVALUE *) &r);
; 970  : }
; 971  : 
; 972  : D3DXINLINE
; 973  : D3DXCOLOR::operator CONST D3DCOLORVALUE& () const
; 974  : {
; 975  :     return *((CONST D3DCOLORVALUE *) &r);
; 976  : }
; 977  : 
; 978  : 
; 979  : // assignment operators
; 980  : D3DXINLINE D3DXCOLOR&
; 981  : D3DXCOLOR::operator += ( CONST D3DXCOLOR& c )
; 982  : {
; 983  :     r += c.r;
; 984  :     g += c.g;
; 985  :     b += c.b;
; 986  :     a += c.a;
; 987  :     return *this;
; 988  : }
; 989  : 
; 990  : D3DXINLINE D3DXCOLOR&
; 991  : D3DXCOLOR::operator -= ( CONST D3DXCOLOR& c )
; 992  : {
; 993  :     r -= c.r;
; 994  :     g -= c.g;
; 995  :     b -= c.b;
; 996  :     a -= c.a;
; 997  :     return *this;
; 998  : }
; 999  : 
; 1000 : D3DXINLINE D3DXCOLOR&
; 1001 : D3DXCOLOR::operator *= ( FLOAT f )
; 1002 : {
; 1003 :     r *= f;
; 1004 :     g *= f;
; 1005 :     b *= f;
; 1006 :     a *= f;
; 1007 :     return *this;
; 1008 : }
; 1009 : 
; 1010 : D3DXINLINE D3DXCOLOR&
; 1011 : D3DXCOLOR::operator /= ( FLOAT f )
; 1012 : {
; 1013 :     FLOAT fInv = 1.0f / f;
; 1014 :     r *= fInv;
; 1015 :     g *= fInv;
; 1016 :     b *= fInv;
; 1017 :     a *= fInv;
; 1018 :     return *this;
; 1019 : }
; 1020 : 
; 1021 : 
; 1022 : // unary operators
; 1023 : D3DXINLINE D3DXCOLOR
; 1024 : D3DXCOLOR::operator + () const
; 1025 : {
; 1026 :     return *this;
; 1027 : }
; 1028 : 
; 1029 : D3DXINLINE D3DXCOLOR
; 1030 : D3DXCOLOR::operator - () const
; 1031 : {
; 1032 :     return D3DXCOLOR(-r, -g, -b, -a);
; 1033 : }
; 1034 : 
; 1035 : 
; 1036 : // binary operators
; 1037 : D3DXINLINE D3DXCOLOR
; 1038 : D3DXCOLOR::operator + ( CONST D3DXCOLOR& c ) const
; 1039 : {
; 1040 :     return D3DXCOLOR(r + c.r, g + c.g, b + c.b, a + c.a);
; 1041 : }
; 1042 : 
; 1043 : D3DXINLINE D3DXCOLOR
; 1044 : D3DXCOLOR::operator - ( CONST D3DXCOLOR& c ) const
; 1045 : {
; 1046 :     return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);
; 1047 : }
; 1048 : 
; 1049 : D3DXINLINE D3DXCOLOR
; 1050 : D3DXCOLOR::operator * ( FLOAT f ) const
; 1051 : {
; 1052 :     return D3DXCOLOR(r * f, g * f, b * f, a * f);
; 1053 : }
; 1054 : 
; 1055 : D3DXINLINE D3DXCOLOR
; 1056 : D3DXCOLOR::operator / ( FLOAT f ) const
; 1057 : {
; 1058 :     FLOAT fInv = 1.0f / f;
; 1059 :     return D3DXCOLOR(r * fInv, g * fInv, b * fInv, a * fInv);
; 1060 : }
; 1061 : 
; 1062 : 
; 1063 : D3DXINLINE D3DXCOLOR
; 1064 : operator * (FLOAT f, CONST D3DXCOLOR& c )
; 1065 : {
; 1066 :     return D3DXCOLOR(f * c.r, f * c.g, f * c.b, f * c.a);
; 1067 : }
; 1068 : 
; 1069 : 
; 1070 : D3DXINLINE BOOL
; 1071 : D3DXCOLOR::operator == ( CONST D3DXCOLOR& c ) const
; 1072 : {
; 1073 :     return r == c.r && g == c.g && b == c.b && a == c.a;
; 1074 : }
; 1075 : 
; 1076 : D3DXINLINE BOOL
; 1077 : D3DXCOLOR::operator != ( CONST D3DXCOLOR& c ) const
; 1078 : {
; 1079 :     return r != c.r || g != c.g || b != c.b || a != c.a;
; 1080 : }
; 1081 : 
; 1082 : 
; 1083 : #endif //__cplusplus
; 1084 : 
; 1085 : 
; 1086 : 
; 1087 : //===========================================================================
; 1088 : //
; 1089 : // Inline functions
; 1090 : //
; 1091 : //===========================================================================
; 1092 : 
; 1093 : 
; 1094 : //--------------------------
; 1095 : // 2D Vector
; 1096 : //--------------------------
; 1097 : 
; 1098 : D3DXINLINE FLOAT D3DXVec2Length
; 1099 :     ( CONST D3DXVECTOR2 *pV )
; 1100 : {
; 1101 : #ifdef D3DX_DEBUG
; 1102 :     if(!pV)
; 1103 :         return 0.0f;
; 1104 : #endif
; 1105 : 
; 1106 : #ifdef __cplusplus
; 1107 :     return sqrtf(pV->x * pV->x + pV->y * pV->y);
; 1108 : #else
; 1109 :     return (FLOAT) sqrt(pV->x * pV->x + pV->y * pV->y);
; 1110 : #endif
; 1111 : }
; 1112 : 
; 1113 : D3DXINLINE FLOAT D3DXVec2LengthSq
; 1114 :     ( CONST D3DXVECTOR2 *pV )
; 1115 : {
; 1116 : #ifdef D3DX_DEBUG
; 1117 :     if(!pV)
; 1118 :         return 0.0f;
; 1119 : #endif
; 1120 : 
; 1121 :     return pV->x * pV->x + pV->y * pV->y;
; 1122 : }
; 1123 : 
; 1124 : D3DXINLINE FLOAT D3DXVec2Dot
; 1125 :     ( CONST D3DXVECTOR2 *pV1, CONST D3DXVECTOR2 *pV2 )
; 1126 : {
; 1127 : #ifdef D3DX_DEBUG
; 1128 :     if(!pV1 || !pV2)
; 1129 :         return 0.0f;
; 1130 : #endif
; 1131 : 
; 1132 :     return pV1->x * pV2->x + pV1->y * pV2->y;
; 1133 : }
; 1134 : 
; 1135 : D3DXINLINE FLOAT D3DXVec2CCW
; 1136 :     ( CONST D3DXVECTOR2 *pV1, CONST D3DXVECTOR2 *pV2 )
; 1137 : {
; 1138 : #ifdef D3DX_DEBUG
; 1139 :     if(!pV1 || !pV2)
; 1140 :         return 0.0f;
; 1141 : #endif
; 1142 : 
; 1143 :     return pV1->x * pV2->y - pV1->y * pV2->x;
; 1144 : }
; 1145 : 
; 1146 : D3DXINLINE D3DXVECTOR2* D3DXVec2Add
; 1147 :     ( D3DXVECTOR2 *pOut, CONST D3DXVECTOR2 *pV1, CONST D3DXVECTOR2 *pV2 )
; 1148 : {
; 1149 : #ifdef D3DX_DEBUG
; 1150 :     if(!pOut || !pV1 || !pV2)
; 1151 :         return NULL;
; 1152 : #endif
; 1153 : 
; 1154 :     pOut->x = pV1->x + pV2->x;
; 1155 :     pOut->y = pV1->y + pV2->y;
; 1156 :     return pOut;
; 1157 : }
; 1158 : 
; 1159 : D3DXINLINE D3DXVECTOR2* D3DXVec2Subtract
; 1160 :     ( D3DXVECTOR2 *pOut, CONST D3DXVECTOR2 *pV1, CONST D3DXVECTOR2 *pV2 )
; 1161 : {
; 1162 : #ifdef D3DX_DEBUG
; 1163 :     if(!pOut || !pV1 || !pV2)
; 1164 :         return NULL;
; 1165 : #endif
; 1166 : 
; 1167 :     pOut->x = pV1->x - pV2->x;
; 1168 :     pOut->y = pV1->y - pV2->y;
; 1169 :     return pOut;
; 1170 : }
; 1171 : 
; 1172 : D3DXINLINE D3DXVECTOR2* D3DXVec2Minimize
; 1173 :     ( D3DXVECTOR2 *pOut, CONST D3DXVECTOR2 *pV1, CONST D3DXVECTOR2 *pV2 )
; 1174 : {
; 1175 : #ifdef D3DX_DEBUG
; 1176 :     if(!pOut || !pV1 || !pV2)
; 1177 :         return NULL;
; 1178 : #endif
; 1179 : 
; 1180 :     pOut->x = pV1->x < pV2->x ? pV1->x : pV2->x;
; 1181 :     pOut->y = pV1->y < pV2->y ? pV1->y : pV2->y;
; 1182 :     return pOut;
; 1183 : }
; 1184 : 
; 1185 : D3DXINLINE D3DXVECTOR2* D3DXVec2Maximize
; 1186 :     ( D3DXVECTOR2 *pOut, CONST D3DXVECTOR2 *pV1, CONST D3DXVECTOR2 *pV2 )
; 1187 : {
; 1188 : #ifdef D3DX_DEBUG
; 1189 :     if(!pOut || !pV1 || !pV2)
; 1190 :         return NULL;
; 1191 : #endif
; 1192 : 
; 1193 :     pOut->x = pV1->x > pV2->x ? pV1->x : pV2->x;
; 1194 :     pOut->y = pV1->y > pV2->y ? pV1->y : pV2->y;
; 1195 :     return pOut;
; 1196 : }
; 1197 : 
; 1198 : D3DXINLINE D3DXVECTOR2* D3DXVec2Scale
; 1199 :     ( D3DXVECTOR2 *pOut, CONST D3DXVECTOR2 *pV, FLOAT s )
; 1200 : {
; 1201 : #ifdef D3DX_DEBUG
; 1202 :     if(!pOut || !pV)
; 1203 :         return NULL;
; 1204 : #endif
; 1205 : 
; 1206 :     pOut->x = pV->x * s;
; 1207 :     pOut->y = pV->y * s;
; 1208 :     return pOut;
; 1209 : }
; 1210 : 
; 1211 : D3DXINLINE D3DXVECTOR2* D3DXVec2Lerp
; 1212 :     ( D3DXVECTOR2 *pOut, CONST D3DXVECTOR2 *pV1, CONST D3DXVECTOR2 *pV2,
; 1213 :       FLOAT s )
; 1214 : {
; 1215 : #ifdef D3DX_DEBUG
; 1216 :     if(!pOut || !pV1 || !pV2)
; 1217 :         return NULL;
; 1218 : #endif
; 1219 : 
; 1220 :     pOut->x = pV1->x + s * (pV2->x - pV1->x);
; 1221 :     pOut->y = pV1->y + s * (pV2->y - pV1->y);
; 1222 :     return pOut;
; 1223 : }
; 1224 : 
; 1225 : 
; 1226 : //--------------------------
; 1227 : // 3D Vector
; 1228 : //--------------------------
; 1229 : 
; 1230 : D3DXINLINE FLOAT D3DXVec3Length
; 1231 :     ( CONST D3DXVECTOR3 *pV )
; 1232 : {
; 1233 : #ifdef D3DX_DEBUG
; 1234 :     if(!pV)
; 1235 :         return 0.0f;
; 1236 : #endif
; 1237 : 
; 1238 : #ifdef __cplusplus
; 1239 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  00070	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00074	0f 57 c0	 xorps	 xmm0, xmm0
  00077	f3 0f 59 e4	 mulss	 xmm4, xmm4
  0007b	f3 0f 59 db	 mulss	 xmm3, xmm3
  0007f	f3 0f 58 d9	 addss	 xmm3, xmm1
  00083	f3 0f 58 dc	 addss	 xmm3, xmm4
; File a:\vs\vc\include\math.h

; 775  :     return (float)sqrt(_X);

  00087	f3 0f 5a c3	 cvtss2sd xmm0, xmm3
  0008b	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00090	e8 00 00 00 00	 call	 _sqrt
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp

; 90   : 	m_v3Center = vCamera + vLook * (fNear+fViewLen*0.5f);

  00095	f3 0f 10 5d 10	 movss	 xmm3, DWORD PTR _fFar$[ebp]
; File a:\vs\vc\include\math.h

; 775  :     return (float)sqrt(_X);

  0009a	83 c4 08	 add	 esp, 8
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp

; 90   : 	m_v3Center = vCamera + vLook * (fNear+fViewLen*0.5f);

  0009d	f3 0f 59 1d 00
	00 00 00	 mulss	 xmm3, DWORD PTR __real@3f000000

; 91   : 	BuildViewFrustum(mat);

  000a5	8b ce		 mov	 ecx, esi
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  000a7	8b 45 20	 mov	 eax, DWORD PTR _vLook$[ebp]
; File a:\vs\vc\include\math.h

; 775  :     return (float)sqrt(_X);

  000aa	d9 5d 14	 fstp	 DWORD PTR tv401[ebp]
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp

; 89   : 	m_fRadius = D3DXVec3Length(&PQ);

  000ad	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR tv401[ebp]

; 90   : 	m_v3Center = vCamera + vLook * (fNear+fViewLen*0.5f);

  000b2	f3 0f 58 5d 0c	 addss	 xmm3, DWORD PTR _fNear$[ebp]

; 91   : 	BuildViewFrustum(mat);

  000b7	ff 75 08	 push	 DWORD PTR _mat$[ebp]
  000ba	f3 0f 11 46 10	 movss	 DWORD PTR [esi+16], xmm0
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  000bf	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000c3	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  000c8	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]

; 183  : }
; 184  : 
; 185  : 
; 186  : // casting
; 187  : D3DXINLINE
; 188  : D3DXVECTOR3::operator FLOAT* ()
; 189  : {
; 190  :     return (FLOAT *) &x;
; 191  : }
; 192  : 
; 193  : D3DXINLINE
; 194  : D3DXVECTOR3::operator CONST FLOAT* () const
; 195  : {
; 196  :     return (CONST FLOAT *) &x;
; 197  : }
; 198  : 
; 199  : 
; 200  : // assignment operators
; 201  : D3DXINLINE D3DXVECTOR3&
; 202  : D3DXVECTOR3::operator += ( CONST D3DXVECTOR3& v )
; 203  : {
; 204  :     x += v.x;
; 205  :     y += v.y;
; 206  :     z += v.z;
; 207  :     return *this;
; 208  : }
; 209  : 
; 210  : D3DXINLINE D3DXVECTOR3&
; 211  : D3DXVECTOR3::operator -= ( CONST D3DXVECTOR3& v )
; 212  : {
; 213  :     x -= v.x;
; 214  :     y -= v.y;
; 215  :     z -= v.z;
; 216  :     return *this;
; 217  : }
; 218  : 
; 219  : D3DXINLINE D3DXVECTOR3&
; 220  : D3DXVECTOR3::operator *= ( FLOAT f )
; 221  : {
; 222  :     x *= f;
; 223  :     y *= f;
; 224  :     z *= f;
; 225  :     return *this;
; 226  : }
; 227  : 
; 228  : D3DXINLINE D3DXVECTOR3&
; 229  : D3DXVECTOR3::operator /= ( FLOAT f )
; 230  : {
; 231  :     FLOAT fInv = 1.0f / f;
; 232  :     x *= fInv;
; 233  :     y *= fInv;
; 234  :     z *= fInv;
; 235  :     return *this;
; 236  : }
; 237  : 
; 238  : 
; 239  : // unary operators
; 240  : D3DXINLINE D3DXVECTOR3
; 241  : D3DXVECTOR3::operator + () const
; 242  : {
; 243  :     return *this;
; 244  : }
; 245  : 
; 246  : D3DXINLINE D3DXVECTOR3
; 247  : D3DXVECTOR3::operator - () const
; 248  : {
; 249  :     return D3DXVECTOR3(-x, -y, -z);
; 250  : }
; 251  : 
; 252  : 
; 253  : // binary operators
; 254  : D3DXINLINE D3DXVECTOR3
; 255  : D3DXVECTOR3::operator + ( CONST D3DXVECTOR3& v ) const
; 256  : {
; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  000cd	8b 45 1c	 mov	 eax, DWORD PTR _vCamera$[ebp]

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  000d0	f3 0f 59 c3	 mulss	 xmm0, xmm3
  000d4	f3 0f 59 cb	 mulss	 xmm1, xmm3

; 183  : }
; 184  : 
; 185  : 
; 186  : // casting
; 187  : D3DXINLINE
; 188  : D3DXVECTOR3::operator FLOAT* ()
; 189  : {
; 190  :     return (FLOAT *) &x;
; 191  : }
; 192  : 
; 193  : D3DXINLINE
; 194  : D3DXVECTOR3::operator CONST FLOAT* () const
; 195  : {
; 196  :     return (CONST FLOAT *) &x;
; 197  : }
; 198  : 
; 199  : 
; 200  : // assignment operators
; 201  : D3DXINLINE D3DXVECTOR3&
; 202  : D3DXVECTOR3::operator += ( CONST D3DXVECTOR3& v )
; 203  : {
; 204  :     x += v.x;
; 205  :     y += v.y;
; 206  :     z += v.z;
; 207  :     return *this;
; 208  : }
; 209  : 
; 210  : D3DXINLINE D3DXVECTOR3&
; 211  : D3DXVECTOR3::operator -= ( CONST D3DXVECTOR3& v )
; 212  : {
; 213  :     x -= v.x;
; 214  :     y -= v.y;
; 215  :     z -= v.z;
; 216  :     return *this;
; 217  : }
; 218  : 
; 219  : D3DXINLINE D3DXVECTOR3&
; 220  : D3DXVECTOR3::operator *= ( FLOAT f )
; 221  : {
; 222  :     x *= f;
; 223  :     y *= f;
; 224  :     z *= f;
; 225  :     return *this;
; 226  : }
; 227  : 
; 228  : D3DXINLINE D3DXVECTOR3&
; 229  : D3DXVECTOR3::operator /= ( FLOAT f )
; 230  : {
; 231  :     FLOAT fInv = 1.0f / f;
; 232  :     x *= fInv;
; 233  :     y *= fInv;
; 234  :     z *= fInv;
; 235  :     return *this;
; 236  : }
; 237  : 
; 238  : 
; 239  : // unary operators
; 240  : D3DXINLINE D3DXVECTOR3
; 241  : D3DXVECTOR3::operator + () const
; 242  : {
; 243  :     return *this;
; 244  : }
; 245  : 
; 246  : D3DXINLINE D3DXVECTOR3
; 247  : D3DXVECTOR3::operator - () const
; 248  : {
; 249  :     return D3DXVECTOR3(-x, -y, -z);
; 250  : }
; 251  : 
; 252  : 
; 253  : // binary operators
; 254  : D3DXINLINE D3DXVECTOR3
; 255  : D3DXVECTOR3::operator + ( CONST D3DXVECTOR3& v ) const
; 256  : {
; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  000d8	f3 0f 10 20	 movss	 xmm4, DWORD PTR [eax]

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  000dc	f3 0f 59 d3	 mulss	 xmm2, xmm3

; 183  : }
; 184  : 
; 185  : 
; 186  : // casting
; 187  : D3DXINLINE
; 188  : D3DXVECTOR3::operator FLOAT* ()
; 189  : {
; 190  :     return (FLOAT *) &x;
; 191  : }
; 192  : 
; 193  : D3DXINLINE
; 194  : D3DXVECTOR3::operator CONST FLOAT* () const
; 195  : {
; 196  :     return (CONST FLOAT *) &x;
; 197  : }
; 198  : 
; 199  : 
; 200  : // assignment operators
; 201  : D3DXINLINE D3DXVECTOR3&
; 202  : D3DXVECTOR3::operator += ( CONST D3DXVECTOR3& v )
; 203  : {
; 204  :     x += v.x;
; 205  :     y += v.y;
; 206  :     z += v.z;
; 207  :     return *this;
; 208  : }
; 209  : 
; 210  : D3DXINLINE D3DXVECTOR3&
; 211  : D3DXVECTOR3::operator -= ( CONST D3DXVECTOR3& v )
; 212  : {
; 213  :     x -= v.x;
; 214  :     y -= v.y;
; 215  :     z -= v.z;
; 216  :     return *this;
; 217  : }
; 218  : 
; 219  : D3DXINLINE D3DXVECTOR3&
; 220  : D3DXVECTOR3::operator *= ( FLOAT f )
; 221  : {
; 222  :     x *= f;
; 223  :     y *= f;
; 224  :     z *= f;
; 225  :     return *this;
; 226  : }
; 227  : 
; 228  : D3DXINLINE D3DXVECTOR3&
; 229  : D3DXVECTOR3::operator /= ( FLOAT f )
; 230  : {
; 231  :     FLOAT fInv = 1.0f / f;
; 232  :     x *= fInv;
; 233  :     y *= fInv;
; 234  :     z *= fInv;
; 235  :     return *this;
; 236  : }
; 237  : 
; 238  : 
; 239  : // unary operators
; 240  : D3DXINLINE D3DXVECTOR3
; 241  : D3DXVECTOR3::operator + () const
; 242  : {
; 243  :     return *this;
; 244  : }
; 245  : 
; 246  : D3DXINLINE D3DXVECTOR3
; 247  : D3DXVECTOR3::operator - () const
; 248  : {
; 249  :     return D3DXVECTOR3(-x, -y, -z);
; 250  : }
; 251  : 
; 252  : 
; 253  : // binary operators
; 254  : D3DXINLINE D3DXVECTOR3
; 255  : D3DXVECTOR3::operator + ( CONST D3DXVECTOR3& v ) const
; 256  : {
; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  000e0	f3 0f 58 e0	 addss	 xmm4, xmm0
  000e4	f3 0f 10 58 04	 movss	 xmm3, DWORD PTR [eax+4]
  000e9	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  000ee	f3 0f 58 d9	 addss	 xmm3, xmm1
  000f2	f3 0f 58 c2	 addss	 xmm0, xmm2
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp

; 90   : 	m_v3Center = vCamera + vLook * (fNear+fViewLen*0.5f);

  000f6	0f 14 e3	 unpcklps xmm4, xmm3
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  000f9	f3 0f 11 45 fc	 movss	 DWORD PTR $T1[ebp+8], xmm0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp

; 90   : 	m_v3Center = vCamera + vLook * (fNear+fViewLen*0.5f);

  000fe	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp+8]
  00101	66 0f d6 66 04	 movq	 QWORD PTR [esi+4], xmm4
  00106	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 91   : 	BuildViewFrustum(mat);

  00109	e8 00 00 00 00	 call	 ?BuildViewFrustum@Frustum@@QAEXAAUD3DXMATRIX@@@Z ; Frustum::BuildViewFrustum

; 92   : 	m_bUsingSphere = true;

  0010e	c6 06 01	 mov	 BYTE PTR [esi], 1
  00111	5e		 pop	 esi

; 93   : }

  00112	8b e5		 mov	 esp, ebp
  00114	5d		 pop	 ebp
  00115	c2 1c 00	 ret	 28			; 0000001cH
?BuildViewFrustum2@Frustum@@QAEXAAUD3DXMATRIX@@MMMMABUD3DXVECTOR3@@1@Z ENDP ; Frustum::BuildViewFrustum2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp
;	COMDAT ?BuildViewFrustum@Frustum@@QAEXAAUD3DXMATRIX@@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
$T5 = -16						; size = 16
$T6 = -16						; size = 16
_mat$ = 8						; size = 4
?BuildViewFrustum@Frustum@@QAEXAAUD3DXMATRIX@@@Z PROC	; Frustum::BuildViewFrustum, COMDAT
; _this$ = ecx

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 69   : 	m_plane[0] = D3DXPLANE(          mat._13,           mat._23,           mat._33,           mat._43);

  00006	8b 45 08	 mov	 eax, DWORD PTR _mat$[ebp]
  00009	c6 01 00	 mov	 BYTE PTR [ecx], 0
  0000c	56		 push	 esi
  0000d	8d 71 14	 lea	 esi, DWORD PTR [ecx+20]
  00010	f3 0f 10 58 08	 movss	 xmm3, DWORD PTR [eax+8]
  00015	f3 0f 10 50 18	 movss	 xmm2, DWORD PTR [eax+24]
  0001a	f3 0f 10 48 28	 movss	 xmm1, DWORD PTR [eax+40]
  0001f	f3 0f 10 40 38	 movss	 xmm0, DWORD PTR [eax+56]
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 829  :     a = fa;

  00024	f3 0f 11 5d f0	 movss	 DWORD PTR $T6[ebp], xmm3

; 830  :     b = fb;

  00029	f3 0f 11 55 f4	 movss	 DWORD PTR $T6[ebp+4], xmm2

; 831  :     c = fc;

  0002e	f3 0f 11 4d f8	 movss	 DWORD PTR $T6[ebp+8], xmm1

; 832  :     d = fd;

  00033	f3 0f 11 45 fc	 movss	 DWORD PTR $T6[ebp+12], xmm0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp

; 69   : 	m_plane[0] = D3DXPLANE(          mat._13,           mat._23,           mat._33,           mat._43);

  00038	f3 0f 6f 45 f0	 movdqu	 xmm0, XMMWORD PTR $T6[ebp]
  0003d	57		 push	 edi
  0003e	f3 0f 7f 06	 movdqu	 XMMWORD PTR [esi], xmm0

; 70   : 	m_plane[1] = D3DXPLANE(mat._14 - mat._13, mat._24 - mat._23, mat._34 - mat._33, mat._44 - mat._43);

  00042	f3 0f 10 58 0c	 movss	 xmm3, DWORD PTR [eax+12]
  00047	f3 0f 5c 58 08	 subss	 xmm3, DWORD PTR [eax+8]
  0004c	f3 0f 10 50 1c	 movss	 xmm2, DWORD PTR [eax+28]
  00051	f3 0f 5c 50 18	 subss	 xmm2, DWORD PTR [eax+24]
  00056	f3 0f 10 48 2c	 movss	 xmm1, DWORD PTR [eax+44]
  0005b	f3 0f 5c 48 28	 subss	 xmm1, DWORD PTR [eax+40]
  00060	f3 0f 10 40 3c	 movss	 xmm0, DWORD PTR [eax+60]
  00065	f3 0f 5c 40 38	 subss	 xmm0, DWORD PTR [eax+56]
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 829  :     a = fa;

  0006a	f3 0f 11 5d f0	 movss	 DWORD PTR $T5[ebp], xmm3

; 830  :     b = fb;

  0006f	f3 0f 11 55 f4	 movss	 DWORD PTR $T5[ebp+4], xmm2

; 831  :     c = fc;

  00074	f3 0f 11 4d f8	 movss	 DWORD PTR $T5[ebp+8], xmm1

; 832  :     d = fd;

  00079	f3 0f 11 45 fc	 movss	 DWORD PTR $T5[ebp+12], xmm0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp

; 70   : 	m_plane[1] = D3DXPLANE(mat._14 - mat._13, mat._24 - mat._23, mat._34 - mat._33, mat._44 - mat._43);

  0007e	f3 0f 6f 45 f0	 movdqu	 xmm0, XMMWORD PTR $T5[ebp]
  00083	f3 0f 7f 41 24	 movdqu	 XMMWORD PTR [ecx+36], xmm0

; 72   : 	m_plane[2] = D3DXPLANE(mat._14 + mat._11, mat._24 + mat._21, mat._34 + mat._31, mat._44 + mat._41);

  00088	f3 0f 10 18	 movss	 xmm3, DWORD PTR [eax]
  0008c	f3 0f 58 58 0c	 addss	 xmm3, DWORD PTR [eax+12]
  00091	f3 0f 10 50 10	 movss	 xmm2, DWORD PTR [eax+16]
  00096	f3 0f 58 50 1c	 addss	 xmm2, DWORD PTR [eax+28]
  0009b	f3 0f 10 48 20	 movss	 xmm1, DWORD PTR [eax+32]
  000a0	f3 0f 58 48 2c	 addss	 xmm1, DWORD PTR [eax+44]
  000a5	f3 0f 10 40 30	 movss	 xmm0, DWORD PTR [eax+48]
  000aa	f3 0f 58 40 3c	 addss	 xmm0, DWORD PTR [eax+60]
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 829  :     a = fa;

  000af	f3 0f 11 5d f0	 movss	 DWORD PTR $T4[ebp], xmm3

; 830  :     b = fb;

  000b4	f3 0f 11 55 f4	 movss	 DWORD PTR $T4[ebp+4], xmm2

; 831  :     c = fc;

  000b9	f3 0f 11 4d f8	 movss	 DWORD PTR $T4[ebp+8], xmm1

; 832  :     d = fd;

  000be	f3 0f 11 45 fc	 movss	 DWORD PTR $T4[ebp+12], xmm0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp

; 72   : 	m_plane[2] = D3DXPLANE(mat._14 + mat._11, mat._24 + mat._21, mat._34 + mat._31, mat._44 + mat._41);

  000c3	f3 0f 6f 45 f0	 movdqu	 xmm0, XMMWORD PTR $T4[ebp]
  000c8	f3 0f 7f 41 34	 movdqu	 XMMWORD PTR [ecx+52], xmm0

; 73   : 	m_plane[3] = D3DXPLANE(mat._14 - mat._11, mat._24 - mat._21, mat._34 - mat._31, mat._44 - mat._41);

  000cd	f3 0f 10 58 0c	 movss	 xmm3, DWORD PTR [eax+12]
  000d2	f3 0f 5c 18	 subss	 xmm3, DWORD PTR [eax]
  000d6	f3 0f 10 50 1c	 movss	 xmm2, DWORD PTR [eax+28]
  000db	f3 0f 5c 50 10	 subss	 xmm2, DWORD PTR [eax+16]
  000e0	f3 0f 10 48 2c	 movss	 xmm1, DWORD PTR [eax+44]
  000e5	f3 0f 5c 48 20	 subss	 xmm1, DWORD PTR [eax+32]
  000ea	f3 0f 10 40 3c	 movss	 xmm0, DWORD PTR [eax+60]
  000ef	f3 0f 5c 40 30	 subss	 xmm0, DWORD PTR [eax+48]
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 829  :     a = fa;

  000f4	f3 0f 11 5d f0	 movss	 DWORD PTR $T3[ebp], xmm3

; 830  :     b = fb;

  000f9	f3 0f 11 55 f4	 movss	 DWORD PTR $T3[ebp+4], xmm2

; 831  :     c = fc;

  000fe	f3 0f 11 4d f8	 movss	 DWORD PTR $T3[ebp+8], xmm1

; 832  :     d = fd;

  00103	f3 0f 11 45 fc	 movss	 DWORD PTR $T3[ebp+12], xmm0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp

; 73   : 	m_plane[3] = D3DXPLANE(mat._14 - mat._11, mat._24 - mat._21, mat._34 - mat._31, mat._44 - mat._41);

  00108	f3 0f 6f 45 f0	 movdqu	 xmm0, XMMWORD PTR $T3[ebp]
  0010d	f3 0f 7f 41 44	 movdqu	 XMMWORD PTR [ecx+68], xmm0

; 74   : 	m_plane[4] = D3DXPLANE(mat._14 + mat._12, mat._24 + mat._22, mat._34 + mat._32, mat._44 + mat._42);

  00112	f3 0f 10 58 0c	 movss	 xmm3, DWORD PTR [eax+12]
  00117	f3 0f 10 50 1c	 movss	 xmm2, DWORD PTR [eax+28]
  0011c	f3 0f 10 48 2c	 movss	 xmm1, DWORD PTR [eax+44]
  00121	f3 0f 10 40 3c	 movss	 xmm0, DWORD PTR [eax+60]
  00126	f3 0f 58 40 34	 addss	 xmm0, DWORD PTR [eax+52]
  0012b	f3 0f 58 58 04	 addss	 xmm3, DWORD PTR [eax+4]
  00130	f3 0f 58 50 14	 addss	 xmm2, DWORD PTR [eax+20]
  00135	f3 0f 58 48 24	 addss	 xmm1, DWORD PTR [eax+36]
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 832  :     d = fd;

  0013a	f3 0f 11 45 fc	 movss	 DWORD PTR $T2[ebp+12], xmm0
  0013f	f3 0f 11 5d f0	 movss	 DWORD PTR $T2[ebp], xmm3
  00144	f3 0f 11 55 f4	 movss	 DWORD PTR $T2[ebp+4], xmm2
  00149	f3 0f 11 4d f8	 movss	 DWORD PTR $T2[ebp+8], xmm1
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp

; 74   : 	m_plane[4] = D3DXPLANE(mat._14 + mat._12, mat._24 + mat._22, mat._34 + mat._32, mat._44 + mat._42);

  0014e	f3 0f 6f 45 f0	 movdqu	 xmm0, XMMWORD PTR $T2[ebp]
  00153	f3 0f 7f 41 54	 movdqu	 XMMWORD PTR [ecx+84], xmm0

; 75   : 	m_plane[5] = D3DXPLANE(mat._14 - mat._12, mat._24 - mat._22, mat._34 - mat._32, mat._44 - mat._42);

  00158	f3 0f 10 58 0c	 movss	 xmm3, DWORD PTR [eax+12]
  0015d	f3 0f 10 50 1c	 movss	 xmm2, DWORD PTR [eax+28]
  00162	f3 0f 5c 58 04	 subss	 xmm3, DWORD PTR [eax+4]
  00167	f3 0f 5c 50 14	 subss	 xmm2, DWORD PTR [eax+20]
  0016c	f3 0f 10 48 2c	 movss	 xmm1, DWORD PTR [eax+44]
  00171	f3 0f 10 40 3c	 movss	 xmm0, DWORD PTR [eax+60]
  00176	f3 0f 5c 48 24	 subss	 xmm1, DWORD PTR [eax+36]
  0017b	f3 0f 5c 40 34	 subss	 xmm0, DWORD PTR [eax+52]
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 829  :     a = fa;

  00180	f3 0f 11 5d f0	 movss	 DWORD PTR $T1[ebp], xmm3

; 830  :     b = fb;

  00185	f3 0f 11 55 f4	 movss	 DWORD PTR $T1[ebp+4], xmm2

; 831  :     c = fc;

  0018a	f3 0f 11 4d f8	 movss	 DWORD PTR $T1[ebp+8], xmm1
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp

; 68   : 	m_bUsingSphere = false;

  0018f	bf 06 00 00 00	 mov	 edi, 6
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 832  :     d = fd;

  00194	f3 0f 11 45 fc	 movss	 DWORD PTR $T1[ebp+12], xmm0
; File a:\from c\desktop\serwer\source\source client\client\spherelib\frustum.cpp

; 75   : 	m_plane[5] = D3DXPLANE(mat._14 - mat._12, mat._24 - mat._22, mat._34 - mat._32, mat._44 - mat._42);

  00199	f3 0f 6f 45 f0	 movdqu	 xmm0, XMMWORD PTR $T1[ebp]
  0019e	f3 0f 7f 41 64	 movdqu	 XMMWORD PTR [ecx+100], xmm0
$LL3@BuildViewF:

; 76   : 
; 77   : 	for(int i=0;i<6;i++)
; 78   : 		D3DXPlaneNormalize(&m_plane[i],&m_plane[i]);

  001a3	56		 push	 esi
  001a4	56		 push	 esi
  001a5	e8 00 00 00 00	 call	 _D3DXPlaneNormalize@8
  001aa	83 c6 10	 add	 esi, 16			; 00000010H
  001ad	4f		 dec	 edi
  001ae	75 f3		 jne	 SHORT $LL3@BuildViewF
  001b0	5f		 pop	 edi
  001b1	5e		 pop	 esi

; 79   : }

  001b2	8b e5		 mov	 esp, ebp
  001b4	5d		 pop	 ebp
  001b5	c2 04 00	 ret	 4
?BuildViewFrustum@Frustum@@QAEXAAUD3DXMATRIX@@@Z ENDP	; Frustum::BuildViewFrustum
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
;	COMDAT ?D3DXPlaneDotCoord@@YAMPBUD3DXPLANE@@PBUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
tv153 = 8						; size = 4
_pP$ = 8						; size = 4
_pV$ = 12						; size = 4
?D3DXPlaneDotCoord@@YAMPBUD3DXPLANE@@PBUD3DXVECTOR3@@@Z PROC ; D3DXPlaneDotCoord, COMDAT

; 1641 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1642 : #ifdef D3DX_DEBUG
; 1643 :     if(!pP || !pV)
; 1644 :         return 0.0f;
; 1645 : #endif
; 1646 : 
; 1647 :     return pP->a * pV->x + pP->b * pV->y + pP->c * pV->z + pP->d;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pP$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR _pV$[ebp]
  00009	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0000d	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  00012	f3 0f 59 48 04	 mulss	 xmm1, DWORD PTR [eax+4]
  00017	f3 0f 59 00	 mulss	 xmm0, DWORD PTR [eax]
  0001b	f3 0f 58 c8	 addss	 xmm1, xmm0
  0001f	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00024	f3 0f 59 40 08	 mulss	 xmm0, DWORD PTR [eax+8]
  00029	f3 0f 58 c8	 addss	 xmm1, xmm0
  0002d	f3 0f 58 49 0c	 addss	 xmm1, DWORD PTR [ecx+12]
  00032	f3 0f 11 4d 08	 movss	 DWORD PTR tv153[ebp], xmm1
  00037	d9 45 08	 fld	 DWORD PTR tv153[ebp]

; 1648 : }

  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?D3DXPlaneDotCoord@@YAMPBUD3DXPLANE@@PBUD3DXVECTOR3@@@Z ENDP ; D3DXPlaneDotCoord
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
;	COMDAT ?D3DXVec3LengthSq@@YAMPBUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
tv160 = 8						; size = 4
_pV$ = 8						; size = 4
?D3DXVec3LengthSq@@YAMPBUD3DXVECTOR3@@@Z PROC		; D3DXVec3LengthSq, COMDAT

; 1247 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1248 : #ifdef D3DX_DEBUG
; 1249 :     if(!pV)
; 1250 :         return 0.0f;
; 1251 : #endif
; 1252 : 
; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pV$[ebp]
  00006	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  0000b	f3 0f 10 10	 movss	 xmm2, DWORD PTR [eax]
  0000f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00014	f3 0f 59 d2	 mulss	 xmm2, xmm2
  00018	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0001c	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00020	f3 0f 58 d1	 addss	 xmm2, xmm1
  00024	f3 0f 58 d0	 addss	 xmm2, xmm0
  00028	f3 0f 11 55 08	 movss	 DWORD PTR tv160[ebp], xmm2
  0002d	d9 45 08	 fld	 DWORD PTR tv160[ebp]

; 1254 : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?D3DXVec3LengthSq@@YAMPBUD3DXVECTOR3@@@Z ENDP		; D3DXVec3LengthSq
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\vs\vc\include\math.h
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
;	COMDAT ?D3DXVec3Length@@YAMPBUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
tv174 = 8						; size = 4
_pV$ = 8						; size = 4
?D3DXVec3Length@@YAMPBUD3DXVECTOR3@@@Z PROC		; D3DXVec3Length, COMDAT

; 1232 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1239 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  00003	8b 45 08	 mov	 eax, DWORD PTR _pV$[ebp]
; File a:\vs\vc\include\math.h

; 775  :     return (float)sqrt(_X);

  00006	83 ec 08	 sub	 esp, 8
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 1239 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  00009	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  0000e	f3 0f 10 10	 movss	 xmm2, DWORD PTR [eax]
  00012	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00017	f3 0f 59 d2	 mulss	 xmm2, xmm2
  0001b	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0001f	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00023	f3 0f 58 d1	 addss	 xmm2, xmm1
  00027	f3 0f 58 d0	 addss	 xmm2, xmm0
; File a:\vs\vc\include\math.h

; 775  :     return (float)sqrt(_X);

  0002b	0f 5a c2	 cvtps2pd xmm0, xmm2
  0002e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00033	e8 00 00 00 00	 call	 _sqrt
  00038	d9 5d 08	 fstp	 DWORD PTR tv174[ebp]
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 1239 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  0003b	d9 45 08	 fld	 DWORD PTR tv174[ebp]
; File a:\vs\vc\include\math.h

; 775  :     return (float)sqrt(_X);

  0003e	83 c4 08	 add	 esp, 8
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 1243 : }

  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
?D3DXVec3Length@@YAMPBUD3DXVECTOR3@@@Z ENDP		; D3DXVec3Length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
;	COMDAT ??0D3DXPLANE@@QAE@MMMM@Z
_TEXT	SEGMENT
_fa$ = 8						; size = 4
_fb$ = 12						; size = 4
_fc$ = 16						; size = 4
_fd$ = 20						; size = 4
??0D3DXPLANE@@QAE@MMMM@Z PROC				; D3DXPLANE::D3DXPLANE, COMDAT
; _this$ = ecx

; 828  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 829  :     a = fa;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fa$[ebp]

; 830  :     b = fb;
; 831  :     c = fc;
; 832  :     d = fd;
; 833  : }

  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fb$[ebp]
  00013	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0
  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fc$[ebp]
  0001d	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0
  00022	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _fd$[ebp]
  00027	f3 0f 11 41 0c	 movss	 DWORD PTR [ecx+12], xmm0
  0002c	5d		 pop	 ebp
  0002d	c2 10 00	 ret	 16			; 00000010H
??0D3DXPLANE@@QAE@MMMM@Z ENDP				; D3DXPLANE::D3DXPLANE
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
;	COMDAT ??DD3DXVECTOR3@@QBE?AU0@M@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_f$ = 12						; size = 4
??DD3DXVECTOR3@@QBE?AU0@M@Z PROC			; D3DXVECTOR3::operator*, COMDAT
; _this$ = ecx

; 268  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00003	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  00008	f3 0f 10 19	 movss	 xmm3, DWORD PTR [ecx]
  0000c	f3 0f 10 51 04	 movss	 xmm2, DWORD PTR [ecx+4]
  00011	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]

; 180  :     x = fx;

  00016	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00019	f3 0f 59 d8	 mulss	 xmm3, xmm0
  0001d	f3 0f 59 d0	 mulss	 xmm2, xmm0
  00021	f3 0f 59 c8	 mulss	 xmm1, xmm0

; 180  :     x = fx;

  00025	f3 0f 11 18	 movss	 DWORD PTR [eax], xmm3

; 181  :     y = fy;

  00029	f3 0f 11 50 04	 movss	 DWORD PTR [eax+4], xmm2

; 182  :     z = fz;

  0002e	f3 0f 11 48 08	 movss	 DWORD PTR [eax+8], xmm1

; 270  : }

  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
??DD3DXVECTOR3@@QBE?AU0@M@Z ENDP			; D3DXVECTOR3::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
;	COMDAT ??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z PROC			; D3DXVECTOR3::operator-, COMDAT
; _this$ = ecx

; 262  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  00006	f3 0f 10 11	 movss	 xmm2, DWORD PTR [ecx]
  0000a	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  0000f	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00014	f3 0f 5c 10	 subss	 xmm2, DWORD PTR [eax]
  00018	f3 0f 5c 48 04	 subss	 xmm1, DWORD PTR [eax+4]
  0001d	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]

; 180  :     x = fx;

  00022	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00025	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2

; 181  :     y = fy;

  00029	f3 0f 11 48 04	 movss	 DWORD PTR [eax+4], xmm1

; 182  :     z = fz;

  0002e	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 264  : }

  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
;	COMDAT ??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z PROC			; D3DXVECTOR3::operator+, COMDAT
; _this$ = ecx

; 256  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  00006	f3 0f 10 10	 movss	 xmm2, DWORD PTR [eax]
  0000a	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  0000f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]

; 180  :     x = fx;

  00014	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00017	f3 0f 58 11	 addss	 xmm2, DWORD PTR [ecx]
  0001b	f3 0f 58 49 04	 addss	 xmm1, DWORD PTR [ecx+4]
  00020	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]

; 180  :     x = fx;

  00025	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2

; 181  :     y = fy;

  00029	f3 0f 11 48 04	 movss	 DWORD PTR [eax+4], xmm1

; 182  :     z = fz;

  0002e	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 258  : }

  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator+
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 179  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 180  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]

; 181  :     y = fy;
; 182  :     z = fz;
; 183  : }

  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0
  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\math.h
;	COMDAT ?tan@@YAMM@Z
_TEXT	SEGMENT
tv129 = 8						; size = 4
__X$ = 8						; size = 4
?tan@@YAMM@Z PROC					; tan, COMDAT

; 1138 :         {return (tanf(_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __X$[ebp]

; 780  :     return (float)tan(_X);

  00008	83 ec 08	 sub	 esp, 8
  0000b	0f 5a c0	 cvtps2pd xmm0, xmm0
  0000e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00013	e8 00 00 00 00	 call	 _tan
  00018	d9 5d 08	 fstp	 DWORD PTR tv129[ebp]

; 1138 :         {return (tanf(_X)); }

  0001b	d9 45 08	 fld	 DWORD PTR tv129[ebp]

; 780  :     return (float)tan(_X);

  0001e	83 c4 08	 add	 esp, 8

; 1138 :         {return (tanf(_X)); }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
?tan@@YAMM@Z ENDP					; tan
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\math.h
;	COMDAT _tanf
_TEXT	SEGMENT
tv72 = 8						; size = 4
__X$ = 8						; size = 4
_tanf	PROC						; COMDAT

; 779  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __X$[ebp]

; 780  :     return (float)tan(_X);

  00008	83 ec 08	 sub	 esp, 8
  0000b	0f 5a c0	 cvtps2pd xmm0, xmm0
  0000e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00013	e8 00 00 00 00	 call	 _tan
  00018	d9 5d 08	 fstp	 DWORD PTR tv72[ebp]
  0001b	d9 45 08	 fld	 DWORD PTR tv72[ebp]
  0001e	83 c4 08	 add	 esp, 8

; 781  : }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
_tanf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv72 = 8						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 774  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __X$[ebp]

; 775  :     return (float)sqrt(_X);

  00008	83 ec 08	 sub	 esp, 8
  0000b	0f 5a c0	 cvtps2pd xmm0, xmm0
  0000e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00013	e8 00 00 00 00	 call	 _sqrt
  00018	d9 5d 08	 fstp	 DWORD PTR tv72[ebp]
  0001b	d9 45 08	 fld	 DWORD PTR tv72[ebp]
  0001e	83 c4 08	 add	 esp, 8

; 776  : }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
END
