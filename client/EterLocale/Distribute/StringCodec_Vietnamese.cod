; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	A:\From C\Desktop\Serwer\Source\Source Client\client\EterLocale\StringCodec_Vietnamese.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_cp1258_to_unicode DW 00H
	DW	01H
	DW	02H
	DW	03H
	DW	04H
	DW	05H
	DW	06H
	DW	07H
	DW	08H
	DW	09H
	DW	0aH
	DW	0bH
	DW	0cH
	DW	0dH
	DW	0eH
	DW	0fH
	DW	010H
	DW	011H
	DW	012H
	DW	013H
	DW	014H
	DW	015H
	DW	016H
	DW	017H
	DW	018H
	DW	019H
	DW	01aH
	DW	01bH
	DW	01cH
	DW	01dH
	DW	01eH
	DW	01fH
	DW	020H
	DW	021H
	DW	022H
	DW	023H
	DW	024H
	DW	025H
	DW	026H
	DW	027H
	DW	028H
	DW	029H
	DW	02aH
	DW	02bH
	DW	02cH
	DW	02dH
	DW	02eH
	DW	02fH
	DW	030H
	DW	031H
	DW	032H
	DW	033H
	DW	034H
	DW	035H
	DW	036H
	DW	037H
	DW	038H
	DW	039H
	DW	03aH
	DW	03bH
	DW	03cH
	DW	03dH
	DW	03eH
	DW	03fH
	DW	040H
	DW	041H
	DW	042H
	DW	043H
	DW	044H
	DW	045H
	DW	046H
	DW	047H
	DW	048H
	DW	049H
	DW	04aH
	DW	04bH
	DW	04cH
	DW	04dH
	DW	04eH
	DW	04fH
	DW	050H
	DW	051H
	DW	052H
	DW	053H
	DW	054H
	DW	055H
	DW	056H
	DW	057H
	DW	058H
	DW	059H
	DW	05aH
	DW	05bH
	DW	05cH
	DW	05dH
	DW	05eH
	DW	05fH
	DW	060H
	DW	061H
	DW	062H
	DW	063H
	DW	064H
	DW	065H
	DW	066H
	DW	067H
	DW	068H
	DW	069H
	DW	06aH
	DW	06bH
	DW	06cH
	DW	06dH
	DW	06eH
	DW	06fH
	DW	070H
	DW	071H
	DW	072H
	DW	073H
	DW	074H
	DW	075H
	DW	076H
	DW	077H
	DW	078H
	DW	079H
	DW	07aH
	DW	07bH
	DW	07cH
	DW	07dH
	DW	07eH
	DW	07fH
	DW	020acH
	DW	081H
	DW	0201aH
	DW	0192H
	DW	0201eH
	DW	02026H
	DW	02020H
	DW	02021H
	DW	02c6H
	DW	02030H
	DW	08aH
	DW	02039H
	DW	0152H
	DW	08dH
	DW	08eH
	DW	08fH
	DW	090H
	DW	02018H
	DW	02019H
	DW	0201cH
	DW	0201dH
	DW	02022H
	DW	02013H
	DW	02014H
	DW	02dcH
	DW	02122H
	DW	09aH
	DW	0203aH
	DW	0153H
	DW	09dH
	DW	09eH
	DW	0178H
	DW	0a0H
	DW	0a1H
	DW	0a2H
	DW	0a3H
	DW	0a4H
	DW	0a5H
	DW	0a6H
	DW	0a7H
	DW	0a8H
	DW	0a9H
	DW	0aaH
	DW	0abH
	DW	0acH
	DW	0adH
	DW	0aeH
	DW	0afH
	DW	0b0H
	DW	0b1H
	DW	0b2H
	DW	0b3H
	DW	0b4H
	DW	0b5H
	DW	0b6H
	DW	0b7H
	DW	0b8H
	DW	0b9H
	DW	0baH
	DW	0bbH
	DW	0bcH
	DW	0bdH
	DW	0beH
	DW	0bfH
	DW	0c0H
	DW	0c1H
	DW	0c2H
	DW	0102H
	DW	0c4H
	DW	0c5H
	DW	0c6H
	DW	0c7H
	DW	0c8H
	DW	0c9H
	DW	0caH
	DW	0cbH
	DW	0300H
	DW	0cdH
	DW	0ceH
	DW	0cfH
	DW	0110H
	DW	0d1H
	DW	0309H
	DW	0d3H
	DW	0d4H
	DW	01a0H
	DW	0d6H
	DW	0d7H
	DW	0d8H
	DW	0d9H
	DW	0daH
	DW	0dbH
	DW	0dcH
	DW	01afH
	DW	0303H
	DW	0dfH
	DW	0e0H
	DW	0e1H
	DW	0e2H
	DW	0103H
	DW	0e4H
	DW	0e5H
	DW	0e6H
	DW	0e7H
	DW	0e8H
	DW	0e9H
	DW	0eaH
	DW	0ebH
	DW	0301H
	DW	0edH
	DW	0eeH
	DW	0efH
	DW	0111H
	DW	0f1H
	DW	0323H
	DW	0f3H
	DW	0f4H
	DW	01a1H
	DW	0f6H
	DW	0f7H
	DW	0f8H
	DW	0f9H
	DW	0faH
	DW	0fbH
	DW	0fcH
	DW	01b0H
	DW	020abH
	DW	0ffH
_cp1258_composed_table DW 0c1H
	DW	0c0H
	DW	01ea2H
	DW	0c3H
	DW	01ea0H
	DW	0e1H
	DW	0e0H
	DW	01ea3H
	DW	0e3H
	DW	01ea1H
	DW	01eaeH
	DW	01eb0H
	DW	01eb2H
	DW	01eb4H
	DW	01eb6H
	DW	01eafH
	DW	01eb1H
	DW	01eb3H
	DW	01eb5H
	DW	01eb7H
	DW	01ea4H
	DW	01ea6H
	DW	01ea8H
	DW	01eaaH
	DW	01eacH
	DW	01ea5H
	DW	01ea7H
	DW	01ea9H
	DW	01eabH
	DW	01eadH
	DW	0c9H
	DW	0c8H
	DW	01ebaH
	DW	01ebcH
	DW	01eb8H
	DW	0e9H
	DW	0e8H
	DW	01ebbH
	DW	01ebdH
	DW	01eb9H
	DW	01ebeH
	DW	01ec0H
	DW	01ec2H
	DW	01ec4H
	DW	01ec6H
	DW	01ebfH
	DW	01ec1H
	DW	01ec3H
	DW	01ec5H
	DW	01ec7H
	DW	0cdH
	DW	0ccH
	DW	01ec8H
	DW	0128H
	DW	01ecaH
	DW	0edH
	DW	0ecH
	DW	01ec9H
	DW	0129H
	DW	01ecbH
	DW	0d3H
	DW	0d2H
	DW	01eceH
	DW	0d5H
	DW	01eccH
	DW	0f3H
	DW	0f2H
	DW	01ecfH
	DW	0f5H
	DW	01ecdH
	DW	01ed0H
	DW	01ed2H
	DW	01ed4H
	DW	01ed6H
	DW	01ed8H
	DW	01ed1H
	DW	01ed3H
	DW	01ed5H
	DW	01ed7H
	DW	01ed9H
	DW	01edaH
	DW	01edcH
	DW	01edeH
	DW	01ee0H
	DW	01ee2H
	DW	01edbH
	DW	01eddH
	DW	01edfH
	DW	01ee1H
	DW	01ee3H
	DW	0daH
	DW	0d9H
	DW	01ee6H
	DW	0168H
	DW	01ee4H
	DW	0faH
	DW	0f9H
	DW	01ee7H
	DW	0169H
	DW	01ee5H
	DW	01ee8H
	DW	01eeaH
	DW	01eecH
	DW	01eeeH
	DW	01ef0H
	DW	01ee9H
	DW	01eebH
	DW	01eedH
	DW	01eefH
	DW	01ef1H
	DW	0ddH
	DW	01ef2H
	DW	01ef6H
	DW	01ef8H
	DW	01ef4H
	DW	0fdH
	DW	01ef3H
	DW	01ef7H
	DW	01ef9H
	DW	01ef5H
_DATA	ENDS
PUBLIC	?EL_String_Decode_Vietnamese@@YAHPBDHPA_WH@Z	; EL_String_Decode_Vietnamese
PUBLIC	?EL_String_Encode_Vietnamese@@YAHPB_WHPADH@Z	; EL_String_Encode_Vietnamese
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterlocale\stringcodec_vietnamese.cpp
;	COMDAT ?DecomposeTone@@YA_N_WPAD@Z
_TEXT	SEGMENT
_input$ = 8						; size = 2
_tone$ = 12						; size = 4
?DecomposeTone@@YA_N_WPAD@Z PROC			; DecomposeTone, COMDAT

; 387  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 388  : 	switch(input)

  00003	8b 45 08	 mov	 eax, DWORD PTR _input$[ebp]
  00006	0f b7 c0	 movzx	 eax, ax
  00009	3d a1 1e 00 00	 cmp	 eax, 7841		; 00001ea1H
  0000e	7f 21		 jg	 SHORT $LN10@DecomposeT
  00010	3d a0 1e 00 00	 cmp	 eax, 7840		; 00001ea0H
  00015	7d 5a		 jge	 SHORT $LN1@DecomposeT
  00017	2d c0 00 00 00	 sub	 eax, 192		; 000000c0H
  0001c	3d a9 00 00 00	 cmp	 eax, 169		; 000000a9H
  00021	77 58		 ja	 SHORT $LN6@DecomposeT
  00023	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN11@DecomposeT[eax]
  0002a	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN14@DecomposeT[eax*4]
$LN10@DecomposeT:
  00031	2d a2 1e 00 00	 sub	 eax, 7842		; 00001ea2H
  00036	83 f8 57	 cmp	 eax, 87			; 00000057H
  00039	77 40		 ja	 SHORT $LN6@DecomposeT
  0003b	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN12@DecomposeT[eax]
  00042	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN15@DecomposeT[eax*4]
$LN5@DecomposeT:

; 389  : 	{
; 390  : 	case 0x00c1: // L'Á'
; 391  : 	case 0x00e1: // L'á'
; 392  : 	case 0x1eae: // L'Ắ'
; 393  : 	case 0x1eaf: // L'ắ'
; 394  : 	case 0x1ea4: // L'Ấ'
; 395  : 	case 0x1ea5: // L'ấ'
; 396  : 	case 0x00c9: // L'É'
; 397  : 	case 0x00e9: // L'é'
; 398  : 	case 0x1ebe: // L'Ế'
; 399  : 	case 0x1ebf: // L'ế'
; 400  : 	case 0x00cd: // L'Í'
; 401  : 	case 0x00ed: // L'í'
; 402  : 	case 0x00d3: // L'Ó'
; 403  : 	case 0x00f3: // L'ó'
; 404  : 	case 0x1ed0: // L'Ố'
; 405  : 	case 0x1ed1: // L'ố'
; 406  : 	case 0x1eda: // L'Ớ'
; 407  : 	case 0x1edb: // L'ớ'
; 408  : 	case 0x00da: // L'Ú'
; 409  : 	case 0x00fa: // L'ú'
; 410  : 	case 0x1ee8: // L'Ứ'
; 411  : 	case 0x1ee9: // L'ứ'
; 412  : 	case 0x00dd: // L'Ý'
; 413  : 	case 0x00fd: // L'ý'
; 414  : 		*tone = (char)0xec;

  00049	8b 45 0c	 mov	 eax, DWORD PTR _tone$[ebp]
  0004c	c6 00 ec	 mov	 BYTE PTR [eax], -20	; ffffffecH

; 415  : 		return true;

  0004f	b0 01		 mov	 al, 1

; 523  : }

  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
$LN4@DecomposeT:

; 416  : 	case 0x00c0: // L'À'
; 417  : 	case 0x00e0: // L'à'
; 418  : 	case 0x1eb0: // L'Ằ'
; 419  : 	case 0x1eb1: // L'ằ'
; 420  : 	case 0x1ea6: // L'Ầ'
; 421  : 	case 0x1ea7: // L'ầ'
; 422  : 	case 0x00c8: // L'È'
; 423  : 	case 0x00e8: // L'è'
; 424  : 	case 0x1ec0: // L'Ề'
; 425  : 	case 0x1ec1: // L'ề'
; 426  : 	case 0x00cc: // L'Ì'
; 427  : 	case 0x00ec: // L'ì'
; 428  : 	case 0x00d2: // L'Ò'
; 429  : 	case 0x00f2: // L'ò'
; 430  : 	case 0x1ed2: // L'Ồ'
; 431  : 	case 0x1ed3: // L'ồ'
; 432  : 	case 0x1edc: // L'Ờ'
; 433  : 	case 0x1edd: // L'ờ'
; 434  : 	case 0x00d9: // L'Ù'
; 435  : 	case 0x00f9: // L'ù'
; 436  : 	case 0x1eea: // L'Ừ'
; 437  : 	case 0x1eeb: // L'ừ'
; 438  : 	case 0x1ef2: // L'Ỳ'
; 439  : 	case 0x1ef3: // L'ỳ'
; 440  : 		*tone = (char)0xcc;

  00053	8b 45 0c	 mov	 eax, DWORD PTR _tone$[ebp]
  00056	c6 00 cc	 mov	 BYTE PTR [eax], -52	; ffffffccH

; 441  : 		return true;

  00059	b0 01		 mov	 al, 1

; 523  : }

  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
$LN3@DecomposeT:

; 442  : 	case 0x1ea2: // L'Ả'
; 443  : 	case 0x1ea3: // L'ả'
; 444  : 	case 0x1eb2: // L'Ẳ'
; 445  : 	case 0x1eb3: // L'ẳ'
; 446  : 	case 0x1ea8: // L'Ẩ'
; 447  : 	case 0x1ea9: // L'ẩ'
; 448  : 	case 0x1eba: // L'Ẻ'
; 449  : 	case 0x1ebb: // L'ẻ'
; 450  : 	case 0x1ec2: // L'Ể'
; 451  : 	case 0x1ec3: // L'ể'
; 452  : 	case 0x1ec8: // L'Ỉ'
; 453  : 	case 0x1ec9: // L'ỉ'
; 454  : 	case 0x1ece: // L'Ỏ'
; 455  : 	case 0x1ecf: // L'ỏ'
; 456  : 	case 0x1ed4: // L'Ổ'
; 457  : 	case 0x1ed5: // L'ổ'
; 458  : 	case 0x1ede: // L'Ở'
; 459  : 	case 0x1edf: // L'ở'
; 460  : 	case 0x1ee6: // L'Ủ'
; 461  : 	case 0x1ee7: // L'ủ'
; 462  : 	case 0x1eec: // L'Ử'
; 463  : 	case 0x1eed: // L'ử'
; 464  : 	case 0x1ef6: // L'Ỷ'
; 465  : 	case 0x1ef7: // L'ỷ'
; 466  : 		*tone = (char)0xd2;

  0005d	8b 45 0c	 mov	 eax, DWORD PTR _tone$[ebp]
  00060	c6 00 d2	 mov	 BYTE PTR [eax], -46	; ffffffd2H

; 467  : 		return true;

  00063	b0 01		 mov	 al, 1

; 523  : }

  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
$LN2@DecomposeT:

; 468  : 	case 0x00c3: // L'Ã'
; 469  : 	case 0x00e3: // L'ã'
; 470  : 	case 0x1eb4: // L'Ẵ'
; 471  : 	case 0x1eb5: // L'ẵ'
; 472  : 	case 0x1eaa: // L'Ẫ'
; 473  : 	case 0x1eab: // L'ẫ'
; 474  : 	case 0x1ebc: // L'Ẽ'
; 475  : 	case 0x1ebd: // L'ẽ'
; 476  : 	case 0x1ec4: // L'Ễ'
; 477  : 	case 0x1ec5: // L'ễ'
; 478  : 	case 0x0128: // L'Ĩ'
; 479  : 	case 0x0129: // L'ĩ'
; 480  : 	case 0x00d5: // L'Õ'
; 481  : 	case 0x00f5: // L'õ'
; 482  : 	case 0x1ed6: // L'Ỗ'
; 483  : 	case 0x1ed7: // L'ỗ'
; 484  : 	case 0x1ee0: // L'Ỡ'
; 485  : 	case 0x1ee1: // L'ỡ'
; 486  : 	case 0x0169: // L'ũ'
; 487  : 	case 0x0168: // L'Ũ'
; 488  : 	case 0x1eee: // L'Ữ'
; 489  : 	case 0x1eef: // L'ữ'
; 490  : 	case 0x1ef8: // L'Ỹ'
; 491  : 	case 0x1ef9: // L'ỹ'
; 492  : 		*tone = (char)0xde;

  00067	8b 45 0c	 mov	 eax, DWORD PTR _tone$[ebp]
  0006a	c6 00 de	 mov	 BYTE PTR [eax], -34	; ffffffdeH

; 493  : 		return true;

  0006d	b0 01		 mov	 al, 1

; 523  : }

  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
$LN1@DecomposeT:

; 494  : 	case 0x1ea0: // L'Ạ'
; 495  : 	case 0x1ea1: // L'ạ'
; 496  : 	case 0x1eb6: // L'Ặ'
; 497  : 	case 0x1eb7: // L'ặ'
; 498  : 	case 0x1eac: // L'Ậ'
; 499  : 	case 0x1ead: // L'ậ'
; 500  : 	case 0x1eb8: // L'Ẹ'
; 501  : 	case 0x1eb9: // L'ẹ'
; 502  : 	case 0x1ec6: // L'Ệ'
; 503  : 	case 0x1ec7: // L'ệ'
; 504  : 	case 0x1eca: // L'Ị'
; 505  : 	case 0x1ecb: // L'ị'
; 506  : 	case 0x1ecc: // L'Ọ'
; 507  : 	case 0x1ecd: // L'ọ'
; 508  : 	case 0x1ed8: // L'Ộ'
; 509  : 	case 0x1ed9: // L'ộ'
; 510  : 	case 0x1ee2: // L'Ợ'
; 511  : 	case 0x1ee3: // L'ợ'
; 512  : 	case 0x1ee4: // L'Ụ'
; 513  : 	case 0x1ee5: // L'ụ'
; 514  : 	case 0x1ef0: // L'Ự'
; 515  : 	case 0x1ef1: // L'ự'
; 516  : 	case 0x1ef4: // L'Ỵ'
; 517  : 	case 0x1ef5: // L'ỵ'
; 518  : 		*tone = (char)0xf2;

  00071	8b 45 0c	 mov	 eax, DWORD PTR _tone$[ebp]
  00074	c6 00 f2	 mov	 BYTE PTR [eax], -14	; fffffff2H

; 519  : 		return true;

  00077	b0 01		 mov	 al, 1

; 523  : }

  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
$LN6@DecomposeT:

; 520  : 	}
; 521  : 
; 522  : 	return false;

  0007b	32 c0		 xor	 al, al

; 523  : }

  0007d	5d		 pop	 ebp
  0007e	c3		 ret	 0
  0007f	90		 npad	 1
$LN14@DecomposeT:
  00080	00 00 00 00	 DD	 $LN4@DecomposeT
  00084	00 00 00 00	 DD	 $LN5@DecomposeT
  00088	00 00 00 00	 DD	 $LN2@DecomposeT
  0008c	00 00 00 00	 DD	 $LN6@DecomposeT
$LN11@DecomposeT:
  00090	00		 DB	 0
  00091	01		 DB	 1
  00092	03		 DB	 3
  00093	02		 DB	 2
  00094	03		 DB	 3
  00095	03		 DB	 3
  00096	03		 DB	 3
  00097	03		 DB	 3
  00098	00		 DB	 0
  00099	01		 DB	 1
  0009a	03		 DB	 3
  0009b	03		 DB	 3
  0009c	00		 DB	 0
  0009d	01		 DB	 1
  0009e	03		 DB	 3
  0009f	03		 DB	 3
  000a0	03		 DB	 3
  000a1	03		 DB	 3
  000a2	00		 DB	 0
  000a3	01		 DB	 1
  000a4	03		 DB	 3
  000a5	02		 DB	 2
  000a6	03		 DB	 3
  000a7	03		 DB	 3
  000a8	03		 DB	 3
  000a9	00		 DB	 0
  000aa	01		 DB	 1
  000ab	03		 DB	 3
  000ac	03		 DB	 3
  000ad	01		 DB	 1
  000ae	03		 DB	 3
  000af	03		 DB	 3
  000b0	00		 DB	 0
  000b1	01		 DB	 1
  000b2	03		 DB	 3
  000b3	02		 DB	 2
  000b4	03		 DB	 3
  000b5	03		 DB	 3
  000b6	03		 DB	 3
  000b7	03		 DB	 3
  000b8	00		 DB	 0
  000b9	01		 DB	 1
  000ba	03		 DB	 3
  000bb	03		 DB	 3
  000bc	00		 DB	 0
  000bd	01		 DB	 1
  000be	03		 DB	 3
  000bf	03		 DB	 3
  000c0	03		 DB	 3
  000c1	03		 DB	 3
  000c2	00		 DB	 0
  000c3	01		 DB	 1
  000c4	03		 DB	 3
  000c5	02		 DB	 2
  000c6	03		 DB	 3
  000c7	03		 DB	 3
  000c8	03		 DB	 3
  000c9	00		 DB	 0
  000ca	01		 DB	 1
  000cb	03		 DB	 3
  000cc	03		 DB	 3
  000cd	01		 DB	 1
  000ce	03		 DB	 3
  000cf	03		 DB	 3
  000d0	03		 DB	 3
  000d1	03		 DB	 3
  000d2	03		 DB	 3
  000d3	03		 DB	 3
  000d4	03		 DB	 3
  000d5	03		 DB	 3
  000d6	03		 DB	 3
  000d7	03		 DB	 3
  000d8	03		 DB	 3
  000d9	03		 DB	 3
  000da	03		 DB	 3
  000db	03		 DB	 3
  000dc	03		 DB	 3
  000dd	03		 DB	 3
  000de	03		 DB	 3
  000df	03		 DB	 3
  000e0	03		 DB	 3
  000e1	03		 DB	 3
  000e2	03		 DB	 3
  000e3	03		 DB	 3
  000e4	03		 DB	 3
  000e5	03		 DB	 3
  000e6	03		 DB	 3
  000e7	03		 DB	 3
  000e8	03		 DB	 3
  000e9	03		 DB	 3
  000ea	03		 DB	 3
  000eb	03		 DB	 3
  000ec	03		 DB	 3
  000ed	03		 DB	 3
  000ee	03		 DB	 3
  000ef	03		 DB	 3
  000f0	03		 DB	 3
  000f1	03		 DB	 3
  000f2	03		 DB	 3
  000f3	03		 DB	 3
  000f4	03		 DB	 3
  000f5	03		 DB	 3
  000f6	03		 DB	 3
  000f7	03		 DB	 3
  000f8	02		 DB	 2
  000f9	02		 DB	 2
  000fa	03		 DB	 3
  000fb	03		 DB	 3
  000fc	03		 DB	 3
  000fd	03		 DB	 3
  000fe	03		 DB	 3
  000ff	03		 DB	 3
  00100	03		 DB	 3
  00101	03		 DB	 3
  00102	03		 DB	 3
  00103	03		 DB	 3
  00104	03		 DB	 3
  00105	03		 DB	 3
  00106	03		 DB	 3
  00107	03		 DB	 3
  00108	03		 DB	 3
  00109	03		 DB	 3
  0010a	03		 DB	 3
  0010b	03		 DB	 3
  0010c	03		 DB	 3
  0010d	03		 DB	 3
  0010e	03		 DB	 3
  0010f	03		 DB	 3
  00110	03		 DB	 3
  00111	03		 DB	 3
  00112	03		 DB	 3
  00113	03		 DB	 3
  00114	03		 DB	 3
  00115	03		 DB	 3
  00116	03		 DB	 3
  00117	03		 DB	 3
  00118	03		 DB	 3
  00119	03		 DB	 3
  0011a	03		 DB	 3
  0011b	03		 DB	 3
  0011c	03		 DB	 3
  0011d	03		 DB	 3
  0011e	03		 DB	 3
  0011f	03		 DB	 3
  00120	03		 DB	 3
  00121	03		 DB	 3
  00122	03		 DB	 3
  00123	03		 DB	 3
  00124	03		 DB	 3
  00125	03		 DB	 3
  00126	03		 DB	 3
  00127	03		 DB	 3
  00128	03		 DB	 3
  00129	03		 DB	 3
  0012a	03		 DB	 3
  0012b	03		 DB	 3
  0012c	03		 DB	 3
  0012d	03		 DB	 3
  0012e	03		 DB	 3
  0012f	03		 DB	 3
  00130	03		 DB	 3
  00131	03		 DB	 3
  00132	03		 DB	 3
  00133	03		 DB	 3
  00134	03		 DB	 3
  00135	03		 DB	 3
  00136	03		 DB	 3
  00137	03		 DB	 3
  00138	02		 DB	 2
  00139	02		 DB	 2
  0013a	8b ff		 npad	 2
$LN15@DecomposeT:
  0013c	00 00 00 00	 DD	 $LN3@DecomposeT
  00140	00 00 00 00	 DD	 $LN5@DecomposeT
  00144	00 00 00 00	 DD	 $LN4@DecomposeT
  00148	00 00 00 00	 DD	 $LN2@DecomposeT
  0014c	00 00 00 00	 DD	 $LN1@DecomposeT
$LN12@DecomposeT:
  00150	00		 DB	 0
  00151	00		 DB	 0
  00152	01		 DB	 1
  00153	01		 DB	 1
  00154	02		 DB	 2
  00155	02		 DB	 2
  00156	00		 DB	 0
  00157	00		 DB	 0
  00158	03		 DB	 3
  00159	03		 DB	 3
  0015a	04		 DB	 4
  0015b	04		 DB	 4
  0015c	01		 DB	 1
  0015d	01		 DB	 1
  0015e	02		 DB	 2
  0015f	02		 DB	 2
  00160	00		 DB	 0
  00161	00		 DB	 0
  00162	03		 DB	 3
  00163	03		 DB	 3
  00164	04		 DB	 4
  00165	04		 DB	 4
  00166	04		 DB	 4
  00167	04		 DB	 4
  00168	00		 DB	 0
  00169	00		 DB	 0
  0016a	03		 DB	 3
  0016b	03		 DB	 3
  0016c	01		 DB	 1
  0016d	01		 DB	 1
  0016e	02		 DB	 2
  0016f	02		 DB	 2
  00170	00		 DB	 0
  00171	00		 DB	 0
  00172	03		 DB	 3
  00173	03		 DB	 3
  00174	04		 DB	 4
  00175	04		 DB	 4
  00176	00		 DB	 0
  00177	00		 DB	 0
  00178	04		 DB	 4
  00179	04		 DB	 4
  0017a	04		 DB	 4
  0017b	04		 DB	 4
  0017c	00		 DB	 0
  0017d	00		 DB	 0
  0017e	01		 DB	 1
  0017f	01		 DB	 1
  00180	02		 DB	 2
  00181	02		 DB	 2
  00182	00		 DB	 0
  00183	00		 DB	 0
  00184	03		 DB	 3
  00185	03		 DB	 3
  00186	04		 DB	 4
  00187	04		 DB	 4
  00188	01		 DB	 1
  00189	01		 DB	 1
  0018a	02		 DB	 2
  0018b	02		 DB	 2
  0018c	00		 DB	 0
  0018d	00		 DB	 0
  0018e	03		 DB	 3
  0018f	03		 DB	 3
  00190	04		 DB	 4
  00191	04		 DB	 4
  00192	04		 DB	 4
  00193	04		 DB	 4
  00194	00		 DB	 0
  00195	00		 DB	 0
  00196	01		 DB	 1
  00197	01		 DB	 1
  00198	02		 DB	 2
  00199	02		 DB	 2
  0019a	00		 DB	 0
  0019b	00		 DB	 0
  0019c	03		 DB	 3
  0019d	03		 DB	 3
  0019e	04		 DB	 4
  0019f	04		 DB	 4
  001a0	02		 DB	 2
  001a1	02		 DB	 2
  001a2	04		 DB	 4
  001a3	04		 DB	 4
  001a4	00		 DB	 0
  001a5	00		 DB	 0
  001a6	03		 DB	 3
  001a7	03		 DB	 3
?DecomposeTone@@YA_N_WPAD@Z ENDP			; DecomposeTone
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterlocale\stringcodec_vietnamese.cpp
;	COMDAT ?DecomposeLetter@@YA_N_WPAD@Z
_TEXT	SEGMENT
_input$ = 8						; size = 2
_letter$ = 12						; size = 4
?DecomposeLetter@@YA_N_WPAD@Z PROC			; DecomposeLetter, COMDAT

; 172  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 173  : 	switch(input)

  00003	66 8b 4d 08	 mov	 cx, WORD PTR _input$[ebp]
  00007	0f b7 c1	 movzx	 eax, cx
  0000a	3d a0 1e 00 00	 cmp	 eax, 7840		; 00001ea0H
  0000f	7f 74		 jg	 SHORT $LN41@DecomposeL
  00011	0f 84 9b 00 00
	00		 je	 $LN36@DecomposeL
  00017	2d c0 00 00 00	 sub	 eax, 192		; 000000c0H
  0001c	3d f0 00 00 00	 cmp	 eax, 240		; 000000f0H
  00021	0f 87 4d 01 00
	00		 ja	 $LN37@DecomposeL
  00027	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN43@DecomposeL[eax]
  0002e	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN47@DecomposeL[eax*4]
$LN12@DecomposeL:

; 342  : 		return true;
; 343  : 	case 0x0102: // L'Ă'
; 344  : 		*letter = (char)0xc3;

  00035	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00038	c6 00 c3	 mov	 BYTE PTR [eax], -61	; ffffffc3H

; 375  : 		return true;

  0003b	b0 01		 mov	 al, 1

; 384  : }

  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
$LN11@DecomposeL:

; 345  : 		return true;
; 346  : 	case 0x0103: // L'ă'
; 347  : 		*letter = (char)0xe3;

  0003f	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00042	c6 00 e3	 mov	 BYTE PTR [eax], -29	; ffffffe3H

; 375  : 		return true;

  00045	b0 01		 mov	 al, 1

; 384  : }

  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
$LN10@DecomposeL:

; 348  : 		return true;
; 349  : 	case 0x0110: // L'Đ'
; 350  : 		*letter = (char)0xd0;

  00049	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  0004c	c6 00 d0	 mov	 BYTE PTR [eax], -48	; ffffffd0H

; 375  : 		return true;

  0004f	b0 01		 mov	 al, 1

; 384  : }

  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
$LN9@DecomposeL:

; 351  : 		return true;
; 352  : 	case 0x0111: // L'đ'
; 353  : 		*letter = (char)0xf0;

  00053	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00056	c6 00 f0	 mov	 BYTE PTR [eax], -16	; fffffff0H

; 375  : 		return true;

  00059	b0 01		 mov	 al, 1

; 384  : }

  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
$LN8@DecomposeL:

; 354  : 		return true;
; 355  : 	case 0x01a0: // L'Ơ'
; 356  : 		*letter = (char)0xd5;

  0005d	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00060	c6 00 d5	 mov	 BYTE PTR [eax], -43	; ffffffd5H

; 375  : 		return true;

  00063	b0 01		 mov	 al, 1

; 384  : }

  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
$LN7@DecomposeL:

; 357  : 		return true;
; 358  : 	case 0x01a1: // L'ơ'
; 359  : 		*letter = (char)0xf5;

  00067	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  0006a	c6 00 f5	 mov	 BYTE PTR [eax], -11	; fffffff5H

; 375  : 		return true;

  0006d	b0 01		 mov	 al, 1

; 384  : }

  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
$LN6@DecomposeL:

; 360  : 		return true;
; 361  : 	case 0x01af: // L'Ư'
; 362  : 		*letter = (char)0xdd;

  00071	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00074	c6 00 dd	 mov	 BYTE PTR [eax], -35	; ffffffddH

; 375  : 		return true;

  00077	b0 01		 mov	 al, 1

; 384  : }

  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
$LN5@DecomposeL:

; 363  : 		return true;
; 364  : 	case 0x01b0: // L'ư'
; 365  : 		*letter = (char)0xfd;

  0007b	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  0007e	c6 00 fd	 mov	 BYTE PTR [eax], -3	; fffffffdH

; 375  : 		return true;

  00081	b0 01		 mov	 al, 1

; 384  : }

  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
$LN41@DecomposeL:

; 173  : 	switch(input)

  00085	3d 1c 20 00 00	 cmp	 eax, 8220		; 0000201cH
  0008a	0f 8f d6 00 00
	00		 jg	 $LN42@DecomposeL
  00090	0f 84 ff 00 00
	00		 je	 $LN2@DecomposeL
  00096	2d a1 1e 00 00	 sub	 eax, 7841		; 00001ea1H
  0009b	83 f8 58	 cmp	 eax, 88			; 00000058H
  0009e	0f 87 d0 00 00
	00		 ja	 $LN37@DecomposeL
  000a4	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN44@DecomposeL[eax]
  000ab	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN48@DecomposeL[eax*4]
$LN36@DecomposeL:

; 174  : 	{
; 175  : 	case 0x00c1:  // L'Á'
; 176  : 	case 0x00c0:  // L'À'
; 177  : 	case 0x1ea2:  // L'Ả'
; 178  : 	case 0x00c3:  // L'Ã'
; 179  : 	case 0x1ea0:  // L'Ạ'
; 180  : 		*letter = 'A';

  000b2	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  000b5	c6 00 41	 mov	 BYTE PTR [eax], 65	; 00000041H

; 375  : 		return true;

  000b8	b0 01		 mov	 al, 1

; 384  : }

  000ba	5d		 pop	 ebp
  000bb	c3		 ret	 0
$LN35@DecomposeL:

; 181  : 		return true;
; 182  : 	case 0x00e1:  // L'á'
; 183  : 	case 0x00e0:  // L'à'
; 184  : 	case 0x1ea3:  // L'ả'
; 185  : 	case 0x00e3:  // L'ã'
; 186  : 	case 0x1ea1:  // L'ạ'
; 187  : 		*letter = 'a';

  000bc	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  000bf	c6 00 61	 mov	 BYTE PTR [eax], 97	; 00000061H

; 375  : 		return true;

  000c2	b0 01		 mov	 al, 1

; 384  : }

  000c4	5d		 pop	 ebp
  000c5	c3		 ret	 0
$LN32@DecomposeL:

; 188  : 		return true;
; 189  : 	case 0x1eae:  // L'Ắ'
; 190  : 	case 0x1eb0:  // L'Ằ'
; 191  : 	case 0x1eb2:  // L'Ẳ'
; 192  : 	case 0x1eb4:  // L'Ẵ'
; 193  : 	case 0x1eb6:  // L'Ặ'
; 194  : 		*letter = (char)0xc3;
; 195  : 		return true;
; 196  : 	case 0x1eaf:  // L'ắ'
; 197  : 	case 0x1eb1:  // L'ằ'
; 198  : 	case 0x1eb3:  // L'ẳ'
; 199  : 	case 0x1eb5:  // L'ẵ'
; 200  : 	case 0x1eb7:  // L'ặ'
; 201  : 		*letter = (char)0xe3;
; 202  : 		return true;
; 203  : 	case 0x1ea4:  // L'Ấ'
; 204  : 	case 0x1ea6:  // L'Ầ'
; 205  : 	case 0x1ea8:  // L'Ẩ'
; 206  : 	case 0x1eaa:  // L'Ẫ'
; 207  : 	case 0x1eac:  // L'Ậ'
; 208  : 		*letter = (char)0xc2;

  000c6	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  000c9	c6 00 c2	 mov	 BYTE PTR [eax], -62	; ffffffc2H

; 375  : 		return true;

  000cc	b0 01		 mov	 al, 1

; 384  : }

  000ce	5d		 pop	 ebp
  000cf	c3		 ret	 0
$LN31@DecomposeL:

; 209  : 		return true;
; 210  : 	case 0x1ea5:  // L'ấ'
; 211  : 	case 0x1ea7:  // L'ầ'
; 212  : 	case 0x1ea9:  // L'ẩ'
; 213  : 	case 0x1eab:  // L'ẫ'
; 214  : 	case 0x1ead:  // L'ậ'
; 215  : 		*letter = (char)0xe2;

  000d0	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  000d3	c6 00 e2	 mov	 BYTE PTR [eax], -30	; ffffffe2H

; 375  : 		return true;

  000d6	b0 01		 mov	 al, 1

; 384  : }

  000d8	5d		 pop	 ebp
  000d9	c3		 ret	 0
$LN30@DecomposeL:

; 216  : 		return true;
; 217  : 	case 0x00c9:  // L'É'
; 218  : 	case 0x00c8:  // L'È'
; 219  : 	case 0x1eba:  // L'Ẻ'
; 220  : 	case 0x1ebc:  // L'Ẽ'
; 221  : 	case 0x1eb8:  // L'Ẹ'
; 222  : 		*letter = (char)'E';

  000da	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  000dd	c6 00 45	 mov	 BYTE PTR [eax], 69	; 00000045H

; 375  : 		return true;

  000e0	b0 01		 mov	 al, 1

; 384  : }

  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
$LN29@DecomposeL:

; 223  : 		return true;
; 224  : 	case 0x00e9:  // L'é'
; 225  : 	case 0x00e8:  // L'è'
; 226  : 	case 0x1ebb:  // L'ẻ'
; 227  : 	case 0x1ebd:  // L'ẽ'
; 228  : 	case 0x1eb9:  // L'ẹ'
; 229  : 		*letter = (char)'e';

  000e4	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  000e7	c6 00 65	 mov	 BYTE PTR [eax], 101	; 00000065H

; 375  : 		return true;

  000ea	b0 01		 mov	 al, 1

; 384  : }

  000ec	5d		 pop	 ebp
  000ed	c3		 ret	 0
$LN28@DecomposeL:

; 230  : 		return true;
; 231  : 	case 0x1ebe:  // L'Ế'
; 232  : 	case 0x1ec0:  // L'Ề'
; 233  : 	case 0x1ec2:  // L'Ể'
; 234  : 	case 0x1ec4:  // L'Ễ'
; 235  : 	case 0x1ec6:  // L'Ệ'
; 236  : 		*letter = (char)0xca;

  000ee	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  000f1	c6 00 ca	 mov	 BYTE PTR [eax], -54	; ffffffcaH

; 375  : 		return true;

  000f4	b0 01		 mov	 al, 1

; 384  : }

  000f6	5d		 pop	 ebp
  000f7	c3		 ret	 0
$LN27@DecomposeL:

; 237  : 		return true;
; 238  : 	case 0x1ebf:  // L'ế'
; 239  : 	case 0x1ec1:  // L'ề'
; 240  : 	case 0x1ec3:  // L'ể'
; 241  : 	case 0x1ec5:  // L'ễ'
; 242  : 	case 0x1ec7:  // L'ệ'
; 243  : 		*letter = (char)0xea;

  000f8	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  000fb	c6 00 ea	 mov	 BYTE PTR [eax], -22	; ffffffeaH

; 375  : 		return true;

  000fe	b0 01		 mov	 al, 1

; 384  : }

  00100	5d		 pop	 ebp
  00101	c3		 ret	 0
$LN26@DecomposeL:

; 244  : 		return true;
; 245  : 	case 0x00cd:  // L'Í'
; 246  : 	case 0x00cc:  // L'Ì'
; 247  : 	case 0x1ec8:  // L'Ỉ'
; 248  : 	case 0x0128:  // L'Ĩ'
; 249  : 	case 0x1eca:  // L'Ị'
; 250  : 		*letter = (char)'I';

  00102	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00105	c6 00 49	 mov	 BYTE PTR [eax], 73	; 00000049H

; 375  : 		return true;

  00108	b0 01		 mov	 al, 1

; 384  : }

  0010a	5d		 pop	 ebp
  0010b	c3		 ret	 0
$LN25@DecomposeL:

; 251  : 		return true;
; 252  : 	case 0x00ed:  // L'í'
; 253  : 	case 0x00ec:  // L'ì'
; 254  : 	case 0x1ec9:  // L'ỉ'
; 255  : 	case 0x0129:  // L'ĩ'
; 256  : 	case 0x1ecb:  // L'ị'
; 257  : 		*letter = (char)'i';

  0010c	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  0010f	c6 00 69	 mov	 BYTE PTR [eax], 105	; 00000069H

; 375  : 		return true;

  00112	b0 01		 mov	 al, 1

; 384  : }

  00114	5d		 pop	 ebp
  00115	c3		 ret	 0
$LN24@DecomposeL:

; 258  : 		return true;
; 259  : 	case 0x00d3:  // L'Ó'
; 260  : 	case 0x00d2:  // L'Ò'
; 261  : 	case 0x1ece:  // L'Ỏ'
; 262  : 	case 0x00d5:  // L'Õ'
; 263  : 	case 0x1ecc:  // L'Ọ'
; 264  : 		*letter = (char)'O';

  00116	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00119	c6 00 4f	 mov	 BYTE PTR [eax], 79	; 0000004fH

; 375  : 		return true;

  0011c	b0 01		 mov	 al, 1

; 384  : }

  0011e	5d		 pop	 ebp
  0011f	c3		 ret	 0
$LN23@DecomposeL:

; 265  : 		return true;
; 266  : 	case 0x00f3:  // L'ó'
; 267  : 	case 0x00f2:  // L'ò'
; 268  : 	case 0x1ecf:  // L'ỏ'
; 269  : 	case 0x00f5:  // L'õ'
; 270  : 	case 0x1ecd:  // L'ọ'
; 271  : 		*letter = (char)'o';

  00120	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00123	c6 00 6f	 mov	 BYTE PTR [eax], 111	; 0000006fH

; 375  : 		return true;

  00126	b0 01		 mov	 al, 1

; 384  : }

  00128	5d		 pop	 ebp
  00129	c3		 ret	 0
$LN22@DecomposeL:

; 272  : 		return true;
; 273  : 	case 0x1ed0:  // L'Ố'
; 274  : 	case 0x1ed2:  // L'Ồ'
; 275  : 	case 0x1ed4:  // L'Ổ'
; 276  : 	case 0x1ed6:  // L'Ỗ'
; 277  : 	case 0x1ed8:  // L'Ộ'
; 278  : 		*letter = (char)0xd4;

  0012a	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  0012d	c6 00 d4	 mov	 BYTE PTR [eax], -44	; ffffffd4H

; 375  : 		return true;

  00130	b0 01		 mov	 al, 1

; 384  : }

  00132	5d		 pop	 ebp
  00133	c3		 ret	 0
$LN21@DecomposeL:

; 279  : 		return true;
; 280  : 	case 0x1ed1:  // L'ố'
; 281  : 	case 0x1ed3:  // L'ồ'
; 282  : 	case 0x1ed5:  // L'ổ'
; 283  : 	case 0x1ed7:  // L'ỗ'
; 284  : 	case 0x1ed9:  // L'ộ'
; 285  : 		*letter = (char)0xf4;

  00134	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00137	c6 00 f4	 mov	 BYTE PTR [eax], -12	; fffffff4H

; 375  : 		return true;

  0013a	b0 01		 mov	 al, 1

; 384  : }

  0013c	5d		 pop	 ebp
  0013d	c3		 ret	 0
$LN18@DecomposeL:

; 286  : 		return true;
; 287  : 	case 0x1eda:  // L'Ớ'
; 288  : 	case 0x1edc:  // L'Ờ'
; 289  : 	case 0x1ede:  // L'Ở'
; 290  : 	case 0x1ee0:  // L'Ỡ'
; 291  : 	case 0x1ee2:  // L'Ợ'
; 292  : 		*letter = (char)0xd5;
; 293  : 		return true;
; 294  : 	case 0x1edb:  // L'ớ'
; 295  : 	case 0x1edd:  // L'ờ'
; 296  : 	case 0x1edf:  // L'ở'
; 297  : 	case 0x1ee1:  // L'ỡ'
; 298  : 	case 0x1ee3:  // L'ợ'
; 299  : 		*letter = (char)0xf5;
; 300  : 		return true;
; 301  : 	case 0x00da:  // L'Ú'
; 302  : 	case 0x00d9:  // L'Ù'
; 303  : 	case 0x1ee6:  // L'Ủ'
; 304  : 	case 0x0168:  // L'Ũ'
; 305  : 	case 0x1ee4:  // L'Ụ'
; 306  : 		*letter = (char)'U';

  0013e	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00141	c6 00 55	 mov	 BYTE PTR [eax], 85	; 00000055H

; 375  : 		return true;

  00144	b0 01		 mov	 al, 1

; 384  : }

  00146	5d		 pop	 ebp
  00147	c3		 ret	 0
$LN17@DecomposeL:

; 307  : 		return true;
; 308  : 	case 0x00fa:  // L'ú'
; 309  : 	case 0x00f9:  // L'ù'
; 310  : 	case 0x1ee7:  // L'ủ'
; 311  : 	case 0x0169:  // L'ũ'
; 312  : 	case 0x1ee5:  // L'ụ'
; 313  : 		*letter = (char)'u';

  00148	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  0014b	c6 00 75	 mov	 BYTE PTR [eax], 117	; 00000075H

; 375  : 		return true;

  0014e	b0 01		 mov	 al, 1

; 384  : }

  00150	5d		 pop	 ebp
  00151	c3		 ret	 0
$LN14@DecomposeL:

; 314  : 		return true;
; 315  : 	case 0x1ee8:  // L'Ứ'
; 316  : 	case 0x1eea:  // L'Ừ'
; 317  : 	case 0x1eec:  // L'Ử'
; 318  : 	case 0x1eee:  // L'Ữ'
; 319  : 	case 0x1ef0:  // L'Ự'
; 320  : 		*letter = (char)0xdd;
; 321  : 		return true;
; 322  : 	case 0x1ee9:  // L'ứ'
; 323  : 	case 0x1eeb:  // L'ừ'
; 324  : 	case 0x1eed:  // L'ử'
; 325  : 	case 0x1eef:  // L'ữ'
; 326  : 	case 0x1ef1:  // L'ự'
; 327  : 		*letter = (char)0xfd;
; 328  : 		return true;
; 329  : 	case 0x1ef2:  // L'Ỳ'
; 330  : 	case 0x00dd:  // L'Ý'
; 331  : 	case 0x1ef6:  // L'Ỷ'
; 332  : 	case 0x1ef8:  // L'Ỹ'
; 333  : 	case 0x1ef4:  // L'Ỵ'
; 334  : 		*letter = (char)'Y';

  00152	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00155	c6 00 59	 mov	 BYTE PTR [eax], 89	; 00000059H

; 375  : 		return true;

  00158	b0 01		 mov	 al, 1

; 384  : }

  0015a	5d		 pop	 ebp
  0015b	c3		 ret	 0
$LN13@DecomposeL:

; 335  : 		return true;
; 336  : 	case 0x1ef3:  // L'ỳ'
; 337  : 	case 0x00fd:  // L'ý'
; 338  : 	case 0x1ef7:  // L'ỷ'
; 339  : 	case 0x1ef9:  // L'ỹ'
; 340  : 	case 0x1ef5:  // L'ỵ'
; 341  : 		*letter = (char)'y';

  0015c	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  0015f	c6 00 79	 mov	 BYTE PTR [eax], 121	; 00000079H

; 375  : 		return true;

  00162	b0 01		 mov	 al, 1

; 384  : }

  00164	5d		 pop	 ebp
  00165	c3		 ret	 0
$LN42@DecomposeL:

; 173  : 	switch(input)

  00166	3d 1d 20 00 00	 cmp	 eax, 8221		; 0000201dH
  0016b	74 28		 je	 SHORT $LN2@DecomposeL
  0016d	3d ab 20 00 00	 cmp	 eax, 8363		; 000020abH
  00172	74 17		 je	 SHORT $LN4@DecomposeL
$LN37@DecomposeL:

; 376  : 	}
; 377  : 
; 378  : 	if(input < 256)

  00174	b8 00 01 00 00	 mov	 eax, 256		; 00000100H
  00179	66 3b c8	 cmp	 cx, ax
  0017c	73 09		 jae	 SHORT $LN1@DecomposeL

; 379  : 	{
; 380  : 		*letter = (char)input;

  0017e	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00181	88 08		 mov	 BYTE PTR [eax], cl
  00183	b0 01		 mov	 al, 1

; 384  : }

  00185	5d		 pop	 ebp
  00186	c3		 ret	 0
$LN1@DecomposeL:

; 381  : 		return true;
; 382  : 	}
; 383  :     return false;

  00187	32 c0		 xor	 al, al

; 384  : }

  00189	5d		 pop	 ebp
  0018a	c3		 ret	 0
$LN4@DecomposeL:

; 366  : 		return true;
; 367  : 	case 0x20ab: // L'₫'
; 368  : 		*letter = (char)0xfe;

  0018b	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  0018e	c6 00 fe	 mov	 BYTE PTR [eax], -2	; fffffffeH

; 375  : 		return true;

  00191	b0 01		 mov	 al, 1

; 384  : }

  00193	5d		 pop	 ebp
  00194	c3		 ret	 0
$LN2@DecomposeL:

; 369  : 		return true;
; 370  : 	case 0x201c: // L'“'
; 371  : 		*letter = (char)'"';
; 372  : 		return true;
; 373  : 	case 0x201d: // L'”'
; 374  : 		*letter = (char)'"';

  00195	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00198	c6 00 22	 mov	 BYTE PTR [eax], 34	; 00000022H

; 375  : 		return true;

  0019b	b0 01		 mov	 al, 1

; 384  : }

  0019d	5d		 pop	 ebp
  0019e	c3		 ret	 0
  0019f	90		 npad	 1
$LN47@DecomposeL:
  001a0	00 00 00 00	 DD	 $LN36@DecomposeL
  001a4	00 00 00 00	 DD	 $LN30@DecomposeL
  001a8	00 00 00 00	 DD	 $LN26@DecomposeL
  001ac	00 00 00 00	 DD	 $LN24@DecomposeL
  001b0	00 00 00 00	 DD	 $LN18@DecomposeL
  001b4	00 00 00 00	 DD	 $LN14@DecomposeL
  001b8	00 00 00 00	 DD	 $LN35@DecomposeL
  001bc	00 00 00 00	 DD	 $LN29@DecomposeL
  001c0	00 00 00 00	 DD	 $LN25@DecomposeL
  001c4	00 00 00 00	 DD	 $LN23@DecomposeL
  001c8	00 00 00 00	 DD	 $LN17@DecomposeL
  001cc	00 00 00 00	 DD	 $LN13@DecomposeL
  001d0	00 00 00 00	 DD	 $LN12@DecomposeL
  001d4	00 00 00 00	 DD	 $LN11@DecomposeL
  001d8	00 00 00 00	 DD	 $LN10@DecomposeL
  001dc	00 00 00 00	 DD	 $LN9@DecomposeL
  001e0	00 00 00 00	 DD	 $LN8@DecomposeL
  001e4	00 00 00 00	 DD	 $LN7@DecomposeL
  001e8	00 00 00 00	 DD	 $LN6@DecomposeL
  001ec	00 00 00 00	 DD	 $LN5@DecomposeL
  001f0	00 00 00 00	 DD	 $LN37@DecomposeL
$LN43@DecomposeL:
  001f4	00		 DB	 0
  001f5	00		 DB	 0
  001f6	14		 DB	 20			; 00000014H
  001f7	00		 DB	 0
  001f8	14		 DB	 20			; 00000014H
  001f9	14		 DB	 20			; 00000014H
  001fa	14		 DB	 20			; 00000014H
  001fb	14		 DB	 20			; 00000014H
  001fc	01		 DB	 1
  001fd	01		 DB	 1
  001fe	14		 DB	 20			; 00000014H
  001ff	14		 DB	 20			; 00000014H
  00200	02		 DB	 2
  00201	02		 DB	 2
  00202	14		 DB	 20			; 00000014H
  00203	14		 DB	 20			; 00000014H
  00204	14		 DB	 20			; 00000014H
  00205	14		 DB	 20			; 00000014H
  00206	03		 DB	 3
  00207	03		 DB	 3
  00208	14		 DB	 20			; 00000014H
  00209	03		 DB	 3
  0020a	14		 DB	 20			; 00000014H
  0020b	14		 DB	 20			; 00000014H
  0020c	14		 DB	 20			; 00000014H
  0020d	04		 DB	 4
  0020e	04		 DB	 4
  0020f	14		 DB	 20			; 00000014H
  00210	14		 DB	 20			; 00000014H
  00211	05		 DB	 5
  00212	14		 DB	 20			; 00000014H
  00213	14		 DB	 20			; 00000014H
  00214	06		 DB	 6
  00215	06		 DB	 6
  00216	14		 DB	 20			; 00000014H
  00217	06		 DB	 6
  00218	14		 DB	 20			; 00000014H
  00219	14		 DB	 20			; 00000014H
  0021a	14		 DB	 20			; 00000014H
  0021b	14		 DB	 20			; 00000014H
  0021c	07		 DB	 7
  0021d	07		 DB	 7
  0021e	14		 DB	 20			; 00000014H
  0021f	14		 DB	 20			; 00000014H
  00220	08		 DB	 8
  00221	08		 DB	 8
  00222	14		 DB	 20			; 00000014H
  00223	14		 DB	 20			; 00000014H
  00224	14		 DB	 20			; 00000014H
  00225	14		 DB	 20			; 00000014H
  00226	09		 DB	 9
  00227	09		 DB	 9
  00228	14		 DB	 20			; 00000014H
  00229	09		 DB	 9
  0022a	14		 DB	 20			; 00000014H
  0022b	14		 DB	 20			; 00000014H
  0022c	14		 DB	 20			; 00000014H
  0022d	0a		 DB	 10			; 0000000aH
  0022e	0a		 DB	 10			; 0000000aH
  0022f	14		 DB	 20			; 00000014H
  00230	14		 DB	 20			; 00000014H
  00231	0b		 DB	 11			; 0000000bH
  00232	14		 DB	 20			; 00000014H
  00233	14		 DB	 20			; 00000014H
  00234	14		 DB	 20			; 00000014H
  00235	14		 DB	 20			; 00000014H
  00236	0c		 DB	 12			; 0000000cH
  00237	0d		 DB	 13			; 0000000dH
  00238	14		 DB	 20			; 00000014H
  00239	14		 DB	 20			; 00000014H
  0023a	14		 DB	 20			; 00000014H
  0023b	14		 DB	 20			; 00000014H
  0023c	14		 DB	 20			; 00000014H
  0023d	14		 DB	 20			; 00000014H
  0023e	14		 DB	 20			; 00000014H
  0023f	14		 DB	 20			; 00000014H
  00240	14		 DB	 20			; 00000014H
  00241	14		 DB	 20			; 00000014H
  00242	14		 DB	 20			; 00000014H
  00243	14		 DB	 20			; 00000014H
  00244	0e		 DB	 14			; 0000000eH
  00245	0f		 DB	 15			; 0000000fH
  00246	14		 DB	 20			; 00000014H
  00247	14		 DB	 20			; 00000014H
  00248	14		 DB	 20			; 00000014H
  00249	14		 DB	 20			; 00000014H
  0024a	14		 DB	 20			; 00000014H
  0024b	14		 DB	 20			; 00000014H
  0024c	14		 DB	 20			; 00000014H
  0024d	14		 DB	 20			; 00000014H
  0024e	14		 DB	 20			; 00000014H
  0024f	14		 DB	 20			; 00000014H
  00250	14		 DB	 20			; 00000014H
  00251	14		 DB	 20			; 00000014H
  00252	14		 DB	 20			; 00000014H
  00253	14		 DB	 20			; 00000014H
  00254	14		 DB	 20			; 00000014H
  00255	14		 DB	 20			; 00000014H
  00256	14		 DB	 20			; 00000014H
  00257	14		 DB	 20			; 00000014H
  00258	14		 DB	 20			; 00000014H
  00259	14		 DB	 20			; 00000014H
  0025a	14		 DB	 20			; 00000014H
  0025b	14		 DB	 20			; 00000014H
  0025c	02		 DB	 2
  0025d	08		 DB	 8
  0025e	14		 DB	 20			; 00000014H
  0025f	14		 DB	 20			; 00000014H
  00260	14		 DB	 20			; 00000014H
  00261	14		 DB	 20			; 00000014H
  00262	14		 DB	 20			; 00000014H
  00263	14		 DB	 20			; 00000014H
  00264	14		 DB	 20			; 00000014H
  00265	14		 DB	 20			; 00000014H
  00266	14		 DB	 20			; 00000014H
  00267	14		 DB	 20			; 00000014H
  00268	14		 DB	 20			; 00000014H
  00269	14		 DB	 20			; 00000014H
  0026a	14		 DB	 20			; 00000014H
  0026b	14		 DB	 20			; 00000014H
  0026c	14		 DB	 20			; 00000014H
  0026d	14		 DB	 20			; 00000014H
  0026e	14		 DB	 20			; 00000014H
  0026f	14		 DB	 20			; 00000014H
  00270	14		 DB	 20			; 00000014H
  00271	14		 DB	 20			; 00000014H
  00272	14		 DB	 20			; 00000014H
  00273	14		 DB	 20			; 00000014H
  00274	14		 DB	 20			; 00000014H
  00275	14		 DB	 20			; 00000014H
  00276	14		 DB	 20			; 00000014H
  00277	14		 DB	 20			; 00000014H
  00278	14		 DB	 20			; 00000014H
  00279	14		 DB	 20			; 00000014H
  0027a	14		 DB	 20			; 00000014H
  0027b	14		 DB	 20			; 00000014H
  0027c	14		 DB	 20			; 00000014H
  0027d	14		 DB	 20			; 00000014H
  0027e	14		 DB	 20			; 00000014H
  0027f	14		 DB	 20			; 00000014H
  00280	14		 DB	 20			; 00000014H
  00281	14		 DB	 20			; 00000014H
  00282	14		 DB	 20			; 00000014H
  00283	14		 DB	 20			; 00000014H
  00284	14		 DB	 20			; 00000014H
  00285	14		 DB	 20			; 00000014H
  00286	14		 DB	 20			; 00000014H
  00287	14		 DB	 20			; 00000014H
  00288	14		 DB	 20			; 00000014H
  00289	14		 DB	 20			; 00000014H
  0028a	14		 DB	 20			; 00000014H
  0028b	14		 DB	 20			; 00000014H
  0028c	14		 DB	 20			; 00000014H
  0028d	14		 DB	 20			; 00000014H
  0028e	14		 DB	 20			; 00000014H
  0028f	14		 DB	 20			; 00000014H
  00290	14		 DB	 20			; 00000014H
  00291	14		 DB	 20			; 00000014H
  00292	14		 DB	 20			; 00000014H
  00293	14		 DB	 20			; 00000014H
  00294	14		 DB	 20			; 00000014H
  00295	14		 DB	 20			; 00000014H
  00296	14		 DB	 20			; 00000014H
  00297	14		 DB	 20			; 00000014H
  00298	14		 DB	 20			; 00000014H
  00299	14		 DB	 20			; 00000014H
  0029a	14		 DB	 20			; 00000014H
  0029b	14		 DB	 20			; 00000014H
  0029c	04		 DB	 4
  0029d	0a		 DB	 10			; 0000000aH
  0029e	14		 DB	 20			; 00000014H
  0029f	14		 DB	 20			; 00000014H
  002a0	14		 DB	 20			; 00000014H
  002a1	14		 DB	 20			; 00000014H
  002a2	14		 DB	 20			; 00000014H
  002a3	14		 DB	 20			; 00000014H
  002a4	14		 DB	 20			; 00000014H
  002a5	14		 DB	 20			; 00000014H
  002a6	14		 DB	 20			; 00000014H
  002a7	14		 DB	 20			; 00000014H
  002a8	14		 DB	 20			; 00000014H
  002a9	14		 DB	 20			; 00000014H
  002aa	14		 DB	 20			; 00000014H
  002ab	14		 DB	 20			; 00000014H
  002ac	14		 DB	 20			; 00000014H
  002ad	14		 DB	 20			; 00000014H
  002ae	14		 DB	 20			; 00000014H
  002af	14		 DB	 20			; 00000014H
  002b0	14		 DB	 20			; 00000014H
  002b1	14		 DB	 20			; 00000014H
  002b2	14		 DB	 20			; 00000014H
  002b3	14		 DB	 20			; 00000014H
  002b4	14		 DB	 20			; 00000014H
  002b5	14		 DB	 20			; 00000014H
  002b6	14		 DB	 20			; 00000014H
  002b7	14		 DB	 20			; 00000014H
  002b8	14		 DB	 20			; 00000014H
  002b9	14		 DB	 20			; 00000014H
  002ba	14		 DB	 20			; 00000014H
  002bb	14		 DB	 20			; 00000014H
  002bc	14		 DB	 20			; 00000014H
  002bd	14		 DB	 20			; 00000014H
  002be	14		 DB	 20			; 00000014H
  002bf	14		 DB	 20			; 00000014H
  002c0	14		 DB	 20			; 00000014H
  002c1	14		 DB	 20			; 00000014H
  002c2	14		 DB	 20			; 00000014H
  002c3	14		 DB	 20			; 00000014H
  002c4	14		 DB	 20			; 00000014H
  002c5	14		 DB	 20			; 00000014H
  002c6	14		 DB	 20			; 00000014H
  002c7	14		 DB	 20			; 00000014H
  002c8	14		 DB	 20			; 00000014H
  002c9	14		 DB	 20			; 00000014H
  002ca	14		 DB	 20			; 00000014H
  002cb	14		 DB	 20			; 00000014H
  002cc	14		 DB	 20			; 00000014H
  002cd	14		 DB	 20			; 00000014H
  002ce	14		 DB	 20			; 00000014H
  002cf	14		 DB	 20			; 00000014H
  002d0	14		 DB	 20			; 00000014H
  002d1	14		 DB	 20			; 00000014H
  002d2	14		 DB	 20			; 00000014H
  002d3	14		 DB	 20			; 00000014H
  002d4	10		 DB	 16			; 00000010H
  002d5	11		 DB	 17			; 00000011H
  002d6	14		 DB	 20			; 00000014H
  002d7	14		 DB	 20			; 00000014H
  002d8	14		 DB	 20			; 00000014H
  002d9	14		 DB	 20			; 00000014H
  002da	14		 DB	 20			; 00000014H
  002db	14		 DB	 20			; 00000014H
  002dc	14		 DB	 20			; 00000014H
  002dd	14		 DB	 20			; 00000014H
  002de	14		 DB	 20			; 00000014H
  002df	14		 DB	 20			; 00000014H
  002e0	14		 DB	 20			; 00000014H
  002e1	14		 DB	 20			; 00000014H
  002e2	14		 DB	 20			; 00000014H
  002e3	12		 DB	 18			; 00000012H
  002e4	13		 DB	 19			; 00000013H
  002e5	8d 49 00	 npad	 3
$LN48@DecomposeL:
  002e8	00 00 00 00	 DD	 $LN35@DecomposeL
  002ec	00 00 00 00	 DD	 $LN36@DecomposeL
  002f0	00 00 00 00	 DD	 $LN32@DecomposeL
  002f4	00 00 00 00	 DD	 $LN31@DecomposeL
  002f8	00 00 00 00	 DD	 $LN12@DecomposeL
  002fc	00 00 00 00	 DD	 $LN11@DecomposeL
  00300	00 00 00 00	 DD	 $LN30@DecomposeL
  00304	00 00 00 00	 DD	 $LN29@DecomposeL
  00308	00 00 00 00	 DD	 $LN28@DecomposeL
  0030c	00 00 00 00	 DD	 $LN27@DecomposeL
  00310	00 00 00 00	 DD	 $LN26@DecomposeL
  00314	00 00 00 00	 DD	 $LN25@DecomposeL
  00318	00 00 00 00	 DD	 $LN24@DecomposeL
  0031c	00 00 00 00	 DD	 $LN23@DecomposeL
  00320	00 00 00 00	 DD	 $LN22@DecomposeL
  00324	00 00 00 00	 DD	 $LN21@DecomposeL
  00328	00 00 00 00	 DD	 $LN8@DecomposeL
  0032c	00 00 00 00	 DD	 $LN7@DecomposeL
  00330	00 00 00 00	 DD	 $LN18@DecomposeL
  00334	00 00 00 00	 DD	 $LN17@DecomposeL
  00338	00 00 00 00	 DD	 $LN6@DecomposeL
  0033c	00 00 00 00	 DD	 $LN5@DecomposeL
  00340	00 00 00 00	 DD	 $LN14@DecomposeL
  00344	00 00 00 00	 DD	 $LN13@DecomposeL
$LN44@DecomposeL:
  00348	00		 DB	 0
  00349	01		 DB	 1
  0034a	00		 DB	 0
  0034b	02		 DB	 2
  0034c	03		 DB	 3
  0034d	02		 DB	 2
  0034e	03		 DB	 3
  0034f	02		 DB	 2
  00350	03		 DB	 3
  00351	02		 DB	 2
  00352	03		 DB	 3
  00353	02		 DB	 2
  00354	03		 DB	 3
  00355	04		 DB	 4
  00356	05		 DB	 5
  00357	04		 DB	 4
  00358	05		 DB	 5
  00359	04		 DB	 4
  0035a	05		 DB	 5
  0035b	04		 DB	 4
  0035c	05		 DB	 5
  0035d	04		 DB	 4
  0035e	05		 DB	 5
  0035f	06		 DB	 6
  00360	07		 DB	 7
  00361	06		 DB	 6
  00362	07		 DB	 7
  00363	06		 DB	 6
  00364	07		 DB	 7
  00365	08		 DB	 8
  00366	09		 DB	 9
  00367	08		 DB	 8
  00368	09		 DB	 9
  00369	08		 DB	 8
  0036a	09		 DB	 9
  0036b	08		 DB	 8
  0036c	09		 DB	 9
  0036d	08		 DB	 8
  0036e	09		 DB	 9
  0036f	0a		 DB	 10			; 0000000aH
  00370	0b		 DB	 11			; 0000000bH
  00371	0a		 DB	 10			; 0000000aH
  00372	0b		 DB	 11			; 0000000bH
  00373	0c		 DB	 12			; 0000000cH
  00374	0d		 DB	 13			; 0000000dH
  00375	0c		 DB	 12			; 0000000cH
  00376	0d		 DB	 13			; 0000000dH
  00377	0e		 DB	 14			; 0000000eH
  00378	0f		 DB	 15			; 0000000fH
  00379	0e		 DB	 14			; 0000000eH
  0037a	0f		 DB	 15			; 0000000fH
  0037b	0e		 DB	 14			; 0000000eH
  0037c	0f		 DB	 15			; 0000000fH
  0037d	0e		 DB	 14			; 0000000eH
  0037e	0f		 DB	 15			; 0000000fH
  0037f	0e		 DB	 14			; 0000000eH
  00380	0f		 DB	 15			; 0000000fH
  00381	10		 DB	 16			; 00000010H
  00382	11		 DB	 17			; 00000011H
  00383	10		 DB	 16			; 00000010H
  00384	11		 DB	 17			; 00000011H
  00385	10		 DB	 16			; 00000010H
  00386	11		 DB	 17			; 00000011H
  00387	10		 DB	 16			; 00000010H
  00388	11		 DB	 17			; 00000011H
  00389	10		 DB	 16			; 00000010H
  0038a	11		 DB	 17			; 00000011H
  0038b	12		 DB	 18			; 00000012H
  0038c	13		 DB	 19			; 00000013H
  0038d	12		 DB	 18			; 00000012H
  0038e	13		 DB	 19			; 00000013H
  0038f	14		 DB	 20			; 00000014H
  00390	15		 DB	 21			; 00000015H
  00391	14		 DB	 20			; 00000014H
  00392	15		 DB	 21			; 00000015H
  00393	14		 DB	 20			; 00000014H
  00394	15		 DB	 21			; 00000015H
  00395	14		 DB	 20			; 00000014H
  00396	15		 DB	 21			; 00000015H
  00397	14		 DB	 20			; 00000014H
  00398	15		 DB	 21			; 00000015H
  00399	16		 DB	 22			; 00000016H
  0039a	17		 DB	 23			; 00000017H
  0039b	16		 DB	 22			; 00000016H
  0039c	17		 DB	 23			; 00000017H
  0039d	16		 DB	 22			; 00000016H
  0039e	17		 DB	 23			; 00000017H
  0039f	16		 DB	 22			; 00000016H
  003a0	17		 DB	 23			; 00000017H
?DecomposeLetter@@YA_N_WPAD@Z ENDP			; DecomposeLetter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterlocale\stringcodec_vietnamese.cpp
;	COMDAT ?ComposeTone@@YA_W_W0@Z
_TEXT	SEGMENT
_prev$ = 8						; size = 2
_tone$ = 12						; size = 2
?ComposeTone@@YA_W_W0@Z PROC				; ComposeTone, COMDAT

; 84   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 85   : 	int col, row;
; 86   : 
; 87   : 	switch(tone)

  00003	8b 45 0c	 mov	 eax, DWORD PTR _tone$[ebp]
  00006	0f b7 c0	 movzx	 eax, ax
  00009	05 00 fd ff ff	 add	 eax, -768		; fffffd00H
  0000e	83 f8 23	 cmp	 eax, 35			; 00000023H
  00011	0f 87 51 02 00
	00		 ja	 $LN28@ComposeTon
  00017	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN39@ComposeTon[eax]
  0001e	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN42@ComposeTon[eax*4]
$LN33@ComposeTon:

; 88   : 	{
; 89   : 	case 0x0301:	col = 0;	break;

  00025	33 d2		 xor	 edx, edx
  00027	eb 1a		 jmp	 SHORT $LN34@ComposeTon
$LN32@ComposeTon:

; 90   : 	case 0x0300:	col = 1;	break;

  00029	ba 01 00 00 00	 mov	 edx, 1
  0002e	eb 13		 jmp	 SHORT $LN34@ComposeTon
$LN31@ComposeTon:

; 91   : 	case 0x0309:	col = 2;	break;

  00030	ba 02 00 00 00	 mov	 edx, 2
  00035	eb 0c		 jmp	 SHORT $LN34@ComposeTon
$LN30@ComposeTon:

; 92   : 	case 0x0303:	col = 3;	break;

  00037	ba 03 00 00 00	 mov	 edx, 3
  0003c	eb 05		 jmp	 SHORT $LN34@ComposeTon
$LN29@ComposeTon:

; 93   : 	case 0x0323:	col = 4;	break;

  0003e	ba 04 00 00 00	 mov	 edx, 4
$LN34@ComposeTon:

; 96   : 	}
; 97   : 
; 98   : 	switch(prev)

  00043	66 8b 4d 08	 mov	 cx, WORD PTR _prev$[ebp]
  00047	0f b7 c1	 movzx	 eax, cx
  0004a	3d a0 01 00 00	 cmp	 eax, 416		; 000001a0H
  0004f	0f 8f c3 01 00
	00		 jg	 $LN38@ComposeTon
  00055	0f 84 a9 01 00
	00		 je	 $LN9@ComposeTon
  0005b	83 e8 41	 sub	 eax, 65			; 00000041H
  0005e	3d c2 00 00 00	 cmp	 eax, 194		; 000000c2H
  00063	0f 87 be 01 00
	00		 ja	 $LN1@ComposeTon
  00069	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN40@ComposeTon[eax]
  00070	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN43@ComposeTon[eax*4]
$LN25@ComposeTon:

; 99   : 	{
; 100  : 	case 0x0041:	row = 0;	break;

  00077	33 c9		 xor	 ecx, ecx

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  00079	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  0007c	03 c1		 add	 eax, ecx
  0007e	66 8b 04 45 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[eax*2]

; 129  : }

  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
$LN24@ComposeTon:

; 101  : 	case 0x0061:	row = 1;	break;

  00088	b9 01 00 00 00	 mov	 ecx, 1

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  0008d	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00090	03 c1		 add	 eax, ecx
  00092	66 8b 04 45 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[eax*2]

; 129  : }

  0009a	5d		 pop	 ebp
  0009b	c3		 ret	 0
$LN23@ComposeTon:

; 102  : 	case 0x0102:	row = 2;	break;

  0009c	b9 02 00 00 00	 mov	 ecx, 2

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  000a1	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  000a4	03 c1		 add	 eax, ecx
  000a6	66 8b 04 45 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[eax*2]

; 129  : }

  000ae	5d		 pop	 ebp
  000af	c3		 ret	 0
$LN22@ComposeTon:

; 103  : 	case 0x0103:	row = 3;	break;

  000b0	b9 03 00 00 00	 mov	 ecx, 3

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  000b5	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  000b8	03 c1		 add	 eax, ecx
  000ba	66 8b 04 45 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[eax*2]

; 129  : }

  000c2	5d		 pop	 ebp
  000c3	c3		 ret	 0
$LN21@ComposeTon:

; 104  : 	case 0x00C2:	row = 4;	break;

  000c4	b9 04 00 00 00	 mov	 ecx, 4

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  000c9	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  000cc	03 c1		 add	 eax, ecx
  000ce	66 8b 04 45 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[eax*2]

; 129  : }

  000d6	5d		 pop	 ebp
  000d7	c3		 ret	 0
$LN20@ComposeTon:

; 105  : 	case 0x00E2:	row = 5;	break;

  000d8	b9 05 00 00 00	 mov	 ecx, 5

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  000dd	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  000e0	03 c1		 add	 eax, ecx
  000e2	66 8b 04 45 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[eax*2]

; 129  : }

  000ea	5d		 pop	 ebp
  000eb	c3		 ret	 0
$LN19@ComposeTon:

; 106  : 	case 0x0045:	row = 6;	break;

  000ec	b9 06 00 00 00	 mov	 ecx, 6

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  000f1	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  000f4	03 c1		 add	 eax, ecx
  000f6	66 8b 04 45 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[eax*2]

; 129  : }

  000fe	5d		 pop	 ebp
  000ff	c3		 ret	 0
$LN18@ComposeTon:

; 107  : 	case 0x0065:	row = 7;	break;

  00100	b9 07 00 00 00	 mov	 ecx, 7

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  00105	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00108	03 c1		 add	 eax, ecx
  0010a	66 8b 04 45 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[eax*2]

; 129  : }

  00112	5d		 pop	 ebp
  00113	c3		 ret	 0
$LN17@ComposeTon:

; 108  : 	case 0x00CA:	row = 8;	break;

  00114	b9 08 00 00 00	 mov	 ecx, 8

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  00119	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  0011c	03 c1		 add	 eax, ecx
  0011e	66 8b 04 45 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[eax*2]

; 129  : }

  00126	5d		 pop	 ebp
  00127	c3		 ret	 0
$LN16@ComposeTon:

; 109  : 	case 0x00EA:	row = 9;	break;

  00128	b9 09 00 00 00	 mov	 ecx, 9

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  0012d	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00130	03 c1		 add	 eax, ecx
  00132	66 8b 04 45 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[eax*2]

; 129  : }

  0013a	5d		 pop	 ebp
  0013b	c3		 ret	 0
$LN15@ComposeTon:

; 110  : 	case 0x0049:	row = 10;	break;

  0013c	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  00141	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00144	03 c1		 add	 eax, ecx
  00146	66 8b 04 45 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[eax*2]

; 129  : }

  0014e	5d		 pop	 ebp
  0014f	c3		 ret	 0
$LN14@ComposeTon:

; 111  : 	case 0x0069:	row = 11;	break;

  00150	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  00155	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00158	03 c1		 add	 eax, ecx
  0015a	66 8b 04 45 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[eax*2]

; 129  : }

  00162	5d		 pop	 ebp
  00163	c3		 ret	 0
$LN13@ComposeTon:

; 112  : 	case 0x004F:	row = 12;	break;

  00164	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  00169	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  0016c	03 c1		 add	 eax, ecx
  0016e	66 8b 04 45 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[eax*2]

; 129  : }

  00176	5d		 pop	 ebp
  00177	c3		 ret	 0
$LN12@ComposeTon:

; 113  : 	case 0x006F:	row = 13;	break;

  00178	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  0017d	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00180	03 c1		 add	 eax, ecx
  00182	66 8b 04 45 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[eax*2]

; 129  : }

  0018a	5d		 pop	 ebp
  0018b	c3		 ret	 0
$LN11@ComposeTon:

; 114  : 	case 0x00D4:	row = 14;	break;

  0018c	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  00191	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00194	03 c1		 add	 eax, ecx
  00196	66 8b 04 45 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[eax*2]

; 129  : }

  0019e	5d		 pop	 ebp
  0019f	c3		 ret	 0
$LN10@ComposeTon:

; 115  : 	case 0x00F4:	row = 15;	break;

  001a0	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  001a5	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  001a8	03 c1		 add	 eax, ecx
  001aa	66 8b 04 45 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[eax*2]

; 129  : }

  001b2	5d		 pop	 ebp
  001b3	c3		 ret	 0
$LN7@ComposeTon:

; 118  : 	case 0x0055:	row = 18;	break;

  001b4	b9 12 00 00 00	 mov	 ecx, 18			; 00000012H

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  001b9	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  001bc	03 c1		 add	 eax, ecx
  001be	66 8b 04 45 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[eax*2]

; 129  : }

  001c6	5d		 pop	 ebp
  001c7	c3		 ret	 0
$LN6@ComposeTon:

; 119  : 	case 0x0075:	row = 19;	break;

  001c8	b9 13 00 00 00	 mov	 ecx, 19			; 00000013H

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  001cd	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  001d0	03 c1		 add	 eax, ecx
  001d2	66 8b 04 45 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[eax*2]

; 129  : }

  001da	5d		 pop	 ebp
  001db	c3		 ret	 0
$LN3@ComposeTon:

; 122  : 	case 0x0059:	row = 22;	break;

  001dc	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  001e1	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  001e4	03 c1		 add	 eax, ecx
  001e6	66 8b 04 45 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[eax*2]

; 129  : }

  001ee	5d		 pop	 ebp
  001ef	c3		 ret	 0
$LN2@ComposeTon:

; 123  : 	case 0x0079:	row = 23;	break;

  001f0	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  001f5	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  001f8	03 c1		 add	 eax, ecx
  001fa	66 8b 04 45 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[eax*2]

; 129  : }

  00202	5d		 pop	 ebp
  00203	c3		 ret	 0
$LN9@ComposeTon:

; 116  : 	case 0x01A0:	row = 16;	break;

  00204	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  00209	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  0020c	03 c1		 add	 eax, ecx
  0020e	66 8b 04 45 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[eax*2]

; 129  : }

  00216	5d		 pop	 ebp
  00217	c3		 ret	 0
$LN38@ComposeTon:

; 96   : 	}
; 97   : 
; 98   : 	switch(prev)

  00218	2d a1 01 00 00	 sub	 eax, 417		; 000001a1H
  0021d	74 35		 je	 SHORT $LN8@ComposeTon
  0021f	83 e8 0e	 sub	 eax, 14			; 0000000eH
  00222	74 1c		 je	 SHORT $LN5@ComposeTon
  00224	48		 dec	 eax
  00225	74 05		 je	 SHORT $LN4@ComposeTon
$LN1@ComposeTon:

; 124  : 	default:
; 125  : 		return prev;

  00227	66 8b c1	 mov	 ax, cx

; 129  : }

  0022a	5d		 pop	 ebp
  0022b	c3		 ret	 0
$LN4@ComposeTon:

; 121  : 	case 0x01B0:	row = 21;	break;

  0022c	b9 15 00 00 00	 mov	 ecx, 21			; 00000015H

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  00231	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00234	03 c1		 add	 eax, ecx
  00236	66 8b 04 45 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[eax*2]

; 129  : }

  0023e	5d		 pop	 ebp
  0023f	c3		 ret	 0
$LN5@ComposeTon:

; 120  : 	case 0x01AF:	row = 20;	break;

  00240	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  00245	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00248	03 c1		 add	 eax, ecx
  0024a	66 8b 04 45 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[eax*2]

; 129  : }

  00252	5d		 pop	 ebp
  00253	c3		 ret	 0
$LN8@ComposeTon:

; 117  : 	case 0x01A1:	row = 17;	break;

  00254	b9 11 00 00 00	 mov	 ecx, 17			; 00000011H

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  00259	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  0025c	03 c1		 add	 eax, ecx
  0025e	66 8b 04 45 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[eax*2]

; 129  : }

  00266	5d		 pop	 ebp
  00267	c3		 ret	 0
$LN28@ComposeTon:

; 94   : 	default:
; 95   : 		return prev;

  00268	66 8b 45 08	 mov	 ax, WORD PTR _prev$[ebp]

; 129  : }

  0026c	5d		 pop	 ebp
  0026d	c3		 ret	 0
  0026e	8b ff		 npad	 2
$LN42@ComposeTon:
  00270	00 00 00 00	 DD	 $LN32@ComposeTon
  00274	00 00 00 00	 DD	 $LN33@ComposeTon
  00278	00 00 00 00	 DD	 $LN30@ComposeTon
  0027c	00 00 00 00	 DD	 $LN31@ComposeTon
  00280	00 00 00 00	 DD	 $LN29@ComposeTon
  00284	00 00 00 00	 DD	 $LN28@ComposeTon
$LN39@ComposeTon:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	05		 DB	 5
  0028b	02		 DB	 2
  0028c	05		 DB	 5
  0028d	05		 DB	 5
  0028e	05		 DB	 5
  0028f	05		 DB	 5
  00290	05		 DB	 5
  00291	03		 DB	 3
  00292	05		 DB	 5
  00293	05		 DB	 5
  00294	05		 DB	 5
  00295	05		 DB	 5
  00296	05		 DB	 5
  00297	05		 DB	 5
  00298	05		 DB	 5
  00299	05		 DB	 5
  0029a	05		 DB	 5
  0029b	05		 DB	 5
  0029c	05		 DB	 5
  0029d	05		 DB	 5
  0029e	05		 DB	 5
  0029f	05		 DB	 5
  002a0	05		 DB	 5
  002a1	05		 DB	 5
  002a2	05		 DB	 5
  002a3	05		 DB	 5
  002a4	05		 DB	 5
  002a5	05		 DB	 5
  002a6	05		 DB	 5
  002a7	05		 DB	 5
  002a8	05		 DB	 5
  002a9	05		 DB	 5
  002aa	05		 DB	 5
  002ab	04		 DB	 4
$LN43@ComposeTon:
  002ac	00 00 00 00	 DD	 $LN25@ComposeTon
  002b0	00 00 00 00	 DD	 $LN19@ComposeTon
  002b4	00 00 00 00	 DD	 $LN15@ComposeTon
  002b8	00 00 00 00	 DD	 $LN13@ComposeTon
  002bc	00 00 00 00	 DD	 $LN7@ComposeTon
  002c0	00 00 00 00	 DD	 $LN3@ComposeTon
  002c4	00 00 00 00	 DD	 $LN24@ComposeTon
  002c8	00 00 00 00	 DD	 $LN18@ComposeTon
  002cc	00 00 00 00	 DD	 $LN14@ComposeTon
  002d0	00 00 00 00	 DD	 $LN12@ComposeTon
  002d4	00 00 00 00	 DD	 $LN6@ComposeTon
  002d8	00 00 00 00	 DD	 $LN2@ComposeTon
  002dc	00 00 00 00	 DD	 $LN21@ComposeTon
  002e0	00 00 00 00	 DD	 $LN17@ComposeTon
  002e4	00 00 00 00	 DD	 $LN11@ComposeTon
  002e8	00 00 00 00	 DD	 $LN20@ComposeTon
  002ec	00 00 00 00	 DD	 $LN16@ComposeTon
  002f0	00 00 00 00	 DD	 $LN10@ComposeTon
  002f4	00 00 00 00	 DD	 $LN23@ComposeTon
  002f8	00 00 00 00	 DD	 $LN22@ComposeTon
  002fc	00 00 00 00	 DD	 $LN1@ComposeTon
$LN40@ComposeTon:
  00300	00		 DB	 0
  00301	14		 DB	 20			; 00000014H
  00302	14		 DB	 20			; 00000014H
  00303	14		 DB	 20			; 00000014H
  00304	01		 DB	 1
  00305	14		 DB	 20			; 00000014H
  00306	14		 DB	 20			; 00000014H
  00307	14		 DB	 20			; 00000014H
  00308	02		 DB	 2
  00309	14		 DB	 20			; 00000014H
  0030a	14		 DB	 20			; 00000014H
  0030b	14		 DB	 20			; 00000014H
  0030c	14		 DB	 20			; 00000014H
  0030d	14		 DB	 20			; 00000014H
  0030e	03		 DB	 3
  0030f	14		 DB	 20			; 00000014H
  00310	14		 DB	 20			; 00000014H
  00311	14		 DB	 20			; 00000014H
  00312	14		 DB	 20			; 00000014H
  00313	14		 DB	 20			; 00000014H
  00314	04		 DB	 4
  00315	14		 DB	 20			; 00000014H
  00316	14		 DB	 20			; 00000014H
  00317	14		 DB	 20			; 00000014H
  00318	05		 DB	 5
  00319	14		 DB	 20			; 00000014H
  0031a	14		 DB	 20			; 00000014H
  0031b	14		 DB	 20			; 00000014H
  0031c	14		 DB	 20			; 00000014H
  0031d	14		 DB	 20			; 00000014H
  0031e	14		 DB	 20			; 00000014H
  0031f	14		 DB	 20			; 00000014H
  00320	06		 DB	 6
  00321	14		 DB	 20			; 00000014H
  00322	14		 DB	 20			; 00000014H
  00323	14		 DB	 20			; 00000014H
  00324	07		 DB	 7
  00325	14		 DB	 20			; 00000014H
  00326	14		 DB	 20			; 00000014H
  00327	14		 DB	 20			; 00000014H
  00328	08		 DB	 8
  00329	14		 DB	 20			; 00000014H
  0032a	14		 DB	 20			; 00000014H
  0032b	14		 DB	 20			; 00000014H
  0032c	14		 DB	 20			; 00000014H
  0032d	14		 DB	 20			; 00000014H
  0032e	09		 DB	 9
  0032f	14		 DB	 20			; 00000014H
  00330	14		 DB	 20			; 00000014H
  00331	14		 DB	 20			; 00000014H
  00332	14		 DB	 20			; 00000014H
  00333	14		 DB	 20			; 00000014H
  00334	0a		 DB	 10			; 0000000aH
  00335	14		 DB	 20			; 00000014H
  00336	14		 DB	 20			; 00000014H
  00337	14		 DB	 20			; 00000014H
  00338	0b		 DB	 11			; 0000000bH
  00339	14		 DB	 20			; 00000014H
  0033a	14		 DB	 20			; 00000014H
  0033b	14		 DB	 20			; 00000014H
  0033c	14		 DB	 20			; 00000014H
  0033d	14		 DB	 20			; 00000014H
  0033e	14		 DB	 20			; 00000014H
  0033f	14		 DB	 20			; 00000014H
  00340	14		 DB	 20			; 00000014H
  00341	14		 DB	 20			; 00000014H
  00342	14		 DB	 20			; 00000014H
  00343	14		 DB	 20			; 00000014H
  00344	14		 DB	 20			; 00000014H
  00345	14		 DB	 20			; 00000014H
  00346	14		 DB	 20			; 00000014H
  00347	14		 DB	 20			; 00000014H
  00348	14		 DB	 20			; 00000014H
  00349	14		 DB	 20			; 00000014H
  0034a	14		 DB	 20			; 00000014H
  0034b	14		 DB	 20			; 00000014H
  0034c	14		 DB	 20			; 00000014H
  0034d	14		 DB	 20			; 00000014H
  0034e	14		 DB	 20			; 00000014H
  0034f	14		 DB	 20			; 00000014H
  00350	14		 DB	 20			; 00000014H
  00351	14		 DB	 20			; 00000014H
  00352	14		 DB	 20			; 00000014H
  00353	14		 DB	 20			; 00000014H
  00354	14		 DB	 20			; 00000014H
  00355	14		 DB	 20			; 00000014H
  00356	14		 DB	 20			; 00000014H
  00357	14		 DB	 20			; 00000014H
  00358	14		 DB	 20			; 00000014H
  00359	14		 DB	 20			; 00000014H
  0035a	14		 DB	 20			; 00000014H
  0035b	14		 DB	 20			; 00000014H
  0035c	14		 DB	 20			; 00000014H
  0035d	14		 DB	 20			; 00000014H
  0035e	14		 DB	 20			; 00000014H
  0035f	14		 DB	 20			; 00000014H
  00360	14		 DB	 20			; 00000014H
  00361	14		 DB	 20			; 00000014H
  00362	14		 DB	 20			; 00000014H
  00363	14		 DB	 20			; 00000014H
  00364	14		 DB	 20			; 00000014H
  00365	14		 DB	 20			; 00000014H
  00366	14		 DB	 20			; 00000014H
  00367	14		 DB	 20			; 00000014H
  00368	14		 DB	 20			; 00000014H
  00369	14		 DB	 20			; 00000014H
  0036a	14		 DB	 20			; 00000014H
  0036b	14		 DB	 20			; 00000014H
  0036c	14		 DB	 20			; 00000014H
  0036d	14		 DB	 20			; 00000014H
  0036e	14		 DB	 20			; 00000014H
  0036f	14		 DB	 20			; 00000014H
  00370	14		 DB	 20			; 00000014H
  00371	14		 DB	 20			; 00000014H
  00372	14		 DB	 20			; 00000014H
  00373	14		 DB	 20			; 00000014H
  00374	14		 DB	 20			; 00000014H
  00375	14		 DB	 20			; 00000014H
  00376	14		 DB	 20			; 00000014H
  00377	14		 DB	 20			; 00000014H
  00378	14		 DB	 20			; 00000014H
  00379	14		 DB	 20			; 00000014H
  0037a	14		 DB	 20			; 00000014H
  0037b	14		 DB	 20			; 00000014H
  0037c	14		 DB	 20			; 00000014H
  0037d	14		 DB	 20			; 00000014H
  0037e	14		 DB	 20			; 00000014H
  0037f	14		 DB	 20			; 00000014H
  00380	14		 DB	 20			; 00000014H
  00381	0c		 DB	 12			; 0000000cH
  00382	14		 DB	 20			; 00000014H
  00383	14		 DB	 20			; 00000014H
  00384	14		 DB	 20			; 00000014H
  00385	14		 DB	 20			; 00000014H
  00386	14		 DB	 20			; 00000014H
  00387	14		 DB	 20			; 00000014H
  00388	14		 DB	 20			; 00000014H
  00389	0d		 DB	 13			; 0000000dH
  0038a	14		 DB	 20			; 00000014H
  0038b	14		 DB	 20			; 00000014H
  0038c	14		 DB	 20			; 00000014H
  0038d	14		 DB	 20			; 00000014H
  0038e	14		 DB	 20			; 00000014H
  0038f	14		 DB	 20			; 00000014H
  00390	14		 DB	 20			; 00000014H
  00391	14		 DB	 20			; 00000014H
  00392	14		 DB	 20			; 00000014H
  00393	0e		 DB	 14			; 0000000eH
  00394	14		 DB	 20			; 00000014H
  00395	14		 DB	 20			; 00000014H
  00396	14		 DB	 20			; 00000014H
  00397	14		 DB	 20			; 00000014H
  00398	14		 DB	 20			; 00000014H
  00399	14		 DB	 20			; 00000014H
  0039a	14		 DB	 20			; 00000014H
  0039b	14		 DB	 20			; 00000014H
  0039c	14		 DB	 20			; 00000014H
  0039d	14		 DB	 20			; 00000014H
  0039e	14		 DB	 20			; 00000014H
  0039f	14		 DB	 20			; 00000014H
  003a0	14		 DB	 20			; 00000014H
  003a1	0f		 DB	 15			; 0000000fH
  003a2	14		 DB	 20			; 00000014H
  003a3	14		 DB	 20			; 00000014H
  003a4	14		 DB	 20			; 00000014H
  003a5	14		 DB	 20			; 00000014H
  003a6	14		 DB	 20			; 00000014H
  003a7	14		 DB	 20			; 00000014H
  003a8	14		 DB	 20			; 00000014H
  003a9	10		 DB	 16			; 00000010H
  003aa	14		 DB	 20			; 00000014H
  003ab	14		 DB	 20			; 00000014H
  003ac	14		 DB	 20			; 00000014H
  003ad	14		 DB	 20			; 00000014H
  003ae	14		 DB	 20			; 00000014H
  003af	14		 DB	 20			; 00000014H
  003b0	14		 DB	 20			; 00000014H
  003b1	14		 DB	 20			; 00000014H
  003b2	14		 DB	 20			; 00000014H
  003b3	11		 DB	 17			; 00000011H
  003b4	14		 DB	 20			; 00000014H
  003b5	14		 DB	 20			; 00000014H
  003b6	14		 DB	 20			; 00000014H
  003b7	14		 DB	 20			; 00000014H
  003b8	14		 DB	 20			; 00000014H
  003b9	14		 DB	 20			; 00000014H
  003ba	14		 DB	 20			; 00000014H
  003bb	14		 DB	 20			; 00000014H
  003bc	14		 DB	 20			; 00000014H
  003bd	14		 DB	 20			; 00000014H
  003be	14		 DB	 20			; 00000014H
  003bf	14		 DB	 20			; 00000014H
  003c0	14		 DB	 20			; 00000014H
  003c1	12		 DB	 18			; 00000012H
  003c2	13		 DB	 19			; 00000013H
?ComposeTone@@YA_W_W0@Z ENDP				; ComposeTone
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterlocale\stringcodec_vietnamese.cpp
;	COMDAT ?IsTone@@YA_N_W@Z
_TEXT	SEGMENT
_tone$ = 8						; size = 2
?IsTone@@YA_N_W@Z PROC					; IsTone, COMDAT

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 70   : 	switch(tone)

  00003	8b 45 08	 mov	 eax, DWORD PTR _tone$[ebp]
  00006	0f b7 c0	 movzx	 eax, ax
  00009	05 00 fd ff ff	 add	 eax, -768		; fffffd00H
  0000e	83 f8 23	 cmp	 eax, 35			; 00000023H
  00011	77 12		 ja	 SHORT $LN1@IsTone
  00013	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN7@IsTone[eax]
  0001a	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN9@IsTone[eax*4]
$LN2@IsTone:

; 71   : 	{
; 72   : 	case 0x0300:
; 73   : 	case 0x0301:
; 74   : 	case 0x0309:
; 75   : 	case 0x0303:
; 76   : 	case 0x0323:
; 77   : 		return true;

  00021	b0 01		 mov	 al, 1

; 80   : 	}
; 81   : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
$LN1@IsTone:

; 78   : 	default:
; 79   : 		return false;

  00025	32 c0		 xor	 al, al

; 80   : 	}
; 81   : }

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
  00029	8d 49 00	 npad	 3
$LN9@IsTone:
  0002c	00 00 00 00	 DD	 $LN2@IsTone
  00030	00 00 00 00	 DD	 $LN1@IsTone
$LN7@IsTone:
  00034	00		 DB	 0
  00035	00		 DB	 0
  00036	01		 DB	 1
  00037	00		 DB	 0
  00038	01		 DB	 1
  00039	01		 DB	 1
  0003a	01		 DB	 1
  0003b	01		 DB	 1
  0003c	01		 DB	 1
  0003d	00		 DB	 0
  0003e	01		 DB	 1
  0003f	01		 DB	 1
  00040	01		 DB	 1
  00041	01		 DB	 1
  00042	01		 DB	 1
  00043	01		 DB	 1
  00044	01		 DB	 1
  00045	01		 DB	 1
  00046	01		 DB	 1
  00047	01		 DB	 1
  00048	01		 DB	 1
  00049	01		 DB	 1
  0004a	01		 DB	 1
  0004b	01		 DB	 1
  0004c	01		 DB	 1
  0004d	01		 DB	 1
  0004e	01		 DB	 1
  0004f	01		 DB	 1
  00050	01		 DB	 1
  00051	01		 DB	 1
  00052	01		 DB	 1
  00053	01		 DB	 1
  00054	01		 DB	 1
  00055	01		 DB	 1
  00056	01		 DB	 1
  00057	00		 DB	 0
?IsTone@@YA_N_W@Z ENDP					; IsTone
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterlocale\stringcodec_vietnamese.cpp
;	COMDAT ?EL_String_Encode_Vietnamese@@YAHPB_WHPADH@Z
_TEXT	SEGMENT
_tone$1 = -1						; size = 1
_wide$ = 8						; size = 4
_wideLen$ = 12						; size = 4
_letter$2 = 15						; size = 1
_multi$ = 16						; size = 4
_multiLen$ = 20						; size = 4
?EL_String_Encode_Vietnamese@@YAHPB_WHPADH@Z PROC	; EL_String_Encode_Vietnamese, COMDAT

; 526  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 527  : 	if(wideLen < 0)

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR _wideLen$[ebp]
  00008	56		 push	 esi
  00009	85 db		 test	 ebx, ebx
  0000b	79 18		 jns	 SHORT $LN6@EL_String_

; 528  : 		wideLen = (int)wcslen(wide) + 1;

  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _wide$[ebp]
  00010	8d 51 02	 lea	 edx, DWORD PTR [ecx+2]
$LL15@EL_String_:
  00013	66 8b 01	 mov	 ax, WORD PTR [ecx]
  00016	83 c1 02	 add	 ecx, 2
  00019	66 85 c0	 test	 ax, ax
  0001c	75 f5		 jne	 SHORT $LL15@EL_String_
  0001e	2b ca		 sub	 ecx, edx
  00020	d1 f9		 sar	 ecx, 1
  00022	8d 59 01	 lea	 ebx, DWORD PTR [ecx+1]
$LN6@EL_String_:

; 529  : 
; 530  : 	int src = 0;

  00025	33 f6		 xor	 esi, esi

; 531  : 	int dest = 0;

  00027	33 d2		 xor	 edx, edx

; 532  : 
; 533  : 	if(wideLen > 0)

  00029	85 db		 test	 ebx, ebx
  0002b	7e 5b		 jle	 SHORT $LN17@EL_String_
  0002d	57		 push	 edi
  0002e	8b 7d 14	 mov	 edi, DWORD PTR _multiLen$[ebp]
$LL4@EL_String_:

; 534  : 	{
; 535  : 		while(src < wideLen && dest < multiLen)

  00031	3b d7		 cmp	 edx, edi
  00033	7d 4a		 jge	 SHORT $LN16@EL_String_

; 536  : 		{
; 537  : 			char letter;
; 538  : 			if(DecomposeLetter(wide[src], &letter))

  00035	8d 45 0f	 lea	 eax, DWORD PTR _letter$2[ebp]
  00038	50		 push	 eax
  00039	8b 45 08	 mov	 eax, DWORD PTR _wide$[ebp]
  0003c	0f b7 04 70	 movzx	 eax, WORD PTR [eax+esi*2]
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ?DecomposeLetter@@YA_N_WPAD@Z ; DecomposeLetter

; 539  : 			{
; 540  : 				multi[dest++] = letter;

  00046	8b 4d 10	 mov	 ecx, DWORD PTR _multi$[ebp]
  00049	83 c4 08	 add	 esp, 8
  0004c	84 c0		 test	 al, al
  0004e	74 07		 je	 SHORT $LN2@EL_String_
  00050	8a 45 0f	 mov	 al, BYTE PTR _letter$2[ebp]
  00053	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00056	42		 inc	 edx
$LN2@EL_String_:

; 541  : 			}
; 542  : 
; 543  : 			char tone;
; 544  : 			if(DecomposeTone(wide[src], &tone) && dest < multiLen)

  00057	8d 45 ff	 lea	 eax, DWORD PTR _tone$1[ebp]
  0005a	50		 push	 eax
  0005b	8b 45 08	 mov	 eax, DWORD PTR _wide$[ebp]
  0005e	0f b7 04 70	 movzx	 eax, WORD PTR [eax+esi*2]
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ?DecomposeTone@@YA_N_WPAD@Z ; DecomposeTone
  00068	83 c4 08	 add	 esp, 8
  0006b	84 c0		 test	 al, al
  0006d	74 0b		 je	 SHORT $LN1@EL_String_
  0006f	3b d7		 cmp	 edx, edi
  00071	7d 07		 jge	 SHORT $LN1@EL_String_

; 545  : 			{
; 546  : 				multi[dest++] = tone;

  00073	8a 45 ff	 mov	 al, BYTE PTR _tone$1[ebp]
  00076	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00079	42		 inc	 edx
$LN1@EL_String_:

; 547  : 			}
; 548  : 
; 549  : 			++src;

  0007a	46		 inc	 esi
  0007b	3b f3		 cmp	 esi, ebx
  0007d	7c b2		 jl	 SHORT $LL4@EL_String_
$LN16@EL_String_:
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi

; 550  : 		}
; 551  : 	}
; 552  : 
; 553  : 	return dest;

  00081	8b c2		 mov	 eax, edx
  00083	5b		 pop	 ebx

; 554  : }

  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
$LN17@EL_String_:
  00088	5e		 pop	 esi

; 550  : 		}
; 551  : 	}
; 552  : 
; 553  : 	return dest;

  00089	8b c2		 mov	 eax, edx
  0008b	5b		 pop	 ebx

; 554  : }

  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
?EL_String_Encode_Vietnamese@@YAHPB_WHPADH@Z ENDP	; EL_String_Encode_Vietnamese
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterlocale\stringcodec_vietnamese.cpp
;	COMDAT ?EL_String_Decode_Vietnamese@@YAHPBDHPA_WH@Z
_TEXT	SEGMENT
_multi$ = 8						; size = 4
_multiLen$ = 12						; size = 4
_wide$ = 16						; size = 4
_wideLen$ = 20						; size = 4
?EL_String_Decode_Vietnamese@@YAHPBDHPA_WH@Z PROC	; EL_String_Decode_Vietnamese, COMDAT

; 132  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 133  : 	if(multiLen < 0)
; 134  : 		multiLen = (int)strlen(multi) + 1;

  00003	8b 55 08	 mov	 edx, DWORD PTR _multi$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 0c	 mov	 ebx, DWORD PTR _multiLen$[ebp]
  0000a	56		 push	 esi
  0000b	85 db		 test	 ebx, ebx
  0000d	79 11		 jns	 SHORT $LN8@EL_String_
  0000f	8b ca		 mov	 ecx, edx
  00011	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$LL15@EL_String_:
  00014	8a 01		 mov	 al, BYTE PTR [ecx]
  00016	41		 inc	 ecx
  00017	84 c0		 test	 al, al
  00019	75 f9		 jne	 SHORT $LL15@EL_String_
  0001b	2b ce		 sub	 ecx, esi
  0001d	8d 59 01	 lea	 ebx, DWORD PTR [ecx+1]
$LN8@EL_String_:

; 135  : 
; 136  : 	int src = 0;
; 137  : 	int dest = 0;

  00020	33 f6		 xor	 esi, esi

; 138  : 
; 139  : 	if(multiLen > 0)

  00022	85 db		 test	 ebx, ebx
  00024	7e 74		 jle	 SHORT $LN17@EL_String_

; 140  : 	{
; 141  : 		/* 첫글자는 무조건 변경 */ 
; 142  : 		wchar_t prev = cp1258_to_unicode[(BYTE)multi[src++]];

  00026	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00029	57		 push	 edi

; 143  : 
; 144  : 		while(src < multiLen)

  0002a	8d 7e 01	 lea	 edi, DWORD PTR [esi+1]
  0002d	0f b7 0c 45 00
	00 00 00	 movzx	 ecx, WORD PTR _cp1258_to_unicode[eax*2]
  00035	8b 45 14	 mov	 eax, DWORD PTR _wideLen$[ebp]
  00038	3b df		 cmp	 ebx, edi
  0003a	7e 4b		 jle	 SHORT $LN5@EL_String_
  0003c	8d 64 24 00	 npad	 4
$LL6@EL_String_:

; 145  : 		{
; 146  : 			wchar_t unicode = cp1258_to_unicode[(BYTE)multi[src]];

  00040	0f b6 04 17	 movzx	 eax, BYTE PTR [edi+edx]
  00044	0f b7 14 45 00
	00 00 00	 movzx	 edx, WORD PTR _cp1258_to_unicode[eax*2]

; 147  : 
; 148  : 			/* 다음 문자가 Tone 인가? */ 
; 149  : 			if(IsTone(unicode))

  0004c	52		 push	 edx
  0004d	e8 00 00 00 00	 call	 ?IsTone@@YA_N_W@Z	; IsTone
  00052	83 c4 04	 add	 esp, 4
  00055	84 c0		 test	 al, al
  00057	74 12		 je	 SHORT $LN4@EL_String_

; 150  : 			{
; 151  : 				/* 앞의 문자와 합하자. */ 
; 152  : 				prev = ComposeTone(prev, unicode);

  00059	52		 push	 edx
  0005a	51		 push	 ecx
  0005b	e8 00 00 00 00	 call	 ?ComposeTone@@YA_W_W0@Z	; ComposeTone
  00060	0f b7 c8	 movzx	 ecx, ax
  00063	83 c4 08	 add	 esp, 8

; 153  : 			}
; 154  : 			else

  00066	8b 45 14	 mov	 eax, DWORD PTR _wideLen$[ebp]
  00069	eb 14		 jmp	 SHORT $LN3@EL_String_
$LN4@EL_String_:

; 155  : 			{
; 156  : 				/* 일반 문자가 왔다. 앞 문자를 변환 */ 
; 157  : 				if(dest < wideLen)

  0006b	8b 45 14	 mov	 eax, DWORD PTR _wideLen$[ebp]
  0006e	3b f0		 cmp	 esi, eax
  00070	7d 0b		 jge	 SHORT $LN2@EL_String_

; 158  : 					wide[dest++] = prev;

  00072	8b 45 10	 mov	 eax, DWORD PTR _wide$[ebp]
  00075	66 89 0c 70	 mov	 WORD PTR [eax+esi*2], cx
  00079	46		 inc	 esi
  0007a	8b 45 14	 mov	 eax, DWORD PTR _wideLen$[ebp]
$LN2@EL_String_:

; 159  : 				prev = unicode;

  0007d	8b ca		 mov	 ecx, edx
$LN3@EL_String_:

; 143  : 
; 144  : 		while(src < multiLen)

  0007f	8b 55 08	 mov	 edx, DWORD PTR _multi$[ebp]

; 160  : 			}
; 161  : 			++src;

  00082	47		 inc	 edi
  00083	3b fb		 cmp	 edi, ebx
  00085	7c b9		 jl	 SHORT $LL6@EL_String_
$LN5@EL_String_:
  00087	5f		 pop	 edi

; 162  : 		}
; 163  : 
; 164  : 		if(dest < wideLen)

  00088	3b f0		 cmp	 esi, eax
  0008a	7d 0e		 jge	 SHORT $LN17@EL_String_

; 165  : 			wide[dest++] = prev;

  0008c	8b 45 10	 mov	 eax, DWORD PTR _wide$[ebp]
  0008f	66 89 0c 70	 mov	 WORD PTR [eax+esi*2], cx
  00093	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx

; 169  : }

  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
$LN17@EL_String_:

; 166  : 	}
; 167  : 
; 168  : 	return dest;

  0009a	8b c6		 mov	 eax, esi
  0009c	5e		 pop	 esi
  0009d	5b		 pop	 ebx

; 169  : }

  0009e	5d		 pop	 ebp
  0009f	c3		 ret	 0
?EL_String_Decode_Vietnamese@@YAHPBDHPA_WH@Z ENDP	; EL_String_Decode_Vietnamese
_TEXT	ENDS
END
