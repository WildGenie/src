; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	A:\From C\Desktop\Serwer\Source\Source Client\client\UserInterface\ServerStateChecker.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
PUBLIC	??0?$CSingleton@VCServerStateChecker@@@@QAE@XZ	; CSingleton<CServerStateChecker>::CSingleton<CServerStateChecker>
PUBLIC	??1?$CSingleton@VCServerStateChecker@@@@UAE@XZ	; CSingleton<CServerStateChecker>::~CSingleton<CServerStateChecker>
PUBLIC	??_G?$CSingleton@VCServerStateChecker@@@@UAEPAXI@Z ; CSingleton<CServerStateChecker>::`scalar deleting destructor'
PUBLIC	??0CServerStateChecker@@QAE@XZ			; CServerStateChecker::CServerStateChecker
PUBLIC	??1CServerStateChecker@@UAE@XZ			; CServerStateChecker::~CServerStateChecker
PUBLIC	?Create@CServerStateChecker@@QAEXPAU_object@@@Z	; CServerStateChecker::Create
PUBLIC	?AddChannel@CServerStateChecker@@QAEXIPBDI@Z	; CServerStateChecker::AddChannel
PUBLIC	?Request@CServerStateChecker@@QAEXXZ		; CServerStateChecker::Request
PUBLIC	?Update@CServerStateChecker@@QAEXXZ		; CServerStateChecker::Update
PUBLIC	?Initialize@CServerStateChecker@@QAEXXZ		; CServerStateChecker::Initialize
PUBLIC	??0?$allocator@USChannel@CServerStateChecker@@@std@@QAE@XZ ; std::allocator<CServerStateChecker::SChannel>::allocator<CServerStateChecker::SChannel>
PUBLIC	??0?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >
PUBLIC	?deallocate@?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAEXPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@I@Z ; std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >::deallocate
PUBLIC	?allocate@?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@I@Z ; std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >::allocate
PUBLIC	?max_size@?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QBEIXZ ; std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@2@@Z ; std::allocator_traits<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::max_size
PUBLIC	??0?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@QAE@XZ ; std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >
PUBLIC	?_Nextnode@?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@SAAAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >::_Nextnode
PUBLIC	?_Prevnode@?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@SAAAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >::_Prevnode
PUBLIC	?_Myval@?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@SAAAUSChannel@CServerStateChecker@@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@@Z ; std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >::_Myval
PUBLIC	??0?$_List_alloc@$0A@U?$_List_base_types@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAE@ABV?$allocator@USChannel@CServerStateChecker@@@1@@Z ; std::_List_alloc<0,std::_List_base_types<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> > >::_List_alloc<0,std::_List_base_types<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> > >
PUBLIC	??1?$_List_alloc@$0A@U?$_List_base_types@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAE@XZ ; std::_List_alloc<0,std::_List_base_types<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> > >::~_List_alloc<0,std::_List_base_types<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> > >
PUBLIC	?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@XZ ; std::_List_alloc<0,std::_List_base_types<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> > >::_Buyheadnode
PUBLIC	?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAEXPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@@Z ; std::_List_alloc<0,std::_List_base_types<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> > >::_Freeheadnode
PUBLIC	?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@PAU32@0@Z ; std::_List_alloc<0,std::_List_base_types<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> > >::_Buynode0
PUBLIC	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> > >::_Getal
PUBLIC	??0?$_List_buy@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE@ABV?$allocator@USChannel@CServerStateChecker@@@1@@Z ; std::_List_buy<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::_List_buy<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >
PUBLIC	?_Freenode@?$_List_buy@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@@Z ; std::_List_buy<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::_Freenode
PUBLIC	??1?$_List_buy@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE@XZ ; std::_List_buy<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::~_List_buy<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >
PUBLIC	??0?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE@XZ ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >
PUBLIC	??1?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE@XZ ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::~list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >
PUBLIC	?begin@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@2@XZ ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::begin
PUBLIC	?end@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@2@XZ ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::end
PUBLIC	?_Unchecked_end@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@2@XZ ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::_Unchecked_end
PUBLIC	?max_size@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QBEIXZ ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::max_size
PUBLIC	?empty@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QBE_NXZ ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::empty
PUBLIC	?push_back@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXABUSChannel@CServerStateChecker@@@Z ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::push_back
PUBLIC	?clear@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXXZ ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::clear
PUBLIC	?_Tidy@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXXZ ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::_Tidy
PUBLIC	?_Incsize@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXI@Z ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::_Incsize
PUBLIC	??_GCServerStateChecker@@UAEPAXI@Z		; CServerStateChecker::`scalar deleting destructor'
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@PBV?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >,std::_Iterator_base0>
PUBLIC	??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@U_Iterator_base0@2@@std@@QBEABUSChannel@CServerStateChecker@@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >,std::_Iterator_base0>::operator*
PUBLIC	??C?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPBUSChannel@CServerStateChecker@@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >,std::_Iterator_base0>::operator->
PUBLIC	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >,std::_Iterator_base0>::_Mynode
PUBLIC	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAE@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@PBV?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@1@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >
PUBLIC	??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBEABUSChannel@CServerStateChecker@@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::operator*
PUBLIC	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::operator++
PUBLIC	??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::operator==
PUBLIC	??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::operator!=
PUBLIC	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAE@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@PBV?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::_List_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >
PUBLIC	??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBEAAUSChannel@CServerStateChecker@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::operator*
PUBLIC	??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBEPAUSChannel@CServerStateChecker@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::operator->
PUBLIC	??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAE@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@PBV?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@1@@Z ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >
PUBLIC	??$_Insert@ABUSChannel@CServerStateChecker@@@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@U_Iterator_base0@2@@1@ABUSChannel@CServerStateChecker@@@Z ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::_Insert<CServerStateChecker::SChannel const &>
PUBLIC	?pointer_to@?$pointer_traits@PAUSChannel@CServerStateChecker@@@std@@SAPAUSChannel@CServerStateChecker@@AAU34@@Z ; std::pointer_traits<CServerStateChecker::SChannel *>::pointer_to
PUBLIC	?pointer_to@?$pointer_traits@PBUSChannel@CServerStateChecker@@@std@@SAPBUSChannel@CServerStateChecker@@ABU34@@Z ; std::pointer_traits<CServerStateChecker::SChannel const *>::pointer_to
PUBLIC	??$addressof@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@YAPAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<CServerStateChecker::SChannel,void *> *>
PUBLIC	??$destroy@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::destroy<std::_List_node<CServerStateChecker::SChannel,void *> *>
PUBLIC	??$addressof@USChannel@CServerStateChecker@@@std@@YAPAUSChannel@CServerStateChecker@@AAU12@@Z ; std::addressof<CServerStateChecker::SChannel>
PUBLIC	??$destroy@USChannel@CServerStateChecker@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAEXPAUSChannel@CServerStateChecker@@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::destroy<CServerStateChecker::SChannel>
PUBLIC	??$addressof@$$CBUSChannel@CServerStateChecker@@@std@@YAPBUSChannel@CServerStateChecker@@ABU12@@Z ; std::addressof<CServerStateChecker::SChannel const >
PUBLIC	??$construct@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@AAPAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::construct<std::_List_node<CServerStateChecker::SChannel,void *> *,std::_List_node<CServerStateChecker::SChannel,void *> * &>
PUBLIC	??$_Allocate@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@YAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@IPAU10@@Z ; std::_Allocate<std::_List_node<CServerStateChecker::SChannel,void *> >
PUBLIC	??$forward@ABUSChannel@CServerStateChecker@@@std@@YAABUSChannel@CServerStateChecker@@ABU12@@Z ; std::forward<CServerStateChecker::SChannel const &>
PUBLIC	??$_Buynode@ABUSChannel@CServerStateChecker@@@?$_List_buy@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@PAU21@0ABUSChannel@CServerStateChecker@@@Z ; std::_List_buy<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::_Buynode<CServerStateChecker::SChannel const &>
PUBLIC	??$destroy@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@PAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@@Z ; std::allocator_traits<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::destroy<std::_List_node<CServerStateChecker::SChannel,void *> *>
PUBLIC	??$destroy@USChannel@CServerStateChecker@@@?$allocator_traits@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@PAUSChannel@CServerStateChecker@@@Z ; std::allocator_traits<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::destroy<CServerStateChecker::SChannel>
PUBLIC	??$forward@AAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@YAAAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@AAPAU10@@Z ; std::forward<std::_List_node<CServerStateChecker::SChannel,void *> * &>
PUBLIC	??$construct@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@PAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@AAPAU31@@Z ; std::allocator_traits<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::construct<std::_List_node<CServerStateChecker::SChannel,void *> *,std::_List_node<CServerStateChecker::SChannel,void *> * &>
PUBLIC	??$construct@USChannel@CServerStateChecker@@ABU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAEXPAUSChannel@CServerStateChecker@@ABU23@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::construct<CServerStateChecker::SChannel,CServerStateChecker::SChannel const &>
PUBLIC	??$destroy@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAEXPAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@@Z ; std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >::destroy<std::_List_node<CServerStateChecker::SChannel,void *> *>
PUBLIC	??$destroy@USChannel@CServerStateChecker@@@?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAEXPAUSChannel@CServerStateChecker@@@Z ; std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >::destroy<CServerStateChecker::SChannel>
PUBLIC	??$construct@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAEXPAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@AAPAU21@@Z ; std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >::construct<std::_List_node<CServerStateChecker::SChannel,void *> *,std::_List_node<CServerStateChecker::SChannel,void *> * &>
PUBLIC	??$construct@USChannel@CServerStateChecker@@ABU12@@?$allocator_traits@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@PAUSChannel@CServerStateChecker@@ABU34@@Z ; std::allocator_traits<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::construct<CServerStateChecker::SChannel,CServerStateChecker::SChannel const &>
PUBLIC	??$construct@USChannel@CServerStateChecker@@ABU12@@?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAEXPAUSChannel@CServerStateChecker@@ABU23@@Z ; std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >::construct<CServerStateChecker::SChannel,CServerStateChecker::SChannel const &>
PUBLIC	?ms_singleton@?$CSingleton@VCServerStateChecker@@@@0PAVCServerStateChecker@@A ; CSingleton<CServerStateChecker>::ms_singleton
PUBLIC	??_7?$CSingleton@VCServerStateChecker@@@@6B@	; CSingleton<CServerStateChecker>::`vftable'
PUBLIC	??_7CServerStateChecker@@6B@			; CServerStateChecker::`vftable'
PUBLIC	??_C@_04INACLLOK@?$CIii?$CJ?$AA@		; `string'
PUBLIC	??_C@_0BD@EEDMKMGJ@NotifyChannelState?$AA@	; `string'
PUBLIC	??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_R4CServerStateChecker@@6B@			; CServerStateChecker::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCServerStateChecker@@@8			; CServerStateChecker `RTTI Type Descriptor'
PUBLIC	??_R3CServerStateChecker@@8			; CServerStateChecker::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CServerStateChecker@@8			; CServerStateChecker::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CServerStateChecker@@8		; CServerStateChecker::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$CSingleton@VCServerStateChecker@@@@8 ; CSingleton<CServerStateChecker>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$CSingleton@VCServerStateChecker@@@@@8	; CSingleton<CServerStateChecker> `RTTI Type Descriptor'
PUBLIC	??_R3?$CSingleton@VCServerStateChecker@@@@8	; CSingleton<CServerStateChecker>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CSingleton@VCServerStateChecker@@@@8	; CSingleton<CServerStateChecker>::`RTTI Base Class Array'
PUBLIC	??_R4?$CSingleton@VCServerStateChecker@@@@6B@	; CSingleton<CServerStateChecker>::`RTTI Complete Object Locator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	__imp__Py_BuildValue:PROC
EXTRN	?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z:PROC ; PyCallClassMemberFunc
EXTRN	??0CNetworkStream@@QAE@XZ:PROC			; CNetworkStream::CNetworkStream
EXTRN	??1CNetworkStream@@UAE@XZ:PROC			; CNetworkStream::~CNetworkStream
EXTRN	?SetRecvBufferSize@CNetworkStream@@QAEXH@Z:PROC	; CNetworkStream::SetRecvBufferSize
EXTRN	?SetSendBufferSize@CNetworkStream@@QAEXH@Z:PROC	; CNetworkStream::SetSendBufferSize
EXTRN	?ClearRecvBuffer@CNetworkStream@@QAEXXZ:PROC	; CNetworkStream::ClearRecvBuffer
EXTRN	?Process@CNetworkStream@@QAEXXZ:PROC		; CNetworkStream::Process
EXTRN	?Connect@CNetworkStream@@QAE_NPBDHH@Z:PROC	; CNetworkStream::Connect
EXTRN	?Disconnect@CNetworkStream@@QAEXXZ:PROC		; CNetworkStream::Disconnect
EXTRN	?Recv@CNetworkStream@@QAE_NHPAX@Z:PROC		; CNetworkStream::Recv
EXTRN	?Send@CNetworkStream@@QAE_NHPBX@Z:PROC		; CNetworkStream::Send
EXTRN	??_E?$CSingleton@VCServerStateChecker@@@@UAEPAXI@Z:PROC ; CSingleton<CServerStateChecker>::`vector deleting destructor'
EXTRN	??_ECServerStateChecker@@UAEPAXI@Z:PROC		; CServerStateChecker::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCServerStateChecker@@@@0PAVCServerStateChecker@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCServerStateChecker@@@@0PAVCServerStateChecker@@A DD 01H DUP (?) ; CSingleton<CServerStateChecker>::ms_singleton
_BSS	ENDS
;	COMDAT ??_R4?$CSingleton@VCServerStateChecker@@@@6B@
rdata$r	SEGMENT
??_R4?$CSingleton@VCServerStateChecker@@@@6B@ DD 00H	; CSingleton<CServerStateChecker>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CSingleton@VCServerStateChecker@@@@@8
	DD	FLAT:??_R3?$CSingleton@VCServerStateChecker@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CSingleton@VCServerStateChecker@@@@8
rdata$r	SEGMENT
??_R2?$CSingleton@VCServerStateChecker@@@@8 DD FLAT:??_R1A@?0A@EA@?$CSingleton@VCServerStateChecker@@@@8 ; CSingleton<CServerStateChecker>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CSingleton@VCServerStateChecker@@@@8
rdata$r	SEGMENT
??_R3?$CSingleton@VCServerStateChecker@@@@8 DD 00H	; CSingleton<CServerStateChecker>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CSingleton@VCServerStateChecker@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CSingleton@VCServerStateChecker@@@@@8
data$r	SEGMENT
??_R0?AV?$CSingleton@VCServerStateChecker@@@@@8 DD FLAT:??_7type_info@@6B@ ; CSingleton<CServerStateChecker> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CSingleton@VCServerStateChecker@@@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CSingleton@VCServerStateChecker@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CSingleton@VCServerStateChecker@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCServerStateChecker@@@@@8 ; CSingleton<CServerStateChecker>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCServerStateChecker@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CServerStateChecker@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CServerStateChecker@@8 DD FLAT:??_R0?AVCServerStateChecker@@@8 ; CServerStateChecker::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CServerStateChecker@@8
rdata$r	ENDS
;	COMDAT ??_R2CServerStateChecker@@8
rdata$r	SEGMENT
??_R2CServerStateChecker@@8 DD FLAT:??_R1A@?0A@EA@CServerStateChecker@@8 ; CServerStateChecker::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$CSingleton@VCServerStateChecker@@@@8
rdata$r	ENDS
;	COMDAT ??_R3CServerStateChecker@@8
rdata$r	SEGMENT
??_R3CServerStateChecker@@8 DD 00H			; CServerStateChecker::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CServerStateChecker@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCServerStateChecker@@@8
data$r	SEGMENT
??_R0?AVCServerStateChecker@@@8 DD FLAT:??_7type_info@@6B@ ; CServerStateChecker `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCServerStateChecker@@', 00H
data$r	ENDS
;	COMDAT ??_R4CServerStateChecker@@6B@
rdata$r	SEGMENT
??_R4CServerStateChecker@@6B@ DD 00H			; CServerStateChecker::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCServerStateChecker@@@8
	DD	FLAT:??_R3CServerStateChecker@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ DB 'list<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EEDMKMGJ@NotifyChannelState?$AA@
CONST	SEGMENT
??_C@_0BD@EEDMKMGJ@NotifyChannelState?$AA@ DB 'NotifyChannelState', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04INACLLOK@?$CIii?$CJ?$AA@
CONST	SEGMENT
??_C@_04INACLLOK@?$CIii?$CJ?$AA@ DB '(ii)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7CServerStateChecker@@6B@
CONST	SEGMENT
??_7CServerStateChecker@@6B@ DD FLAT:??_R4CServerStateChecker@@6B@ ; CServerStateChecker::`vftable'
	DD	FLAT:??_ECServerStateChecker@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CSingleton@VCServerStateChecker@@@@6B@
CONST	SEGMENT
??_7?$CSingleton@VCServerStateChecker@@@@6B@ DD FLAT:??_R4?$CSingleton@VCServerStateChecker@@@@6B@ ; CSingleton<CServerStateChecker>::`vftable'
	DD	FLAT:??_E?$CSingleton@VCServerStateChecker@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CServerStateChecker@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CServerStateChecker@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CServerStateChecker@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CServerStateChecker@@UAE@XZ$2
__ehfuncinfo$??1CServerStateChecker@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1CServerStateChecker@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CServerStateChecker@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CServerStateChecker@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CServerStateChecker@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CServerStateChecker@@QAE@XZ$2
__ehfuncinfo$??0CServerStateChecker@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CServerStateChecker@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@USChannel@CServerStateChecker@@ABU12@@?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAEXPAUSChannel@CServerStateChecker@@ABU23@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@USChannel@CServerStateChecker@@ABU12@@?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAEXPAUSChannel@CServerStateChecker@@ABU23@@Z PROC ; std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >::construct<CServerStateChecker::SChannel,CServerStateChecker::SChannel const &>, COMDAT
; _this$ = ecx

; 598  : 		void construct(_Objty *_Ptr, _Types&&... _Args)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 599  : 		{	// construct _Objty(_Types...) at _Ptr
; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 11		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00011	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00015	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00018	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN3@construct:

; 601  : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
??$construct@USChannel@CServerStateChecker@@ABU12@@?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAEXPAUSChannel@CServerStateChecker@@ABU23@@Z ENDP ; std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >::construct<CServerStateChecker::SChannel,CServerStateChecker::SChannel const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@USChannel@CServerStateChecker@@ABU12@@?$allocator_traits@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@PAUSChannel@CServerStateChecker@@ABU34@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@USChannel@CServerStateChecker@@ABU12@@?$allocator_traits@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@PAUSChannel@CServerStateChecker@@ABU34@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::construct<CServerStateChecker::SChannel,CServerStateChecker::SChannel const &>, COMDAT

; 720  : 		static void construct(_Alloc& _Al, _Objty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 11		 je	 SHORT $LN7@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00011	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00015	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00018	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN7@construct:

; 721  : 			_Types&&... _Args)
; 722  : 		{	// construct _Objty(_Types...) at _Ptr
; 723  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 724  : 		}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$construct@USChannel@CServerStateChecker@@ABU12@@?$allocator_traits@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@PAUSChannel@CServerStateChecker@@ABU34@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::construct<CServerStateChecker::SChannel,CServerStateChecker::SChannel const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAEXPAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAEXPAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@AAPAU21@@Z PROC ; std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >::construct<std::_List_node<CServerStateChecker::SChannel,void *> *,std::_List_node<CServerStateChecker::SChannel,void *> * &>, COMDAT
; _this$ = ecx

; 598  : 		void construct(_Objty *_Ptr, _Types&&... _Args)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 599  : 		{	// construct _Objty(_Types...) at _Ptr
; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 601  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAEXPAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@AAPAU21@@Z ENDP ; std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >::construct<std::_List_node<CServerStateChecker::SChannel,void *> *,std::_List_node<CServerStateChecker::SChannel,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$destroy@USChannel@CServerStateChecker@@@?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAEXPAUSChannel@CServerStateChecker@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@USChannel@CServerStateChecker@@@?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAEXPAUSChannel@CServerStateChecker@@@Z PROC ; std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >::destroy<CServerStateChecker::SChannel>, COMDAT
; _this$ = ecx

; 606  : 		{	// destroy object at _Ptr
; 607  : 		_Ptr->~_Uty();
; 608  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@USChannel@CServerStateChecker@@@?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAEXPAUSChannel@CServerStateChecker@@@Z ENDP ; std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >::destroy<CServerStateChecker::SChannel>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAEXPAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAEXPAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@@Z PROC ; std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >::destroy<std::_List_node<CServerStateChecker::SChannel,void *> *>, COMDAT
; _this$ = ecx

; 606  : 		{	// destroy object at _Ptr
; 607  : 		_Ptr->~_Uty();
; 608  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAEXPAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@@Z ENDP ; std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >::destroy<std::_List_node<CServerStateChecker::SChannel,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@USChannel@CServerStateChecker@@ABU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAEXPAUSChannel@CServerStateChecker@@ABU23@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@USChannel@CServerStateChecker@@ABU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAEXPAUSChannel@CServerStateChecker@@ABU23@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::construct<CServerStateChecker::SChannel,CServerStateChecker::SChannel const &>, COMDAT
; _this$ = ecx

; 868  : 		void construct(_Ty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 11		 je	 SHORT $LN11@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00011	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00015	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00018	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN11@construct:

; 869  : 			_Types&&... _Args)
; 870  : 		{	// construct _Ty(_Types...) at _Ptr
; 871  : 		_Mytraits::construct(*this, _Ptr,
; 872  : 			_STD forward<_Types>(_Args)...);
; 873  : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
??$construct@USChannel@CServerStateChecker@@ABU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAEXPAUSChannel@CServerStateChecker@@ABU23@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::construct<CServerStateChecker::SChannel,CServerStateChecker::SChannel const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@PAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@AAPAU31@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@PAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@AAPAU31@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::construct<std::_List_node<CServerStateChecker::SChannel,void *> *,std::_List_node<CServerStateChecker::SChannel,void *> * &>, COMDAT

; 720  : 		static void construct(_Alloc& _Al, _Objty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN7@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN7@construct:

; 721  : 			_Types&&... _Args)
; 722  : 		{	// construct _Objty(_Types...) at _Ptr
; 723  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 724  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@PAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@AAPAU31@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::construct<std::_List_node<CServerStateChecker::SChannel,void *> *,std::_List_node<CServerStateChecker::SChannel,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\type_traits
;	COMDAT ??$forward@AAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@YAAAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@YAAAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_List_node<CServerStateChecker::SChannel,void *> * &>, COMDAT

; 1504 : 	{	// forward an lvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@YAAAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_List_node<CServerStateChecker::SChannel,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$destroy@USChannel@CServerStateChecker@@@?$allocator_traits@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@PAUSChannel@CServerStateChecker@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@USChannel@CServerStateChecker@@@?$allocator_traits@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@PAUSChannel@CServerStateChecker@@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::destroy<CServerStateChecker::SChannel>, COMDAT

; 729  : 		{	// destroy object at _Ptr
; 730  : 		_Al.destroy(_Ptr);
; 731  : 		}

  00000	c3		 ret	 0
??$destroy@USChannel@CServerStateChecker@@@?$allocator_traits@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@PAUSChannel@CServerStateChecker@@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::destroy<CServerStateChecker::SChannel>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@PAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@PAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::destroy<std::_List_node<CServerStateChecker::SChannel,void *> *>, COMDAT

; 729  : 		{	// destroy object at _Ptr
; 730  : 		_Al.destroy(_Ptr);
; 731  : 		}

  00000	c3		 ret	 0
??$destroy@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@PAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::destroy<std::_List_node<CServerStateChecker::SChannel,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\list
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\list
;	COMDAT ??$_Buynode@ABUSChannel@CServerStateChecker@@@?$_List_buy@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@PAU21@0ABUSChannel@CServerStateChecker@@@Z
_TEXT	SEGMENT
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
_<_Val_0>$ = 16						; size = 4
??$_Buynode@ABUSChannel@CServerStateChecker@@@?$_List_buy@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@PAU21@0ABUSChannel@CServerStateChecker@@@Z PROC ; std::_List_buy<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::_Buynode<CServerStateChecker::SChannel const &>, COMDAT
; _this$ = ecx

; 827  : 		_Nodeptr _Buynode(_Nodeptr _Next, _Nodeptr _Prev,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 828  : 			_Valty&&... _Val)
; 829  : 		{	// allocate a node and set links and value
; 830  : 		_Nodeptr _Pnode = this->_Buynode0(_Next, _Prev);

  00003	ff 75 0c	 push	 DWORD PTR __Prev$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Next$[ebp]
  00009	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@PAU32@0@Z ; std::_List_alloc<0,std::_List_base_types<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> > >::_Buynode0

; 543  : 		return ((reference)_Pnode->_Myval);

  0000e	8d 50 08	 lea	 edx, DWORD PTR [eax+8]
; File a:\vs\vc\include\xmemory0

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00011	85 d2		 test	 edx, edx
  00013	74 11		 je	 SHORT $LN26@Buynode
  00015	8b 4d 10	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]
  00018	f3 0f 7e 01	 movq	 xmm0, QWORD PTR [ecx]
  0001c	66 0f d6 02	 movq	 QWORD PTR [edx], xmm0
  00020	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00023	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
$LN26@Buynode:
; File a:\vs\vc\include\list

; 842  : 		}

  00026	5d		 pop	 ebp
  00027	c2 0c 00	 ret	 12			; 0000000cH
??$_Buynode@ABUSChannel@CServerStateChecker@@@?$_List_buy@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@PAU21@0ABUSChannel@CServerStateChecker@@@Z ENDP ; std::_List_buy<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::_Buynode<CServerStateChecker::SChannel const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\type_traits
;	COMDAT ??$forward@ABUSChannel@CServerStateChecker@@@std@@YAABUSChannel@CServerStateChecker@@ABU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUSChannel@CServerStateChecker@@@std@@YAABUSChannel@CServerStateChecker@@ABU12@@Z PROC ; std::forward<CServerStateChecker::SChannel const &>, COMDAT

; 1504 : 	{	// forward an lvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUSChannel@CServerStateChecker@@@std@@YAABUSChannel@CServerStateChecker@@ABU12@@Z ENDP ; std::forward<CServerStateChecker::SChannel const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$_Allocate@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@YAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@IPAU10@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@YAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@IPAU10@@Z PROC ; std::_Allocate<std::_List_node<CServerStateChecker::SChannel,void *> >, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 23   : 	void *_Ptr = 0;
; 24   : 
; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 21		 je	 SHORT $LN2@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d cc cc cc 0c	 cmp	 eax, 214748364		; 0cccccccH
  00011	77 15		 ja	 SHORT $LN1@Allocate
  00013	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00016	c1 e0 02	 shl	 eax, 2
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001f	8b c8		 mov	 ecx, eax
  00021	83 c4 04	 add	 esp, 4
  00024	85 c9		 test	 ecx, ecx
  00026	75 05		 jne	 SHORT $LN2@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00028	e9 00 00 00 00	 jmp	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

  0002d	8b c1		 mov	 eax, ecx

; 32   : 	}

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??$_Allocate@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@YAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@IPAU10@@Z ENDP ; std::_Allocate<std::_List_node<CServerStateChecker::SChannel,void *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@AAPAU21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::construct<std::_List_node<CServerStateChecker::SChannel,void *> *,std::_List_node<CServerStateChecker::SChannel,void *> * &>, COMDAT
; _this$ = ecx

; 868  : 		void construct(_Ty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN11@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN11@construct:

; 869  : 			_Types&&... _Args)
; 870  : 		{	// construct _Ty(_Types...) at _Ptr
; 871  : 		_Mytraits::construct(*this, _Ptr,
; 872  : 			_STD forward<_Types>(_Args)...);
; 873  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@AAPAU21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::construct<std::_List_node<CServerStateChecker::SChannel,void *> *,std::_List_node<CServerStateChecker::SChannel,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xstddef
;	COMDAT ??$addressof@$$CBUSChannel@CServerStateChecker@@@std@@YAPBUSChannel@CServerStateChecker@@ABU12@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUSChannel@CServerStateChecker@@@std@@YAPBUSChannel@CServerStateChecker@@ABU12@@Z PROC ; std::addressof<CServerStateChecker::SChannel const >, COMDAT

; 92   : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 93   : 	return (reinterpret_cast<_Ty *>(
; 94   : 		(&const_cast<char&>(
; 95   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 96   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUSChannel@CServerStateChecker@@@std@@YAPBUSChannel@CServerStateChecker@@ABU12@@Z ENDP ; std::addressof<CServerStateChecker::SChannel const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$destroy@USChannel@CServerStateChecker@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAEXPAUSChannel@CServerStateChecker@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@USChannel@CServerStateChecker@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAEXPAUSChannel@CServerStateChecker@@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::destroy<CServerStateChecker::SChannel>, COMDAT
; _this$ = ecx

; 878  : 		{	// destroy object at _Ptr
; 879  : 		_Mytraits::destroy(*this, _Ptr);
; 880  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@USChannel@CServerStateChecker@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAEXPAUSChannel@CServerStateChecker@@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::destroy<CServerStateChecker::SChannel>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xstddef
;	COMDAT ??$addressof@USChannel@CServerStateChecker@@@std@@YAPAUSChannel@CServerStateChecker@@AAU12@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@USChannel@CServerStateChecker@@@std@@YAPAUSChannel@CServerStateChecker@@AAU12@@Z PROC ; std::addressof<CServerStateChecker::SChannel>, COMDAT

; 92   : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 93   : 	return (reinterpret_cast<_Ty *>(
; 94   : 		(&const_cast<char&>(
; 95   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 96   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@USChannel@CServerStateChecker@@@std@@YAPAUSChannel@CServerStateChecker@@AAU12@@Z ENDP ; std::addressof<CServerStateChecker::SChannel>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::destroy<std::_List_node<CServerStateChecker::SChannel,void *> *>, COMDAT
; _this$ = ecx

; 878  : 		{	// destroy object at _Ptr
; 879  : 		_Mytraits::destroy(*this, _Ptr);
; 880  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::destroy<std::_List_node<CServerStateChecker::SChannel,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xstddef
;	COMDAT ??$addressof@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@YAPAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@YAPAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_List_node<CServerStateChecker::SChannel,void *> *>, COMDAT

; 92   : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 93   : 	return (reinterpret_cast<_Ty *>(
; 94   : 		(&const_cast<char&>(
; 95   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 96   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@YAPAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_List_node<CServerStateChecker::SChannel,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PBUSChannel@CServerStateChecker@@@std@@SAPBUSChannel@CServerStateChecker@@ABU34@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PBUSChannel@CServerStateChecker@@@std@@SAPBUSChannel@CServerStateChecker@@ABU34@@Z PROC ; std::pointer_traits<CServerStateChecker::SChannel const *>::pointer_to, COMDAT

; 233  : 		{	// convert raw reference to pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 234  : 		return (_STD addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 235  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?pointer_to@?$pointer_traits@PBUSChannel@CServerStateChecker@@@std@@SAPBUSChannel@CServerStateChecker@@ABU34@@Z ENDP ; std::pointer_traits<CServerStateChecker::SChannel const *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PAUSChannel@CServerStateChecker@@@std@@SAPAUSChannel@CServerStateChecker@@AAU34@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PAUSChannel@CServerStateChecker@@@std@@SAPAUSChannel@CServerStateChecker@@AAU34@@Z PROC ; std::pointer_traits<CServerStateChecker::SChannel *>::pointer_to, COMDAT

; 233  : 		{	// convert raw reference to pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 234  : 		return (_STD addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 235  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?pointer_to@?$pointer_traits@PAUSChannel@CServerStateChecker@@@std@@SAPAUSChannel@CServerStateChecker@@AAU34@@Z ENDP ; std::pointer_traits<CServerStateChecker::SChannel *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\list
;	COMDAT ??$_Insert@ABUSChannel@CServerStateChecker@@@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@U_Iterator_base0@2@@1@ABUSChannel@CServerStateChecker@@@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Insert@ABUSChannel@CServerStateChecker@@@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@U_Iterator_base0@2@@1@ABUSChannel@CServerStateChecker@@@Z PROC ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::_Insert<CServerStateChecker::SChannel const &>, COMDAT
; _this$ = ecx

; 1056 : 		void _Insert(_Unchecked_const_iterator _Where,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 534  : 		}
; 535  : 
; 536  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 537  : 		{	// return reference to predecessor pointer in node
; 538  : 		return ((_Nodepref)_Pnode->_Prev);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Where$[ebp]
  00007	57		 push	 edi

; 1057 : 		_Valty&&... _Val)
; 1058 : 		{	// insert element at _Where
; 1059 : 		_Nodeptr _Pnode = _Where._Mynode();
; 1060 : 		_Nodeptr _Newnode =
; 1061 : 			this->_Buynode(_Pnode, this->_Prevnode(_Pnode),
; 1062 : 				_STD forward<_Valty>(_Val)...);

  00008	ff 75 0c	 push	 DWORD PTR _<_Val_0>$[ebp]
  0000b	8b f9		 mov	 edi, ecx
  0000d	ff 76 04	 push	 DWORD PTR [esi+4]
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ??$_Buynode@ABUSChannel@CServerStateChecker@@@?$_List_buy@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@PAU21@0ABUSChannel@CServerStateChecker@@@Z ; std::_List_buy<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::_Buynode<CServerStateChecker::SChannel const &>
  00016	8b d0		 mov	 edx, eax

; 1067 : 
; 1068 : 
; 1069 : 	list(_XSTD initializer_list<_Ty> _Ilist,
; 1070 : 		const _Alloc& _Al = allocator_type())
; 1071 : 		: _Mybase(_Al)
; 1072 : 		{	// construct from initializer_list
; 1073 : 		insert(begin(), _Ilist.begin(), _Ilist.end());
; 1074 : 		}
; 1075 : 
; 1076 : 	_Myt& operator=(_XSTD initializer_list<_Ty> _Ilist)
; 1077 : 		{	// assign initializer_list
; 1078 : 		assign(_Ilist.begin(), _Ilist.end());
; 1079 : 		return (*this);
; 1080 : 		}
; 1081 : 
; 1082 : 	void assign(_XSTD initializer_list<_Ty> _Ilist)
; 1083 : 		{	// assign initializer_list
; 1084 : 		assign(_Ilist.begin(), _Ilist.end());
; 1085 : 		}
; 1086 : 
; 1087 : 	iterator insert(const_iterator _Where,
; 1088 : 		_XSTD initializer_list<_Ty> _Ilist)
; 1089 : 		{	// insert initializer_list
; 1090 : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 1091 : 		}
; 1092 : 
; 1093 : 	~list() _NOEXCEPT
; 1094 : 		{	// destroy the object
; 1095 : 		_Tidy();
; 1096 : 		}
; 1097 : 
; 1098 : 	_Myt& operator=(const _Myt& _Right)
; 1099 : 		{	// assign _Right
; 1100 : 		if (this != &_Right)
; 1101 : 			{	// different, assign it
; 1102 : 			if (this->_Getal() != _Right._Getal()
; 1103 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1104 : 				{	// change allocator before copying
; 1105 : 				clear();
; 1106 : 				this->_Change_alloc(_Right._Getal());
; 1107 : 				}
; 1108 : 
; 1109 : 			assign(_Right.begin(), _Right.end());
; 1110 : 			}
; 1111 : 		return (*this);
; 1112 : 		}
; 1113 : 
; 1114 : 	iterator begin() _NOEXCEPT
; 1115 : 		{	// return iterator for beginning of mutable sequence
; 1116 : 		return (iterator(this->_Nextnode(this->_Myhead), this));
; 1117 : 		}
; 1118 : 
; 1119 : 	const_iterator begin() const _NOEXCEPT
; 1120 : 		{	// return iterator for beginning of nonmutable sequence
; 1121 : 		return (const_iterator(this->_Nextnode(this->_Myhead), this));
; 1122 : 		}
; 1123 : 
; 1124 : 	iterator end() _NOEXCEPT
; 1125 : 		{	// return iterator for end of mutable sequence
; 1126 : 		return (iterator(this->_Myhead, this));
; 1127 : 		}
; 1128 : 
; 1129 : 	const_iterator end() const _NOEXCEPT
; 1130 : 		{	// return iterator for end of nonmutable sequence
; 1131 : 		return (const_iterator(this->_Myhead, this));
; 1132 : 		}
; 1133 : 
; 1134 : 	_Unchecked_iterator _Unchecked_begin()
; 1135 : 		{	// return iterator for beginning of mutable sequence
; 1136 : 		return (_Unchecked_iterator(this->_Nextnode(this->_Myhead),
; 1137 : 			this));
; 1138 : 		}
; 1139 : 
; 1140 : 	_Unchecked_const_iterator _Unchecked_begin() const
; 1141 : 		{	// return iterator for beginning of nonmutable sequence
; 1142 : 		return (_Unchecked_const_iterator(this->_Nextnode(this->_Myhead),
; 1143 : 			this));
; 1144 : 		}
; 1145 : 
; 1146 : 	_Unchecked_iterator _Unchecked_end()
; 1147 : 		{	// return unchecked iterator for end of mutable sequence
; 1148 : 		return (_Unchecked_iterator(this->_Myhead, this));
; 1149 : 		}
; 1150 : 
; 1151 : 	_Unchecked_const_iterator _Unchecked_end() const
; 1152 : 		{	// return unchecked iterator for end of nonmutable sequence
; 1153 : 		return (_Unchecked_const_iterator(this->_Myhead, this));
; 1154 : 		}
; 1155 : 
; 1156 : 	iterator _Make_iter(const_iterator _Where) const _NOEXCEPT
; 1157 : 		{	// make iterator from const_iterator
; 1158 : 		return (iterator(_Where._Ptr, this));
; 1159 : 		}
; 1160 : 
; 1161 : 	iterator _Make_iter(_Unchecked_const_iterator _Where) const
; 1162 : 		{	// make iterator from _Unchecked_const_iterator
; 1163 : 		return (iterator(_Where._Ptr, this));
; 1164 : 		}
; 1165 : 
; 1166 : 	reverse_iterator rbegin() _NOEXCEPT
; 1167 : 		{	// return iterator for beginning of reversed mutable sequence
; 1168 : 		return (reverse_iterator(end()));
; 1169 : 		}
; 1170 : 
; 1171 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1172 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1173 : 		return (const_reverse_iterator(end()));
; 1174 : 		}
; 1175 : 
; 1176 : 	reverse_iterator rend() _NOEXCEPT
; 1177 : 		{	// return iterator for end of reversed mutable sequence
; 1178 : 		return (reverse_iterator(begin()));
; 1179 : 		}
; 1180 : 
; 1181 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1182 : 		{	// return iterator for end of reversed nonmutable sequence
; 1183 : 		return (const_reverse_iterator(begin()));
; 1184 : 		}
; 1185 : 
; 1186 : 	const_iterator cbegin() const _NOEXCEPT
; 1187 : 		{	// return iterator for beginning of nonmutable sequence
; 1188 : 		return (((const _Myt *)this)->begin());
; 1189 : 		}
; 1190 : 
; 1191 : 	const_iterator cend() const _NOEXCEPT
; 1192 : 		{	// return iterator for end of nonmutable sequence
; 1193 : 		return (((const _Myt *)this)->end());
; 1194 : 		}
; 1195 : 
; 1196 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1197 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1198 : 		return (((const _Myt *)this)->rbegin());
; 1199 : 		}
; 1200 : 
; 1201 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1202 : 		{	// return iterator for end of reversed nonmutable sequence
; 1203 : 		return (((const _Myt *)this)->rend());
; 1204 : 		}
; 1205 : 
; 1206 : 	void resize(size_type _Newsize)
; 1207 : 		{	// determine new length, padding with _Ty() elements as needed
; 1208 : 		if (this->_Mysize < _Newsize)
; 1209 : 			{	// pad to make larger
; 1210 : 			size_type _Count = 0;
; 1211 : 			_TRY_BEGIN
; 1212 : 			for (; this->_Mysize < _Newsize; ++_Count)
; 1213 : 				_Insert(_Unchecked_end());
; 1214 : 			_CATCH_ALL
; 1215 : 			for (; 0 < _Count; --_Count)
; 1216 : 				pop_back();	// undo inserts
; 1217 : 			_RERAISE;
; 1218 : 			_CATCH_END
; 1219 : 			}
; 1220 : 		else
; 1221 : 			while (_Newsize < this->_Mysize)
; 1222 : 				pop_back();
; 1223 : 		}
; 1224 : 
; 1225 : 	void resize(size_type _Newsize, const _Ty& _Val)
; 1226 : 		{	// determine new length, padding with _Val elements as needed
; 1227 : 		if (this->_Mysize < _Newsize)
; 1228 : 			_Insert_n(_Unchecked_end(), _Newsize - this->_Mysize, _Val);
; 1229 : 		else
; 1230 : 			while (_Newsize < this->_Mysize)
; 1231 : 				pop_back();
; 1232 : 		}
; 1233 : 
; 1234 : 	size_type size() const _NOEXCEPT
; 1235 : 		{	// return length of sequence
; 1236 : 		return (this->_Mysize);
; 1237 : 		}
; 1238 : 
; 1239 : 	size_type max_size() const _NOEXCEPT
; 1240 : 		{	// return maximum possible length of sequence
; 1241 : 		return (this->_Getal().max_size());
; 1242 : 		}
; 1243 : 
; 1244 : 	bool empty() const _NOEXCEPT
; 1245 : 		{	// test if sequence is empty
; 1246 : 		return (this->_Mysize == 0);
; 1247 : 		}
; 1248 : 
; 1249 : 	allocator_type get_allocator() const _NOEXCEPT
; 1250 : 		{	// return allocator object for values
; 1251 : 		return (this->_Getal());
; 1252 : 		}
; 1253 : 
; 1254 : 	reference front()
; 1255 : 		{	// return first element of mutable sequence
; 1256 : 		return (*begin());
; 1257 : 		}
; 1258 : 
; 1259 : 	const_reference front() const
; 1260 : 		{	// return first element of nonmutable sequence
; 1261 : 		return (*begin());
; 1262 : 		}
; 1263 : 
; 1264 : 	reference back()
; 1265 : 		{	// return last element of mutable sequence
; 1266 : 		return (*(--end()));
; 1267 : 		}
; 1268 : 
; 1269 : 	const_reference back() const
; 1270 : 		{	// return last element of nonmutable sequence
; 1271 : 		return (*(--end()));
; 1272 : 		}
; 1273 : 
; 1274 : 	void push_front(const _Ty& _Val)
; 1275 : 		{	// insert element at beginning
; 1276 : 		_Insert(_Unchecked_begin(), _Val);
; 1277 : 		}
; 1278 : 
; 1279 : 	void pop_front()
; 1280 : 		{	// erase element at beginning
; 1281 : 		erase(begin());
; 1282 : 		}
; 1283 : 
; 1284 : 	void push_back(const _Ty& _Val)
; 1285 : 		{	// insert element at end
; 1286 : 		_Insert(_Unchecked_end(), _Val);
; 1287 : 		}
; 1288 : 
; 1289 : 	void pop_back()
; 1290 : 		{	// erase element at end
; 1291 : 		erase(--end());
; 1292 : 		}
; 1293 : 
; 1294 : 	template<class _Iter>
; 1295 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1296 : 			void>::type
; 1297 : 		assign(_Iter _First, _Iter _Last)
; 1298 : 		{	// assign [_First, _Last), input iterators
; 1299 : 		iterator _Old = begin();
; 1300 : 		_TRY_BEGIN
; 1301 : 		for (; _First != _Last && _Old != end(); ++_First, ++_Old)
; 1302 : 			_Reusenode(_Old, *_First);
; 1303 : 		for (; _First != _Last; ++_First)
; 1304 : 			_Insert(_Unchecked_end(), *_First);
; 1305 : 		_CATCH_ALL
; 1306 : 		clear();
; 1307 : 		_RERAISE;
; 1308 : 		_CATCH_END
; 1309 : 		erase(_Old, end());
; 1310 : 		}
; 1311 : 
; 1312 : 	template<class _TArg>
; 1313 : 		void _Reusenode(iterator _Where, _TArg&& _Arg)
; 1314 : 		{	// destroy the element at _Where and reconstruct from _Arg
; 1315 : 		_TRY_BEGIN
; 1316 : 		this->_Getal().destroy(
; 1317 : 			_STD addressof(this->_Myval(_Where._Ptr)));
; 1318 : 		this->_Getal().construct(
; 1319 : 			_STD addressof(this->_Myval(_Where._Ptr)),
; 1320 : 			_STD forward<_TArg>(_Arg));
; 1321 : 		_CATCH_ALL
; 1322 : 		_Unlinknode(_Where);
; 1323 : 		this->_Getal().destroy(
; 1324 : 			_STD addressof(this->_Nextnode(_Where._Ptr)));
; 1325 : 		this->_Getal().destroy(
; 1326 : 			_STD addressof(this->_Prevnode(_Where._Ptr)));
; 1327 : 		this->_Getal().deallocate(_Where._Ptr, 1);
; 1328 : 		_RERAISE;
; 1329 : 		_CATCH_END
; 1330 : 		}
; 1331 : 
; 1332 : 	void assign(size_type _Count, const _Ty& _Val)
; 1333 : 		{	// assign _Count * _Val
; 1334 : 		clear();
; 1335 : 		_Insert_n(_Unchecked_begin(), _Count, _Val);
; 1336 : 		}
; 1337 : 
; 1338 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1339 : 		{	// insert _Val at _Where
; 1340 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1341 : 		if (_Where._Getcont() != this)
; 1342 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1343 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1344 : 
; 1345 : 		_Insert(_Where._Unchecked(), _Val);
; 1346 : 		return (_Make_iter(--_Where));
; 1347 : 		}
; 1348 : 
; 1349 : 	iterator insert(const_iterator _Where, size_type _Count, const _Ty& _Val)
; 1350 : 		{	// insert _Count * _Val at _Where
; 1351 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1352 : 		if (_Where._Getcont() != this)
; 1353 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1354 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1355 : 
; 1356 : 		iterator _Prev = _Make_iter(_Where);
; 1357 : 		if (_Prev == begin())
; 1358 : 			{	// insert sequence at beginning
; 1359 : 			_Insert_n(_Where._Unchecked(), _Count, _Val);
; 1360 : 			return (begin());
; 1361 : 			}
; 1362 : 		else
; 1363 : 			{	// insert sequence not at beginning
; 1364 : 			--_Prev;
; 1365 : 			_Insert_n(_Where._Unchecked(), _Count, _Val);
; 1366 : 			return (++_Prev);
; 1367 : 			}
; 1368 : 		}
; 1369 : 
; 1370 : 	template<class _Iter>
; 1371 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1372 : 			iterator>::type
; 1373 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1374 : 		{	// insert [_First, _Last) at _Where
; 1375 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1376 : 		if (_Where._Getcont() != this)
; 1377 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1378 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1379 : 
; 1380 : 		iterator _Prev = _Make_iter(_Where);
; 1381 : 		if (_Prev == begin())
; 1382 : 			{	// insert sequence at beginning
; 1383 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1384 : 				_Iter_cat(_First));
; 1385 : 			return (begin());
; 1386 : 			}
; 1387 : 		else
; 1388 : 			{	// insert sequence not at beginning
; 1389 : 			--_Prev;
; 1390 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1391 : 				_Iter_cat(_First));
; 1392 : 			return (++_Prev);
; 1393 : 			}
; 1394 : 		}
; 1395 : 
; 1396 : 	template<class _Iter>
; 1397 : 		void _Insert_range(_Unchecked_const_iterator _Where,
; 1398 : 			_Iter _First, _Iter _Last, input_iterator_tag)
; 1399 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1400 : 		size_type _Num = 0;
; 1401 : 
; 1402 : 		_TRY_BEGIN
; 1403 : 		for (; _First != _Last; ++_First, ++_Num)
; 1404 : 			_Insert(_Where, *_First);
; 1405 : 		_CATCH_ALL
; 1406 : 		for (; 0 < _Num; --_Num)
; 1407 : 			{	// undo inserts
; 1408 : 			_Unchecked_const_iterator _Before = _Where;
; 1409 : 			_Unchecked_erase(--_Before);
; 1410 : 			}
; 1411 : 		_RERAISE;
; 1412 : 		_CATCH_END
; 1413 : 		}
; 1414 : 
; 1415 : 	template<class _Iter>
; 1416 : 		void _Insert_range(_Unchecked_const_iterator _Where,
; 1417 : 			_Iter _First, _Iter _Last, forward_iterator_tag)
; 1418 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1419 : 		_DEBUG_RANGE(_First, _Last);
; 1420 : 		_Iter _Next = _First;
; 1421 : 
; 1422 : 		_TRY_BEGIN
; 1423 : 		for (; _First != _Last; ++_First)
; 1424 : 			_Insert(_Where, *_First);
; 1425 : 		_CATCH_ALL
; 1426 : 		for (; _Next != _First; ++_Next)
; 1427 : 			{	// undo inserts
; 1428 : 			_Unchecked_const_iterator _Before = _Where;
; 1429 : 			_Unchecked_erase(--_Before);
; 1430 : 			}
; 1431 : 		_RERAISE;
; 1432 : 		_CATCH_END
; 1433 : 		}
; 1434 : 
; 1435 : 	_Nodeptr _Unlinknode(const_iterator _Where)
; 1436 : 		{	// unlink node at _Where from the list
; 1437 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1438 : 		if (_Where._Getcont() != this || _Where._Ptr == this->_Myhead)
; 1439 : 			_DEBUG_ERROR("list erase iterator outside range");
; 1440 : 		_Nodeptr _Pnode = (_Where)._Mynode();
; 1441 : 		_Orphan_ptr(*this, _Pnode);
; 1442 : 
; 1443 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1444 : 		_Nodeptr _Pnode = (_Where)._Mynode();
; 1445 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1446 : 
; 1447 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1448 : 			this->_Nextnode(_Pnode);
; 1449 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1450 : 			this->_Prevnode(_Pnode);
; 1451 : 
; 1452 : 		--this->_Mysize;
; 1453 : 		return (_Pnode);
; 1454 : 		}
; 1455 : 
; 1456 : 	iterator erase(const_iterator _Where)
; 1457 : 		{	// erase element at _Where
; 1458 : 		_Nodeptr _Pnode = _Unlinknode(_Where++);
; 1459 : 		this->_Freenode(_Pnode);
; 1460 : 		return (_Make_iter(_Where));
; 1461 : 		}
; 1462 : 
; 1463 : 	void _Unchecked_erase(_Unchecked_const_iterator _Where)
; 1464 : 		{	// erase element at _Where
; 1465 : 		_Nodeptr _Pnode = _Where._Mynode();
; 1466 : 
; 1467 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1468 : 			this->_Nextnode(_Pnode);
; 1469 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1470 : 			this->_Prevnode(_Pnode);
; 1471 : 		this->_Freenode(_Pnode);
; 1472 : 		--this->_Mysize;
; 1473 : 		}
; 1474 : 
; 1475 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1476 : 		{	// erase [_First, _Last)
; 1477 : 		if (_First == begin() && _Last == end())
; 1478 : 			{	// erase all and return fresh iterator
; 1479 : 			clear();
; 1480 : 			return (end());
; 1481 : 			}
; 1482 : 		else
; 1483 : 			{	// erase subrange
; 1484 : 			while (_First != _Last)
; 1485 : 				_First = erase(_First);
; 1486 : 			return (_Make_iter(_Last));
; 1487 : 			}
; 1488 : 		}
; 1489 : 
; 1490 : 	void clear() _NOEXCEPT
; 1491 : 		{	// erase all
; 1492 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1493 : 		this->_Orphan_ptr(*this, nullptr);
; 1494 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1495 : 
; 1496 : 		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead);
; 1497 : 		this->_Nextnode(this->_Myhead) = this->_Myhead;
; 1498 : 		this->_Prevnode(this->_Myhead) = this->_Myhead;
; 1499 : 		this->_Mysize = 0;
; 1500 : 
; 1501 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead; _Pnode = _Pnext)
; 1502 : 			{	// delete an element
; 1503 : 			_Pnext = this->_Nextnode(_Pnode);
; 1504 : 			this->_Freenode(_Pnode);
; 1505 : 			}
; 1506 : 		}
; 1507 : 
; 1508 : 	void swap(_Myt& _Right)
; 1509 : 		{	// exchange contents with _Right
; 1510 : 		if (this == &_Right)
; 1511 : 			;	// same object, do nothing
; 1512 : 		else if (this->_Getal() == _Right._Getal())
; 1513 : 			{	// same allocator, swap control information
; 1514 : 			this->_Swap_all(_Right);
; 1515 : 			_Swap_adl(this->_Myhead, _Right._Myhead);
; 1516 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1517 : 			}
; 1518 : 
; 1519 : 		else if (_Alty::propagate_on_container_swap::value)
; 1520 : 			{	// swap allocators and control information
; 1521 : 			this->_Swap_alloc(_Right);
; 1522 : 			_Swap_adl(this->_Myhead, _Right._Myhead);
; 1523 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1524 : 			}
; 1525 : 
; 1526 : 		else	// containers are incompatible
; 1527 : 
; 1528 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1529 : 			_DEBUG_ERROR("list containers incompatible for swap");
; 1530 : 
; 1531 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1532 : 			_XSTD terminate();
; 1533 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1534 : 		}
; 1535 : 
; 1536 : 	void splice(const_iterator _Where, _Myt& _Right)
; 1537 : 		{	// splice all of _Right at _Where
; 1538 : 		if (this != &_Right && !_Right.empty())
; 1539 : 			{	// worth splicing, do it
; 1540 : 			_Splice(_Where, _Right, _Right.begin(), _Right.end(),
; 1541 : 				_Right._Mysize);
; 1542 : 			}
; 1543 : 		}
; 1544 : 
; 1545 : 	void splice(const_iterator _Where, _Myt&& _Right)
; 1546 : 		{	// splice all of _Right at _Where
; 1547 : 		splice(_Where, (_Myt&)_Right);
; 1548 : 		}
; 1549 : 
; 1550 : 	void splice(const_iterator _Where, _Myt& _Right,
; 1551 : 		const_iterator _First)
; 1552 : 		{	// splice _Right [_First, _First + 1) at _Where
; 1553 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1554 : 		if (_First == _Right.end())
; 1555 : 			_DEBUG_ERROR("list splice iterator outside range");
; 1556 : 		else
; 1557 : 
; 1558 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1559 : 		if (_First != _Right.end())
; 1560 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1561 : 
; 1562 : 			{	// element exists, try splice
; 1563 : 			const_iterator _Last = _First;
; 1564 : 			++_Last;
; 1565 : 			if (this != &_Right
; 1566 : 				|| (_Where != _First && _Where != _Last))
; 1567 : 				_Splice(_Where, _Right, _First, _Last, 1);
; 1568 : 			}
; 1569 : 		}
; 1570 : 
; 1571 : 	void splice(const_iterator _Where, _Myt&& _Right,
; 1572 : 		const_iterator _First)
; 1573 : 		{	// splice _Right [_First, _First + 1) at _Where
; 1574 : 		splice(_Where, (_Myt&)_Right, _First);
; 1575 : 		}
; 1576 : 
; 1577 : 	void splice(const_iterator _Where,
; 1578 : 		_Myt& _Right, const_iterator _First, const_iterator _Last)
; 1579 : 		{	// splice _Right [_First, _Last) at _Where
; 1580 : 		if (_First != _Last && (this != &_Right || _Where != _Last))
; 1581 : 			{	// worth splicing, do it
; 1582 : 			size_type _Count = 0;
; 1583 : 
; 1584 : 			if (this == &_Right)
; 1585 : 				;	// just rearrange this list
; 1586 : 			else if (_First == _Right.begin() && _Last == _Right.end())
; 1587 : 				_Count = _Right._Mysize;	// splice in whole list
; 1588 : 			else
; 1589 : 				{	// count nodes and check for knot
; 1590 : 				const_iterator _Next = _First;
; 1591 : 
; 1592 : 				for (; _Next != _Last; ++_Next, ++_Count)
; 1593 : 					if (_Next == _Right.end())
; 1594 : 						_Xlength_error("list<T> bad splice");
; 1595 : 				}
; 1596 : 			_Splice(_Where, _Right, _First, _Last, _Count);
; 1597 : 			}
; 1598 : 		}
; 1599 : 
; 1600 : 	void splice(const_iterator _Where,
; 1601 : 		_Myt&& _Right, const_iterator _First, const_iterator _Last)
; 1602 : 		{	// splice _Right [_First, _Last) at _Where
; 1603 : 		splice(_Where, (_Myt&)_Right, _First, _Last);
; 1604 : 		}
; 1605 : 
; 1606 : 	void remove(const _Ty& _Val)
; 1607 : 		{	// erase each element matching _Val
; 1608 : 		iterator _Val_it = end();
; 1609 : 
; 1610 : 		for (iterator _First = begin(); _First != end(); )
; 1611 : 			if (*_First == _Val)
; 1612 : 				if (_STD addressof(*_First) == _STD addressof(_Val))
; 1613 : 					_Val_it = _First++;
; 1614 : 				else
; 1615 : 					_First = erase(_First);
; 1616 : 			else
; 1617 : 				++_First;
; 1618 : 
; 1619 : 		if (_Val_it != end())
; 1620 : 			erase(_Val_it);
; 1621 : 		}
; 1622 : 
; 1623 : 	template<class _Pr1>
; 1624 : 		void remove_if(_Pr1 _Pred)
; 1625 : 		{	// erase each element satisfying _Pred
; 1626 : 		for (iterator _First = begin(); _First != end(); )
; 1627 : 			if (_Pred(*_First))
; 1628 : 				_First = erase(_First);
; 1629 : 			else
; 1630 : 				++_First;
; 1631 : 		}
; 1632 : 
; 1633 : 	void unique()
; 1634 : 		{	// erase each element matching previous
; 1635 : 		unique(equal_to<>());
; 1636 : 		}
; 1637 : 
; 1638 : 	template<class _Pr2>
; 1639 : 		void unique(_Pr2 _Pred)
; 1640 : 		{	// erase each element satisfying _Pred with previous
; 1641 : 		const _Nodeptr _Phead = this->_Myhead;
; 1642 : 		_Nodeptr _Pprev = this->_Nextnode(_Phead);
; 1643 : 		_Nodeptr _Pnode = this->_Nextnode(_Pprev);
; 1644 : 
; 1645 : 		while (_Pnode != _Phead)
; 1646 : 			if (_Pred(_Pprev->_Myval, _Pnode->_Myval))
; 1647 : 				{	// match, remove it
; 1648 : 				const _Nodeptr _Perase = _Pnode;
; 1649 : 				_Pnode = this->_Nextnode(_Pnode);
; 1650 : 
; 1651 : 				this->_Nextnode(_Pprev) = _Pnode;
; 1652 : 				this->_Prevnode(_Pnode) = _Pprev;
; 1653 : 				this->_Freenode(_Perase);
; 1654 : 
; 1655 : 				--this->_Mysize;
; 1656 : 				}
; 1657 : 			else
; 1658 : 				{	// no match, advance
; 1659 : 				_Pprev = _Pnode;
; 1660 : 				_Pnode = this->_Nextnode(_Pnode);
; 1661 : 				}
; 1662 : 		}
; 1663 : 
; 1664 : 	void merge(_Myt& _Right)
; 1665 : 		{	// merge in elements from _Right, both ordered by operator<
; 1666 : 		merge(_Right, less<>());
; 1667 : 		}
; 1668 : 
; 1669 : 	void merge(_Myt&& _Right)
; 1670 : 		{	// merge in elements from _Right, both ordered by operator<
; 1671 : 		merge((_Myt&)_Right);
; 1672 : 		}
; 1673 : 
; 1674 : 	template<class _Pr2>
; 1675 : 		void merge(_Myt& _Right, _Pr2 _Pred)
; 1676 : 		{	// merge in elements from _Right, both ordered by _Pred
; 1677 : 		if (&_Right != this)
; 1678 : 			{	// safe to merge, do it
; 1679 : 			iterator _First1 = begin(), _Last1 = end();
; 1680 : 			iterator _First2 = _Right.begin(), _Last2 = _Right.end();
; 1681 : 			_DEBUG_ORDER_PRED(_First1, _Last1, _Pred);
; 1682 : 			_DEBUG_ORDER_PRED(_First2, _Last2, _Pred);
; 1683 : 
; 1684 : 			while (_First1 != _Last1 && _First2 != _Last2)
; 1685 : 				if (_DEBUG_LT_PRED(_Pred, *_First2, *_First1))
; 1686 : 					{	// splice in an element from _Right
; 1687 : 					iterator _Mid2 = _First2;
; 1688 : 					_Splice(_First1, _Right, _First2, ++_Mid2, 1);
; 1689 : 					_First2 = _Mid2;
; 1690 : 					}
; 1691 : 				else
; 1692 : 					++_First1;
; 1693 : 
; 1694 : 			if (_First2 != _Last2)
; 1695 : 				_Splice(_Last1, _Right, _First2, _Last2,
; 1696 : 					_Right._Mysize);	// splice remainder of _Right
; 1697 : 			}
; 1698 : 		}
; 1699 : 
; 1700 : 	template<class _Pr2>
; 1701 : 		void merge(_Myt&& _Right, _Pr2 _Pred)
; 1702 : 		{	// merge in elements from _Right, both ordered by _Pred
; 1703 : 		merge((_Myt&)_Right, _Pred);
; 1704 : 		}
; 1705 : 
; 1706 : 	void sort()
; 1707 : 		{	// order sequence, using operator<
; 1708 : 		sort(less<>());
; 1709 : 		}
; 1710 : 
; 1711 : 	template<class _Pr2>
; 1712 : 		void sort(_Pr2 _Pred)
; 1713 : 		{	// order sequence, using _Pred
; 1714 : 		if (2 <= this->_Mysize)
; 1715 : 			{	// worth sorting, do it
; 1716 : 			const size_t _MAXBINS = 25;
; 1717 : 			_Myt _Templist(this->_Getal()), _Binlist[_MAXBINS + 1];
; 1718 : 			size_t _Maxbin = 0;
; 1719 : 
; 1720 : 			while (!empty())
; 1721 : 				{	// sort another element, using bins
; 1722 : 				_Templist._Splice_same(_Templist.begin(), *this, begin(),
; 1723 : 					++begin(), 1);
; 1724 : 
; 1725 : 				size_t _Bin;
; 1726 : 				for (_Bin = 0; _Bin < _Maxbin && !_Binlist[_Bin].empty();
; 1727 : 					++_Bin)
; 1728 : 					{	// merge into ever larger bins
; 1729 : 					_Binlist[_Bin].merge(_Templist, _Pred);
; 1730 : 					_Binlist[_Bin].swap(_Templist);
; 1731 : 					}
; 1732 : 
; 1733 : 				if (_Bin == _MAXBINS)
; 1734 : 					_Binlist[_Bin - 1].merge(_Templist, _Pred);
; 1735 : 				else
; 1736 : 					{	// spill to new bin, while they last
; 1737 : 					_Binlist[_Bin].swap(_Templist);
; 1738 : 					if (_Bin == _Maxbin)
; 1739 : 						++_Maxbin;
; 1740 : 					}
; 1741 : 				}
; 1742 : 
; 1743 : 			for (size_t _Bin = 1; _Bin < _Maxbin; ++_Bin)
; 1744 : 				_Binlist[_Bin].merge(_Binlist[_Bin - 1],
; 1745 : 					_Pred);	// merge up
; 1746 : 
; 1747 : 			_Analysis_assume_(0 < _Maxbin);
; 1748 : 
; 1749 : 			splice(begin(), _Binlist[_Maxbin - 1]);	// result in last bin
; 1750 : 			}
; 1751 : 		}
; 1752 : 
; 1753 : 	void reverse() _NOEXCEPT
; 1754 : 		{	// reverse sequence
; 1755 : 		const _Nodeptr _Phead = this->_Myhead;
; 1756 : 		_Nodeptr _Pnode = _Phead;
; 1757 : 
; 1758 : 		for (; ; )
; 1759 : 			{	// flip pointers in a node
; 1760 : 			const _Nodeptr _Pnext = this->_Nextnode(_Pnode);
; 1761 : 			this->_Nextnode(_Pnode) = this->_Prevnode(_Pnode);
; 1762 : 			this->_Prevnode(_Pnode) = _Pnext;
; 1763 : 
; 1764 : 			if (_Pnext == _Phead)
; 1765 : 				break;
; 1766 : 			_Pnode = _Pnext;
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	void _Splice(const_iterator _Where,
; 1771 : 		_Myt& _Right, const_iterator _First, const_iterator _Last,
; 1772 : 		size_type _Count)
; 1773 : 		{	// splice _Right [_First, _Last) before _Where
; 1774 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1775 : 		if (_Where._Getcont() != this)
; 1776 : 			_DEBUG_ERROR("list splice iterator outside range");
; 1777 : 		if (this->_Getal() != _Right._Getal())
; 1778 : 			_DEBUG_ERROR("list containers incompatible for splice");
; 1779 : 
; 1780 : 		if (this != &_Right)
; 1781 : 			{	// transfer ownership
; 1782 : 			_Lockit _Lock(_LOCK_DEBUG);
; 1783 : 
; 1784 : 			const bool _One = _Count == 1;
; 1785 : 			const bool _All = _Count == _Right.size();
; 1786 : 			const bool _Some = !_One && !_All;
; 1787 : 
; 1788 : 			_Nodeptr _Oldprev = _First._Ptr->_Prev;
; 1789 : 
; 1790 : 			if (_Some)
; 1791 : 				for (_Nodeptr _Ptr = _First._Ptr; _Ptr != _Last._Ptr;
; 1792 : 					_Ptr = _Ptr->_Next)
; 1793 : 					{	// mark _Prev pointers
; 1794 : 					_Ptr->_Prev = 0;
; 1795 : 					}
; 1796 : 
; 1797 : 			const_iterator **_Pnext = (const_iterator **)_Right._Getpfirst();
; 1798 : 
; 1799 : 			if (_Pnext == 0)
; 1800 : 				_DEBUG_ERROR("list container corrupted");
; 1801 : 
; 1802 : 			while (*_Pnext != 0)
; 1803 : 				{	// check the iterator
; 1804 : 				const_iterator& _Iter = **_Pnext;
; 1805 : 
; 1806 : 				if ((_One && _Iter._Ptr == _First._Ptr)
; 1807 : 					|| (_All && _Iter._Ptr != _Right._Myhead)
; 1808 : 					|| (_Some && _Iter._Ptr->_Prev == 0))
; 1809 : 					{	// adopt the iterator
; 1810 : 					*_Pnext = (const_iterator *)_Iter._Mynextiter;
; 1811 : 					_Iter._Myproxy = this->_Myproxy;
; 1812 : 					_Iter._Mynextiter = this->_Myproxy->_Myfirstiter;
; 1813 : 					this->_Myproxy->_Myfirstiter = &_Iter;
; 1814 : 					}
; 1815 : 				else
; 1816 : 					{	// skip the iterator
; 1817 : 					_Pnext = (const_iterator **)_Iter._Getpnext();
; 1818 : 					}
; 1819 : 				}
; 1820 : 
; 1821 : 			if (_Some)
; 1822 : 				for (_Nodeptr _Ptr = _First._Ptr; _Ptr != _Last._Ptr;
; 1823 : 					_Ptr = _Ptr->_Next)
; 1824 : 					{	// restore _Prev pointers
; 1825 : 					_Ptr->_Prev = _Oldprev;
; 1826 : 					_Oldprev = _Ptr;
; 1827 : 					}
; 1828 : 			}
; 1829 : 
; 1830 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1831 : 		if (this->_Getal() != _Right._Getal())
; 1832 : 			_XSTD terminate();
; 1833 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1834 : 
; 1835 : 		_Splice_same(_Where, _Right, _First, _Last, _Count);
; 1836 : 		}
; 1837 : 
; 1838 : 	void _Splice_same(const_iterator _Where,
; 1839 : 		_Myt& _Right, const_iterator _First, const_iterator _Last,
; 1840 : 		size_type _Count)
; 1841 : 		{	// splice _Right [_First, _Last) before _Where
; 1842 : 		if (this != &_Right)
; 1843 : 			{	// splicing from another list, adjust counts
; 1844 : 			_Incsize(_Count);
; 1845 : 			_Right._Mysize -= _Count;
; 1846 : 			}
; 1847 : 		this->_Nextnode(this->_Prevnode(_First._Mynode())) =
; 1848 : 			_Last._Mynode();
; 1849 : 		this->_Nextnode(this->_Prevnode(_Last._Mynode())) =
; 1850 : 			_Where._Mynode();
; 1851 : 		this->_Nextnode(this->_Prevnode(_Where._Mynode())) =
; 1852 : 			_First._Mynode();
; 1853 : 
; 1854 : 		_Nodeptr _Pnode = this->_Prevnode(_Where._Mynode());
; 1855 : 		this->_Prevnode(_Where._Mynode()) =
; 1856 : 			this->_Prevnode(_Last._Mynode());
; 1857 : 		this->_Prevnode(_Last._Mynode()) =
; 1858 : 			this->_Prevnode(_First._Mynode());
; 1859 : 		this->_Prevnode(_First._Mynode()) = _Pnode;
; 1860 : 		}
; 1861 : 
; 1862 : 	void _Unchecked_splice(_Unchecked_const_iterator _Where,
; 1863 : 		_Unchecked_const_iterator _First,
; 1864 : 		_Unchecked_const_iterator _Last)
; 1865 : 		{	// splice [_First, _Last) before _Where
; 1866 : 		this->_Nextnode(this->_Prevnode(_First._Mynode())) =
; 1867 : 			_Last._Mynode();
; 1868 : 		this->_Nextnode(this->_Prevnode(_Last._Mynode())) =
; 1869 : 			_Where._Mynode();
; 1870 : 		this->_Nextnode(this->_Prevnode(_Where._Mynode())) =
; 1871 : 			_First._Mynode();
; 1872 : 
; 1873 : 		_Nodeptr _Pnode = this->_Prevnode(_Where._Mynode());
; 1874 : 		this->_Prevnode(_Where._Mynode()) =
; 1875 : 			this->_Prevnode(_Last._Mynode());
; 1876 : 		this->_Prevnode(_Last._Mynode()) =
; 1877 : 			this->_Prevnode(_First._Mynode());
; 1878 : 		this->_Prevnode(_First._Mynode()) = _Pnode;
; 1879 : 		}
; 1880 : 
; 1881 : 	void _Tidy()
; 1882 : 		{	// free all storage
; 1883 : 		clear();
; 1884 : 		}
; 1885 : 
; 1886 : 	void _Insert_n(_Unchecked_const_iterator _Where,
; 1887 : 		size_type _Count, const _Ty& _Val)
; 1888 : 		{	// insert _Count * _Val at _Where
; 1889 : 		size_type _Countsave = _Count;
; 1890 : 
; 1891 : 		_TRY_BEGIN
; 1892 : 		for (; 0 < _Count; --_Count)
; 1893 : 			_Insert(_Where, _Val);
; 1894 : 		_CATCH_ALL
; 1895 : 		for (; _Count < _Countsave; ++_Count)
; 1896 : 			{	// undo inserts
; 1897 : 			_Unchecked_const_iterator _Before = _Where;
; 1898 : 			_Unchecked_erase(--_Before);
; 1899 : 			}
; 1900 : 		_RERAISE;
; 1901 : 		_CATCH_END
; 1902 : 		}
; 1903 : 
; 1904 : 	void _Incsize(size_type _Count)
; 1905 : 		{	// alter element count, with checking
; 1906 : 		if (max_size() - this->_Mysize - 1 < _Count)

  00018	b9 cb cc cc 0c	 mov	 ecx, 214748363		; 0ccccccbH
  0001d	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00020	2b c8		 sub	 ecx, eax
  00022	83 f9 01	 cmp	 ecx, 1
  00025	72 12		 jb	 SHORT $LN30@Insert

; 1908 : 		this->_Mysize += _Count;

  00027	40		 inc	 eax
  00028	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1063 : 		_Incsize(1);
; 1064 : 		this->_Prevnode(_Pnode) = _Newnode;

  0002b	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 533  : 		return ((_Nodepref)_Pnode->_Next);

  0002e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi

; 1065 : 		this->_Nextnode(this->_Prevnode(_Newnode)) = _Newnode;

  00033	89 10		 mov	 DWORD PTR [eax], edx

; 1066 : 		}

  00035	5d		 pop	 ebp
  00036	c2 08 00	 ret	 8
$LN30@Insert:

; 1907 : 			_Xlength_error("list<T> too long");

  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
  0003e	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN32@Insert:
$LN29@Insert:
  00043	cc		 int	 3
??$_Insert@ABUSChannel@CServerStateChecker@@@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@U_Iterator_base0@2@@1@ABUSChannel@CServerStateChecker@@@Z ENDP ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::_Insert<CServerStateChecker::SChannel const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\list
;	COMDAT ??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAE@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@PBV?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAE@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@PBV?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@1@@Z PROC ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >, COMDAT
; _this$ = ecx

; 124  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 44   : 		{	// construct with node pointer _Pnode

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 125  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAE@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@PBV?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@1@@Z ENDP ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\list
;	COMDAT ??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBEPAUSChannel@CServerStateChecker@@XZ
_TEXT	SEGMENT
??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBEPAUSChannel@CServerStateChecker@@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::operator->, COMDAT
; _this$ = ecx

; 370  : 
; 371  : 	_Myiter& operator++()
; 372  : 		{	// preincrement
; 373  : 		++(*(_Mybase *)this);
; 374  : 		return (*this);
; 375  : 		}
; 376  : 
; 377  : 	_Myiter operator++(int)
; 378  : 		{	// postincrement
; 379  : 		_Myiter _Tmp = *this;
; 380  : 		++*this;
; 381  : 		return (_Tmp);
; 382  : 		}
; 383  : 
; 384  : 	_Myiter& operator--()
; 385  : 		{	// predecrement
; 386  : 		--(*(_Mybase *)this);
; 387  : 		return (*this);
; 388  : 		}
; 389  : 
; 390  : 	_Myiter operator--(int)
; 391  : 		{	// postdecrement
; 392  : 		_Myiter _Tmp = *this;
; 393  : 		--*this;
; 394  : 		return (_Tmp);
; 395  : 		}
; 396  : 	};
; 397  : 
; 398  : template<class _Mylist> inline
; 399  : 	typename _List_iterator<_Mylist>::_Unchecked_type
; 400  : 		_Unchecked(_List_iterator<_Mylist> _Iter)
; 401  : 	{	// convert to unchecked
; 402  : 	return (_Iter._Unchecked());
; 403  : 	}
; 404  : 
; 405  : template<class _Mylist> inline
; 406  : 	_List_iterator<_Mylist>&
; 407  : 		_Rechecked(_List_iterator<_Mylist>& _Iter,
; 408  : 			typename _List_iterator<_Mylist>
; 409  : 				::_Unchecked_type _Right)
; 410  : 	{	// convert to checked
; 411  : 	return (_Iter._Rechecked(_Right));
; 412  : 	}
; 413  : 
; 414  : 		// list TYPE WRAPPERS
; 415  : template<class _Value_type,
; 416  : 	class _Size_type,
; 417  : 	class _Difference_type,
; 418  : 	class _Pointer,
; 419  : 	class _Const_pointer,
; 420  : 	class _Reference,
; 421  : 	class _Const_reference,
; 422  : 	class _Nodeptr_type>
; 423  : 	struct _List_iter_types
; 424  : 	{	// wraps types needed by iterators
; 425  : 	typedef _Value_type value_type;
; 426  : 	typedef _Size_type size_type;
; 427  : 	typedef _Difference_type difference_type;
; 428  : 	typedef _Pointer pointer;
; 429  : 	typedef _Const_pointer const_pointer;
; 430  : 	typedef _Reference reference;
; 431  : 	typedef _Const_reference const_reference;
; 432  : 	typedef _Nodeptr_type _Nodeptr;
; 433  : 	};
; 434  : 
; 435  : template<class _Value_type,
; 436  : 	class _Voidptr>
; 437  : 	struct _List_node
; 438  : 		{	// list node
; 439  : 		_Voidptr _Next;	// successor node, or first element if head
; 440  : 		_Voidptr _Prev;	// predecessor node, or last element if head
; 441  : 		_Value_type _Myval;	// the stored value, unused if head
; 442  : 
; 443  : 	private:
; 444  : 		_List_node& operator=(const _List_node&);
; 445  : 		};
; 446  : 
; 447  : template<class _Value_type>
; 448  : 	struct _List_node<_Value_type, void *>
; 449  : 		{	// list node
; 450  : 		typedef _List_node<_Value_type, void *> *_Nodeptr;
; 451  : 		_Nodeptr _Next;	// successor node, or first element if head
; 452  : 		_Nodeptr _Prev;	// predecessor node, or last element if head
; 453  : 		_Value_type _Myval;	// the stored value, unused if head
; 454  : 
; 455  : 	private:
; 456  : 		_List_node& operator=(const _List_node&);
; 457  : 		};
; 458  : 
; 459  : template<class _Ty>
; 460  : 	struct _List_simple_types
; 461  : 		: public _Simple_types<_Ty>
; 462  : 	{	// wraps types needed by iterators
; 463  : 	typedef _List_node<_Ty, void *> _Node;
; 464  : 	typedef _Node *_Nodeptr;
; 465  : 	};
; 466  : 
; 467  : template<class _Ty,
; 468  : 	class _Alloc0>
; 469  : 	struct _List_base_types
; 470  : 	{	// types needed for a container base
; 471  : 	typedef _Alloc0 _Alloc;
; 472  : 	typedef _List_base_types<_Ty, _Alloc> _Myt;
; 473  : 
; 474  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 475  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 476  : 
; 477  : 
; 478  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 479  : 		_Voidptr;
; 480  : 	typedef _List_node<typename _Alty::value_type,
; 481  : 		_Voidptr> _Node;
; 482  : 
; 483  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 484  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 485  : 	typedef _Nodeptr& _Nodepref;
; 486  : 
; 487  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 488  : 		_List_simple_types<typename _Alty::value_type>,
; 489  : 		_List_iter_types<typename _Alty::value_type,
; 490  : 			typename _Alty::size_type,
; 491  : 			typename _Alty::difference_type,
; 492  : 			typename _Alty::pointer,
; 493  : 			typename _Alty::const_pointer,
; 494  : 			typename _Alty::reference,
; 495  : 			typename _Alty::const_reference,
; 496  : 			_Nodeptr> >::type
; 497  : 		_Val_types;
; 498  : 	};
; 499  : 
; 500  : 		// TEMPLATE CLASS _List_val
; 501  : template<class _Val_types>
; 502  : 	class _List_val
; 503  : 		: public _Container_base
; 504  : 	{	// base class for list to hold data
; 505  : public:
; 506  : 	typedef _List_val<_Val_types> _Myt;
; 507  : 
; 508  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 509  : 	typedef _Nodeptr& _Nodepref;
; 510  : 
; 511  : 	typedef typename _Val_types::value_type value_type;
; 512  : 	typedef typename _Val_types::size_type size_type;
; 513  : 	typedef typename _Val_types::difference_type difference_type;
; 514  : 	typedef typename _Val_types::pointer pointer;
; 515  : 	typedef typename _Val_types::const_pointer const_pointer;
; 516  : 	typedef typename _Val_types::reference reference;
; 517  : 	typedef typename _Val_types::const_reference const_reference;
; 518  : 
; 519  : 	typedef _List_const_iterator<_Myt> const_iterator;
; 520  : 	typedef _List_iterator<_Myt> iterator;
; 521  : 
; 522  : 	typedef _List_unchecked_const_iterator<_Myt> _Unchecked_const_iterator;
; 523  : 	typedef _List_unchecked_iterator<_Myt> _Unchecked_iterator;
; 524  : 
; 525  : 	_List_val()
; 526  : 		{	// initialize data
; 527  : 		this->_Myhead = 0;
; 528  : 		this->_Mysize = 0;
; 529  : 		}
; 530  : 
; 531  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 532  : 		{	// return reference to successor pointer in node
; 533  : 		return ((_Nodepref)_Pnode->_Next);
; 534  : 		}
; 535  : 
; 536  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 537  : 		{	// return reference to predecessor pointer in node
; 538  : 		return ((_Nodepref)_Pnode->_Prev);
; 539  : 		}
; 540  : 
; 541  : 	static reference _Myval(_Nodeptr _Pnode)
; 542  : 		{	// return reference to value in node
; 543  : 		return ((reference)_Pnode->_Myval);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 368  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 369  : 		}

  00005	c3		 ret	 0
??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBEPAUSChannel@CServerStateChecker@@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::operator->
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\list
;	COMDAT ??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBEAAUSChannel@CServerStateChecker@@XZ
_TEXT	SEGMENT
??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBEAAUSChannel@CServerStateChecker@@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::operator*, COMDAT
; _this$ = ecx

; 365  : 
; 366  : 	pointer operator->() const
; 367  : 		{	// return pointer to class object
; 368  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 369  : 		}
; 370  : 
; 371  : 	_Myiter& operator++()
; 372  : 		{	// preincrement
; 373  : 		++(*(_Mybase *)this);
; 374  : 		return (*this);
; 375  : 		}
; 376  : 
; 377  : 	_Myiter operator++(int)
; 378  : 		{	// postincrement
; 379  : 		_Myiter _Tmp = *this;
; 380  : 		++*this;
; 381  : 		return (_Tmp);
; 382  : 		}
; 383  : 
; 384  : 	_Myiter& operator--()
; 385  : 		{	// predecrement
; 386  : 		--(*(_Mybase *)this);
; 387  : 		return (*this);
; 388  : 		}
; 389  : 
; 390  : 	_Myiter operator--(int)
; 391  : 		{	// postdecrement
; 392  : 		_Myiter _Tmp = *this;
; 393  : 		--*this;
; 394  : 		return (_Tmp);
; 395  : 		}
; 396  : 	};
; 397  : 
; 398  : template<class _Mylist> inline
; 399  : 	typename _List_iterator<_Mylist>::_Unchecked_type
; 400  : 		_Unchecked(_List_iterator<_Mylist> _Iter)
; 401  : 	{	// convert to unchecked
; 402  : 	return (_Iter._Unchecked());
; 403  : 	}
; 404  : 
; 405  : template<class _Mylist> inline
; 406  : 	_List_iterator<_Mylist>&
; 407  : 		_Rechecked(_List_iterator<_Mylist>& _Iter,
; 408  : 			typename _List_iterator<_Mylist>
; 409  : 				::_Unchecked_type _Right)
; 410  : 	{	// convert to checked
; 411  : 	return (_Iter._Rechecked(_Right));
; 412  : 	}
; 413  : 
; 414  : 		// list TYPE WRAPPERS
; 415  : template<class _Value_type,
; 416  : 	class _Size_type,
; 417  : 	class _Difference_type,
; 418  : 	class _Pointer,
; 419  : 	class _Const_pointer,
; 420  : 	class _Reference,
; 421  : 	class _Const_reference,
; 422  : 	class _Nodeptr_type>
; 423  : 	struct _List_iter_types
; 424  : 	{	// wraps types needed by iterators
; 425  : 	typedef _Value_type value_type;
; 426  : 	typedef _Size_type size_type;
; 427  : 	typedef _Difference_type difference_type;
; 428  : 	typedef _Pointer pointer;
; 429  : 	typedef _Const_pointer const_pointer;
; 430  : 	typedef _Reference reference;
; 431  : 	typedef _Const_reference const_reference;
; 432  : 	typedef _Nodeptr_type _Nodeptr;
; 433  : 	};
; 434  : 
; 435  : template<class _Value_type,
; 436  : 	class _Voidptr>
; 437  : 	struct _List_node
; 438  : 		{	// list node
; 439  : 		_Voidptr _Next;	// successor node, or first element if head
; 440  : 		_Voidptr _Prev;	// predecessor node, or last element if head
; 441  : 		_Value_type _Myval;	// the stored value, unused if head
; 442  : 
; 443  : 	private:
; 444  : 		_List_node& operator=(const _List_node&);
; 445  : 		};
; 446  : 
; 447  : template<class _Value_type>
; 448  : 	struct _List_node<_Value_type, void *>
; 449  : 		{	// list node
; 450  : 		typedef _List_node<_Value_type, void *> *_Nodeptr;
; 451  : 		_Nodeptr _Next;	// successor node, or first element if head
; 452  : 		_Nodeptr _Prev;	// predecessor node, or last element if head
; 453  : 		_Value_type _Myval;	// the stored value, unused if head
; 454  : 
; 455  : 	private:
; 456  : 		_List_node& operator=(const _List_node&);
; 457  : 		};
; 458  : 
; 459  : template<class _Ty>
; 460  : 	struct _List_simple_types
; 461  : 		: public _Simple_types<_Ty>
; 462  : 	{	// wraps types needed by iterators
; 463  : 	typedef _List_node<_Ty, void *> _Node;
; 464  : 	typedef _Node *_Nodeptr;
; 465  : 	};
; 466  : 
; 467  : template<class _Ty,
; 468  : 	class _Alloc0>
; 469  : 	struct _List_base_types
; 470  : 	{	// types needed for a container base
; 471  : 	typedef _Alloc0 _Alloc;
; 472  : 	typedef _List_base_types<_Ty, _Alloc> _Myt;
; 473  : 
; 474  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 475  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 476  : 
; 477  : 
; 478  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 479  : 		_Voidptr;
; 480  : 	typedef _List_node<typename _Alty::value_type,
; 481  : 		_Voidptr> _Node;
; 482  : 
; 483  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 484  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 485  : 	typedef _Nodeptr& _Nodepref;
; 486  : 
; 487  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 488  : 		_List_simple_types<typename _Alty::value_type>,
; 489  : 		_List_iter_types<typename _Alty::value_type,
; 490  : 			typename _Alty::size_type,
; 491  : 			typename _Alty::difference_type,
; 492  : 			typename _Alty::pointer,
; 493  : 			typename _Alty::const_pointer,
; 494  : 			typename _Alty::reference,
; 495  : 			typename _Alty::const_reference,
; 496  : 			_Nodeptr> >::type
; 497  : 		_Val_types;
; 498  : 	};
; 499  : 
; 500  : 		// TEMPLATE CLASS _List_val
; 501  : template<class _Val_types>
; 502  : 	class _List_val
; 503  : 		: public _Container_base
; 504  : 	{	// base class for list to hold data
; 505  : public:
; 506  : 	typedef _List_val<_Val_types> _Myt;
; 507  : 
; 508  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 509  : 	typedef _Nodeptr& _Nodepref;
; 510  : 
; 511  : 	typedef typename _Val_types::value_type value_type;
; 512  : 	typedef typename _Val_types::size_type size_type;
; 513  : 	typedef typename _Val_types::difference_type difference_type;
; 514  : 	typedef typename _Val_types::pointer pointer;
; 515  : 	typedef typename _Val_types::const_pointer const_pointer;
; 516  : 	typedef typename _Val_types::reference reference;
; 517  : 	typedef typename _Val_types::const_reference const_reference;
; 518  : 
; 519  : 	typedef _List_const_iterator<_Myt> const_iterator;
; 520  : 	typedef _List_iterator<_Myt> iterator;
; 521  : 
; 522  : 	typedef _List_unchecked_const_iterator<_Myt> _Unchecked_const_iterator;
; 523  : 	typedef _List_unchecked_iterator<_Myt> _Unchecked_iterator;
; 524  : 
; 525  : 	_List_val()
; 526  : 		{	// initialize data
; 527  : 		this->_Myhead = 0;
; 528  : 		this->_Mysize = 0;
; 529  : 		}
; 530  : 
; 531  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 532  : 		{	// return reference to successor pointer in node
; 533  : 		return ((_Nodepref)_Pnode->_Next);
; 534  : 		}
; 535  : 
; 536  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 537  : 		{	// return reference to predecessor pointer in node
; 538  : 		return ((_Nodepref)_Pnode->_Prev);
; 539  : 		}
; 540  : 
; 541  : 	static reference _Myval(_Nodeptr _Pnode)
; 542  : 		{	// return reference to value in node
; 543  : 		return ((reference)_Pnode->_Myval);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 363  : 		return ((reference)**(_Mybase *)this);
; 364  : 		}

  00005	c3		 ret	 0
??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBEAAUSChannel@CServerStateChecker@@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\list
;	COMDAT ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAE@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@PBV?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAE@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@PBV?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@1@@Z PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::_List_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >, COMDAT
; _this$ = ecx

; 345  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 44   : 		{	// construct with node pointer _Pnode

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 346  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAE@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@PBV?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@1@@Z ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::_List_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\list
;	COMDAT ??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::operator!=, COMDAT
; _this$ = ecx

; 302  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 298  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]

; 303  : 		return (!(*this == _Right));

  00005	33 c0		 xor	 eax, eax

; 298  : 		return (this->_Ptr == _Right._Ptr);

  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]

; 303  : 		return (!(*this == _Right));

  0000c	0f 95 c0	 setne	 al

; 304  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\list
;	COMDAT ??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::operator==, COMDAT
; _this$ = ecx

; 284  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 285  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 286  : 		if (this->_Getcont() == 0
; 287  : 			|| this->_Getcont() != _Right._Getcont())
; 288  : 			{	// report error
; 289  : 			_DEBUG_ERROR("list iterators incompatible");
; 290  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 291  : 			}
; 292  : 
; 293  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 294  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 295  : 			&& this->_Getcont() == _Right._Getcont());
; 296  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 297  : 
; 298  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	33 c0		 xor	 eax, eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000c	0f 94 c0	 sete	 al

; 299  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\list
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::operator++, COMDAT
; _this$ = ecx

; 243  : 
; 244  : 	_Myiter operator++(int)
; 245  : 		{	// postincrement
; 246  : 		_Myiter _Tmp = *this;
; 247  : 		++*this;
; 248  : 		return (_Tmp);
; 249  : 		}
; 250  : 
; 251  : 	_Myiter& operator--()
; 252  : 		{	// predecrement
; 253  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 254  : 		if (this->_Getcont() == 0
; 255  : 			|| this->_Ptr == 0
; 256  : 			|| (this->_Ptr = _Mylist::_Prevnode(this->_Ptr))
; 257  : 				== ((_Mylist *)this->_Getcont())->_Myhead)
; 258  : 			{	// report error
; 259  : 			_DEBUG_ERROR("list iterator not decrementable");
; 260  : 			_SCL_SECURE_OUT_OF_RANGE;
; 261  : 			}
; 262  : 
; 263  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 264  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 265  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 266  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 267  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 268  : 
; 269  :  #else /* _ITERATOR_DEBUG_LEVEL */
; 270  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 271  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 272  : 
; 273  : 		return (*this);
; 274  : 		}
; 275  : 
; 276  : 	_Myiter operator--(int)
; 277  : 		{	// postdecrement
; 278  : 		_Myiter _Tmp = *this;
; 279  : 		--*this;
; 280  : 		return (_Tmp);
; 281  : 		}
; 282  : 
; 283  : 	bool operator==(const _Myiter& _Right) const
; 284  : 		{	// test for iterator equality
; 285  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 286  : 		if (this->_Getcont() == 0
; 287  : 			|| this->_Getcont() != _Right._Getcont())
; 288  : 			{	// report error
; 289  : 			_DEBUG_ERROR("list iterators incompatible");
; 290  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 291  : 			}
; 292  : 
; 293  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 294  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 295  : 			&& this->_Getcont() == _Right._Getcont());
; 296  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 297  : 
; 298  : 		return (this->_Ptr == _Right._Ptr);
; 299  : 		}
; 300  : 
; 301  : 	bool operator!=(const _Myiter& _Right) const
; 302  : 		{	// test for iterator inequality
; 303  : 		return (!(*this == _Right));
; 304  : 		}
; 305  : 	};
; 306  : 
; 307  : template<class _Mylist> inline
; 308  : 	typename _List_const_iterator<_Mylist>::_Unchecked_type
; 309  : 		_Unchecked(_List_const_iterator<_Mylist> _Iter)
; 310  : 	{	// convert to unchecked
; 311  : 	return (_Iter._Unchecked());
; 312  : 	}
; 313  : 
; 314  : template<class _Mylist> inline
; 315  : 	_List_const_iterator<_Mylist>&
; 316  : 		_Rechecked(_List_const_iterator<_Mylist>& _Iter,
; 317  : 			typename _List_const_iterator<_Mylist>
; 318  : 				::_Unchecked_type _Right)
; 319  : 	{	// convert to checked
; 320  : 	return (_Iter._Rechecked(_Right));
; 321  : 	}
; 322  : 
; 323  : 	// TEMPLATE CLASS _List_iterator
; 324  : template<class _Mylist>
; 325  : 	class _List_iterator
; 326  : 		: public _List_const_iterator<_Mylist>
; 327  : 	{	// iterator for mutable list
; 328  : public:
; 329  : 	typedef _List_iterator<_Mylist> _Myiter;
; 330  : 	typedef _List_const_iterator<_Mylist> _Mybase;
; 331  : 	typedef bidirectional_iterator_tag iterator_category;
; 332  : 
; 333  : 	typedef typename _Mylist::_Nodeptr _Nodeptr;
; 334  : 	typedef typename _Mylist::value_type value_type;
; 335  : 	typedef typename _Mylist::difference_type difference_type;
; 336  : 	typedef typename _Mylist::pointer pointer;
; 337  : 	typedef typename _Mylist::reference reference;
; 338  : 
; 339  : 	_List_iterator()
; 340  : 		{	// construct with null node
; 341  : 		}
; 342  : 
; 343  : 	_List_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
; 344  : 		: _Mybase(_Pnode, _Plist)
; 345  : 		{	// construct with node pointer _Pnode
; 346  : 		}
; 347  : 
; 348  : 	typedef _List_unchecked_iterator<_Mylist> _Unchecked_type;
; 349  : 
; 350  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 351  : 		{	// reset from unchecked iterator
; 352  : 		this->_Ptr = _Right._Ptr;
; 353  : 		return (*this);
; 354  : 		}
; 355  : 
; 356  : 	_Unchecked_type _Unchecked() const
; 357  : 		{	// make an unchecked iterator
; 358  : 		return (_Unchecked_type(this->_Ptr, (_Mylist *)this->_Getcont()));
; 359  : 		}
; 360  : 
; 361  : 	reference operator*() const
; 362  : 		{	// return designated value
; 363  : 		return ((reference)**(_Mybase *)this);
; 364  : 		}
; 365  : 
; 366  : 	pointer operator->() const
; 367  : 		{	// return pointer to class object
; 368  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 369  : 		}
; 370  : 
; 371  : 	_Myiter& operator++()
; 372  : 		{	// preincrement
; 373  : 		++(*(_Mybase *)this);
; 374  : 		return (*this);
; 375  : 		}
; 376  : 
; 377  : 	_Myiter operator++(int)
; 378  : 		{	// postincrement
; 379  : 		_Myiter _Tmp = *this;
; 380  : 		++*this;
; 381  : 		return (_Tmp);
; 382  : 		}
; 383  : 
; 384  : 	_Myiter& operator--()
; 385  : 		{	// predecrement
; 386  : 		--(*(_Mybase *)this);
; 387  : 		return (*this);
; 388  : 		}
; 389  : 
; 390  : 	_Myiter operator--(int)
; 391  : 		{	// postdecrement
; 392  : 		_Myiter _Tmp = *this;
; 393  : 		--*this;
; 394  : 		return (_Tmp);
; 395  : 		}
; 396  : 	};
; 397  : 
; 398  : template<class _Mylist> inline
; 399  : 	typename _List_iterator<_Mylist>::_Unchecked_type
; 400  : 		_Unchecked(_List_iterator<_Mylist> _Iter)
; 401  : 	{	// convert to unchecked
; 402  : 	return (_Iter._Unchecked());
; 403  : 	}
; 404  : 
; 405  : template<class _Mylist> inline
; 406  : 	_List_iterator<_Mylist>&
; 407  : 		_Rechecked(_List_iterator<_Mylist>& _Iter,
; 408  : 			typename _List_iterator<_Mylist>
; 409  : 				::_Unchecked_type _Right)
; 410  : 	{	// convert to checked
; 411  : 	return (_Iter._Rechecked(_Right));
; 412  : 	}
; 413  : 
; 414  : 		// list TYPE WRAPPERS
; 415  : template<class _Value_type,
; 416  : 	class _Size_type,
; 417  : 	class _Difference_type,
; 418  : 	class _Pointer,
; 419  : 	class _Const_pointer,
; 420  : 	class _Reference,
; 421  : 	class _Const_reference,
; 422  : 	class _Nodeptr_type>
; 423  : 	struct _List_iter_types
; 424  : 	{	// wraps types needed by iterators
; 425  : 	typedef _Value_type value_type;
; 426  : 	typedef _Size_type size_type;
; 427  : 	typedef _Difference_type difference_type;
; 428  : 	typedef _Pointer pointer;
; 429  : 	typedef _Const_pointer const_pointer;
; 430  : 	typedef _Reference reference;
; 431  : 	typedef _Const_reference const_reference;
; 432  : 	typedef _Nodeptr_type _Nodeptr;
; 433  : 	};
; 434  : 
; 435  : template<class _Value_type,
; 436  : 	class _Voidptr>
; 437  : 	struct _List_node
; 438  : 		{	// list node
; 439  : 		_Voidptr _Next;	// successor node, or first element if head
; 440  : 		_Voidptr _Prev;	// predecessor node, or last element if head
; 441  : 		_Value_type _Myval;	// the stored value, unused if head
; 442  : 
; 443  : 	private:
; 444  : 		_List_node& operator=(const _List_node&);
; 445  : 		};
; 446  : 
; 447  : template<class _Value_type>
; 448  : 	struct _List_node<_Value_type, void *>
; 449  : 		{	// list node
; 450  : 		typedef _List_node<_Value_type, void *> *_Nodeptr;
; 451  : 		_Nodeptr _Next;	// successor node, or first element if head
; 452  : 		_Nodeptr _Prev;	// predecessor node, or last element if head
; 453  : 		_Value_type _Myval;	// the stored value, unused if head
; 454  : 
; 455  : 	private:
; 456  : 		_List_node& operator=(const _List_node&);
; 457  : 		};
; 458  : 
; 459  : template<class _Ty>
; 460  : 	struct _List_simple_types
; 461  : 		: public _Simple_types<_Ty>
; 462  : 	{	// wraps types needed by iterators
; 463  : 	typedef _List_node<_Ty, void *> _Node;
; 464  : 	typedef _Node *_Nodeptr;
; 465  : 	};
; 466  : 
; 467  : template<class _Ty,
; 468  : 	class _Alloc0>
; 469  : 	struct _List_base_types
; 470  : 	{	// types needed for a container base
; 471  : 	typedef _Alloc0 _Alloc;
; 472  : 	typedef _List_base_types<_Ty, _Alloc> _Myt;
; 473  : 
; 474  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 475  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 476  : 
; 477  : 
; 478  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 479  : 		_Voidptr;
; 480  : 	typedef _List_node<typename _Alty::value_type,
; 481  : 		_Voidptr> _Node;
; 482  : 
; 483  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 484  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 485  : 	typedef _Nodeptr& _Nodepref;
; 486  : 
; 487  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 488  : 		_List_simple_types<typename _Alty::value_type>,
; 489  : 		_List_iter_types<typename _Alty::value_type,
; 490  : 			typename _Alty::size_type,
; 491  : 			typename _Alty::difference_type,
; 492  : 			typename _Alty::pointer,
; 493  : 			typename _Alty::const_pointer,
; 494  : 			typename _Alty::reference,
; 495  : 			typename _Alty::const_reference,
; 496  : 			_Nodeptr> >::type
; 497  : 		_Val_types;
; 498  : 	};
; 499  : 
; 500  : 		// TEMPLATE CLASS _List_val
; 501  : template<class _Val_types>
; 502  : 	class _List_val
; 503  : 		: public _Container_base
; 504  : 	{	// base class for list to hold data
; 505  : public:
; 506  : 	typedef _List_val<_Val_types> _Myt;
; 507  : 
; 508  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 509  : 	typedef _Nodeptr& _Nodepref;
; 510  : 
; 511  : 	typedef typename _Val_types::value_type value_type;
; 512  : 	typedef typename _Val_types::size_type size_type;
; 513  : 	typedef typename _Val_types::difference_type difference_type;
; 514  : 	typedef typename _Val_types::pointer pointer;
; 515  : 	typedef typename _Val_types::const_pointer const_pointer;
; 516  : 	typedef typename _Val_types::reference reference;
; 517  : 	typedef typename _Val_types::const_reference const_reference;
; 518  : 
; 519  : 	typedef _List_const_iterator<_Myt> const_iterator;
; 520  : 	typedef _List_iterator<_Myt> iterator;
; 521  : 
; 522  : 	typedef _List_unchecked_const_iterator<_Myt> _Unchecked_const_iterator;
; 523  : 	typedef _List_unchecked_iterator<_Myt> _Unchecked_iterator;
; 524  : 
; 525  : 	_List_val()
; 526  : 		{	// initialize data
; 527  : 		this->_Myhead = 0;
; 528  : 		this->_Mysize = 0;
; 529  : 		}
; 530  : 
; 531  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 532  : 		{	// return reference to successor pointer in node
; 533  : 		return ((_Nodepref)_Pnode->_Next);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 225  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 226  : 		if (this->_Getcont() == 0
; 227  : 			|| this->_Ptr == 0
; 228  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 229  : 			{	// report error
; 230  : 			_DEBUG_ERROR("list iterator not incrementable");
; 231  : 			_SCL_SECURE_OUT_OF_RANGE;
; 232  : 			}
; 233  : 
; 234  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 235  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 236  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 237  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 238  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 239  : 
; 240  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);

  00002	8b 00		 mov	 eax, DWORD PTR [eax]
  00004	89 01		 mov	 DWORD PTR [ecx], eax

; 241  : 		return (*this);

  00006	8b c1		 mov	 eax, ecx

; 242  : 		}

  00008	c3		 ret	 0
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\list
;	COMDAT ??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBEABUSChannel@CServerStateChecker@@XZ
_TEXT	SEGMENT
??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBEABUSChannel@CServerStateChecker@@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::operator*, COMDAT
; _this$ = ecx

; 222  : 
; 223  : 	_Myiter& operator++()
; 224  : 		{	// preincrement
; 225  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 226  : 		if (this->_Getcont() == 0
; 227  : 			|| this->_Ptr == 0
; 228  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 229  : 			{	// report error
; 230  : 			_DEBUG_ERROR("list iterator not incrementable");
; 231  : 			_SCL_SECURE_OUT_OF_RANGE;
; 232  : 			}
; 233  : 
; 234  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 235  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 236  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 237  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 238  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 239  : 
; 240  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);
; 241  : 		return (*this);
; 242  : 		}
; 243  : 
; 244  : 	_Myiter operator++(int)
; 245  : 		{	// postincrement
; 246  : 		_Myiter _Tmp = *this;
; 247  : 		++*this;
; 248  : 		return (_Tmp);
; 249  : 		}
; 250  : 
; 251  : 	_Myiter& operator--()
; 252  : 		{	// predecrement
; 253  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 254  : 		if (this->_Getcont() == 0
; 255  : 			|| this->_Ptr == 0
; 256  : 			|| (this->_Ptr = _Mylist::_Prevnode(this->_Ptr))
; 257  : 				== ((_Mylist *)this->_Getcont())->_Myhead)
; 258  : 			{	// report error
; 259  : 			_DEBUG_ERROR("list iterator not decrementable");
; 260  : 			_SCL_SECURE_OUT_OF_RANGE;
; 261  : 			}
; 262  : 
; 263  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 264  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 265  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 266  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 267  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 268  : 
; 269  :  #else /* _ITERATOR_DEBUG_LEVEL */
; 270  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 271  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 272  : 
; 273  : 		return (*this);
; 274  : 		}
; 275  : 
; 276  : 	_Myiter operator--(int)
; 277  : 		{	// postdecrement
; 278  : 		_Myiter _Tmp = *this;
; 279  : 		--*this;
; 280  : 		return (_Tmp);
; 281  : 		}
; 282  : 
; 283  : 	bool operator==(const _Myiter& _Right) const
; 284  : 		{	// test for iterator equality
; 285  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 286  : 		if (this->_Getcont() == 0
; 287  : 			|| this->_Getcont() != _Right._Getcont())
; 288  : 			{	// report error
; 289  : 			_DEBUG_ERROR("list iterators incompatible");
; 290  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 291  : 			}
; 292  : 
; 293  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 294  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 295  : 			&& this->_Getcont() == _Right._Getcont());
; 296  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 297  : 
; 298  : 		return (this->_Ptr == _Right._Ptr);
; 299  : 		}
; 300  : 
; 301  : 	bool operator!=(const _Myiter& _Right) const
; 302  : 		{	// test for iterator inequality
; 303  : 		return (!(*this == _Right));
; 304  : 		}
; 305  : 	};
; 306  : 
; 307  : template<class _Mylist> inline
; 308  : 	typename _List_const_iterator<_Mylist>::_Unchecked_type
; 309  : 		_Unchecked(_List_const_iterator<_Mylist> _Iter)
; 310  : 	{	// convert to unchecked
; 311  : 	return (_Iter._Unchecked());
; 312  : 	}
; 313  : 
; 314  : template<class _Mylist> inline
; 315  : 	_List_const_iterator<_Mylist>&
; 316  : 		_Rechecked(_List_const_iterator<_Mylist>& _Iter,
; 317  : 			typename _List_const_iterator<_Mylist>
; 318  : 				::_Unchecked_type _Right)
; 319  : 	{	// convert to checked
; 320  : 	return (_Iter._Rechecked(_Right));
; 321  : 	}
; 322  : 
; 323  : 	// TEMPLATE CLASS _List_iterator
; 324  : template<class _Mylist>
; 325  : 	class _List_iterator
; 326  : 		: public _List_const_iterator<_Mylist>
; 327  : 	{	// iterator for mutable list
; 328  : public:
; 329  : 	typedef _List_iterator<_Mylist> _Myiter;
; 330  : 	typedef _List_const_iterator<_Mylist> _Mybase;
; 331  : 	typedef bidirectional_iterator_tag iterator_category;
; 332  : 
; 333  : 	typedef typename _Mylist::_Nodeptr _Nodeptr;
; 334  : 	typedef typename _Mylist::value_type value_type;
; 335  : 	typedef typename _Mylist::difference_type difference_type;
; 336  : 	typedef typename _Mylist::pointer pointer;
; 337  : 	typedef typename _Mylist::reference reference;
; 338  : 
; 339  : 	_List_iterator()
; 340  : 		{	// construct with null node
; 341  : 		}
; 342  : 
; 343  : 	_List_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
; 344  : 		: _Mybase(_Pnode, _Plist)
; 345  : 		{	// construct with node pointer _Pnode
; 346  : 		}
; 347  : 
; 348  : 	typedef _List_unchecked_iterator<_Mylist> _Unchecked_type;
; 349  : 
; 350  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 351  : 		{	// reset from unchecked iterator
; 352  : 		this->_Ptr = _Right._Ptr;
; 353  : 		return (*this);
; 354  : 		}
; 355  : 
; 356  : 	_Unchecked_type _Unchecked() const
; 357  : 		{	// make an unchecked iterator
; 358  : 		return (_Unchecked_type(this->_Ptr, (_Mylist *)this->_Getcont()));
; 359  : 		}
; 360  : 
; 361  : 	reference operator*() const
; 362  : 		{	// return designated value
; 363  : 		return ((reference)**(_Mybase *)this);
; 364  : 		}
; 365  : 
; 366  : 	pointer operator->() const
; 367  : 		{	// return pointer to class object
; 368  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 369  : 		}
; 370  : 
; 371  : 	_Myiter& operator++()
; 372  : 		{	// preincrement
; 373  : 		++(*(_Mybase *)this);
; 374  : 		return (*this);
; 375  : 		}
; 376  : 
; 377  : 	_Myiter operator++(int)
; 378  : 		{	// postincrement
; 379  : 		_Myiter _Tmp = *this;
; 380  : 		++*this;
; 381  : 		return (_Tmp);
; 382  : 		}
; 383  : 
; 384  : 	_Myiter& operator--()
; 385  : 		{	// predecrement
; 386  : 		--(*(_Mybase *)this);
; 387  : 		return (*this);
; 388  : 		}
; 389  : 
; 390  : 	_Myiter operator--(int)
; 391  : 		{	// postdecrement
; 392  : 		_Myiter _Tmp = *this;
; 393  : 		--*this;
; 394  : 		return (_Tmp);
; 395  : 		}
; 396  : 	};
; 397  : 
; 398  : template<class _Mylist> inline
; 399  : 	typename _List_iterator<_Mylist>::_Unchecked_type
; 400  : 		_Unchecked(_List_iterator<_Mylist> _Iter)
; 401  : 	{	// convert to unchecked
; 402  : 	return (_Iter._Unchecked());
; 403  : 	}
; 404  : 
; 405  : template<class _Mylist> inline
; 406  : 	_List_iterator<_Mylist>&
; 407  : 		_Rechecked(_List_iterator<_Mylist>& _Iter,
; 408  : 			typename _List_iterator<_Mylist>
; 409  : 				::_Unchecked_type _Right)
; 410  : 	{	// convert to checked
; 411  : 	return (_Iter._Rechecked(_Right));
; 412  : 	}
; 413  : 
; 414  : 		// list TYPE WRAPPERS
; 415  : template<class _Value_type,
; 416  : 	class _Size_type,
; 417  : 	class _Difference_type,
; 418  : 	class _Pointer,
; 419  : 	class _Const_pointer,
; 420  : 	class _Reference,
; 421  : 	class _Const_reference,
; 422  : 	class _Nodeptr_type>
; 423  : 	struct _List_iter_types
; 424  : 	{	// wraps types needed by iterators
; 425  : 	typedef _Value_type value_type;
; 426  : 	typedef _Size_type size_type;
; 427  : 	typedef _Difference_type difference_type;
; 428  : 	typedef _Pointer pointer;
; 429  : 	typedef _Const_pointer const_pointer;
; 430  : 	typedef _Reference reference;
; 431  : 	typedef _Const_reference const_reference;
; 432  : 	typedef _Nodeptr_type _Nodeptr;
; 433  : 	};
; 434  : 
; 435  : template<class _Value_type,
; 436  : 	class _Voidptr>
; 437  : 	struct _List_node
; 438  : 		{	// list node
; 439  : 		_Voidptr _Next;	// successor node, or first element if head
; 440  : 		_Voidptr _Prev;	// predecessor node, or last element if head
; 441  : 		_Value_type _Myval;	// the stored value, unused if head
; 442  : 
; 443  : 	private:
; 444  : 		_List_node& operator=(const _List_node&);
; 445  : 		};
; 446  : 
; 447  : template<class _Value_type>
; 448  : 	struct _List_node<_Value_type, void *>
; 449  : 		{	// list node
; 450  : 		typedef _List_node<_Value_type, void *> *_Nodeptr;
; 451  : 		_Nodeptr _Next;	// successor node, or first element if head
; 452  : 		_Nodeptr _Prev;	// predecessor node, or last element if head
; 453  : 		_Value_type _Myval;	// the stored value, unused if head
; 454  : 
; 455  : 	private:
; 456  : 		_List_node& operator=(const _List_node&);
; 457  : 		};
; 458  : 
; 459  : template<class _Ty>
; 460  : 	struct _List_simple_types
; 461  : 		: public _Simple_types<_Ty>
; 462  : 	{	// wraps types needed by iterators
; 463  : 	typedef _List_node<_Ty, void *> _Node;
; 464  : 	typedef _Node *_Nodeptr;
; 465  : 	};
; 466  : 
; 467  : template<class _Ty,
; 468  : 	class _Alloc0>
; 469  : 	struct _List_base_types
; 470  : 	{	// types needed for a container base
; 471  : 	typedef _Alloc0 _Alloc;
; 472  : 	typedef _List_base_types<_Ty, _Alloc> _Myt;
; 473  : 
; 474  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 475  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 476  : 
; 477  : 
; 478  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 479  : 		_Voidptr;
; 480  : 	typedef _List_node<typename _Alty::value_type,
; 481  : 		_Voidptr> _Node;
; 482  : 
; 483  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 484  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 485  : 	typedef _Nodeptr& _Nodepref;
; 486  : 
; 487  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 488  : 		_List_simple_types<typename _Alty::value_type>,
; 489  : 		_List_iter_types<typename _Alty::value_type,
; 490  : 			typename _Alty::size_type,
; 491  : 			typename _Alty::difference_type,
; 492  : 			typename _Alty::pointer,
; 493  : 			typename _Alty::const_pointer,
; 494  : 			typename _Alty::reference,
; 495  : 			typename _Alty::const_reference,
; 496  : 			_Nodeptr> >::type
; 497  : 		_Val_types;
; 498  : 	};
; 499  : 
; 500  : 		// TEMPLATE CLASS _List_val
; 501  : template<class _Val_types>
; 502  : 	class _List_val
; 503  : 		: public _Container_base
; 504  : 	{	// base class for list to hold data
; 505  : public:
; 506  : 	typedef _List_val<_Val_types> _Myt;
; 507  : 
; 508  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 509  : 	typedef _Nodeptr& _Nodepref;
; 510  : 
; 511  : 	typedef typename _Val_types::value_type value_type;
; 512  : 	typedef typename _Val_types::size_type size_type;
; 513  : 	typedef typename _Val_types::difference_type difference_type;
; 514  : 	typedef typename _Val_types::pointer pointer;
; 515  : 	typedef typename _Val_types::const_pointer const_pointer;
; 516  : 	typedef typename _Val_types::reference reference;
; 517  : 	typedef typename _Val_types::const_reference const_reference;
; 518  : 
; 519  : 	typedef _List_const_iterator<_Myt> const_iterator;
; 520  : 	typedef _List_iterator<_Myt> iterator;
; 521  : 
; 522  : 	typedef _List_unchecked_const_iterator<_Myt> _Unchecked_const_iterator;
; 523  : 	typedef _List_unchecked_iterator<_Myt> _Unchecked_iterator;
; 524  : 
; 525  : 	_List_val()
; 526  : 		{	// initialize data
; 527  : 		this->_Myhead = 0;
; 528  : 		this->_Mysize = 0;
; 529  : 		}
; 530  : 
; 531  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 532  : 		{	// return reference to successor pointer in node
; 533  : 		return ((_Nodepref)_Pnode->_Next);
; 534  : 		}
; 535  : 
; 536  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 537  : 		{	// return reference to predecessor pointer in node
; 538  : 		return ((_Nodepref)_Pnode->_Prev);
; 539  : 		}
; 540  : 
; 541  : 	static reference _Myval(_Nodeptr _Pnode)
; 542  : 		{	// return reference to value in node
; 543  : 		return ((reference)_Pnode->_Myval);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 205  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 206  : 		if (this->_Getcont() == 0
; 207  : 			|| this->_Ptr == 0
; 208  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 209  : 			{	// report error
; 210  : 			_DEBUG_ERROR("list iterator not dereferencable");
; 211  : 			_SCL_SECURE_OUT_OF_RANGE;
; 212  : 			}
; 213  : 
; 214  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 215  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 216  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 217  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 218  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 219  : 
; 220  : 		return (_Mylist::_Myval(this->_Ptr));
; 221  : 		}

  00005	c3		 ret	 0
??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBEABUSChannel@CServerStateChecker@@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\list
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAE@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@PBV?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAE@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@PBV?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@1@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >, COMDAT
; _this$ = ecx

; 187  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 44   : 		{	// construct with node pointer _Pnode

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 188  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAE@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@PBV?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@1@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\list
;	COMDAT ?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@XZ
_TEXT	SEGMENT
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx

; 96   : 		return (_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 97   : 		}

  00002	c3		 ret	 0
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\list
;	COMDAT ??C?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPBUSChannel@CServerStateChecker@@XZ
_TEXT	SEGMENT
??C?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPBUSChannel@CServerStateChecker@@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >,std::_Iterator_base0>::operator->, COMDAT
; _this$ = ecx

; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		_Ptr = _Mylist::_Nextnode(_Ptr);
; 61   : 		return (*this);
; 62   : 		}
; 63   : 
; 64   : 	_Myiter operator++(int)
; 65   : 		{	// postincrement
; 66   : 		_Myiter _Tmp = *this;
; 67   : 		++*this;
; 68   : 		return (_Tmp);
; 69   : 		}
; 70   : 
; 71   : 	_Myiter& operator--()
; 72   : 		{	// predecrement
; 73   : 		_Ptr = _Mylist::_Prevnode(_Ptr);
; 74   : 		return (*this);
; 75   : 		}
; 76   : 
; 77   : 	_Myiter operator--(int)
; 78   : 		{	// postdecrement
; 79   : 		_Myiter _Tmp = *this;
; 80   : 		--*this;
; 81   : 		return (_Tmp);
; 82   : 		}
; 83   : 
; 84   : 	bool operator==(const _Myiter& _Right) const
; 85   : 		{	// test for iterator equality
; 86   : 		return (_Ptr == _Right._Ptr);
; 87   : 		}
; 88   : 
; 89   : 	bool operator!=(const _Myiter& _Right) const
; 90   : 		{	// test for iterator inequality
; 91   : 		return (!(*this == _Right));
; 92   : 		}
; 93   : 
; 94   : 	_Nodeptr _Mynode() const
; 95   : 		{	// return node pointer
; 96   : 		return (_Ptr);
; 97   : 		}
; 98   : 
; 99   : 	_Nodeptr _Ptr;	// pointer to node
; 100  : 	};
; 101  : 
; 102  : 	// TEMPLATE CLASS _List_unchecked_iterator
; 103  : template<class _Mylist>
; 104  : 	class _List_unchecked_iterator
; 105  : 		: public _List_unchecked_const_iterator<_Mylist>
; 106  : 	{	// unchecked iterator for mutable list
; 107  : public:
; 108  : 	typedef _List_unchecked_iterator<_Mylist> _Myiter;
; 109  : 	typedef _List_unchecked_const_iterator<_Mylist> _Mybase;
; 110  : 	typedef bidirectional_iterator_tag iterator_category;
; 111  : 
; 112  : 	typedef typename _Mylist::_Nodeptr _Nodeptr;
; 113  : 	typedef typename _Mylist::value_type value_type;
; 114  : 	typedef typename _Mylist::difference_type difference_type;
; 115  : 	typedef typename _Mylist::pointer pointer;
; 116  : 	typedef typename _Mylist::reference reference;
; 117  : 
; 118  : 	_List_unchecked_iterator()
; 119  : 		{	// construct with null node
; 120  : 		}
; 121  : 
; 122  : 	_List_unchecked_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
; 123  : 		: _Mybase(_Pnode, _Plist)
; 124  : 		{	// construct with node pointer _Pnode
; 125  : 		}
; 126  : 
; 127  : 	reference operator*() const
; 128  : 		{	// return designated value
; 129  : 		return ((reference)**(_Mybase *)this);
; 130  : 		}
; 131  : 
; 132  : 	pointer operator->() const
; 133  : 		{	// return pointer to class object
; 134  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 135  : 		}
; 136  : 
; 137  : 	_Myiter& operator++()
; 138  : 		{	// preincrement
; 139  : 		++(*(_Mybase *)this);
; 140  : 		return (*this);
; 141  : 		}
; 142  : 
; 143  : 	_Myiter operator++(int)
; 144  : 		{	// postincrement
; 145  : 		_Myiter _Tmp = *this;
; 146  : 		++*this;
; 147  : 		return (_Tmp);
; 148  : 		}
; 149  : 
; 150  : 	_Myiter& operator--()
; 151  : 		{	// predecrement
; 152  : 		--(*(_Mybase *)this);
; 153  : 		return (*this);
; 154  : 		}
; 155  : 
; 156  : 	_Myiter operator--(int)
; 157  : 		{	// postdecrement
; 158  : 		_Myiter _Tmp = *this;
; 159  : 		--*this;
; 160  : 		return (_Tmp);
; 161  : 		}
; 162  : 	};
; 163  : 
; 164  : 	// TEMPLATE CLASS _List_const_iterator
; 165  : template<class _Mylist>
; 166  : 	class _List_const_iterator
; 167  : 		: public _List_unchecked_const_iterator<_Mylist, _Iterator_base>
; 168  : 	{	// iterator for nonmutable list
; 169  : public:
; 170  : 	typedef _List_const_iterator<_Mylist> _Myiter;
; 171  : 	typedef _List_unchecked_const_iterator<_Mylist, _Iterator_base> _Mybase;
; 172  : 	typedef bidirectional_iterator_tag iterator_category;
; 173  : 
; 174  : 	typedef typename _Mylist::_Nodeptr _Nodeptr;
; 175  : 	typedef typename _Mylist::value_type value_type;
; 176  : 	typedef typename _Mylist::difference_type difference_type;
; 177  : 	typedef typename _Mylist::const_pointer pointer;
; 178  : 	typedef typename _Mylist::const_reference reference;
; 179  : 
; 180  : 	_List_const_iterator()
; 181  : 		: _Mybase()
; 182  : 		{	// construct with null node pointer
; 183  : 		}
; 184  : 
; 185  : 	_List_const_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
; 186  : 		: _Mybase(_Pnode, _Plist)
; 187  : 		{	// construct with node pointer _Pnode
; 188  : 		}
; 189  : 
; 190  : 	typedef _List_unchecked_const_iterator<_Mylist> _Unchecked_type;
; 191  : 
; 192  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 193  : 		{	// reset from unchecked iterator
; 194  : 		this->_Ptr = _Right._Ptr;
; 195  : 		return (*this);
; 196  : 		}
; 197  : 
; 198  : 	_Unchecked_type _Unchecked() const
; 199  : 		{	// make an unchecked iterator
; 200  : 		return (_Unchecked_type(this->_Ptr, (_Mylist *)this->_Getcont()));
; 201  : 		}
; 202  : 
; 203  : 	reference operator*() const
; 204  : 		{	// return designated value
; 205  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 206  : 		if (this->_Getcont() == 0
; 207  : 			|| this->_Ptr == 0
; 208  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 209  : 			{	// report error
; 210  : 			_DEBUG_ERROR("list iterator not dereferencable");
; 211  : 			_SCL_SECURE_OUT_OF_RANGE;
; 212  : 			}
; 213  : 
; 214  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 215  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 216  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 217  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 218  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 219  : 
; 220  : 		return (_Mylist::_Myval(this->_Ptr));
; 221  : 		}
; 222  : 
; 223  : 	_Myiter& operator++()
; 224  : 		{	// preincrement
; 225  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 226  : 		if (this->_Getcont() == 0
; 227  : 			|| this->_Ptr == 0
; 228  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 229  : 			{	// report error
; 230  : 			_DEBUG_ERROR("list iterator not incrementable");
; 231  : 			_SCL_SECURE_OUT_OF_RANGE;
; 232  : 			}
; 233  : 
; 234  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 235  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 236  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 237  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 238  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 239  : 
; 240  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);
; 241  : 		return (*this);
; 242  : 		}
; 243  : 
; 244  : 	_Myiter operator++(int)
; 245  : 		{	// postincrement
; 246  : 		_Myiter _Tmp = *this;
; 247  : 		++*this;
; 248  : 		return (_Tmp);
; 249  : 		}
; 250  : 
; 251  : 	_Myiter& operator--()
; 252  : 		{	// predecrement
; 253  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 254  : 		if (this->_Getcont() == 0
; 255  : 			|| this->_Ptr == 0
; 256  : 			|| (this->_Ptr = _Mylist::_Prevnode(this->_Ptr))
; 257  : 				== ((_Mylist *)this->_Getcont())->_Myhead)
; 258  : 			{	// report error
; 259  : 			_DEBUG_ERROR("list iterator not decrementable");
; 260  : 			_SCL_SECURE_OUT_OF_RANGE;
; 261  : 			}
; 262  : 
; 263  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 264  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 265  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 266  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 267  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 268  : 
; 269  :  #else /* _ITERATOR_DEBUG_LEVEL */
; 270  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 271  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 272  : 
; 273  : 		return (*this);
; 274  : 		}
; 275  : 
; 276  : 	_Myiter operator--(int)
; 277  : 		{	// postdecrement
; 278  : 		_Myiter _Tmp = *this;
; 279  : 		--*this;
; 280  : 		return (_Tmp);
; 281  : 		}
; 282  : 
; 283  : 	bool operator==(const _Myiter& _Right) const
; 284  : 		{	// test for iterator equality
; 285  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 286  : 		if (this->_Getcont() == 0
; 287  : 			|| this->_Getcont() != _Right._Getcont())
; 288  : 			{	// report error
; 289  : 			_DEBUG_ERROR("list iterators incompatible");
; 290  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 291  : 			}
; 292  : 
; 293  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 294  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 295  : 			&& this->_Getcont() == _Right._Getcont());
; 296  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 297  : 
; 298  : 		return (this->_Ptr == _Right._Ptr);
; 299  : 		}
; 300  : 
; 301  : 	bool operator!=(const _Myiter& _Right) const
; 302  : 		{	// test for iterator inequality
; 303  : 		return (!(*this == _Right));
; 304  : 		}
; 305  : 	};
; 306  : 
; 307  : template<class _Mylist> inline
; 308  : 	typename _List_const_iterator<_Mylist>::_Unchecked_type
; 309  : 		_Unchecked(_List_const_iterator<_Mylist> _Iter)
; 310  : 	{	// convert to unchecked
; 311  : 	return (_Iter._Unchecked());
; 312  : 	}
; 313  : 
; 314  : template<class _Mylist> inline
; 315  : 	_List_const_iterator<_Mylist>&
; 316  : 		_Rechecked(_List_const_iterator<_Mylist>& _Iter,
; 317  : 			typename _List_const_iterator<_Mylist>
; 318  : 				::_Unchecked_type _Right)
; 319  : 	{	// convert to checked
; 320  : 	return (_Iter._Rechecked(_Right));
; 321  : 	}
; 322  : 
; 323  : 	// TEMPLATE CLASS _List_iterator
; 324  : template<class _Mylist>
; 325  : 	class _List_iterator
; 326  : 		: public _List_const_iterator<_Mylist>
; 327  : 	{	// iterator for mutable list
; 328  : public:
; 329  : 	typedef _List_iterator<_Mylist> _Myiter;
; 330  : 	typedef _List_const_iterator<_Mylist> _Mybase;
; 331  : 	typedef bidirectional_iterator_tag iterator_category;
; 332  : 
; 333  : 	typedef typename _Mylist::_Nodeptr _Nodeptr;
; 334  : 	typedef typename _Mylist::value_type value_type;
; 335  : 	typedef typename _Mylist::difference_type difference_type;
; 336  : 	typedef typename _Mylist::pointer pointer;
; 337  : 	typedef typename _Mylist::reference reference;
; 338  : 
; 339  : 	_List_iterator()
; 340  : 		{	// construct with null node
; 341  : 		}
; 342  : 
; 343  : 	_List_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
; 344  : 		: _Mybase(_Pnode, _Plist)
; 345  : 		{	// construct with node pointer _Pnode
; 346  : 		}
; 347  : 
; 348  : 	typedef _List_unchecked_iterator<_Mylist> _Unchecked_type;
; 349  : 
; 350  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 351  : 		{	// reset from unchecked iterator
; 352  : 		this->_Ptr = _Right._Ptr;
; 353  : 		return (*this);
; 354  : 		}
; 355  : 
; 356  : 	_Unchecked_type _Unchecked() const
; 357  : 		{	// make an unchecked iterator
; 358  : 		return (_Unchecked_type(this->_Ptr, (_Mylist *)this->_Getcont()));
; 359  : 		}
; 360  : 
; 361  : 	reference operator*() const
; 362  : 		{	// return designated value
; 363  : 		return ((reference)**(_Mybase *)this);
; 364  : 		}
; 365  : 
; 366  : 	pointer operator->() const
; 367  : 		{	// return pointer to class object
; 368  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 369  : 		}
; 370  : 
; 371  : 	_Myiter& operator++()
; 372  : 		{	// preincrement
; 373  : 		++(*(_Mybase *)this);
; 374  : 		return (*this);
; 375  : 		}
; 376  : 
; 377  : 	_Myiter operator++(int)
; 378  : 		{	// postincrement
; 379  : 		_Myiter _Tmp = *this;
; 380  : 		++*this;
; 381  : 		return (_Tmp);
; 382  : 		}
; 383  : 
; 384  : 	_Myiter& operator--()
; 385  : 		{	// predecrement
; 386  : 		--(*(_Mybase *)this);
; 387  : 		return (*this);
; 388  : 		}
; 389  : 
; 390  : 	_Myiter operator--(int)
; 391  : 		{	// postdecrement
; 392  : 		_Myiter _Tmp = *this;
; 393  : 		--*this;
; 394  : 		return (_Tmp);
; 395  : 		}
; 396  : 	};
; 397  : 
; 398  : template<class _Mylist> inline
; 399  : 	typename _List_iterator<_Mylist>::_Unchecked_type
; 400  : 		_Unchecked(_List_iterator<_Mylist> _Iter)
; 401  : 	{	// convert to unchecked
; 402  : 	return (_Iter._Unchecked());
; 403  : 	}
; 404  : 
; 405  : template<class _Mylist> inline
; 406  : 	_List_iterator<_Mylist>&
; 407  : 		_Rechecked(_List_iterator<_Mylist>& _Iter,
; 408  : 			typename _List_iterator<_Mylist>
; 409  : 				::_Unchecked_type _Right)
; 410  : 	{	// convert to checked
; 411  : 	return (_Iter._Rechecked(_Right));
; 412  : 	}
; 413  : 
; 414  : 		// list TYPE WRAPPERS
; 415  : template<class _Value_type,
; 416  : 	class _Size_type,
; 417  : 	class _Difference_type,
; 418  : 	class _Pointer,
; 419  : 	class _Const_pointer,
; 420  : 	class _Reference,
; 421  : 	class _Const_reference,
; 422  : 	class _Nodeptr_type>
; 423  : 	struct _List_iter_types
; 424  : 	{	// wraps types needed by iterators
; 425  : 	typedef _Value_type value_type;
; 426  : 	typedef _Size_type size_type;
; 427  : 	typedef _Difference_type difference_type;
; 428  : 	typedef _Pointer pointer;
; 429  : 	typedef _Const_pointer const_pointer;
; 430  : 	typedef _Reference reference;
; 431  : 	typedef _Const_reference const_reference;
; 432  : 	typedef _Nodeptr_type _Nodeptr;
; 433  : 	};
; 434  : 
; 435  : template<class _Value_type,
; 436  : 	class _Voidptr>
; 437  : 	struct _List_node
; 438  : 		{	// list node
; 439  : 		_Voidptr _Next;	// successor node, or first element if head
; 440  : 		_Voidptr _Prev;	// predecessor node, or last element if head
; 441  : 		_Value_type _Myval;	// the stored value, unused if head
; 442  : 
; 443  : 	private:
; 444  : 		_List_node& operator=(const _List_node&);
; 445  : 		};
; 446  : 
; 447  : template<class _Value_type>
; 448  : 	struct _List_node<_Value_type, void *>
; 449  : 		{	// list node
; 450  : 		typedef _List_node<_Value_type, void *> *_Nodeptr;
; 451  : 		_Nodeptr _Next;	// successor node, or first element if head
; 452  : 		_Nodeptr _Prev;	// predecessor node, or last element if head
; 453  : 		_Value_type _Myval;	// the stored value, unused if head
; 454  : 
; 455  : 	private:
; 456  : 		_List_node& operator=(const _List_node&);
; 457  : 		};
; 458  : 
; 459  : template<class _Ty>
; 460  : 	struct _List_simple_types
; 461  : 		: public _Simple_types<_Ty>
; 462  : 	{	// wraps types needed by iterators
; 463  : 	typedef _List_node<_Ty, void *> _Node;
; 464  : 	typedef _Node *_Nodeptr;
; 465  : 	};
; 466  : 
; 467  : template<class _Ty,
; 468  : 	class _Alloc0>
; 469  : 	struct _List_base_types
; 470  : 	{	// types needed for a container base
; 471  : 	typedef _Alloc0 _Alloc;
; 472  : 	typedef _List_base_types<_Ty, _Alloc> _Myt;
; 473  : 
; 474  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 475  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 476  : 
; 477  : 
; 478  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 479  : 		_Voidptr;
; 480  : 	typedef _List_node<typename _Alty::value_type,
; 481  : 		_Voidptr> _Node;
; 482  : 
; 483  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 484  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 485  : 	typedef _Nodeptr& _Nodepref;
; 486  : 
; 487  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 488  : 		_List_simple_types<typename _Alty::value_type>,
; 489  : 		_List_iter_types<typename _Alty::value_type,
; 490  : 			typename _Alty::size_type,
; 491  : 			typename _Alty::difference_type,
; 492  : 			typename _Alty::pointer,
; 493  : 			typename _Alty::const_pointer,
; 494  : 			typename _Alty::reference,
; 495  : 			typename _Alty::const_reference,
; 496  : 			_Nodeptr> >::type
; 497  : 		_Val_types;
; 498  : 	};
; 499  : 
; 500  : 		// TEMPLATE CLASS _List_val
; 501  : template<class _Val_types>
; 502  : 	class _List_val
; 503  : 		: public _Container_base
; 504  : 	{	// base class for list to hold data
; 505  : public:
; 506  : 	typedef _List_val<_Val_types> _Myt;
; 507  : 
; 508  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 509  : 	typedef _Nodeptr& _Nodepref;
; 510  : 
; 511  : 	typedef typename _Val_types::value_type value_type;
; 512  : 	typedef typename _Val_types::size_type size_type;
; 513  : 	typedef typename _Val_types::difference_type difference_type;
; 514  : 	typedef typename _Val_types::pointer pointer;
; 515  : 	typedef typename _Val_types::const_pointer const_pointer;
; 516  : 	typedef typename _Val_types::reference reference;
; 517  : 	typedef typename _Val_types::const_reference const_reference;
; 518  : 
; 519  : 	typedef _List_const_iterator<_Myt> const_iterator;
; 520  : 	typedef _List_iterator<_Myt> iterator;
; 521  : 
; 522  : 	typedef _List_unchecked_const_iterator<_Myt> _Unchecked_const_iterator;
; 523  : 	typedef _List_unchecked_iterator<_Myt> _Unchecked_iterator;
; 524  : 
; 525  : 	_List_val()
; 526  : 		{	// initialize data
; 527  : 		this->_Myhead = 0;
; 528  : 		this->_Mysize = 0;
; 529  : 		}
; 530  : 
; 531  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 532  : 		{	// return reference to successor pointer in node
; 533  : 		return ((_Nodepref)_Pnode->_Next);
; 534  : 		}
; 535  : 
; 536  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 537  : 		{	// return reference to predecessor pointer in node
; 538  : 		return ((_Nodepref)_Pnode->_Prev);
; 539  : 		}
; 540  : 
; 541  : 	static reference _Myval(_Nodeptr _Pnode)
; 542  : 		{	// return reference to value in node
; 543  : 		return ((reference)_Pnode->_Myval);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}

  00005	c3		 ret	 0
??C?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPBUSChannel@CServerStateChecker@@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >,std::_Iterator_base0>::operator->
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\list
;	COMDAT ??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@U_Iterator_base0@2@@std@@QBEABUSChannel@CServerStateChecker@@XZ
_TEXT	SEGMENT
??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@U_Iterator_base0@2@@std@@QBEABUSChannel@CServerStateChecker@@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >,std::_Iterator_base0>::operator*, COMDAT
; _this$ = ecx

; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		_Ptr = _Mylist::_Nextnode(_Ptr);
; 61   : 		return (*this);
; 62   : 		}
; 63   : 
; 64   : 	_Myiter operator++(int)
; 65   : 		{	// postincrement
; 66   : 		_Myiter _Tmp = *this;
; 67   : 		++*this;
; 68   : 		return (_Tmp);
; 69   : 		}
; 70   : 
; 71   : 	_Myiter& operator--()
; 72   : 		{	// predecrement
; 73   : 		_Ptr = _Mylist::_Prevnode(_Ptr);
; 74   : 		return (*this);
; 75   : 		}
; 76   : 
; 77   : 	_Myiter operator--(int)
; 78   : 		{	// postdecrement
; 79   : 		_Myiter _Tmp = *this;
; 80   : 		--*this;
; 81   : 		return (_Tmp);
; 82   : 		}
; 83   : 
; 84   : 	bool operator==(const _Myiter& _Right) const
; 85   : 		{	// test for iterator equality
; 86   : 		return (_Ptr == _Right._Ptr);
; 87   : 		}
; 88   : 
; 89   : 	bool operator!=(const _Myiter& _Right) const
; 90   : 		{	// test for iterator inequality
; 91   : 		return (!(*this == _Right));
; 92   : 		}
; 93   : 
; 94   : 	_Nodeptr _Mynode() const
; 95   : 		{	// return node pointer
; 96   : 		return (_Ptr);
; 97   : 		}
; 98   : 
; 99   : 	_Nodeptr _Ptr;	// pointer to node
; 100  : 	};
; 101  : 
; 102  : 	// TEMPLATE CLASS _List_unchecked_iterator
; 103  : template<class _Mylist>
; 104  : 	class _List_unchecked_iterator
; 105  : 		: public _List_unchecked_const_iterator<_Mylist>
; 106  : 	{	// unchecked iterator for mutable list
; 107  : public:
; 108  : 	typedef _List_unchecked_iterator<_Mylist> _Myiter;
; 109  : 	typedef _List_unchecked_const_iterator<_Mylist> _Mybase;
; 110  : 	typedef bidirectional_iterator_tag iterator_category;
; 111  : 
; 112  : 	typedef typename _Mylist::_Nodeptr _Nodeptr;
; 113  : 	typedef typename _Mylist::value_type value_type;
; 114  : 	typedef typename _Mylist::difference_type difference_type;
; 115  : 	typedef typename _Mylist::pointer pointer;
; 116  : 	typedef typename _Mylist::reference reference;
; 117  : 
; 118  : 	_List_unchecked_iterator()
; 119  : 		{	// construct with null node
; 120  : 		}
; 121  : 
; 122  : 	_List_unchecked_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
; 123  : 		: _Mybase(_Pnode, _Plist)
; 124  : 		{	// construct with node pointer _Pnode
; 125  : 		}
; 126  : 
; 127  : 	reference operator*() const
; 128  : 		{	// return designated value
; 129  : 		return ((reference)**(_Mybase *)this);
; 130  : 		}
; 131  : 
; 132  : 	pointer operator->() const
; 133  : 		{	// return pointer to class object
; 134  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 135  : 		}
; 136  : 
; 137  : 	_Myiter& operator++()
; 138  : 		{	// preincrement
; 139  : 		++(*(_Mybase *)this);
; 140  : 		return (*this);
; 141  : 		}
; 142  : 
; 143  : 	_Myiter operator++(int)
; 144  : 		{	// postincrement
; 145  : 		_Myiter _Tmp = *this;
; 146  : 		++*this;
; 147  : 		return (_Tmp);
; 148  : 		}
; 149  : 
; 150  : 	_Myiter& operator--()
; 151  : 		{	// predecrement
; 152  : 		--(*(_Mybase *)this);
; 153  : 		return (*this);
; 154  : 		}
; 155  : 
; 156  : 	_Myiter operator--(int)
; 157  : 		{	// postdecrement
; 158  : 		_Myiter _Tmp = *this;
; 159  : 		--*this;
; 160  : 		return (_Tmp);
; 161  : 		}
; 162  : 	};
; 163  : 
; 164  : 	// TEMPLATE CLASS _List_const_iterator
; 165  : template<class _Mylist>
; 166  : 	class _List_const_iterator
; 167  : 		: public _List_unchecked_const_iterator<_Mylist, _Iterator_base>
; 168  : 	{	// iterator for nonmutable list
; 169  : public:
; 170  : 	typedef _List_const_iterator<_Mylist> _Myiter;
; 171  : 	typedef _List_unchecked_const_iterator<_Mylist, _Iterator_base> _Mybase;
; 172  : 	typedef bidirectional_iterator_tag iterator_category;
; 173  : 
; 174  : 	typedef typename _Mylist::_Nodeptr _Nodeptr;
; 175  : 	typedef typename _Mylist::value_type value_type;
; 176  : 	typedef typename _Mylist::difference_type difference_type;
; 177  : 	typedef typename _Mylist::const_pointer pointer;
; 178  : 	typedef typename _Mylist::const_reference reference;
; 179  : 
; 180  : 	_List_const_iterator()
; 181  : 		: _Mybase()
; 182  : 		{	// construct with null node pointer
; 183  : 		}
; 184  : 
; 185  : 	_List_const_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
; 186  : 		: _Mybase(_Pnode, _Plist)
; 187  : 		{	// construct with node pointer _Pnode
; 188  : 		}
; 189  : 
; 190  : 	typedef _List_unchecked_const_iterator<_Mylist> _Unchecked_type;
; 191  : 
; 192  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 193  : 		{	// reset from unchecked iterator
; 194  : 		this->_Ptr = _Right._Ptr;
; 195  : 		return (*this);
; 196  : 		}
; 197  : 
; 198  : 	_Unchecked_type _Unchecked() const
; 199  : 		{	// make an unchecked iterator
; 200  : 		return (_Unchecked_type(this->_Ptr, (_Mylist *)this->_Getcont()));
; 201  : 		}
; 202  : 
; 203  : 	reference operator*() const
; 204  : 		{	// return designated value
; 205  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 206  : 		if (this->_Getcont() == 0
; 207  : 			|| this->_Ptr == 0
; 208  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 209  : 			{	// report error
; 210  : 			_DEBUG_ERROR("list iterator not dereferencable");
; 211  : 			_SCL_SECURE_OUT_OF_RANGE;
; 212  : 			}
; 213  : 
; 214  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 215  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 216  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 217  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 218  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 219  : 
; 220  : 		return (_Mylist::_Myval(this->_Ptr));
; 221  : 		}
; 222  : 
; 223  : 	_Myiter& operator++()
; 224  : 		{	// preincrement
; 225  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 226  : 		if (this->_Getcont() == 0
; 227  : 			|| this->_Ptr == 0
; 228  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 229  : 			{	// report error
; 230  : 			_DEBUG_ERROR("list iterator not incrementable");
; 231  : 			_SCL_SECURE_OUT_OF_RANGE;
; 232  : 			}
; 233  : 
; 234  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 235  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 236  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 237  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 238  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 239  : 
; 240  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);
; 241  : 		return (*this);
; 242  : 		}
; 243  : 
; 244  : 	_Myiter operator++(int)
; 245  : 		{	// postincrement
; 246  : 		_Myiter _Tmp = *this;
; 247  : 		++*this;
; 248  : 		return (_Tmp);
; 249  : 		}
; 250  : 
; 251  : 	_Myiter& operator--()
; 252  : 		{	// predecrement
; 253  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 254  : 		if (this->_Getcont() == 0
; 255  : 			|| this->_Ptr == 0
; 256  : 			|| (this->_Ptr = _Mylist::_Prevnode(this->_Ptr))
; 257  : 				== ((_Mylist *)this->_Getcont())->_Myhead)
; 258  : 			{	// report error
; 259  : 			_DEBUG_ERROR("list iterator not decrementable");
; 260  : 			_SCL_SECURE_OUT_OF_RANGE;
; 261  : 			}
; 262  : 
; 263  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 264  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 265  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 266  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 267  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 268  : 
; 269  :  #else /* _ITERATOR_DEBUG_LEVEL */
; 270  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 271  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 272  : 
; 273  : 		return (*this);
; 274  : 		}
; 275  : 
; 276  : 	_Myiter operator--(int)
; 277  : 		{	// postdecrement
; 278  : 		_Myiter _Tmp = *this;
; 279  : 		--*this;
; 280  : 		return (_Tmp);
; 281  : 		}
; 282  : 
; 283  : 	bool operator==(const _Myiter& _Right) const
; 284  : 		{	// test for iterator equality
; 285  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 286  : 		if (this->_Getcont() == 0
; 287  : 			|| this->_Getcont() != _Right._Getcont())
; 288  : 			{	// report error
; 289  : 			_DEBUG_ERROR("list iterators incompatible");
; 290  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 291  : 			}
; 292  : 
; 293  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 294  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 295  : 			&& this->_Getcont() == _Right._Getcont());
; 296  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 297  : 
; 298  : 		return (this->_Ptr == _Right._Ptr);
; 299  : 		}
; 300  : 
; 301  : 	bool operator!=(const _Myiter& _Right) const
; 302  : 		{	// test for iterator inequality
; 303  : 		return (!(*this == _Right));
; 304  : 		}
; 305  : 	};
; 306  : 
; 307  : template<class _Mylist> inline
; 308  : 	typename _List_const_iterator<_Mylist>::_Unchecked_type
; 309  : 		_Unchecked(_List_const_iterator<_Mylist> _Iter)
; 310  : 	{	// convert to unchecked
; 311  : 	return (_Iter._Unchecked());
; 312  : 	}
; 313  : 
; 314  : template<class _Mylist> inline
; 315  : 	_List_const_iterator<_Mylist>&
; 316  : 		_Rechecked(_List_const_iterator<_Mylist>& _Iter,
; 317  : 			typename _List_const_iterator<_Mylist>
; 318  : 				::_Unchecked_type _Right)
; 319  : 	{	// convert to checked
; 320  : 	return (_Iter._Rechecked(_Right));
; 321  : 	}
; 322  : 
; 323  : 	// TEMPLATE CLASS _List_iterator
; 324  : template<class _Mylist>
; 325  : 	class _List_iterator
; 326  : 		: public _List_const_iterator<_Mylist>
; 327  : 	{	// iterator for mutable list
; 328  : public:
; 329  : 	typedef _List_iterator<_Mylist> _Myiter;
; 330  : 	typedef _List_const_iterator<_Mylist> _Mybase;
; 331  : 	typedef bidirectional_iterator_tag iterator_category;
; 332  : 
; 333  : 	typedef typename _Mylist::_Nodeptr _Nodeptr;
; 334  : 	typedef typename _Mylist::value_type value_type;
; 335  : 	typedef typename _Mylist::difference_type difference_type;
; 336  : 	typedef typename _Mylist::pointer pointer;
; 337  : 	typedef typename _Mylist::reference reference;
; 338  : 
; 339  : 	_List_iterator()
; 340  : 		{	// construct with null node
; 341  : 		}
; 342  : 
; 343  : 	_List_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
; 344  : 		: _Mybase(_Pnode, _Plist)
; 345  : 		{	// construct with node pointer _Pnode
; 346  : 		}
; 347  : 
; 348  : 	typedef _List_unchecked_iterator<_Mylist> _Unchecked_type;
; 349  : 
; 350  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 351  : 		{	// reset from unchecked iterator
; 352  : 		this->_Ptr = _Right._Ptr;
; 353  : 		return (*this);
; 354  : 		}
; 355  : 
; 356  : 	_Unchecked_type _Unchecked() const
; 357  : 		{	// make an unchecked iterator
; 358  : 		return (_Unchecked_type(this->_Ptr, (_Mylist *)this->_Getcont()));
; 359  : 		}
; 360  : 
; 361  : 	reference operator*() const
; 362  : 		{	// return designated value
; 363  : 		return ((reference)**(_Mybase *)this);
; 364  : 		}
; 365  : 
; 366  : 	pointer operator->() const
; 367  : 		{	// return pointer to class object
; 368  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 369  : 		}
; 370  : 
; 371  : 	_Myiter& operator++()
; 372  : 		{	// preincrement
; 373  : 		++(*(_Mybase *)this);
; 374  : 		return (*this);
; 375  : 		}
; 376  : 
; 377  : 	_Myiter operator++(int)
; 378  : 		{	// postincrement
; 379  : 		_Myiter _Tmp = *this;
; 380  : 		++*this;
; 381  : 		return (_Tmp);
; 382  : 		}
; 383  : 
; 384  : 	_Myiter& operator--()
; 385  : 		{	// predecrement
; 386  : 		--(*(_Mybase *)this);
; 387  : 		return (*this);
; 388  : 		}
; 389  : 
; 390  : 	_Myiter operator--(int)
; 391  : 		{	// postdecrement
; 392  : 		_Myiter _Tmp = *this;
; 393  : 		--*this;
; 394  : 		return (_Tmp);
; 395  : 		}
; 396  : 	};
; 397  : 
; 398  : template<class _Mylist> inline
; 399  : 	typename _List_iterator<_Mylist>::_Unchecked_type
; 400  : 		_Unchecked(_List_iterator<_Mylist> _Iter)
; 401  : 	{	// convert to unchecked
; 402  : 	return (_Iter._Unchecked());
; 403  : 	}
; 404  : 
; 405  : template<class _Mylist> inline
; 406  : 	_List_iterator<_Mylist>&
; 407  : 		_Rechecked(_List_iterator<_Mylist>& _Iter,
; 408  : 			typename _List_iterator<_Mylist>
; 409  : 				::_Unchecked_type _Right)
; 410  : 	{	// convert to checked
; 411  : 	return (_Iter._Rechecked(_Right));
; 412  : 	}
; 413  : 
; 414  : 		// list TYPE WRAPPERS
; 415  : template<class _Value_type,
; 416  : 	class _Size_type,
; 417  : 	class _Difference_type,
; 418  : 	class _Pointer,
; 419  : 	class _Const_pointer,
; 420  : 	class _Reference,
; 421  : 	class _Const_reference,
; 422  : 	class _Nodeptr_type>
; 423  : 	struct _List_iter_types
; 424  : 	{	// wraps types needed by iterators
; 425  : 	typedef _Value_type value_type;
; 426  : 	typedef _Size_type size_type;
; 427  : 	typedef _Difference_type difference_type;
; 428  : 	typedef _Pointer pointer;
; 429  : 	typedef _Const_pointer const_pointer;
; 430  : 	typedef _Reference reference;
; 431  : 	typedef _Const_reference const_reference;
; 432  : 	typedef _Nodeptr_type _Nodeptr;
; 433  : 	};
; 434  : 
; 435  : template<class _Value_type,
; 436  : 	class _Voidptr>
; 437  : 	struct _List_node
; 438  : 		{	// list node
; 439  : 		_Voidptr _Next;	// successor node, or first element if head
; 440  : 		_Voidptr _Prev;	// predecessor node, or last element if head
; 441  : 		_Value_type _Myval;	// the stored value, unused if head
; 442  : 
; 443  : 	private:
; 444  : 		_List_node& operator=(const _List_node&);
; 445  : 		};
; 446  : 
; 447  : template<class _Value_type>
; 448  : 	struct _List_node<_Value_type, void *>
; 449  : 		{	// list node
; 450  : 		typedef _List_node<_Value_type, void *> *_Nodeptr;
; 451  : 		_Nodeptr _Next;	// successor node, or first element if head
; 452  : 		_Nodeptr _Prev;	// predecessor node, or last element if head
; 453  : 		_Value_type _Myval;	// the stored value, unused if head
; 454  : 
; 455  : 	private:
; 456  : 		_List_node& operator=(const _List_node&);
; 457  : 		};
; 458  : 
; 459  : template<class _Ty>
; 460  : 	struct _List_simple_types
; 461  : 		: public _Simple_types<_Ty>
; 462  : 	{	// wraps types needed by iterators
; 463  : 	typedef _List_node<_Ty, void *> _Node;
; 464  : 	typedef _Node *_Nodeptr;
; 465  : 	};
; 466  : 
; 467  : template<class _Ty,
; 468  : 	class _Alloc0>
; 469  : 	struct _List_base_types
; 470  : 	{	// types needed for a container base
; 471  : 	typedef _Alloc0 _Alloc;
; 472  : 	typedef _List_base_types<_Ty, _Alloc> _Myt;
; 473  : 
; 474  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 475  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 476  : 
; 477  : 
; 478  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 479  : 		_Voidptr;
; 480  : 	typedef _List_node<typename _Alty::value_type,
; 481  : 		_Voidptr> _Node;
; 482  : 
; 483  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 484  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 485  : 	typedef _Nodeptr& _Nodepref;
; 486  : 
; 487  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 488  : 		_List_simple_types<typename _Alty::value_type>,
; 489  : 		_List_iter_types<typename _Alty::value_type,
; 490  : 			typename _Alty::size_type,
; 491  : 			typename _Alty::difference_type,
; 492  : 			typename _Alty::pointer,
; 493  : 			typename _Alty::const_pointer,
; 494  : 			typename _Alty::reference,
; 495  : 			typename _Alty::const_reference,
; 496  : 			_Nodeptr> >::type
; 497  : 		_Val_types;
; 498  : 	};
; 499  : 
; 500  : 		// TEMPLATE CLASS _List_val
; 501  : template<class _Val_types>
; 502  : 	class _List_val
; 503  : 		: public _Container_base
; 504  : 	{	// base class for list to hold data
; 505  : public:
; 506  : 	typedef _List_val<_Val_types> _Myt;
; 507  : 
; 508  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 509  : 	typedef _Nodeptr& _Nodepref;
; 510  : 
; 511  : 	typedef typename _Val_types::value_type value_type;
; 512  : 	typedef typename _Val_types::size_type size_type;
; 513  : 	typedef typename _Val_types::difference_type difference_type;
; 514  : 	typedef typename _Val_types::pointer pointer;
; 515  : 	typedef typename _Val_types::const_pointer const_pointer;
; 516  : 	typedef typename _Val_types::reference reference;
; 517  : 	typedef typename _Val_types::const_reference const_reference;
; 518  : 
; 519  : 	typedef _List_const_iterator<_Myt> const_iterator;
; 520  : 	typedef _List_iterator<_Myt> iterator;
; 521  : 
; 522  : 	typedef _List_unchecked_const_iterator<_Myt> _Unchecked_const_iterator;
; 523  : 	typedef _List_unchecked_iterator<_Myt> _Unchecked_iterator;
; 524  : 
; 525  : 	_List_val()
; 526  : 		{	// initialize data
; 527  : 		this->_Myhead = 0;
; 528  : 		this->_Mysize = 0;
; 529  : 		}
; 530  : 
; 531  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 532  : 		{	// return reference to successor pointer in node
; 533  : 		return ((_Nodepref)_Pnode->_Next);
; 534  : 		}
; 535  : 
; 536  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 537  : 		{	// return reference to predecessor pointer in node
; 538  : 		return ((_Nodepref)_Pnode->_Prev);
; 539  : 		}
; 540  : 
; 541  : 	static reference _Myval(_Nodeptr _Pnode)
; 542  : 		{	// return reference to value in node
; 543  : 		return ((reference)_Pnode->_Myval);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 50   : 		return (_Mylist::_Myval(_Ptr));
; 51   : 		}

  00005	c3		 ret	 0
??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@U_Iterator_base0@2@@std@@QBEABUSChannel@CServerStateChecker@@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >,std::_Iterator_base0>::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\list
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@PBV?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@PBV?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@1@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 44   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 45   : 		this->_Adopt(_Plist);
; 46   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@PBV?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@1@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCServerStateChecker@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCServerStateChecker@@UAEPAXI@Z PROC			; CServerStateChecker::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CServerStateChecker@@UAE@XZ ; CServerStateChecker::~CServerStateChecker
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCServerStateChecker@@UAEPAXI@Z ENDP			; CServerStateChecker::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\list
;	COMDAT ?_Incsize@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Incsize@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXI@Z PROC ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::_Incsize, COMDAT
; _this$ = ecx

; 1905 : 		{	// alter element count, with checking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1906 : 		if (max_size() - this->_Mysize - 1 < _Count)

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	b8 cb cc cc 0c	 mov	 eax, 214748363		; 0ccccccbH
  0000b	56		 push	 esi
  0000c	8b 75 08	 mov	 esi, DWORD PTR __Count$[ebp]
  0000f	2b c2		 sub	 eax, edx
  00011	3b c6		 cmp	 eax, esi
  00013	72 0b		 jb	 SHORT $LN15@Incsize

; 1908 : 		this->_Mysize += _Count;

  00015	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]
  00018	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0001b	5e		 pop	 esi

; 1909 : 		}

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
$LN15@Incsize:

; 1907 : 			_Xlength_error("list<T> too long");

  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
  00025	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN17@Incsize:
$LN14@Incsize:
  0002a	cc		 int	 3
?_Incsize@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXI@Z ENDP ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::_Incsize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\list
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\list
;	COMDAT ?_Tidy@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Tidy@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXXZ PROC ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::_Tidy, COMDAT
; _this$ = ecx

; 1882 : 		{	// free all storage

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 533  : 		return ((_Nodepref)_Pnode->_Next);

  00003	8b 17		 mov	 edx, DWORD PTR [edi]

; 539  : 		}
; 540  : 
; 541  : 	static reference _Myval(_Nodeptr _Pnode)
; 542  : 		{	// return reference to value in node
; 543  : 		return ((reference)_Pnode->_Myval);
; 544  : 		}
; 545  : 
; 546  : 	_Nodeptr _Myhead;	// pointer to head node
; 547  : 	size_type _Mysize;	// number of elements
; 548  : 	};
; 549  : 
; 550  : 		// TEMPLATE CLASS _List_alloc
; 551  : template<bool _Al_has_storage,
; 552  : 	class _Alloc_types>
; 553  : 	class _List_alloc
; 554  : 		: public _List_val<typename _Alloc_types::_Val_types>
; 555  : 	{	// base class for list to hold allocator with storage
; 556  : public:
; 557  : 	typename _Alloc_types::_Alnod_type _Alnod;	// allocator object
; 558  : 
; 559  : 	typedef _List_alloc<_Al_has_storage, _Alloc_types> _Myt;
; 560  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 561  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 562  : 	typedef typename _Alloc_types::_Node _Node;
; 563  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 564  : 
; 565  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 566  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 567  : 		: _Alnod(_Al)
; 568  : 		{	// construct head node, allocator from _Al
; 569  : 		this->_Myhead = _Buyheadnode();
; 570  : 		}
; 571  : 
; 572  : 	~_List_alloc() _NOEXCEPT
; 573  : 		{	// destroy head node
; 574  : 		_Freeheadnode(this->_Myhead);
; 575  : 		}
; 576  : 
; 577  : 	void _Change_alloc(const _Alty& _Al)
; 578  : 		{	// replace old allocator
; 579  : 		this->_Alnod = _Al;
; 580  : 		}
; 581  : 
; 582  : 	void _Swap_alloc(_Myt& _Right)
; 583  : 		{	// swap allocators
; 584  : 		_Swap_adl(this->_Alnod, _Right._Alnod);
; 585  : 		}
; 586  : 
; 587  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 588  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 589  : 		: _Alnod(_Al)
; 590  : 		{	// construct head node, allocator from _Al
; 591  : 		this->_Myhead = _Buyheadnode();
; 592  : 		_TRY_BEGIN
; 593  : 		_Alloc_proxy();
; 594  : 		_CATCH_ALL
; 595  : 		_Freeheadnode(this->_Myhead);
; 596  : 		_RERAISE;
; 597  : 		_CATCH_END
; 598  : 		}
; 599  : 
; 600  : 	~_List_alloc() _NOEXCEPT
; 601  : 		{	// destroy proxy
; 602  : 		_Freeheadnode(this->_Myhead);
; 603  : 		_Free_proxy();
; 604  : 		}
; 605  : 
; 606  : 	void _Change_alloc(const _Alty& _Al)
; 607  : 		{	// replace old allocator
; 608  : 		_Free_proxy();
; 609  : 		this->_Alnod = _Al;
; 610  : 		_Alloc_proxy();
; 611  : 		}
; 612  : 
; 613  : 	void _Swap_alloc(_Myt& _Right)
; 614  : 		{	// swap allocators
; 615  : 		_Swap_adl(this->_Alnod, _Right._Alnod);
; 616  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 617  : 		}
; 618  : 
; 619  : 	void _Alloc_proxy()
; 620  : 		{	// construct proxy from _Alnod
; 621  : 		typename _Alty::template rebind<_Container_proxy>::other
; 622  : 			_Alproxy(this->_Alnod);
; 623  : 		this->_Myproxy = _Alproxy.allocate(1);
; 624  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 625  : 		this->_Myproxy->_Mycont = this;
; 626  : 		}
; 627  : 
; 628  : 	void _Free_proxy()
; 629  : 		{	// destroy proxy
; 630  : 		typename _Alty::template rebind<_Container_proxy>::other
; 631  : 			_Alproxy(this->_Alnod);
; 632  : 		this->_Orphan_all();
; 633  : 		_Alproxy.destroy(this->_Myproxy);
; 634  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 635  : 		this->_Myproxy = 0;
; 636  : 		}
; 637  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 638  : 
; 639  : 	_Nodeptr _Buyheadnode()
; 640  : 		{	// get head node using current allocator
; 641  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));
; 642  : 		}
; 643  : 
; 644  : 	void _Freeheadnode(_Nodeptr _Pnode)
; 645  : 		{	// free head node using current allocator
; 646  : 		this->_Alnod.destroy(
; 647  : 			_STD addressof(this->_Nextnode(_Pnode)));
; 648  : 		this->_Alnod.destroy(
; 649  : 			_STD addressof(this->_Prevnode(_Pnode)));
; 650  : 		this->_Alnod.deallocate(_Pnode, 1);
; 651  : 		}
; 652  : 
; 653  : 	_Nodeptr _Buynode0(_Nodeptr _Next,
; 654  : 		_Nodeptr _Prev)
; 655  : 		{	// allocate a node and set links
; 656  : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);
; 657  : 
; 658  : 		if (_Next == _Nodeptr())
; 659  : 			{	// point at self
; 660  : 			_Next = _Pnode;
; 661  : 			_Prev = _Pnode;
; 662  : 			}
; 663  : 		_TRY_BEGIN
; 664  : 		this->_Alnod.construct(
; 665  : 			_STD addressof(this->_Nextnode(_Pnode)), _Next);
; 666  : 		this->_Alnod.construct(
; 667  : 			_STD addressof(this->_Prevnode(_Pnode)), _Prev);
; 668  : 		_CATCH_ALL
; 669  : 		this->_Alnod.deallocate(_Pnode, 1);
; 670  : 		_RERAISE;
; 671  : 		_CATCH_END
; 672  : 
; 673  : 		return (_Pnode);
; 674  : 		}
; 675  : 
; 676  : 	_Alty& _Getal()
; 677  : 		{	// get reference to allocator
; 678  : 		return (this->_Alnod);
; 679  : 		}
; 680  : 
; 681  : 	const _Alty& _Getal() const
; 682  : 		{	// get reference to allocator
; 683  : 		return (this->_Alnod);
; 684  : 		}
; 685  : 	};
; 686  : 
; 687  : 		// TEMPLATE CLASS _List_alloc
; 688  : template<class _Alloc_types>
; 689  : 	class _List_alloc<false, _Alloc_types>
; 690  : 		: public _List_val<typename _Alloc_types::_Val_types>
; 691  : 	{	// base class for list to hold allocator with no storage
; 692  : public:
; 693  : 	typedef _List_alloc<false, _Alloc_types> _Myt;
; 694  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 695  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 696  : 	typedef typename _Alloc_types::_Node _Node;
; 697  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 698  : 
; 699  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 700  : 	_List_alloc(const _Alloc& = _Alloc())
; 701  : 		{	// construct head node, allocator from _Al
; 702  : 		this->_Myhead = _Buyheadnode();
; 703  : 		}
; 704  : 
; 705  : 	~_List_alloc() _NOEXCEPT
; 706  : 		{	// destroy head node
; 707  : 		_Freeheadnode(this->_Myhead);
; 708  : 		}
; 709  : 
; 710  : 	void _Change_alloc(const _Alty&)
; 711  : 		{	// replace old allocator
; 712  : 		}
; 713  : 
; 714  : 	void _Swap_alloc(_Myt&)
; 715  : 		{	// swap allocators
; 716  : 		}
; 717  : 
; 718  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 719  : 	_List_alloc(const _Alloc& = _Alloc())
; 720  : 		{	// construct allocators from _Al
; 721  : 		this->_Myhead = _Buyheadnode();
; 722  : 		_TRY_BEGIN
; 723  : 		_Alloc_proxy();
; 724  : 		_CATCH_ALL
; 725  : 		_Freeheadnode(this->_Myhead);
; 726  : 		_RERAISE;
; 727  : 		_CATCH_END
; 728  : 		}
; 729  : 
; 730  : 	~_List_alloc() _NOEXCEPT
; 731  : 		{	// destroy proxy
; 732  : 		_Freeheadnode(this->_Myhead);
; 733  : 		_Free_proxy();
; 734  : 		}
; 735  : 
; 736  : 	void _Change_alloc(const _Alty&)
; 737  : 		{	// replace old allocator
; 738  : 		}
; 739  : 
; 740  : 	void _Swap_alloc(_Myt& _Right)
; 741  : 		{	// swap allocators
; 742  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 743  : 		}
; 744  : 
; 745  : 	void _Alloc_proxy()
; 746  : 		{	// construct proxy from _Alnod
; 747  : 		typename _Alty::template rebind<_Container_proxy>::other
; 748  : 			_Alproxy;
; 749  : 		this->_Myproxy = _Alproxy.allocate(1);
; 750  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 751  : 		this->_Myproxy->_Mycont = this;
; 752  : 		}
; 753  : 
; 754  : 	void _Free_proxy()
; 755  : 		{	// destroy proxy
; 756  : 		typename _Alty::template rebind<_Container_proxy>::other
; 757  : 			_Alproxy;
; 758  : 		this->_Orphan_all();
; 759  : 		_Alproxy.destroy(this->_Myproxy);
; 760  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 761  : 		this->_Myproxy = 0;
; 762  : 		}
; 763  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 764  : 
; 765  : 	_Nodeptr _Buyheadnode()
; 766  : 		{	// get head node using current allocator
; 767  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));
; 768  : 		}
; 769  : 
; 770  : 	void _Freeheadnode(_Nodeptr _Pnode)
; 771  : 		{	// free head node using current allocator
; 772  : 		this->_Getal().destroy(
; 773  : 			_STD addressof(this->_Nextnode(_Pnode)));
; 774  : 		this->_Getal().destroy(
; 775  : 			_STD addressof(this->_Prevnode(_Pnode)));
; 776  : 		this->_Getal().deallocate(_Pnode, 1);
; 777  : 		}
; 778  : 
; 779  : 	_Nodeptr _Buynode0(_Nodeptr _Next,
; 780  : 		_Nodeptr _Prev)
; 781  : 		{	// allocate a node and set links
; 782  : 		_Nodeptr _Pnode = this->_Getal().allocate(1);
; 783  : 
; 784  : 		if (_Next == _Nodeptr())
; 785  : 			{	// point at self
; 786  : 			_Next = _Pnode;
; 787  : 			_Prev = _Pnode;
; 788  : 			}
; 789  : 		_TRY_BEGIN
; 790  : 		this->_Getal().construct(
; 791  : 			_STD addressof(this->_Nextnode(_Pnode)), _Next);
; 792  : 		this->_Getal().construct(
; 793  : 			_STD addressof(this->_Prevnode(_Pnode)), _Prev);
; 794  : 		_CATCH_ALL
; 795  : 		this->_Getal().deallocate(_Pnode, 1);
; 796  : 		_RERAISE;
; 797  : 		_CATCH_END
; 798  : 
; 799  : 		return (_Pnode);
; 800  : 		}
; 801  : 
; 802  : 	_Alty _Getal() const
; 803  : 		{	// get reference to allocator
; 804  : 		return (_Alty());
; 805  : 		}
; 806  : 	};
; 807  : 
; 808  : 		// TEMPLATE CLASS _List_buy
; 809  : template<class _Ty,
; 810  : 	class _Alloc>
; 811  : 	class _List_buy
; 812  : 		: public _List_alloc<!is_empty<_Alloc>::value,
; 813  : 			_List_base_types<_Ty, _Alloc> >
; 814  : 	{	// base class for list to hold buynode/freenode functions
; 815  : public:
; 816  : 	typedef _List_alloc<!is_empty<_Alloc>::value,
; 817  : 		_List_base_types<_Ty, _Alloc> > _Mybase;
; 818  : 	typedef typename _Mybase::_Alty _Alty;
; 819  : 	typedef typename _Mybase::_Nodeptr _Nodeptr;
; 820  : 
; 821  : 	_List_buy(const _Alloc& _Al = _Alloc())
; 822  : 		: _Mybase(_Al)
; 823  : 		{	// construct from allocator
; 824  : 		}
; 825  : 
; 826  : 	template<class... _Valty>
; 827  : 		_Nodeptr _Buynode(_Nodeptr _Next, _Nodeptr _Prev,
; 828  : 			_Valty&&... _Val)
; 829  : 		{	// allocate a node and set links and value
; 830  : 		_Nodeptr _Pnode = this->_Buynode0(_Next, _Prev);
; 831  : 
; 832  : 		_TRY_BEGIN
; 833  : 		this->_Getal().construct(
; 834  : 			_STD addressof(this->_Myval(_Pnode)),
; 835  : 				_STD forward<_Valty>(_Val)...);
; 836  : 		_CATCH_ALL
; 837  : 		this->_Getal().deallocate(_Pnode, 1);
; 838  : 		_RERAISE;
; 839  : 		_CATCH_END
; 840  : 
; 841  : 		return (_Pnode);
; 842  : 		}
; 843  : 
; 844  : 
; 845  : 	void _Freenode(_Nodeptr _Pnode)
; 846  : 		{	// give node back
; 847  : 		this->_Getal().destroy(
; 848  : 			_STD addressof(this->_Nextnode(_Pnode)));
; 849  : 		this->_Getal().destroy(
; 850  : 			_STD addressof(this->_Prevnode(_Pnode)));
; 851  : 		this->_Getal().destroy(
; 852  : 			_STD addressof(this->_Myval(_Pnode)));
; 853  : 		this->_Getal().deallocate(_Pnode, 1);
; 854  : 		}
; 855  : 	};
; 856  : 
; 857  : 		// TEMPLATE CLASS list
; 858  : template<class _Ty,
; 859  : 	class _Alloc = allocator<_Ty> >
; 860  : 	class list
; 861  : 		: public _List_buy<_Ty, _Alloc>
; 862  : 	{	// bidirectional linked list
; 863  : public:
; 864  : 	typedef list<_Ty, _Alloc> _Myt;
; 865  : 	typedef _List_buy<_Ty, _Alloc> _Mybase;
; 866  : 	typedef typename _Mybase::_Node _Node;
; 867  : 	typedef typename _Mybase::_Nodeptr _Nodeptr;
; 868  : 	typedef typename _Mybase::_Alty _Alty;
; 869  : 
; 870  : 	typedef _Alloc allocator_type;
; 871  : 	typedef typename _Mybase::size_type size_type;
; 872  : 	typedef typename _Mybase::difference_type difference_type;
; 873  : 	typedef typename _Mybase::pointer pointer;
; 874  : 	typedef typename _Mybase::const_pointer const_pointer;
; 875  : 	typedef typename _Mybase::reference reference;
; 876  : 	typedef typename _Mybase::const_reference const_reference;
; 877  : 	typedef typename _Mybase::value_type value_type;
; 878  : 
; 879  : 	typedef typename _Mybase::const_iterator const_iterator;
; 880  : 	typedef typename _Mybase::iterator iterator;
; 881  : 	typedef typename _Mybase::_Unchecked_const_iterator
; 882  : 		_Unchecked_const_iterator;
; 883  : 	typedef typename _Mybase::_Unchecked_iterator
; 884  : 		_Unchecked_iterator;
; 885  : 
; 886  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 887  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 888  : 
; 889  : 	list()
; 890  : 		: _Mybase()
; 891  : 		{	// construct empty list
; 892  : 		}
; 893  : 
; 894  : 	explicit list(const _Alloc& _Al)
; 895  : 		: _Mybase(_Al)
; 896  : 		{	// construct empty list, allocator
; 897  : 		}
; 898  : 
; 899  : 	explicit list(size_type _Count)
; 900  : 		: _Mybase()
; 901  : 		{	// construct list from _Count * _Ty()
; 902  : 		resize(_Count);
; 903  : 		}
; 904  : 
; 905  : 	list(size_type _Count, const _Ty& _Val)
; 906  : 		: _Mybase()
; 907  : 		{	// construct list from _Count * _Val
; 908  : 		_Construct_n(_Count, _Val);
; 909  : 		}
; 910  : 
; 911  : 	list(size_type _Count, const _Ty& _Val, const _Alloc& _Al)
; 912  : 		: _Mybase(_Al)
; 913  : 		{	// construct list from _Count * _Val, allocator
; 914  : 		_Construct_n(_Count, _Val);
; 915  : 		}
; 916  : 
; 917  : 	list(const _Myt& _Right)
; 918  : 
; 919  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 920  : 
; 921  : 
; 922  : 		{	// construct list by copying _Right
; 923  : 		_TRY_BEGIN
; 924  : 		insert(begin(), _Right.begin(), _Right.end());
; 925  : 		_CATCH_ALL
; 926  : 		_Tidy();
; 927  : 		_RERAISE;
; 928  : 		_CATCH_END
; 929  : 		}
; 930  : 
; 931  : 	list(const _Myt& _Right, const _Alloc& _Al)
; 932  : 		: _Mybase(_Al)
; 933  : 		{	// construct list by copying _Right, allocator
; 934  : 		_TRY_BEGIN
; 935  : 		insert(begin(), _Right.begin(), _Right.end());
; 936  : 		_CATCH_ALL
; 937  : 		_Tidy();
; 938  : 		_RERAISE;
; 939  : 		_CATCH_END
; 940  : 		}
; 941  : 
; 942  : 	template<class _Iter,
; 943  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 944  : 			void>::type>
; 945  : 		list(_Iter _First, _Iter _Last)
; 946  : 		: _Mybase()
; 947  : 		{	// construct list from [_First, _Last)
; 948  : 		_Construct(_First, _Last);
; 949  : 		}
; 950  : 
; 951  : 	template<class _Iter,
; 952  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 953  : 			void>::type>
; 954  : 		list(_Iter _First, _Iter _Last, const _Alloc& _Al)
; 955  : 		: _Mybase(_Al)
; 956  : 		{	// construct list, allocator from [_First, _Last)
; 957  : 		_Construct(_First, _Last);
; 958  : 		}
; 959  : 
; 960  : 	template<class _Iter>
; 961  : 		void _Construct(_Iter _First, _Iter _Last)
; 962  : 		{	// construct list from [_First, _Last), input iterators
; 963  : 		_TRY_BEGIN
; 964  : 		insert(begin(), _First, _Last);
; 965  : 		_CATCH_ALL
; 966  : 		_Tidy();
; 967  : 		_RERAISE;
; 968  : 		_CATCH_END
; 969  : 		}
; 970  : 
; 971  : 	void _Construct_n(size_type _Count,
; 972  : 		const _Ty& _Val)
; 973  : 		{	// construct from _Count * _Val
; 974  : 		_TRY_BEGIN
; 975  : 		_Insert_n(_Unchecked_begin(), _Count, _Val);
; 976  : 		_CATCH_ALL
; 977  : 		_Tidy();
; 978  : 		_RERAISE;
; 979  : 		_CATCH_END
; 980  : 		}
; 981  : 
; 982  : 	list(_Myt&& _Right)
; 983  : 		: _Mybase(_Right._Getal())
; 984  : 		{	// construct list by moving _Right
; 985  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 986  : 		}
; 987  : 
; 988  : 	list(_Myt&& _Right, const _Alloc& _Al)
; 989  : 		: _Mybase(_Al)
; 990  : 		{	// construct list by moving _Right, allocator
; 991  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 992  : 		}
; 993  : 
; 994  : 	_Myt& operator=(_Myt&& _Right)
; 995  : 		{	// assign by moving _Right
; 996  : 		if (this != &_Right)
; 997  : 			{	// different, assign it
; 998  : 			clear();
; 999  : 
; 1000 : 			if (_Alty::propagate_on_container_move_assignment::value
; 1001 : 				&& this->_Getal() != _Right._Getal())
; 1002 : 				this->_Change_alloc(_Right._Getal());
; 1003 : 
; 1004 : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 1005 : 			}
; 1006 : 		return (*this);
; 1007 : 		}
; 1008 : 
; 1009 : 	void _Assign_rv(_Myt&& _Right)
; 1010 : 		{	// swap with empty *this, same allocator
; 1011 : 		this->_Swap_all(_Right);
; 1012 : 		_Swap_adl(this->_Myhead, _Right._Myhead);
; 1013 : 		_STD swap(this->_Mysize, _Right._Mysize);
; 1014 : 		}
; 1015 : 
; 1016 : 	void push_front(_Ty&& _Val)
; 1017 : 		{	// insert element at beginning
; 1018 : 		_Insert(_Unchecked_begin(), _STD forward<_Ty>(_Val));
; 1019 : 		}
; 1020 : 
; 1021 : 	void push_back(_Ty&& _Val)
; 1022 : 		{	// insert element at end
; 1023 : 		_Insert(_Unchecked_end(), _STD forward<_Ty>(_Val));
; 1024 : 		}
; 1025 : 
; 1026 : 	iterator insert(const_iterator _Where, _Ty&& _Val)
; 1027 : 		{	// insert _Val at _Where
; 1028 : 		return (emplace(_Where, _STD forward<_Ty>(_Val)));
; 1029 : 		}
; 1030 : 
; 1031 : 	template<class... _Valty>
; 1032 : 		void emplace_front(_Valty&&... _Val)
; 1033 : 		{	// insert element at beginning
; 1034 : 		_Insert(_Unchecked_begin(), _STD forward<_Valty>(_Val)...);
; 1035 : 		}
; 1036 : 
; 1037 : 	template<class... _Valty>
; 1038 : 		void emplace_back(_Valty&&... _Val)
; 1039 : 		{	// insert element at end
; 1040 : 		_Insert(_Unchecked_end(), _STD forward<_Valty>(_Val)...);
; 1041 : 		}
; 1042 : 
; 1043 : 	template<class... _Valty>
; 1044 : 		iterator emplace(const_iterator _Where, _Valty&&... _Val)
; 1045 : 		{	// insert element at _Where
; 1046 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1047 : 		if (_Where._Getcont() != this)
; 1048 : 			_DEBUG_ERROR("list emplace iterator outside range");
; 1049 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1050 : 
; 1051 : 		_Insert(_Where._Unchecked(), _STD forward<_Valty>(_Val)...);
; 1052 : 		return (_Make_iter(--_Where));
; 1053 : 		}
; 1054 : 
; 1055 : 	template<class... _Valty>
; 1056 : 		void _Insert(_Unchecked_const_iterator _Where,
; 1057 : 		_Valty&&... _Val)
; 1058 : 		{	// insert element at _Where
; 1059 : 		_Nodeptr _Pnode = _Where._Mynode();
; 1060 : 		_Nodeptr _Newnode =
; 1061 : 			this->_Buynode(_Pnode, this->_Prevnode(_Pnode),
; 1062 : 				_STD forward<_Valty>(_Val)...);
; 1063 : 		_Incsize(1);
; 1064 : 		this->_Prevnode(_Pnode) = _Newnode;
; 1065 : 		this->_Nextnode(this->_Prevnode(_Newnode)) = _Newnode;
; 1066 : 		}
; 1067 : 
; 1068 : 
; 1069 : 	list(_XSTD initializer_list<_Ty> _Ilist,
; 1070 : 		const _Alloc& _Al = allocator_type())
; 1071 : 		: _Mybase(_Al)
; 1072 : 		{	// construct from initializer_list
; 1073 : 		insert(begin(), _Ilist.begin(), _Ilist.end());
; 1074 : 		}
; 1075 : 
; 1076 : 	_Myt& operator=(_XSTD initializer_list<_Ty> _Ilist)
; 1077 : 		{	// assign initializer_list
; 1078 : 		assign(_Ilist.begin(), _Ilist.end());
; 1079 : 		return (*this);
; 1080 : 		}
; 1081 : 
; 1082 : 	void assign(_XSTD initializer_list<_Ty> _Ilist)
; 1083 : 		{	// assign initializer_list
; 1084 : 		assign(_Ilist.begin(), _Ilist.end());
; 1085 : 		}
; 1086 : 
; 1087 : 	iterator insert(const_iterator _Where,
; 1088 : 		_XSTD initializer_list<_Ty> _Ilist)
; 1089 : 		{	// insert initializer_list
; 1090 : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 1091 : 		}
; 1092 : 
; 1093 : 	~list() _NOEXCEPT
; 1094 : 		{	// destroy the object
; 1095 : 		_Tidy();
; 1096 : 		}
; 1097 : 
; 1098 : 	_Myt& operator=(const _Myt& _Right)
; 1099 : 		{	// assign _Right
; 1100 : 		if (this != &_Right)
; 1101 : 			{	// different, assign it
; 1102 : 			if (this->_Getal() != _Right._Getal()
; 1103 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1104 : 				{	// change allocator before copying
; 1105 : 				clear();
; 1106 : 				this->_Change_alloc(_Right._Getal());
; 1107 : 				}
; 1108 : 
; 1109 : 			assign(_Right.begin(), _Right.end());
; 1110 : 			}
; 1111 : 		return (*this);
; 1112 : 		}
; 1113 : 
; 1114 : 	iterator begin() _NOEXCEPT
; 1115 : 		{	// return iterator for beginning of mutable sequence
; 1116 : 		return (iterator(this->_Nextnode(this->_Myhead), this));
; 1117 : 		}
; 1118 : 
; 1119 : 	const_iterator begin() const _NOEXCEPT
; 1120 : 		{	// return iterator for beginning of nonmutable sequence
; 1121 : 		return (const_iterator(this->_Nextnode(this->_Myhead), this));
; 1122 : 		}
; 1123 : 
; 1124 : 	iterator end() _NOEXCEPT
; 1125 : 		{	// return iterator for end of mutable sequence
; 1126 : 		return (iterator(this->_Myhead, this));
; 1127 : 		}
; 1128 : 
; 1129 : 	const_iterator end() const _NOEXCEPT
; 1130 : 		{	// return iterator for end of nonmutable sequence
; 1131 : 		return (const_iterator(this->_Myhead, this));
; 1132 : 		}
; 1133 : 
; 1134 : 	_Unchecked_iterator _Unchecked_begin()
; 1135 : 		{	// return iterator for beginning of mutable sequence
; 1136 : 		return (_Unchecked_iterator(this->_Nextnode(this->_Myhead),
; 1137 : 			this));
; 1138 : 		}
; 1139 : 
; 1140 : 	_Unchecked_const_iterator _Unchecked_begin() const
; 1141 : 		{	// return iterator for beginning of nonmutable sequence
; 1142 : 		return (_Unchecked_const_iterator(this->_Nextnode(this->_Myhead),
; 1143 : 			this));
; 1144 : 		}
; 1145 : 
; 1146 : 	_Unchecked_iterator _Unchecked_end()
; 1147 : 		{	// return unchecked iterator for end of mutable sequence
; 1148 : 		return (_Unchecked_iterator(this->_Myhead, this));
; 1149 : 		}
; 1150 : 
; 1151 : 	_Unchecked_const_iterator _Unchecked_end() const
; 1152 : 		{	// return unchecked iterator for end of nonmutable sequence
; 1153 : 		return (_Unchecked_const_iterator(this->_Myhead, this));
; 1154 : 		}
; 1155 : 
; 1156 : 	iterator _Make_iter(const_iterator _Where) const _NOEXCEPT
; 1157 : 		{	// make iterator from const_iterator
; 1158 : 		return (iterator(_Where._Ptr, this));
; 1159 : 		}
; 1160 : 
; 1161 : 	iterator _Make_iter(_Unchecked_const_iterator _Where) const
; 1162 : 		{	// make iterator from _Unchecked_const_iterator
; 1163 : 		return (iterator(_Where._Ptr, this));
; 1164 : 		}
; 1165 : 
; 1166 : 	reverse_iterator rbegin() _NOEXCEPT
; 1167 : 		{	// return iterator for beginning of reversed mutable sequence
; 1168 : 		return (reverse_iterator(end()));
; 1169 : 		}
; 1170 : 
; 1171 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1172 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1173 : 		return (const_reverse_iterator(end()));
; 1174 : 		}
; 1175 : 
; 1176 : 	reverse_iterator rend() _NOEXCEPT
; 1177 : 		{	// return iterator for end of reversed mutable sequence
; 1178 : 		return (reverse_iterator(begin()));
; 1179 : 		}
; 1180 : 
; 1181 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1182 : 		{	// return iterator for end of reversed nonmutable sequence
; 1183 : 		return (const_reverse_iterator(begin()));
; 1184 : 		}
; 1185 : 
; 1186 : 	const_iterator cbegin() const _NOEXCEPT
; 1187 : 		{	// return iterator for beginning of nonmutable sequence
; 1188 : 		return (((const _Myt *)this)->begin());
; 1189 : 		}
; 1190 : 
; 1191 : 	const_iterator cend() const _NOEXCEPT
; 1192 : 		{	// return iterator for end of nonmutable sequence
; 1193 : 		return (((const _Myt *)this)->end());
; 1194 : 		}
; 1195 : 
; 1196 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1197 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1198 : 		return (((const _Myt *)this)->rbegin());
; 1199 : 		}
; 1200 : 
; 1201 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1202 : 		{	// return iterator for end of reversed nonmutable sequence
; 1203 : 		return (((const _Myt *)this)->rend());
; 1204 : 		}
; 1205 : 
; 1206 : 	void resize(size_type _Newsize)
; 1207 : 		{	// determine new length, padding with _Ty() elements as needed
; 1208 : 		if (this->_Mysize < _Newsize)
; 1209 : 			{	// pad to make larger
; 1210 : 			size_type _Count = 0;
; 1211 : 			_TRY_BEGIN
; 1212 : 			for (; this->_Mysize < _Newsize; ++_Count)
; 1213 : 				_Insert(_Unchecked_end());
; 1214 : 			_CATCH_ALL
; 1215 : 			for (; 0 < _Count; --_Count)
; 1216 : 				pop_back();	// undo inserts
; 1217 : 			_RERAISE;
; 1218 : 			_CATCH_END
; 1219 : 			}
; 1220 : 		else
; 1221 : 			while (_Newsize < this->_Mysize)
; 1222 : 				pop_back();
; 1223 : 		}
; 1224 : 
; 1225 : 	void resize(size_type _Newsize, const _Ty& _Val)
; 1226 : 		{	// determine new length, padding with _Val elements as needed
; 1227 : 		if (this->_Mysize < _Newsize)
; 1228 : 			_Insert_n(_Unchecked_end(), _Newsize - this->_Mysize, _Val);
; 1229 : 		else
; 1230 : 			while (_Newsize < this->_Mysize)
; 1231 : 				pop_back();
; 1232 : 		}
; 1233 : 
; 1234 : 	size_type size() const _NOEXCEPT
; 1235 : 		{	// return length of sequence
; 1236 : 		return (this->_Mysize);
; 1237 : 		}
; 1238 : 
; 1239 : 	size_type max_size() const _NOEXCEPT
; 1240 : 		{	// return maximum possible length of sequence
; 1241 : 		return (this->_Getal().max_size());
; 1242 : 		}
; 1243 : 
; 1244 : 	bool empty() const _NOEXCEPT
; 1245 : 		{	// test if sequence is empty
; 1246 : 		return (this->_Mysize == 0);
; 1247 : 		}
; 1248 : 
; 1249 : 	allocator_type get_allocator() const _NOEXCEPT
; 1250 : 		{	// return allocator object for values
; 1251 : 		return (this->_Getal());
; 1252 : 		}
; 1253 : 
; 1254 : 	reference front()
; 1255 : 		{	// return first element of mutable sequence
; 1256 : 		return (*begin());
; 1257 : 		}
; 1258 : 
; 1259 : 	const_reference front() const
; 1260 : 		{	// return first element of nonmutable sequence
; 1261 : 		return (*begin());
; 1262 : 		}
; 1263 : 
; 1264 : 	reference back()
; 1265 : 		{	// return last element of mutable sequence
; 1266 : 		return (*(--end()));
; 1267 : 		}
; 1268 : 
; 1269 : 	const_reference back() const
; 1270 : 		{	// return last element of nonmutable sequence
; 1271 : 		return (*(--end()));
; 1272 : 		}
; 1273 : 
; 1274 : 	void push_front(const _Ty& _Val)
; 1275 : 		{	// insert element at beginning
; 1276 : 		_Insert(_Unchecked_begin(), _Val);
; 1277 : 		}
; 1278 : 
; 1279 : 	void pop_front()
; 1280 : 		{	// erase element at beginning
; 1281 : 		erase(begin());
; 1282 : 		}
; 1283 : 
; 1284 : 	void push_back(const _Ty& _Val)
; 1285 : 		{	// insert element at end
; 1286 : 		_Insert(_Unchecked_end(), _Val);
; 1287 : 		}
; 1288 : 
; 1289 : 	void pop_back()
; 1290 : 		{	// erase element at end
; 1291 : 		erase(--end());
; 1292 : 		}
; 1293 : 
; 1294 : 	template<class _Iter>
; 1295 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1296 : 			void>::type
; 1297 : 		assign(_Iter _First, _Iter _Last)
; 1298 : 		{	// assign [_First, _Last), input iterators
; 1299 : 		iterator _Old = begin();
; 1300 : 		_TRY_BEGIN
; 1301 : 		for (; _First != _Last && _Old != end(); ++_First, ++_Old)
; 1302 : 			_Reusenode(_Old, *_First);
; 1303 : 		for (; _First != _Last; ++_First)
; 1304 : 			_Insert(_Unchecked_end(), *_First);
; 1305 : 		_CATCH_ALL
; 1306 : 		clear();
; 1307 : 		_RERAISE;
; 1308 : 		_CATCH_END
; 1309 : 		erase(_Old, end());
; 1310 : 		}
; 1311 : 
; 1312 : 	template<class _TArg>
; 1313 : 		void _Reusenode(iterator _Where, _TArg&& _Arg)
; 1314 : 		{	// destroy the element at _Where and reconstruct from _Arg
; 1315 : 		_TRY_BEGIN
; 1316 : 		this->_Getal().destroy(
; 1317 : 			_STD addressof(this->_Myval(_Where._Ptr)));
; 1318 : 		this->_Getal().construct(
; 1319 : 			_STD addressof(this->_Myval(_Where._Ptr)),
; 1320 : 			_STD forward<_TArg>(_Arg));
; 1321 : 		_CATCH_ALL
; 1322 : 		_Unlinknode(_Where);
; 1323 : 		this->_Getal().destroy(
; 1324 : 			_STD addressof(this->_Nextnode(_Where._Ptr)));
; 1325 : 		this->_Getal().destroy(
; 1326 : 			_STD addressof(this->_Prevnode(_Where._Ptr)));
; 1327 : 		this->_Getal().deallocate(_Where._Ptr, 1);
; 1328 : 		_RERAISE;
; 1329 : 		_CATCH_END
; 1330 : 		}
; 1331 : 
; 1332 : 	void assign(size_type _Count, const _Ty& _Val)
; 1333 : 		{	// assign _Count * _Val
; 1334 : 		clear();
; 1335 : 		_Insert_n(_Unchecked_begin(), _Count, _Val);
; 1336 : 		}
; 1337 : 
; 1338 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1339 : 		{	// insert _Val at _Where
; 1340 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1341 : 		if (_Where._Getcont() != this)
; 1342 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1343 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1344 : 
; 1345 : 		_Insert(_Where._Unchecked(), _Val);
; 1346 : 		return (_Make_iter(--_Where));
; 1347 : 		}
; 1348 : 
; 1349 : 	iterator insert(const_iterator _Where, size_type _Count, const _Ty& _Val)
; 1350 : 		{	// insert _Count * _Val at _Where
; 1351 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1352 : 		if (_Where._Getcont() != this)
; 1353 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1354 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1355 : 
; 1356 : 		iterator _Prev = _Make_iter(_Where);
; 1357 : 		if (_Prev == begin())
; 1358 : 			{	// insert sequence at beginning
; 1359 : 			_Insert_n(_Where._Unchecked(), _Count, _Val);
; 1360 : 			return (begin());
; 1361 : 			}
; 1362 : 		else
; 1363 : 			{	// insert sequence not at beginning
; 1364 : 			--_Prev;
; 1365 : 			_Insert_n(_Where._Unchecked(), _Count, _Val);
; 1366 : 			return (++_Prev);
; 1367 : 			}
; 1368 : 		}
; 1369 : 
; 1370 : 	template<class _Iter>
; 1371 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1372 : 			iterator>::type
; 1373 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1374 : 		{	// insert [_First, _Last) at _Where
; 1375 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1376 : 		if (_Where._Getcont() != this)
; 1377 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1378 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1379 : 
; 1380 : 		iterator _Prev = _Make_iter(_Where);
; 1381 : 		if (_Prev == begin())
; 1382 : 			{	// insert sequence at beginning
; 1383 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1384 : 				_Iter_cat(_First));
; 1385 : 			return (begin());
; 1386 : 			}
; 1387 : 		else
; 1388 : 			{	// insert sequence not at beginning
; 1389 : 			--_Prev;
; 1390 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1391 : 				_Iter_cat(_First));
; 1392 : 			return (++_Prev);
; 1393 : 			}
; 1394 : 		}
; 1395 : 
; 1396 : 	template<class _Iter>
; 1397 : 		void _Insert_range(_Unchecked_const_iterator _Where,
; 1398 : 			_Iter _First, _Iter _Last, input_iterator_tag)
; 1399 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1400 : 		size_type _Num = 0;
; 1401 : 
; 1402 : 		_TRY_BEGIN
; 1403 : 		for (; _First != _Last; ++_First, ++_Num)
; 1404 : 			_Insert(_Where, *_First);
; 1405 : 		_CATCH_ALL
; 1406 : 		for (; 0 < _Num; --_Num)
; 1407 : 			{	// undo inserts
; 1408 : 			_Unchecked_const_iterator _Before = _Where;
; 1409 : 			_Unchecked_erase(--_Before);
; 1410 : 			}
; 1411 : 		_RERAISE;
; 1412 : 		_CATCH_END
; 1413 : 		}
; 1414 : 
; 1415 : 	template<class _Iter>
; 1416 : 		void _Insert_range(_Unchecked_const_iterator _Where,
; 1417 : 			_Iter _First, _Iter _Last, forward_iterator_tag)
; 1418 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1419 : 		_DEBUG_RANGE(_First, _Last);
; 1420 : 		_Iter _Next = _First;
; 1421 : 
; 1422 : 		_TRY_BEGIN
; 1423 : 		for (; _First != _Last; ++_First)
; 1424 : 			_Insert(_Where, *_First);
; 1425 : 		_CATCH_ALL
; 1426 : 		for (; _Next != _First; ++_Next)
; 1427 : 			{	// undo inserts
; 1428 : 			_Unchecked_const_iterator _Before = _Where;
; 1429 : 			_Unchecked_erase(--_Before);
; 1430 : 			}
; 1431 : 		_RERAISE;
; 1432 : 		_CATCH_END
; 1433 : 		}
; 1434 : 
; 1435 : 	_Nodeptr _Unlinknode(const_iterator _Where)
; 1436 : 		{	// unlink node at _Where from the list
; 1437 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1438 : 		if (_Where._Getcont() != this || _Where._Ptr == this->_Myhead)
; 1439 : 			_DEBUG_ERROR("list erase iterator outside range");
; 1440 : 		_Nodeptr _Pnode = (_Where)._Mynode();
; 1441 : 		_Orphan_ptr(*this, _Pnode);
; 1442 : 
; 1443 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1444 : 		_Nodeptr _Pnode = (_Where)._Mynode();
; 1445 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1446 : 
; 1447 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1448 : 			this->_Nextnode(_Pnode);
; 1449 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1450 : 			this->_Prevnode(_Pnode);
; 1451 : 
; 1452 : 		--this->_Mysize;
; 1453 : 		return (_Pnode);
; 1454 : 		}
; 1455 : 
; 1456 : 	iterator erase(const_iterator _Where)
; 1457 : 		{	// erase element at _Where
; 1458 : 		_Nodeptr _Pnode = _Unlinknode(_Where++);
; 1459 : 		this->_Freenode(_Pnode);
; 1460 : 		return (_Make_iter(_Where));
; 1461 : 		}
; 1462 : 
; 1463 : 	void _Unchecked_erase(_Unchecked_const_iterator _Where)
; 1464 : 		{	// erase element at _Where
; 1465 : 		_Nodeptr _Pnode = _Where._Mynode();
; 1466 : 
; 1467 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1468 : 			this->_Nextnode(_Pnode);
; 1469 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1470 : 			this->_Prevnode(_Pnode);
; 1471 : 		this->_Freenode(_Pnode);
; 1472 : 		--this->_Mysize;
; 1473 : 		}
; 1474 : 
; 1475 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1476 : 		{	// erase [_First, _Last)
; 1477 : 		if (_First == begin() && _Last == end())
; 1478 : 			{	// erase all and return fresh iterator
; 1479 : 			clear();
; 1480 : 			return (end());
; 1481 : 			}
; 1482 : 		else
; 1483 : 			{	// erase subrange
; 1484 : 			while (_First != _Last)
; 1485 : 				_First = erase(_First);
; 1486 : 			return (_Make_iter(_Last));
; 1487 : 			}
; 1488 : 		}
; 1489 : 
; 1490 : 	void clear() _NOEXCEPT
; 1491 : 		{	// erase all
; 1492 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1493 : 		this->_Orphan_ptr(*this, nullptr);
; 1494 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1495 : 
; 1496 : 		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead);

  00005	8b 02		 mov	 eax, DWORD PTR [edx]

; 1497 : 		this->_Nextnode(this->_Myhead) = this->_Myhead;

  00007	89 12		 mov	 DWORD PTR [edx], edx

; 534  : 		}
; 535  : 
; 536  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 537  : 		{	// return reference to predecessor pointer in node
; 538  : 		return ((_Nodepref)_Pnode->_Prev);

  00009	8b 17		 mov	 edx, DWORD PTR [edi]

; 1498 : 		this->_Prevnode(this->_Myhead) = this->_Myhead;

  0000b	89 52 04	 mov	 DWORD PTR [edx+4], edx

; 1499 : 		this->_Mysize = 0;

  0000e	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1501 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead; _Pnode = _Pnext)

  00015	3b 07		 cmp	 eax, DWORD PTR [edi]
  00017	74 19		 je	 SHORT $LN3@Tidy
  00019	56		 push	 esi
  0001a	8d 9b 00 00 00
	00		 npad	 6
$LL5@Tidy:

; 1502 : 			{	// delete an element
; 1503 : 			_Pnext = this->_Nextnode(_Pnode);

  00020	8b 30		 mov	 esi, DWORD PTR [eax]
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00028	83 c4 04	 add	 esp, 4
; File a:\vs\vc\include\list

; 1501 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead; _Pnode = _Pnext)

  0002b	8b c6		 mov	 eax, esi
  0002d	3b 37		 cmp	 esi, DWORD PTR [edi]
  0002f	75 ef		 jne	 SHORT $LL5@Tidy
  00031	5e		 pop	 esi
$LN3@Tidy:
  00032	5f		 pop	 edi

; 1883 : 		clear();
; 1884 : 		}

  00033	c3		 ret	 0
?_Tidy@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXXZ ENDP ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\list
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\list
;	COMDAT ?clear@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXXZ PROC ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::clear, COMDAT
; _this$ = ecx

; 1491 : 		{	// erase all

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 533  : 		return ((_Nodepref)_Pnode->_Next);

  00003	8b 17		 mov	 edx, DWORD PTR [edi]

; 1492 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1493 : 		this->_Orphan_ptr(*this, nullptr);
; 1494 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1495 : 
; 1496 : 		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead);

  00005	8b 02		 mov	 eax, DWORD PTR [edx]

; 1497 : 		this->_Nextnode(this->_Myhead) = this->_Myhead;

  00007	89 12		 mov	 DWORD PTR [edx], edx

; 534  : 		}
; 535  : 
; 536  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 537  : 		{	// return reference to predecessor pointer in node
; 538  : 		return ((_Nodepref)_Pnode->_Prev);

  00009	8b 17		 mov	 edx, DWORD PTR [edi]

; 1498 : 		this->_Prevnode(this->_Myhead) = this->_Myhead;

  0000b	89 52 04	 mov	 DWORD PTR [edx+4], edx

; 1499 : 		this->_Mysize = 0;

  0000e	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1501 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead; _Pnode = _Pnext)

  00015	3b 07		 cmp	 eax, DWORD PTR [edi]
  00017	74 19		 je	 SHORT $LN1@clear
  00019	56		 push	 esi
  0001a	8d 9b 00 00 00
	00		 npad	 6
$LL3@clear:

; 1502 : 			{	// delete an element
; 1503 : 			_Pnext = this->_Nextnode(_Pnode);

  00020	8b 30		 mov	 esi, DWORD PTR [eax]
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00028	83 c4 04	 add	 esp, 4
; File a:\vs\vc\include\list

; 1501 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead; _Pnode = _Pnext)

  0002b	8b c6		 mov	 eax, esi
  0002d	3b 37		 cmp	 esi, DWORD PTR [edi]
  0002f	75 ef		 jne	 SHORT $LL3@clear
  00031	5e		 pop	 esi
$LN1@clear:
  00032	5f		 pop	 edi

; 1504 : 			this->_Freenode(_Pnode);
; 1505 : 			}
; 1506 : 		}

  00033	c3		 ret	 0
?clear@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXXZ ENDP ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\list
;	COMDAT ?push_back@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXABUSChannel@CServerStateChecker@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXABUSChannel@CServerStateChecker@@@Z PROC ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::push_back, COMDAT
; _this$ = ecx

; 1285 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 534  : 		}
; 535  : 
; 536  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 537  : 		{	// return reference to predecessor pointer in node
; 538  : 		return ((_Nodepref)_Pnode->_Prev);
; 539  : 		}
; 540  : 
; 541  : 	static reference _Myval(_Nodeptr _Pnode)
; 542  : 		{	// return reference to value in node
; 543  : 		return ((reference)_Pnode->_Myval);
; 544  : 		}
; 545  : 
; 546  : 	_Nodeptr _Myhead;	// pointer to head node
; 547  : 	size_type _Mysize;	// number of elements
; 548  : 	};
; 549  : 
; 550  : 		// TEMPLATE CLASS _List_alloc
; 551  : template<bool _Al_has_storage,
; 552  : 	class _Alloc_types>
; 553  : 	class _List_alloc
; 554  : 		: public _List_val<typename _Alloc_types::_Val_types>
; 555  : 	{	// base class for list to hold allocator with storage
; 556  : public:
; 557  : 	typename _Alloc_types::_Alnod_type _Alnod;	// allocator object
; 558  : 
; 559  : 	typedef _List_alloc<_Al_has_storage, _Alloc_types> _Myt;
; 560  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 561  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 562  : 	typedef typename _Alloc_types::_Node _Node;
; 563  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 564  : 
; 565  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 566  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 567  : 		: _Alnod(_Al)
; 568  : 		{	// construct head node, allocator from _Al
; 569  : 		this->_Myhead = _Buyheadnode();
; 570  : 		}
; 571  : 
; 572  : 	~_List_alloc() _NOEXCEPT
; 573  : 		{	// destroy head node
; 574  : 		_Freeheadnode(this->_Myhead);
; 575  : 		}
; 576  : 
; 577  : 	void _Change_alloc(const _Alty& _Al)
; 578  : 		{	// replace old allocator
; 579  : 		this->_Alnod = _Al;
; 580  : 		}
; 581  : 
; 582  : 	void _Swap_alloc(_Myt& _Right)
; 583  : 		{	// swap allocators
; 584  : 		_Swap_adl(this->_Alnod, _Right._Alnod);
; 585  : 		}
; 586  : 
; 587  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 588  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 589  : 		: _Alnod(_Al)
; 590  : 		{	// construct head node, allocator from _Al
; 591  : 		this->_Myhead = _Buyheadnode();
; 592  : 		_TRY_BEGIN
; 593  : 		_Alloc_proxy();
; 594  : 		_CATCH_ALL
; 595  : 		_Freeheadnode(this->_Myhead);
; 596  : 		_RERAISE;
; 597  : 		_CATCH_END
; 598  : 		}
; 599  : 
; 600  : 	~_List_alloc() _NOEXCEPT
; 601  : 		{	// destroy proxy
; 602  : 		_Freeheadnode(this->_Myhead);
; 603  : 		_Free_proxy();
; 604  : 		}
; 605  : 
; 606  : 	void _Change_alloc(const _Alty& _Al)
; 607  : 		{	// replace old allocator
; 608  : 		_Free_proxy();
; 609  : 		this->_Alnod = _Al;
; 610  : 		_Alloc_proxy();
; 611  : 		}
; 612  : 
; 613  : 	void _Swap_alloc(_Myt& _Right)
; 614  : 		{	// swap allocators
; 615  : 		_Swap_adl(this->_Alnod, _Right._Alnod);
; 616  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 617  : 		}
; 618  : 
; 619  : 	void _Alloc_proxy()
; 620  : 		{	// construct proxy from _Alnod
; 621  : 		typename _Alty::template rebind<_Container_proxy>::other
; 622  : 			_Alproxy(this->_Alnod);
; 623  : 		this->_Myproxy = _Alproxy.allocate(1);
; 624  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 625  : 		this->_Myproxy->_Mycont = this;
; 626  : 		}
; 627  : 
; 628  : 	void _Free_proxy()
; 629  : 		{	// destroy proxy
; 630  : 		typename _Alty::template rebind<_Container_proxy>::other
; 631  : 			_Alproxy(this->_Alnod);
; 632  : 		this->_Orphan_all();
; 633  : 		_Alproxy.destroy(this->_Myproxy);
; 634  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 635  : 		this->_Myproxy = 0;
; 636  : 		}
; 637  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 638  : 
; 639  : 	_Nodeptr _Buyheadnode()
; 640  : 		{	// get head node using current allocator
; 641  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));
; 642  : 		}
; 643  : 
; 644  : 	void _Freeheadnode(_Nodeptr _Pnode)
; 645  : 		{	// free head node using current allocator
; 646  : 		this->_Alnod.destroy(
; 647  : 			_STD addressof(this->_Nextnode(_Pnode)));
; 648  : 		this->_Alnod.destroy(
; 649  : 			_STD addressof(this->_Prevnode(_Pnode)));
; 650  : 		this->_Alnod.deallocate(_Pnode, 1);
; 651  : 		}
; 652  : 
; 653  : 	_Nodeptr _Buynode0(_Nodeptr _Next,
; 654  : 		_Nodeptr _Prev)
; 655  : 		{	// allocate a node and set links
; 656  : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);
; 657  : 
; 658  : 		if (_Next == _Nodeptr())
; 659  : 			{	// point at self
; 660  : 			_Next = _Pnode;
; 661  : 			_Prev = _Pnode;
; 662  : 			}
; 663  : 		_TRY_BEGIN
; 664  : 		this->_Alnod.construct(
; 665  : 			_STD addressof(this->_Nextnode(_Pnode)), _Next);
; 666  : 		this->_Alnod.construct(
; 667  : 			_STD addressof(this->_Prevnode(_Pnode)), _Prev);
; 668  : 		_CATCH_ALL
; 669  : 		this->_Alnod.deallocate(_Pnode, 1);
; 670  : 		_RERAISE;
; 671  : 		_CATCH_END
; 672  : 
; 673  : 		return (_Pnode);
; 674  : 		}
; 675  : 
; 676  : 	_Alty& _Getal()
; 677  : 		{	// get reference to allocator
; 678  : 		return (this->_Alnod);
; 679  : 		}
; 680  : 
; 681  : 	const _Alty& _Getal() const
; 682  : 		{	// get reference to allocator
; 683  : 		return (this->_Alnod);
; 684  : 		}
; 685  : 	};
; 686  : 
; 687  : 		// TEMPLATE CLASS _List_alloc
; 688  : template<class _Alloc_types>
; 689  : 	class _List_alloc<false, _Alloc_types>
; 690  : 		: public _List_val<typename _Alloc_types::_Val_types>
; 691  : 	{	// base class for list to hold allocator with no storage
; 692  : public:
; 693  : 	typedef _List_alloc<false, _Alloc_types> _Myt;
; 694  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 695  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 696  : 	typedef typename _Alloc_types::_Node _Node;
; 697  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 698  : 
; 699  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 700  : 	_List_alloc(const _Alloc& = _Alloc())
; 701  : 		{	// construct head node, allocator from _Al
; 702  : 		this->_Myhead = _Buyheadnode();
; 703  : 		}
; 704  : 
; 705  : 	~_List_alloc() _NOEXCEPT
; 706  : 		{	// destroy head node
; 707  : 		_Freeheadnode(this->_Myhead);
; 708  : 		}
; 709  : 
; 710  : 	void _Change_alloc(const _Alty&)
; 711  : 		{	// replace old allocator
; 712  : 		}
; 713  : 
; 714  : 	void _Swap_alloc(_Myt&)
; 715  : 		{	// swap allocators
; 716  : 		}
; 717  : 
; 718  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 719  : 	_List_alloc(const _Alloc& = _Alloc())
; 720  : 		{	// construct allocators from _Al
; 721  : 		this->_Myhead = _Buyheadnode();
; 722  : 		_TRY_BEGIN
; 723  : 		_Alloc_proxy();
; 724  : 		_CATCH_ALL
; 725  : 		_Freeheadnode(this->_Myhead);
; 726  : 		_RERAISE;
; 727  : 		_CATCH_END
; 728  : 		}
; 729  : 
; 730  : 	~_List_alloc() _NOEXCEPT
; 731  : 		{	// destroy proxy
; 732  : 		_Freeheadnode(this->_Myhead);
; 733  : 		_Free_proxy();
; 734  : 		}
; 735  : 
; 736  : 	void _Change_alloc(const _Alty&)
; 737  : 		{	// replace old allocator
; 738  : 		}
; 739  : 
; 740  : 	void _Swap_alloc(_Myt& _Right)
; 741  : 		{	// swap allocators
; 742  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 743  : 		}
; 744  : 
; 745  : 	void _Alloc_proxy()
; 746  : 		{	// construct proxy from _Alnod
; 747  : 		typename _Alty::template rebind<_Container_proxy>::other
; 748  : 			_Alproxy;
; 749  : 		this->_Myproxy = _Alproxy.allocate(1);
; 750  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 751  : 		this->_Myproxy->_Mycont = this;
; 752  : 		}
; 753  : 
; 754  : 	void _Free_proxy()
; 755  : 		{	// destroy proxy
; 756  : 		typename _Alty::template rebind<_Container_proxy>::other
; 757  : 			_Alproxy;
; 758  : 		this->_Orphan_all();
; 759  : 		_Alproxy.destroy(this->_Myproxy);
; 760  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 761  : 		this->_Myproxy = 0;
; 762  : 		}
; 763  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 764  : 
; 765  : 	_Nodeptr _Buyheadnode()
; 766  : 		{	// get head node using current allocator
; 767  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));
; 768  : 		}
; 769  : 
; 770  : 	void _Freeheadnode(_Nodeptr _Pnode)
; 771  : 		{	// free head node using current allocator
; 772  : 		this->_Getal().destroy(
; 773  : 			_STD addressof(this->_Nextnode(_Pnode)));
; 774  : 		this->_Getal().destroy(
; 775  : 			_STD addressof(this->_Prevnode(_Pnode)));
; 776  : 		this->_Getal().deallocate(_Pnode, 1);
; 777  : 		}
; 778  : 
; 779  : 	_Nodeptr _Buynode0(_Nodeptr _Next,
; 780  : 		_Nodeptr _Prev)
; 781  : 		{	// allocate a node and set links
; 782  : 		_Nodeptr _Pnode = this->_Getal().allocate(1);
; 783  : 
; 784  : 		if (_Next == _Nodeptr())
; 785  : 			{	// point at self
; 786  : 			_Next = _Pnode;
; 787  : 			_Prev = _Pnode;
; 788  : 			}
; 789  : 		_TRY_BEGIN
; 790  : 		this->_Getal().construct(
; 791  : 			_STD addressof(this->_Nextnode(_Pnode)), _Next);
; 792  : 		this->_Getal().construct(
; 793  : 			_STD addressof(this->_Prevnode(_Pnode)), _Prev);
; 794  : 		_CATCH_ALL
; 795  : 		this->_Getal().deallocate(_Pnode, 1);
; 796  : 		_RERAISE;
; 797  : 		_CATCH_END
; 798  : 
; 799  : 		return (_Pnode);
; 800  : 		}
; 801  : 
; 802  : 	_Alty _Getal() const
; 803  : 		{	// get reference to allocator
; 804  : 		return (_Alty());
; 805  : 		}
; 806  : 	};
; 807  : 
; 808  : 		// TEMPLATE CLASS _List_buy
; 809  : template<class _Ty,
; 810  : 	class _Alloc>
; 811  : 	class _List_buy
; 812  : 		: public _List_alloc<!is_empty<_Alloc>::value,
; 813  : 			_List_base_types<_Ty, _Alloc> >
; 814  : 	{	// base class for list to hold buynode/freenode functions
; 815  : public:
; 816  : 	typedef _List_alloc<!is_empty<_Alloc>::value,
; 817  : 		_List_base_types<_Ty, _Alloc> > _Mybase;
; 818  : 	typedef typename _Mybase::_Alty _Alty;
; 819  : 	typedef typename _Mybase::_Nodeptr _Nodeptr;
; 820  : 
; 821  : 	_List_buy(const _Alloc& _Al = _Alloc())
; 822  : 		: _Mybase(_Al)
; 823  : 		{	// construct from allocator
; 824  : 		}
; 825  : 
; 826  : 	template<class... _Valty>
; 827  : 		_Nodeptr _Buynode(_Nodeptr _Next, _Nodeptr _Prev,
; 828  : 			_Valty&&... _Val)
; 829  : 		{	// allocate a node and set links and value
; 830  : 		_Nodeptr _Pnode = this->_Buynode0(_Next, _Prev);
; 831  : 
; 832  : 		_TRY_BEGIN
; 833  : 		this->_Getal().construct(
; 834  : 			_STD addressof(this->_Myval(_Pnode)),
; 835  : 				_STD forward<_Valty>(_Val)...);
; 836  : 		_CATCH_ALL
; 837  : 		this->_Getal().deallocate(_Pnode, 1);
; 838  : 		_RERAISE;
; 839  : 		_CATCH_END
; 840  : 
; 841  : 		return (_Pnode);
; 842  : 		}
; 843  : 
; 844  : 
; 845  : 	void _Freenode(_Nodeptr _Pnode)
; 846  : 		{	// give node back
; 847  : 		this->_Getal().destroy(
; 848  : 			_STD addressof(this->_Nextnode(_Pnode)));
; 849  : 		this->_Getal().destroy(
; 850  : 			_STD addressof(this->_Prevnode(_Pnode)));
; 851  : 		this->_Getal().destroy(
; 852  : 			_STD addressof(this->_Myval(_Pnode)));
; 853  : 		this->_Getal().deallocate(_Pnode, 1);
; 854  : 		}
; 855  : 	};
; 856  : 
; 857  : 		// TEMPLATE CLASS list
; 858  : template<class _Ty,
; 859  : 	class _Alloc = allocator<_Ty> >
; 860  : 	class list
; 861  : 		: public _List_buy<_Ty, _Alloc>
; 862  : 	{	// bidirectional linked list
; 863  : public:
; 864  : 	typedef list<_Ty, _Alloc> _Myt;
; 865  : 	typedef _List_buy<_Ty, _Alloc> _Mybase;
; 866  : 	typedef typename _Mybase::_Node _Node;
; 867  : 	typedef typename _Mybase::_Nodeptr _Nodeptr;
; 868  : 	typedef typename _Mybase::_Alty _Alty;
; 869  : 
; 870  : 	typedef _Alloc allocator_type;
; 871  : 	typedef typename _Mybase::size_type size_type;
; 872  : 	typedef typename _Mybase::difference_type difference_type;
; 873  : 	typedef typename _Mybase::pointer pointer;
; 874  : 	typedef typename _Mybase::const_pointer const_pointer;
; 875  : 	typedef typename _Mybase::reference reference;
; 876  : 	typedef typename _Mybase::const_reference const_reference;
; 877  : 	typedef typename _Mybase::value_type value_type;
; 878  : 
; 879  : 	typedef typename _Mybase::const_iterator const_iterator;
; 880  : 	typedef typename _Mybase::iterator iterator;
; 881  : 	typedef typename _Mybase::_Unchecked_const_iterator
; 882  : 		_Unchecked_const_iterator;
; 883  : 	typedef typename _Mybase::_Unchecked_iterator
; 884  : 		_Unchecked_iterator;
; 885  : 
; 886  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 887  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 888  : 
; 889  : 	list()
; 890  : 		: _Mybase()
; 891  : 		{	// construct empty list
; 892  : 		}
; 893  : 
; 894  : 	explicit list(const _Alloc& _Al)
; 895  : 		: _Mybase(_Al)
; 896  : 		{	// construct empty list, allocator
; 897  : 		}
; 898  : 
; 899  : 	explicit list(size_type _Count)
; 900  : 		: _Mybase()
; 901  : 		{	// construct list from _Count * _Ty()
; 902  : 		resize(_Count);
; 903  : 		}
; 904  : 
; 905  : 	list(size_type _Count, const _Ty& _Val)
; 906  : 		: _Mybase()
; 907  : 		{	// construct list from _Count * _Val
; 908  : 		_Construct_n(_Count, _Val);
; 909  : 		}
; 910  : 
; 911  : 	list(size_type _Count, const _Ty& _Val, const _Alloc& _Al)
; 912  : 		: _Mybase(_Al)
; 913  : 		{	// construct list from _Count * _Val, allocator
; 914  : 		_Construct_n(_Count, _Val);
; 915  : 		}
; 916  : 
; 917  : 	list(const _Myt& _Right)
; 918  : 
; 919  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 920  : 
; 921  : 
; 922  : 		{	// construct list by copying _Right
; 923  : 		_TRY_BEGIN
; 924  : 		insert(begin(), _Right.begin(), _Right.end());
; 925  : 		_CATCH_ALL
; 926  : 		_Tidy();
; 927  : 		_RERAISE;
; 928  : 		_CATCH_END
; 929  : 		}
; 930  : 
; 931  : 	list(const _Myt& _Right, const _Alloc& _Al)
; 932  : 		: _Mybase(_Al)
; 933  : 		{	// construct list by copying _Right, allocator
; 934  : 		_TRY_BEGIN
; 935  : 		insert(begin(), _Right.begin(), _Right.end());
; 936  : 		_CATCH_ALL
; 937  : 		_Tidy();
; 938  : 		_RERAISE;
; 939  : 		_CATCH_END
; 940  : 		}
; 941  : 
; 942  : 	template<class _Iter,
; 943  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 944  : 			void>::type>
; 945  : 		list(_Iter _First, _Iter _Last)
; 946  : 		: _Mybase()
; 947  : 		{	// construct list from [_First, _Last)
; 948  : 		_Construct(_First, _Last);
; 949  : 		}
; 950  : 
; 951  : 	template<class _Iter,
; 952  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 953  : 			void>::type>
; 954  : 		list(_Iter _First, _Iter _Last, const _Alloc& _Al)
; 955  : 		: _Mybase(_Al)
; 956  : 		{	// construct list, allocator from [_First, _Last)
; 957  : 		_Construct(_First, _Last);
; 958  : 		}
; 959  : 
; 960  : 	template<class _Iter>
; 961  : 		void _Construct(_Iter _First, _Iter _Last)
; 962  : 		{	// construct list from [_First, _Last), input iterators
; 963  : 		_TRY_BEGIN
; 964  : 		insert(begin(), _First, _Last);
; 965  : 		_CATCH_ALL
; 966  : 		_Tidy();
; 967  : 		_RERAISE;
; 968  : 		_CATCH_END
; 969  : 		}
; 970  : 
; 971  : 	void _Construct_n(size_type _Count,
; 972  : 		const _Ty& _Val)
; 973  : 		{	// construct from _Count * _Val
; 974  : 		_TRY_BEGIN
; 975  : 		_Insert_n(_Unchecked_begin(), _Count, _Val);
; 976  : 		_CATCH_ALL
; 977  : 		_Tidy();
; 978  : 		_RERAISE;
; 979  : 		_CATCH_END
; 980  : 		}
; 981  : 
; 982  : 	list(_Myt&& _Right)
; 983  : 		: _Mybase(_Right._Getal())
; 984  : 		{	// construct list by moving _Right
; 985  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 986  : 		}
; 987  : 
; 988  : 	list(_Myt&& _Right, const _Alloc& _Al)
; 989  : 		: _Mybase(_Al)
; 990  : 		{	// construct list by moving _Right, allocator
; 991  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 992  : 		}
; 993  : 
; 994  : 	_Myt& operator=(_Myt&& _Right)
; 995  : 		{	// assign by moving _Right
; 996  : 		if (this != &_Right)
; 997  : 			{	// different, assign it
; 998  : 			clear();
; 999  : 
; 1000 : 			if (_Alty::propagate_on_container_move_assignment::value
; 1001 : 				&& this->_Getal() != _Right._Getal())
; 1002 : 				this->_Change_alloc(_Right._Getal());
; 1003 : 
; 1004 : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 1005 : 			}
; 1006 : 		return (*this);
; 1007 : 		}
; 1008 : 
; 1009 : 	void _Assign_rv(_Myt&& _Right)
; 1010 : 		{	// swap with empty *this, same allocator
; 1011 : 		this->_Swap_all(_Right);
; 1012 : 		_Swap_adl(this->_Myhead, _Right._Myhead);
; 1013 : 		_STD swap(this->_Mysize, _Right._Mysize);
; 1014 : 		}
; 1015 : 
; 1016 : 	void push_front(_Ty&& _Val)
; 1017 : 		{	// insert element at beginning
; 1018 : 		_Insert(_Unchecked_begin(), _STD forward<_Ty>(_Val));
; 1019 : 		}
; 1020 : 
; 1021 : 	void push_back(_Ty&& _Val)
; 1022 : 		{	// insert element at end
; 1023 : 		_Insert(_Unchecked_end(), _STD forward<_Ty>(_Val));
; 1024 : 		}
; 1025 : 
; 1026 : 	iterator insert(const_iterator _Where, _Ty&& _Val)
; 1027 : 		{	// insert _Val at _Where
; 1028 : 		return (emplace(_Where, _STD forward<_Ty>(_Val)));
; 1029 : 		}
; 1030 : 
; 1031 : 	template<class... _Valty>
; 1032 : 		void emplace_front(_Valty&&... _Val)
; 1033 : 		{	// insert element at beginning
; 1034 : 		_Insert(_Unchecked_begin(), _STD forward<_Valty>(_Val)...);
; 1035 : 		}
; 1036 : 
; 1037 : 	template<class... _Valty>
; 1038 : 		void emplace_back(_Valty&&... _Val)
; 1039 : 		{	// insert element at end
; 1040 : 		_Insert(_Unchecked_end(), _STD forward<_Valty>(_Val)...);
; 1041 : 		}
; 1042 : 
; 1043 : 	template<class... _Valty>
; 1044 : 		iterator emplace(const_iterator _Where, _Valty&&... _Val)
; 1045 : 		{	// insert element at _Where
; 1046 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1047 : 		if (_Where._Getcont() != this)
; 1048 : 			_DEBUG_ERROR("list emplace iterator outside range");
; 1049 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1050 : 
; 1051 : 		_Insert(_Where._Unchecked(), _STD forward<_Valty>(_Val)...);
; 1052 : 		return (_Make_iter(--_Where));
; 1053 : 		}
; 1054 : 
; 1055 : 	template<class... _Valty>
; 1056 : 		void _Insert(_Unchecked_const_iterator _Where,
; 1057 : 		_Valty&&... _Val)
; 1058 : 		{	// insert element at _Where
; 1059 : 		_Nodeptr _Pnode = _Where._Mynode();
; 1060 : 		_Nodeptr _Newnode =
; 1061 : 			this->_Buynode(_Pnode, this->_Prevnode(_Pnode),
; 1062 : 				_STD forward<_Valty>(_Val)...);

  00007	ff 75 08	 push	 DWORD PTR __Val$[ebp]

; 96   : 		return (_Ptr);

  0000a	8b 3e		 mov	 edi, DWORD PTR [esi]

; 534  : 		}
; 535  : 
; 536  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 537  : 		{	// return reference to predecessor pointer in node
; 538  : 		return ((_Nodepref)_Pnode->_Prev);
; 539  : 		}
; 540  : 
; 541  : 	static reference _Myval(_Nodeptr _Pnode)
; 542  : 		{	// return reference to value in node
; 543  : 		return ((reference)_Pnode->_Myval);
; 544  : 		}
; 545  : 
; 546  : 	_Nodeptr _Myhead;	// pointer to head node
; 547  : 	size_type _Mysize;	// number of elements
; 548  : 	};
; 549  : 
; 550  : 		// TEMPLATE CLASS _List_alloc
; 551  : template<bool _Al_has_storage,
; 552  : 	class _Alloc_types>
; 553  : 	class _List_alloc
; 554  : 		: public _List_val<typename _Alloc_types::_Val_types>
; 555  : 	{	// base class for list to hold allocator with storage
; 556  : public:
; 557  : 	typename _Alloc_types::_Alnod_type _Alnod;	// allocator object
; 558  : 
; 559  : 	typedef _List_alloc<_Al_has_storage, _Alloc_types> _Myt;
; 560  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 561  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 562  : 	typedef typename _Alloc_types::_Node _Node;
; 563  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 564  : 
; 565  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 566  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 567  : 		: _Alnod(_Al)
; 568  : 		{	// construct head node, allocator from _Al
; 569  : 		this->_Myhead = _Buyheadnode();
; 570  : 		}
; 571  : 
; 572  : 	~_List_alloc() _NOEXCEPT
; 573  : 		{	// destroy head node
; 574  : 		_Freeheadnode(this->_Myhead);
; 575  : 		}
; 576  : 
; 577  : 	void _Change_alloc(const _Alty& _Al)
; 578  : 		{	// replace old allocator
; 579  : 		this->_Alnod = _Al;
; 580  : 		}
; 581  : 
; 582  : 	void _Swap_alloc(_Myt& _Right)
; 583  : 		{	// swap allocators
; 584  : 		_Swap_adl(this->_Alnod, _Right._Alnod);
; 585  : 		}
; 586  : 
; 587  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 588  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 589  : 		: _Alnod(_Al)
; 590  : 		{	// construct head node, allocator from _Al
; 591  : 		this->_Myhead = _Buyheadnode();
; 592  : 		_TRY_BEGIN
; 593  : 		_Alloc_proxy();
; 594  : 		_CATCH_ALL
; 595  : 		_Freeheadnode(this->_Myhead);
; 596  : 		_RERAISE;
; 597  : 		_CATCH_END
; 598  : 		}
; 599  : 
; 600  : 	~_List_alloc() _NOEXCEPT
; 601  : 		{	// destroy proxy
; 602  : 		_Freeheadnode(this->_Myhead);
; 603  : 		_Free_proxy();
; 604  : 		}
; 605  : 
; 606  : 	void _Change_alloc(const _Alty& _Al)
; 607  : 		{	// replace old allocator
; 608  : 		_Free_proxy();
; 609  : 		this->_Alnod = _Al;
; 610  : 		_Alloc_proxy();
; 611  : 		}
; 612  : 
; 613  : 	void _Swap_alloc(_Myt& _Right)
; 614  : 		{	// swap allocators
; 615  : 		_Swap_adl(this->_Alnod, _Right._Alnod);
; 616  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 617  : 		}
; 618  : 
; 619  : 	void _Alloc_proxy()
; 620  : 		{	// construct proxy from _Alnod
; 621  : 		typename _Alty::template rebind<_Container_proxy>::other
; 622  : 			_Alproxy(this->_Alnod);
; 623  : 		this->_Myproxy = _Alproxy.allocate(1);
; 624  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 625  : 		this->_Myproxy->_Mycont = this;
; 626  : 		}
; 627  : 
; 628  : 	void _Free_proxy()
; 629  : 		{	// destroy proxy
; 630  : 		typename _Alty::template rebind<_Container_proxy>::other
; 631  : 			_Alproxy(this->_Alnod);
; 632  : 		this->_Orphan_all();
; 633  : 		_Alproxy.destroy(this->_Myproxy);
; 634  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 635  : 		this->_Myproxy = 0;
; 636  : 		}
; 637  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 638  : 
; 639  : 	_Nodeptr _Buyheadnode()
; 640  : 		{	// get head node using current allocator
; 641  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));
; 642  : 		}
; 643  : 
; 644  : 	void _Freeheadnode(_Nodeptr _Pnode)
; 645  : 		{	// free head node using current allocator
; 646  : 		this->_Alnod.destroy(
; 647  : 			_STD addressof(this->_Nextnode(_Pnode)));
; 648  : 		this->_Alnod.destroy(
; 649  : 			_STD addressof(this->_Prevnode(_Pnode)));
; 650  : 		this->_Alnod.deallocate(_Pnode, 1);
; 651  : 		}
; 652  : 
; 653  : 	_Nodeptr _Buynode0(_Nodeptr _Next,
; 654  : 		_Nodeptr _Prev)
; 655  : 		{	// allocate a node and set links
; 656  : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);
; 657  : 
; 658  : 		if (_Next == _Nodeptr())
; 659  : 			{	// point at self
; 660  : 			_Next = _Pnode;
; 661  : 			_Prev = _Pnode;
; 662  : 			}
; 663  : 		_TRY_BEGIN
; 664  : 		this->_Alnod.construct(
; 665  : 			_STD addressof(this->_Nextnode(_Pnode)), _Next);
; 666  : 		this->_Alnod.construct(
; 667  : 			_STD addressof(this->_Prevnode(_Pnode)), _Prev);
; 668  : 		_CATCH_ALL
; 669  : 		this->_Alnod.deallocate(_Pnode, 1);
; 670  : 		_RERAISE;
; 671  : 		_CATCH_END
; 672  : 
; 673  : 		return (_Pnode);
; 674  : 		}
; 675  : 
; 676  : 	_Alty& _Getal()
; 677  : 		{	// get reference to allocator
; 678  : 		return (this->_Alnod);
; 679  : 		}
; 680  : 
; 681  : 	const _Alty& _Getal() const
; 682  : 		{	// get reference to allocator
; 683  : 		return (this->_Alnod);
; 684  : 		}
; 685  : 	};
; 686  : 
; 687  : 		// TEMPLATE CLASS _List_alloc
; 688  : template<class _Alloc_types>
; 689  : 	class _List_alloc<false, _Alloc_types>
; 690  : 		: public _List_val<typename _Alloc_types::_Val_types>
; 691  : 	{	// base class for list to hold allocator with no storage
; 692  : public:
; 693  : 	typedef _List_alloc<false, _Alloc_types> _Myt;
; 694  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 695  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 696  : 	typedef typename _Alloc_types::_Node _Node;
; 697  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 698  : 
; 699  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 700  : 	_List_alloc(const _Alloc& = _Alloc())
; 701  : 		{	// construct head node, allocator from _Al
; 702  : 		this->_Myhead = _Buyheadnode();
; 703  : 		}
; 704  : 
; 705  : 	~_List_alloc() _NOEXCEPT
; 706  : 		{	// destroy head node
; 707  : 		_Freeheadnode(this->_Myhead);
; 708  : 		}
; 709  : 
; 710  : 	void _Change_alloc(const _Alty&)
; 711  : 		{	// replace old allocator
; 712  : 		}
; 713  : 
; 714  : 	void _Swap_alloc(_Myt&)
; 715  : 		{	// swap allocators
; 716  : 		}
; 717  : 
; 718  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 719  : 	_List_alloc(const _Alloc& = _Alloc())
; 720  : 		{	// construct allocators from _Al
; 721  : 		this->_Myhead = _Buyheadnode();
; 722  : 		_TRY_BEGIN
; 723  : 		_Alloc_proxy();
; 724  : 		_CATCH_ALL
; 725  : 		_Freeheadnode(this->_Myhead);
; 726  : 		_RERAISE;
; 727  : 		_CATCH_END
; 728  : 		}
; 729  : 
; 730  : 	~_List_alloc() _NOEXCEPT
; 731  : 		{	// destroy proxy
; 732  : 		_Freeheadnode(this->_Myhead);
; 733  : 		_Free_proxy();
; 734  : 		}
; 735  : 
; 736  : 	void _Change_alloc(const _Alty&)
; 737  : 		{	// replace old allocator
; 738  : 		}
; 739  : 
; 740  : 	void _Swap_alloc(_Myt& _Right)
; 741  : 		{	// swap allocators
; 742  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 743  : 		}
; 744  : 
; 745  : 	void _Alloc_proxy()
; 746  : 		{	// construct proxy from _Alnod
; 747  : 		typename _Alty::template rebind<_Container_proxy>::other
; 748  : 			_Alproxy;
; 749  : 		this->_Myproxy = _Alproxy.allocate(1);
; 750  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 751  : 		this->_Myproxy->_Mycont = this;
; 752  : 		}
; 753  : 
; 754  : 	void _Free_proxy()
; 755  : 		{	// destroy proxy
; 756  : 		typename _Alty::template rebind<_Container_proxy>::other
; 757  : 			_Alproxy;
; 758  : 		this->_Orphan_all();
; 759  : 		_Alproxy.destroy(this->_Myproxy);
; 760  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 761  : 		this->_Myproxy = 0;
; 762  : 		}
; 763  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 764  : 
; 765  : 	_Nodeptr _Buyheadnode()
; 766  : 		{	// get head node using current allocator
; 767  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));
; 768  : 		}
; 769  : 
; 770  : 	void _Freeheadnode(_Nodeptr _Pnode)
; 771  : 		{	// free head node using current allocator
; 772  : 		this->_Getal().destroy(
; 773  : 			_STD addressof(this->_Nextnode(_Pnode)));
; 774  : 		this->_Getal().destroy(
; 775  : 			_STD addressof(this->_Prevnode(_Pnode)));
; 776  : 		this->_Getal().deallocate(_Pnode, 1);
; 777  : 		}
; 778  : 
; 779  : 	_Nodeptr _Buynode0(_Nodeptr _Next,
; 780  : 		_Nodeptr _Prev)
; 781  : 		{	// allocate a node and set links
; 782  : 		_Nodeptr _Pnode = this->_Getal().allocate(1);
; 783  : 
; 784  : 		if (_Next == _Nodeptr())
; 785  : 			{	// point at self
; 786  : 			_Next = _Pnode;
; 787  : 			_Prev = _Pnode;
; 788  : 			}
; 789  : 		_TRY_BEGIN
; 790  : 		this->_Getal().construct(
; 791  : 			_STD addressof(this->_Nextnode(_Pnode)), _Next);
; 792  : 		this->_Getal().construct(
; 793  : 			_STD addressof(this->_Prevnode(_Pnode)), _Prev);
; 794  : 		_CATCH_ALL
; 795  : 		this->_Getal().deallocate(_Pnode, 1);
; 796  : 		_RERAISE;
; 797  : 		_CATCH_END
; 798  : 
; 799  : 		return (_Pnode);
; 800  : 		}
; 801  : 
; 802  : 	_Alty _Getal() const
; 803  : 		{	// get reference to allocator
; 804  : 		return (_Alty());
; 805  : 		}
; 806  : 	};
; 807  : 
; 808  : 		// TEMPLATE CLASS _List_buy
; 809  : template<class _Ty,
; 810  : 	class _Alloc>
; 811  : 	class _List_buy
; 812  : 		: public _List_alloc<!is_empty<_Alloc>::value,
; 813  : 			_List_base_types<_Ty, _Alloc> >
; 814  : 	{	// base class for list to hold buynode/freenode functions
; 815  : public:
; 816  : 	typedef _List_alloc<!is_empty<_Alloc>::value,
; 817  : 		_List_base_types<_Ty, _Alloc> > _Mybase;
; 818  : 	typedef typename _Mybase::_Alty _Alty;
; 819  : 	typedef typename _Mybase::_Nodeptr _Nodeptr;
; 820  : 
; 821  : 	_List_buy(const _Alloc& _Al = _Alloc())
; 822  : 		: _Mybase(_Al)
; 823  : 		{	// construct from allocator
; 824  : 		}
; 825  : 
; 826  : 	template<class... _Valty>
; 827  : 		_Nodeptr _Buynode(_Nodeptr _Next, _Nodeptr _Prev,
; 828  : 			_Valty&&... _Val)
; 829  : 		{	// allocate a node and set links and value
; 830  : 		_Nodeptr _Pnode = this->_Buynode0(_Next, _Prev);
; 831  : 
; 832  : 		_TRY_BEGIN
; 833  : 		this->_Getal().construct(
; 834  : 			_STD addressof(this->_Myval(_Pnode)),
; 835  : 				_STD forward<_Valty>(_Val)...);
; 836  : 		_CATCH_ALL
; 837  : 		this->_Getal().deallocate(_Pnode, 1);
; 838  : 		_RERAISE;
; 839  : 		_CATCH_END
; 840  : 
; 841  : 		return (_Pnode);
; 842  : 		}
; 843  : 
; 844  : 
; 845  : 	void _Freenode(_Nodeptr _Pnode)
; 846  : 		{	// give node back
; 847  : 		this->_Getal().destroy(
; 848  : 			_STD addressof(this->_Nextnode(_Pnode)));
; 849  : 		this->_Getal().destroy(
; 850  : 			_STD addressof(this->_Prevnode(_Pnode)));
; 851  : 		this->_Getal().destroy(
; 852  : 			_STD addressof(this->_Myval(_Pnode)));
; 853  : 		this->_Getal().deallocate(_Pnode, 1);
; 854  : 		}
; 855  : 	};
; 856  : 
; 857  : 		// TEMPLATE CLASS list
; 858  : template<class _Ty,
; 859  : 	class _Alloc = allocator<_Ty> >
; 860  : 	class list
; 861  : 		: public _List_buy<_Ty, _Alloc>
; 862  : 	{	// bidirectional linked list
; 863  : public:
; 864  : 	typedef list<_Ty, _Alloc> _Myt;
; 865  : 	typedef _List_buy<_Ty, _Alloc> _Mybase;
; 866  : 	typedef typename _Mybase::_Node _Node;
; 867  : 	typedef typename _Mybase::_Nodeptr _Nodeptr;
; 868  : 	typedef typename _Mybase::_Alty _Alty;
; 869  : 
; 870  : 	typedef _Alloc allocator_type;
; 871  : 	typedef typename _Mybase::size_type size_type;
; 872  : 	typedef typename _Mybase::difference_type difference_type;
; 873  : 	typedef typename _Mybase::pointer pointer;
; 874  : 	typedef typename _Mybase::const_pointer const_pointer;
; 875  : 	typedef typename _Mybase::reference reference;
; 876  : 	typedef typename _Mybase::const_reference const_reference;
; 877  : 	typedef typename _Mybase::value_type value_type;
; 878  : 
; 879  : 	typedef typename _Mybase::const_iterator const_iterator;
; 880  : 	typedef typename _Mybase::iterator iterator;
; 881  : 	typedef typename _Mybase::_Unchecked_const_iterator
; 882  : 		_Unchecked_const_iterator;
; 883  : 	typedef typename _Mybase::_Unchecked_iterator
; 884  : 		_Unchecked_iterator;
; 885  : 
; 886  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 887  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 888  : 
; 889  : 	list()
; 890  : 		: _Mybase()
; 891  : 		{	// construct empty list
; 892  : 		}
; 893  : 
; 894  : 	explicit list(const _Alloc& _Al)
; 895  : 		: _Mybase(_Al)
; 896  : 		{	// construct empty list, allocator
; 897  : 		}
; 898  : 
; 899  : 	explicit list(size_type _Count)
; 900  : 		: _Mybase()
; 901  : 		{	// construct list from _Count * _Ty()
; 902  : 		resize(_Count);
; 903  : 		}
; 904  : 
; 905  : 	list(size_type _Count, const _Ty& _Val)
; 906  : 		: _Mybase()
; 907  : 		{	// construct list from _Count * _Val
; 908  : 		_Construct_n(_Count, _Val);
; 909  : 		}
; 910  : 
; 911  : 	list(size_type _Count, const _Ty& _Val, const _Alloc& _Al)
; 912  : 		: _Mybase(_Al)
; 913  : 		{	// construct list from _Count * _Val, allocator
; 914  : 		_Construct_n(_Count, _Val);
; 915  : 		}
; 916  : 
; 917  : 	list(const _Myt& _Right)
; 918  : 
; 919  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 920  : 
; 921  : 
; 922  : 		{	// construct list by copying _Right
; 923  : 		_TRY_BEGIN
; 924  : 		insert(begin(), _Right.begin(), _Right.end());
; 925  : 		_CATCH_ALL
; 926  : 		_Tidy();
; 927  : 		_RERAISE;
; 928  : 		_CATCH_END
; 929  : 		}
; 930  : 
; 931  : 	list(const _Myt& _Right, const _Alloc& _Al)
; 932  : 		: _Mybase(_Al)
; 933  : 		{	// construct list by copying _Right, allocator
; 934  : 		_TRY_BEGIN
; 935  : 		insert(begin(), _Right.begin(), _Right.end());
; 936  : 		_CATCH_ALL
; 937  : 		_Tidy();
; 938  : 		_RERAISE;
; 939  : 		_CATCH_END
; 940  : 		}
; 941  : 
; 942  : 	template<class _Iter,
; 943  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 944  : 			void>::type>
; 945  : 		list(_Iter _First, _Iter _Last)
; 946  : 		: _Mybase()
; 947  : 		{	// construct list from [_First, _Last)
; 948  : 		_Construct(_First, _Last);
; 949  : 		}
; 950  : 
; 951  : 	template<class _Iter,
; 952  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 953  : 			void>::type>
; 954  : 		list(_Iter _First, _Iter _Last, const _Alloc& _Al)
; 955  : 		: _Mybase(_Al)
; 956  : 		{	// construct list, allocator from [_First, _Last)
; 957  : 		_Construct(_First, _Last);
; 958  : 		}
; 959  : 
; 960  : 	template<class _Iter>
; 961  : 		void _Construct(_Iter _First, _Iter _Last)
; 962  : 		{	// construct list from [_First, _Last), input iterators
; 963  : 		_TRY_BEGIN
; 964  : 		insert(begin(), _First, _Last);
; 965  : 		_CATCH_ALL
; 966  : 		_Tidy();
; 967  : 		_RERAISE;
; 968  : 		_CATCH_END
; 969  : 		}
; 970  : 
; 971  : 	void _Construct_n(size_type _Count,
; 972  : 		const _Ty& _Val)
; 973  : 		{	// construct from _Count * _Val
; 974  : 		_TRY_BEGIN
; 975  : 		_Insert_n(_Unchecked_begin(), _Count, _Val);
; 976  : 		_CATCH_ALL
; 977  : 		_Tidy();
; 978  : 		_RERAISE;
; 979  : 		_CATCH_END
; 980  : 		}
; 981  : 
; 982  : 	list(_Myt&& _Right)
; 983  : 		: _Mybase(_Right._Getal())
; 984  : 		{	// construct list by moving _Right
; 985  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 986  : 		}
; 987  : 
; 988  : 	list(_Myt&& _Right, const _Alloc& _Al)
; 989  : 		: _Mybase(_Al)
; 990  : 		{	// construct list by moving _Right, allocator
; 991  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 992  : 		}
; 993  : 
; 994  : 	_Myt& operator=(_Myt&& _Right)
; 995  : 		{	// assign by moving _Right
; 996  : 		if (this != &_Right)
; 997  : 			{	// different, assign it
; 998  : 			clear();
; 999  : 
; 1000 : 			if (_Alty::propagate_on_container_move_assignment::value
; 1001 : 				&& this->_Getal() != _Right._Getal())
; 1002 : 				this->_Change_alloc(_Right._Getal());
; 1003 : 
; 1004 : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 1005 : 			}
; 1006 : 		return (*this);
; 1007 : 		}
; 1008 : 
; 1009 : 	void _Assign_rv(_Myt&& _Right)
; 1010 : 		{	// swap with empty *this, same allocator
; 1011 : 		this->_Swap_all(_Right);
; 1012 : 		_Swap_adl(this->_Myhead, _Right._Myhead);
; 1013 : 		_STD swap(this->_Mysize, _Right._Mysize);
; 1014 : 		}
; 1015 : 
; 1016 : 	void push_front(_Ty&& _Val)
; 1017 : 		{	// insert element at beginning
; 1018 : 		_Insert(_Unchecked_begin(), _STD forward<_Ty>(_Val));
; 1019 : 		}
; 1020 : 
; 1021 : 	void push_back(_Ty&& _Val)
; 1022 : 		{	// insert element at end
; 1023 : 		_Insert(_Unchecked_end(), _STD forward<_Ty>(_Val));
; 1024 : 		}
; 1025 : 
; 1026 : 	iterator insert(const_iterator _Where, _Ty&& _Val)
; 1027 : 		{	// insert _Val at _Where
; 1028 : 		return (emplace(_Where, _STD forward<_Ty>(_Val)));
; 1029 : 		}
; 1030 : 
; 1031 : 	template<class... _Valty>
; 1032 : 		void emplace_front(_Valty&&... _Val)
; 1033 : 		{	// insert element at beginning
; 1034 : 		_Insert(_Unchecked_begin(), _STD forward<_Valty>(_Val)...);
; 1035 : 		}
; 1036 : 
; 1037 : 	template<class... _Valty>
; 1038 : 		void emplace_back(_Valty&&... _Val)
; 1039 : 		{	// insert element at end
; 1040 : 		_Insert(_Unchecked_end(), _STD forward<_Valty>(_Val)...);
; 1041 : 		}
; 1042 : 
; 1043 : 	template<class... _Valty>
; 1044 : 		iterator emplace(const_iterator _Where, _Valty&&... _Val)
; 1045 : 		{	// insert element at _Where
; 1046 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1047 : 		if (_Where._Getcont() != this)
; 1048 : 			_DEBUG_ERROR("list emplace iterator outside range");
; 1049 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1050 : 
; 1051 : 		_Insert(_Where._Unchecked(), _STD forward<_Valty>(_Val)...);
; 1052 : 		return (_Make_iter(--_Where));
; 1053 : 		}
; 1054 : 
; 1055 : 	template<class... _Valty>
; 1056 : 		void _Insert(_Unchecked_const_iterator _Where,
; 1057 : 		_Valty&&... _Val)
; 1058 : 		{	// insert element at _Where
; 1059 : 		_Nodeptr _Pnode = _Where._Mynode();
; 1060 : 		_Nodeptr _Newnode =
; 1061 : 			this->_Buynode(_Pnode, this->_Prevnode(_Pnode),
; 1062 : 				_STD forward<_Valty>(_Val)...);

  0000c	ff 77 04	 push	 DWORD PTR [edi+4]
  0000f	57		 push	 edi
  00010	e8 00 00 00 00	 call	 ??$_Buynode@ABUSChannel@CServerStateChecker@@@?$_List_buy@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@PAU21@0ABUSChannel@CServerStateChecker@@@Z ; std::_List_buy<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::_Buynode<CServerStateChecker::SChannel const &>
  00015	8b d0		 mov	 edx, eax

; 1288 : 
; 1289 : 	void pop_back()
; 1290 : 		{	// erase element at end
; 1291 : 		erase(--end());
; 1292 : 		}
; 1293 : 
; 1294 : 	template<class _Iter>
; 1295 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1296 : 			void>::type
; 1297 : 		assign(_Iter _First, _Iter _Last)
; 1298 : 		{	// assign [_First, _Last), input iterators
; 1299 : 		iterator _Old = begin();
; 1300 : 		_TRY_BEGIN
; 1301 : 		for (; _First != _Last && _Old != end(); ++_First, ++_Old)
; 1302 : 			_Reusenode(_Old, *_First);
; 1303 : 		for (; _First != _Last; ++_First)
; 1304 : 			_Insert(_Unchecked_end(), *_First);
; 1305 : 		_CATCH_ALL
; 1306 : 		clear();
; 1307 : 		_RERAISE;
; 1308 : 		_CATCH_END
; 1309 : 		erase(_Old, end());
; 1310 : 		}
; 1311 : 
; 1312 : 	template<class _TArg>
; 1313 : 		void _Reusenode(iterator _Where, _TArg&& _Arg)
; 1314 : 		{	// destroy the element at _Where and reconstruct from _Arg
; 1315 : 		_TRY_BEGIN
; 1316 : 		this->_Getal().destroy(
; 1317 : 			_STD addressof(this->_Myval(_Where._Ptr)));
; 1318 : 		this->_Getal().construct(
; 1319 : 			_STD addressof(this->_Myval(_Where._Ptr)),
; 1320 : 			_STD forward<_TArg>(_Arg));
; 1321 : 		_CATCH_ALL
; 1322 : 		_Unlinknode(_Where);
; 1323 : 		this->_Getal().destroy(
; 1324 : 			_STD addressof(this->_Nextnode(_Where._Ptr)));
; 1325 : 		this->_Getal().destroy(
; 1326 : 			_STD addressof(this->_Prevnode(_Where._Ptr)));
; 1327 : 		this->_Getal().deallocate(_Where._Ptr, 1);
; 1328 : 		_RERAISE;
; 1329 : 		_CATCH_END
; 1330 : 		}
; 1331 : 
; 1332 : 	void assign(size_type _Count, const _Ty& _Val)
; 1333 : 		{	// assign _Count * _Val
; 1334 : 		clear();
; 1335 : 		_Insert_n(_Unchecked_begin(), _Count, _Val);
; 1336 : 		}
; 1337 : 
; 1338 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1339 : 		{	// insert _Val at _Where
; 1340 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1341 : 		if (_Where._Getcont() != this)
; 1342 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1343 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1344 : 
; 1345 : 		_Insert(_Where._Unchecked(), _Val);
; 1346 : 		return (_Make_iter(--_Where));
; 1347 : 		}
; 1348 : 
; 1349 : 	iterator insert(const_iterator _Where, size_type _Count, const _Ty& _Val)
; 1350 : 		{	// insert _Count * _Val at _Where
; 1351 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1352 : 		if (_Where._Getcont() != this)
; 1353 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1354 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1355 : 
; 1356 : 		iterator _Prev = _Make_iter(_Where);
; 1357 : 		if (_Prev == begin())
; 1358 : 			{	// insert sequence at beginning
; 1359 : 			_Insert_n(_Where._Unchecked(), _Count, _Val);
; 1360 : 			return (begin());
; 1361 : 			}
; 1362 : 		else
; 1363 : 			{	// insert sequence not at beginning
; 1364 : 			--_Prev;
; 1365 : 			_Insert_n(_Where._Unchecked(), _Count, _Val);
; 1366 : 			return (++_Prev);
; 1367 : 			}
; 1368 : 		}
; 1369 : 
; 1370 : 	template<class _Iter>
; 1371 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1372 : 			iterator>::type
; 1373 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1374 : 		{	// insert [_First, _Last) at _Where
; 1375 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1376 : 		if (_Where._Getcont() != this)
; 1377 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1378 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1379 : 
; 1380 : 		iterator _Prev = _Make_iter(_Where);
; 1381 : 		if (_Prev == begin())
; 1382 : 			{	// insert sequence at beginning
; 1383 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1384 : 				_Iter_cat(_First));
; 1385 : 			return (begin());
; 1386 : 			}
; 1387 : 		else
; 1388 : 			{	// insert sequence not at beginning
; 1389 : 			--_Prev;
; 1390 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1391 : 				_Iter_cat(_First));
; 1392 : 			return (++_Prev);
; 1393 : 			}
; 1394 : 		}
; 1395 : 
; 1396 : 	template<class _Iter>
; 1397 : 		void _Insert_range(_Unchecked_const_iterator _Where,
; 1398 : 			_Iter _First, _Iter _Last, input_iterator_tag)
; 1399 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1400 : 		size_type _Num = 0;
; 1401 : 
; 1402 : 		_TRY_BEGIN
; 1403 : 		for (; _First != _Last; ++_First, ++_Num)
; 1404 : 			_Insert(_Where, *_First);
; 1405 : 		_CATCH_ALL
; 1406 : 		for (; 0 < _Num; --_Num)
; 1407 : 			{	// undo inserts
; 1408 : 			_Unchecked_const_iterator _Before = _Where;
; 1409 : 			_Unchecked_erase(--_Before);
; 1410 : 			}
; 1411 : 		_RERAISE;
; 1412 : 		_CATCH_END
; 1413 : 		}
; 1414 : 
; 1415 : 	template<class _Iter>
; 1416 : 		void _Insert_range(_Unchecked_const_iterator _Where,
; 1417 : 			_Iter _First, _Iter _Last, forward_iterator_tag)
; 1418 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1419 : 		_DEBUG_RANGE(_First, _Last);
; 1420 : 		_Iter _Next = _First;
; 1421 : 
; 1422 : 		_TRY_BEGIN
; 1423 : 		for (; _First != _Last; ++_First)
; 1424 : 			_Insert(_Where, *_First);
; 1425 : 		_CATCH_ALL
; 1426 : 		for (; _Next != _First; ++_Next)
; 1427 : 			{	// undo inserts
; 1428 : 			_Unchecked_const_iterator _Before = _Where;
; 1429 : 			_Unchecked_erase(--_Before);
; 1430 : 			}
; 1431 : 		_RERAISE;
; 1432 : 		_CATCH_END
; 1433 : 		}
; 1434 : 
; 1435 : 	_Nodeptr _Unlinknode(const_iterator _Where)
; 1436 : 		{	// unlink node at _Where from the list
; 1437 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1438 : 		if (_Where._Getcont() != this || _Where._Ptr == this->_Myhead)
; 1439 : 			_DEBUG_ERROR("list erase iterator outside range");
; 1440 : 		_Nodeptr _Pnode = (_Where)._Mynode();
; 1441 : 		_Orphan_ptr(*this, _Pnode);
; 1442 : 
; 1443 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1444 : 		_Nodeptr _Pnode = (_Where)._Mynode();
; 1445 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1446 : 
; 1447 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1448 : 			this->_Nextnode(_Pnode);
; 1449 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1450 : 			this->_Prevnode(_Pnode);
; 1451 : 
; 1452 : 		--this->_Mysize;
; 1453 : 		return (_Pnode);
; 1454 : 		}
; 1455 : 
; 1456 : 	iterator erase(const_iterator _Where)
; 1457 : 		{	// erase element at _Where
; 1458 : 		_Nodeptr _Pnode = _Unlinknode(_Where++);
; 1459 : 		this->_Freenode(_Pnode);
; 1460 : 		return (_Make_iter(_Where));
; 1461 : 		}
; 1462 : 
; 1463 : 	void _Unchecked_erase(_Unchecked_const_iterator _Where)
; 1464 : 		{	// erase element at _Where
; 1465 : 		_Nodeptr _Pnode = _Where._Mynode();
; 1466 : 
; 1467 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1468 : 			this->_Nextnode(_Pnode);
; 1469 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1470 : 			this->_Prevnode(_Pnode);
; 1471 : 		this->_Freenode(_Pnode);
; 1472 : 		--this->_Mysize;
; 1473 : 		}
; 1474 : 
; 1475 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1476 : 		{	// erase [_First, _Last)
; 1477 : 		if (_First == begin() && _Last == end())
; 1478 : 			{	// erase all and return fresh iterator
; 1479 : 			clear();
; 1480 : 			return (end());
; 1481 : 			}
; 1482 : 		else
; 1483 : 			{	// erase subrange
; 1484 : 			while (_First != _Last)
; 1485 : 				_First = erase(_First);
; 1486 : 			return (_Make_iter(_Last));
; 1487 : 			}
; 1488 : 		}
; 1489 : 
; 1490 : 	void clear() _NOEXCEPT
; 1491 : 		{	// erase all
; 1492 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1493 : 		this->_Orphan_ptr(*this, nullptr);
; 1494 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1495 : 
; 1496 : 		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead);
; 1497 : 		this->_Nextnode(this->_Myhead) = this->_Myhead;
; 1498 : 		this->_Prevnode(this->_Myhead) = this->_Myhead;
; 1499 : 		this->_Mysize = 0;
; 1500 : 
; 1501 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead; _Pnode = _Pnext)
; 1502 : 			{	// delete an element
; 1503 : 			_Pnext = this->_Nextnode(_Pnode);
; 1504 : 			this->_Freenode(_Pnode);
; 1505 : 			}
; 1506 : 		}
; 1507 : 
; 1508 : 	void swap(_Myt& _Right)
; 1509 : 		{	// exchange contents with _Right
; 1510 : 		if (this == &_Right)
; 1511 : 			;	// same object, do nothing
; 1512 : 		else if (this->_Getal() == _Right._Getal())
; 1513 : 			{	// same allocator, swap control information
; 1514 : 			this->_Swap_all(_Right);
; 1515 : 			_Swap_adl(this->_Myhead, _Right._Myhead);
; 1516 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1517 : 			}
; 1518 : 
; 1519 : 		else if (_Alty::propagate_on_container_swap::value)
; 1520 : 			{	// swap allocators and control information
; 1521 : 			this->_Swap_alloc(_Right);
; 1522 : 			_Swap_adl(this->_Myhead, _Right._Myhead);
; 1523 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1524 : 			}
; 1525 : 
; 1526 : 		else	// containers are incompatible
; 1527 : 
; 1528 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1529 : 			_DEBUG_ERROR("list containers incompatible for swap");
; 1530 : 
; 1531 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1532 : 			_XSTD terminate();
; 1533 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1534 : 		}
; 1535 : 
; 1536 : 	void splice(const_iterator _Where, _Myt& _Right)
; 1537 : 		{	// splice all of _Right at _Where
; 1538 : 		if (this != &_Right && !_Right.empty())
; 1539 : 			{	// worth splicing, do it
; 1540 : 			_Splice(_Where, _Right, _Right.begin(), _Right.end(),
; 1541 : 				_Right._Mysize);
; 1542 : 			}
; 1543 : 		}
; 1544 : 
; 1545 : 	void splice(const_iterator _Where, _Myt&& _Right)
; 1546 : 		{	// splice all of _Right at _Where
; 1547 : 		splice(_Where, (_Myt&)_Right);
; 1548 : 		}
; 1549 : 
; 1550 : 	void splice(const_iterator _Where, _Myt& _Right,
; 1551 : 		const_iterator _First)
; 1552 : 		{	// splice _Right [_First, _First + 1) at _Where
; 1553 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1554 : 		if (_First == _Right.end())
; 1555 : 			_DEBUG_ERROR("list splice iterator outside range");
; 1556 : 		else
; 1557 : 
; 1558 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1559 : 		if (_First != _Right.end())
; 1560 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1561 : 
; 1562 : 			{	// element exists, try splice
; 1563 : 			const_iterator _Last = _First;
; 1564 : 			++_Last;
; 1565 : 			if (this != &_Right
; 1566 : 				|| (_Where != _First && _Where != _Last))
; 1567 : 				_Splice(_Where, _Right, _First, _Last, 1);
; 1568 : 			}
; 1569 : 		}
; 1570 : 
; 1571 : 	void splice(const_iterator _Where, _Myt&& _Right,
; 1572 : 		const_iterator _First)
; 1573 : 		{	// splice _Right [_First, _First + 1) at _Where
; 1574 : 		splice(_Where, (_Myt&)_Right, _First);
; 1575 : 		}
; 1576 : 
; 1577 : 	void splice(const_iterator _Where,
; 1578 : 		_Myt& _Right, const_iterator _First, const_iterator _Last)
; 1579 : 		{	// splice _Right [_First, _Last) at _Where
; 1580 : 		if (_First != _Last && (this != &_Right || _Where != _Last))
; 1581 : 			{	// worth splicing, do it
; 1582 : 			size_type _Count = 0;
; 1583 : 
; 1584 : 			if (this == &_Right)
; 1585 : 				;	// just rearrange this list
; 1586 : 			else if (_First == _Right.begin() && _Last == _Right.end())
; 1587 : 				_Count = _Right._Mysize;	// splice in whole list
; 1588 : 			else
; 1589 : 				{	// count nodes and check for knot
; 1590 : 				const_iterator _Next = _First;
; 1591 : 
; 1592 : 				for (; _Next != _Last; ++_Next, ++_Count)
; 1593 : 					if (_Next == _Right.end())
; 1594 : 						_Xlength_error("list<T> bad splice");
; 1595 : 				}
; 1596 : 			_Splice(_Where, _Right, _First, _Last, _Count);
; 1597 : 			}
; 1598 : 		}
; 1599 : 
; 1600 : 	void splice(const_iterator _Where,
; 1601 : 		_Myt&& _Right, const_iterator _First, const_iterator _Last)
; 1602 : 		{	// splice _Right [_First, _Last) at _Where
; 1603 : 		splice(_Where, (_Myt&)_Right, _First, _Last);
; 1604 : 		}
; 1605 : 
; 1606 : 	void remove(const _Ty& _Val)
; 1607 : 		{	// erase each element matching _Val
; 1608 : 		iterator _Val_it = end();
; 1609 : 
; 1610 : 		for (iterator _First = begin(); _First != end(); )
; 1611 : 			if (*_First == _Val)
; 1612 : 				if (_STD addressof(*_First) == _STD addressof(_Val))
; 1613 : 					_Val_it = _First++;
; 1614 : 				else
; 1615 : 					_First = erase(_First);
; 1616 : 			else
; 1617 : 				++_First;
; 1618 : 
; 1619 : 		if (_Val_it != end())
; 1620 : 			erase(_Val_it);
; 1621 : 		}
; 1622 : 
; 1623 : 	template<class _Pr1>
; 1624 : 		void remove_if(_Pr1 _Pred)
; 1625 : 		{	// erase each element satisfying _Pred
; 1626 : 		for (iterator _First = begin(); _First != end(); )
; 1627 : 			if (_Pred(*_First))
; 1628 : 				_First = erase(_First);
; 1629 : 			else
; 1630 : 				++_First;
; 1631 : 		}
; 1632 : 
; 1633 : 	void unique()
; 1634 : 		{	// erase each element matching previous
; 1635 : 		unique(equal_to<>());
; 1636 : 		}
; 1637 : 
; 1638 : 	template<class _Pr2>
; 1639 : 		void unique(_Pr2 _Pred)
; 1640 : 		{	// erase each element satisfying _Pred with previous
; 1641 : 		const _Nodeptr _Phead = this->_Myhead;
; 1642 : 		_Nodeptr _Pprev = this->_Nextnode(_Phead);
; 1643 : 		_Nodeptr _Pnode = this->_Nextnode(_Pprev);
; 1644 : 
; 1645 : 		while (_Pnode != _Phead)
; 1646 : 			if (_Pred(_Pprev->_Myval, _Pnode->_Myval))
; 1647 : 				{	// match, remove it
; 1648 : 				const _Nodeptr _Perase = _Pnode;
; 1649 : 				_Pnode = this->_Nextnode(_Pnode);
; 1650 : 
; 1651 : 				this->_Nextnode(_Pprev) = _Pnode;
; 1652 : 				this->_Prevnode(_Pnode) = _Pprev;
; 1653 : 				this->_Freenode(_Perase);
; 1654 : 
; 1655 : 				--this->_Mysize;
; 1656 : 				}
; 1657 : 			else
; 1658 : 				{	// no match, advance
; 1659 : 				_Pprev = _Pnode;
; 1660 : 				_Pnode = this->_Nextnode(_Pnode);
; 1661 : 				}
; 1662 : 		}
; 1663 : 
; 1664 : 	void merge(_Myt& _Right)
; 1665 : 		{	// merge in elements from _Right, both ordered by operator<
; 1666 : 		merge(_Right, less<>());
; 1667 : 		}
; 1668 : 
; 1669 : 	void merge(_Myt&& _Right)
; 1670 : 		{	// merge in elements from _Right, both ordered by operator<
; 1671 : 		merge((_Myt&)_Right);
; 1672 : 		}
; 1673 : 
; 1674 : 	template<class _Pr2>
; 1675 : 		void merge(_Myt& _Right, _Pr2 _Pred)
; 1676 : 		{	// merge in elements from _Right, both ordered by _Pred
; 1677 : 		if (&_Right != this)
; 1678 : 			{	// safe to merge, do it
; 1679 : 			iterator _First1 = begin(), _Last1 = end();
; 1680 : 			iterator _First2 = _Right.begin(), _Last2 = _Right.end();
; 1681 : 			_DEBUG_ORDER_PRED(_First1, _Last1, _Pred);
; 1682 : 			_DEBUG_ORDER_PRED(_First2, _Last2, _Pred);
; 1683 : 
; 1684 : 			while (_First1 != _Last1 && _First2 != _Last2)
; 1685 : 				if (_DEBUG_LT_PRED(_Pred, *_First2, *_First1))
; 1686 : 					{	// splice in an element from _Right
; 1687 : 					iterator _Mid2 = _First2;
; 1688 : 					_Splice(_First1, _Right, _First2, ++_Mid2, 1);
; 1689 : 					_First2 = _Mid2;
; 1690 : 					}
; 1691 : 				else
; 1692 : 					++_First1;
; 1693 : 
; 1694 : 			if (_First2 != _Last2)
; 1695 : 				_Splice(_Last1, _Right, _First2, _Last2,
; 1696 : 					_Right._Mysize);	// splice remainder of _Right
; 1697 : 			}
; 1698 : 		}
; 1699 : 
; 1700 : 	template<class _Pr2>
; 1701 : 		void merge(_Myt&& _Right, _Pr2 _Pred)
; 1702 : 		{	// merge in elements from _Right, both ordered by _Pred
; 1703 : 		merge((_Myt&)_Right, _Pred);
; 1704 : 		}
; 1705 : 
; 1706 : 	void sort()
; 1707 : 		{	// order sequence, using operator<
; 1708 : 		sort(less<>());
; 1709 : 		}
; 1710 : 
; 1711 : 	template<class _Pr2>
; 1712 : 		void sort(_Pr2 _Pred)
; 1713 : 		{	// order sequence, using _Pred
; 1714 : 		if (2 <= this->_Mysize)
; 1715 : 			{	// worth sorting, do it
; 1716 : 			const size_t _MAXBINS = 25;
; 1717 : 			_Myt _Templist(this->_Getal()), _Binlist[_MAXBINS + 1];
; 1718 : 			size_t _Maxbin = 0;
; 1719 : 
; 1720 : 			while (!empty())
; 1721 : 				{	// sort another element, using bins
; 1722 : 				_Templist._Splice_same(_Templist.begin(), *this, begin(),
; 1723 : 					++begin(), 1);
; 1724 : 
; 1725 : 				size_t _Bin;
; 1726 : 				for (_Bin = 0; _Bin < _Maxbin && !_Binlist[_Bin].empty();
; 1727 : 					++_Bin)
; 1728 : 					{	// merge into ever larger bins
; 1729 : 					_Binlist[_Bin].merge(_Templist, _Pred);
; 1730 : 					_Binlist[_Bin].swap(_Templist);
; 1731 : 					}
; 1732 : 
; 1733 : 				if (_Bin == _MAXBINS)
; 1734 : 					_Binlist[_Bin - 1].merge(_Templist, _Pred);
; 1735 : 				else
; 1736 : 					{	// spill to new bin, while they last
; 1737 : 					_Binlist[_Bin].swap(_Templist);
; 1738 : 					if (_Bin == _Maxbin)
; 1739 : 						++_Maxbin;
; 1740 : 					}
; 1741 : 				}
; 1742 : 
; 1743 : 			for (size_t _Bin = 1; _Bin < _Maxbin; ++_Bin)
; 1744 : 				_Binlist[_Bin].merge(_Binlist[_Bin - 1],
; 1745 : 					_Pred);	// merge up
; 1746 : 
; 1747 : 			_Analysis_assume_(0 < _Maxbin);
; 1748 : 
; 1749 : 			splice(begin(), _Binlist[_Maxbin - 1]);	// result in last bin
; 1750 : 			}
; 1751 : 		}
; 1752 : 
; 1753 : 	void reverse() _NOEXCEPT
; 1754 : 		{	// reverse sequence
; 1755 : 		const _Nodeptr _Phead = this->_Myhead;
; 1756 : 		_Nodeptr _Pnode = _Phead;
; 1757 : 
; 1758 : 		for (; ; )
; 1759 : 			{	// flip pointers in a node
; 1760 : 			const _Nodeptr _Pnext = this->_Nextnode(_Pnode);
; 1761 : 			this->_Nextnode(_Pnode) = this->_Prevnode(_Pnode);
; 1762 : 			this->_Prevnode(_Pnode) = _Pnext;
; 1763 : 
; 1764 : 			if (_Pnext == _Phead)
; 1765 : 				break;
; 1766 : 			_Pnode = _Pnext;
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	void _Splice(const_iterator _Where,
; 1771 : 		_Myt& _Right, const_iterator _First, const_iterator _Last,
; 1772 : 		size_type _Count)
; 1773 : 		{	// splice _Right [_First, _Last) before _Where
; 1774 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1775 : 		if (_Where._Getcont() != this)
; 1776 : 			_DEBUG_ERROR("list splice iterator outside range");
; 1777 : 		if (this->_Getal() != _Right._Getal())
; 1778 : 			_DEBUG_ERROR("list containers incompatible for splice");
; 1779 : 
; 1780 : 		if (this != &_Right)
; 1781 : 			{	// transfer ownership
; 1782 : 			_Lockit _Lock(_LOCK_DEBUG);
; 1783 : 
; 1784 : 			const bool _One = _Count == 1;
; 1785 : 			const bool _All = _Count == _Right.size();
; 1786 : 			const bool _Some = !_One && !_All;
; 1787 : 
; 1788 : 			_Nodeptr _Oldprev = _First._Ptr->_Prev;
; 1789 : 
; 1790 : 			if (_Some)
; 1791 : 				for (_Nodeptr _Ptr = _First._Ptr; _Ptr != _Last._Ptr;
; 1792 : 					_Ptr = _Ptr->_Next)
; 1793 : 					{	// mark _Prev pointers
; 1794 : 					_Ptr->_Prev = 0;
; 1795 : 					}
; 1796 : 
; 1797 : 			const_iterator **_Pnext = (const_iterator **)_Right._Getpfirst();
; 1798 : 
; 1799 : 			if (_Pnext == 0)
; 1800 : 				_DEBUG_ERROR("list container corrupted");
; 1801 : 
; 1802 : 			while (*_Pnext != 0)
; 1803 : 				{	// check the iterator
; 1804 : 				const_iterator& _Iter = **_Pnext;
; 1805 : 
; 1806 : 				if ((_One && _Iter._Ptr == _First._Ptr)
; 1807 : 					|| (_All && _Iter._Ptr != _Right._Myhead)
; 1808 : 					|| (_Some && _Iter._Ptr->_Prev == 0))
; 1809 : 					{	// adopt the iterator
; 1810 : 					*_Pnext = (const_iterator *)_Iter._Mynextiter;
; 1811 : 					_Iter._Myproxy = this->_Myproxy;
; 1812 : 					_Iter._Mynextiter = this->_Myproxy->_Myfirstiter;
; 1813 : 					this->_Myproxy->_Myfirstiter = &_Iter;
; 1814 : 					}
; 1815 : 				else
; 1816 : 					{	// skip the iterator
; 1817 : 					_Pnext = (const_iterator **)_Iter._Getpnext();
; 1818 : 					}
; 1819 : 				}
; 1820 : 
; 1821 : 			if (_Some)
; 1822 : 				for (_Nodeptr _Ptr = _First._Ptr; _Ptr != _Last._Ptr;
; 1823 : 					_Ptr = _Ptr->_Next)
; 1824 : 					{	// restore _Prev pointers
; 1825 : 					_Ptr->_Prev = _Oldprev;
; 1826 : 					_Oldprev = _Ptr;
; 1827 : 					}
; 1828 : 			}
; 1829 : 
; 1830 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1831 : 		if (this->_Getal() != _Right._Getal())
; 1832 : 			_XSTD terminate();
; 1833 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1834 : 
; 1835 : 		_Splice_same(_Where, _Right, _First, _Last, _Count);
; 1836 : 		}
; 1837 : 
; 1838 : 	void _Splice_same(const_iterator _Where,
; 1839 : 		_Myt& _Right, const_iterator _First, const_iterator _Last,
; 1840 : 		size_type _Count)
; 1841 : 		{	// splice _Right [_First, _Last) before _Where
; 1842 : 		if (this != &_Right)
; 1843 : 			{	// splicing from another list, adjust counts
; 1844 : 			_Incsize(_Count);
; 1845 : 			_Right._Mysize -= _Count;
; 1846 : 			}
; 1847 : 		this->_Nextnode(this->_Prevnode(_First._Mynode())) =
; 1848 : 			_Last._Mynode();
; 1849 : 		this->_Nextnode(this->_Prevnode(_Last._Mynode())) =
; 1850 : 			_Where._Mynode();
; 1851 : 		this->_Nextnode(this->_Prevnode(_Where._Mynode())) =
; 1852 : 			_First._Mynode();
; 1853 : 
; 1854 : 		_Nodeptr _Pnode = this->_Prevnode(_Where._Mynode());
; 1855 : 		this->_Prevnode(_Where._Mynode()) =
; 1856 : 			this->_Prevnode(_Last._Mynode());
; 1857 : 		this->_Prevnode(_Last._Mynode()) =
; 1858 : 			this->_Prevnode(_First._Mynode());
; 1859 : 		this->_Prevnode(_First._Mynode()) = _Pnode;
; 1860 : 		}
; 1861 : 
; 1862 : 	void _Unchecked_splice(_Unchecked_const_iterator _Where,
; 1863 : 		_Unchecked_const_iterator _First,
; 1864 : 		_Unchecked_const_iterator _Last)
; 1865 : 		{	// splice [_First, _Last) before _Where
; 1866 : 		this->_Nextnode(this->_Prevnode(_First._Mynode())) =
; 1867 : 			_Last._Mynode();
; 1868 : 		this->_Nextnode(this->_Prevnode(_Last._Mynode())) =
; 1869 : 			_Where._Mynode();
; 1870 : 		this->_Nextnode(this->_Prevnode(_Where._Mynode())) =
; 1871 : 			_First._Mynode();
; 1872 : 
; 1873 : 		_Nodeptr _Pnode = this->_Prevnode(_Where._Mynode());
; 1874 : 		this->_Prevnode(_Where._Mynode()) =
; 1875 : 			this->_Prevnode(_Last._Mynode());
; 1876 : 		this->_Prevnode(_Last._Mynode()) =
; 1877 : 			this->_Prevnode(_First._Mynode());
; 1878 : 		this->_Prevnode(_First._Mynode()) = _Pnode;
; 1879 : 		}
; 1880 : 
; 1881 : 	void _Tidy()
; 1882 : 		{	// free all storage
; 1883 : 		clear();
; 1884 : 		}
; 1885 : 
; 1886 : 	void _Insert_n(_Unchecked_const_iterator _Where,
; 1887 : 		size_type _Count, const _Ty& _Val)
; 1888 : 		{	// insert _Count * _Val at _Where
; 1889 : 		size_type _Countsave = _Count;
; 1890 : 
; 1891 : 		_TRY_BEGIN
; 1892 : 		for (; 0 < _Count; --_Count)
; 1893 : 			_Insert(_Where, _Val);
; 1894 : 		_CATCH_ALL
; 1895 : 		for (; _Count < _Countsave; ++_Count)
; 1896 : 			{	// undo inserts
; 1897 : 			_Unchecked_const_iterator _Before = _Where;
; 1898 : 			_Unchecked_erase(--_Before);
; 1899 : 			}
; 1900 : 		_RERAISE;
; 1901 : 		_CATCH_END
; 1902 : 		}
; 1903 : 
; 1904 : 	void _Incsize(size_type _Count)
; 1905 : 		{	// alter element count, with checking
; 1906 : 		if (max_size() - this->_Mysize - 1 < _Count)

  00017	b9 cb cc cc 0c	 mov	 ecx, 214748363		; 0ccccccbH
  0001c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001f	2b c8		 sub	 ecx, eax
  00021	83 f9 01	 cmp	 ecx, 1
  00024	72 12		 jb	 SHORT $LN41@push_back

; 1908 : 		this->_Mysize += _Count;

  00026	40		 inc	 eax
  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1063 : 		_Incsize(1);
; 1064 : 		this->_Prevnode(_Pnode) = _Newnode;

  0002a	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 97   : 		}
; 98   : 
; 99   : 	_Nodeptr _Ptr;	// pointer to node
; 100  : 	};
; 101  : 
; 102  : 	// TEMPLATE CLASS _List_unchecked_iterator
; 103  : template<class _Mylist>
; 104  : 	class _List_unchecked_iterator
; 105  : 		: public _List_unchecked_const_iterator<_Mylist>
; 106  : 	{	// unchecked iterator for mutable list
; 107  : public:
; 108  : 	typedef _List_unchecked_iterator<_Mylist> _Myiter;
; 109  : 	typedef _List_unchecked_const_iterator<_Mylist> _Mybase;
; 110  : 	typedef bidirectional_iterator_tag iterator_category;
; 111  : 
; 112  : 	typedef typename _Mylist::_Nodeptr _Nodeptr;
; 113  : 	typedef typename _Mylist::value_type value_type;
; 114  : 	typedef typename _Mylist::difference_type difference_type;
; 115  : 	typedef typename _Mylist::pointer pointer;
; 116  : 	typedef typename _Mylist::reference reference;
; 117  : 
; 118  : 	_List_unchecked_iterator()
; 119  : 		{	// construct with null node
; 120  : 		}
; 121  : 
; 122  : 	_List_unchecked_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
; 123  : 		: _Mybase(_Pnode, _Plist)
; 124  : 		{	// construct with node pointer _Pnode
; 125  : 		}
; 126  : 
; 127  : 	reference operator*() const
; 128  : 		{	// return designated value
; 129  : 		return ((reference)**(_Mybase *)this);
; 130  : 		}
; 131  : 
; 132  : 	pointer operator->() const
; 133  : 		{	// return pointer to class object
; 134  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 135  : 		}
; 136  : 
; 137  : 	_Myiter& operator++()
; 138  : 		{	// preincrement
; 139  : 		++(*(_Mybase *)this);
; 140  : 		return (*this);
; 141  : 		}
; 142  : 
; 143  : 	_Myiter operator++(int)
; 144  : 		{	// postincrement
; 145  : 		_Myiter _Tmp = *this;
; 146  : 		++*this;
; 147  : 		return (_Tmp);
; 148  : 		}
; 149  : 
; 150  : 	_Myiter& operator--()
; 151  : 		{	// predecrement
; 152  : 		--(*(_Mybase *)this);
; 153  : 		return (*this);
; 154  : 		}
; 155  : 
; 156  : 	_Myiter operator--(int)
; 157  : 		{	// postdecrement
; 158  : 		_Myiter _Tmp = *this;
; 159  : 		--*this;
; 160  : 		return (_Tmp);
; 161  : 		}
; 162  : 	};
; 163  : 
; 164  : 	// TEMPLATE CLASS _List_const_iterator
; 165  : template<class _Mylist>
; 166  : 	class _List_const_iterator
; 167  : 		: public _List_unchecked_const_iterator<_Mylist, _Iterator_base>
; 168  : 	{	// iterator for nonmutable list
; 169  : public:
; 170  : 	typedef _List_const_iterator<_Mylist> _Myiter;
; 171  : 	typedef _List_unchecked_const_iterator<_Mylist, _Iterator_base> _Mybase;
; 172  : 	typedef bidirectional_iterator_tag iterator_category;
; 173  : 
; 174  : 	typedef typename _Mylist::_Nodeptr _Nodeptr;
; 175  : 	typedef typename _Mylist::value_type value_type;
; 176  : 	typedef typename _Mylist::difference_type difference_type;
; 177  : 	typedef typename _Mylist::const_pointer pointer;
; 178  : 	typedef typename _Mylist::const_reference reference;
; 179  : 
; 180  : 	_List_const_iterator()
; 181  : 		: _Mybase()
; 182  : 		{	// construct with null node pointer
; 183  : 		}
; 184  : 
; 185  : 	_List_const_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
; 186  : 		: _Mybase(_Pnode, _Plist)
; 187  : 		{	// construct with node pointer _Pnode
; 188  : 		}
; 189  : 
; 190  : 	typedef _List_unchecked_const_iterator<_Mylist> _Unchecked_type;
; 191  : 
; 192  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 193  : 		{	// reset from unchecked iterator
; 194  : 		this->_Ptr = _Right._Ptr;
; 195  : 		return (*this);
; 196  : 		}
; 197  : 
; 198  : 	_Unchecked_type _Unchecked() const
; 199  : 		{	// make an unchecked iterator
; 200  : 		return (_Unchecked_type(this->_Ptr, (_Mylist *)this->_Getcont()));
; 201  : 		}
; 202  : 
; 203  : 	reference operator*() const
; 204  : 		{	// return designated value
; 205  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 206  : 		if (this->_Getcont() == 0
; 207  : 			|| this->_Ptr == 0
; 208  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 209  : 			{	// report error
; 210  : 			_DEBUG_ERROR("list iterator not dereferencable");
; 211  : 			_SCL_SECURE_OUT_OF_RANGE;
; 212  : 			}
; 213  : 
; 214  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 215  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 216  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 217  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 218  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 219  : 
; 220  : 		return (_Mylist::_Myval(this->_Ptr));
; 221  : 		}
; 222  : 
; 223  : 	_Myiter& operator++()
; 224  : 		{	// preincrement
; 225  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 226  : 		if (this->_Getcont() == 0
; 227  : 			|| this->_Ptr == 0
; 228  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 229  : 			{	// report error
; 230  : 			_DEBUG_ERROR("list iterator not incrementable");
; 231  : 			_SCL_SECURE_OUT_OF_RANGE;
; 232  : 			}
; 233  : 
; 234  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 235  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 236  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 237  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 238  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 239  : 
; 240  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);
; 241  : 		return (*this);
; 242  : 		}
; 243  : 
; 244  : 	_Myiter operator++(int)
; 245  : 		{	// postincrement
; 246  : 		_Myiter _Tmp = *this;
; 247  : 		++*this;
; 248  : 		return (_Tmp);
; 249  : 		}
; 250  : 
; 251  : 	_Myiter& operator--()
; 252  : 		{	// predecrement
; 253  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 254  : 		if (this->_Getcont() == 0
; 255  : 			|| this->_Ptr == 0
; 256  : 			|| (this->_Ptr = _Mylist::_Prevnode(this->_Ptr))
; 257  : 				== ((_Mylist *)this->_Getcont())->_Myhead)
; 258  : 			{	// report error
; 259  : 			_DEBUG_ERROR("list iterator not decrementable");
; 260  : 			_SCL_SECURE_OUT_OF_RANGE;
; 261  : 			}
; 262  : 
; 263  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 264  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 265  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 266  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 267  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 268  : 
; 269  :  #else /* _ITERATOR_DEBUG_LEVEL */
; 270  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 271  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 272  : 
; 273  : 		return (*this);
; 274  : 		}
; 275  : 
; 276  : 	_Myiter operator--(int)
; 277  : 		{	// postdecrement
; 278  : 		_Myiter _Tmp = *this;
; 279  : 		--*this;
; 280  : 		return (_Tmp);
; 281  : 		}
; 282  : 
; 283  : 	bool operator==(const _Myiter& _Right) const
; 284  : 		{	// test for iterator equality
; 285  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 286  : 		if (this->_Getcont() == 0
; 287  : 			|| this->_Getcont() != _Right._Getcont())
; 288  : 			{	// report error
; 289  : 			_DEBUG_ERROR("list iterators incompatible");
; 290  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 291  : 			}
; 292  : 
; 293  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 294  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 295  : 			&& this->_Getcont() == _Right._Getcont());
; 296  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 297  : 
; 298  : 		return (this->_Ptr == _Right._Ptr);
; 299  : 		}
; 300  : 
; 301  : 	bool operator!=(const _Myiter& _Right) const
; 302  : 		{	// test for iterator inequality
; 303  : 		return (!(*this == _Right));
; 304  : 		}
; 305  : 	};
; 306  : 
; 307  : template<class _Mylist> inline
; 308  : 	typename _List_const_iterator<_Mylist>::_Unchecked_type
; 309  : 		_Unchecked(_List_const_iterator<_Mylist> _Iter)
; 310  : 	{	// convert to unchecked
; 311  : 	return (_Iter._Unchecked());
; 312  : 	}
; 313  : 
; 314  : template<class _Mylist> inline
; 315  : 	_List_const_iterator<_Mylist>&
; 316  : 		_Rechecked(_List_const_iterator<_Mylist>& _Iter,
; 317  : 			typename _List_const_iterator<_Mylist>
; 318  : 				::_Unchecked_type _Right)
; 319  : 	{	// convert to checked
; 320  : 	return (_Iter._Rechecked(_Right));
; 321  : 	}
; 322  : 
; 323  : 	// TEMPLATE CLASS _List_iterator
; 324  : template<class _Mylist>
; 325  : 	class _List_iterator
; 326  : 		: public _List_const_iterator<_Mylist>
; 327  : 	{	// iterator for mutable list
; 328  : public:
; 329  : 	typedef _List_iterator<_Mylist> _Myiter;
; 330  : 	typedef _List_const_iterator<_Mylist> _Mybase;
; 331  : 	typedef bidirectional_iterator_tag iterator_category;
; 332  : 
; 333  : 	typedef typename _Mylist::_Nodeptr _Nodeptr;
; 334  : 	typedef typename _Mylist::value_type value_type;
; 335  : 	typedef typename _Mylist::difference_type difference_type;
; 336  : 	typedef typename _Mylist::pointer pointer;
; 337  : 	typedef typename _Mylist::reference reference;
; 338  : 
; 339  : 	_List_iterator()
; 340  : 		{	// construct with null node
; 341  : 		}
; 342  : 
; 343  : 	_List_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
; 344  : 		: _Mybase(_Pnode, _Plist)
; 345  : 		{	// construct with node pointer _Pnode
; 346  : 		}
; 347  : 
; 348  : 	typedef _List_unchecked_iterator<_Mylist> _Unchecked_type;
; 349  : 
; 350  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 351  : 		{	// reset from unchecked iterator
; 352  : 		this->_Ptr = _Right._Ptr;
; 353  : 		return (*this);
; 354  : 		}
; 355  : 
; 356  : 	_Unchecked_type _Unchecked() const
; 357  : 		{	// make an unchecked iterator
; 358  : 		return (_Unchecked_type(this->_Ptr, (_Mylist *)this->_Getcont()));
; 359  : 		}
; 360  : 
; 361  : 	reference operator*() const
; 362  : 		{	// return designated value
; 363  : 		return ((reference)**(_Mybase *)this);
; 364  : 		}
; 365  : 
; 366  : 	pointer operator->() const
; 367  : 		{	// return pointer to class object
; 368  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 369  : 		}
; 370  : 
; 371  : 	_Myiter& operator++()
; 372  : 		{	// preincrement
; 373  : 		++(*(_Mybase *)this);
; 374  : 		return (*this);
; 375  : 		}
; 376  : 
; 377  : 	_Myiter operator++(int)
; 378  : 		{	// postincrement
; 379  : 		_Myiter _Tmp = *this;
; 380  : 		++*this;
; 381  : 		return (_Tmp);
; 382  : 		}
; 383  : 
; 384  : 	_Myiter& operator--()
; 385  : 		{	// predecrement
; 386  : 		--(*(_Mybase *)this);
; 387  : 		return (*this);
; 388  : 		}
; 389  : 
; 390  : 	_Myiter operator--(int)
; 391  : 		{	// postdecrement
; 392  : 		_Myiter _Tmp = *this;
; 393  : 		--*this;
; 394  : 		return (_Tmp);
; 395  : 		}
; 396  : 	};
; 397  : 
; 398  : template<class _Mylist> inline
; 399  : 	typename _List_iterator<_Mylist>::_Unchecked_type
; 400  : 		_Unchecked(_List_iterator<_Mylist> _Iter)
; 401  : 	{	// convert to unchecked
; 402  : 	return (_Iter._Unchecked());
; 403  : 	}
; 404  : 
; 405  : template<class _Mylist> inline
; 406  : 	_List_iterator<_Mylist>&
; 407  : 		_Rechecked(_List_iterator<_Mylist>& _Iter,
; 408  : 			typename _List_iterator<_Mylist>
; 409  : 				::_Unchecked_type _Right)
; 410  : 	{	// convert to checked
; 411  : 	return (_Iter._Rechecked(_Right));
; 412  : 	}
; 413  : 
; 414  : 		// list TYPE WRAPPERS
; 415  : template<class _Value_type,
; 416  : 	class _Size_type,
; 417  : 	class _Difference_type,
; 418  : 	class _Pointer,
; 419  : 	class _Const_pointer,
; 420  : 	class _Reference,
; 421  : 	class _Const_reference,
; 422  : 	class _Nodeptr_type>
; 423  : 	struct _List_iter_types
; 424  : 	{	// wraps types needed by iterators
; 425  : 	typedef _Value_type value_type;
; 426  : 	typedef _Size_type size_type;
; 427  : 	typedef _Difference_type difference_type;
; 428  : 	typedef _Pointer pointer;
; 429  : 	typedef _Const_pointer const_pointer;
; 430  : 	typedef _Reference reference;
; 431  : 	typedef _Const_reference const_reference;
; 432  : 	typedef _Nodeptr_type _Nodeptr;
; 433  : 	};
; 434  : 
; 435  : template<class _Value_type,
; 436  : 	class _Voidptr>
; 437  : 	struct _List_node
; 438  : 		{	// list node
; 439  : 		_Voidptr _Next;	// successor node, or first element if head
; 440  : 		_Voidptr _Prev;	// predecessor node, or last element if head
; 441  : 		_Value_type _Myval;	// the stored value, unused if head
; 442  : 
; 443  : 	private:
; 444  : 		_List_node& operator=(const _List_node&);
; 445  : 		};
; 446  : 
; 447  : template<class _Value_type>
; 448  : 	struct _List_node<_Value_type, void *>
; 449  : 		{	// list node
; 450  : 		typedef _List_node<_Value_type, void *> *_Nodeptr;
; 451  : 		_Nodeptr _Next;	// successor node, or first element if head
; 452  : 		_Nodeptr _Prev;	// predecessor node, or last element if head
; 453  : 		_Value_type _Myval;	// the stored value, unused if head
; 454  : 
; 455  : 	private:
; 456  : 		_List_node& operator=(const _List_node&);
; 457  : 		};
; 458  : 
; 459  : template<class _Ty>
; 460  : 	struct _List_simple_types
; 461  : 		: public _Simple_types<_Ty>
; 462  : 	{	// wraps types needed by iterators
; 463  : 	typedef _List_node<_Ty, void *> _Node;
; 464  : 	typedef _Node *_Nodeptr;
; 465  : 	};
; 466  : 
; 467  : template<class _Ty,
; 468  : 	class _Alloc0>
; 469  : 	struct _List_base_types
; 470  : 	{	// types needed for a container base
; 471  : 	typedef _Alloc0 _Alloc;
; 472  : 	typedef _List_base_types<_Ty, _Alloc> _Myt;
; 473  : 
; 474  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 475  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 476  : 
; 477  : 
; 478  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 479  : 		_Voidptr;
; 480  : 	typedef _List_node<typename _Alty::value_type,
; 481  : 		_Voidptr> _Node;
; 482  : 
; 483  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 484  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 485  : 	typedef _Nodeptr& _Nodepref;
; 486  : 
; 487  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 488  : 		_List_simple_types<typename _Alty::value_type>,
; 489  : 		_List_iter_types<typename _Alty::value_type,
; 490  : 			typename _Alty::size_type,
; 491  : 			typename _Alty::difference_type,
; 492  : 			typename _Alty::pointer,
; 493  : 			typename _Alty::const_pointer,
; 494  : 			typename _Alty::reference,
; 495  : 			typename _Alty::const_reference,
; 496  : 			_Nodeptr> >::type
; 497  : 		_Val_types;
; 498  : 	};
; 499  : 
; 500  : 		// TEMPLATE CLASS _List_val
; 501  : template<class _Val_types>
; 502  : 	class _List_val
; 503  : 		: public _Container_base
; 504  : 	{	// base class for list to hold data
; 505  : public:
; 506  : 	typedef _List_val<_Val_types> _Myt;
; 507  : 
; 508  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 509  : 	typedef _Nodeptr& _Nodepref;
; 510  : 
; 511  : 	typedef typename _Val_types::value_type value_type;
; 512  : 	typedef typename _Val_types::size_type size_type;
; 513  : 	typedef typename _Val_types::difference_type difference_type;
; 514  : 	typedef typename _Val_types::pointer pointer;
; 515  : 	typedef typename _Val_types::const_pointer const_pointer;
; 516  : 	typedef typename _Val_types::reference reference;
; 517  : 	typedef typename _Val_types::const_reference const_reference;
; 518  : 
; 519  : 	typedef _List_const_iterator<_Myt> const_iterator;
; 520  : 	typedef _List_iterator<_Myt> iterator;
; 521  : 
; 522  : 	typedef _List_unchecked_const_iterator<_Myt> _Unchecked_const_iterator;
; 523  : 	typedef _List_unchecked_iterator<_Myt> _Unchecked_iterator;
; 524  : 
; 525  : 	_List_val()
; 526  : 		{	// initialize data
; 527  : 		this->_Myhead = 0;
; 528  : 		this->_Mysize = 0;
; 529  : 		}
; 530  : 
; 531  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 532  : 		{	// return reference to successor pointer in node
; 533  : 		return ((_Nodepref)_Pnode->_Next);

  0002d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi

; 1065 : 		this->_Nextnode(this->_Prevnode(_Newnode)) = _Newnode;

  00032	89 10		 mov	 DWORD PTR [eax], edx

; 1286 : 		_Insert(_Unchecked_end(), _Val);
; 1287 : 		}

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
$LN41@push_back:

; 1907 : 			_Xlength_error("list<T> too long");

  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
  0003d	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN43@push_back:
$LN40@push_back:
  00042	cc		 int	 3
?push_back@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXABUSChannel@CServerStateChecker@@@Z ENDP ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\list
;	COMDAT ?empty@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QBE_NXZ PROC ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::empty, COMDAT
; _this$ = ecx

; 1246 : 		return (this->_Mysize == 0);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 04	 cmp	 DWORD PTR [ecx+4], eax
  00005	0f 94 c0	 sete	 al

; 1247 : 		}

  00008	c3		 ret	 0
?empty@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QBE_NXZ ENDP ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::empty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\list
;	COMDAT ?max_size@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QBEIXZ PROC ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::max_size, COMDAT
; _this$ = ecx

; 1241 : 		return (this->_Getal().max_size());

  00000	b8 cc cc cc 0c	 mov	 eax, 214748364		; 0cccccccH

; 1242 : 		}

  00005	c3		 ret	 0
?max_size@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QBEIXZ ENDP ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\list
;	COMDAT ?_Unchecked_end@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Unchecked_end@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@2@XZ PROC ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::_Unchecked_end, COMDAT
; _this$ = ecx

; 1147 : 		{	// return unchecked iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 44   : 		{	// construct with node pointer _Pnode

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1148 : 		return (_Unchecked_iterator(this->_Myhead, this));
; 1149 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?_Unchecked_end@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@2@XZ ENDP ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::_Unchecked_end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\list
;	COMDAT ?end@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@2@XZ PROC ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::end, COMDAT
; _this$ = ecx

; 1125 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 44   : 		{	// construct with node pointer _Pnode

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1126 : 		return (iterator(this->_Myhead, this));
; 1127 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?end@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@2@XZ ENDP ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\list
;	COMDAT ?begin@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@2@XZ PROC ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::begin, COMDAT
; _this$ = ecx

; 1115 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mylist::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		_Ptr = _Mylist::_Nextnode(_Ptr);
; 61   : 		return (*this);
; 62   : 		}
; 63   : 
; 64   : 	_Myiter operator++(int)
; 65   : 		{	// postincrement
; 66   : 		_Myiter _Tmp = *this;
; 67   : 		++*this;
; 68   : 		return (_Tmp);
; 69   : 		}
; 70   : 
; 71   : 	_Myiter& operator--()
; 72   : 		{	// predecrement
; 73   : 		_Ptr = _Mylist::_Prevnode(_Ptr);
; 74   : 		return (*this);
; 75   : 		}
; 76   : 
; 77   : 	_Myiter operator--(int)
; 78   : 		{	// postdecrement
; 79   : 		_Myiter _Tmp = *this;
; 80   : 		--*this;
; 81   : 		return (_Tmp);
; 82   : 		}
; 83   : 
; 84   : 	bool operator==(const _Myiter& _Right) const
; 85   : 		{	// test for iterator equality
; 86   : 		return (_Ptr == _Right._Ptr);
; 87   : 		}
; 88   : 
; 89   : 	bool operator!=(const _Myiter& _Right) const
; 90   : 		{	// test for iterator inequality
; 91   : 		return (!(*this == _Right));
; 92   : 		}
; 93   : 
; 94   : 	_Nodeptr _Mynode() const
; 95   : 		{	// return node pointer
; 96   : 		return (_Ptr);
; 97   : 		}
; 98   : 
; 99   : 	_Nodeptr _Ptr;	// pointer to node
; 100  : 	};
; 101  : 
; 102  : 	// TEMPLATE CLASS _List_unchecked_iterator
; 103  : template<class _Mylist>
; 104  : 	class _List_unchecked_iterator
; 105  : 		: public _List_unchecked_const_iterator<_Mylist>
; 106  : 	{	// unchecked iterator for mutable list
; 107  : public:
; 108  : 	typedef _List_unchecked_iterator<_Mylist> _Myiter;
; 109  : 	typedef _List_unchecked_const_iterator<_Mylist> _Mybase;
; 110  : 	typedef bidirectional_iterator_tag iterator_category;
; 111  : 
; 112  : 	typedef typename _Mylist::_Nodeptr _Nodeptr;
; 113  : 	typedef typename _Mylist::value_type value_type;
; 114  : 	typedef typename _Mylist::difference_type difference_type;
; 115  : 	typedef typename _Mylist::pointer pointer;
; 116  : 	typedef typename _Mylist::reference reference;
; 117  : 
; 118  : 	_List_unchecked_iterator()
; 119  : 		{	// construct with null node
; 120  : 		}
; 121  : 
; 122  : 	_List_unchecked_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
; 123  : 		: _Mybase(_Pnode, _Plist)
; 124  : 		{	// construct with node pointer _Pnode
; 125  : 		}
; 126  : 
; 127  : 	reference operator*() const
; 128  : 		{	// return designated value
; 129  : 		return ((reference)**(_Mybase *)this);
; 130  : 		}
; 131  : 
; 132  : 	pointer operator->() const
; 133  : 		{	// return pointer to class object
; 134  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 135  : 		}
; 136  : 
; 137  : 	_Myiter& operator++()
; 138  : 		{	// preincrement
; 139  : 		++(*(_Mybase *)this);
; 140  : 		return (*this);
; 141  : 		}
; 142  : 
; 143  : 	_Myiter operator++(int)
; 144  : 		{	// postincrement
; 145  : 		_Myiter _Tmp = *this;
; 146  : 		++*this;
; 147  : 		return (_Tmp);
; 148  : 		}
; 149  : 
; 150  : 	_Myiter& operator--()
; 151  : 		{	// predecrement
; 152  : 		--(*(_Mybase *)this);
; 153  : 		return (*this);
; 154  : 		}
; 155  : 
; 156  : 	_Myiter operator--(int)
; 157  : 		{	// postdecrement
; 158  : 		_Myiter _Tmp = *this;
; 159  : 		--*this;
; 160  : 		return (_Tmp);
; 161  : 		}
; 162  : 	};
; 163  : 
; 164  : 	// TEMPLATE CLASS _List_const_iterator
; 165  : template<class _Mylist>
; 166  : 	class _List_const_iterator
; 167  : 		: public _List_unchecked_const_iterator<_Mylist, _Iterator_base>
; 168  : 	{	// iterator for nonmutable list
; 169  : public:
; 170  : 	typedef _List_const_iterator<_Mylist> _Myiter;
; 171  : 	typedef _List_unchecked_const_iterator<_Mylist, _Iterator_base> _Mybase;
; 172  : 	typedef bidirectional_iterator_tag iterator_category;
; 173  : 
; 174  : 	typedef typename _Mylist::_Nodeptr _Nodeptr;
; 175  : 	typedef typename _Mylist::value_type value_type;
; 176  : 	typedef typename _Mylist::difference_type difference_type;
; 177  : 	typedef typename _Mylist::const_pointer pointer;
; 178  : 	typedef typename _Mylist::const_reference reference;
; 179  : 
; 180  : 	_List_const_iterator()
; 181  : 		: _Mybase()
; 182  : 		{	// construct with null node pointer
; 183  : 		}
; 184  : 
; 185  : 	_List_const_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
; 186  : 		: _Mybase(_Pnode, _Plist)
; 187  : 		{	// construct with node pointer _Pnode
; 188  : 		}
; 189  : 
; 190  : 	typedef _List_unchecked_const_iterator<_Mylist> _Unchecked_type;
; 191  : 
; 192  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 193  : 		{	// reset from unchecked iterator
; 194  : 		this->_Ptr = _Right._Ptr;
; 195  : 		return (*this);
; 196  : 		}
; 197  : 
; 198  : 	_Unchecked_type _Unchecked() const
; 199  : 		{	// make an unchecked iterator
; 200  : 		return (_Unchecked_type(this->_Ptr, (_Mylist *)this->_Getcont()));
; 201  : 		}
; 202  : 
; 203  : 	reference operator*() const
; 204  : 		{	// return designated value
; 205  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 206  : 		if (this->_Getcont() == 0
; 207  : 			|| this->_Ptr == 0
; 208  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 209  : 			{	// report error
; 210  : 			_DEBUG_ERROR("list iterator not dereferencable");
; 211  : 			_SCL_SECURE_OUT_OF_RANGE;
; 212  : 			}
; 213  : 
; 214  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 215  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 216  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 217  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 218  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 219  : 
; 220  : 		return (_Mylist::_Myval(this->_Ptr));
; 221  : 		}
; 222  : 
; 223  : 	_Myiter& operator++()
; 224  : 		{	// preincrement
; 225  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 226  : 		if (this->_Getcont() == 0
; 227  : 			|| this->_Ptr == 0
; 228  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 229  : 			{	// report error
; 230  : 			_DEBUG_ERROR("list iterator not incrementable");
; 231  : 			_SCL_SECURE_OUT_OF_RANGE;
; 232  : 			}
; 233  : 
; 234  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 235  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 236  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 237  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 238  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 239  : 
; 240  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);
; 241  : 		return (*this);
; 242  : 		}
; 243  : 
; 244  : 	_Myiter operator++(int)
; 245  : 		{	// postincrement
; 246  : 		_Myiter _Tmp = *this;
; 247  : 		++*this;
; 248  : 		return (_Tmp);
; 249  : 		}
; 250  : 
; 251  : 	_Myiter& operator--()
; 252  : 		{	// predecrement
; 253  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 254  : 		if (this->_Getcont() == 0
; 255  : 			|| this->_Ptr == 0
; 256  : 			|| (this->_Ptr = _Mylist::_Prevnode(this->_Ptr))
; 257  : 				== ((_Mylist *)this->_Getcont())->_Myhead)
; 258  : 			{	// report error
; 259  : 			_DEBUG_ERROR("list iterator not decrementable");
; 260  : 			_SCL_SECURE_OUT_OF_RANGE;
; 261  : 			}
; 262  : 
; 263  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 264  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 265  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 266  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 267  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 268  : 
; 269  :  #else /* _ITERATOR_DEBUG_LEVEL */
; 270  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 271  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 272  : 
; 273  : 		return (*this);
; 274  : 		}
; 275  : 
; 276  : 	_Myiter operator--(int)
; 277  : 		{	// postdecrement
; 278  : 		_Myiter _Tmp = *this;
; 279  : 		--*this;
; 280  : 		return (_Tmp);
; 281  : 		}
; 282  : 
; 283  : 	bool operator==(const _Myiter& _Right) const
; 284  : 		{	// test for iterator equality
; 285  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 286  : 		if (this->_Getcont() == 0
; 287  : 			|| this->_Getcont() != _Right._Getcont())
; 288  : 			{	// report error
; 289  : 			_DEBUG_ERROR("list iterators incompatible");
; 290  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 291  : 			}
; 292  : 
; 293  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 294  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 295  : 			&& this->_Getcont() == _Right._Getcont());
; 296  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 297  : 
; 298  : 		return (this->_Ptr == _Right._Ptr);
; 299  : 		}
; 300  : 
; 301  : 	bool operator!=(const _Myiter& _Right) const
; 302  : 		{	// test for iterator inequality
; 303  : 		return (!(*this == _Right));
; 304  : 		}
; 305  : 	};
; 306  : 
; 307  : template<class _Mylist> inline
; 308  : 	typename _List_const_iterator<_Mylist>::_Unchecked_type
; 309  : 		_Unchecked(_List_const_iterator<_Mylist> _Iter)
; 310  : 	{	// convert to unchecked
; 311  : 	return (_Iter._Unchecked());
; 312  : 	}
; 313  : 
; 314  : template<class _Mylist> inline
; 315  : 	_List_const_iterator<_Mylist>&
; 316  : 		_Rechecked(_List_const_iterator<_Mylist>& _Iter,
; 317  : 			typename _List_const_iterator<_Mylist>
; 318  : 				::_Unchecked_type _Right)
; 319  : 	{	// convert to checked
; 320  : 	return (_Iter._Rechecked(_Right));
; 321  : 	}
; 322  : 
; 323  : 	// TEMPLATE CLASS _List_iterator
; 324  : template<class _Mylist>
; 325  : 	class _List_iterator
; 326  : 		: public _List_const_iterator<_Mylist>
; 327  : 	{	// iterator for mutable list
; 328  : public:
; 329  : 	typedef _List_iterator<_Mylist> _Myiter;
; 330  : 	typedef _List_const_iterator<_Mylist> _Mybase;
; 331  : 	typedef bidirectional_iterator_tag iterator_category;
; 332  : 
; 333  : 	typedef typename _Mylist::_Nodeptr _Nodeptr;
; 334  : 	typedef typename _Mylist::value_type value_type;
; 335  : 	typedef typename _Mylist::difference_type difference_type;
; 336  : 	typedef typename _Mylist::pointer pointer;
; 337  : 	typedef typename _Mylist::reference reference;
; 338  : 
; 339  : 	_List_iterator()
; 340  : 		{	// construct with null node
; 341  : 		}
; 342  : 
; 343  : 	_List_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
; 344  : 		: _Mybase(_Pnode, _Plist)
; 345  : 		{	// construct with node pointer _Pnode
; 346  : 		}
; 347  : 
; 348  : 	typedef _List_unchecked_iterator<_Mylist> _Unchecked_type;
; 349  : 
; 350  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 351  : 		{	// reset from unchecked iterator
; 352  : 		this->_Ptr = _Right._Ptr;
; 353  : 		return (*this);
; 354  : 		}
; 355  : 
; 356  : 	_Unchecked_type _Unchecked() const
; 357  : 		{	// make an unchecked iterator
; 358  : 		return (_Unchecked_type(this->_Ptr, (_Mylist *)this->_Getcont()));
; 359  : 		}
; 360  : 
; 361  : 	reference operator*() const
; 362  : 		{	// return designated value
; 363  : 		return ((reference)**(_Mybase *)this);
; 364  : 		}
; 365  : 
; 366  : 	pointer operator->() const
; 367  : 		{	// return pointer to class object
; 368  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 369  : 		}
; 370  : 
; 371  : 	_Myiter& operator++()
; 372  : 		{	// preincrement
; 373  : 		++(*(_Mybase *)this);
; 374  : 		return (*this);
; 375  : 		}
; 376  : 
; 377  : 	_Myiter operator++(int)
; 378  : 		{	// postincrement
; 379  : 		_Myiter _Tmp = *this;
; 380  : 		++*this;
; 381  : 		return (_Tmp);
; 382  : 		}
; 383  : 
; 384  : 	_Myiter& operator--()
; 385  : 		{	// predecrement
; 386  : 		--(*(_Mybase *)this);
; 387  : 		return (*this);
; 388  : 		}
; 389  : 
; 390  : 	_Myiter operator--(int)
; 391  : 		{	// postdecrement
; 392  : 		_Myiter _Tmp = *this;
; 393  : 		--*this;
; 394  : 		return (_Tmp);
; 395  : 		}
; 396  : 	};
; 397  : 
; 398  : template<class _Mylist> inline
; 399  : 	typename _List_iterator<_Mylist>::_Unchecked_type
; 400  : 		_Unchecked(_List_iterator<_Mylist> _Iter)
; 401  : 	{	// convert to unchecked
; 402  : 	return (_Iter._Unchecked());
; 403  : 	}
; 404  : 
; 405  : template<class _Mylist> inline
; 406  : 	_List_iterator<_Mylist>&
; 407  : 		_Rechecked(_List_iterator<_Mylist>& _Iter,
; 408  : 			typename _List_iterator<_Mylist>
; 409  : 				::_Unchecked_type _Right)
; 410  : 	{	// convert to checked
; 411  : 	return (_Iter._Rechecked(_Right));
; 412  : 	}
; 413  : 
; 414  : 		// list TYPE WRAPPERS
; 415  : template<class _Value_type,
; 416  : 	class _Size_type,
; 417  : 	class _Difference_type,
; 418  : 	class _Pointer,
; 419  : 	class _Const_pointer,
; 420  : 	class _Reference,
; 421  : 	class _Const_reference,
; 422  : 	class _Nodeptr_type>
; 423  : 	struct _List_iter_types
; 424  : 	{	// wraps types needed by iterators
; 425  : 	typedef _Value_type value_type;
; 426  : 	typedef _Size_type size_type;
; 427  : 	typedef _Difference_type difference_type;
; 428  : 	typedef _Pointer pointer;
; 429  : 	typedef _Const_pointer const_pointer;
; 430  : 	typedef _Reference reference;
; 431  : 	typedef _Const_reference const_reference;
; 432  : 	typedef _Nodeptr_type _Nodeptr;
; 433  : 	};
; 434  : 
; 435  : template<class _Value_type,
; 436  : 	class _Voidptr>
; 437  : 	struct _List_node
; 438  : 		{	// list node
; 439  : 		_Voidptr _Next;	// successor node, or first element if head
; 440  : 		_Voidptr _Prev;	// predecessor node, or last element if head
; 441  : 		_Value_type _Myval;	// the stored value, unused if head
; 442  : 
; 443  : 	private:
; 444  : 		_List_node& operator=(const _List_node&);
; 445  : 		};
; 446  : 
; 447  : template<class _Value_type>
; 448  : 	struct _List_node<_Value_type, void *>
; 449  : 		{	// list node
; 450  : 		typedef _List_node<_Value_type, void *> *_Nodeptr;
; 451  : 		_Nodeptr _Next;	// successor node, or first element if head
; 452  : 		_Nodeptr _Prev;	// predecessor node, or last element if head
; 453  : 		_Value_type _Myval;	// the stored value, unused if head
; 454  : 
; 455  : 	private:
; 456  : 		_List_node& operator=(const _List_node&);
; 457  : 		};
; 458  : 
; 459  : template<class _Ty>
; 460  : 	struct _List_simple_types
; 461  : 		: public _Simple_types<_Ty>
; 462  : 	{	// wraps types needed by iterators
; 463  : 	typedef _List_node<_Ty, void *> _Node;
; 464  : 	typedef _Node *_Nodeptr;
; 465  : 	};
; 466  : 
; 467  : template<class _Ty,
; 468  : 	class _Alloc0>
; 469  : 	struct _List_base_types
; 470  : 	{	// types needed for a container base
; 471  : 	typedef _Alloc0 _Alloc;
; 472  : 	typedef _List_base_types<_Ty, _Alloc> _Myt;
; 473  : 
; 474  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 475  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 476  : 
; 477  : 
; 478  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 479  : 		_Voidptr;
; 480  : 	typedef _List_node<typename _Alty::value_type,
; 481  : 		_Voidptr> _Node;
; 482  : 
; 483  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 484  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 485  : 	typedef _Nodeptr& _Nodepref;
; 486  : 
; 487  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 488  : 		_List_simple_types<typename _Alty::value_type>,
; 489  : 		_List_iter_types<typename _Alty::value_type,
; 490  : 			typename _Alty::size_type,
; 491  : 			typename _Alty::difference_type,
; 492  : 			typename _Alty::pointer,
; 493  : 			typename _Alty::const_pointer,
; 494  : 			typename _Alty::reference,
; 495  : 			typename _Alty::const_reference,
; 496  : 			_Nodeptr> >::type
; 497  : 		_Val_types;
; 498  : 	};
; 499  : 
; 500  : 		// TEMPLATE CLASS _List_val
; 501  : template<class _Val_types>
; 502  : 	class _List_val
; 503  : 		: public _Container_base
; 504  : 	{	// base class for list to hold data
; 505  : public:
; 506  : 	typedef _List_val<_Val_types> _Myt;
; 507  : 
; 508  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 509  : 	typedef _Nodeptr& _Nodepref;
; 510  : 
; 511  : 	typedef typename _Val_types::value_type value_type;
; 512  : 	typedef typename _Val_types::size_type size_type;
; 513  : 	typedef typename _Val_types::difference_type difference_type;
; 514  : 	typedef typename _Val_types::pointer pointer;
; 515  : 	typedef typename _Val_types::const_pointer const_pointer;
; 516  : 	typedef typename _Val_types::reference reference;
; 517  : 	typedef typename _Val_types::const_reference const_reference;
; 518  : 
; 519  : 	typedef _List_const_iterator<_Myt> const_iterator;
; 520  : 	typedef _List_iterator<_Myt> iterator;
; 521  : 
; 522  : 	typedef _List_unchecked_const_iterator<_Myt> _Unchecked_const_iterator;
; 523  : 	typedef _List_unchecked_iterator<_Myt> _Unchecked_iterator;
; 524  : 
; 525  : 	_List_val()
; 526  : 		{	// initialize data
; 527  : 		this->_Myhead = 0;
; 528  : 		this->_Mysize = 0;
; 529  : 		}
; 530  : 
; 531  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 532  : 		{	// return reference to successor pointer in node
; 533  : 		return ((_Nodepref)_Pnode->_Next);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]

; 44   : 		{	// construct with node pointer _Pnode

  00005	8b 08		 mov	 ecx, DWORD PTR [eax]
  00007	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 1116 : 		return (iterator(this->_Nextnode(this->_Myhead), this));
; 1117 : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?begin@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@2@XZ ENDP ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\list
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\list
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\list
;	COMDAT ??1?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE@XZ PROC ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::~list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >, COMDAT
; _this$ = ecx

; 1094 : 		{	// destroy the object

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 533  : 		return ((_Nodepref)_Pnode->_Next);

  00003	8b 07		 mov	 eax, DWORD PTR [edi]

; 1097 : 
; 1098 : 	_Myt& operator=(const _Myt& _Right)
; 1099 : 		{	// assign _Right
; 1100 : 		if (this != &_Right)
; 1101 : 			{	// different, assign it
; 1102 : 			if (this->_Getal() != _Right._Getal()
; 1103 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1104 : 				{	// change allocator before copying
; 1105 : 				clear();
; 1106 : 				this->_Change_alloc(_Right._Getal());
; 1107 : 				}
; 1108 : 
; 1109 : 			assign(_Right.begin(), _Right.end());
; 1110 : 			}
; 1111 : 		return (*this);
; 1112 : 		}
; 1113 : 
; 1114 : 	iterator begin() _NOEXCEPT
; 1115 : 		{	// return iterator for beginning of mutable sequence
; 1116 : 		return (iterator(this->_Nextnode(this->_Myhead), this));
; 1117 : 		}
; 1118 : 
; 1119 : 	const_iterator begin() const _NOEXCEPT
; 1120 : 		{	// return iterator for beginning of nonmutable sequence
; 1121 : 		return (const_iterator(this->_Nextnode(this->_Myhead), this));
; 1122 : 		}
; 1123 : 
; 1124 : 	iterator end() _NOEXCEPT
; 1125 : 		{	// return iterator for end of mutable sequence
; 1126 : 		return (iterator(this->_Myhead, this));
; 1127 : 		}
; 1128 : 
; 1129 : 	const_iterator end() const _NOEXCEPT
; 1130 : 		{	// return iterator for end of nonmutable sequence
; 1131 : 		return (const_iterator(this->_Myhead, this));
; 1132 : 		}
; 1133 : 
; 1134 : 	_Unchecked_iterator _Unchecked_begin()
; 1135 : 		{	// return iterator for beginning of mutable sequence
; 1136 : 		return (_Unchecked_iterator(this->_Nextnode(this->_Myhead),
; 1137 : 			this));
; 1138 : 		}
; 1139 : 
; 1140 : 	_Unchecked_const_iterator _Unchecked_begin() const
; 1141 : 		{	// return iterator for beginning of nonmutable sequence
; 1142 : 		return (_Unchecked_const_iterator(this->_Nextnode(this->_Myhead),
; 1143 : 			this));
; 1144 : 		}
; 1145 : 
; 1146 : 	_Unchecked_iterator _Unchecked_end()
; 1147 : 		{	// return unchecked iterator for end of mutable sequence
; 1148 : 		return (_Unchecked_iterator(this->_Myhead, this));
; 1149 : 		}
; 1150 : 
; 1151 : 	_Unchecked_const_iterator _Unchecked_end() const
; 1152 : 		{	// return unchecked iterator for end of nonmutable sequence
; 1153 : 		return (_Unchecked_const_iterator(this->_Myhead, this));
; 1154 : 		}
; 1155 : 
; 1156 : 	iterator _Make_iter(const_iterator _Where) const _NOEXCEPT
; 1157 : 		{	// make iterator from const_iterator
; 1158 : 		return (iterator(_Where._Ptr, this));
; 1159 : 		}
; 1160 : 
; 1161 : 	iterator _Make_iter(_Unchecked_const_iterator _Where) const
; 1162 : 		{	// make iterator from _Unchecked_const_iterator
; 1163 : 		return (iterator(_Where._Ptr, this));
; 1164 : 		}
; 1165 : 
; 1166 : 	reverse_iterator rbegin() _NOEXCEPT
; 1167 : 		{	// return iterator for beginning of reversed mutable sequence
; 1168 : 		return (reverse_iterator(end()));
; 1169 : 		}
; 1170 : 
; 1171 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1172 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1173 : 		return (const_reverse_iterator(end()));
; 1174 : 		}
; 1175 : 
; 1176 : 	reverse_iterator rend() _NOEXCEPT
; 1177 : 		{	// return iterator for end of reversed mutable sequence
; 1178 : 		return (reverse_iterator(begin()));
; 1179 : 		}
; 1180 : 
; 1181 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1182 : 		{	// return iterator for end of reversed nonmutable sequence
; 1183 : 		return (const_reverse_iterator(begin()));
; 1184 : 		}
; 1185 : 
; 1186 : 	const_iterator cbegin() const _NOEXCEPT
; 1187 : 		{	// return iterator for beginning of nonmutable sequence
; 1188 : 		return (((const _Myt *)this)->begin());
; 1189 : 		}
; 1190 : 
; 1191 : 	const_iterator cend() const _NOEXCEPT
; 1192 : 		{	// return iterator for end of nonmutable sequence
; 1193 : 		return (((const _Myt *)this)->end());
; 1194 : 		}
; 1195 : 
; 1196 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1197 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1198 : 		return (((const _Myt *)this)->rbegin());
; 1199 : 		}
; 1200 : 
; 1201 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1202 : 		{	// return iterator for end of reversed nonmutable sequence
; 1203 : 		return (((const _Myt *)this)->rend());
; 1204 : 		}
; 1205 : 
; 1206 : 	void resize(size_type _Newsize)
; 1207 : 		{	// determine new length, padding with _Ty() elements as needed
; 1208 : 		if (this->_Mysize < _Newsize)
; 1209 : 			{	// pad to make larger
; 1210 : 			size_type _Count = 0;
; 1211 : 			_TRY_BEGIN
; 1212 : 			for (; this->_Mysize < _Newsize; ++_Count)
; 1213 : 				_Insert(_Unchecked_end());
; 1214 : 			_CATCH_ALL
; 1215 : 			for (; 0 < _Count; --_Count)
; 1216 : 				pop_back();	// undo inserts
; 1217 : 			_RERAISE;
; 1218 : 			_CATCH_END
; 1219 : 			}
; 1220 : 		else
; 1221 : 			while (_Newsize < this->_Mysize)
; 1222 : 				pop_back();
; 1223 : 		}
; 1224 : 
; 1225 : 	void resize(size_type _Newsize, const _Ty& _Val)
; 1226 : 		{	// determine new length, padding with _Val elements as needed
; 1227 : 		if (this->_Mysize < _Newsize)
; 1228 : 			_Insert_n(_Unchecked_end(), _Newsize - this->_Mysize, _Val);
; 1229 : 		else
; 1230 : 			while (_Newsize < this->_Mysize)
; 1231 : 				pop_back();
; 1232 : 		}
; 1233 : 
; 1234 : 	size_type size() const _NOEXCEPT
; 1235 : 		{	// return length of sequence
; 1236 : 		return (this->_Mysize);
; 1237 : 		}
; 1238 : 
; 1239 : 	size_type max_size() const _NOEXCEPT
; 1240 : 		{	// return maximum possible length of sequence
; 1241 : 		return (this->_Getal().max_size());
; 1242 : 		}
; 1243 : 
; 1244 : 	bool empty() const _NOEXCEPT
; 1245 : 		{	// test if sequence is empty
; 1246 : 		return (this->_Mysize == 0);
; 1247 : 		}
; 1248 : 
; 1249 : 	allocator_type get_allocator() const _NOEXCEPT
; 1250 : 		{	// return allocator object for values
; 1251 : 		return (this->_Getal());
; 1252 : 		}
; 1253 : 
; 1254 : 	reference front()
; 1255 : 		{	// return first element of mutable sequence
; 1256 : 		return (*begin());
; 1257 : 		}
; 1258 : 
; 1259 : 	const_reference front() const
; 1260 : 		{	// return first element of nonmutable sequence
; 1261 : 		return (*begin());
; 1262 : 		}
; 1263 : 
; 1264 : 	reference back()
; 1265 : 		{	// return last element of mutable sequence
; 1266 : 		return (*(--end()));
; 1267 : 		}
; 1268 : 
; 1269 : 	const_reference back() const
; 1270 : 		{	// return last element of nonmutable sequence
; 1271 : 		return (*(--end()));
; 1272 : 		}
; 1273 : 
; 1274 : 	void push_front(const _Ty& _Val)
; 1275 : 		{	// insert element at beginning
; 1276 : 		_Insert(_Unchecked_begin(), _Val);
; 1277 : 		}
; 1278 : 
; 1279 : 	void pop_front()
; 1280 : 		{	// erase element at beginning
; 1281 : 		erase(begin());
; 1282 : 		}
; 1283 : 
; 1284 : 	void push_back(const _Ty& _Val)
; 1285 : 		{	// insert element at end
; 1286 : 		_Insert(_Unchecked_end(), _Val);
; 1287 : 		}
; 1288 : 
; 1289 : 	void pop_back()
; 1290 : 		{	// erase element at end
; 1291 : 		erase(--end());
; 1292 : 		}
; 1293 : 
; 1294 : 	template<class _Iter>
; 1295 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1296 : 			void>::type
; 1297 : 		assign(_Iter _First, _Iter _Last)
; 1298 : 		{	// assign [_First, _Last), input iterators
; 1299 : 		iterator _Old = begin();
; 1300 : 		_TRY_BEGIN
; 1301 : 		for (; _First != _Last && _Old != end(); ++_First, ++_Old)
; 1302 : 			_Reusenode(_Old, *_First);
; 1303 : 		for (; _First != _Last; ++_First)
; 1304 : 			_Insert(_Unchecked_end(), *_First);
; 1305 : 		_CATCH_ALL
; 1306 : 		clear();
; 1307 : 		_RERAISE;
; 1308 : 		_CATCH_END
; 1309 : 		erase(_Old, end());
; 1310 : 		}
; 1311 : 
; 1312 : 	template<class _TArg>
; 1313 : 		void _Reusenode(iterator _Where, _TArg&& _Arg)
; 1314 : 		{	// destroy the element at _Where and reconstruct from _Arg
; 1315 : 		_TRY_BEGIN
; 1316 : 		this->_Getal().destroy(
; 1317 : 			_STD addressof(this->_Myval(_Where._Ptr)));
; 1318 : 		this->_Getal().construct(
; 1319 : 			_STD addressof(this->_Myval(_Where._Ptr)),
; 1320 : 			_STD forward<_TArg>(_Arg));
; 1321 : 		_CATCH_ALL
; 1322 : 		_Unlinknode(_Where);
; 1323 : 		this->_Getal().destroy(
; 1324 : 			_STD addressof(this->_Nextnode(_Where._Ptr)));
; 1325 : 		this->_Getal().destroy(
; 1326 : 			_STD addressof(this->_Prevnode(_Where._Ptr)));
; 1327 : 		this->_Getal().deallocate(_Where._Ptr, 1);
; 1328 : 		_RERAISE;
; 1329 : 		_CATCH_END
; 1330 : 		}
; 1331 : 
; 1332 : 	void assign(size_type _Count, const _Ty& _Val)
; 1333 : 		{	// assign _Count * _Val
; 1334 : 		clear();
; 1335 : 		_Insert_n(_Unchecked_begin(), _Count, _Val);
; 1336 : 		}
; 1337 : 
; 1338 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1339 : 		{	// insert _Val at _Where
; 1340 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1341 : 		if (_Where._Getcont() != this)
; 1342 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1343 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1344 : 
; 1345 : 		_Insert(_Where._Unchecked(), _Val);
; 1346 : 		return (_Make_iter(--_Where));
; 1347 : 		}
; 1348 : 
; 1349 : 	iterator insert(const_iterator _Where, size_type _Count, const _Ty& _Val)
; 1350 : 		{	// insert _Count * _Val at _Where
; 1351 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1352 : 		if (_Where._Getcont() != this)
; 1353 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1354 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1355 : 
; 1356 : 		iterator _Prev = _Make_iter(_Where);
; 1357 : 		if (_Prev == begin())
; 1358 : 			{	// insert sequence at beginning
; 1359 : 			_Insert_n(_Where._Unchecked(), _Count, _Val);
; 1360 : 			return (begin());
; 1361 : 			}
; 1362 : 		else
; 1363 : 			{	// insert sequence not at beginning
; 1364 : 			--_Prev;
; 1365 : 			_Insert_n(_Where._Unchecked(), _Count, _Val);
; 1366 : 			return (++_Prev);
; 1367 : 			}
; 1368 : 		}
; 1369 : 
; 1370 : 	template<class _Iter>
; 1371 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1372 : 			iterator>::type
; 1373 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1374 : 		{	// insert [_First, _Last) at _Where
; 1375 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1376 : 		if (_Where._Getcont() != this)
; 1377 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1378 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1379 : 
; 1380 : 		iterator _Prev = _Make_iter(_Where);
; 1381 : 		if (_Prev == begin())
; 1382 : 			{	// insert sequence at beginning
; 1383 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1384 : 				_Iter_cat(_First));
; 1385 : 			return (begin());
; 1386 : 			}
; 1387 : 		else
; 1388 : 			{	// insert sequence not at beginning
; 1389 : 			--_Prev;
; 1390 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1391 : 				_Iter_cat(_First));
; 1392 : 			return (++_Prev);
; 1393 : 			}
; 1394 : 		}
; 1395 : 
; 1396 : 	template<class _Iter>
; 1397 : 		void _Insert_range(_Unchecked_const_iterator _Where,
; 1398 : 			_Iter _First, _Iter _Last, input_iterator_tag)
; 1399 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1400 : 		size_type _Num = 0;
; 1401 : 
; 1402 : 		_TRY_BEGIN
; 1403 : 		for (; _First != _Last; ++_First, ++_Num)
; 1404 : 			_Insert(_Where, *_First);
; 1405 : 		_CATCH_ALL
; 1406 : 		for (; 0 < _Num; --_Num)
; 1407 : 			{	// undo inserts
; 1408 : 			_Unchecked_const_iterator _Before = _Where;
; 1409 : 			_Unchecked_erase(--_Before);
; 1410 : 			}
; 1411 : 		_RERAISE;
; 1412 : 		_CATCH_END
; 1413 : 		}
; 1414 : 
; 1415 : 	template<class _Iter>
; 1416 : 		void _Insert_range(_Unchecked_const_iterator _Where,
; 1417 : 			_Iter _First, _Iter _Last, forward_iterator_tag)
; 1418 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1419 : 		_DEBUG_RANGE(_First, _Last);
; 1420 : 		_Iter _Next = _First;
; 1421 : 
; 1422 : 		_TRY_BEGIN
; 1423 : 		for (; _First != _Last; ++_First)
; 1424 : 			_Insert(_Where, *_First);
; 1425 : 		_CATCH_ALL
; 1426 : 		for (; _Next != _First; ++_Next)
; 1427 : 			{	// undo inserts
; 1428 : 			_Unchecked_const_iterator _Before = _Where;
; 1429 : 			_Unchecked_erase(--_Before);
; 1430 : 			}
; 1431 : 		_RERAISE;
; 1432 : 		_CATCH_END
; 1433 : 		}
; 1434 : 
; 1435 : 	_Nodeptr _Unlinknode(const_iterator _Where)
; 1436 : 		{	// unlink node at _Where from the list
; 1437 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1438 : 		if (_Where._Getcont() != this || _Where._Ptr == this->_Myhead)
; 1439 : 			_DEBUG_ERROR("list erase iterator outside range");
; 1440 : 		_Nodeptr _Pnode = (_Where)._Mynode();
; 1441 : 		_Orphan_ptr(*this, _Pnode);
; 1442 : 
; 1443 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1444 : 		_Nodeptr _Pnode = (_Where)._Mynode();
; 1445 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1446 : 
; 1447 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1448 : 			this->_Nextnode(_Pnode);
; 1449 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1450 : 			this->_Prevnode(_Pnode);
; 1451 : 
; 1452 : 		--this->_Mysize;
; 1453 : 		return (_Pnode);
; 1454 : 		}
; 1455 : 
; 1456 : 	iterator erase(const_iterator _Where)
; 1457 : 		{	// erase element at _Where
; 1458 : 		_Nodeptr _Pnode = _Unlinknode(_Where++);
; 1459 : 		this->_Freenode(_Pnode);
; 1460 : 		return (_Make_iter(_Where));
; 1461 : 		}
; 1462 : 
; 1463 : 	void _Unchecked_erase(_Unchecked_const_iterator _Where)
; 1464 : 		{	// erase element at _Where
; 1465 : 		_Nodeptr _Pnode = _Where._Mynode();
; 1466 : 
; 1467 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1468 : 			this->_Nextnode(_Pnode);
; 1469 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1470 : 			this->_Prevnode(_Pnode);
; 1471 : 		this->_Freenode(_Pnode);
; 1472 : 		--this->_Mysize;
; 1473 : 		}
; 1474 : 
; 1475 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1476 : 		{	// erase [_First, _Last)
; 1477 : 		if (_First == begin() && _Last == end())
; 1478 : 			{	// erase all and return fresh iterator
; 1479 : 			clear();
; 1480 : 			return (end());
; 1481 : 			}
; 1482 : 		else
; 1483 : 			{	// erase subrange
; 1484 : 			while (_First != _Last)
; 1485 : 				_First = erase(_First);
; 1486 : 			return (_Make_iter(_Last));
; 1487 : 			}
; 1488 : 		}
; 1489 : 
; 1490 : 	void clear() _NOEXCEPT
; 1491 : 		{	// erase all
; 1492 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1493 : 		this->_Orphan_ptr(*this, nullptr);
; 1494 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1495 : 
; 1496 : 		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead);

  00005	8b 10		 mov	 edx, DWORD PTR [eax]

; 1497 : 		this->_Nextnode(this->_Myhead) = this->_Myhead;

  00007	89 00		 mov	 DWORD PTR [eax], eax

; 534  : 		}
; 535  : 
; 536  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 537  : 		{	// return reference to predecessor pointer in node
; 538  : 		return ((_Nodepref)_Pnode->_Prev);

  00009	8b 07		 mov	 eax, DWORD PTR [edi]

; 1498 : 		this->_Prevnode(this->_Myhead) = this->_Myhead;

  0000b	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1499 : 		this->_Mysize = 0;

  0000e	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1501 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead; _Pnode = _Pnext)

  00015	3b 17		 cmp	 edx, DWORD PTR [edi]
  00017	74 19		 je	 SHORT $LN5@list
  00019	56		 push	 esi
  0001a	8d 9b 00 00 00
	00		 npad	 6
$LL7@list:

; 1502 : 			{	// delete an element
; 1503 : 			_Pnext = this->_Nextnode(_Pnode);

  00020	8b 32		 mov	 esi, DWORD PTR [edx]
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00028	83 c4 04	 add	 esp, 4
; File a:\vs\vc\include\list

; 1501 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead; _Pnode = _Pnext)

  0002b	8b d6		 mov	 edx, esi
  0002d	3b 37		 cmp	 esi, DWORD PTR [edi]
  0002f	75 ef		 jne	 SHORT $LL7@list
  00031	5e		 pop	 esi
$LN5@list:
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00032	ff 37		 push	 DWORD PTR [edi]
  00034	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00039	83 c4 04	 add	 esp, 4
  0003c	5f		 pop	 edi
; File a:\vs\vc\include\list

; 1096 : 		}

  0003d	c3		 ret	 0
??1?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE@XZ ENDP ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::~list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\list
;	COMDAT ??0?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE@XZ PROC ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >, COMDAT
; _this$ = ecx

; 891  : 		{	// construct empty list

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 703  : 		}
; 704  : 
; 705  : 	~_List_alloc() _NOEXCEPT
; 706  : 		{	// destroy head node
; 707  : 		_Freeheadnode(this->_Myhead);
; 708  : 		}
; 709  : 
; 710  : 	void _Change_alloc(const _Alty&)
; 711  : 		{	// replace old allocator
; 712  : 		}
; 713  : 
; 714  : 	void _Swap_alloc(_Myt&)
; 715  : 		{	// swap allocators
; 716  : 		}
; 717  : 
; 718  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 719  : 	_List_alloc(const _Alloc& = _Alloc())
; 720  : 		{	// construct allocators from _Al
; 721  : 		this->_Myhead = _Buyheadnode();
; 722  : 		_TRY_BEGIN
; 723  : 		_Alloc_proxy();
; 724  : 		_CATCH_ALL
; 725  : 		_Freeheadnode(this->_Myhead);
; 726  : 		_RERAISE;
; 727  : 		_CATCH_END
; 728  : 		}
; 729  : 
; 730  : 	~_List_alloc() _NOEXCEPT
; 731  : 		{	// destroy proxy
; 732  : 		_Freeheadnode(this->_Myhead);
; 733  : 		_Free_proxy();
; 734  : 		}
; 735  : 
; 736  : 	void _Change_alloc(const _Alty&)
; 737  : 		{	// replace old allocator
; 738  : 		}
; 739  : 
; 740  : 	void _Swap_alloc(_Myt& _Right)
; 741  : 		{	// swap allocators
; 742  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 743  : 		}
; 744  : 
; 745  : 	void _Alloc_proxy()
; 746  : 		{	// construct proxy from _Alnod
; 747  : 		typename _Alty::template rebind<_Container_proxy>::other
; 748  : 			_Alproxy;
; 749  : 		this->_Myproxy = _Alproxy.allocate(1);
; 750  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 751  : 		this->_Myproxy->_Mycont = this;
; 752  : 		}
; 753  : 
; 754  : 	void _Free_proxy()
; 755  : 		{	// destroy proxy
; 756  : 		typename _Alty::template rebind<_Container_proxy>::other
; 757  : 			_Alproxy;
; 758  : 		this->_Orphan_all();
; 759  : 		_Alproxy.destroy(this->_Myproxy);
; 760  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 761  : 		this->_Myproxy = 0;
; 762  : 		}
; 763  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 764  : 
; 765  : 	_Nodeptr _Buyheadnode()
; 766  : 		{	// get head node using current allocator
; 767  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0

; 527  : 		this->_Myhead = 0;

  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 528  : 		this->_Mysize = 0;

  0000d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 703  : 		}
; 704  : 
; 705  : 	~_List_alloc() _NOEXCEPT
; 706  : 		{	// destroy head node
; 707  : 		_Freeheadnode(this->_Myhead);
; 708  : 		}
; 709  : 
; 710  : 	void _Change_alloc(const _Alty&)
; 711  : 		{	// replace old allocator
; 712  : 		}
; 713  : 
; 714  : 	void _Swap_alloc(_Myt&)
; 715  : 		{	// swap allocators
; 716  : 		}
; 717  : 
; 718  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 719  : 	_List_alloc(const _Alloc& = _Alloc())
; 720  : 		{	// construct allocators from _Al
; 721  : 		this->_Myhead = _Buyheadnode();
; 722  : 		_TRY_BEGIN
; 723  : 		_Alloc_proxy();
; 724  : 		_CATCH_ALL
; 725  : 		_Freeheadnode(this->_Myhead);
; 726  : 		_RERAISE;
; 727  : 		_CATCH_END
; 728  : 		}
; 729  : 
; 730  : 	~_List_alloc() _NOEXCEPT
; 731  : 		{	// destroy proxy
; 732  : 		_Freeheadnode(this->_Myhead);
; 733  : 		_Free_proxy();
; 734  : 		}
; 735  : 
; 736  : 	void _Change_alloc(const _Alty&)
; 737  : 		{	// replace old allocator
; 738  : 		}
; 739  : 
; 740  : 	void _Swap_alloc(_Myt& _Right)
; 741  : 		{	// swap allocators
; 742  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 743  : 		}
; 744  : 
; 745  : 	void _Alloc_proxy()
; 746  : 		{	// construct proxy from _Alnod
; 747  : 		typename _Alty::template rebind<_Container_proxy>::other
; 748  : 			_Alproxy;
; 749  : 		this->_Myproxy = _Alproxy.allocate(1);
; 750  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 751  : 		this->_Myproxy->_Mycont = this;
; 752  : 		}
; 753  : 
; 754  : 	void _Free_proxy()
; 755  : 		{	// destroy proxy
; 756  : 		typename _Alty::template rebind<_Container_proxy>::other
; 757  : 			_Alproxy;
; 758  : 		this->_Orphan_all();
; 759  : 		_Alproxy.destroy(this->_Myproxy);
; 760  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 761  : 		this->_Myproxy = 0;
; 762  : 		}
; 763  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 764  : 
; 765  : 	_Nodeptr _Buyheadnode()
; 766  : 		{	// get head node using current allocator
; 767  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));

  00014	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@PAU32@0@Z ; std::_List_alloc<0,std::_List_base_types<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> > >::_Buynode0

; 529  : 		}
; 530  : 
; 531  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 532  : 		{	// return reference to successor pointer in node
; 533  : 		return ((_Nodepref)_Pnode->_Next);
; 534  : 		}
; 535  : 
; 536  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 537  : 		{	// return reference to predecessor pointer in node
; 538  : 		return ((_Nodepref)_Pnode->_Prev);
; 539  : 		}
; 540  : 
; 541  : 	static reference _Myval(_Nodeptr _Pnode)
; 542  : 		{	// return reference to value in node
; 543  : 		return ((reference)_Pnode->_Myval);
; 544  : 		}
; 545  : 
; 546  : 	_Nodeptr _Myhead;	// pointer to head node
; 547  : 	size_type _Mysize;	// number of elements
; 548  : 	};
; 549  : 
; 550  : 		// TEMPLATE CLASS _List_alloc
; 551  : template<bool _Al_has_storage,
; 552  : 	class _Alloc_types>
; 553  : 	class _List_alloc
; 554  : 		: public _List_val<typename _Alloc_types::_Val_types>
; 555  : 	{	// base class for list to hold allocator with storage
; 556  : public:
; 557  : 	typename _Alloc_types::_Alnod_type _Alnod;	// allocator object
; 558  : 
; 559  : 	typedef _List_alloc<_Al_has_storage, _Alloc_types> _Myt;
; 560  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 561  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 562  : 	typedef typename _Alloc_types::_Node _Node;
; 563  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 564  : 
; 565  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 566  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 567  : 		: _Alnod(_Al)
; 568  : 		{	// construct head node, allocator from _Al
; 569  : 		this->_Myhead = _Buyheadnode();
; 570  : 		}
; 571  : 
; 572  : 	~_List_alloc() _NOEXCEPT
; 573  : 		{	// destroy head node
; 574  : 		_Freeheadnode(this->_Myhead);
; 575  : 		}
; 576  : 
; 577  : 	void _Change_alloc(const _Alty& _Al)
; 578  : 		{	// replace old allocator
; 579  : 		this->_Alnod = _Al;
; 580  : 		}
; 581  : 
; 582  : 	void _Swap_alloc(_Myt& _Right)
; 583  : 		{	// swap allocators
; 584  : 		_Swap_adl(this->_Alnod, _Right._Alnod);
; 585  : 		}
; 586  : 
; 587  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 588  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 589  : 		: _Alnod(_Al)
; 590  : 		{	// construct head node, allocator from _Al
; 591  : 		this->_Myhead = _Buyheadnode();
; 592  : 		_TRY_BEGIN
; 593  : 		_Alloc_proxy();
; 594  : 		_CATCH_ALL
; 595  : 		_Freeheadnode(this->_Myhead);
; 596  : 		_RERAISE;
; 597  : 		_CATCH_END
; 598  : 		}
; 599  : 
; 600  : 	~_List_alloc() _NOEXCEPT
; 601  : 		{	// destroy proxy
; 602  : 		_Freeheadnode(this->_Myhead);
; 603  : 		_Free_proxy();
; 604  : 		}
; 605  : 
; 606  : 	void _Change_alloc(const _Alty& _Al)
; 607  : 		{	// replace old allocator
; 608  : 		_Free_proxy();
; 609  : 		this->_Alnod = _Al;
; 610  : 		_Alloc_proxy();
; 611  : 		}
; 612  : 
; 613  : 	void _Swap_alloc(_Myt& _Right)
; 614  : 		{	// swap allocators
; 615  : 		_Swap_adl(this->_Alnod, _Right._Alnod);
; 616  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 617  : 		}
; 618  : 
; 619  : 	void _Alloc_proxy()
; 620  : 		{	// construct proxy from _Alnod
; 621  : 		typename _Alty::template rebind<_Container_proxy>::other
; 622  : 			_Alproxy(this->_Alnod);
; 623  : 		this->_Myproxy = _Alproxy.allocate(1);
; 624  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 625  : 		this->_Myproxy->_Mycont = this;
; 626  : 		}
; 627  : 
; 628  : 	void _Free_proxy()
; 629  : 		{	// destroy proxy
; 630  : 		typename _Alty::template rebind<_Container_proxy>::other
; 631  : 			_Alproxy(this->_Alnod);
; 632  : 		this->_Orphan_all();
; 633  : 		_Alproxy.destroy(this->_Myproxy);
; 634  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 635  : 		this->_Myproxy = 0;
; 636  : 		}
; 637  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 638  : 
; 639  : 	_Nodeptr _Buyheadnode()
; 640  : 		{	// get head node using current allocator
; 641  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));
; 642  : 		}
; 643  : 
; 644  : 	void _Freeheadnode(_Nodeptr _Pnode)
; 645  : 		{	// free head node using current allocator
; 646  : 		this->_Alnod.destroy(
; 647  : 			_STD addressof(this->_Nextnode(_Pnode)));
; 648  : 		this->_Alnod.destroy(
; 649  : 			_STD addressof(this->_Prevnode(_Pnode)));
; 650  : 		this->_Alnod.deallocate(_Pnode, 1);
; 651  : 		}
; 652  : 
; 653  : 	_Nodeptr _Buynode0(_Nodeptr _Next,
; 654  : 		_Nodeptr _Prev)
; 655  : 		{	// allocate a node and set links
; 656  : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);
; 657  : 
; 658  : 		if (_Next == _Nodeptr())
; 659  : 			{	// point at self
; 660  : 			_Next = _Pnode;
; 661  : 			_Prev = _Pnode;
; 662  : 			}
; 663  : 		_TRY_BEGIN
; 664  : 		this->_Alnod.construct(
; 665  : 			_STD addressof(this->_Nextnode(_Pnode)), _Next);
; 666  : 		this->_Alnod.construct(
; 667  : 			_STD addressof(this->_Prevnode(_Pnode)), _Prev);
; 668  : 		_CATCH_ALL
; 669  : 		this->_Alnod.deallocate(_Pnode, 1);
; 670  : 		_RERAISE;
; 671  : 		_CATCH_END
; 672  : 
; 673  : 		return (_Pnode);
; 674  : 		}
; 675  : 
; 676  : 	_Alty& _Getal()
; 677  : 		{	// get reference to allocator
; 678  : 		return (this->_Alnod);
; 679  : 		}
; 680  : 
; 681  : 	const _Alty& _Getal() const
; 682  : 		{	// get reference to allocator
; 683  : 		return (this->_Alnod);
; 684  : 		}
; 685  : 	};
; 686  : 
; 687  : 		// TEMPLATE CLASS _List_alloc
; 688  : template<class _Alloc_types>
; 689  : 	class _List_alloc<false, _Alloc_types>
; 690  : 		: public _List_val<typename _Alloc_types::_Val_types>
; 691  : 	{	// base class for list to hold allocator with no storage
; 692  : public:
; 693  : 	typedef _List_alloc<false, _Alloc_types> _Myt;
; 694  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 695  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 696  : 	typedef typename _Alloc_types::_Node _Node;
; 697  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 698  : 
; 699  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 700  : 	_List_alloc(const _Alloc& = _Alloc())
; 701  : 		{	// construct head node, allocator from _Al
; 702  : 		this->_Myhead = _Buyheadnode();

  00019	89 06		 mov	 DWORD PTR [esi], eax

; 892  : 		}

  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	c3		 ret	 0
??0?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE@XZ ENDP ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??1?$_List_buy@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_buy@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE@XZ PROC ; std::_List_buy<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::~_List_buy<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >, COMDAT
; _this$ = ecx

; 573  : 		::operator delete(_Ptr);

  00000	ff 31		 push	 DWORD PTR [ecx]
  00002	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00007	59		 pop	 ecx
  00008	c3		 ret	 0
??1?$_List_buy@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE@XZ ENDP ; std::_List_buy<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::~_List_buy<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\list
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\list
;	COMDAT ?_Freenode@?$_List_buy@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Freenode@?$_List_buy@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@@Z PROC ; std::_List_buy<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::_Freenode, COMDAT
; _this$ = ecx

; 846  : 		{	// give node back

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Pnode$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4
; File a:\vs\vc\include\list

; 854  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Freenode@?$_List_buy@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@@Z ENDP ; std::_List_buy<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::_Freenode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\list
;	COMDAT ??0?$_List_buy@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE@ABV?$allocator@USChannel@CServerStateChecker@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??0?$_List_buy@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE@ABV?$allocator@USChannel@CServerStateChecker@@@1@@Z PROC ; std::_List_buy<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::_List_buy<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >, COMDAT
; _this$ = ecx

; 823  : 		{	// construct from allocator

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 703  : 		}
; 704  : 
; 705  : 	~_List_alloc() _NOEXCEPT
; 706  : 		{	// destroy head node
; 707  : 		_Freeheadnode(this->_Myhead);
; 708  : 		}
; 709  : 
; 710  : 	void _Change_alloc(const _Alty&)
; 711  : 		{	// replace old allocator
; 712  : 		}
; 713  : 
; 714  : 	void _Swap_alloc(_Myt&)
; 715  : 		{	// swap allocators
; 716  : 		}
; 717  : 
; 718  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 719  : 	_List_alloc(const _Alloc& = _Alloc())
; 720  : 		{	// construct allocators from _Al
; 721  : 		this->_Myhead = _Buyheadnode();
; 722  : 		_TRY_BEGIN
; 723  : 		_Alloc_proxy();
; 724  : 		_CATCH_ALL
; 725  : 		_Freeheadnode(this->_Myhead);
; 726  : 		_RERAISE;
; 727  : 		_CATCH_END
; 728  : 		}
; 729  : 
; 730  : 	~_List_alloc() _NOEXCEPT
; 731  : 		{	// destroy proxy
; 732  : 		_Freeheadnode(this->_Myhead);
; 733  : 		_Free_proxy();
; 734  : 		}
; 735  : 
; 736  : 	void _Change_alloc(const _Alty&)
; 737  : 		{	// replace old allocator
; 738  : 		}
; 739  : 
; 740  : 	void _Swap_alloc(_Myt& _Right)
; 741  : 		{	// swap allocators
; 742  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 743  : 		}
; 744  : 
; 745  : 	void _Alloc_proxy()
; 746  : 		{	// construct proxy from _Alnod
; 747  : 		typename _Alty::template rebind<_Container_proxy>::other
; 748  : 			_Alproxy;
; 749  : 		this->_Myproxy = _Alproxy.allocate(1);
; 750  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 751  : 		this->_Myproxy->_Mycont = this;
; 752  : 		}
; 753  : 
; 754  : 	void _Free_proxy()
; 755  : 		{	// destroy proxy
; 756  : 		typename _Alty::template rebind<_Container_proxy>::other
; 757  : 			_Alproxy;
; 758  : 		this->_Orphan_all();
; 759  : 		_Alproxy.destroy(this->_Myproxy);
; 760  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 761  : 		this->_Myproxy = 0;
; 762  : 		}
; 763  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 764  : 
; 765  : 	_Nodeptr _Buyheadnode()
; 766  : 		{	// get head node using current allocator
; 767  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0

; 527  : 		this->_Myhead = 0;

  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 528  : 		this->_Mysize = 0;

  0000d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 703  : 		}
; 704  : 
; 705  : 	~_List_alloc() _NOEXCEPT
; 706  : 		{	// destroy head node
; 707  : 		_Freeheadnode(this->_Myhead);
; 708  : 		}
; 709  : 
; 710  : 	void _Change_alloc(const _Alty&)
; 711  : 		{	// replace old allocator
; 712  : 		}
; 713  : 
; 714  : 	void _Swap_alloc(_Myt&)
; 715  : 		{	// swap allocators
; 716  : 		}
; 717  : 
; 718  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 719  : 	_List_alloc(const _Alloc& = _Alloc())
; 720  : 		{	// construct allocators from _Al
; 721  : 		this->_Myhead = _Buyheadnode();
; 722  : 		_TRY_BEGIN
; 723  : 		_Alloc_proxy();
; 724  : 		_CATCH_ALL
; 725  : 		_Freeheadnode(this->_Myhead);
; 726  : 		_RERAISE;
; 727  : 		_CATCH_END
; 728  : 		}
; 729  : 
; 730  : 	~_List_alloc() _NOEXCEPT
; 731  : 		{	// destroy proxy
; 732  : 		_Freeheadnode(this->_Myhead);
; 733  : 		_Free_proxy();
; 734  : 		}
; 735  : 
; 736  : 	void _Change_alloc(const _Alty&)
; 737  : 		{	// replace old allocator
; 738  : 		}
; 739  : 
; 740  : 	void _Swap_alloc(_Myt& _Right)
; 741  : 		{	// swap allocators
; 742  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 743  : 		}
; 744  : 
; 745  : 	void _Alloc_proxy()
; 746  : 		{	// construct proxy from _Alnod
; 747  : 		typename _Alty::template rebind<_Container_proxy>::other
; 748  : 			_Alproxy;
; 749  : 		this->_Myproxy = _Alproxy.allocate(1);
; 750  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 751  : 		this->_Myproxy->_Mycont = this;
; 752  : 		}
; 753  : 
; 754  : 	void _Free_proxy()
; 755  : 		{	// destroy proxy
; 756  : 		typename _Alty::template rebind<_Container_proxy>::other
; 757  : 			_Alproxy;
; 758  : 		this->_Orphan_all();
; 759  : 		_Alproxy.destroy(this->_Myproxy);
; 760  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 761  : 		this->_Myproxy = 0;
; 762  : 		}
; 763  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 764  : 
; 765  : 	_Nodeptr _Buyheadnode()
; 766  : 		{	// get head node using current allocator
; 767  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));

  00014	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@PAU32@0@Z ; std::_List_alloc<0,std::_List_base_types<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> > >::_Buynode0

; 529  : 		}
; 530  : 
; 531  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 532  : 		{	// return reference to successor pointer in node
; 533  : 		return ((_Nodepref)_Pnode->_Next);
; 534  : 		}
; 535  : 
; 536  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 537  : 		{	// return reference to predecessor pointer in node
; 538  : 		return ((_Nodepref)_Pnode->_Prev);
; 539  : 		}
; 540  : 
; 541  : 	static reference _Myval(_Nodeptr _Pnode)
; 542  : 		{	// return reference to value in node
; 543  : 		return ((reference)_Pnode->_Myval);
; 544  : 		}
; 545  : 
; 546  : 	_Nodeptr _Myhead;	// pointer to head node
; 547  : 	size_type _Mysize;	// number of elements
; 548  : 	};
; 549  : 
; 550  : 		// TEMPLATE CLASS _List_alloc
; 551  : template<bool _Al_has_storage,
; 552  : 	class _Alloc_types>
; 553  : 	class _List_alloc
; 554  : 		: public _List_val<typename _Alloc_types::_Val_types>
; 555  : 	{	// base class for list to hold allocator with storage
; 556  : public:
; 557  : 	typename _Alloc_types::_Alnod_type _Alnod;	// allocator object
; 558  : 
; 559  : 	typedef _List_alloc<_Al_has_storage, _Alloc_types> _Myt;
; 560  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 561  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 562  : 	typedef typename _Alloc_types::_Node _Node;
; 563  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 564  : 
; 565  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 566  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 567  : 		: _Alnod(_Al)
; 568  : 		{	// construct head node, allocator from _Al
; 569  : 		this->_Myhead = _Buyheadnode();
; 570  : 		}
; 571  : 
; 572  : 	~_List_alloc() _NOEXCEPT
; 573  : 		{	// destroy head node
; 574  : 		_Freeheadnode(this->_Myhead);
; 575  : 		}
; 576  : 
; 577  : 	void _Change_alloc(const _Alty& _Al)
; 578  : 		{	// replace old allocator
; 579  : 		this->_Alnod = _Al;
; 580  : 		}
; 581  : 
; 582  : 	void _Swap_alloc(_Myt& _Right)
; 583  : 		{	// swap allocators
; 584  : 		_Swap_adl(this->_Alnod, _Right._Alnod);
; 585  : 		}
; 586  : 
; 587  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 588  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 589  : 		: _Alnod(_Al)
; 590  : 		{	// construct head node, allocator from _Al
; 591  : 		this->_Myhead = _Buyheadnode();
; 592  : 		_TRY_BEGIN
; 593  : 		_Alloc_proxy();
; 594  : 		_CATCH_ALL
; 595  : 		_Freeheadnode(this->_Myhead);
; 596  : 		_RERAISE;
; 597  : 		_CATCH_END
; 598  : 		}
; 599  : 
; 600  : 	~_List_alloc() _NOEXCEPT
; 601  : 		{	// destroy proxy
; 602  : 		_Freeheadnode(this->_Myhead);
; 603  : 		_Free_proxy();
; 604  : 		}
; 605  : 
; 606  : 	void _Change_alloc(const _Alty& _Al)
; 607  : 		{	// replace old allocator
; 608  : 		_Free_proxy();
; 609  : 		this->_Alnod = _Al;
; 610  : 		_Alloc_proxy();
; 611  : 		}
; 612  : 
; 613  : 	void _Swap_alloc(_Myt& _Right)
; 614  : 		{	// swap allocators
; 615  : 		_Swap_adl(this->_Alnod, _Right._Alnod);
; 616  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 617  : 		}
; 618  : 
; 619  : 	void _Alloc_proxy()
; 620  : 		{	// construct proxy from _Alnod
; 621  : 		typename _Alty::template rebind<_Container_proxy>::other
; 622  : 			_Alproxy(this->_Alnod);
; 623  : 		this->_Myproxy = _Alproxy.allocate(1);
; 624  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 625  : 		this->_Myproxy->_Mycont = this;
; 626  : 		}
; 627  : 
; 628  : 	void _Free_proxy()
; 629  : 		{	// destroy proxy
; 630  : 		typename _Alty::template rebind<_Container_proxy>::other
; 631  : 			_Alproxy(this->_Alnod);
; 632  : 		this->_Orphan_all();
; 633  : 		_Alproxy.destroy(this->_Myproxy);
; 634  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 635  : 		this->_Myproxy = 0;
; 636  : 		}
; 637  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 638  : 
; 639  : 	_Nodeptr _Buyheadnode()
; 640  : 		{	// get head node using current allocator
; 641  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));
; 642  : 		}
; 643  : 
; 644  : 	void _Freeheadnode(_Nodeptr _Pnode)
; 645  : 		{	// free head node using current allocator
; 646  : 		this->_Alnod.destroy(
; 647  : 			_STD addressof(this->_Nextnode(_Pnode)));
; 648  : 		this->_Alnod.destroy(
; 649  : 			_STD addressof(this->_Prevnode(_Pnode)));
; 650  : 		this->_Alnod.deallocate(_Pnode, 1);
; 651  : 		}
; 652  : 
; 653  : 	_Nodeptr _Buynode0(_Nodeptr _Next,
; 654  : 		_Nodeptr _Prev)
; 655  : 		{	// allocate a node and set links
; 656  : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);
; 657  : 
; 658  : 		if (_Next == _Nodeptr())
; 659  : 			{	// point at self
; 660  : 			_Next = _Pnode;
; 661  : 			_Prev = _Pnode;
; 662  : 			}
; 663  : 		_TRY_BEGIN
; 664  : 		this->_Alnod.construct(
; 665  : 			_STD addressof(this->_Nextnode(_Pnode)), _Next);
; 666  : 		this->_Alnod.construct(
; 667  : 			_STD addressof(this->_Prevnode(_Pnode)), _Prev);
; 668  : 		_CATCH_ALL
; 669  : 		this->_Alnod.deallocate(_Pnode, 1);
; 670  : 		_RERAISE;
; 671  : 		_CATCH_END
; 672  : 
; 673  : 		return (_Pnode);
; 674  : 		}
; 675  : 
; 676  : 	_Alty& _Getal()
; 677  : 		{	// get reference to allocator
; 678  : 		return (this->_Alnod);
; 679  : 		}
; 680  : 
; 681  : 	const _Alty& _Getal() const
; 682  : 		{	// get reference to allocator
; 683  : 		return (this->_Alnod);
; 684  : 		}
; 685  : 	};
; 686  : 
; 687  : 		// TEMPLATE CLASS _List_alloc
; 688  : template<class _Alloc_types>
; 689  : 	class _List_alloc<false, _Alloc_types>
; 690  : 		: public _List_val<typename _Alloc_types::_Val_types>
; 691  : 	{	// base class for list to hold allocator with no storage
; 692  : public:
; 693  : 	typedef _List_alloc<false, _Alloc_types> _Myt;
; 694  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 695  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 696  : 	typedef typename _Alloc_types::_Node _Node;
; 697  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 698  : 
; 699  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 700  : 	_List_alloc(const _Alloc& = _Alloc())
; 701  : 		{	// construct head node, allocator from _Al
; 702  : 		this->_Myhead = _Buyheadnode();

  00019	89 06		 mov	 DWORD PTR [esi], eax

; 824  : 		}

  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	c2 04 00	 ret	 4
??0?$_List_buy@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE@ABV?$allocator@USChannel@CServerStateChecker@@@1@@Z ENDP ; std::_List_buy<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::_List_buy<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\list
;	COMDAT ?_Getal@?$_List_alloc@$0A@U?$_List_base_types@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_List_alloc@$0A@U?$_List_base_types@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@2@XZ PROC ; std::_List_alloc<0,std::_List_base_types<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> > >::_Getal, COMDAT
; _this$ = ecx

; 803  : 		{	// get reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 804  : 		return (_Alty());

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 805  : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?_Getal@?$_List_alloc@$0A@U?$_List_base_types@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@2@XZ ENDP ; std::_List_alloc<0,std::_List_base_types<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\list
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\list
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\list
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\list
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\list
;	COMDAT ?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@PAU32@0@Z
_TEXT	SEGMENT
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@PAU32@0@Z PROC ; std::_List_alloc<0,std::_List_base_types<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> > >::_Buynode0, COMDAT
; _this$ = ecx

; 781  : 		{	// allocate a node and set links

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File a:\vs\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00003	6a 14		 push	 20			; 00000014H
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 1f		 je	 SHORT $LN76@Buynode0
; File a:\vs\vc\include\list

; 784  : 		if (_Next == _Nodeptr())

  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Next$[ebp]
  00014	85 c9		 test	 ecx, ecx
  00016	75 06		 jne	 SHORT $LN74@Buynode0

; 785  : 			{	// point at self
; 786  : 			_Next = _Pnode;

  00018	8b c8		 mov	 ecx, eax

; 787  : 			_Prev = _Pnode;

  0001a	8b d0		 mov	 edx, eax
  0001c	eb 03		 jmp	 SHORT $LN2@Buynode0
$LN74@Buynode0:
  0001e	8b 55 0c	 mov	 edx, DWORD PTR __Prev$[ebp]
$LN2@Buynode0:
; File a:\vs\vc\include\xmemory0

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00021	89 08		 mov	 DWORD PTR [eax], ecx
; File a:\vs\vc\include\list

; 538  : 		return ((_Nodepref)_Pnode->_Prev);

  00023	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
; File a:\vs\vc\include\xmemory0

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00026	85 c9		 test	 ecx, ecx
  00028	74 02		 je	 SHORT $LN3@Buynode0
  0002a	89 11		 mov	 DWORD PTR [ecx], edx
$LN3@Buynode0:
; File a:\vs\vc\include\list

; 800  : 		}

  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
$LN76@Buynode0:
; File a:\vs\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  00030	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN78@Buynode0:
$LN75@Buynode0:
  00035	cc		 int	 3
?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@PAU32@0@Z ENDP ; std::_List_alloc<0,std::_List_base_types<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> > >::_Buynode0
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\list
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\list
;	COMDAT ?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAEXPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAEXPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@@Z PROC ; std::_List_alloc<0,std::_List_base_types<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> > >::_Freeheadnode, COMDAT
; _this$ = ecx

; 771  : 		{	// free head node using current allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Pnode$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4
; File a:\vs\vc\include\list

; 777  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAEXPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@@Z ENDP ; std::_List_alloc<0,std::_List_base_types<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> > >::_Freeheadnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\list
;	COMDAT ?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@XZ
_TEXT	SEGMENT
?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@XZ PROC ; std::_List_alloc<0,std::_List_base_types<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> > >::_Buyheadnode, COMDAT
; _this$ = ecx

; 767  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));

  00000	6a 00		 push	 0
  00002	6a 00		 push	 0
  00004	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@PAU32@0@Z ; std::_List_alloc<0,std::_List_base_types<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> > >::_Buynode0

; 768  : 		}

  00009	c3		 ret	 0
?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@XZ ENDP ; std::_List_alloc<0,std::_List_base_types<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> > >::_Buyheadnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\list
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\list
;	COMDAT ??1?$_List_alloc@$0A@U?$_List_base_types@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_alloc@$0A@U?$_List_base_types@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAE@XZ PROC ; std::_List_alloc<0,std::_List_base_types<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> > >::~_List_alloc<0,std::_List_base_types<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> > >, COMDAT
; _this$ = ecx
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00000	ff 31		 push	 DWORD PTR [ecx]
  00002	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00007	59		 pop	 ecx
; File a:\vs\vc\include\list

; 708  : 		}

  00008	c3		 ret	 0
??1?$_List_alloc@$0A@U?$_List_base_types@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_List_alloc<0,std::_List_base_types<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> > >::~_List_alloc<0,std::_List_base_types<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\list
;	COMDAT ??0?$_List_alloc@$0A@U?$_List_base_types@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAE@ABV?$allocator@USChannel@CServerStateChecker@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$_List_alloc@$0A@U?$_List_base_types@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAE@ABV?$allocator@USChannel@CServerStateChecker@@@1@@Z PROC ; std::_List_alloc<0,std::_List_base_types<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> > >::_List_alloc<0,std::_List_base_types<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> > >, COMDAT
; _this$ = ecx

; 700  : 	_List_alloc(const _Alloc& = _Alloc())

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 704  : 
; 705  : 	~_List_alloc() _NOEXCEPT
; 706  : 		{	// destroy head node
; 707  : 		_Freeheadnode(this->_Myhead);
; 708  : 		}
; 709  : 
; 710  : 	void _Change_alloc(const _Alty&)
; 711  : 		{	// replace old allocator
; 712  : 		}
; 713  : 
; 714  : 	void _Swap_alloc(_Myt&)
; 715  : 		{	// swap allocators
; 716  : 		}
; 717  : 
; 718  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 719  : 	_List_alloc(const _Alloc& = _Alloc())
; 720  : 		{	// construct allocators from _Al
; 721  : 		this->_Myhead = _Buyheadnode();
; 722  : 		_TRY_BEGIN
; 723  : 		_Alloc_proxy();
; 724  : 		_CATCH_ALL
; 725  : 		_Freeheadnode(this->_Myhead);
; 726  : 		_RERAISE;
; 727  : 		_CATCH_END
; 728  : 		}
; 729  : 
; 730  : 	~_List_alloc() _NOEXCEPT
; 731  : 		{	// destroy proxy
; 732  : 		_Freeheadnode(this->_Myhead);
; 733  : 		_Free_proxy();
; 734  : 		}
; 735  : 
; 736  : 	void _Change_alloc(const _Alty&)
; 737  : 		{	// replace old allocator
; 738  : 		}
; 739  : 
; 740  : 	void _Swap_alloc(_Myt& _Right)
; 741  : 		{	// swap allocators
; 742  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 743  : 		}
; 744  : 
; 745  : 	void _Alloc_proxy()
; 746  : 		{	// construct proxy from _Alnod
; 747  : 		typename _Alty::template rebind<_Container_proxy>::other
; 748  : 			_Alproxy;
; 749  : 		this->_Myproxy = _Alproxy.allocate(1);
; 750  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 751  : 		this->_Myproxy->_Mycont = this;
; 752  : 		}
; 753  : 
; 754  : 	void _Free_proxy()
; 755  : 		{	// destroy proxy
; 756  : 		typename _Alty::template rebind<_Container_proxy>::other
; 757  : 			_Alproxy;
; 758  : 		this->_Orphan_all();
; 759  : 		_Alproxy.destroy(this->_Myproxy);
; 760  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 761  : 		this->_Myproxy = 0;
; 762  : 		}
; 763  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 764  : 
; 765  : 	_Nodeptr _Buyheadnode()
; 766  : 		{	// get head node using current allocator
; 767  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0

; 527  : 		this->_Myhead = 0;

  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 528  : 		this->_Mysize = 0;

  0000d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 704  : 
; 705  : 	~_List_alloc() _NOEXCEPT
; 706  : 		{	// destroy head node
; 707  : 		_Freeheadnode(this->_Myhead);
; 708  : 		}
; 709  : 
; 710  : 	void _Change_alloc(const _Alty&)
; 711  : 		{	// replace old allocator
; 712  : 		}
; 713  : 
; 714  : 	void _Swap_alloc(_Myt&)
; 715  : 		{	// swap allocators
; 716  : 		}
; 717  : 
; 718  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 719  : 	_List_alloc(const _Alloc& = _Alloc())
; 720  : 		{	// construct allocators from _Al
; 721  : 		this->_Myhead = _Buyheadnode();
; 722  : 		_TRY_BEGIN
; 723  : 		_Alloc_proxy();
; 724  : 		_CATCH_ALL
; 725  : 		_Freeheadnode(this->_Myhead);
; 726  : 		_RERAISE;
; 727  : 		_CATCH_END
; 728  : 		}
; 729  : 
; 730  : 	~_List_alloc() _NOEXCEPT
; 731  : 		{	// destroy proxy
; 732  : 		_Freeheadnode(this->_Myhead);
; 733  : 		_Free_proxy();
; 734  : 		}
; 735  : 
; 736  : 	void _Change_alloc(const _Alty&)
; 737  : 		{	// replace old allocator
; 738  : 		}
; 739  : 
; 740  : 	void _Swap_alloc(_Myt& _Right)
; 741  : 		{	// swap allocators
; 742  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 743  : 		}
; 744  : 
; 745  : 	void _Alloc_proxy()
; 746  : 		{	// construct proxy from _Alnod
; 747  : 		typename _Alty::template rebind<_Container_proxy>::other
; 748  : 			_Alproxy;
; 749  : 		this->_Myproxy = _Alproxy.allocate(1);
; 750  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 751  : 		this->_Myproxy->_Mycont = this;
; 752  : 		}
; 753  : 
; 754  : 	void _Free_proxy()
; 755  : 		{	// destroy proxy
; 756  : 		typename _Alty::template rebind<_Container_proxy>::other
; 757  : 			_Alproxy;
; 758  : 		this->_Orphan_all();
; 759  : 		_Alproxy.destroy(this->_Myproxy);
; 760  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 761  : 		this->_Myproxy = 0;
; 762  : 		}
; 763  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 764  : 
; 765  : 	_Nodeptr _Buyheadnode()
; 766  : 		{	// get head node using current allocator
; 767  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));

  00014	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@PAU32@0@Z ; std::_List_alloc<0,std::_List_base_types<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> > >::_Buynode0

; 701  : 		{	// construct head node, allocator from _Al
; 702  : 		this->_Myhead = _Buyheadnode();

  00019	89 06		 mov	 DWORD PTR [esi], eax

; 703  : 		}

  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	c2 04 00	 ret	 4
??0?$_List_alloc@$0A@U?$_List_base_types@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAE@ABV?$allocator@USChannel@CServerStateChecker@@@1@@Z ENDP ; std::_List_alloc<0,std::_List_base_types<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> > >::_List_alloc<0,std::_List_base_types<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\list
;	COMDAT ?_Myval@?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@SAAAUSChannel@CServerStateChecker@@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@SAAAUSChannel@CServerStateChecker@@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@@Z PROC ; std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >::_Myval, COMDAT

; 542  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 543  : 		return ((reference)_Pnode->_Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 544  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@SAAAUSChannel@CServerStateChecker@@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@@Z ENDP ; std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >::_Myval
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\list
;	COMDAT ?_Prevnode@?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@SAAAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@SAAAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@PAU32@@Z PROC ; std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >::_Prevnode, COMDAT

; 537  : 		{	// return reference to predecessor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 538  : 		return ((_Nodepref)_Pnode->_Prev);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 539  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Prevnode@?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@SAAAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@PAU32@@Z ENDP ; std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >::_Prevnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\list
;	COMDAT ?_Nextnode@?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@SAAAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@SAAAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@PAU32@@Z PROC ; std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >::_Nextnode, COMDAT

; 532  : 		{	// return reference to successor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 533  : 		return ((_Nodepref)_Pnode->_Next);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 534  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Nextnode@?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@SAAAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@PAU32@@Z ENDP ; std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >::_Nextnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\list
;	COMDAT ??0?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@QAE@XZ PROC ; std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >, COMDAT
; _this$ = ecx

; 526  : 		{	// initialize data
; 527  : 		this->_Myhead = 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 528  : 		this->_Mysize = 0;
; 529  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c3		 ret	 0
??0?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@QAE@XZ ENDP ; std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (_Mytraits::max_size(*this));

  00000	b8 cc cc cc 0c	 mov	 eax, 214748364		; 0cccccccH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::deallocate, COMDAT
; _this$ = ecx

; 857  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 858  : 		_Mybase::deallocate(_Ptr, _Count);
; 859  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::allocate, COMDAT
; _this$ = ecx

; 846  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 1c		 je	 SHORT $LN6@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d cc cc cc 0c	 cmp	 eax, 214748364		; 0cccccccH
  00011	77 1b		 ja	 SHORT $LN14@allocate
  00013	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00016	c1 e0 02	 shl	 eax, 2
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001f	8b c8		 mov	 ecx, eax
  00021	83 c4 04	 add	 esp, 4
  00024	85 c9		 test	 ecx, ecx
  00026	74 06		 je	 SHORT $LN14@allocate
$LN6@allocate:

; 847  : 		return (_Mybase::allocate(_Count));

  00028	8b c1		 mov	 eax, ecx

; 848  : 		}

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
$LN14@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002e	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN16@allocate:
$LN13@allocate:
  00033	cc		 int	 3
?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >, COMDAT
; _this$ = ecx

; 802  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@2@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::max_size, COMDAT

; 735  : 		return (_Al.max_size());

  00000	b8 cc cc cc 0c	 mov	 eax, 214748364		; 0cccccccH

; 736  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@2@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QBEIXZ PROC ; std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >::max_size, COMDAT
; _this$ = ecx

; 612  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 cc cc cc 0c	 mov	 eax, 214748364		; 0cccccccH

; 613  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QBEIXZ ENDP ; std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@I@Z PROC ; std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >::allocate, COMDAT
; _this$ = ecx

; 577  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 1c		 je	 SHORT $LN4@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d cc cc cc 0c	 cmp	 eax, 214748364		; 0cccccccH
  00011	77 1b		 ja	 SHORT $LN11@allocate
  00013	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00016	c1 e0 02	 shl	 eax, 2
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001f	8b c8		 mov	 ecx, eax
  00021	83 c4 04	 add	 esp, 4
  00024	85 c9		 test	 ecx, ecx
  00026	74 06		 je	 SHORT $LN11@allocate
$LN4@allocate:

; 578  : 		return (_Allocate(_Count, (pointer)0));

  00028	8b c1		 mov	 eax, ecx

; 579  : 		}

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
$LN11@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002e	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN13@allocate:
$LN10@allocate:
  00033	cc		 int	 3
?allocate@?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@I@Z ENDP ; std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAEXPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAEXPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@I@Z PROC ; std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >::deallocate, COMDAT
; _this$ = ecx

; 572  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 574  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAEXPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@I@Z ENDP ; std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??0?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAE@XZ PROC ; std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >, COMDAT
; _this$ = ecx

; 553  : 		{	// construct default allocator (do nothing)
; 554  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAE@XZ ENDP ; std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??0?$allocator@USChannel@CServerStateChecker@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@USChannel@CServerStateChecker@@@std@@QAE@XZ PROC ; std::allocator<CServerStateChecker::SChannel>::allocator<CServerStateChecker::SChannel>, COMDAT
; _this$ = ecx

; 553  : 		{	// construct default allocator (do nothing)
; 554  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@USChannel@CServerStateChecker@@@std@@QAE@XZ ENDP ; std::allocator<CServerStateChecker::SChannel>::allocator<CServerStateChecker::SChannel>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp
; File a:\vs\vc\include\list
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\list
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp
;	COMDAT ?Initialize@CServerStateChecker@@QAEXXZ
_TEXT	SEGMENT
?Initialize@CServerStateChecker@@QAEXXZ PROC		; CServerStateChecker::Initialize, COMDAT
; _this$ = ecx

; 102  : {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx
; File a:\vs\vc\include\list

; 533  : 		return ((_Nodepref)_Pnode->_Next);

  00003	8b 57 08	 mov	 edx, DWORD PTR [edi+8]

; 539  : 		}
; 540  : 
; 541  : 	static reference _Myval(_Nodeptr _Pnode)
; 542  : 		{	// return reference to value in node
; 543  : 		return ((reference)_Pnode->_Myval);
; 544  : 		}
; 545  : 
; 546  : 	_Nodeptr _Myhead;	// pointer to head node
; 547  : 	size_type _Mysize;	// number of elements
; 548  : 	};
; 549  : 
; 550  : 		// TEMPLATE CLASS _List_alloc
; 551  : template<bool _Al_has_storage,
; 552  : 	class _Alloc_types>
; 553  : 	class _List_alloc
; 554  : 		: public _List_val<typename _Alloc_types::_Val_types>
; 555  : 	{	// base class for list to hold allocator with storage
; 556  : public:
; 557  : 	typename _Alloc_types::_Alnod_type _Alnod;	// allocator object
; 558  : 
; 559  : 	typedef _List_alloc<_Al_has_storage, _Alloc_types> _Myt;
; 560  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 561  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 562  : 	typedef typename _Alloc_types::_Node _Node;
; 563  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 564  : 
; 565  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 566  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 567  : 		: _Alnod(_Al)
; 568  : 		{	// construct head node, allocator from _Al
; 569  : 		this->_Myhead = _Buyheadnode();
; 570  : 		}
; 571  : 
; 572  : 	~_List_alloc() _NOEXCEPT
; 573  : 		{	// destroy head node
; 574  : 		_Freeheadnode(this->_Myhead);
; 575  : 		}
; 576  : 
; 577  : 	void _Change_alloc(const _Alty& _Al)
; 578  : 		{	// replace old allocator
; 579  : 		this->_Alnod = _Al;
; 580  : 		}
; 581  : 
; 582  : 	void _Swap_alloc(_Myt& _Right)
; 583  : 		{	// swap allocators
; 584  : 		_Swap_adl(this->_Alnod, _Right._Alnod);
; 585  : 		}
; 586  : 
; 587  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 588  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 589  : 		: _Alnod(_Al)
; 590  : 		{	// construct head node, allocator from _Al
; 591  : 		this->_Myhead = _Buyheadnode();
; 592  : 		_TRY_BEGIN
; 593  : 		_Alloc_proxy();
; 594  : 		_CATCH_ALL
; 595  : 		_Freeheadnode(this->_Myhead);
; 596  : 		_RERAISE;
; 597  : 		_CATCH_END
; 598  : 		}
; 599  : 
; 600  : 	~_List_alloc() _NOEXCEPT
; 601  : 		{	// destroy proxy
; 602  : 		_Freeheadnode(this->_Myhead);
; 603  : 		_Free_proxy();
; 604  : 		}
; 605  : 
; 606  : 	void _Change_alloc(const _Alty& _Al)
; 607  : 		{	// replace old allocator
; 608  : 		_Free_proxy();
; 609  : 		this->_Alnod = _Al;
; 610  : 		_Alloc_proxy();
; 611  : 		}
; 612  : 
; 613  : 	void _Swap_alloc(_Myt& _Right)
; 614  : 		{	// swap allocators
; 615  : 		_Swap_adl(this->_Alnod, _Right._Alnod);
; 616  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 617  : 		}
; 618  : 
; 619  : 	void _Alloc_proxy()
; 620  : 		{	// construct proxy from _Alnod
; 621  : 		typename _Alty::template rebind<_Container_proxy>::other
; 622  : 			_Alproxy(this->_Alnod);
; 623  : 		this->_Myproxy = _Alproxy.allocate(1);
; 624  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 625  : 		this->_Myproxy->_Mycont = this;
; 626  : 		}
; 627  : 
; 628  : 	void _Free_proxy()
; 629  : 		{	// destroy proxy
; 630  : 		typename _Alty::template rebind<_Container_proxy>::other
; 631  : 			_Alproxy(this->_Alnod);
; 632  : 		this->_Orphan_all();
; 633  : 		_Alproxy.destroy(this->_Myproxy);
; 634  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 635  : 		this->_Myproxy = 0;
; 636  : 		}
; 637  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 638  : 
; 639  : 	_Nodeptr _Buyheadnode()
; 640  : 		{	// get head node using current allocator
; 641  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));
; 642  : 		}
; 643  : 
; 644  : 	void _Freeheadnode(_Nodeptr _Pnode)
; 645  : 		{	// free head node using current allocator
; 646  : 		this->_Alnod.destroy(
; 647  : 			_STD addressof(this->_Nextnode(_Pnode)));
; 648  : 		this->_Alnod.destroy(
; 649  : 			_STD addressof(this->_Prevnode(_Pnode)));
; 650  : 		this->_Alnod.deallocate(_Pnode, 1);
; 651  : 		}
; 652  : 
; 653  : 	_Nodeptr _Buynode0(_Nodeptr _Next,
; 654  : 		_Nodeptr _Prev)
; 655  : 		{	// allocate a node and set links
; 656  : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);
; 657  : 
; 658  : 		if (_Next == _Nodeptr())
; 659  : 			{	// point at self
; 660  : 			_Next = _Pnode;
; 661  : 			_Prev = _Pnode;
; 662  : 			}
; 663  : 		_TRY_BEGIN
; 664  : 		this->_Alnod.construct(
; 665  : 			_STD addressof(this->_Nextnode(_Pnode)), _Next);
; 666  : 		this->_Alnod.construct(
; 667  : 			_STD addressof(this->_Prevnode(_Pnode)), _Prev);
; 668  : 		_CATCH_ALL
; 669  : 		this->_Alnod.deallocate(_Pnode, 1);
; 670  : 		_RERAISE;
; 671  : 		_CATCH_END
; 672  : 
; 673  : 		return (_Pnode);
; 674  : 		}
; 675  : 
; 676  : 	_Alty& _Getal()
; 677  : 		{	// get reference to allocator
; 678  : 		return (this->_Alnod);
; 679  : 		}
; 680  : 
; 681  : 	const _Alty& _Getal() const
; 682  : 		{	// get reference to allocator
; 683  : 		return (this->_Alnod);
; 684  : 		}
; 685  : 	};
; 686  : 
; 687  : 		// TEMPLATE CLASS _List_alloc
; 688  : template<class _Alloc_types>
; 689  : 	class _List_alloc<false, _Alloc_types>
; 690  : 		: public _List_val<typename _Alloc_types::_Val_types>
; 691  : 	{	// base class for list to hold allocator with no storage
; 692  : public:
; 693  : 	typedef _List_alloc<false, _Alloc_types> _Myt;
; 694  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 695  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 696  : 	typedef typename _Alloc_types::_Node _Node;
; 697  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 698  : 
; 699  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 700  : 	_List_alloc(const _Alloc& = _Alloc())
; 701  : 		{	// construct head node, allocator from _Al
; 702  : 		this->_Myhead = _Buyheadnode();
; 703  : 		}
; 704  : 
; 705  : 	~_List_alloc() _NOEXCEPT
; 706  : 		{	// destroy head node
; 707  : 		_Freeheadnode(this->_Myhead);
; 708  : 		}
; 709  : 
; 710  : 	void _Change_alloc(const _Alty&)
; 711  : 		{	// replace old allocator
; 712  : 		}
; 713  : 
; 714  : 	void _Swap_alloc(_Myt&)
; 715  : 		{	// swap allocators
; 716  : 		}
; 717  : 
; 718  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 719  : 	_List_alloc(const _Alloc& = _Alloc())
; 720  : 		{	// construct allocators from _Al
; 721  : 		this->_Myhead = _Buyheadnode();
; 722  : 		_TRY_BEGIN
; 723  : 		_Alloc_proxy();
; 724  : 		_CATCH_ALL
; 725  : 		_Freeheadnode(this->_Myhead);
; 726  : 		_RERAISE;
; 727  : 		_CATCH_END
; 728  : 		}
; 729  : 
; 730  : 	~_List_alloc() _NOEXCEPT
; 731  : 		{	// destroy proxy
; 732  : 		_Freeheadnode(this->_Myhead);
; 733  : 		_Free_proxy();
; 734  : 		}
; 735  : 
; 736  : 	void _Change_alloc(const _Alty&)
; 737  : 		{	// replace old allocator
; 738  : 		}
; 739  : 
; 740  : 	void _Swap_alloc(_Myt& _Right)
; 741  : 		{	// swap allocators
; 742  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 743  : 		}
; 744  : 
; 745  : 	void _Alloc_proxy()
; 746  : 		{	// construct proxy from _Alnod
; 747  : 		typename _Alty::template rebind<_Container_proxy>::other
; 748  : 			_Alproxy;
; 749  : 		this->_Myproxy = _Alproxy.allocate(1);
; 750  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 751  : 		this->_Myproxy->_Mycont = this;
; 752  : 		}
; 753  : 
; 754  : 	void _Free_proxy()
; 755  : 		{	// destroy proxy
; 756  : 		typename _Alty::template rebind<_Container_proxy>::other
; 757  : 			_Alproxy;
; 758  : 		this->_Orphan_all();
; 759  : 		_Alproxy.destroy(this->_Myproxy);
; 760  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 761  : 		this->_Myproxy = 0;
; 762  : 		}
; 763  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 764  : 
; 765  : 	_Nodeptr _Buyheadnode()
; 766  : 		{	// get head node using current allocator
; 767  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));
; 768  : 		}
; 769  : 
; 770  : 	void _Freeheadnode(_Nodeptr _Pnode)
; 771  : 		{	// free head node using current allocator
; 772  : 		this->_Getal().destroy(
; 773  : 			_STD addressof(this->_Nextnode(_Pnode)));
; 774  : 		this->_Getal().destroy(
; 775  : 			_STD addressof(this->_Prevnode(_Pnode)));
; 776  : 		this->_Getal().deallocate(_Pnode, 1);
; 777  : 		}
; 778  : 
; 779  : 	_Nodeptr _Buynode0(_Nodeptr _Next,
; 780  : 		_Nodeptr _Prev)
; 781  : 		{	// allocate a node and set links
; 782  : 		_Nodeptr _Pnode = this->_Getal().allocate(1);
; 783  : 
; 784  : 		if (_Next == _Nodeptr())
; 785  : 			{	// point at self
; 786  : 			_Next = _Pnode;
; 787  : 			_Prev = _Pnode;
; 788  : 			}
; 789  : 		_TRY_BEGIN
; 790  : 		this->_Getal().construct(
; 791  : 			_STD addressof(this->_Nextnode(_Pnode)), _Next);
; 792  : 		this->_Getal().construct(
; 793  : 			_STD addressof(this->_Prevnode(_Pnode)), _Prev);
; 794  : 		_CATCH_ALL
; 795  : 		this->_Getal().deallocate(_Pnode, 1);
; 796  : 		_RERAISE;
; 797  : 		_CATCH_END
; 798  : 
; 799  : 		return (_Pnode);
; 800  : 		}
; 801  : 
; 802  : 	_Alty _Getal() const
; 803  : 		{	// get reference to allocator
; 804  : 		return (_Alty());
; 805  : 		}
; 806  : 	};
; 807  : 
; 808  : 		// TEMPLATE CLASS _List_buy
; 809  : template<class _Ty,
; 810  : 	class _Alloc>
; 811  : 	class _List_buy
; 812  : 		: public _List_alloc<!is_empty<_Alloc>::value,
; 813  : 			_List_base_types<_Ty, _Alloc> >
; 814  : 	{	// base class for list to hold buynode/freenode functions
; 815  : public:
; 816  : 	typedef _List_alloc<!is_empty<_Alloc>::value,
; 817  : 		_List_base_types<_Ty, _Alloc> > _Mybase;
; 818  : 	typedef typename _Mybase::_Alty _Alty;
; 819  : 	typedef typename _Mybase::_Nodeptr _Nodeptr;
; 820  : 
; 821  : 	_List_buy(const _Alloc& _Al = _Alloc())
; 822  : 		: _Mybase(_Al)
; 823  : 		{	// construct from allocator
; 824  : 		}
; 825  : 
; 826  : 	template<class... _Valty>
; 827  : 		_Nodeptr _Buynode(_Nodeptr _Next, _Nodeptr _Prev,
; 828  : 			_Valty&&... _Val)
; 829  : 		{	// allocate a node and set links and value
; 830  : 		_Nodeptr _Pnode = this->_Buynode0(_Next, _Prev);
; 831  : 
; 832  : 		_TRY_BEGIN
; 833  : 		this->_Getal().construct(
; 834  : 			_STD addressof(this->_Myval(_Pnode)),
; 835  : 				_STD forward<_Valty>(_Val)...);
; 836  : 		_CATCH_ALL
; 837  : 		this->_Getal().deallocate(_Pnode, 1);
; 838  : 		_RERAISE;
; 839  : 		_CATCH_END
; 840  : 
; 841  : 		return (_Pnode);
; 842  : 		}
; 843  : 
; 844  : 
; 845  : 	void _Freenode(_Nodeptr _Pnode)
; 846  : 		{	// give node back
; 847  : 		this->_Getal().destroy(
; 848  : 			_STD addressof(this->_Nextnode(_Pnode)));
; 849  : 		this->_Getal().destroy(
; 850  : 			_STD addressof(this->_Prevnode(_Pnode)));
; 851  : 		this->_Getal().destroy(
; 852  : 			_STD addressof(this->_Myval(_Pnode)));
; 853  : 		this->_Getal().deallocate(_Pnode, 1);
; 854  : 		}
; 855  : 	};
; 856  : 
; 857  : 		// TEMPLATE CLASS list
; 858  : template<class _Ty,
; 859  : 	class _Alloc = allocator<_Ty> >
; 860  : 	class list
; 861  : 		: public _List_buy<_Ty, _Alloc>
; 862  : 	{	// bidirectional linked list
; 863  : public:
; 864  : 	typedef list<_Ty, _Alloc> _Myt;
; 865  : 	typedef _List_buy<_Ty, _Alloc> _Mybase;
; 866  : 	typedef typename _Mybase::_Node _Node;
; 867  : 	typedef typename _Mybase::_Nodeptr _Nodeptr;
; 868  : 	typedef typename _Mybase::_Alty _Alty;
; 869  : 
; 870  : 	typedef _Alloc allocator_type;
; 871  : 	typedef typename _Mybase::size_type size_type;
; 872  : 	typedef typename _Mybase::difference_type difference_type;
; 873  : 	typedef typename _Mybase::pointer pointer;
; 874  : 	typedef typename _Mybase::const_pointer const_pointer;
; 875  : 	typedef typename _Mybase::reference reference;
; 876  : 	typedef typename _Mybase::const_reference const_reference;
; 877  : 	typedef typename _Mybase::value_type value_type;
; 878  : 
; 879  : 	typedef typename _Mybase::const_iterator const_iterator;
; 880  : 	typedef typename _Mybase::iterator iterator;
; 881  : 	typedef typename _Mybase::_Unchecked_const_iterator
; 882  : 		_Unchecked_const_iterator;
; 883  : 	typedef typename _Mybase::_Unchecked_iterator
; 884  : 		_Unchecked_iterator;
; 885  : 
; 886  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 887  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 888  : 
; 889  : 	list()
; 890  : 		: _Mybase()
; 891  : 		{	// construct empty list
; 892  : 		}
; 893  : 
; 894  : 	explicit list(const _Alloc& _Al)
; 895  : 		: _Mybase(_Al)
; 896  : 		{	// construct empty list, allocator
; 897  : 		}
; 898  : 
; 899  : 	explicit list(size_type _Count)
; 900  : 		: _Mybase()
; 901  : 		{	// construct list from _Count * _Ty()
; 902  : 		resize(_Count);
; 903  : 		}
; 904  : 
; 905  : 	list(size_type _Count, const _Ty& _Val)
; 906  : 		: _Mybase()
; 907  : 		{	// construct list from _Count * _Val
; 908  : 		_Construct_n(_Count, _Val);
; 909  : 		}
; 910  : 
; 911  : 	list(size_type _Count, const _Ty& _Val, const _Alloc& _Al)
; 912  : 		: _Mybase(_Al)
; 913  : 		{	// construct list from _Count * _Val, allocator
; 914  : 		_Construct_n(_Count, _Val);
; 915  : 		}
; 916  : 
; 917  : 	list(const _Myt& _Right)
; 918  : 
; 919  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 920  : 
; 921  : 
; 922  : 		{	// construct list by copying _Right
; 923  : 		_TRY_BEGIN
; 924  : 		insert(begin(), _Right.begin(), _Right.end());
; 925  : 		_CATCH_ALL
; 926  : 		_Tidy();
; 927  : 		_RERAISE;
; 928  : 		_CATCH_END
; 929  : 		}
; 930  : 
; 931  : 	list(const _Myt& _Right, const _Alloc& _Al)
; 932  : 		: _Mybase(_Al)
; 933  : 		{	// construct list by copying _Right, allocator
; 934  : 		_TRY_BEGIN
; 935  : 		insert(begin(), _Right.begin(), _Right.end());
; 936  : 		_CATCH_ALL
; 937  : 		_Tidy();
; 938  : 		_RERAISE;
; 939  : 		_CATCH_END
; 940  : 		}
; 941  : 
; 942  : 	template<class _Iter,
; 943  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 944  : 			void>::type>
; 945  : 		list(_Iter _First, _Iter _Last)
; 946  : 		: _Mybase()
; 947  : 		{	// construct list from [_First, _Last)
; 948  : 		_Construct(_First, _Last);
; 949  : 		}
; 950  : 
; 951  : 	template<class _Iter,
; 952  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 953  : 			void>::type>
; 954  : 		list(_Iter _First, _Iter _Last, const _Alloc& _Al)
; 955  : 		: _Mybase(_Al)
; 956  : 		{	// construct list, allocator from [_First, _Last)
; 957  : 		_Construct(_First, _Last);
; 958  : 		}
; 959  : 
; 960  : 	template<class _Iter>
; 961  : 		void _Construct(_Iter _First, _Iter _Last)
; 962  : 		{	// construct list from [_First, _Last), input iterators
; 963  : 		_TRY_BEGIN
; 964  : 		insert(begin(), _First, _Last);
; 965  : 		_CATCH_ALL
; 966  : 		_Tidy();
; 967  : 		_RERAISE;
; 968  : 		_CATCH_END
; 969  : 		}
; 970  : 
; 971  : 	void _Construct_n(size_type _Count,
; 972  : 		const _Ty& _Val)
; 973  : 		{	// construct from _Count * _Val
; 974  : 		_TRY_BEGIN
; 975  : 		_Insert_n(_Unchecked_begin(), _Count, _Val);
; 976  : 		_CATCH_ALL
; 977  : 		_Tidy();
; 978  : 		_RERAISE;
; 979  : 		_CATCH_END
; 980  : 		}
; 981  : 
; 982  : 	list(_Myt&& _Right)
; 983  : 		: _Mybase(_Right._Getal())
; 984  : 		{	// construct list by moving _Right
; 985  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 986  : 		}
; 987  : 
; 988  : 	list(_Myt&& _Right, const _Alloc& _Al)
; 989  : 		: _Mybase(_Al)
; 990  : 		{	// construct list by moving _Right, allocator
; 991  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 992  : 		}
; 993  : 
; 994  : 	_Myt& operator=(_Myt&& _Right)
; 995  : 		{	// assign by moving _Right
; 996  : 		if (this != &_Right)
; 997  : 			{	// different, assign it
; 998  : 			clear();
; 999  : 
; 1000 : 			if (_Alty::propagate_on_container_move_assignment::value
; 1001 : 				&& this->_Getal() != _Right._Getal())
; 1002 : 				this->_Change_alloc(_Right._Getal());
; 1003 : 
; 1004 : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 1005 : 			}
; 1006 : 		return (*this);
; 1007 : 		}
; 1008 : 
; 1009 : 	void _Assign_rv(_Myt&& _Right)
; 1010 : 		{	// swap with empty *this, same allocator
; 1011 : 		this->_Swap_all(_Right);
; 1012 : 		_Swap_adl(this->_Myhead, _Right._Myhead);
; 1013 : 		_STD swap(this->_Mysize, _Right._Mysize);
; 1014 : 		}
; 1015 : 
; 1016 : 	void push_front(_Ty&& _Val)
; 1017 : 		{	// insert element at beginning
; 1018 : 		_Insert(_Unchecked_begin(), _STD forward<_Ty>(_Val));
; 1019 : 		}
; 1020 : 
; 1021 : 	void push_back(_Ty&& _Val)
; 1022 : 		{	// insert element at end
; 1023 : 		_Insert(_Unchecked_end(), _STD forward<_Ty>(_Val));
; 1024 : 		}
; 1025 : 
; 1026 : 	iterator insert(const_iterator _Where, _Ty&& _Val)
; 1027 : 		{	// insert _Val at _Where
; 1028 : 		return (emplace(_Where, _STD forward<_Ty>(_Val)));
; 1029 : 		}
; 1030 : 
; 1031 : 	template<class... _Valty>
; 1032 : 		void emplace_front(_Valty&&... _Val)
; 1033 : 		{	// insert element at beginning
; 1034 : 		_Insert(_Unchecked_begin(), _STD forward<_Valty>(_Val)...);
; 1035 : 		}
; 1036 : 
; 1037 : 	template<class... _Valty>
; 1038 : 		void emplace_back(_Valty&&... _Val)
; 1039 : 		{	// insert element at end
; 1040 : 		_Insert(_Unchecked_end(), _STD forward<_Valty>(_Val)...);
; 1041 : 		}
; 1042 : 
; 1043 : 	template<class... _Valty>
; 1044 : 		iterator emplace(const_iterator _Where, _Valty&&... _Val)
; 1045 : 		{	// insert element at _Where
; 1046 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1047 : 		if (_Where._Getcont() != this)
; 1048 : 			_DEBUG_ERROR("list emplace iterator outside range");
; 1049 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1050 : 
; 1051 : 		_Insert(_Where._Unchecked(), _STD forward<_Valty>(_Val)...);
; 1052 : 		return (_Make_iter(--_Where));
; 1053 : 		}
; 1054 : 
; 1055 : 	template<class... _Valty>
; 1056 : 		void _Insert(_Unchecked_const_iterator _Where,
; 1057 : 		_Valty&&... _Val)
; 1058 : 		{	// insert element at _Where
; 1059 : 		_Nodeptr _Pnode = _Where._Mynode();
; 1060 : 		_Nodeptr _Newnode =
; 1061 : 			this->_Buynode(_Pnode, this->_Prevnode(_Pnode),
; 1062 : 				_STD forward<_Valty>(_Val)...);
; 1063 : 		_Incsize(1);
; 1064 : 		this->_Prevnode(_Pnode) = _Newnode;
; 1065 : 		this->_Nextnode(this->_Prevnode(_Newnode)) = _Newnode;
; 1066 : 		}
; 1067 : 
; 1068 : 
; 1069 : 	list(_XSTD initializer_list<_Ty> _Ilist,
; 1070 : 		const _Alloc& _Al = allocator_type())
; 1071 : 		: _Mybase(_Al)
; 1072 : 		{	// construct from initializer_list
; 1073 : 		insert(begin(), _Ilist.begin(), _Ilist.end());
; 1074 : 		}
; 1075 : 
; 1076 : 	_Myt& operator=(_XSTD initializer_list<_Ty> _Ilist)
; 1077 : 		{	// assign initializer_list
; 1078 : 		assign(_Ilist.begin(), _Ilist.end());
; 1079 : 		return (*this);
; 1080 : 		}
; 1081 : 
; 1082 : 	void assign(_XSTD initializer_list<_Ty> _Ilist)
; 1083 : 		{	// assign initializer_list
; 1084 : 		assign(_Ilist.begin(), _Ilist.end());
; 1085 : 		}
; 1086 : 
; 1087 : 	iterator insert(const_iterator _Where,
; 1088 : 		_XSTD initializer_list<_Ty> _Ilist)
; 1089 : 		{	// insert initializer_list
; 1090 : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 1091 : 		}
; 1092 : 
; 1093 : 	~list() _NOEXCEPT
; 1094 : 		{	// destroy the object
; 1095 : 		_Tidy();
; 1096 : 		}
; 1097 : 
; 1098 : 	_Myt& operator=(const _Myt& _Right)
; 1099 : 		{	// assign _Right
; 1100 : 		if (this != &_Right)
; 1101 : 			{	// different, assign it
; 1102 : 			if (this->_Getal() != _Right._Getal()
; 1103 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1104 : 				{	// change allocator before copying
; 1105 : 				clear();
; 1106 : 				this->_Change_alloc(_Right._Getal());
; 1107 : 				}
; 1108 : 
; 1109 : 			assign(_Right.begin(), _Right.end());
; 1110 : 			}
; 1111 : 		return (*this);
; 1112 : 		}
; 1113 : 
; 1114 : 	iterator begin() _NOEXCEPT
; 1115 : 		{	// return iterator for beginning of mutable sequence
; 1116 : 		return (iterator(this->_Nextnode(this->_Myhead), this));
; 1117 : 		}
; 1118 : 
; 1119 : 	const_iterator begin() const _NOEXCEPT
; 1120 : 		{	// return iterator for beginning of nonmutable sequence
; 1121 : 		return (const_iterator(this->_Nextnode(this->_Myhead), this));
; 1122 : 		}
; 1123 : 
; 1124 : 	iterator end() _NOEXCEPT
; 1125 : 		{	// return iterator for end of mutable sequence
; 1126 : 		return (iterator(this->_Myhead, this));
; 1127 : 		}
; 1128 : 
; 1129 : 	const_iterator end() const _NOEXCEPT
; 1130 : 		{	// return iterator for end of nonmutable sequence
; 1131 : 		return (const_iterator(this->_Myhead, this));
; 1132 : 		}
; 1133 : 
; 1134 : 	_Unchecked_iterator _Unchecked_begin()
; 1135 : 		{	// return iterator for beginning of mutable sequence
; 1136 : 		return (_Unchecked_iterator(this->_Nextnode(this->_Myhead),
; 1137 : 			this));
; 1138 : 		}
; 1139 : 
; 1140 : 	_Unchecked_const_iterator _Unchecked_begin() const
; 1141 : 		{	// return iterator for beginning of nonmutable sequence
; 1142 : 		return (_Unchecked_const_iterator(this->_Nextnode(this->_Myhead),
; 1143 : 			this));
; 1144 : 		}
; 1145 : 
; 1146 : 	_Unchecked_iterator _Unchecked_end()
; 1147 : 		{	// return unchecked iterator for end of mutable sequence
; 1148 : 		return (_Unchecked_iterator(this->_Myhead, this));
; 1149 : 		}
; 1150 : 
; 1151 : 	_Unchecked_const_iterator _Unchecked_end() const
; 1152 : 		{	// return unchecked iterator for end of nonmutable sequence
; 1153 : 		return (_Unchecked_const_iterator(this->_Myhead, this));
; 1154 : 		}
; 1155 : 
; 1156 : 	iterator _Make_iter(const_iterator _Where) const _NOEXCEPT
; 1157 : 		{	// make iterator from const_iterator
; 1158 : 		return (iterator(_Where._Ptr, this));
; 1159 : 		}
; 1160 : 
; 1161 : 	iterator _Make_iter(_Unchecked_const_iterator _Where) const
; 1162 : 		{	// make iterator from _Unchecked_const_iterator
; 1163 : 		return (iterator(_Where._Ptr, this));
; 1164 : 		}
; 1165 : 
; 1166 : 	reverse_iterator rbegin() _NOEXCEPT
; 1167 : 		{	// return iterator for beginning of reversed mutable sequence
; 1168 : 		return (reverse_iterator(end()));
; 1169 : 		}
; 1170 : 
; 1171 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1172 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1173 : 		return (const_reverse_iterator(end()));
; 1174 : 		}
; 1175 : 
; 1176 : 	reverse_iterator rend() _NOEXCEPT
; 1177 : 		{	// return iterator for end of reversed mutable sequence
; 1178 : 		return (reverse_iterator(begin()));
; 1179 : 		}
; 1180 : 
; 1181 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1182 : 		{	// return iterator for end of reversed nonmutable sequence
; 1183 : 		return (const_reverse_iterator(begin()));
; 1184 : 		}
; 1185 : 
; 1186 : 	const_iterator cbegin() const _NOEXCEPT
; 1187 : 		{	// return iterator for beginning of nonmutable sequence
; 1188 : 		return (((const _Myt *)this)->begin());
; 1189 : 		}
; 1190 : 
; 1191 : 	const_iterator cend() const _NOEXCEPT
; 1192 : 		{	// return iterator for end of nonmutable sequence
; 1193 : 		return (((const _Myt *)this)->end());
; 1194 : 		}
; 1195 : 
; 1196 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1197 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1198 : 		return (((const _Myt *)this)->rbegin());
; 1199 : 		}
; 1200 : 
; 1201 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1202 : 		{	// return iterator for end of reversed nonmutable sequence
; 1203 : 		return (((const _Myt *)this)->rend());
; 1204 : 		}
; 1205 : 
; 1206 : 	void resize(size_type _Newsize)
; 1207 : 		{	// determine new length, padding with _Ty() elements as needed
; 1208 : 		if (this->_Mysize < _Newsize)
; 1209 : 			{	// pad to make larger
; 1210 : 			size_type _Count = 0;
; 1211 : 			_TRY_BEGIN
; 1212 : 			for (; this->_Mysize < _Newsize; ++_Count)
; 1213 : 				_Insert(_Unchecked_end());
; 1214 : 			_CATCH_ALL
; 1215 : 			for (; 0 < _Count; --_Count)
; 1216 : 				pop_back();	// undo inserts
; 1217 : 			_RERAISE;
; 1218 : 			_CATCH_END
; 1219 : 			}
; 1220 : 		else
; 1221 : 			while (_Newsize < this->_Mysize)
; 1222 : 				pop_back();
; 1223 : 		}
; 1224 : 
; 1225 : 	void resize(size_type _Newsize, const _Ty& _Val)
; 1226 : 		{	// determine new length, padding with _Val elements as needed
; 1227 : 		if (this->_Mysize < _Newsize)
; 1228 : 			_Insert_n(_Unchecked_end(), _Newsize - this->_Mysize, _Val);
; 1229 : 		else
; 1230 : 			while (_Newsize < this->_Mysize)
; 1231 : 				pop_back();
; 1232 : 		}
; 1233 : 
; 1234 : 	size_type size() const _NOEXCEPT
; 1235 : 		{	// return length of sequence
; 1236 : 		return (this->_Mysize);
; 1237 : 		}
; 1238 : 
; 1239 : 	size_type max_size() const _NOEXCEPT
; 1240 : 		{	// return maximum possible length of sequence
; 1241 : 		return (this->_Getal().max_size());
; 1242 : 		}
; 1243 : 
; 1244 : 	bool empty() const _NOEXCEPT
; 1245 : 		{	// test if sequence is empty
; 1246 : 		return (this->_Mysize == 0);
; 1247 : 		}
; 1248 : 
; 1249 : 	allocator_type get_allocator() const _NOEXCEPT
; 1250 : 		{	// return allocator object for values
; 1251 : 		return (this->_Getal());
; 1252 : 		}
; 1253 : 
; 1254 : 	reference front()
; 1255 : 		{	// return first element of mutable sequence
; 1256 : 		return (*begin());
; 1257 : 		}
; 1258 : 
; 1259 : 	const_reference front() const
; 1260 : 		{	// return first element of nonmutable sequence
; 1261 : 		return (*begin());
; 1262 : 		}
; 1263 : 
; 1264 : 	reference back()
; 1265 : 		{	// return last element of mutable sequence
; 1266 : 		return (*(--end()));
; 1267 : 		}
; 1268 : 
; 1269 : 	const_reference back() const
; 1270 : 		{	// return last element of nonmutable sequence
; 1271 : 		return (*(--end()));
; 1272 : 		}
; 1273 : 
; 1274 : 	void push_front(const _Ty& _Val)
; 1275 : 		{	// insert element at beginning
; 1276 : 		_Insert(_Unchecked_begin(), _Val);
; 1277 : 		}
; 1278 : 
; 1279 : 	void pop_front()
; 1280 : 		{	// erase element at beginning
; 1281 : 		erase(begin());
; 1282 : 		}
; 1283 : 
; 1284 : 	void push_back(const _Ty& _Val)
; 1285 : 		{	// insert element at end
; 1286 : 		_Insert(_Unchecked_end(), _Val);
; 1287 : 		}
; 1288 : 
; 1289 : 	void pop_back()
; 1290 : 		{	// erase element at end
; 1291 : 		erase(--end());
; 1292 : 		}
; 1293 : 
; 1294 : 	template<class _Iter>
; 1295 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1296 : 			void>::type
; 1297 : 		assign(_Iter _First, _Iter _Last)
; 1298 : 		{	// assign [_First, _Last), input iterators
; 1299 : 		iterator _Old = begin();
; 1300 : 		_TRY_BEGIN
; 1301 : 		for (; _First != _Last && _Old != end(); ++_First, ++_Old)
; 1302 : 			_Reusenode(_Old, *_First);
; 1303 : 		for (; _First != _Last; ++_First)
; 1304 : 			_Insert(_Unchecked_end(), *_First);
; 1305 : 		_CATCH_ALL
; 1306 : 		clear();
; 1307 : 		_RERAISE;
; 1308 : 		_CATCH_END
; 1309 : 		erase(_Old, end());
; 1310 : 		}
; 1311 : 
; 1312 : 	template<class _TArg>
; 1313 : 		void _Reusenode(iterator _Where, _TArg&& _Arg)
; 1314 : 		{	// destroy the element at _Where and reconstruct from _Arg
; 1315 : 		_TRY_BEGIN
; 1316 : 		this->_Getal().destroy(
; 1317 : 			_STD addressof(this->_Myval(_Where._Ptr)));
; 1318 : 		this->_Getal().construct(
; 1319 : 			_STD addressof(this->_Myval(_Where._Ptr)),
; 1320 : 			_STD forward<_TArg>(_Arg));
; 1321 : 		_CATCH_ALL
; 1322 : 		_Unlinknode(_Where);
; 1323 : 		this->_Getal().destroy(
; 1324 : 			_STD addressof(this->_Nextnode(_Where._Ptr)));
; 1325 : 		this->_Getal().destroy(
; 1326 : 			_STD addressof(this->_Prevnode(_Where._Ptr)));
; 1327 : 		this->_Getal().deallocate(_Where._Ptr, 1);
; 1328 : 		_RERAISE;
; 1329 : 		_CATCH_END
; 1330 : 		}
; 1331 : 
; 1332 : 	void assign(size_type _Count, const _Ty& _Val)
; 1333 : 		{	// assign _Count * _Val
; 1334 : 		clear();
; 1335 : 		_Insert_n(_Unchecked_begin(), _Count, _Val);
; 1336 : 		}
; 1337 : 
; 1338 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1339 : 		{	// insert _Val at _Where
; 1340 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1341 : 		if (_Where._Getcont() != this)
; 1342 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1343 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1344 : 
; 1345 : 		_Insert(_Where._Unchecked(), _Val);
; 1346 : 		return (_Make_iter(--_Where));
; 1347 : 		}
; 1348 : 
; 1349 : 	iterator insert(const_iterator _Where, size_type _Count, const _Ty& _Val)
; 1350 : 		{	// insert _Count * _Val at _Where
; 1351 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1352 : 		if (_Where._Getcont() != this)
; 1353 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1354 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1355 : 
; 1356 : 		iterator _Prev = _Make_iter(_Where);
; 1357 : 		if (_Prev == begin())
; 1358 : 			{	// insert sequence at beginning
; 1359 : 			_Insert_n(_Where._Unchecked(), _Count, _Val);
; 1360 : 			return (begin());
; 1361 : 			}
; 1362 : 		else
; 1363 : 			{	// insert sequence not at beginning
; 1364 : 			--_Prev;
; 1365 : 			_Insert_n(_Where._Unchecked(), _Count, _Val);
; 1366 : 			return (++_Prev);
; 1367 : 			}
; 1368 : 		}
; 1369 : 
; 1370 : 	template<class _Iter>
; 1371 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1372 : 			iterator>::type
; 1373 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1374 : 		{	// insert [_First, _Last) at _Where
; 1375 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1376 : 		if (_Where._Getcont() != this)
; 1377 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1378 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1379 : 
; 1380 : 		iterator _Prev = _Make_iter(_Where);
; 1381 : 		if (_Prev == begin())
; 1382 : 			{	// insert sequence at beginning
; 1383 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1384 : 				_Iter_cat(_First));
; 1385 : 			return (begin());
; 1386 : 			}
; 1387 : 		else
; 1388 : 			{	// insert sequence not at beginning
; 1389 : 			--_Prev;
; 1390 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1391 : 				_Iter_cat(_First));
; 1392 : 			return (++_Prev);
; 1393 : 			}
; 1394 : 		}
; 1395 : 
; 1396 : 	template<class _Iter>
; 1397 : 		void _Insert_range(_Unchecked_const_iterator _Where,
; 1398 : 			_Iter _First, _Iter _Last, input_iterator_tag)
; 1399 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1400 : 		size_type _Num = 0;
; 1401 : 
; 1402 : 		_TRY_BEGIN
; 1403 : 		for (; _First != _Last; ++_First, ++_Num)
; 1404 : 			_Insert(_Where, *_First);
; 1405 : 		_CATCH_ALL
; 1406 : 		for (; 0 < _Num; --_Num)
; 1407 : 			{	// undo inserts
; 1408 : 			_Unchecked_const_iterator _Before = _Where;
; 1409 : 			_Unchecked_erase(--_Before);
; 1410 : 			}
; 1411 : 		_RERAISE;
; 1412 : 		_CATCH_END
; 1413 : 		}
; 1414 : 
; 1415 : 	template<class _Iter>
; 1416 : 		void _Insert_range(_Unchecked_const_iterator _Where,
; 1417 : 			_Iter _First, _Iter _Last, forward_iterator_tag)
; 1418 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1419 : 		_DEBUG_RANGE(_First, _Last);
; 1420 : 		_Iter _Next = _First;
; 1421 : 
; 1422 : 		_TRY_BEGIN
; 1423 : 		for (; _First != _Last; ++_First)
; 1424 : 			_Insert(_Where, *_First);
; 1425 : 		_CATCH_ALL
; 1426 : 		for (; _Next != _First; ++_Next)
; 1427 : 			{	// undo inserts
; 1428 : 			_Unchecked_const_iterator _Before = _Where;
; 1429 : 			_Unchecked_erase(--_Before);
; 1430 : 			}
; 1431 : 		_RERAISE;
; 1432 : 		_CATCH_END
; 1433 : 		}
; 1434 : 
; 1435 : 	_Nodeptr _Unlinknode(const_iterator _Where)
; 1436 : 		{	// unlink node at _Where from the list
; 1437 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1438 : 		if (_Where._Getcont() != this || _Where._Ptr == this->_Myhead)
; 1439 : 			_DEBUG_ERROR("list erase iterator outside range");
; 1440 : 		_Nodeptr _Pnode = (_Where)._Mynode();
; 1441 : 		_Orphan_ptr(*this, _Pnode);
; 1442 : 
; 1443 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1444 : 		_Nodeptr _Pnode = (_Where)._Mynode();
; 1445 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1446 : 
; 1447 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1448 : 			this->_Nextnode(_Pnode);
; 1449 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1450 : 			this->_Prevnode(_Pnode);
; 1451 : 
; 1452 : 		--this->_Mysize;
; 1453 : 		return (_Pnode);
; 1454 : 		}
; 1455 : 
; 1456 : 	iterator erase(const_iterator _Where)
; 1457 : 		{	// erase element at _Where
; 1458 : 		_Nodeptr _Pnode = _Unlinknode(_Where++);
; 1459 : 		this->_Freenode(_Pnode);
; 1460 : 		return (_Make_iter(_Where));
; 1461 : 		}
; 1462 : 
; 1463 : 	void _Unchecked_erase(_Unchecked_const_iterator _Where)
; 1464 : 		{	// erase element at _Where
; 1465 : 		_Nodeptr _Pnode = _Where._Mynode();
; 1466 : 
; 1467 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1468 : 			this->_Nextnode(_Pnode);
; 1469 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1470 : 			this->_Prevnode(_Pnode);
; 1471 : 		this->_Freenode(_Pnode);
; 1472 : 		--this->_Mysize;
; 1473 : 		}
; 1474 : 
; 1475 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1476 : 		{	// erase [_First, _Last)
; 1477 : 		if (_First == begin() && _Last == end())
; 1478 : 			{	// erase all and return fresh iterator
; 1479 : 			clear();
; 1480 : 			return (end());
; 1481 : 			}
; 1482 : 		else
; 1483 : 			{	// erase subrange
; 1484 : 			while (_First != _Last)
; 1485 : 				_First = erase(_First);
; 1486 : 			return (_Make_iter(_Last));
; 1487 : 			}
; 1488 : 		}
; 1489 : 
; 1490 : 	void clear() _NOEXCEPT
; 1491 : 		{	// erase all
; 1492 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1493 : 		this->_Orphan_ptr(*this, nullptr);
; 1494 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1495 : 
; 1496 : 		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead);

  00006	8b 02		 mov	 eax, DWORD PTR [edx]

; 1497 : 		this->_Nextnode(this->_Myhead) = this->_Myhead;

  00008	89 12		 mov	 DWORD PTR [edx], edx

; 534  : 		}
; 535  : 
; 536  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 537  : 		{	// return reference to predecessor pointer in node
; 538  : 		return ((_Nodepref)_Pnode->_Prev);

  0000a	8b 57 08	 mov	 edx, DWORD PTR [edi+8]

; 1498 : 		this->_Prevnode(this->_Myhead) = this->_Myhead;

  0000d	89 52 04	 mov	 DWORD PTR [edx+4], edx

; 1499 : 		this->_Mysize = 0;

  00010	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0

; 1501 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead; _Pnode = _Pnext)

  00017	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0001a	74 17		 je	 SHORT $LN3@Initialize
  0001c	56		 push	 esi
  0001d	8d 49 00	 npad	 3
$LL5@Initialize:

; 1502 : 			{	// delete an element
; 1503 : 			_Pnext = this->_Nextnode(_Pnode);

  00020	8b 30		 mov	 esi, DWORD PTR [eax]
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00028	83 c4 04	 add	 esp, 4
; File a:\vs\vc\include\list

; 1501 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead; _Pnode = _Pnext)

  0002b	8b c6		 mov	 eax, esi
  0002d	3b 77 08	 cmp	 esi, DWORD PTR [edi+8]
  00030	75 ee		 jne	 SHORT $LL5@Initialize
  00032	5e		 pop	 esi
$LN3@Initialize:
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp

; 104  : 	m_kStream.Disconnect();

  00033	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00036	5f		 pop	 edi
  00037	e9 00 00 00 00	 jmp	 ?Disconnect@CNetworkStream@@QAEXXZ ; CNetworkStream::Disconnect
?Initialize@CServerStateChecker@@QAEXXZ ENDP		; CServerStateChecker::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp
; File a:\vs\vc\include\list
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp
; File a:\vs\vc\include\list
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp
; File a:\vs\vc\include\list
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp
;	COMDAT ?Update@CServerStateChecker@@QAEXXZ
_TEXT	SEGMENT
_nSize$ = -12						; size = 4
_channelStatus$1 = -8					; size = 3
_bHeader$ = -1						; size = 1
?Update@CServerStateChecker@@QAEXXZ PROC		; CServerStateChecker::Update, COMDAT
; _this$ = ecx

; 72   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx

; 73   : 	m_kStream.Process();

  0000a	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  0000d	e8 00 00 00 00	 call	 ?Process@CNetworkStream@@QAEXXZ ; CNetworkStream::Process

; 74   : 
; 75   : 	BYTE bHeader;
; 76   : 	if (!m_kStream.Recv(sizeof(bHeader), &bHeader)) {

  00012	8d 45 ff	 lea	 eax, DWORD PTR _bHeader$[ebp]
  00015	50		 push	 eax
  00016	6a 01		 push	 1
  00018	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  0001b	e8 00 00 00 00	 call	 ?Recv@CNetworkStream@@QAE_NHPAX@Z ; CNetworkStream::Recv
  00020	84 c0		 test	 al, al
  00022	74 7e		 je	 SHORT $LN12@Update

; 77   : 		return;
; 78   : 	}
; 79   : 	if (HEADER_GC_RESPOND_CHANNELSTATUS != bHeader) {

  00024	80 7d ff d2	 cmp	 BYTE PTR _bHeader$[ebp], 210 ; 000000d2H
  00028	75 78		 jne	 SHORT $LN12@Update

; 80   : 		return;
; 81   : 	}
; 82   : 	int nSize;
; 83   : 	if (!m_kStream.Recv(sizeof(nSize), &nSize)) {

  0002a	8d 45 f4	 lea	 eax, DWORD PTR _nSize$[ebp]
  0002d	50		 push	 eax
  0002e	6a 04		 push	 4
  00030	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00033	e8 00 00 00 00	 call	 ?Recv@CNetworkStream@@QAE_NHPAX@Z ; CNetworkStream::Recv
  00038	84 c0		 test	 al, al
  0003a	74 66		 je	 SHORT $LN12@Update

; 84   : 		return;
; 85   : 	}
; 86   : 	for (int i = 0; i < nSize; i++) {

  0003c	56		 push	 esi
  0003d	33 f6		 xor	 esi, esi
  0003f	39 75 f4	 cmp	 DWORD PTR _nSize$[ebp], esi
  00042	7e 56		 jle	 SHORT $LN6@Update
$LL8@Update:

; 87   : 		TChannelStatus channelStatus;
; 88   : 		if (!m_kStream.Recv(sizeof(channelStatus), &channelStatus)) {

  00044	8d 45 f8	 lea	 eax, DWORD PTR _channelStatus$1[ebp]
  00047	50		 push	 eax
  00048	6a 03		 push	 3
  0004a	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  0004d	e8 00 00 00 00	 call	 ?Recv@CNetworkStream@@QAE_NHPAX@Z ; CNetworkStream::Recv
  00052	84 c0		 test	 al, al
  00054	74 4b		 je	 SHORT $LN74@Update
; File a:\vs\vc\include\list

; 533  : 		return ((_Nodepref)_Pnode->_Next);

  00056	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp

; 91   : 		for (std::list<TChannel>::const_iterator it = m_lstChannel.begin(); it != m_lstChannel.end(); ++it) {

  00059	8b 01		 mov	 eax, DWORD PTR [ecx]
; File a:\vs\vc\include\list

; 298  : 		return (this->_Ptr == _Right._Ptr);

  0005b	3b c1		 cmp	 eax, ecx
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp

; 91   : 		for (std::list<TChannel>::const_iterator it = m_lstChannel.begin(); it != m_lstChannel.end(); ++it) {

  0005d	74 35		 je	 SHORT $LN7@Update
  0005f	0f bf 55 f8	 movsx	 edx, WORD PTR _channelStatus$1[ebp]
$LL26@Update:

; 92   : 			if (channelStatus.nPort == it->uPort) {

  00063	3b 50 10	 cmp	 edx, DWORD PTR [eax+16]
  00066	74 08		 je	 SHORT $LN66@Update
; File a:\vs\vc\include\list

; 240  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);

  00068	8b 00		 mov	 eax, DWORD PTR [eax]

; 298  : 		return (this->_Ptr == _Right._Ptr);

  0006a	3b c1		 cmp	 eax, ecx
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp

; 91   : 		for (std::list<TChannel>::const_iterator it = m_lstChannel.begin(); it != m_lstChannel.end(); ++it) {

  0006c	75 f5		 jne	 SHORT $LL26@Update

; 87   : 		TChannelStatus channelStatus;
; 88   : 		if (!m_kStream.Recv(sizeof(channelStatus), &channelStatus)) {

  0006e	eb 24		 jmp	 SHORT $LN7@Update
$LN66@Update:

; 93   : 				PyCallClassMemberFunc(m_poWnd, "NotifyChannelState", Py_BuildValue("(ii)", it->uServerIndex, channelStatus.bStatus));

  00070	0f b6 4d fa	 movzx	 ecx, BYTE PTR _channelStatus$1[ebp+2]
  00074	51		 push	 ecx
  00075	ff 70 08	 push	 DWORD PTR [eax+8]
  00078	68 00 00 00 00	 push	 OFFSET ??_C@_04INACLLOK@?$CIii?$CJ?$AA@
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00083	50		 push	 eax
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@EEDMKMGJ@NotifyChannelState?$AA@
  00089	ff 77 04	 push	 DWORD PTR [edi+4]
  0008c	e8 00 00 00 00	 call	 ?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z ; PyCallClassMemberFunc
  00091	83 c4 18	 add	 esp, 24			; 00000018H
$LN7@Update:

; 84   : 		return;
; 85   : 	}
; 86   : 	for (int i = 0; i < nSize; i++) {

  00094	46		 inc	 esi
  00095	3b 75 f4	 cmp	 esi, DWORD PTR _nSize$[ebp]
  00098	7c aa		 jl	 SHORT $LL8@Update
$LN6@Update:

; 94   : 				break;
; 95   : 			}
; 96   : 		}
; 97   : 	}
; 98   : 	Initialize();

  0009a	8b cf		 mov	 ecx, edi
  0009c	e8 00 00 00 00	 call	 ?Initialize@CServerStateChecker@@QAEXXZ ; CServerStateChecker::Initialize
$LN74@Update:
  000a1	5e		 pop	 esi
$LN12@Update:
  000a2	5f		 pop	 edi
  000a3	5b		 pop	 ebx

; 99   : }

  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c3		 ret	 0
?Update@CServerStateChecker@@QAEXXZ ENDP		; CServerStateChecker::Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp
; File a:\vs\vc\include\list
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp
; File a:\vs\vc\include\list
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp
; File a:\vs\vc\include\list
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp
; File a:\vs\vc\include\list
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp
; File a:\vs\vc\include\list
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp
; File a:\vs\vc\include\list
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp
; File a:\vs\vc\include\list
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp
; File a:\vs\vc\include\list
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp
; File a:\vs\vc\include\list
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp
; File a:\vs\vc\include\list
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp
; File a:\vs\vc\include\list
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp
;	COMDAT ?Request@CServerStateChecker@@QAEXXZ
_TEXT	SEGMENT
_bHeader$ = -1						; size = 1
?Request@CServerStateChecker@@QAEXXZ PROC		; CServerStateChecker::Request, COMDAT
; _this$ = ecx

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx
; File a:\vs\vc\include\list

; 1246 : 		return (this->_Mysize == 0);

  00007	83 7f 0c 00	 cmp	 DWORD PTR [edi+12], 0
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp

; 45   : 	if (m_lstChannel.empty()) { 

  0000b	0f 84 ce 00 00
	00		 je	 $LN4@Request
; File a:\vs\vc\include\list

; 533  : 		return ((_Nodepref)_Pnode->_Next);

  00011	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp

; 49   : 	if (!m_kStream.Connect(m_lstChannel.begin()->c_szAddr, m_lstChannel.begin()->uPort))

  00014	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	6a 03		 push	 3
; File a:\vs\vc\include\list

; 543  : 		return ((reference)_Pnode->_Myval);

  0001b	8b 00		 mov	 eax, DWORD PTR [eax]
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp

; 49   : 	if (!m_kStream.Connect(m_lstChannel.begin()->c_szAddr, m_lstChannel.begin()->uPort))

  0001d	ff 70 10	 push	 DWORD PTR [eax+16]
  00020	ff 70 0c	 push	 DWORD PTR [eax+12]
  00023	e8 00 00 00 00	 call	 ?Connect@CNetworkStream@@QAE_NPBDHH@Z ; CNetworkStream::Connect
  00028	84 c0		 test	 al, al
  0002a	75 3f		 jne	 SHORT $LN8@Request
; File a:\vs\vc\include\list

; 533  : 		return ((_Nodepref)_Pnode->_Next);

  0002c	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp

; 51   : 		for (std::list<TChannel>::const_iterator it = m_lstChannel.begin(); it != m_lstChannel.end(); ++it) {

  0002f	8b 30		 mov	 esi, DWORD PTR [eax]
; File a:\vs\vc\include\list

; 298  : 		return (this->_Ptr == _Right._Ptr);

  00031	3b f0		 cmp	 esi, eax
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp

; 51   : 		for (std::list<TChannel>::const_iterator it = m_lstChannel.begin(); it != m_lstChannel.end(); ++it) {

  00033	0f 84 a4 00 00
	00		 je	 $LN150@Request
  00039	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__Py_BuildValue
  0003f	90		 npad	 1
$LL74@Request:

; 52   : 			PyCallClassMemberFunc(m_poWnd, "NotifyChannelState", Py_BuildValue("(ii)", it->uServerIndex, 0));

  00040	6a 00		 push	 0
  00042	ff 76 08	 push	 DWORD PTR [esi+8]
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_04INACLLOK@?$CIii?$CJ?$AA@
  0004a	ff d3		 call	 ebx
  0004c	50		 push	 eax
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@EEDMKMGJ@NotifyChannelState?$AA@
  00052	ff 77 04	 push	 DWORD PTR [edi+4]
  00055	e8 00 00 00 00	 call	 ?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z ; PyCallClassMemberFunc
; File a:\vs\vc\include\list

; 240  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);

  0005a	8b 36		 mov	 esi, DWORD PTR [esi]
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp

; 52   : 			PyCallClassMemberFunc(m_poWnd, "NotifyChannelState", Py_BuildValue("(ii)", it->uServerIndex, 0));

  0005c	83 c4 18	 add	 esp, 24			; 00000018H
; File a:\vs\vc\include\list

; 298  : 		return (this->_Ptr == _Right._Ptr);

  0005f	3b 77 08	 cmp	 esi, DWORD PTR [edi+8]
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp

; 51   : 		for (std::list<TChannel>::const_iterator it = m_lstChannel.begin(); it != m_lstChannel.end(); ++it) {

  00062	75 dc		 jne	 SHORT $LL74@Request
  00064	5e		 pop	 esi
  00065	5b		 pop	 ebx
  00066	5f		 pop	 edi

; 67   : 		return;
; 68   : 	}
; 69   : }

  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
$LN8@Request:

; 53   : 		}
; 54   : 		return;
; 55   : 	}
; 56   : 	m_kStream.ClearRecvBuffer();

  0006b	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  0006e	e8 00 00 00 00	 call	 ?ClearRecvBuffer@CNetworkStream@@QAEXXZ ; CNetworkStream::ClearRecvBuffer

; 57   : 	m_kStream.SetSendBufferSize(1024);

  00073	68 00 04 00 00	 push	 1024			; 00000400H
  00078	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  0007b	e8 00 00 00 00	 call	 ?SetSendBufferSize@CNetworkStream@@QAEXH@Z ; CNetworkStream::SetSendBufferSize

; 58   : 	m_kStream.SetRecvBufferSize(1024);

  00080	68 00 04 00 00	 push	 1024			; 00000400H
  00085	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00088	e8 00 00 00 00	 call	 ?SetRecvBufferSize@CNetworkStream@@QAEXH@Z ; CNetworkStream::SetRecvBufferSize

; 59   : 
; 60   : 	BYTE bHeader = HEADER_CG_STATE_CHECKER;
; 61   : 	if (!m_kStream.Send(sizeof(bHeader), &bHeader))

  0008d	8d 45 ff	 lea	 eax, DWORD PTR _bHeader$[ebp]
  00090	c6 45 ff ce	 mov	 BYTE PTR _bHeader$[ebp], 206 ; 000000ceH
  00094	50		 push	 eax
  00095	6a 01		 push	 1
  00097	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  0009a	e8 00 00 00 00	 call	 ?Send@CNetworkStream@@QAE_NHPBX@Z ; CNetworkStream::Send
  0009f	84 c0		 test	 al, al
  000a1	75 3a		 jne	 SHORT $LN150@Request
; File a:\vs\vc\include\list

; 533  : 		return ((_Nodepref)_Pnode->_Next);

  000a3	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp

; 63   : 		for (std::list<TChannel>::const_iterator it = m_lstChannel.begin(); it != m_lstChannel.end(); ++it) {

  000a6	8b 30		 mov	 esi, DWORD PTR [eax]
; File a:\vs\vc\include\list

; 298  : 		return (this->_Ptr == _Right._Ptr);

  000a8	3b f0		 cmp	 esi, eax
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp

; 63   : 		for (std::list<TChannel>::const_iterator it = m_lstChannel.begin(); it != m_lstChannel.end(); ++it) {

  000aa	74 2a		 je	 SHORT $LN1@Request
  000ac	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__Py_BuildValue
$LL114@Request:

; 64   : 			PyCallClassMemberFunc(m_poWnd, "NotifyChannelState", Py_BuildValue("(ii)", it->uServerIndex, 0));

  000b2	6a 00		 push	 0
  000b4	ff 76 08	 push	 DWORD PTR [esi+8]
  000b7	68 00 00 00 00	 push	 OFFSET ??_C@_04INACLLOK@?$CIii?$CJ?$AA@
  000bc	ff d3		 call	 ebx
  000be	50		 push	 eax
  000bf	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@EEDMKMGJ@NotifyChannelState?$AA@
  000c4	ff 77 04	 push	 DWORD PTR [edi+4]
  000c7	e8 00 00 00 00	 call	 ?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z ; PyCallClassMemberFunc
; File a:\vs\vc\include\list

; 240  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);

  000cc	8b 36		 mov	 esi, DWORD PTR [esi]
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp

; 64   : 			PyCallClassMemberFunc(m_poWnd, "NotifyChannelState", Py_BuildValue("(ii)", it->uServerIndex, 0));

  000ce	83 c4 18	 add	 esp, 24			; 00000018H
; File a:\vs\vc\include\list

; 298  : 		return (this->_Ptr == _Right._Ptr);

  000d1	3b 77 08	 cmp	 esi, DWORD PTR [edi+8]
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp

; 63   : 		for (std::list<TChannel>::const_iterator it = m_lstChannel.begin(); it != m_lstChannel.end(); ++it) {

  000d4	75 dc		 jne	 SHORT $LL114@Request
$LN1@Request:

; 65   : 		}
; 66   : 		Initialize();

  000d6	8b cf		 mov	 ecx, edi
  000d8	e8 00 00 00 00	 call	 ?Initialize@CServerStateChecker@@QAEXXZ ; CServerStateChecker::Initialize
$LN150@Request:
  000dd	5e		 pop	 esi
  000de	5b		 pop	 ebx
$LN4@Request:
  000df	5f		 pop	 edi

; 67   : 		return;
; 68   : 	}
; 69   : }

  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
?Request@CServerStateChecker@@QAEXXZ ENDP		; CServerStateChecker::Request
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp
; File a:\vs\vc\include\list
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp
; File a:\vs\vc\include\list
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp
; File a:\vs\vc\include\list
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp
;	COMDAT ?AddChannel@CServerStateChecker@@QAEXIPBDI@Z
_TEXT	SEGMENT
_c$ = -12						; size = 12
_uServerIndex$ = 8					; size = 4
_c_szAddr$ = 12						; size = 4
_uPort$ = 16						; size = 4
?AddChannel@CServerStateChecker@@QAEXIPBDI@Z PROC	; CServerStateChecker::AddChannel, COMDAT
; _this$ = ecx

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 35   : 	TChannel c;
; 36   : 	c.uServerIndex = uServerIndex;

  00006	8b 45 08	 mov	 eax, DWORD PTR _uServerIndex$[ebp]
  00009	56		 push	 esi
  0000a	89 45 f4	 mov	 DWORD PTR _c$[ebp], eax

; 39   : 
; 40   : 	m_lstChannel.push_back(c);

  0000d	8d 71 08	 lea	 esi, DWORD PTR [ecx+8]
  00010	8b 45 0c	 mov	 eax, DWORD PTR _c_szAddr$[ebp]
; File a:\vs\vc\include\list

; 1062 : 				_STD forward<_Valty>(_Val)...);

  00013	8b ce		 mov	 ecx, esi
  00015	57		 push	 edi

; 96   : 		return (_Ptr);

  00016	8b 3e		 mov	 edi, DWORD PTR [esi]
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp

; 37   : 	c.c_szAddr = c_szAddr;

  00018	89 45 f8	 mov	 DWORD PTR _c$[ebp+4], eax

; 38   : 	c.uPort = uPort;

  0001b	8b 45 10	 mov	 eax, DWORD PTR _uPort$[ebp]
  0001e	89 45 fc	 mov	 DWORD PTR _c$[ebp+8], eax
; File a:\vs\vc\include\list

; 1062 : 				_STD forward<_Valty>(_Val)...);

  00021	8d 45 f4	 lea	 eax, DWORD PTR _c$[ebp]
  00024	50		 push	 eax
  00025	ff 77 04	 push	 DWORD PTR [edi+4]
  00028	57		 push	 edi
  00029	e8 00 00 00 00	 call	 ??$_Buynode@ABUSChannel@CServerStateChecker@@@?$_List_buy@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@PAU21@0ABUSChannel@CServerStateChecker@@@Z ; std::_List_buy<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::_Buynode<CServerStateChecker::SChannel const &>
  0002e	8b d0		 mov	 edx, eax

; 1066 : 		}
; 1067 : 
; 1068 : 
; 1069 : 	list(_XSTD initializer_list<_Ty> _Ilist,
; 1070 : 		const _Alloc& _Al = allocator_type())
; 1071 : 		: _Mybase(_Al)
; 1072 : 		{	// construct from initializer_list
; 1073 : 		insert(begin(), _Ilist.begin(), _Ilist.end());
; 1074 : 		}
; 1075 : 
; 1076 : 	_Myt& operator=(_XSTD initializer_list<_Ty> _Ilist)
; 1077 : 		{	// assign initializer_list
; 1078 : 		assign(_Ilist.begin(), _Ilist.end());
; 1079 : 		return (*this);
; 1080 : 		}
; 1081 : 
; 1082 : 	void assign(_XSTD initializer_list<_Ty> _Ilist)
; 1083 : 		{	// assign initializer_list
; 1084 : 		assign(_Ilist.begin(), _Ilist.end());
; 1085 : 		}
; 1086 : 
; 1087 : 	iterator insert(const_iterator _Where,
; 1088 : 		_XSTD initializer_list<_Ty> _Ilist)
; 1089 : 		{	// insert initializer_list
; 1090 : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 1091 : 		}
; 1092 : 
; 1093 : 	~list() _NOEXCEPT
; 1094 : 		{	// destroy the object
; 1095 : 		_Tidy();
; 1096 : 		}
; 1097 : 
; 1098 : 	_Myt& operator=(const _Myt& _Right)
; 1099 : 		{	// assign _Right
; 1100 : 		if (this != &_Right)
; 1101 : 			{	// different, assign it
; 1102 : 			if (this->_Getal() != _Right._Getal()
; 1103 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1104 : 				{	// change allocator before copying
; 1105 : 				clear();
; 1106 : 				this->_Change_alloc(_Right._Getal());
; 1107 : 				}
; 1108 : 
; 1109 : 			assign(_Right.begin(), _Right.end());
; 1110 : 			}
; 1111 : 		return (*this);
; 1112 : 		}
; 1113 : 
; 1114 : 	iterator begin() _NOEXCEPT
; 1115 : 		{	// return iterator for beginning of mutable sequence
; 1116 : 		return (iterator(this->_Nextnode(this->_Myhead), this));
; 1117 : 		}
; 1118 : 
; 1119 : 	const_iterator begin() const _NOEXCEPT
; 1120 : 		{	// return iterator for beginning of nonmutable sequence
; 1121 : 		return (const_iterator(this->_Nextnode(this->_Myhead), this));
; 1122 : 		}
; 1123 : 
; 1124 : 	iterator end() _NOEXCEPT
; 1125 : 		{	// return iterator for end of mutable sequence
; 1126 : 		return (iterator(this->_Myhead, this));
; 1127 : 		}
; 1128 : 
; 1129 : 	const_iterator end() const _NOEXCEPT
; 1130 : 		{	// return iterator for end of nonmutable sequence
; 1131 : 		return (const_iterator(this->_Myhead, this));
; 1132 : 		}
; 1133 : 
; 1134 : 	_Unchecked_iterator _Unchecked_begin()
; 1135 : 		{	// return iterator for beginning of mutable sequence
; 1136 : 		return (_Unchecked_iterator(this->_Nextnode(this->_Myhead),
; 1137 : 			this));
; 1138 : 		}
; 1139 : 
; 1140 : 	_Unchecked_const_iterator _Unchecked_begin() const
; 1141 : 		{	// return iterator for beginning of nonmutable sequence
; 1142 : 		return (_Unchecked_const_iterator(this->_Nextnode(this->_Myhead),
; 1143 : 			this));
; 1144 : 		}
; 1145 : 
; 1146 : 	_Unchecked_iterator _Unchecked_end()
; 1147 : 		{	// return unchecked iterator for end of mutable sequence
; 1148 : 		return (_Unchecked_iterator(this->_Myhead, this));
; 1149 : 		}
; 1150 : 
; 1151 : 	_Unchecked_const_iterator _Unchecked_end() const
; 1152 : 		{	// return unchecked iterator for end of nonmutable sequence
; 1153 : 		return (_Unchecked_const_iterator(this->_Myhead, this));
; 1154 : 		}
; 1155 : 
; 1156 : 	iterator _Make_iter(const_iterator _Where) const _NOEXCEPT
; 1157 : 		{	// make iterator from const_iterator
; 1158 : 		return (iterator(_Where._Ptr, this));
; 1159 : 		}
; 1160 : 
; 1161 : 	iterator _Make_iter(_Unchecked_const_iterator _Where) const
; 1162 : 		{	// make iterator from _Unchecked_const_iterator
; 1163 : 		return (iterator(_Where._Ptr, this));
; 1164 : 		}
; 1165 : 
; 1166 : 	reverse_iterator rbegin() _NOEXCEPT
; 1167 : 		{	// return iterator for beginning of reversed mutable sequence
; 1168 : 		return (reverse_iterator(end()));
; 1169 : 		}
; 1170 : 
; 1171 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1172 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1173 : 		return (const_reverse_iterator(end()));
; 1174 : 		}
; 1175 : 
; 1176 : 	reverse_iterator rend() _NOEXCEPT
; 1177 : 		{	// return iterator for end of reversed mutable sequence
; 1178 : 		return (reverse_iterator(begin()));
; 1179 : 		}
; 1180 : 
; 1181 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1182 : 		{	// return iterator for end of reversed nonmutable sequence
; 1183 : 		return (const_reverse_iterator(begin()));
; 1184 : 		}
; 1185 : 
; 1186 : 	const_iterator cbegin() const _NOEXCEPT
; 1187 : 		{	// return iterator for beginning of nonmutable sequence
; 1188 : 		return (((const _Myt *)this)->begin());
; 1189 : 		}
; 1190 : 
; 1191 : 	const_iterator cend() const _NOEXCEPT
; 1192 : 		{	// return iterator for end of nonmutable sequence
; 1193 : 		return (((const _Myt *)this)->end());
; 1194 : 		}
; 1195 : 
; 1196 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1197 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1198 : 		return (((const _Myt *)this)->rbegin());
; 1199 : 		}
; 1200 : 
; 1201 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1202 : 		{	// return iterator for end of reversed nonmutable sequence
; 1203 : 		return (((const _Myt *)this)->rend());
; 1204 : 		}
; 1205 : 
; 1206 : 	void resize(size_type _Newsize)
; 1207 : 		{	// determine new length, padding with _Ty() elements as needed
; 1208 : 		if (this->_Mysize < _Newsize)
; 1209 : 			{	// pad to make larger
; 1210 : 			size_type _Count = 0;
; 1211 : 			_TRY_BEGIN
; 1212 : 			for (; this->_Mysize < _Newsize; ++_Count)
; 1213 : 				_Insert(_Unchecked_end());
; 1214 : 			_CATCH_ALL
; 1215 : 			for (; 0 < _Count; --_Count)
; 1216 : 				pop_back();	// undo inserts
; 1217 : 			_RERAISE;
; 1218 : 			_CATCH_END
; 1219 : 			}
; 1220 : 		else
; 1221 : 			while (_Newsize < this->_Mysize)
; 1222 : 				pop_back();
; 1223 : 		}
; 1224 : 
; 1225 : 	void resize(size_type _Newsize, const _Ty& _Val)
; 1226 : 		{	// determine new length, padding with _Val elements as needed
; 1227 : 		if (this->_Mysize < _Newsize)
; 1228 : 			_Insert_n(_Unchecked_end(), _Newsize - this->_Mysize, _Val);
; 1229 : 		else
; 1230 : 			while (_Newsize < this->_Mysize)
; 1231 : 				pop_back();
; 1232 : 		}
; 1233 : 
; 1234 : 	size_type size() const _NOEXCEPT
; 1235 : 		{	// return length of sequence
; 1236 : 		return (this->_Mysize);
; 1237 : 		}
; 1238 : 
; 1239 : 	size_type max_size() const _NOEXCEPT
; 1240 : 		{	// return maximum possible length of sequence
; 1241 : 		return (this->_Getal().max_size());
; 1242 : 		}
; 1243 : 
; 1244 : 	bool empty() const _NOEXCEPT
; 1245 : 		{	// test if sequence is empty
; 1246 : 		return (this->_Mysize == 0);
; 1247 : 		}
; 1248 : 
; 1249 : 	allocator_type get_allocator() const _NOEXCEPT
; 1250 : 		{	// return allocator object for values
; 1251 : 		return (this->_Getal());
; 1252 : 		}
; 1253 : 
; 1254 : 	reference front()
; 1255 : 		{	// return first element of mutable sequence
; 1256 : 		return (*begin());
; 1257 : 		}
; 1258 : 
; 1259 : 	const_reference front() const
; 1260 : 		{	// return first element of nonmutable sequence
; 1261 : 		return (*begin());
; 1262 : 		}
; 1263 : 
; 1264 : 	reference back()
; 1265 : 		{	// return last element of mutable sequence
; 1266 : 		return (*(--end()));
; 1267 : 		}
; 1268 : 
; 1269 : 	const_reference back() const
; 1270 : 		{	// return last element of nonmutable sequence
; 1271 : 		return (*(--end()));
; 1272 : 		}
; 1273 : 
; 1274 : 	void push_front(const _Ty& _Val)
; 1275 : 		{	// insert element at beginning
; 1276 : 		_Insert(_Unchecked_begin(), _Val);
; 1277 : 		}
; 1278 : 
; 1279 : 	void pop_front()
; 1280 : 		{	// erase element at beginning
; 1281 : 		erase(begin());
; 1282 : 		}
; 1283 : 
; 1284 : 	void push_back(const _Ty& _Val)
; 1285 : 		{	// insert element at end
; 1286 : 		_Insert(_Unchecked_end(), _Val);
; 1287 : 		}
; 1288 : 
; 1289 : 	void pop_back()
; 1290 : 		{	// erase element at end
; 1291 : 		erase(--end());
; 1292 : 		}
; 1293 : 
; 1294 : 	template<class _Iter>
; 1295 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1296 : 			void>::type
; 1297 : 		assign(_Iter _First, _Iter _Last)
; 1298 : 		{	// assign [_First, _Last), input iterators
; 1299 : 		iterator _Old = begin();
; 1300 : 		_TRY_BEGIN
; 1301 : 		for (; _First != _Last && _Old != end(); ++_First, ++_Old)
; 1302 : 			_Reusenode(_Old, *_First);
; 1303 : 		for (; _First != _Last; ++_First)
; 1304 : 			_Insert(_Unchecked_end(), *_First);
; 1305 : 		_CATCH_ALL
; 1306 : 		clear();
; 1307 : 		_RERAISE;
; 1308 : 		_CATCH_END
; 1309 : 		erase(_Old, end());
; 1310 : 		}
; 1311 : 
; 1312 : 	template<class _TArg>
; 1313 : 		void _Reusenode(iterator _Where, _TArg&& _Arg)
; 1314 : 		{	// destroy the element at _Where and reconstruct from _Arg
; 1315 : 		_TRY_BEGIN
; 1316 : 		this->_Getal().destroy(
; 1317 : 			_STD addressof(this->_Myval(_Where._Ptr)));
; 1318 : 		this->_Getal().construct(
; 1319 : 			_STD addressof(this->_Myval(_Where._Ptr)),
; 1320 : 			_STD forward<_TArg>(_Arg));
; 1321 : 		_CATCH_ALL
; 1322 : 		_Unlinknode(_Where);
; 1323 : 		this->_Getal().destroy(
; 1324 : 			_STD addressof(this->_Nextnode(_Where._Ptr)));
; 1325 : 		this->_Getal().destroy(
; 1326 : 			_STD addressof(this->_Prevnode(_Where._Ptr)));
; 1327 : 		this->_Getal().deallocate(_Where._Ptr, 1);
; 1328 : 		_RERAISE;
; 1329 : 		_CATCH_END
; 1330 : 		}
; 1331 : 
; 1332 : 	void assign(size_type _Count, const _Ty& _Val)
; 1333 : 		{	// assign _Count * _Val
; 1334 : 		clear();
; 1335 : 		_Insert_n(_Unchecked_begin(), _Count, _Val);
; 1336 : 		}
; 1337 : 
; 1338 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1339 : 		{	// insert _Val at _Where
; 1340 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1341 : 		if (_Where._Getcont() != this)
; 1342 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1343 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1344 : 
; 1345 : 		_Insert(_Where._Unchecked(), _Val);
; 1346 : 		return (_Make_iter(--_Where));
; 1347 : 		}
; 1348 : 
; 1349 : 	iterator insert(const_iterator _Where, size_type _Count, const _Ty& _Val)
; 1350 : 		{	// insert _Count * _Val at _Where
; 1351 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1352 : 		if (_Where._Getcont() != this)
; 1353 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1354 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1355 : 
; 1356 : 		iterator _Prev = _Make_iter(_Where);
; 1357 : 		if (_Prev == begin())
; 1358 : 			{	// insert sequence at beginning
; 1359 : 			_Insert_n(_Where._Unchecked(), _Count, _Val);
; 1360 : 			return (begin());
; 1361 : 			}
; 1362 : 		else
; 1363 : 			{	// insert sequence not at beginning
; 1364 : 			--_Prev;
; 1365 : 			_Insert_n(_Where._Unchecked(), _Count, _Val);
; 1366 : 			return (++_Prev);
; 1367 : 			}
; 1368 : 		}
; 1369 : 
; 1370 : 	template<class _Iter>
; 1371 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1372 : 			iterator>::type
; 1373 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1374 : 		{	// insert [_First, _Last) at _Where
; 1375 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1376 : 		if (_Where._Getcont() != this)
; 1377 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1378 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1379 : 
; 1380 : 		iterator _Prev = _Make_iter(_Where);
; 1381 : 		if (_Prev == begin())
; 1382 : 			{	// insert sequence at beginning
; 1383 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1384 : 				_Iter_cat(_First));
; 1385 : 			return (begin());
; 1386 : 			}
; 1387 : 		else
; 1388 : 			{	// insert sequence not at beginning
; 1389 : 			--_Prev;
; 1390 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1391 : 				_Iter_cat(_First));
; 1392 : 			return (++_Prev);
; 1393 : 			}
; 1394 : 		}
; 1395 : 
; 1396 : 	template<class _Iter>
; 1397 : 		void _Insert_range(_Unchecked_const_iterator _Where,
; 1398 : 			_Iter _First, _Iter _Last, input_iterator_tag)
; 1399 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1400 : 		size_type _Num = 0;
; 1401 : 
; 1402 : 		_TRY_BEGIN
; 1403 : 		for (; _First != _Last; ++_First, ++_Num)
; 1404 : 			_Insert(_Where, *_First);
; 1405 : 		_CATCH_ALL
; 1406 : 		for (; 0 < _Num; --_Num)
; 1407 : 			{	// undo inserts
; 1408 : 			_Unchecked_const_iterator _Before = _Where;
; 1409 : 			_Unchecked_erase(--_Before);
; 1410 : 			}
; 1411 : 		_RERAISE;
; 1412 : 		_CATCH_END
; 1413 : 		}
; 1414 : 
; 1415 : 	template<class _Iter>
; 1416 : 		void _Insert_range(_Unchecked_const_iterator _Where,
; 1417 : 			_Iter _First, _Iter _Last, forward_iterator_tag)
; 1418 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1419 : 		_DEBUG_RANGE(_First, _Last);
; 1420 : 		_Iter _Next = _First;
; 1421 : 
; 1422 : 		_TRY_BEGIN
; 1423 : 		for (; _First != _Last; ++_First)
; 1424 : 			_Insert(_Where, *_First);
; 1425 : 		_CATCH_ALL
; 1426 : 		for (; _Next != _First; ++_Next)
; 1427 : 			{	// undo inserts
; 1428 : 			_Unchecked_const_iterator _Before = _Where;
; 1429 : 			_Unchecked_erase(--_Before);
; 1430 : 			}
; 1431 : 		_RERAISE;
; 1432 : 		_CATCH_END
; 1433 : 		}
; 1434 : 
; 1435 : 	_Nodeptr _Unlinknode(const_iterator _Where)
; 1436 : 		{	// unlink node at _Where from the list
; 1437 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1438 : 		if (_Where._Getcont() != this || _Where._Ptr == this->_Myhead)
; 1439 : 			_DEBUG_ERROR("list erase iterator outside range");
; 1440 : 		_Nodeptr _Pnode = (_Where)._Mynode();
; 1441 : 		_Orphan_ptr(*this, _Pnode);
; 1442 : 
; 1443 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1444 : 		_Nodeptr _Pnode = (_Where)._Mynode();
; 1445 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1446 : 
; 1447 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1448 : 			this->_Nextnode(_Pnode);
; 1449 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1450 : 			this->_Prevnode(_Pnode);
; 1451 : 
; 1452 : 		--this->_Mysize;
; 1453 : 		return (_Pnode);
; 1454 : 		}
; 1455 : 
; 1456 : 	iterator erase(const_iterator _Where)
; 1457 : 		{	// erase element at _Where
; 1458 : 		_Nodeptr _Pnode = _Unlinknode(_Where++);
; 1459 : 		this->_Freenode(_Pnode);
; 1460 : 		return (_Make_iter(_Where));
; 1461 : 		}
; 1462 : 
; 1463 : 	void _Unchecked_erase(_Unchecked_const_iterator _Where)
; 1464 : 		{	// erase element at _Where
; 1465 : 		_Nodeptr _Pnode = _Where._Mynode();
; 1466 : 
; 1467 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1468 : 			this->_Nextnode(_Pnode);
; 1469 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1470 : 			this->_Prevnode(_Pnode);
; 1471 : 		this->_Freenode(_Pnode);
; 1472 : 		--this->_Mysize;
; 1473 : 		}
; 1474 : 
; 1475 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1476 : 		{	// erase [_First, _Last)
; 1477 : 		if (_First == begin() && _Last == end())
; 1478 : 			{	// erase all and return fresh iterator
; 1479 : 			clear();
; 1480 : 			return (end());
; 1481 : 			}
; 1482 : 		else
; 1483 : 			{	// erase subrange
; 1484 : 			while (_First != _Last)
; 1485 : 				_First = erase(_First);
; 1486 : 			return (_Make_iter(_Last));
; 1487 : 			}
; 1488 : 		}
; 1489 : 
; 1490 : 	void clear() _NOEXCEPT
; 1491 : 		{	// erase all
; 1492 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1493 : 		this->_Orphan_ptr(*this, nullptr);
; 1494 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1495 : 
; 1496 : 		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead);
; 1497 : 		this->_Nextnode(this->_Myhead) = this->_Myhead;
; 1498 : 		this->_Prevnode(this->_Myhead) = this->_Myhead;
; 1499 : 		this->_Mysize = 0;
; 1500 : 
; 1501 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead; _Pnode = _Pnext)
; 1502 : 			{	// delete an element
; 1503 : 			_Pnext = this->_Nextnode(_Pnode);
; 1504 : 			this->_Freenode(_Pnode);
; 1505 : 			}
; 1506 : 		}
; 1507 : 
; 1508 : 	void swap(_Myt& _Right)
; 1509 : 		{	// exchange contents with _Right
; 1510 : 		if (this == &_Right)
; 1511 : 			;	// same object, do nothing
; 1512 : 		else if (this->_Getal() == _Right._Getal())
; 1513 : 			{	// same allocator, swap control information
; 1514 : 			this->_Swap_all(_Right);
; 1515 : 			_Swap_adl(this->_Myhead, _Right._Myhead);
; 1516 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1517 : 			}
; 1518 : 
; 1519 : 		else if (_Alty::propagate_on_container_swap::value)
; 1520 : 			{	// swap allocators and control information
; 1521 : 			this->_Swap_alloc(_Right);
; 1522 : 			_Swap_adl(this->_Myhead, _Right._Myhead);
; 1523 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1524 : 			}
; 1525 : 
; 1526 : 		else	// containers are incompatible
; 1527 : 
; 1528 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1529 : 			_DEBUG_ERROR("list containers incompatible for swap");
; 1530 : 
; 1531 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1532 : 			_XSTD terminate();
; 1533 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1534 : 		}
; 1535 : 
; 1536 : 	void splice(const_iterator _Where, _Myt& _Right)
; 1537 : 		{	// splice all of _Right at _Where
; 1538 : 		if (this != &_Right && !_Right.empty())
; 1539 : 			{	// worth splicing, do it
; 1540 : 			_Splice(_Where, _Right, _Right.begin(), _Right.end(),
; 1541 : 				_Right._Mysize);
; 1542 : 			}
; 1543 : 		}
; 1544 : 
; 1545 : 	void splice(const_iterator _Where, _Myt&& _Right)
; 1546 : 		{	// splice all of _Right at _Where
; 1547 : 		splice(_Where, (_Myt&)_Right);
; 1548 : 		}
; 1549 : 
; 1550 : 	void splice(const_iterator _Where, _Myt& _Right,
; 1551 : 		const_iterator _First)
; 1552 : 		{	// splice _Right [_First, _First + 1) at _Where
; 1553 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1554 : 		if (_First == _Right.end())
; 1555 : 			_DEBUG_ERROR("list splice iterator outside range");
; 1556 : 		else
; 1557 : 
; 1558 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1559 : 		if (_First != _Right.end())
; 1560 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1561 : 
; 1562 : 			{	// element exists, try splice
; 1563 : 			const_iterator _Last = _First;
; 1564 : 			++_Last;
; 1565 : 			if (this != &_Right
; 1566 : 				|| (_Where != _First && _Where != _Last))
; 1567 : 				_Splice(_Where, _Right, _First, _Last, 1);
; 1568 : 			}
; 1569 : 		}
; 1570 : 
; 1571 : 	void splice(const_iterator _Where, _Myt&& _Right,
; 1572 : 		const_iterator _First)
; 1573 : 		{	// splice _Right [_First, _First + 1) at _Where
; 1574 : 		splice(_Where, (_Myt&)_Right, _First);
; 1575 : 		}
; 1576 : 
; 1577 : 	void splice(const_iterator _Where,
; 1578 : 		_Myt& _Right, const_iterator _First, const_iterator _Last)
; 1579 : 		{	// splice _Right [_First, _Last) at _Where
; 1580 : 		if (_First != _Last && (this != &_Right || _Where != _Last))
; 1581 : 			{	// worth splicing, do it
; 1582 : 			size_type _Count = 0;
; 1583 : 
; 1584 : 			if (this == &_Right)
; 1585 : 				;	// just rearrange this list
; 1586 : 			else if (_First == _Right.begin() && _Last == _Right.end())
; 1587 : 				_Count = _Right._Mysize;	// splice in whole list
; 1588 : 			else
; 1589 : 				{	// count nodes and check for knot
; 1590 : 				const_iterator _Next = _First;
; 1591 : 
; 1592 : 				for (; _Next != _Last; ++_Next, ++_Count)
; 1593 : 					if (_Next == _Right.end())
; 1594 : 						_Xlength_error("list<T> bad splice");
; 1595 : 				}
; 1596 : 			_Splice(_Where, _Right, _First, _Last, _Count);
; 1597 : 			}
; 1598 : 		}
; 1599 : 
; 1600 : 	void splice(const_iterator _Where,
; 1601 : 		_Myt&& _Right, const_iterator _First, const_iterator _Last)
; 1602 : 		{	// splice _Right [_First, _Last) at _Where
; 1603 : 		splice(_Where, (_Myt&)_Right, _First, _Last);
; 1604 : 		}
; 1605 : 
; 1606 : 	void remove(const _Ty& _Val)
; 1607 : 		{	// erase each element matching _Val
; 1608 : 		iterator _Val_it = end();
; 1609 : 
; 1610 : 		for (iterator _First = begin(); _First != end(); )
; 1611 : 			if (*_First == _Val)
; 1612 : 				if (_STD addressof(*_First) == _STD addressof(_Val))
; 1613 : 					_Val_it = _First++;
; 1614 : 				else
; 1615 : 					_First = erase(_First);
; 1616 : 			else
; 1617 : 				++_First;
; 1618 : 
; 1619 : 		if (_Val_it != end())
; 1620 : 			erase(_Val_it);
; 1621 : 		}
; 1622 : 
; 1623 : 	template<class _Pr1>
; 1624 : 		void remove_if(_Pr1 _Pred)
; 1625 : 		{	// erase each element satisfying _Pred
; 1626 : 		for (iterator _First = begin(); _First != end(); )
; 1627 : 			if (_Pred(*_First))
; 1628 : 				_First = erase(_First);
; 1629 : 			else
; 1630 : 				++_First;
; 1631 : 		}
; 1632 : 
; 1633 : 	void unique()
; 1634 : 		{	// erase each element matching previous
; 1635 : 		unique(equal_to<>());
; 1636 : 		}
; 1637 : 
; 1638 : 	template<class _Pr2>
; 1639 : 		void unique(_Pr2 _Pred)
; 1640 : 		{	// erase each element satisfying _Pred with previous
; 1641 : 		const _Nodeptr _Phead = this->_Myhead;
; 1642 : 		_Nodeptr _Pprev = this->_Nextnode(_Phead);
; 1643 : 		_Nodeptr _Pnode = this->_Nextnode(_Pprev);
; 1644 : 
; 1645 : 		while (_Pnode != _Phead)
; 1646 : 			if (_Pred(_Pprev->_Myval, _Pnode->_Myval))
; 1647 : 				{	// match, remove it
; 1648 : 				const _Nodeptr _Perase = _Pnode;
; 1649 : 				_Pnode = this->_Nextnode(_Pnode);
; 1650 : 
; 1651 : 				this->_Nextnode(_Pprev) = _Pnode;
; 1652 : 				this->_Prevnode(_Pnode) = _Pprev;
; 1653 : 				this->_Freenode(_Perase);
; 1654 : 
; 1655 : 				--this->_Mysize;
; 1656 : 				}
; 1657 : 			else
; 1658 : 				{	// no match, advance
; 1659 : 				_Pprev = _Pnode;
; 1660 : 				_Pnode = this->_Nextnode(_Pnode);
; 1661 : 				}
; 1662 : 		}
; 1663 : 
; 1664 : 	void merge(_Myt& _Right)
; 1665 : 		{	// merge in elements from _Right, both ordered by operator<
; 1666 : 		merge(_Right, less<>());
; 1667 : 		}
; 1668 : 
; 1669 : 	void merge(_Myt&& _Right)
; 1670 : 		{	// merge in elements from _Right, both ordered by operator<
; 1671 : 		merge((_Myt&)_Right);
; 1672 : 		}
; 1673 : 
; 1674 : 	template<class _Pr2>
; 1675 : 		void merge(_Myt& _Right, _Pr2 _Pred)
; 1676 : 		{	// merge in elements from _Right, both ordered by _Pred
; 1677 : 		if (&_Right != this)
; 1678 : 			{	// safe to merge, do it
; 1679 : 			iterator _First1 = begin(), _Last1 = end();
; 1680 : 			iterator _First2 = _Right.begin(), _Last2 = _Right.end();
; 1681 : 			_DEBUG_ORDER_PRED(_First1, _Last1, _Pred);
; 1682 : 			_DEBUG_ORDER_PRED(_First2, _Last2, _Pred);
; 1683 : 
; 1684 : 			while (_First1 != _Last1 && _First2 != _Last2)
; 1685 : 				if (_DEBUG_LT_PRED(_Pred, *_First2, *_First1))
; 1686 : 					{	// splice in an element from _Right
; 1687 : 					iterator _Mid2 = _First2;
; 1688 : 					_Splice(_First1, _Right, _First2, ++_Mid2, 1);
; 1689 : 					_First2 = _Mid2;
; 1690 : 					}
; 1691 : 				else
; 1692 : 					++_First1;
; 1693 : 
; 1694 : 			if (_First2 != _Last2)
; 1695 : 				_Splice(_Last1, _Right, _First2, _Last2,
; 1696 : 					_Right._Mysize);	// splice remainder of _Right
; 1697 : 			}
; 1698 : 		}
; 1699 : 
; 1700 : 	template<class _Pr2>
; 1701 : 		void merge(_Myt&& _Right, _Pr2 _Pred)
; 1702 : 		{	// merge in elements from _Right, both ordered by _Pred
; 1703 : 		merge((_Myt&)_Right, _Pred);
; 1704 : 		}
; 1705 : 
; 1706 : 	void sort()
; 1707 : 		{	// order sequence, using operator<
; 1708 : 		sort(less<>());
; 1709 : 		}
; 1710 : 
; 1711 : 	template<class _Pr2>
; 1712 : 		void sort(_Pr2 _Pred)
; 1713 : 		{	// order sequence, using _Pred
; 1714 : 		if (2 <= this->_Mysize)
; 1715 : 			{	// worth sorting, do it
; 1716 : 			const size_t _MAXBINS = 25;
; 1717 : 			_Myt _Templist(this->_Getal()), _Binlist[_MAXBINS + 1];
; 1718 : 			size_t _Maxbin = 0;
; 1719 : 
; 1720 : 			while (!empty())
; 1721 : 				{	// sort another element, using bins
; 1722 : 				_Templist._Splice_same(_Templist.begin(), *this, begin(),
; 1723 : 					++begin(), 1);
; 1724 : 
; 1725 : 				size_t _Bin;
; 1726 : 				for (_Bin = 0; _Bin < _Maxbin && !_Binlist[_Bin].empty();
; 1727 : 					++_Bin)
; 1728 : 					{	// merge into ever larger bins
; 1729 : 					_Binlist[_Bin].merge(_Templist, _Pred);
; 1730 : 					_Binlist[_Bin].swap(_Templist);
; 1731 : 					}
; 1732 : 
; 1733 : 				if (_Bin == _MAXBINS)
; 1734 : 					_Binlist[_Bin - 1].merge(_Templist, _Pred);
; 1735 : 				else
; 1736 : 					{	// spill to new bin, while they last
; 1737 : 					_Binlist[_Bin].swap(_Templist);
; 1738 : 					if (_Bin == _Maxbin)
; 1739 : 						++_Maxbin;
; 1740 : 					}
; 1741 : 				}
; 1742 : 
; 1743 : 			for (size_t _Bin = 1; _Bin < _Maxbin; ++_Bin)
; 1744 : 				_Binlist[_Bin].merge(_Binlist[_Bin - 1],
; 1745 : 					_Pred);	// merge up
; 1746 : 
; 1747 : 			_Analysis_assume_(0 < _Maxbin);
; 1748 : 
; 1749 : 			splice(begin(), _Binlist[_Maxbin - 1]);	// result in last bin
; 1750 : 			}
; 1751 : 		}
; 1752 : 
; 1753 : 	void reverse() _NOEXCEPT
; 1754 : 		{	// reverse sequence
; 1755 : 		const _Nodeptr _Phead = this->_Myhead;
; 1756 : 		_Nodeptr _Pnode = _Phead;
; 1757 : 
; 1758 : 		for (; ; )
; 1759 : 			{	// flip pointers in a node
; 1760 : 			const _Nodeptr _Pnext = this->_Nextnode(_Pnode);
; 1761 : 			this->_Nextnode(_Pnode) = this->_Prevnode(_Pnode);
; 1762 : 			this->_Prevnode(_Pnode) = _Pnext;
; 1763 : 
; 1764 : 			if (_Pnext == _Phead)
; 1765 : 				break;
; 1766 : 			_Pnode = _Pnext;
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	void _Splice(const_iterator _Where,
; 1771 : 		_Myt& _Right, const_iterator _First, const_iterator _Last,
; 1772 : 		size_type _Count)
; 1773 : 		{	// splice _Right [_First, _Last) before _Where
; 1774 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1775 : 		if (_Where._Getcont() != this)
; 1776 : 			_DEBUG_ERROR("list splice iterator outside range");
; 1777 : 		if (this->_Getal() != _Right._Getal())
; 1778 : 			_DEBUG_ERROR("list containers incompatible for splice");
; 1779 : 
; 1780 : 		if (this != &_Right)
; 1781 : 			{	// transfer ownership
; 1782 : 			_Lockit _Lock(_LOCK_DEBUG);
; 1783 : 
; 1784 : 			const bool _One = _Count == 1;
; 1785 : 			const bool _All = _Count == _Right.size();
; 1786 : 			const bool _Some = !_One && !_All;
; 1787 : 
; 1788 : 			_Nodeptr _Oldprev = _First._Ptr->_Prev;
; 1789 : 
; 1790 : 			if (_Some)
; 1791 : 				for (_Nodeptr _Ptr = _First._Ptr; _Ptr != _Last._Ptr;
; 1792 : 					_Ptr = _Ptr->_Next)
; 1793 : 					{	// mark _Prev pointers
; 1794 : 					_Ptr->_Prev = 0;
; 1795 : 					}
; 1796 : 
; 1797 : 			const_iterator **_Pnext = (const_iterator **)_Right._Getpfirst();
; 1798 : 
; 1799 : 			if (_Pnext == 0)
; 1800 : 				_DEBUG_ERROR("list container corrupted");
; 1801 : 
; 1802 : 			while (*_Pnext != 0)
; 1803 : 				{	// check the iterator
; 1804 : 				const_iterator& _Iter = **_Pnext;
; 1805 : 
; 1806 : 				if ((_One && _Iter._Ptr == _First._Ptr)
; 1807 : 					|| (_All && _Iter._Ptr != _Right._Myhead)
; 1808 : 					|| (_Some && _Iter._Ptr->_Prev == 0))
; 1809 : 					{	// adopt the iterator
; 1810 : 					*_Pnext = (const_iterator *)_Iter._Mynextiter;
; 1811 : 					_Iter._Myproxy = this->_Myproxy;
; 1812 : 					_Iter._Mynextiter = this->_Myproxy->_Myfirstiter;
; 1813 : 					this->_Myproxy->_Myfirstiter = &_Iter;
; 1814 : 					}
; 1815 : 				else
; 1816 : 					{	// skip the iterator
; 1817 : 					_Pnext = (const_iterator **)_Iter._Getpnext();
; 1818 : 					}
; 1819 : 				}
; 1820 : 
; 1821 : 			if (_Some)
; 1822 : 				for (_Nodeptr _Ptr = _First._Ptr; _Ptr != _Last._Ptr;
; 1823 : 					_Ptr = _Ptr->_Next)
; 1824 : 					{	// restore _Prev pointers
; 1825 : 					_Ptr->_Prev = _Oldprev;
; 1826 : 					_Oldprev = _Ptr;
; 1827 : 					}
; 1828 : 			}
; 1829 : 
; 1830 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1831 : 		if (this->_Getal() != _Right._Getal())
; 1832 : 			_XSTD terminate();
; 1833 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1834 : 
; 1835 : 		_Splice_same(_Where, _Right, _First, _Last, _Count);
; 1836 : 		}
; 1837 : 
; 1838 : 	void _Splice_same(const_iterator _Where,
; 1839 : 		_Myt& _Right, const_iterator _First, const_iterator _Last,
; 1840 : 		size_type _Count)
; 1841 : 		{	// splice _Right [_First, _Last) before _Where
; 1842 : 		if (this != &_Right)
; 1843 : 			{	// splicing from another list, adjust counts
; 1844 : 			_Incsize(_Count);
; 1845 : 			_Right._Mysize -= _Count;
; 1846 : 			}
; 1847 : 		this->_Nextnode(this->_Prevnode(_First._Mynode())) =
; 1848 : 			_Last._Mynode();
; 1849 : 		this->_Nextnode(this->_Prevnode(_Last._Mynode())) =
; 1850 : 			_Where._Mynode();
; 1851 : 		this->_Nextnode(this->_Prevnode(_Where._Mynode())) =
; 1852 : 			_First._Mynode();
; 1853 : 
; 1854 : 		_Nodeptr _Pnode = this->_Prevnode(_Where._Mynode());
; 1855 : 		this->_Prevnode(_Where._Mynode()) =
; 1856 : 			this->_Prevnode(_Last._Mynode());
; 1857 : 		this->_Prevnode(_Last._Mynode()) =
; 1858 : 			this->_Prevnode(_First._Mynode());
; 1859 : 		this->_Prevnode(_First._Mynode()) = _Pnode;
; 1860 : 		}
; 1861 : 
; 1862 : 	void _Unchecked_splice(_Unchecked_const_iterator _Where,
; 1863 : 		_Unchecked_const_iterator _First,
; 1864 : 		_Unchecked_const_iterator _Last)
; 1865 : 		{	// splice [_First, _Last) before _Where
; 1866 : 		this->_Nextnode(this->_Prevnode(_First._Mynode())) =
; 1867 : 			_Last._Mynode();
; 1868 : 		this->_Nextnode(this->_Prevnode(_Last._Mynode())) =
; 1869 : 			_Where._Mynode();
; 1870 : 		this->_Nextnode(this->_Prevnode(_Where._Mynode())) =
; 1871 : 			_First._Mynode();
; 1872 : 
; 1873 : 		_Nodeptr _Pnode = this->_Prevnode(_Where._Mynode());
; 1874 : 		this->_Prevnode(_Where._Mynode()) =
; 1875 : 			this->_Prevnode(_Last._Mynode());
; 1876 : 		this->_Prevnode(_Last._Mynode()) =
; 1877 : 			this->_Prevnode(_First._Mynode());
; 1878 : 		this->_Prevnode(_First._Mynode()) = _Pnode;
; 1879 : 		}
; 1880 : 
; 1881 : 	void _Tidy()
; 1882 : 		{	// free all storage
; 1883 : 		clear();
; 1884 : 		}
; 1885 : 
; 1886 : 	void _Insert_n(_Unchecked_const_iterator _Where,
; 1887 : 		size_type _Count, const _Ty& _Val)
; 1888 : 		{	// insert _Count * _Val at _Where
; 1889 : 		size_type _Countsave = _Count;
; 1890 : 
; 1891 : 		_TRY_BEGIN
; 1892 : 		for (; 0 < _Count; --_Count)
; 1893 : 			_Insert(_Where, _Val);
; 1894 : 		_CATCH_ALL
; 1895 : 		for (; _Count < _Countsave; ++_Count)
; 1896 : 			{	// undo inserts
; 1897 : 			_Unchecked_const_iterator _Before = _Where;
; 1898 : 			_Unchecked_erase(--_Before);
; 1899 : 			}
; 1900 : 		_RERAISE;
; 1901 : 		_CATCH_END
; 1902 : 		}
; 1903 : 
; 1904 : 	void _Incsize(size_type _Count)
; 1905 : 		{	// alter element count, with checking
; 1906 : 		if (max_size() - this->_Mysize - 1 < _Count)

  00030	b9 cb cc cc 0c	 mov	 ecx, 214748363		; 0ccccccbH
  00035	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00038	2b c8		 sub	 ecx, eax
  0003a	83 f9 01	 cmp	 ecx, 1
  0003d	72 14		 jb	 SHORT $LN44@AddChannel

; 1908 : 		this->_Mysize += _Count;

  0003f	40		 inc	 eax
  00040	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1063 : 		_Incsize(1);
; 1064 : 		this->_Prevnode(_Pnode) = _Newnode;

  00043	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 97   : 		}
; 98   : 
; 99   : 	_Nodeptr _Ptr;	// pointer to node
; 100  : 	};
; 101  : 
; 102  : 	// TEMPLATE CLASS _List_unchecked_iterator
; 103  : template<class _Mylist>
; 104  : 	class _List_unchecked_iterator
; 105  : 		: public _List_unchecked_const_iterator<_Mylist>
; 106  : 	{	// unchecked iterator for mutable list
; 107  : public:
; 108  : 	typedef _List_unchecked_iterator<_Mylist> _Myiter;
; 109  : 	typedef _List_unchecked_const_iterator<_Mylist> _Mybase;
; 110  : 	typedef bidirectional_iterator_tag iterator_category;
; 111  : 
; 112  : 	typedef typename _Mylist::_Nodeptr _Nodeptr;
; 113  : 	typedef typename _Mylist::value_type value_type;
; 114  : 	typedef typename _Mylist::difference_type difference_type;
; 115  : 	typedef typename _Mylist::pointer pointer;
; 116  : 	typedef typename _Mylist::reference reference;
; 117  : 
; 118  : 	_List_unchecked_iterator()
; 119  : 		{	// construct with null node
; 120  : 		}
; 121  : 
; 122  : 	_List_unchecked_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
; 123  : 		: _Mybase(_Pnode, _Plist)
; 124  : 		{	// construct with node pointer _Pnode
; 125  : 		}
; 126  : 
; 127  : 	reference operator*() const
; 128  : 		{	// return designated value
; 129  : 		return ((reference)**(_Mybase *)this);
; 130  : 		}
; 131  : 
; 132  : 	pointer operator->() const
; 133  : 		{	// return pointer to class object
; 134  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 135  : 		}
; 136  : 
; 137  : 	_Myiter& operator++()
; 138  : 		{	// preincrement
; 139  : 		++(*(_Mybase *)this);
; 140  : 		return (*this);
; 141  : 		}
; 142  : 
; 143  : 	_Myiter operator++(int)
; 144  : 		{	// postincrement
; 145  : 		_Myiter _Tmp = *this;
; 146  : 		++*this;
; 147  : 		return (_Tmp);
; 148  : 		}
; 149  : 
; 150  : 	_Myiter& operator--()
; 151  : 		{	// predecrement
; 152  : 		--(*(_Mybase *)this);
; 153  : 		return (*this);
; 154  : 		}
; 155  : 
; 156  : 	_Myiter operator--(int)
; 157  : 		{	// postdecrement
; 158  : 		_Myiter _Tmp = *this;
; 159  : 		--*this;
; 160  : 		return (_Tmp);
; 161  : 		}
; 162  : 	};
; 163  : 
; 164  : 	// TEMPLATE CLASS _List_const_iterator
; 165  : template<class _Mylist>
; 166  : 	class _List_const_iterator
; 167  : 		: public _List_unchecked_const_iterator<_Mylist, _Iterator_base>
; 168  : 	{	// iterator for nonmutable list
; 169  : public:
; 170  : 	typedef _List_const_iterator<_Mylist> _Myiter;
; 171  : 	typedef _List_unchecked_const_iterator<_Mylist, _Iterator_base> _Mybase;
; 172  : 	typedef bidirectional_iterator_tag iterator_category;
; 173  : 
; 174  : 	typedef typename _Mylist::_Nodeptr _Nodeptr;
; 175  : 	typedef typename _Mylist::value_type value_type;
; 176  : 	typedef typename _Mylist::difference_type difference_type;
; 177  : 	typedef typename _Mylist::const_pointer pointer;
; 178  : 	typedef typename _Mylist::const_reference reference;
; 179  : 
; 180  : 	_List_const_iterator()
; 181  : 		: _Mybase()
; 182  : 		{	// construct with null node pointer
; 183  : 		}
; 184  : 
; 185  : 	_List_const_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
; 186  : 		: _Mybase(_Pnode, _Plist)
; 187  : 		{	// construct with node pointer _Pnode
; 188  : 		}
; 189  : 
; 190  : 	typedef _List_unchecked_const_iterator<_Mylist> _Unchecked_type;
; 191  : 
; 192  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 193  : 		{	// reset from unchecked iterator
; 194  : 		this->_Ptr = _Right._Ptr;
; 195  : 		return (*this);
; 196  : 		}
; 197  : 
; 198  : 	_Unchecked_type _Unchecked() const
; 199  : 		{	// make an unchecked iterator
; 200  : 		return (_Unchecked_type(this->_Ptr, (_Mylist *)this->_Getcont()));
; 201  : 		}
; 202  : 
; 203  : 	reference operator*() const
; 204  : 		{	// return designated value
; 205  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 206  : 		if (this->_Getcont() == 0
; 207  : 			|| this->_Ptr == 0
; 208  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 209  : 			{	// report error
; 210  : 			_DEBUG_ERROR("list iterator not dereferencable");
; 211  : 			_SCL_SECURE_OUT_OF_RANGE;
; 212  : 			}
; 213  : 
; 214  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 215  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 216  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 217  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 218  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 219  : 
; 220  : 		return (_Mylist::_Myval(this->_Ptr));
; 221  : 		}
; 222  : 
; 223  : 	_Myiter& operator++()
; 224  : 		{	// preincrement
; 225  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 226  : 		if (this->_Getcont() == 0
; 227  : 			|| this->_Ptr == 0
; 228  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 229  : 			{	// report error
; 230  : 			_DEBUG_ERROR("list iterator not incrementable");
; 231  : 			_SCL_SECURE_OUT_OF_RANGE;
; 232  : 			}
; 233  : 
; 234  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 235  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 236  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 237  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 238  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 239  : 
; 240  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);
; 241  : 		return (*this);
; 242  : 		}
; 243  : 
; 244  : 	_Myiter operator++(int)
; 245  : 		{	// postincrement
; 246  : 		_Myiter _Tmp = *this;
; 247  : 		++*this;
; 248  : 		return (_Tmp);
; 249  : 		}
; 250  : 
; 251  : 	_Myiter& operator--()
; 252  : 		{	// predecrement
; 253  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 254  : 		if (this->_Getcont() == 0
; 255  : 			|| this->_Ptr == 0
; 256  : 			|| (this->_Ptr = _Mylist::_Prevnode(this->_Ptr))
; 257  : 				== ((_Mylist *)this->_Getcont())->_Myhead)
; 258  : 			{	// report error
; 259  : 			_DEBUG_ERROR("list iterator not decrementable");
; 260  : 			_SCL_SECURE_OUT_OF_RANGE;
; 261  : 			}
; 262  : 
; 263  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 264  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 265  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 266  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 267  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 268  : 
; 269  :  #else /* _ITERATOR_DEBUG_LEVEL */
; 270  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 271  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 272  : 
; 273  : 		return (*this);
; 274  : 		}
; 275  : 
; 276  : 	_Myiter operator--(int)
; 277  : 		{	// postdecrement
; 278  : 		_Myiter _Tmp = *this;
; 279  : 		--*this;
; 280  : 		return (_Tmp);
; 281  : 		}
; 282  : 
; 283  : 	bool operator==(const _Myiter& _Right) const
; 284  : 		{	// test for iterator equality
; 285  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 286  : 		if (this->_Getcont() == 0
; 287  : 			|| this->_Getcont() != _Right._Getcont())
; 288  : 			{	// report error
; 289  : 			_DEBUG_ERROR("list iterators incompatible");
; 290  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 291  : 			}
; 292  : 
; 293  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 294  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 295  : 			&& this->_Getcont() == _Right._Getcont());
; 296  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 297  : 
; 298  : 		return (this->_Ptr == _Right._Ptr);
; 299  : 		}
; 300  : 
; 301  : 	bool operator!=(const _Myiter& _Right) const
; 302  : 		{	// test for iterator inequality
; 303  : 		return (!(*this == _Right));
; 304  : 		}
; 305  : 	};
; 306  : 
; 307  : template<class _Mylist> inline
; 308  : 	typename _List_const_iterator<_Mylist>::_Unchecked_type
; 309  : 		_Unchecked(_List_const_iterator<_Mylist> _Iter)
; 310  : 	{	// convert to unchecked
; 311  : 	return (_Iter._Unchecked());
; 312  : 	}
; 313  : 
; 314  : template<class _Mylist> inline
; 315  : 	_List_const_iterator<_Mylist>&
; 316  : 		_Rechecked(_List_const_iterator<_Mylist>& _Iter,
; 317  : 			typename _List_const_iterator<_Mylist>
; 318  : 				::_Unchecked_type _Right)
; 319  : 	{	// convert to checked
; 320  : 	return (_Iter._Rechecked(_Right));
; 321  : 	}
; 322  : 
; 323  : 	// TEMPLATE CLASS _List_iterator
; 324  : template<class _Mylist>
; 325  : 	class _List_iterator
; 326  : 		: public _List_const_iterator<_Mylist>
; 327  : 	{	// iterator for mutable list
; 328  : public:
; 329  : 	typedef _List_iterator<_Mylist> _Myiter;
; 330  : 	typedef _List_const_iterator<_Mylist> _Mybase;
; 331  : 	typedef bidirectional_iterator_tag iterator_category;
; 332  : 
; 333  : 	typedef typename _Mylist::_Nodeptr _Nodeptr;
; 334  : 	typedef typename _Mylist::value_type value_type;
; 335  : 	typedef typename _Mylist::difference_type difference_type;
; 336  : 	typedef typename _Mylist::pointer pointer;
; 337  : 	typedef typename _Mylist::reference reference;
; 338  : 
; 339  : 	_List_iterator()
; 340  : 		{	// construct with null node
; 341  : 		}
; 342  : 
; 343  : 	_List_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
; 344  : 		: _Mybase(_Pnode, _Plist)
; 345  : 		{	// construct with node pointer _Pnode
; 346  : 		}
; 347  : 
; 348  : 	typedef _List_unchecked_iterator<_Mylist> _Unchecked_type;
; 349  : 
; 350  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 351  : 		{	// reset from unchecked iterator
; 352  : 		this->_Ptr = _Right._Ptr;
; 353  : 		return (*this);
; 354  : 		}
; 355  : 
; 356  : 	_Unchecked_type _Unchecked() const
; 357  : 		{	// make an unchecked iterator
; 358  : 		return (_Unchecked_type(this->_Ptr, (_Mylist *)this->_Getcont()));
; 359  : 		}
; 360  : 
; 361  : 	reference operator*() const
; 362  : 		{	// return designated value
; 363  : 		return ((reference)**(_Mybase *)this);
; 364  : 		}
; 365  : 
; 366  : 	pointer operator->() const
; 367  : 		{	// return pointer to class object
; 368  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 369  : 		}
; 370  : 
; 371  : 	_Myiter& operator++()
; 372  : 		{	// preincrement
; 373  : 		++(*(_Mybase *)this);
; 374  : 		return (*this);
; 375  : 		}
; 376  : 
; 377  : 	_Myiter operator++(int)
; 378  : 		{	// postincrement
; 379  : 		_Myiter _Tmp = *this;
; 380  : 		++*this;
; 381  : 		return (_Tmp);
; 382  : 		}
; 383  : 
; 384  : 	_Myiter& operator--()
; 385  : 		{	// predecrement
; 386  : 		--(*(_Mybase *)this);
; 387  : 		return (*this);
; 388  : 		}
; 389  : 
; 390  : 	_Myiter operator--(int)
; 391  : 		{	// postdecrement
; 392  : 		_Myiter _Tmp = *this;
; 393  : 		--*this;
; 394  : 		return (_Tmp);
; 395  : 		}
; 396  : 	};
; 397  : 
; 398  : template<class _Mylist> inline
; 399  : 	typename _List_iterator<_Mylist>::_Unchecked_type
; 400  : 		_Unchecked(_List_iterator<_Mylist> _Iter)
; 401  : 	{	// convert to unchecked
; 402  : 	return (_Iter._Unchecked());
; 403  : 	}
; 404  : 
; 405  : template<class _Mylist> inline
; 406  : 	_List_iterator<_Mylist>&
; 407  : 		_Rechecked(_List_iterator<_Mylist>& _Iter,
; 408  : 			typename _List_iterator<_Mylist>
; 409  : 				::_Unchecked_type _Right)
; 410  : 	{	// convert to checked
; 411  : 	return (_Iter._Rechecked(_Right));
; 412  : 	}
; 413  : 
; 414  : 		// list TYPE WRAPPERS
; 415  : template<class _Value_type,
; 416  : 	class _Size_type,
; 417  : 	class _Difference_type,
; 418  : 	class _Pointer,
; 419  : 	class _Const_pointer,
; 420  : 	class _Reference,
; 421  : 	class _Const_reference,
; 422  : 	class _Nodeptr_type>
; 423  : 	struct _List_iter_types
; 424  : 	{	// wraps types needed by iterators
; 425  : 	typedef _Value_type value_type;
; 426  : 	typedef _Size_type size_type;
; 427  : 	typedef _Difference_type difference_type;
; 428  : 	typedef _Pointer pointer;
; 429  : 	typedef _Const_pointer const_pointer;
; 430  : 	typedef _Reference reference;
; 431  : 	typedef _Const_reference const_reference;
; 432  : 	typedef _Nodeptr_type _Nodeptr;
; 433  : 	};
; 434  : 
; 435  : template<class _Value_type,
; 436  : 	class _Voidptr>
; 437  : 	struct _List_node
; 438  : 		{	// list node
; 439  : 		_Voidptr _Next;	// successor node, or first element if head
; 440  : 		_Voidptr _Prev;	// predecessor node, or last element if head
; 441  : 		_Value_type _Myval;	// the stored value, unused if head
; 442  : 
; 443  : 	private:
; 444  : 		_List_node& operator=(const _List_node&);
; 445  : 		};
; 446  : 
; 447  : template<class _Value_type>
; 448  : 	struct _List_node<_Value_type, void *>
; 449  : 		{	// list node
; 450  : 		typedef _List_node<_Value_type, void *> *_Nodeptr;
; 451  : 		_Nodeptr _Next;	// successor node, or first element if head
; 452  : 		_Nodeptr _Prev;	// predecessor node, or last element if head
; 453  : 		_Value_type _Myval;	// the stored value, unused if head
; 454  : 
; 455  : 	private:
; 456  : 		_List_node& operator=(const _List_node&);
; 457  : 		};
; 458  : 
; 459  : template<class _Ty>
; 460  : 	struct _List_simple_types
; 461  : 		: public _Simple_types<_Ty>
; 462  : 	{	// wraps types needed by iterators
; 463  : 	typedef _List_node<_Ty, void *> _Node;
; 464  : 	typedef _Node *_Nodeptr;
; 465  : 	};
; 466  : 
; 467  : template<class _Ty,
; 468  : 	class _Alloc0>
; 469  : 	struct _List_base_types
; 470  : 	{	// types needed for a container base
; 471  : 	typedef _Alloc0 _Alloc;
; 472  : 	typedef _List_base_types<_Ty, _Alloc> _Myt;
; 473  : 
; 474  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 475  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 476  : 
; 477  : 
; 478  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 479  : 		_Voidptr;
; 480  : 	typedef _List_node<typename _Alty::value_type,
; 481  : 		_Voidptr> _Node;
; 482  : 
; 483  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 484  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 485  : 	typedef _Nodeptr& _Nodepref;
; 486  : 
; 487  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 488  : 		_List_simple_types<typename _Alty::value_type>,
; 489  : 		_List_iter_types<typename _Alty::value_type,
; 490  : 			typename _Alty::size_type,
; 491  : 			typename _Alty::difference_type,
; 492  : 			typename _Alty::pointer,
; 493  : 			typename _Alty::const_pointer,
; 494  : 			typename _Alty::reference,
; 495  : 			typename _Alty::const_reference,
; 496  : 			_Nodeptr> >::type
; 497  : 		_Val_types;
; 498  : 	};
; 499  : 
; 500  : 		// TEMPLATE CLASS _List_val
; 501  : template<class _Val_types>
; 502  : 	class _List_val
; 503  : 		: public _Container_base
; 504  : 	{	// base class for list to hold data
; 505  : public:
; 506  : 	typedef _List_val<_Val_types> _Myt;
; 507  : 
; 508  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 509  : 	typedef _Nodeptr& _Nodepref;
; 510  : 
; 511  : 	typedef typename _Val_types::value_type value_type;
; 512  : 	typedef typename _Val_types::size_type size_type;
; 513  : 	typedef typename _Val_types::difference_type difference_type;
; 514  : 	typedef typename _Val_types::pointer pointer;
; 515  : 	typedef typename _Val_types::const_pointer const_pointer;
; 516  : 	typedef typename _Val_types::reference reference;
; 517  : 	typedef typename _Val_types::const_reference const_reference;
; 518  : 
; 519  : 	typedef _List_const_iterator<_Myt> const_iterator;
; 520  : 	typedef _List_iterator<_Myt> iterator;
; 521  : 
; 522  : 	typedef _List_unchecked_const_iterator<_Myt> _Unchecked_const_iterator;
; 523  : 	typedef _List_unchecked_iterator<_Myt> _Unchecked_iterator;
; 524  : 
; 525  : 	_List_val()
; 526  : 		{	// initialize data
; 527  : 		this->_Myhead = 0;
; 528  : 		this->_Mysize = 0;
; 529  : 		}
; 530  : 
; 531  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 532  : 		{	// return reference to successor pointer in node
; 533  : 		return ((_Nodepref)_Pnode->_Next);

  00046	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi

; 1065 : 		this->_Nextnode(this->_Prevnode(_Newnode)) = _Newnode;

  0004b	89 10		 mov	 DWORD PTR [eax], edx
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp

; 41   : }

  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c2 0c 00	 ret	 12			; 0000000cH
$LN44@AddChannel:
; File a:\vs\vc\include\list

; 1907 : 			_Xlength_error("list<T> too long");

  00053	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
  00058	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN46@AddChannel:
$LN43@AddChannel:
  0005d	cc		 int	 3
?AddChannel@CServerStateChecker@@QAEXIPBDI@Z ENDP	; CServerStateChecker::AddChannel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp
;	COMDAT ?Create@CServerStateChecker@@QAEXPAU_object@@@Z
_TEXT	SEGMENT
_poWnd$ = 8						; size = 4
?Create@CServerStateChecker@@QAEXPAU_object@@@Z PROC	; CServerStateChecker::Create, COMDAT
; _this$ = ecx

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 30   : 	m_poWnd = poWnd;

  00003	8b 45 08	 mov	 eax, DWORD PTR _poWnd$[ebp]
  00006	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 31   : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?Create@CServerStateChecker@@QAEXPAU_object@@@Z ENDP	; CServerStateChecker::Create
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp
; File a:\vs\vc\include\list
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\list
; File a:\vs\vc\include\xmemory0
; File a:\from c\desktop\serwer\source\source client\client\eterbase\singleton.h
; File a:\vs\vc\include\xmemory0
; File a:\from c\desktop\serwer\source\source client\client\eterbase\singleton.h
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp
;	COMDAT ??1CServerStateChecker@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CServerStateChecker@@UAE@XZ PROC			; CServerStateChecker::~CServerStateChecker, COMDAT
; _this$ = ecx

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CServerStateChecker@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002a	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CServerStateChecker@@6B@
  00030	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 24   : 	Initialize();

  00037	e8 00 00 00 00	 call	 ?Initialize@CServerStateChecker@@QAEXXZ ; CServerStateChecker::Initialize

; 26   : }

  0003c	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  0003f	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  00046	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0004a	e8 00 00 00 00	 call	 ??1CNetworkStream@@UAE@XZ ; CNetworkStream::~CNetworkStream
; File a:\vs\vc\include\list

; 533  : 		return ((_Nodepref)_Pnode->_Next);

  0004f	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]

; 539  : 		}
; 540  : 
; 541  : 	static reference _Myval(_Nodeptr _Pnode)
; 542  : 		{	// return reference to value in node
; 543  : 		return ((reference)_Pnode->_Myval);
; 544  : 		}
; 545  : 
; 546  : 	_Nodeptr _Myhead;	// pointer to head node
; 547  : 	size_type _Mysize;	// number of elements
; 548  : 	};
; 549  : 
; 550  : 		// TEMPLATE CLASS _List_alloc
; 551  : template<bool _Al_has_storage,
; 552  : 	class _Alloc_types>
; 553  : 	class _List_alloc
; 554  : 		: public _List_val<typename _Alloc_types::_Val_types>
; 555  : 	{	// base class for list to hold allocator with storage
; 556  : public:
; 557  : 	typename _Alloc_types::_Alnod_type _Alnod;	// allocator object
; 558  : 
; 559  : 	typedef _List_alloc<_Al_has_storage, _Alloc_types> _Myt;
; 560  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 561  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 562  : 	typedef typename _Alloc_types::_Node _Node;
; 563  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 564  : 
; 565  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 566  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 567  : 		: _Alnod(_Al)
; 568  : 		{	// construct head node, allocator from _Al
; 569  : 		this->_Myhead = _Buyheadnode();
; 570  : 		}
; 571  : 
; 572  : 	~_List_alloc() _NOEXCEPT
; 573  : 		{	// destroy head node
; 574  : 		_Freeheadnode(this->_Myhead);
; 575  : 		}
; 576  : 
; 577  : 	void _Change_alloc(const _Alty& _Al)
; 578  : 		{	// replace old allocator
; 579  : 		this->_Alnod = _Al;
; 580  : 		}
; 581  : 
; 582  : 	void _Swap_alloc(_Myt& _Right)
; 583  : 		{	// swap allocators
; 584  : 		_Swap_adl(this->_Alnod, _Right._Alnod);
; 585  : 		}
; 586  : 
; 587  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 588  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 589  : 		: _Alnod(_Al)
; 590  : 		{	// construct head node, allocator from _Al
; 591  : 		this->_Myhead = _Buyheadnode();
; 592  : 		_TRY_BEGIN
; 593  : 		_Alloc_proxy();
; 594  : 		_CATCH_ALL
; 595  : 		_Freeheadnode(this->_Myhead);
; 596  : 		_RERAISE;
; 597  : 		_CATCH_END
; 598  : 		}
; 599  : 
; 600  : 	~_List_alloc() _NOEXCEPT
; 601  : 		{	// destroy proxy
; 602  : 		_Freeheadnode(this->_Myhead);
; 603  : 		_Free_proxy();
; 604  : 		}
; 605  : 
; 606  : 	void _Change_alloc(const _Alty& _Al)
; 607  : 		{	// replace old allocator
; 608  : 		_Free_proxy();
; 609  : 		this->_Alnod = _Al;
; 610  : 		_Alloc_proxy();
; 611  : 		}
; 612  : 
; 613  : 	void _Swap_alloc(_Myt& _Right)
; 614  : 		{	// swap allocators
; 615  : 		_Swap_adl(this->_Alnod, _Right._Alnod);
; 616  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 617  : 		}
; 618  : 
; 619  : 	void _Alloc_proxy()
; 620  : 		{	// construct proxy from _Alnod
; 621  : 		typename _Alty::template rebind<_Container_proxy>::other
; 622  : 			_Alproxy(this->_Alnod);
; 623  : 		this->_Myproxy = _Alproxy.allocate(1);
; 624  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 625  : 		this->_Myproxy->_Mycont = this;
; 626  : 		}
; 627  : 
; 628  : 	void _Free_proxy()
; 629  : 		{	// destroy proxy
; 630  : 		typename _Alty::template rebind<_Container_proxy>::other
; 631  : 			_Alproxy(this->_Alnod);
; 632  : 		this->_Orphan_all();
; 633  : 		_Alproxy.destroy(this->_Myproxy);
; 634  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 635  : 		this->_Myproxy = 0;
; 636  : 		}
; 637  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 638  : 
; 639  : 	_Nodeptr _Buyheadnode()
; 640  : 		{	// get head node using current allocator
; 641  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));
; 642  : 		}
; 643  : 
; 644  : 	void _Freeheadnode(_Nodeptr _Pnode)
; 645  : 		{	// free head node using current allocator
; 646  : 		this->_Alnod.destroy(
; 647  : 			_STD addressof(this->_Nextnode(_Pnode)));
; 648  : 		this->_Alnod.destroy(
; 649  : 			_STD addressof(this->_Prevnode(_Pnode)));
; 650  : 		this->_Alnod.deallocate(_Pnode, 1);
; 651  : 		}
; 652  : 
; 653  : 	_Nodeptr _Buynode0(_Nodeptr _Next,
; 654  : 		_Nodeptr _Prev)
; 655  : 		{	// allocate a node and set links
; 656  : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);
; 657  : 
; 658  : 		if (_Next == _Nodeptr())
; 659  : 			{	// point at self
; 660  : 			_Next = _Pnode;
; 661  : 			_Prev = _Pnode;
; 662  : 			}
; 663  : 		_TRY_BEGIN
; 664  : 		this->_Alnod.construct(
; 665  : 			_STD addressof(this->_Nextnode(_Pnode)), _Next);
; 666  : 		this->_Alnod.construct(
; 667  : 			_STD addressof(this->_Prevnode(_Pnode)), _Prev);
; 668  : 		_CATCH_ALL
; 669  : 		this->_Alnod.deallocate(_Pnode, 1);
; 670  : 		_RERAISE;
; 671  : 		_CATCH_END
; 672  : 
; 673  : 		return (_Pnode);
; 674  : 		}
; 675  : 
; 676  : 	_Alty& _Getal()
; 677  : 		{	// get reference to allocator
; 678  : 		return (this->_Alnod);
; 679  : 		}
; 680  : 
; 681  : 	const _Alty& _Getal() const
; 682  : 		{	// get reference to allocator
; 683  : 		return (this->_Alnod);
; 684  : 		}
; 685  : 	};
; 686  : 
; 687  : 		// TEMPLATE CLASS _List_alloc
; 688  : template<class _Alloc_types>
; 689  : 	class _List_alloc<false, _Alloc_types>
; 690  : 		: public _List_val<typename _Alloc_types::_Val_types>
; 691  : 	{	// base class for list to hold allocator with no storage
; 692  : public:
; 693  : 	typedef _List_alloc<false, _Alloc_types> _Myt;
; 694  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 695  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 696  : 	typedef typename _Alloc_types::_Node _Node;
; 697  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 698  : 
; 699  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 700  : 	_List_alloc(const _Alloc& = _Alloc())
; 701  : 		{	// construct head node, allocator from _Al
; 702  : 		this->_Myhead = _Buyheadnode();
; 703  : 		}
; 704  : 
; 705  : 	~_List_alloc() _NOEXCEPT
; 706  : 		{	// destroy head node
; 707  : 		_Freeheadnode(this->_Myhead);
; 708  : 		}
; 709  : 
; 710  : 	void _Change_alloc(const _Alty&)
; 711  : 		{	// replace old allocator
; 712  : 		}
; 713  : 
; 714  : 	void _Swap_alloc(_Myt&)
; 715  : 		{	// swap allocators
; 716  : 		}
; 717  : 
; 718  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 719  : 	_List_alloc(const _Alloc& = _Alloc())
; 720  : 		{	// construct allocators from _Al
; 721  : 		this->_Myhead = _Buyheadnode();
; 722  : 		_TRY_BEGIN
; 723  : 		_Alloc_proxy();
; 724  : 		_CATCH_ALL
; 725  : 		_Freeheadnode(this->_Myhead);
; 726  : 		_RERAISE;
; 727  : 		_CATCH_END
; 728  : 		}
; 729  : 
; 730  : 	~_List_alloc() _NOEXCEPT
; 731  : 		{	// destroy proxy
; 732  : 		_Freeheadnode(this->_Myhead);
; 733  : 		_Free_proxy();
; 734  : 		}
; 735  : 
; 736  : 	void _Change_alloc(const _Alty&)
; 737  : 		{	// replace old allocator
; 738  : 		}
; 739  : 
; 740  : 	void _Swap_alloc(_Myt& _Right)
; 741  : 		{	// swap allocators
; 742  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 743  : 		}
; 744  : 
; 745  : 	void _Alloc_proxy()
; 746  : 		{	// construct proxy from _Alnod
; 747  : 		typename _Alty::template rebind<_Container_proxy>::other
; 748  : 			_Alproxy;
; 749  : 		this->_Myproxy = _Alproxy.allocate(1);
; 750  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 751  : 		this->_Myproxy->_Mycont = this;
; 752  : 		}
; 753  : 
; 754  : 	void _Free_proxy()
; 755  : 		{	// destroy proxy
; 756  : 		typename _Alty::template rebind<_Container_proxy>::other
; 757  : 			_Alproxy;
; 758  : 		this->_Orphan_all();
; 759  : 		_Alproxy.destroy(this->_Myproxy);
; 760  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 761  : 		this->_Myproxy = 0;
; 762  : 		}
; 763  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 764  : 
; 765  : 	_Nodeptr _Buyheadnode()
; 766  : 		{	// get head node using current allocator
; 767  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));
; 768  : 		}
; 769  : 
; 770  : 	void _Freeheadnode(_Nodeptr _Pnode)
; 771  : 		{	// free head node using current allocator
; 772  : 		this->_Getal().destroy(
; 773  : 			_STD addressof(this->_Nextnode(_Pnode)));
; 774  : 		this->_Getal().destroy(
; 775  : 			_STD addressof(this->_Prevnode(_Pnode)));
; 776  : 		this->_Getal().deallocate(_Pnode, 1);
; 777  : 		}
; 778  : 
; 779  : 	_Nodeptr _Buynode0(_Nodeptr _Next,
; 780  : 		_Nodeptr _Prev)
; 781  : 		{	// allocate a node and set links
; 782  : 		_Nodeptr _Pnode = this->_Getal().allocate(1);
; 783  : 
; 784  : 		if (_Next == _Nodeptr())
; 785  : 			{	// point at self
; 786  : 			_Next = _Pnode;
; 787  : 			_Prev = _Pnode;
; 788  : 			}
; 789  : 		_TRY_BEGIN
; 790  : 		this->_Getal().construct(
; 791  : 			_STD addressof(this->_Nextnode(_Pnode)), _Next);
; 792  : 		this->_Getal().construct(
; 793  : 			_STD addressof(this->_Prevnode(_Pnode)), _Prev);
; 794  : 		_CATCH_ALL
; 795  : 		this->_Getal().deallocate(_Pnode, 1);
; 796  : 		_RERAISE;
; 797  : 		_CATCH_END
; 798  : 
; 799  : 		return (_Pnode);
; 800  : 		}
; 801  : 
; 802  : 	_Alty _Getal() const
; 803  : 		{	// get reference to allocator
; 804  : 		return (_Alty());
; 805  : 		}
; 806  : 	};
; 807  : 
; 808  : 		// TEMPLATE CLASS _List_buy
; 809  : template<class _Ty,
; 810  : 	class _Alloc>
; 811  : 	class _List_buy
; 812  : 		: public _List_alloc<!is_empty<_Alloc>::value,
; 813  : 			_List_base_types<_Ty, _Alloc> >
; 814  : 	{	// base class for list to hold buynode/freenode functions
; 815  : public:
; 816  : 	typedef _List_alloc<!is_empty<_Alloc>::value,
; 817  : 		_List_base_types<_Ty, _Alloc> > _Mybase;
; 818  : 	typedef typename _Mybase::_Alty _Alty;
; 819  : 	typedef typename _Mybase::_Nodeptr _Nodeptr;
; 820  : 
; 821  : 	_List_buy(const _Alloc& _Al = _Alloc())
; 822  : 		: _Mybase(_Al)
; 823  : 		{	// construct from allocator
; 824  : 		}
; 825  : 
; 826  : 	template<class... _Valty>
; 827  : 		_Nodeptr _Buynode(_Nodeptr _Next, _Nodeptr _Prev,
; 828  : 			_Valty&&... _Val)
; 829  : 		{	// allocate a node and set links and value
; 830  : 		_Nodeptr _Pnode = this->_Buynode0(_Next, _Prev);
; 831  : 
; 832  : 		_TRY_BEGIN
; 833  : 		this->_Getal().construct(
; 834  : 			_STD addressof(this->_Myval(_Pnode)),
; 835  : 				_STD forward<_Valty>(_Val)...);
; 836  : 		_CATCH_ALL
; 837  : 		this->_Getal().deallocate(_Pnode, 1);
; 838  : 		_RERAISE;
; 839  : 		_CATCH_END
; 840  : 
; 841  : 		return (_Pnode);
; 842  : 		}
; 843  : 
; 844  : 
; 845  : 	void _Freenode(_Nodeptr _Pnode)
; 846  : 		{	// give node back
; 847  : 		this->_Getal().destroy(
; 848  : 			_STD addressof(this->_Nextnode(_Pnode)));
; 849  : 		this->_Getal().destroy(
; 850  : 			_STD addressof(this->_Prevnode(_Pnode)));
; 851  : 		this->_Getal().destroy(
; 852  : 			_STD addressof(this->_Myval(_Pnode)));
; 853  : 		this->_Getal().deallocate(_Pnode, 1);
; 854  : 		}
; 855  : 	};
; 856  : 
; 857  : 		// TEMPLATE CLASS list
; 858  : template<class _Ty,
; 859  : 	class _Alloc = allocator<_Ty> >
; 860  : 	class list
; 861  : 		: public _List_buy<_Ty, _Alloc>
; 862  : 	{	// bidirectional linked list
; 863  : public:
; 864  : 	typedef list<_Ty, _Alloc> _Myt;
; 865  : 	typedef _List_buy<_Ty, _Alloc> _Mybase;
; 866  : 	typedef typename _Mybase::_Node _Node;
; 867  : 	typedef typename _Mybase::_Nodeptr _Nodeptr;
; 868  : 	typedef typename _Mybase::_Alty _Alty;
; 869  : 
; 870  : 	typedef _Alloc allocator_type;
; 871  : 	typedef typename _Mybase::size_type size_type;
; 872  : 	typedef typename _Mybase::difference_type difference_type;
; 873  : 	typedef typename _Mybase::pointer pointer;
; 874  : 	typedef typename _Mybase::const_pointer const_pointer;
; 875  : 	typedef typename _Mybase::reference reference;
; 876  : 	typedef typename _Mybase::const_reference const_reference;
; 877  : 	typedef typename _Mybase::value_type value_type;
; 878  : 
; 879  : 	typedef typename _Mybase::const_iterator const_iterator;
; 880  : 	typedef typename _Mybase::iterator iterator;
; 881  : 	typedef typename _Mybase::_Unchecked_const_iterator
; 882  : 		_Unchecked_const_iterator;
; 883  : 	typedef typename _Mybase::_Unchecked_iterator
; 884  : 		_Unchecked_iterator;
; 885  : 
; 886  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 887  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 888  : 
; 889  : 	list()
; 890  : 		: _Mybase()
; 891  : 		{	// construct empty list
; 892  : 		}
; 893  : 
; 894  : 	explicit list(const _Alloc& _Al)
; 895  : 		: _Mybase(_Al)
; 896  : 		{	// construct empty list, allocator
; 897  : 		}
; 898  : 
; 899  : 	explicit list(size_type _Count)
; 900  : 		: _Mybase()
; 901  : 		{	// construct list from _Count * _Ty()
; 902  : 		resize(_Count);
; 903  : 		}
; 904  : 
; 905  : 	list(size_type _Count, const _Ty& _Val)
; 906  : 		: _Mybase()
; 907  : 		{	// construct list from _Count * _Val
; 908  : 		_Construct_n(_Count, _Val);
; 909  : 		}
; 910  : 
; 911  : 	list(size_type _Count, const _Ty& _Val, const _Alloc& _Al)
; 912  : 		: _Mybase(_Al)
; 913  : 		{	// construct list from _Count * _Val, allocator
; 914  : 		_Construct_n(_Count, _Val);
; 915  : 		}
; 916  : 
; 917  : 	list(const _Myt& _Right)
; 918  : 
; 919  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 920  : 
; 921  : 
; 922  : 		{	// construct list by copying _Right
; 923  : 		_TRY_BEGIN
; 924  : 		insert(begin(), _Right.begin(), _Right.end());
; 925  : 		_CATCH_ALL
; 926  : 		_Tidy();
; 927  : 		_RERAISE;
; 928  : 		_CATCH_END
; 929  : 		}
; 930  : 
; 931  : 	list(const _Myt& _Right, const _Alloc& _Al)
; 932  : 		: _Mybase(_Al)
; 933  : 		{	// construct list by copying _Right, allocator
; 934  : 		_TRY_BEGIN
; 935  : 		insert(begin(), _Right.begin(), _Right.end());
; 936  : 		_CATCH_ALL
; 937  : 		_Tidy();
; 938  : 		_RERAISE;
; 939  : 		_CATCH_END
; 940  : 		}
; 941  : 
; 942  : 	template<class _Iter,
; 943  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 944  : 			void>::type>
; 945  : 		list(_Iter _First, _Iter _Last)
; 946  : 		: _Mybase()
; 947  : 		{	// construct list from [_First, _Last)
; 948  : 		_Construct(_First, _Last);
; 949  : 		}
; 950  : 
; 951  : 	template<class _Iter,
; 952  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 953  : 			void>::type>
; 954  : 		list(_Iter _First, _Iter _Last, const _Alloc& _Al)
; 955  : 		: _Mybase(_Al)
; 956  : 		{	// construct list, allocator from [_First, _Last)
; 957  : 		_Construct(_First, _Last);
; 958  : 		}
; 959  : 
; 960  : 	template<class _Iter>
; 961  : 		void _Construct(_Iter _First, _Iter _Last)
; 962  : 		{	// construct list from [_First, _Last), input iterators
; 963  : 		_TRY_BEGIN
; 964  : 		insert(begin(), _First, _Last);
; 965  : 		_CATCH_ALL
; 966  : 		_Tidy();
; 967  : 		_RERAISE;
; 968  : 		_CATCH_END
; 969  : 		}
; 970  : 
; 971  : 	void _Construct_n(size_type _Count,
; 972  : 		const _Ty& _Val)
; 973  : 		{	// construct from _Count * _Val
; 974  : 		_TRY_BEGIN
; 975  : 		_Insert_n(_Unchecked_begin(), _Count, _Val);
; 976  : 		_CATCH_ALL
; 977  : 		_Tidy();
; 978  : 		_RERAISE;
; 979  : 		_CATCH_END
; 980  : 		}
; 981  : 
; 982  : 	list(_Myt&& _Right)
; 983  : 		: _Mybase(_Right._Getal())
; 984  : 		{	// construct list by moving _Right
; 985  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 986  : 		}
; 987  : 
; 988  : 	list(_Myt&& _Right, const _Alloc& _Al)
; 989  : 		: _Mybase(_Al)
; 990  : 		{	// construct list by moving _Right, allocator
; 991  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 992  : 		}
; 993  : 
; 994  : 	_Myt& operator=(_Myt&& _Right)
; 995  : 		{	// assign by moving _Right
; 996  : 		if (this != &_Right)
; 997  : 			{	// different, assign it
; 998  : 			clear();
; 999  : 
; 1000 : 			if (_Alty::propagate_on_container_move_assignment::value
; 1001 : 				&& this->_Getal() != _Right._Getal())
; 1002 : 				this->_Change_alloc(_Right._Getal());
; 1003 : 
; 1004 : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 1005 : 			}
; 1006 : 		return (*this);
; 1007 : 		}
; 1008 : 
; 1009 : 	void _Assign_rv(_Myt&& _Right)
; 1010 : 		{	// swap with empty *this, same allocator
; 1011 : 		this->_Swap_all(_Right);
; 1012 : 		_Swap_adl(this->_Myhead, _Right._Myhead);
; 1013 : 		_STD swap(this->_Mysize, _Right._Mysize);
; 1014 : 		}
; 1015 : 
; 1016 : 	void push_front(_Ty&& _Val)
; 1017 : 		{	// insert element at beginning
; 1018 : 		_Insert(_Unchecked_begin(), _STD forward<_Ty>(_Val));
; 1019 : 		}
; 1020 : 
; 1021 : 	void push_back(_Ty&& _Val)
; 1022 : 		{	// insert element at end
; 1023 : 		_Insert(_Unchecked_end(), _STD forward<_Ty>(_Val));
; 1024 : 		}
; 1025 : 
; 1026 : 	iterator insert(const_iterator _Where, _Ty&& _Val)
; 1027 : 		{	// insert _Val at _Where
; 1028 : 		return (emplace(_Where, _STD forward<_Ty>(_Val)));
; 1029 : 		}
; 1030 : 
; 1031 : 	template<class... _Valty>
; 1032 : 		void emplace_front(_Valty&&... _Val)
; 1033 : 		{	// insert element at beginning
; 1034 : 		_Insert(_Unchecked_begin(), _STD forward<_Valty>(_Val)...);
; 1035 : 		}
; 1036 : 
; 1037 : 	template<class... _Valty>
; 1038 : 		void emplace_back(_Valty&&... _Val)
; 1039 : 		{	// insert element at end
; 1040 : 		_Insert(_Unchecked_end(), _STD forward<_Valty>(_Val)...);
; 1041 : 		}
; 1042 : 
; 1043 : 	template<class... _Valty>
; 1044 : 		iterator emplace(const_iterator _Where, _Valty&&... _Val)
; 1045 : 		{	// insert element at _Where
; 1046 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1047 : 		if (_Where._Getcont() != this)
; 1048 : 			_DEBUG_ERROR("list emplace iterator outside range");
; 1049 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1050 : 
; 1051 : 		_Insert(_Where._Unchecked(), _STD forward<_Valty>(_Val)...);
; 1052 : 		return (_Make_iter(--_Where));
; 1053 : 		}
; 1054 : 
; 1055 : 	template<class... _Valty>
; 1056 : 		void _Insert(_Unchecked_const_iterator _Where,
; 1057 : 		_Valty&&... _Val)
; 1058 : 		{	// insert element at _Where
; 1059 : 		_Nodeptr _Pnode = _Where._Mynode();
; 1060 : 		_Nodeptr _Newnode =
; 1061 : 			this->_Buynode(_Pnode, this->_Prevnode(_Pnode),
; 1062 : 				_STD forward<_Valty>(_Val)...);
; 1063 : 		_Incsize(1);
; 1064 : 		this->_Prevnode(_Pnode) = _Newnode;
; 1065 : 		this->_Nextnode(this->_Prevnode(_Newnode)) = _Newnode;
; 1066 : 		}
; 1067 : 
; 1068 : 
; 1069 : 	list(_XSTD initializer_list<_Ty> _Ilist,
; 1070 : 		const _Alloc& _Al = allocator_type())
; 1071 : 		: _Mybase(_Al)
; 1072 : 		{	// construct from initializer_list
; 1073 : 		insert(begin(), _Ilist.begin(), _Ilist.end());
; 1074 : 		}
; 1075 : 
; 1076 : 	_Myt& operator=(_XSTD initializer_list<_Ty> _Ilist)
; 1077 : 		{	// assign initializer_list
; 1078 : 		assign(_Ilist.begin(), _Ilist.end());
; 1079 : 		return (*this);
; 1080 : 		}
; 1081 : 
; 1082 : 	void assign(_XSTD initializer_list<_Ty> _Ilist)
; 1083 : 		{	// assign initializer_list
; 1084 : 		assign(_Ilist.begin(), _Ilist.end());
; 1085 : 		}
; 1086 : 
; 1087 : 	iterator insert(const_iterator _Where,
; 1088 : 		_XSTD initializer_list<_Ty> _Ilist)
; 1089 : 		{	// insert initializer_list
; 1090 : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 1091 : 		}
; 1092 : 
; 1093 : 	~list() _NOEXCEPT
; 1094 : 		{	// destroy the object
; 1095 : 		_Tidy();
; 1096 : 		}
; 1097 : 
; 1098 : 	_Myt& operator=(const _Myt& _Right)
; 1099 : 		{	// assign _Right
; 1100 : 		if (this != &_Right)
; 1101 : 			{	// different, assign it
; 1102 : 			if (this->_Getal() != _Right._Getal()
; 1103 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1104 : 				{	// change allocator before copying
; 1105 : 				clear();
; 1106 : 				this->_Change_alloc(_Right._Getal());
; 1107 : 				}
; 1108 : 
; 1109 : 			assign(_Right.begin(), _Right.end());
; 1110 : 			}
; 1111 : 		return (*this);
; 1112 : 		}
; 1113 : 
; 1114 : 	iterator begin() _NOEXCEPT
; 1115 : 		{	// return iterator for beginning of mutable sequence
; 1116 : 		return (iterator(this->_Nextnode(this->_Myhead), this));
; 1117 : 		}
; 1118 : 
; 1119 : 	const_iterator begin() const _NOEXCEPT
; 1120 : 		{	// return iterator for beginning of nonmutable sequence
; 1121 : 		return (const_iterator(this->_Nextnode(this->_Myhead), this));
; 1122 : 		}
; 1123 : 
; 1124 : 	iterator end() _NOEXCEPT
; 1125 : 		{	// return iterator for end of mutable sequence
; 1126 : 		return (iterator(this->_Myhead, this));
; 1127 : 		}
; 1128 : 
; 1129 : 	const_iterator end() const _NOEXCEPT
; 1130 : 		{	// return iterator for end of nonmutable sequence
; 1131 : 		return (const_iterator(this->_Myhead, this));
; 1132 : 		}
; 1133 : 
; 1134 : 	_Unchecked_iterator _Unchecked_begin()
; 1135 : 		{	// return iterator for beginning of mutable sequence
; 1136 : 		return (_Unchecked_iterator(this->_Nextnode(this->_Myhead),
; 1137 : 			this));
; 1138 : 		}
; 1139 : 
; 1140 : 	_Unchecked_const_iterator _Unchecked_begin() const
; 1141 : 		{	// return iterator for beginning of nonmutable sequence
; 1142 : 		return (_Unchecked_const_iterator(this->_Nextnode(this->_Myhead),
; 1143 : 			this));
; 1144 : 		}
; 1145 : 
; 1146 : 	_Unchecked_iterator _Unchecked_end()
; 1147 : 		{	// return unchecked iterator for end of mutable sequence
; 1148 : 		return (_Unchecked_iterator(this->_Myhead, this));
; 1149 : 		}
; 1150 : 
; 1151 : 	_Unchecked_const_iterator _Unchecked_end() const
; 1152 : 		{	// return unchecked iterator for end of nonmutable sequence
; 1153 : 		return (_Unchecked_const_iterator(this->_Myhead, this));
; 1154 : 		}
; 1155 : 
; 1156 : 	iterator _Make_iter(const_iterator _Where) const _NOEXCEPT
; 1157 : 		{	// make iterator from const_iterator
; 1158 : 		return (iterator(_Where._Ptr, this));
; 1159 : 		}
; 1160 : 
; 1161 : 	iterator _Make_iter(_Unchecked_const_iterator _Where) const
; 1162 : 		{	// make iterator from _Unchecked_const_iterator
; 1163 : 		return (iterator(_Where._Ptr, this));
; 1164 : 		}
; 1165 : 
; 1166 : 	reverse_iterator rbegin() _NOEXCEPT
; 1167 : 		{	// return iterator for beginning of reversed mutable sequence
; 1168 : 		return (reverse_iterator(end()));
; 1169 : 		}
; 1170 : 
; 1171 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1172 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1173 : 		return (const_reverse_iterator(end()));
; 1174 : 		}
; 1175 : 
; 1176 : 	reverse_iterator rend() _NOEXCEPT
; 1177 : 		{	// return iterator for end of reversed mutable sequence
; 1178 : 		return (reverse_iterator(begin()));
; 1179 : 		}
; 1180 : 
; 1181 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1182 : 		{	// return iterator for end of reversed nonmutable sequence
; 1183 : 		return (const_reverse_iterator(begin()));
; 1184 : 		}
; 1185 : 
; 1186 : 	const_iterator cbegin() const _NOEXCEPT
; 1187 : 		{	// return iterator for beginning of nonmutable sequence
; 1188 : 		return (((const _Myt *)this)->begin());
; 1189 : 		}
; 1190 : 
; 1191 : 	const_iterator cend() const _NOEXCEPT
; 1192 : 		{	// return iterator for end of nonmutable sequence
; 1193 : 		return (((const _Myt *)this)->end());
; 1194 : 		}
; 1195 : 
; 1196 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1197 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1198 : 		return (((const _Myt *)this)->rbegin());
; 1199 : 		}
; 1200 : 
; 1201 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1202 : 		{	// return iterator for end of reversed nonmutable sequence
; 1203 : 		return (((const _Myt *)this)->rend());
; 1204 : 		}
; 1205 : 
; 1206 : 	void resize(size_type _Newsize)
; 1207 : 		{	// determine new length, padding with _Ty() elements as needed
; 1208 : 		if (this->_Mysize < _Newsize)
; 1209 : 			{	// pad to make larger
; 1210 : 			size_type _Count = 0;
; 1211 : 			_TRY_BEGIN
; 1212 : 			for (; this->_Mysize < _Newsize; ++_Count)
; 1213 : 				_Insert(_Unchecked_end());
; 1214 : 			_CATCH_ALL
; 1215 : 			for (; 0 < _Count; --_Count)
; 1216 : 				pop_back();	// undo inserts
; 1217 : 			_RERAISE;
; 1218 : 			_CATCH_END
; 1219 : 			}
; 1220 : 		else
; 1221 : 			while (_Newsize < this->_Mysize)
; 1222 : 				pop_back();
; 1223 : 		}
; 1224 : 
; 1225 : 	void resize(size_type _Newsize, const _Ty& _Val)
; 1226 : 		{	// determine new length, padding with _Val elements as needed
; 1227 : 		if (this->_Mysize < _Newsize)
; 1228 : 			_Insert_n(_Unchecked_end(), _Newsize - this->_Mysize, _Val);
; 1229 : 		else
; 1230 : 			while (_Newsize < this->_Mysize)
; 1231 : 				pop_back();
; 1232 : 		}
; 1233 : 
; 1234 : 	size_type size() const _NOEXCEPT
; 1235 : 		{	// return length of sequence
; 1236 : 		return (this->_Mysize);
; 1237 : 		}
; 1238 : 
; 1239 : 	size_type max_size() const _NOEXCEPT
; 1240 : 		{	// return maximum possible length of sequence
; 1241 : 		return (this->_Getal().max_size());
; 1242 : 		}
; 1243 : 
; 1244 : 	bool empty() const _NOEXCEPT
; 1245 : 		{	// test if sequence is empty
; 1246 : 		return (this->_Mysize == 0);
; 1247 : 		}
; 1248 : 
; 1249 : 	allocator_type get_allocator() const _NOEXCEPT
; 1250 : 		{	// return allocator object for values
; 1251 : 		return (this->_Getal());
; 1252 : 		}
; 1253 : 
; 1254 : 	reference front()
; 1255 : 		{	// return first element of mutable sequence
; 1256 : 		return (*begin());
; 1257 : 		}
; 1258 : 
; 1259 : 	const_reference front() const
; 1260 : 		{	// return first element of nonmutable sequence
; 1261 : 		return (*begin());
; 1262 : 		}
; 1263 : 
; 1264 : 	reference back()
; 1265 : 		{	// return last element of mutable sequence
; 1266 : 		return (*(--end()));
; 1267 : 		}
; 1268 : 
; 1269 : 	const_reference back() const
; 1270 : 		{	// return last element of nonmutable sequence
; 1271 : 		return (*(--end()));
; 1272 : 		}
; 1273 : 
; 1274 : 	void push_front(const _Ty& _Val)
; 1275 : 		{	// insert element at beginning
; 1276 : 		_Insert(_Unchecked_begin(), _Val);
; 1277 : 		}
; 1278 : 
; 1279 : 	void pop_front()
; 1280 : 		{	// erase element at beginning
; 1281 : 		erase(begin());
; 1282 : 		}
; 1283 : 
; 1284 : 	void push_back(const _Ty& _Val)
; 1285 : 		{	// insert element at end
; 1286 : 		_Insert(_Unchecked_end(), _Val);
; 1287 : 		}
; 1288 : 
; 1289 : 	void pop_back()
; 1290 : 		{	// erase element at end
; 1291 : 		erase(--end());
; 1292 : 		}
; 1293 : 
; 1294 : 	template<class _Iter>
; 1295 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1296 : 			void>::type
; 1297 : 		assign(_Iter _First, _Iter _Last)
; 1298 : 		{	// assign [_First, _Last), input iterators
; 1299 : 		iterator _Old = begin();
; 1300 : 		_TRY_BEGIN
; 1301 : 		for (; _First != _Last && _Old != end(); ++_First, ++_Old)
; 1302 : 			_Reusenode(_Old, *_First);
; 1303 : 		for (; _First != _Last; ++_First)
; 1304 : 			_Insert(_Unchecked_end(), *_First);
; 1305 : 		_CATCH_ALL
; 1306 : 		clear();
; 1307 : 		_RERAISE;
; 1308 : 		_CATCH_END
; 1309 : 		erase(_Old, end());
; 1310 : 		}
; 1311 : 
; 1312 : 	template<class _TArg>
; 1313 : 		void _Reusenode(iterator _Where, _TArg&& _Arg)
; 1314 : 		{	// destroy the element at _Where and reconstruct from _Arg
; 1315 : 		_TRY_BEGIN
; 1316 : 		this->_Getal().destroy(
; 1317 : 			_STD addressof(this->_Myval(_Where._Ptr)));
; 1318 : 		this->_Getal().construct(
; 1319 : 			_STD addressof(this->_Myval(_Where._Ptr)),
; 1320 : 			_STD forward<_TArg>(_Arg));
; 1321 : 		_CATCH_ALL
; 1322 : 		_Unlinknode(_Where);
; 1323 : 		this->_Getal().destroy(
; 1324 : 			_STD addressof(this->_Nextnode(_Where._Ptr)));
; 1325 : 		this->_Getal().destroy(
; 1326 : 			_STD addressof(this->_Prevnode(_Where._Ptr)));
; 1327 : 		this->_Getal().deallocate(_Where._Ptr, 1);
; 1328 : 		_RERAISE;
; 1329 : 		_CATCH_END
; 1330 : 		}
; 1331 : 
; 1332 : 	void assign(size_type _Count, const _Ty& _Val)
; 1333 : 		{	// assign _Count * _Val
; 1334 : 		clear();
; 1335 : 		_Insert_n(_Unchecked_begin(), _Count, _Val);
; 1336 : 		}
; 1337 : 
; 1338 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1339 : 		{	// insert _Val at _Where
; 1340 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1341 : 		if (_Where._Getcont() != this)
; 1342 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1343 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1344 : 
; 1345 : 		_Insert(_Where._Unchecked(), _Val);
; 1346 : 		return (_Make_iter(--_Where));
; 1347 : 		}
; 1348 : 
; 1349 : 	iterator insert(const_iterator _Where, size_type _Count, const _Ty& _Val)
; 1350 : 		{	// insert _Count * _Val at _Where
; 1351 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1352 : 		if (_Where._Getcont() != this)
; 1353 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1354 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1355 : 
; 1356 : 		iterator _Prev = _Make_iter(_Where);
; 1357 : 		if (_Prev == begin())
; 1358 : 			{	// insert sequence at beginning
; 1359 : 			_Insert_n(_Where._Unchecked(), _Count, _Val);
; 1360 : 			return (begin());
; 1361 : 			}
; 1362 : 		else
; 1363 : 			{	// insert sequence not at beginning
; 1364 : 			--_Prev;
; 1365 : 			_Insert_n(_Where._Unchecked(), _Count, _Val);
; 1366 : 			return (++_Prev);
; 1367 : 			}
; 1368 : 		}
; 1369 : 
; 1370 : 	template<class _Iter>
; 1371 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1372 : 			iterator>::type
; 1373 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1374 : 		{	// insert [_First, _Last) at _Where
; 1375 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1376 : 		if (_Where._Getcont() != this)
; 1377 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1378 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1379 : 
; 1380 : 		iterator _Prev = _Make_iter(_Where);
; 1381 : 		if (_Prev == begin())
; 1382 : 			{	// insert sequence at beginning
; 1383 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1384 : 				_Iter_cat(_First));
; 1385 : 			return (begin());
; 1386 : 			}
; 1387 : 		else
; 1388 : 			{	// insert sequence not at beginning
; 1389 : 			--_Prev;
; 1390 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1391 : 				_Iter_cat(_First));
; 1392 : 			return (++_Prev);
; 1393 : 			}
; 1394 : 		}
; 1395 : 
; 1396 : 	template<class _Iter>
; 1397 : 		void _Insert_range(_Unchecked_const_iterator _Where,
; 1398 : 			_Iter _First, _Iter _Last, input_iterator_tag)
; 1399 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1400 : 		size_type _Num = 0;
; 1401 : 
; 1402 : 		_TRY_BEGIN
; 1403 : 		for (; _First != _Last; ++_First, ++_Num)
; 1404 : 			_Insert(_Where, *_First);
; 1405 : 		_CATCH_ALL
; 1406 : 		for (; 0 < _Num; --_Num)
; 1407 : 			{	// undo inserts
; 1408 : 			_Unchecked_const_iterator _Before = _Where;
; 1409 : 			_Unchecked_erase(--_Before);
; 1410 : 			}
; 1411 : 		_RERAISE;
; 1412 : 		_CATCH_END
; 1413 : 		}
; 1414 : 
; 1415 : 	template<class _Iter>
; 1416 : 		void _Insert_range(_Unchecked_const_iterator _Where,
; 1417 : 			_Iter _First, _Iter _Last, forward_iterator_tag)
; 1418 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1419 : 		_DEBUG_RANGE(_First, _Last);
; 1420 : 		_Iter _Next = _First;
; 1421 : 
; 1422 : 		_TRY_BEGIN
; 1423 : 		for (; _First != _Last; ++_First)
; 1424 : 			_Insert(_Where, *_First);
; 1425 : 		_CATCH_ALL
; 1426 : 		for (; _Next != _First; ++_Next)
; 1427 : 			{	// undo inserts
; 1428 : 			_Unchecked_const_iterator _Before = _Where;
; 1429 : 			_Unchecked_erase(--_Before);
; 1430 : 			}
; 1431 : 		_RERAISE;
; 1432 : 		_CATCH_END
; 1433 : 		}
; 1434 : 
; 1435 : 	_Nodeptr _Unlinknode(const_iterator _Where)
; 1436 : 		{	// unlink node at _Where from the list
; 1437 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1438 : 		if (_Where._Getcont() != this || _Where._Ptr == this->_Myhead)
; 1439 : 			_DEBUG_ERROR("list erase iterator outside range");
; 1440 : 		_Nodeptr _Pnode = (_Where)._Mynode();
; 1441 : 		_Orphan_ptr(*this, _Pnode);
; 1442 : 
; 1443 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1444 : 		_Nodeptr _Pnode = (_Where)._Mynode();
; 1445 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1446 : 
; 1447 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1448 : 			this->_Nextnode(_Pnode);
; 1449 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1450 : 			this->_Prevnode(_Pnode);
; 1451 : 
; 1452 : 		--this->_Mysize;
; 1453 : 		return (_Pnode);
; 1454 : 		}
; 1455 : 
; 1456 : 	iterator erase(const_iterator _Where)
; 1457 : 		{	// erase element at _Where
; 1458 : 		_Nodeptr _Pnode = _Unlinknode(_Where++);
; 1459 : 		this->_Freenode(_Pnode);
; 1460 : 		return (_Make_iter(_Where));
; 1461 : 		}
; 1462 : 
; 1463 : 	void _Unchecked_erase(_Unchecked_const_iterator _Where)
; 1464 : 		{	// erase element at _Where
; 1465 : 		_Nodeptr _Pnode = _Where._Mynode();
; 1466 : 
; 1467 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1468 : 			this->_Nextnode(_Pnode);
; 1469 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1470 : 			this->_Prevnode(_Pnode);
; 1471 : 		this->_Freenode(_Pnode);
; 1472 : 		--this->_Mysize;
; 1473 : 		}
; 1474 : 
; 1475 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1476 : 		{	// erase [_First, _Last)
; 1477 : 		if (_First == begin() && _Last == end())
; 1478 : 			{	// erase all and return fresh iterator
; 1479 : 			clear();
; 1480 : 			return (end());
; 1481 : 			}
; 1482 : 		else
; 1483 : 			{	// erase subrange
; 1484 : 			while (_First != _Last)
; 1485 : 				_First = erase(_First);
; 1486 : 			return (_Make_iter(_Last));
; 1487 : 			}
; 1488 : 		}
; 1489 : 
; 1490 : 	void clear() _NOEXCEPT
; 1491 : 		{	// erase all
; 1492 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1493 : 		this->_Orphan_ptr(*this, nullptr);
; 1494 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1495 : 
; 1496 : 		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead);

  00052	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1497 : 		this->_Nextnode(this->_Myhead) = this->_Myhead;

  00054	89 09		 mov	 DWORD PTR [ecx], ecx

; 534  : 		}
; 535  : 
; 536  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 537  : 		{	// return reference to predecessor pointer in node
; 538  : 		return ((_Nodepref)_Pnode->_Prev);

  00056	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]

; 1498 : 		this->_Prevnode(this->_Myhead) = this->_Myhead;

  00059	89 49 04	 mov	 DWORD PTR [ecx+4], ecx

; 1499 : 		this->_Mysize = 0;

  0005c	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0

; 1501 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead; _Pnode = _Pnext)

  00063	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  00066	74 12		 je	 SHORT $LN10@CServerSta
$LL12@CServerSta:

; 1502 : 			{	// delete an element
; 1503 : 			_Pnext = this->_Nextnode(_Pnode);

  00068	8b 30		 mov	 esi, DWORD PTR [eax]
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00070	83 c4 04	 add	 esp, 4
; File a:\vs\vc\include\list

; 1501 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead; _Pnode = _Pnext)

  00073	8b c6		 mov	 eax, esi
  00075	3b 77 08	 cmp	 esi, DWORD PTR [edi+8]
  00078	75 ee		 jne	 SHORT $LL12@CServerSta
$LN10@CServerSta:
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  0007a	ff 77 08	 push	 DWORD PTR [edi+8]
  0007d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File a:\from c\desktop\serwer\source\source client\client\eterbase\singleton.h

; 19   : 	{ 

  00082	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CSingleton@VCServerStateChecker@@@@6B@
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00088	83 c4 04	 add	 esp, 4
; File a:\from c\desktop\serwer\source\source client\client\eterbase\singleton.h

; 21   : 		ms_singleton = 0; 

  0008b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCServerStateChecker@@@@0PAVCServerStateChecker@@A, 0 ; CSingleton<CServerStateChecker>::ms_singleton
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp

; 26   : }

  00095	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00098	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009f	59		 pop	 ecx
  000a0	5f		 pop	 edi
  000a1	5e		 pop	 esi
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CServerStateChecker@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CSingleton@VCServerStateChecker@@@@UAE@XZ ; CSingleton<CServerStateChecker>::~CSingleton<CServerStateChecker>
__unwindfunclet$??1CServerStateChecker@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 08	 add	 ecx, 8
  0000e	e9 00 00 00 00	 jmp	 ??1?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE@XZ ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::~list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >
__unwindfunclet$??1CServerStateChecker@@UAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 10	 add	 ecx, 16			; 00000010H
  00019	e9 00 00 00 00	 jmp	 ??1CNetworkStream@@UAE@XZ ; CNetworkStream::~CNetworkStream
__ehhandler$??1CServerStateChecker@@UAE@XZ:
  0001e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00022	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00025	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00028	33 c8		 xor	 ecx, eax
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CServerStateChecker@@UAE@XZ
  00034	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CServerStateChecker@@UAE@XZ ENDP			; CServerStateChecker::~CServerStateChecker
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp
; File a:\from c\desktop\serwer\source\source client\client\eterbase\singleton.h
; File a:\vs\vc\include\list
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp
; File a:\vs\vc\include\list
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp
; File a:\vs\vc\include\list
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp
;	COMDAT ??0CServerStateChecker@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CServerStateChecker@@QAE@XZ PROC			; CServerStateChecker::CServerStateChecker, COMDAT
; _this$ = ecx

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CServerStateChecker@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
; File a:\from c\desktop\serwer\source\source client\client\eterbase\singleton.h

; 15   : 		ms_singleton = (T*) ((int) this + offset);

  0002a	89 3d 00 00 00
	00		 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCServerStateChecker@@@@0PAVCServerStateChecker@@A, edi ; CSingleton<CServerStateChecker>::ms_singleton
; File a:\vs\vc\include\list

; 767  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));

  00030	6a 00		 push	 0
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp

; 18   : {

  00032	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CServerStateChecker@@6B@
; File a:\vs\vc\include\list

; 767  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));

  00038	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  0003b	6a 00		 push	 0
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp

; 18   : {

  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File a:\vs\vc\include\list

; 527  : 		this->_Myhead = 0;

  00044	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 528  : 		this->_Mysize = 0;

  0004b	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0

; 767  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));

  00052	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@PAU32@0@Z ; std::_List_alloc<0,std::_List_base_types<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> > >::_Buynode0

; 529  : 		}
; 530  : 
; 531  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 532  : 		{	// return reference to successor pointer in node
; 533  : 		return ((_Nodepref)_Pnode->_Next);
; 534  : 		}
; 535  : 
; 536  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 537  : 		{	// return reference to predecessor pointer in node
; 538  : 		return ((_Nodepref)_Pnode->_Prev);
; 539  : 		}
; 540  : 
; 541  : 	static reference _Myval(_Nodeptr _Pnode)
; 542  : 		{	// return reference to value in node
; 543  : 		return ((reference)_Pnode->_Myval);
; 544  : 		}
; 545  : 
; 546  : 	_Nodeptr _Myhead;	// pointer to head node
; 547  : 	size_type _Mysize;	// number of elements
; 548  : 	};
; 549  : 
; 550  : 		// TEMPLATE CLASS _List_alloc
; 551  : template<bool _Al_has_storage,
; 552  : 	class _Alloc_types>
; 553  : 	class _List_alloc
; 554  : 		: public _List_val<typename _Alloc_types::_Val_types>
; 555  : 	{	// base class for list to hold allocator with storage
; 556  : public:
; 557  : 	typename _Alloc_types::_Alnod_type _Alnod;	// allocator object
; 558  : 
; 559  : 	typedef _List_alloc<_Al_has_storage, _Alloc_types> _Myt;
; 560  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 561  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 562  : 	typedef typename _Alloc_types::_Node _Node;
; 563  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 564  : 
; 565  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 566  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 567  : 		: _Alnod(_Al)
; 568  : 		{	// construct head node, allocator from _Al
; 569  : 		this->_Myhead = _Buyheadnode();
; 570  : 		}
; 571  : 
; 572  : 	~_List_alloc() _NOEXCEPT
; 573  : 		{	// destroy head node
; 574  : 		_Freeheadnode(this->_Myhead);
; 575  : 		}
; 576  : 
; 577  : 	void _Change_alloc(const _Alty& _Al)
; 578  : 		{	// replace old allocator
; 579  : 		this->_Alnod = _Al;
; 580  : 		}
; 581  : 
; 582  : 	void _Swap_alloc(_Myt& _Right)
; 583  : 		{	// swap allocators
; 584  : 		_Swap_adl(this->_Alnod, _Right._Alnod);
; 585  : 		}
; 586  : 
; 587  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 588  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 589  : 		: _Alnod(_Al)
; 590  : 		{	// construct head node, allocator from _Al
; 591  : 		this->_Myhead = _Buyheadnode();
; 592  : 		_TRY_BEGIN
; 593  : 		_Alloc_proxy();
; 594  : 		_CATCH_ALL
; 595  : 		_Freeheadnode(this->_Myhead);
; 596  : 		_RERAISE;
; 597  : 		_CATCH_END
; 598  : 		}
; 599  : 
; 600  : 	~_List_alloc() _NOEXCEPT
; 601  : 		{	// destroy proxy
; 602  : 		_Freeheadnode(this->_Myhead);
; 603  : 		_Free_proxy();
; 604  : 		}
; 605  : 
; 606  : 	void _Change_alloc(const _Alty& _Al)
; 607  : 		{	// replace old allocator
; 608  : 		_Free_proxy();
; 609  : 		this->_Alnod = _Al;
; 610  : 		_Alloc_proxy();
; 611  : 		}
; 612  : 
; 613  : 	void _Swap_alloc(_Myt& _Right)
; 614  : 		{	// swap allocators
; 615  : 		_Swap_adl(this->_Alnod, _Right._Alnod);
; 616  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 617  : 		}
; 618  : 
; 619  : 	void _Alloc_proxy()
; 620  : 		{	// construct proxy from _Alnod
; 621  : 		typename _Alty::template rebind<_Container_proxy>::other
; 622  : 			_Alproxy(this->_Alnod);
; 623  : 		this->_Myproxy = _Alproxy.allocate(1);
; 624  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 625  : 		this->_Myproxy->_Mycont = this;
; 626  : 		}
; 627  : 
; 628  : 	void _Free_proxy()
; 629  : 		{	// destroy proxy
; 630  : 		typename _Alty::template rebind<_Container_proxy>::other
; 631  : 			_Alproxy(this->_Alnod);
; 632  : 		this->_Orphan_all();
; 633  : 		_Alproxy.destroy(this->_Myproxy);
; 634  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 635  : 		this->_Myproxy = 0;
; 636  : 		}
; 637  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 638  : 
; 639  : 	_Nodeptr _Buyheadnode()
; 640  : 		{	// get head node using current allocator
; 641  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));
; 642  : 		}
; 643  : 
; 644  : 	void _Freeheadnode(_Nodeptr _Pnode)
; 645  : 		{	// free head node using current allocator
; 646  : 		this->_Alnod.destroy(
; 647  : 			_STD addressof(this->_Nextnode(_Pnode)));
; 648  : 		this->_Alnod.destroy(
; 649  : 			_STD addressof(this->_Prevnode(_Pnode)));
; 650  : 		this->_Alnod.deallocate(_Pnode, 1);
; 651  : 		}
; 652  : 
; 653  : 	_Nodeptr _Buynode0(_Nodeptr _Next,
; 654  : 		_Nodeptr _Prev)
; 655  : 		{	// allocate a node and set links
; 656  : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);
; 657  : 
; 658  : 		if (_Next == _Nodeptr())
; 659  : 			{	// point at self
; 660  : 			_Next = _Pnode;
; 661  : 			_Prev = _Pnode;
; 662  : 			}
; 663  : 		_TRY_BEGIN
; 664  : 		this->_Alnod.construct(
; 665  : 			_STD addressof(this->_Nextnode(_Pnode)), _Next);
; 666  : 		this->_Alnod.construct(
; 667  : 			_STD addressof(this->_Prevnode(_Pnode)), _Prev);
; 668  : 		_CATCH_ALL
; 669  : 		this->_Alnod.deallocate(_Pnode, 1);
; 670  : 		_RERAISE;
; 671  : 		_CATCH_END
; 672  : 
; 673  : 		return (_Pnode);
; 674  : 		}
; 675  : 
; 676  : 	_Alty& _Getal()
; 677  : 		{	// get reference to allocator
; 678  : 		return (this->_Alnod);
; 679  : 		}
; 680  : 
; 681  : 	const _Alty& _Getal() const
; 682  : 		{	// get reference to allocator
; 683  : 		return (this->_Alnod);
; 684  : 		}
; 685  : 	};
; 686  : 
; 687  : 		// TEMPLATE CLASS _List_alloc
; 688  : template<class _Alloc_types>
; 689  : 	class _List_alloc<false, _Alloc_types>
; 690  : 		: public _List_val<typename _Alloc_types::_Val_types>
; 691  : 	{	// base class for list to hold allocator with no storage
; 692  : public:
; 693  : 	typedef _List_alloc<false, _Alloc_types> _Myt;
; 694  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 695  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 696  : 	typedef typename _Alloc_types::_Node _Node;
; 697  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 698  : 
; 699  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 700  : 	_List_alloc(const _Alloc& = _Alloc())
; 701  : 		{	// construct head node, allocator from _Al
; 702  : 		this->_Myhead = _Buyheadnode();

  00057	89 47 08	 mov	 DWORD PTR [edi+8], eax
; File a:\from c\desktop\serwer\source\source client\client\userinterface\serverstatechecker.cpp

; 18   : {

  0005a	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  0005d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00061	e8 00 00 00 00	 call	 ??0CNetworkStream@@QAE@XZ ; CNetworkStream::CNetworkStream

; 19   : 	Initialize();

  00066	8b cf		 mov	 ecx, edi
  00068	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0006c	e8 00 00 00 00	 call	 ?Initialize@CServerStateChecker@@QAEXXZ ; CServerStateChecker::Initialize

; 20   : }

  00071	8b c7		 mov	 eax, edi
  00073	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00076	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007d	59		 pop	 ecx
  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CServerStateChecker@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CSingleton@VCServerStateChecker@@@@UAE@XZ ; CSingleton<CServerStateChecker>::~CSingleton<CServerStateChecker>
__unwindfunclet$??0CServerStateChecker@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 08	 add	 ecx, 8
  0000e	e9 00 00 00 00	 jmp	 ??1?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE@XZ ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::~list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >
__unwindfunclet$??0CServerStateChecker@@QAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 10	 add	 ecx, 16			; 00000010H
  00019	e9 00 00 00 00	 jmp	 ??1CNetworkStream@@UAE@XZ ; CNetworkStream::~CNetworkStream
__ehhandler$??0CServerStateChecker@@QAE@XZ:
  0001e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00022	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00025	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00028	33 c8		 xor	 ecx, eax
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CServerStateChecker@@QAE@XZ
  00034	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CServerStateChecker@@QAE@XZ ENDP			; CServerStateChecker::CServerStateChecker
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterbase\singleton.h
;	COMDAT ??_G?$CSingleton@VCServerStateChecker@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CSingleton@VCServerStateChecker@@@@UAEPAXI@Z PROC	; CSingleton<CServerStateChecker>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 19   : 	{ 

  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCServerStateChecker@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0; 

  00010	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCServerStateChecker@@@@0PAVCServerStateChecker@@A, 0 ; CSingleton<CServerStateChecker>::ms_singleton
  0001a	74 09		 je	 SHORT $LN6@scalar
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$LN6@scalar:
  00025	8b c6		 mov	 eax, esi
  00027	5e		 pop	 esi
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
??_G?$CSingleton@VCServerStateChecker@@@@UAEPAXI@Z ENDP	; CSingleton<CServerStateChecker>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterbase\singleton.h
;	COMDAT ??1?$CSingleton@VCServerStateChecker@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CSingleton@VCServerStateChecker@@@@UAE@XZ PROC	; CSingleton<CServerStateChecker>::~CSingleton<CServerStateChecker>, COMDAT
; _this$ = ecx

; 19   : 	{ 

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCServerStateChecker@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0; 

  00006	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCServerStateChecker@@@@0PAVCServerStateChecker@@A, 0 ; CSingleton<CServerStateChecker>::ms_singleton

; 22   : 	}

  00010	c3		 ret	 0
??1?$CSingleton@VCServerStateChecker@@@@UAE@XZ ENDP	; CSingleton<CServerStateChecker>::~CSingleton<CServerStateChecker>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterbase\singleton.h
;	COMDAT ??0?$CSingleton@VCServerStateChecker@@@@QAE@XZ
_TEXT	SEGMENT
??0?$CSingleton@VCServerStateChecker@@@@QAE@XZ PROC	; CSingleton<CServerStateChecker>::CSingleton<CServerStateChecker>, COMDAT
; _this$ = ecx

; 11   : 	CSingleton()

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCServerStateChecker@@@@6B@

; 12   : 	{ 
; 13   : 		assert(!ms_singleton);
; 14   : 		int offset = (int) (T*) 1 - (int) (CSingleton <T>*) (T*) 1; 
; 15   : 		ms_singleton = (T*) ((int) this + offset);
; 16   : 	} 

  00006	8b c1		 mov	 eax, ecx
  00008	89 0d 00 00 00
	00		 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCServerStateChecker@@@@0PAVCServerStateChecker@@A, ecx ; CSingleton<CServerStateChecker>::ms_singleton
  0000e	c3		 ret	 0
??0?$CSingleton@VCServerStateChecker@@@@QAE@XZ ENDP	; CSingleton<CServerStateChecker>::CSingleton<CServerStateChecker>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 55   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 65   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 60   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 61   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	4e		 dec	 esi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	57		 push	 edi
  0000f	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b cf		 mov	 ecx, edi
  00014	ff d3		 call	 ebx
  00016	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  00019	4e		 dec	 esi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5f		 pop	 edi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
