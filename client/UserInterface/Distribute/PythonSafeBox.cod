; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	A:\From C\Desktop\Serwer\Source\Source Client\client\UserInterface\PythonSafeBox.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
PUBLIC	?initsafebox@@YAXXZ				; initsafebox
PUBLIC	??0?$CSingleton@VCPythonSafeBox@@@@QAE@XZ	; CSingleton<CPythonSafeBox>::CSingleton<CPythonSafeBox>
PUBLIC	??1?$CSingleton@VCPythonSafeBox@@@@UAE@XZ	; CSingleton<CPythonSafeBox>::~CSingleton<CPythonSafeBox>
PUBLIC	?Instance@?$CSingleton@VCPythonSafeBox@@@@SAAAVCPythonSafeBox@@XZ ; CSingleton<CPythonSafeBox>::Instance
PUBLIC	??_G?$CSingleton@VCPythonSafeBox@@@@UAEPAXI@Z	; CSingleton<CPythonSafeBox>::`scalar deleting destructor'
PUBLIC	??0CPythonSafeBox@@QAE@XZ			; CPythonSafeBox::CPythonSafeBox
PUBLIC	??1CPythonSafeBox@@UAE@XZ			; CPythonSafeBox::~CPythonSafeBox
PUBLIC	?OpenSafeBox@CPythonSafeBox@@QAEXH@Z		; CPythonSafeBox::OpenSafeBox
PUBLIC	?SetItemData@CPythonSafeBox@@QAEXKABUpacket_item@@@Z ; CPythonSafeBox::SetItemData
PUBLIC	?DelItemData@CPythonSafeBox@@QAEXK@Z		; CPythonSafeBox::DelItemData
PUBLIC	?SetMoney@CPythonSafeBox@@QAEXK@Z		; CPythonSafeBox::SetMoney
PUBLIC	?GetMoney@CPythonSafeBox@@QAEKXZ		; CPythonSafeBox::GetMoney
PUBLIC	?GetSlotItemID@CPythonSafeBox@@QAEHKPAK@Z	; CPythonSafeBox::GetSlotItemID
PUBLIC	?GetCurrentSafeBoxSize@CPythonSafeBox@@QAEHXZ	; CPythonSafeBox::GetCurrentSafeBoxSize
PUBLIC	?GetItemDataPtr@CPythonSafeBox@@QAEHKPAPAUpacket_item@@@Z ; CPythonSafeBox::GetItemDataPtr
PUBLIC	?OpenMall@CPythonSafeBox@@QAEXH@Z		; CPythonSafeBox::OpenMall
PUBLIC	?SetMallItemData@CPythonSafeBox@@QAEXKABUpacket_item@@@Z ; CPythonSafeBox::SetMallItemData
PUBLIC	?DelMallItemData@CPythonSafeBox@@QAEXK@Z	; CPythonSafeBox::DelMallItemData
PUBLIC	?GetMallItemDataPtr@CPythonSafeBox@@QAEHKPAPAUpacket_item@@@Z ; CPythonSafeBox::GetMallItemDataPtr
PUBLIC	?GetSlotMallItemID@CPythonSafeBox@@QAEHKPAK@Z	; CPythonSafeBox::GetSlotMallItemID
PUBLIC	?GetMallSize@CPythonSafeBox@@QAEKXZ		; CPythonSafeBox::GetMallSize
PUBLIC	??0?$allocator@Upacket_item@@@std@@QAE@XZ	; std::allocator<packet_item>::allocator<packet_item>
PUBLIC	?deallocate@?$allocator@Upacket_item@@@std@@QAEXPAUpacket_item@@I@Z ; std::allocator<packet_item>::deallocate
PUBLIC	?allocate@?$allocator@Upacket_item@@@std@@QAEPAUpacket_item@@I@Z ; std::allocator<packet_item>::allocate
PUBLIC	?construct@?$allocator@Upacket_item@@@std@@QAEXPAUpacket_item@@@Z ; std::allocator<packet_item>::construct
PUBLIC	?max_size@?$allocator@Upacket_item@@@std@@QBEIXZ ; std::allocator<packet_item>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@Upacket_item@@@std@@@std@@SAIABV?$allocator@Upacket_item@@@2@@Z ; std::allocator_traits<std::allocator<packet_item> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<packet_item> >::_Wrap_alloc<std::allocator<packet_item> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@QAEPAUpacket_item@@I@Z ; std::_Wrap_alloc<std::allocator<packet_item> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@QAEXPAUpacket_item@@I@Z ; std::_Wrap_alloc<std::allocator<packet_item> >::deallocate
PUBLIC	?construct@?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@QAEXPAUpacket_item@@@Z ; std::_Wrap_alloc<std::allocator<packet_item> >::construct
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<packet_item> >::max_size
PUBLIC	??0?$_Vector_val@U?$_Simple_types@Upacket_item@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<packet_item> >::_Vector_val<std::_Simple_types<packet_item> >
PUBLIC	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@@std@@QAE@ABV?$allocator@Upacket_item@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<packet_item,std::allocator<packet_item> > >::_Vector_alloc<0,std::_Vec_base_types<packet_item,std::allocator<packet_item> > >
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<packet_item,std::allocator<packet_item> > >::_Getal
PUBLIC	??0?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAE@XZ ; std::vector<packet_item,std::allocator<packet_item> >::vector<packet_item,std::allocator<packet_item> >
PUBLIC	??1?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAE@XZ ; std::vector<packet_item,std::allocator<packet_item> >::~vector<packet_item,std::allocator<packet_item> >
PUBLIC	?capacity@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QBEIXZ ; std::vector<packet_item,std::allocator<packet_item> >::capacity
PUBLIC	?_Unused_capacity@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QBEIXZ ; std::vector<packet_item,std::allocator<packet_item> >::_Unused_capacity
PUBLIC	?resize@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEXI@Z ; std::vector<packet_item,std::allocator<packet_item> >::resize
PUBLIC	?size@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QBEIXZ ; std::vector<packet_item,std::allocator<packet_item> >::size
PUBLIC	?max_size@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QBEIXZ ; std::vector<packet_item,std::allocator<packet_item> >::max_size
PUBLIC	??A?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEAAUpacket_item@@I@Z ; std::vector<packet_item,std::allocator<packet_item> >::operator[]
PUBLIC	?_Pop_back_n@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEXI@Z ; std::vector<packet_item,std::allocator<packet_item> >::_Pop_back_n
PUBLIC	?clear@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEXXZ ; std::vector<packet_item,std::allocator<packet_item> >::clear
PUBLIC	?_Destroy@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IAEXPAUpacket_item@@0@Z ; std::vector<packet_item,std::allocator<packet_item> >::_Destroy
PUBLIC	?_Grow_to@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IBEII@Z ; std::vector<packet_item,std::allocator<packet_item> >::_Grow_to
PUBLIC	?_Reallocate@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IAEXI@Z ; std::vector<packet_item,std::allocator<packet_item> >::_Reallocate
PUBLIC	?_Reserve@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IAEXI@Z ; std::vector<packet_item,std::allocator<packet_item> >::_Reserve
PUBLIC	?_Tidy@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IAEXXZ ; std::vector<packet_item,std::allocator<packet_item> >::_Tidy
PUBLIC	?_Xlen@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IBEXXZ ; std::vector<packet_item,std::allocator<packet_item> >::_Xlen
PUBLIC	??_GCPythonSafeBox@@UAEPAXI@Z			; CPythonSafeBox::`scalar deleting destructor'
PUBLIC	?safeboxGetCurrentSafeboxSize@@YAPAU_object@@PAU1@0@Z ; safeboxGetCurrentSafeboxSize
PUBLIC	?safeboxGetItemID@@YAPAU_object@@PAU1@0@Z	; safeboxGetItemID
PUBLIC	?safeboxGetItemCount@@YAPAU_object@@PAU1@0@Z	; safeboxGetItemCount
PUBLIC	?safeboxGetItemFlags@@YAPAU_object@@PAU1@0@Z	; safeboxGetItemFlags
PUBLIC	?safeboxGetItemMetinSocket@@YAPAU_object@@PAU1@0@Z ; safeboxGetItemMetinSocket
PUBLIC	?safeboxGetItemAttribute@@YAPAU_object@@PAU1@0@Z ; safeboxGetItemAttribute
PUBLIC	?safeboxGetMoney@@YAPAU_object@@PAU1@0@Z	; safeboxGetMoney
PUBLIC	?safeboxGetMallItemID@@YAPAU_object@@PAU1@0@Z	; safeboxGetMallItemID
PUBLIC	?safeboxGetMallItemCount@@YAPAU_object@@PAU1@0@Z ; safeboxGetMallItemCount
PUBLIC	?safeboxGetMallItemMetinSocket@@YAPAU_object@@PAU1@0@Z ; safeboxGetMallItemMetinSocket
PUBLIC	?safeboxGetMallItemAttribute@@YAPAU_object@@PAU1@0@Z ; safeboxGetMallItemAttribute
PUBLIC	?safeboxGetMallSize@@YAPAU_object@@PAU1@0@Z	; safeboxGetMallSize
PUBLIC	??$_Uninitialized_default_fill_n@PAUpacket_item@@IU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@@std@@YAXPAUpacket_item@@IAAU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@0@@Z ; std::_Uninitialized_default_fill_n<packet_item *,unsigned int,std::_Wrap_alloc<std::allocator<packet_item> > >
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@@std@@YAXPAUpacket_item@@0AAU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<packet_item> > >
PUBLIC	??$_Umove@PAUpacket_item@@@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IAEPAUpacket_item@@PAU2@00@Z ; std::vector<packet_item,std::allocator<packet_item> >::_Umove<packet_item *>
PUBLIC	??$_Allocate@Upacket_item@@@std@@YAPAUpacket_item@@IPAU1@@Z ; std::_Allocate<packet_item>
PUBLIC	??$_Val_type@PAUpacket_item@@@std@@YAPAUpacket_item@@PAU1@@Z ; std::_Val_type<packet_item *>
PUBLIC	??$_Ptr_cat@Upacket_item@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUpacket_item@@0@Z ; std::_Ptr_cat<packet_item,packet_item>
PUBLIC	??$_Uninit_def_fill_n@PAUpacket_item@@IV?$allocator@Upacket_item@@@std@@U1@@std@@YAXPAUpacket_item@@IAAU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_def_fill_n<packet_item *,unsigned int,std::allocator<packet_item>,packet_item>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@@std@@YAXPAUpacket_item@@0AAU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<packet_item> > >
PUBLIC	??$_Uninitialized_move@PAUpacket_item@@PAU1@U?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@@std@@YAPAUpacket_item@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@0@@Z ; std::_Uninitialized_move<packet_item *,packet_item *,std::_Wrap_alloc<std::allocator<packet_item> > >
PUBLIC	??$destroy@Upacket_item@@@?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@QAEXPAUpacket_item@@@Z ; std::_Wrap_alloc<std::allocator<packet_item> >::destroy<packet_item>
PUBLIC	??$_Unchecked@PAUpacket_item@@@std@@YAPAUpacket_item@@PAU1@@Z ; std::_Unchecked<packet_item *>
PUBLIC	??$_Uninit_move@PAUpacket_item@@PAU1@U?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@@std@@YAPAUpacket_item@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@0@@Z ; std::_Uninit_move<packet_item *,packet_item *,std::_Wrap_alloc<std::allocator<packet_item> > >
PUBLIC	??$_Rechecked@PAUpacket_item@@PAU1@@std@@YAAAPAUpacket_item@@AAPAU1@PAU1@@Z ; std::_Rechecked<packet_item *,packet_item *>
PUBLIC	??$construct@Upacket_item@@$$$V@?$allocator_traits@V?$allocator@Upacket_item@@@std@@@std@@SAXAAV?$allocator@Upacket_item@@@1@PAUpacket_item@@@Z ; std::allocator_traits<std::allocator<packet_item> >::construct<packet_item>
PUBLIC	??$destroy@Upacket_item@@@?$allocator_traits@V?$allocator@Upacket_item@@@std@@@std@@SAXAAV?$allocator@Upacket_item@@@1@PAUpacket_item@@@Z ; std::allocator_traits<std::allocator<packet_item> >::destroy<packet_item>
PUBLIC	??$_Uninit_move@PAUpacket_item@@PAU1@V?$allocator@Upacket_item@@@std@@U1@@std@@YAPAUpacket_item@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<packet_item *,packet_item *,std::allocator<packet_item>,packet_item>
PUBLIC	??$destroy@Upacket_item@@@?$allocator@Upacket_item@@@std@@QAEXPAUpacket_item@@@Z ; std::allocator<packet_item>::destroy<packet_item>
PUBLIC	??$construct@Upacket_item@@U1@@?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@QAEXPAUpacket_item@@$$QAU2@@Z ; std::_Wrap_alloc<std::allocator<packet_item> >::construct<packet_item,packet_item>
PUBLIC	??$forward@Upacket_item@@@std@@YA$$QAUpacket_item@@AAU1@@Z ; std::forward<packet_item>
PUBLIC	??$construct@Upacket_item@@U1@@?$allocator_traits@V?$allocator@Upacket_item@@@std@@@std@@SAXAAV?$allocator@Upacket_item@@@1@PAUpacket_item@@$$QAU3@@Z ; std::allocator_traits<std::allocator<packet_item> >::construct<packet_item,packet_item>
PUBLIC	??$construct@Upacket_item@@U1@@?$allocator@Upacket_item@@@std@@QAEXPAUpacket_item@@$$QAU2@@Z ; std::allocator<packet_item>::construct<packet_item,packet_item>
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?ms_singleton@?$CSingleton@VCPythonSafeBox@@@@0PAVCPythonSafeBox@@A ; CSingleton<CPythonSafeBox>::ms_singleton
PUBLIC	??_7?$CSingleton@VCPythonSafeBox@@@@6B@		; CSingleton<CPythonSafeBox>::`vftable'
PUBLIC	??_7CPythonSafeBox@@6B@				; CPythonSafeBox::`vftable'
PUBLIC	??_C@_0EB@NFGEBKNF@CPythonSafeBox?3?3SetItemData?$CIdwSl@ ; `string'
PUBLIC	??_C@_0EB@ILLOPJOM@CPythonSafeBox?3?3DelItemData?$CIdwSl@ ; `string'
PUBLIC	??_C@_0ED@OIOPNNLC@CPythonSafeBox?3?3GetSlotItemID?$CIdw@ ; `string'
PUBLIC	??_C@_0EB@BNCIHACH@CPythonSafeBox?3?3GetItemData?$CIdwSl@ ; `string'
PUBLIC	??_C@_0EF@BFNMLNFN@CPythonSafeBox?3?3SetMallItemData?$CI@ ; `string'
PUBLIC	??_C@_0EF@MEFPDFOJ@CPythonSafeBox?3?3DelMallItemData?$CI@ ; `string'
PUBLIC	??_C@_0EH@BNEMANLE@CPythonSafeBox?3?3GetMallSlotItemI@ ; `string'
PUBLIC	??_C@_01KBJDNOO@i?$AA@				; `string'
PUBLIC	??_C@_02PDIHAGKM@ii?$AA@			; `string'
PUBLIC	??_C@_0BG@JANGHGIO@GetCurrentSafeboxSize?$AA@	; `string'
PUBLIC	??_C@_09GMBNEEAB@GetItemID?$AA@			; `string'
PUBLIC	??_C@_0N@LEKALLIG@GetItemCount?$AA@		; `string'
PUBLIC	??_C@_0N@DMCGDNGF@GetItemFlags?$AA@		; `string'
PUBLIC	??_C@_0BD@JBOBKHIE@GetItemMetinSocket?$AA@	; `string'
PUBLIC	??_C@_0BB@GOKPPDHH@GetItemAttribute?$AA@	; `string'
PUBLIC	??_C@_08OAJFGNBC@GetMoney?$AA@			; `string'
PUBLIC	??_C@_0O@BCKKGAPN@GetMallItemID?$AA@		; `string'
PUBLIC	??_C@_0BB@KMJDPGMF@GetMallItemCount?$AA@	; `string'
PUBLIC	??_C@_0BH@EIOFOGDJ@GetMallItemMetinSocket?$AA@	; `string'
PUBLIC	??_C@_0BF@HIELOHFB@GetMallItemAttribute?$AA@	; `string'
PUBLIC	??_C@_0M@GGDNKKEE@GetMallSize?$AA@		; `string'
PUBLIC	??_C@_07CPPOKFKF@safebox?$AA@			; `string'
PUBLIC	??_C@_0BF@DMABFMEE@SAFEBOX_SLOT_X_COUNT?$AA@	; `string'
PUBLIC	??_C@_0BF@PAKLFMNK@SAFEBOX_SLOT_Y_COUNT?$AA@	; `string'
PUBLIC	??_C@_0BC@JOOAEPKL@SAFEBOX_PAGE_SIZE?$AA@	; `string'
PUBLIC	??_R4CPythonSafeBox@@6B@			; CPythonSafeBox::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCPythonSafeBox@@@8			; CPythonSafeBox `RTTI Type Descriptor'
PUBLIC	??_R3CPythonSafeBox@@8				; CPythonSafeBox::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CPythonSafeBox@@8				; CPythonSafeBox::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CPythonSafeBox@@8			; CPythonSafeBox::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$CSingleton@VCPythonSafeBox@@@@8	; CSingleton<CPythonSafeBox>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$CSingleton@VCPythonSafeBox@@@@@8	; CSingleton<CPythonSafeBox> `RTTI Type Descriptor'
PUBLIC	??_R3?$CSingleton@VCPythonSafeBox@@@@8		; CSingleton<CPythonSafeBox>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CSingleton@VCPythonSafeBox@@@@8		; CSingleton<CPythonSafeBox>::`RTTI Base Class Array'
PUBLIC	??_R4?$CSingleton@VCPythonSafeBox@@@@6B@	; CSingleton<CPythonSafeBox>::`RTTI Complete Object Locator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	__imp__Py_BuildValue:PROC
EXTRN	__imp__PyModule_AddIntConstant:PROC
EXTRN	__imp__Py_InitModule4:PROC
EXTRN	?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z:PROC ; PyTuple_GetInteger
EXTRN	?Py_BuildException@@YAPAU_object@@PBDZZ:PROC	; Py_BuildException
EXTRN	?Py_BadArgument@@YAPAU_object@@XZ:PROC		; Py_BadArgument
EXTRN	??_E?$CSingleton@VCPythonSafeBox@@@@UAEPAXI@Z:PROC ; CSingleton<CPythonSafeBox>::`vector deleting destructor'
EXTRN	??_ECPythonSafeBox@@UAEPAXI@Z:PROC		; CPythonSafeBox::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCPythonSafeBox@@@@0PAVCPythonSafeBox@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCPythonSafeBox@@@@0PAVCPythonSafeBox@@A DD 01H DUP (?) ; CSingleton<CPythonSafeBox>::ms_singleton
_BSS	ENDS
;	COMDAT ??_R4?$CSingleton@VCPythonSafeBox@@@@6B@
rdata$r	SEGMENT
??_R4?$CSingleton@VCPythonSafeBox@@@@6B@ DD 00H		; CSingleton<CPythonSafeBox>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CSingleton@VCPythonSafeBox@@@@@8
	DD	FLAT:??_R3?$CSingleton@VCPythonSafeBox@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CSingleton@VCPythonSafeBox@@@@8
rdata$r	SEGMENT
??_R2?$CSingleton@VCPythonSafeBox@@@@8 DD FLAT:??_R1A@?0A@EA@?$CSingleton@VCPythonSafeBox@@@@8 ; CSingleton<CPythonSafeBox>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CSingleton@VCPythonSafeBox@@@@8
rdata$r	SEGMENT
??_R3?$CSingleton@VCPythonSafeBox@@@@8 DD 00H		; CSingleton<CPythonSafeBox>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CSingleton@VCPythonSafeBox@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CSingleton@VCPythonSafeBox@@@@@8
data$r	SEGMENT
??_R0?AV?$CSingleton@VCPythonSafeBox@@@@@8 DD FLAT:??_7type_info@@6B@ ; CSingleton<CPythonSafeBox> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CSingleton@VCPythonSafeBox@@@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CSingleton@VCPythonSafeBox@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CSingleton@VCPythonSafeBox@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCPythonSafeBox@@@@@8 ; CSingleton<CPythonSafeBox>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCPythonSafeBox@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CPythonSafeBox@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CPythonSafeBox@@8 DD FLAT:??_R0?AVCPythonSafeBox@@@8 ; CPythonSafeBox::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CPythonSafeBox@@8
rdata$r	ENDS
;	COMDAT ??_R2CPythonSafeBox@@8
rdata$r	SEGMENT
??_R2CPythonSafeBox@@8 DD FLAT:??_R1A@?0A@EA@CPythonSafeBox@@8 ; CPythonSafeBox::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$CSingleton@VCPythonSafeBox@@@@8
rdata$r	ENDS
;	COMDAT ??_R3CPythonSafeBox@@8
rdata$r	SEGMENT
??_R3CPythonSafeBox@@8 DD 00H				; CPythonSafeBox::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CPythonSafeBox@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCPythonSafeBox@@@8
data$r	SEGMENT
??_R0?AVCPythonSafeBox@@@8 DD FLAT:??_7type_info@@6B@	; CPythonSafeBox `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPythonSafeBox@@', 00H
data$r	ENDS
;	COMDAT ??_R4CPythonSafeBox@@6B@
rdata$r	SEGMENT
??_R4CPythonSafeBox@@6B@ DD 00H				; CPythonSafeBox::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCPythonSafeBox@@@8
	DD	FLAT:??_R3CPythonSafeBox@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BC@JOOAEPKL@SAFEBOX_PAGE_SIZE?$AA@
CONST	SEGMENT
??_C@_0BC@JOOAEPKL@SAFEBOX_PAGE_SIZE?$AA@ DB 'SAFEBOX_PAGE_SIZE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PAKLFMNK@SAFEBOX_SLOT_Y_COUNT?$AA@
CONST	SEGMENT
??_C@_0BF@PAKLFMNK@SAFEBOX_SLOT_Y_COUNT?$AA@ DB 'SAFEBOX_SLOT_Y_COUNT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@DMABFMEE@SAFEBOX_SLOT_X_COUNT?$AA@
CONST	SEGMENT
??_C@_0BF@DMABFMEE@SAFEBOX_SLOT_X_COUNT?$AA@ DB 'SAFEBOX_SLOT_X_COUNT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07CPPOKFKF@safebox?$AA@
CONST	SEGMENT
??_C@_07CPPOKFKF@safebox?$AA@ DB 'safebox', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GGDNKKEE@GetMallSize?$AA@
CONST	SEGMENT
??_C@_0M@GGDNKKEE@GetMallSize?$AA@ DB 'GetMallSize', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HIELOHFB@GetMallItemAttribute?$AA@
CONST	SEGMENT
??_C@_0BF@HIELOHFB@GetMallItemAttribute?$AA@ DB 'GetMallItemAttribute', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EIOFOGDJ@GetMallItemMetinSocket?$AA@
CONST	SEGMENT
??_C@_0BH@EIOFOGDJ@GetMallItemMetinSocket?$AA@ DB 'GetMallItemMetinSocket'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KMJDPGMF@GetMallItemCount?$AA@
CONST	SEGMENT
??_C@_0BB@KMJDPGMF@GetMallItemCount?$AA@ DB 'GetMallItemCount', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BCKKGAPN@GetMallItemID?$AA@
CONST	SEGMENT
??_C@_0O@BCKKGAPN@GetMallItemID?$AA@ DB 'GetMallItemID', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08OAJFGNBC@GetMoney?$AA@
CONST	SEGMENT
??_C@_08OAJFGNBC@GetMoney?$AA@ DB 'GetMoney', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GOKPPDHH@GetItemAttribute?$AA@
CONST	SEGMENT
??_C@_0BB@GOKPPDHH@GetItemAttribute?$AA@ DB 'GetItemAttribute', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JBOBKHIE@GetItemMetinSocket?$AA@
CONST	SEGMENT
??_C@_0BD@JBOBKHIE@GetItemMetinSocket?$AA@ DB 'GetItemMetinSocket', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DMCGDNGF@GetItemFlags?$AA@
CONST	SEGMENT
??_C@_0N@DMCGDNGF@GetItemFlags?$AA@ DB 'GetItemFlags', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LEKALLIG@GetItemCount?$AA@
CONST	SEGMENT
??_C@_0N@LEKALLIG@GetItemCount?$AA@ DB 'GetItemCount', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GMBNEEAB@GetItemID?$AA@
CONST	SEGMENT
??_C@_09GMBNEEAB@GetItemID?$AA@ DB 'GetItemID', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JANGHGIO@GetCurrentSafeboxSize?$AA@
CONST	SEGMENT
??_C@_0BG@JANGHGIO@GetCurrentSafeboxSize?$AA@ DB 'GetCurrentSafeboxSize', 00H ; `string'
CONST	ENDS
;	COMDAT ?s_methods@?1??initsafebox@@YAXXZ@4PAUPyMethodDef@@A
_DATA	SEGMENT
?s_methods@?1??initsafebox@@YAXXZ@4PAUPyMethodDef@@A DD FLAT:??_C@_0BG@JANGHGIO@GetCurrentSafeboxSize?$AA@ ; `initsafebox'::`2'::s_methods
	DD	FLAT:?safeboxGetCurrentSafeboxSize@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_09GMBNEEAB@GetItemID?$AA@
	DD	FLAT:?safeboxGetItemID@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0N@LEKALLIG@GetItemCount?$AA@
	DD	FLAT:?safeboxGetItemCount@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0N@DMCGDNGF@GetItemFlags?$AA@
	DD	FLAT:?safeboxGetItemFlags@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BD@JBOBKHIE@GetItemMetinSocket?$AA@
	DD	FLAT:?safeboxGetItemMetinSocket@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BB@GOKPPDHH@GetItemAttribute?$AA@
	DD	FLAT:?safeboxGetItemAttribute@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_08OAJFGNBC@GetMoney?$AA@
	DD	FLAT:?safeboxGetMoney@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0O@BCKKGAPN@GetMallItemID?$AA@
	DD	FLAT:?safeboxGetMallItemID@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BB@KMJDPGMF@GetMallItemCount?$AA@
	DD	FLAT:?safeboxGetMallItemCount@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BH@EIOFOGDJ@GetMallItemMetinSocket?$AA@
	DD	FLAT:?safeboxGetMallItemMetinSocket@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BF@HIELOHFB@GetMallItemAttribute?$AA@
	DD	FLAT:?safeboxGetMallItemAttribute@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0M@GGDNKKEE@GetMallSize?$AA@
	DD	FLAT:?safeboxGetMallSize@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
_DATA	ENDS
;	COMDAT ??_C@_02PDIHAGKM@ii?$AA@
CONST	SEGMENT
??_C@_02PDIHAGKM@ii?$AA@ DB 'ii', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KBJDNOO@i?$AA@
CONST	SEGMENT
??_C@_01KBJDNOO@i?$AA@ DB 'i', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@BNEMANLE@CPythonSafeBox?3?3GetMallSlotItemI@
CONST	SEGMENT
??_C@_0EH@BNEMANLE@CPythonSafeBox?3?3GetMallSlotItemI@ DB 'CPythonSafeBox'
	DB	'::GetMallSlotItemID(dwSlotIndex=%d) - Strange slot index', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@MEFPDFOJ@CPythonSafeBox?3?3DelMallItemData?$CI@
CONST	SEGMENT
??_C@_0EF@MEFPDFOJ@CPythonSafeBox?3?3DelMallItemData?$CI@ DB 'CPythonSafe'
	DB	'Box::DelMallItemData(dwSlotIndex=%d) - Strange slot index', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@BFNMLNFN@CPythonSafeBox?3?3SetMallItemData?$CI@
CONST	SEGMENT
??_C@_0EF@BFNMLNFN@CPythonSafeBox?3?3SetMallItemData?$CI@ DB 'CPythonSafe'
	DB	'Box::SetMallItemData(dwSlotIndex=%d) - Strange slot index', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@BNCIHACH@CPythonSafeBox?3?3GetItemData?$CIdwSl@
CONST	SEGMENT
??_C@_0EB@BNCIHACH@CPythonSafeBox?3?3GetItemData?$CIdwSl@ DB 'CPythonSafe'
	DB	'Box::GetItemData(dwSlotIndex=%d) - Strange slot index', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@OIOPNNLC@CPythonSafeBox?3?3GetSlotItemID?$CIdw@
CONST	SEGMENT
??_C@_0ED@OIOPNNLC@CPythonSafeBox?3?3GetSlotItemID?$CIdw@ DB 'CPythonSafe'
	DB	'Box::GetSlotItemID(dwSlotIndex=%d) - Strange slot index', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@ILLOPJOM@CPythonSafeBox?3?3DelItemData?$CIdwSl@
CONST	SEGMENT
??_C@_0EB@ILLOPJOM@CPythonSafeBox?3?3DelItemData?$CIdwSl@ DB 'CPythonSafe'
	DB	'Box::DelItemData(dwSlotIndex=%d) - Strange slot index', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@NFGEBKNF@CPythonSafeBox?3?3SetItemData?$CIdwSl@
CONST	SEGMENT
??_C@_0EB@NFGEBKNF@CPythonSafeBox?3?3SetItemData?$CIdwSl@ DB 'CPythonSafe'
	DB	'Box::SetItemData(dwSlotIndex=%d) - Strange slot index', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CPythonSafeBox@@6B@
CONST	SEGMENT
??_7CPythonSafeBox@@6B@ DD FLAT:??_R4CPythonSafeBox@@6B@ ; CPythonSafeBox::`vftable'
	DD	FLAT:??_ECPythonSafeBox@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CSingleton@VCPythonSafeBox@@@@6B@
CONST	SEGMENT
??_7?$CSingleton@VCPythonSafeBox@@@@6B@ DD FLAT:??_R4?$CSingleton@VCPythonSafeBox@@@@6B@ ; CSingleton<CPythonSafeBox>::`vftable'
	DD	FLAT:??_E?$CSingleton@VCPythonSafeBox@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IAEXI@Z$2
__ehfuncinfo$?_Reallocate@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?resize@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?resize@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEXI@Z$0
__unwindtable$?resize@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?resize@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?resize@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?resize@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?resize@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?resize@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@Upacket_item@@U1@@?$allocator@Upacket_item@@@std@@QAEXPAUpacket_item@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@Upacket_item@@U1@@?$allocator@Upacket_item@@@std@@QAEXPAUpacket_item@@$$QAU2@@Z PROC ; std::allocator<packet_item>::construct<packet_item,packet_item>, COMDAT
; _this$ = ecx

; 598  : 		void construct(_Objty *_Ptr, _Types&&... _Args)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 599  : 		{	// construct _Objty(_Types...) at _Ptr
; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 2d		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 6f 01	 movdqu	 xmm0, XMMWORD PTR [ecx]
  00011	f3 0f 7f 02	 movdqu	 XMMWORD PTR [edx], xmm0
  00015	f3 0f 6f 41 10	 movdqu	 xmm0, XMMWORD PTR [ecx+16]
  0001a	f3 0f 7f 42 10	 movdqu	 XMMWORD PTR [edx+16], xmm0
  0001f	f3 0f 7e 41 20	 movq	 xmm0, QWORD PTR [ecx+32]
  00024	66 0f d6 42 20	 movq	 QWORD PTR [edx+32], xmm0
  00029	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
  0002c	89 42 28	 mov	 DWORD PTR [edx+40], eax
  0002f	66 8b 41 2c	 mov	 ax, WORD PTR [ecx+44]
  00033	66 89 42 2c	 mov	 WORD PTR [edx+44], ax
$LN3@construct:

; 601  : 		}

  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$construct@Upacket_item@@U1@@?$allocator@Upacket_item@@@std@@QAEXPAUpacket_item@@$$QAU2@@Z ENDP ; std::allocator<packet_item>::construct<packet_item,packet_item>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@Upacket_item@@U1@@?$allocator_traits@V?$allocator@Upacket_item@@@std@@@std@@SAXAAV?$allocator@Upacket_item@@@1@PAUpacket_item@@$$QAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@Upacket_item@@U1@@?$allocator_traits@V?$allocator@Upacket_item@@@std@@@std@@SAXAAV?$allocator@Upacket_item@@@1@PAUpacket_item@@$$QAU3@@Z PROC ; std::allocator_traits<std::allocator<packet_item> >::construct<packet_item,packet_item>, COMDAT

; 720  : 		static void construct(_Alloc& _Al, _Objty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 2d		 je	 SHORT $LN7@construct
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 6f 01	 movdqu	 xmm0, XMMWORD PTR [ecx]
  00011	f3 0f 7f 02	 movdqu	 XMMWORD PTR [edx], xmm0
  00015	f3 0f 6f 41 10	 movdqu	 xmm0, XMMWORD PTR [ecx+16]
  0001a	f3 0f 7f 42 10	 movdqu	 XMMWORD PTR [edx+16], xmm0
  0001f	f3 0f 7e 41 20	 movq	 xmm0, QWORD PTR [ecx+32]
  00024	66 0f d6 42 20	 movq	 QWORD PTR [edx+32], xmm0
  00029	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
  0002c	89 42 28	 mov	 DWORD PTR [edx+40], eax
  0002f	66 8b 41 2c	 mov	 ax, WORD PTR [ecx+44]
  00033	66 89 42 2c	 mov	 WORD PTR [edx+44], ax
$LN7@construct:

; 721  : 			_Types&&... _Args)
; 722  : 		{	// construct _Objty(_Types...) at _Ptr
; 723  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 724  : 		}

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$construct@Upacket_item@@U1@@?$allocator_traits@V?$allocator@Upacket_item@@@std@@@std@@SAXAAV?$allocator@Upacket_item@@@1@PAUpacket_item@@$$QAU3@@Z ENDP ; std::allocator_traits<std::allocator<packet_item> >::construct<packet_item,packet_item>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\type_traits
;	COMDAT ??$forward@Upacket_item@@@std@@YA$$QAUpacket_item@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@Upacket_item@@@std@@YA$$QAUpacket_item@@AAU1@@Z PROC ; std::forward<packet_item>, COMDAT

; 1504 : 	{	// forward an lvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@Upacket_item@@@std@@YA$$QAUpacket_item@@AAU1@@Z ENDP ; std::forward<packet_item>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@Upacket_item@@U1@@?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@QAEXPAUpacket_item@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@Upacket_item@@U1@@?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@QAEXPAUpacket_item@@$$QAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<packet_item> >::construct<packet_item,packet_item>, COMDAT
; _this$ = ecx

; 868  : 		void construct(_Ty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 2d		 je	 SHORT $LN11@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 6f 01	 movdqu	 xmm0, XMMWORD PTR [ecx]
  00011	f3 0f 7f 02	 movdqu	 XMMWORD PTR [edx], xmm0
  00015	f3 0f 6f 41 10	 movdqu	 xmm0, XMMWORD PTR [ecx+16]
  0001a	f3 0f 7f 42 10	 movdqu	 XMMWORD PTR [edx+16], xmm0
  0001f	f3 0f 7e 41 20	 movq	 xmm0, QWORD PTR [ecx+32]
  00024	66 0f d6 42 20	 movq	 QWORD PTR [edx+32], xmm0
  00029	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
  0002c	89 42 28	 mov	 DWORD PTR [edx+40], eax
  0002f	66 8b 41 2c	 mov	 ax, WORD PTR [ecx+44]
  00033	66 89 42 2c	 mov	 WORD PTR [edx+44], ax
$LN11@construct:

; 869  : 			_Types&&... _Args)
; 870  : 		{	// construct _Ty(_Types...) at _Ptr
; 871  : 		_Mytraits::construct(*this, _Ptr,
; 872  : 			_STD forward<_Types>(_Args)...);
; 873  : 		}

  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$construct@Upacket_item@@U1@@?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@QAEXPAUpacket_item@@$$QAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<packet_item> >::construct<packet_item,packet_item>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$destroy@Upacket_item@@@?$allocator@Upacket_item@@@std@@QAEXPAUpacket_item@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@Upacket_item@@@?$allocator@Upacket_item@@@std@@QAEXPAUpacket_item@@@Z PROC ; std::allocator<packet_item>::destroy<packet_item>, COMDAT
; _this$ = ecx

; 606  : 		{	// destroy object at _Ptr
; 607  : 		_Ptr->~_Uty();
; 608  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@Upacket_item@@@?$allocator@Upacket_item@@@std@@QAEXPAUpacket_item@@@Z ENDP ; std::allocator<packet_item>::destroy<packet_item>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAUpacket_item@@PAU1@V?$allocator@Upacket_item@@@std@@U1@@std@@YAPAUpacket_item@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUpacket_item@@PAU1@V?$allocator@Upacket_item@@@std@@U1@@std@@YAPAUpacket_item@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<packet_item *,packet_item *,std::allocator<packet_item>,packet_item>, COMDAT

; 437  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 443  : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	57		 push	 edi
  00007	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000a	3b cf		 cmp	 ecx, edi
  0000c	74 42		 je	 SHORT $LN34@Uninit_mov
  0000e	56		 push	 esi
  0000f	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
$LL6@Uninit_mov:
; File a:\vs\vc\include\xmemory0

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00012	85 f6		 test	 esi, esi
  00014	74 2a		 je	 SHORT $LN24@Uninit_mov
  00016	f3 0f 6f 01	 movdqu	 xmm0, XMMWORD PTR [ecx]
  0001a	f3 0f 7f 06	 movdqu	 XMMWORD PTR [esi], xmm0
  0001e	f3 0f 6f 41 10	 movdqu	 xmm0, XMMWORD PTR [ecx+16]
  00023	f3 0f 7f 46 10	 movdqu	 XMMWORD PTR [esi+16], xmm0
  00028	f3 0f 7e 41 20	 movq	 xmm0, QWORD PTR [ecx+32]
  0002d	66 0f d6 46 20	 movq	 QWORD PTR [esi+32], xmm0
  00032	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
  00035	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00038	66 8b 51 2c	 mov	 dx, WORD PTR [ecx+44]
  0003c	66 89 56 2c	 mov	 WORD PTR [esi+44], dx
$LN24@Uninit_mov:
; File a:\vs\vc\include\xmemory

; 443  : 	for (; _First != _Last; ++_Dest, ++_First)

  00040	83 c1 2e	 add	 ecx, 46			; 0000002eH
  00043	83 c6 2e	 add	 esi, 46			; 0000002eH
  00046	3b cf		 cmp	 ecx, edi
  00048	75 c8		 jne	 SHORT $LL6@Uninit_mov

; 444  : 		_Al.construct(_Dest, (_Valty&&)*_First);
; 445  : 	_CATCH_ALL
; 446  : 	for (; _Next != _Dest; ++_Next)
; 447  : 		_Al.destroy(_Next);
; 448  : 	_RERAISE;
; 449  : 	_CATCH_END
; 450  : 	return (_Dest);

  0004a	8b c6		 mov	 eax, esi
  0004c	5e		 pop	 esi
  0004d	5f		 pop	 edi

; 451  : 	}

  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
$LN34@Uninit_mov:

; 444  : 		_Al.construct(_Dest, (_Valty&&)*_First);
; 445  : 	_CATCH_ALL
; 446  : 	for (; _Next != _Dest; ++_Next)
; 447  : 		_Al.destroy(_Next);
; 448  : 	_RERAISE;
; 449  : 	_CATCH_END
; 450  : 	return (_Dest);

  00050	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00053	5f		 pop	 edi

; 451  : 	}

  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
??$_Uninit_move@PAUpacket_item@@PAU1@V?$allocator@Upacket_item@@@std@@U1@@std@@YAPAUpacket_item@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<packet_item *,packet_item *,std::allocator<packet_item>,packet_item>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$destroy@Upacket_item@@@?$allocator_traits@V?$allocator@Upacket_item@@@std@@@std@@SAXAAV?$allocator@Upacket_item@@@1@PAUpacket_item@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@Upacket_item@@@?$allocator_traits@V?$allocator@Upacket_item@@@std@@@std@@SAXAAV?$allocator@Upacket_item@@@1@PAUpacket_item@@@Z PROC ; std::allocator_traits<std::allocator<packet_item> >::destroy<packet_item>, COMDAT

; 729  : 		{	// destroy object at _Ptr
; 730  : 		_Al.destroy(_Ptr);
; 731  : 		}

  00000	c3		 ret	 0
??$destroy@Upacket_item@@@?$allocator_traits@V?$allocator@Upacket_item@@@std@@@std@@SAXAAV?$allocator@Upacket_item@@@1@PAUpacket_item@@@Z ENDP ; std::allocator_traits<std::allocator<packet_item> >::destroy<packet_item>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@Upacket_item@@$$$V@?$allocator_traits@V?$allocator@Upacket_item@@@std@@@std@@SAXAAV?$allocator@Upacket_item@@@1@PAUpacket_item@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$construct@Upacket_item@@$$$V@?$allocator_traits@V?$allocator@Upacket_item@@@std@@@std@@SAXAAV?$allocator@Upacket_item@@@1@PAUpacket_item@@@Z PROC ; std::allocator_traits<std::allocator<packet_item> >::construct<packet_item>, COMDAT

; 720  : 		static void construct(_Alloc& _Al, _Objty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 588  : 		::new ((void *)_Ptr) _Ty();

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN5@construct
  0000a	6a 2e		 push	 46			; 0000002eH
  0000c	6a 00		 push	 0
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 _memset
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@construct:

; 721  : 			_Types&&... _Args)
; 722  : 		{	// construct _Objty(_Types...) at _Ptr
; 723  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 724  : 		}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$construct@Upacket_item@@$$$V@?$allocator_traits@V?$allocator@Upacket_item@@@std@@@std@@SAXAAV?$allocator@Upacket_item@@@1@PAUpacket_item@@@Z ENDP ; std::allocator_traits<std::allocator<packet_item> >::construct<packet_item>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??$_Rechecked@PAUpacket_item@@PAU1@@std@@YAAAPAUpacket_item@@AAPAU1@PAU1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAUpacket_item@@PAU1@@std@@YAAAPAUpacket_item@@AAPAU1@PAU1@@Z PROC ; std::_Rechecked<packet_item *,packet_item *>, COMDAT

; 288  : 	{	// reset checked from unchecked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 289  : 	_Dest = _Src;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 290  : 	return (_Dest);
; 291  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Rechecked@PAUpacket_item@@PAU1@@std@@YAAAPAUpacket_item@@AAPAU1@PAU1@@Z ENDP ; std::_Rechecked<packet_item *,packet_item *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAUpacket_item@@PAU1@U?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@@std@@YAPAUpacket_item@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAUpacket_item@@PAU1@U?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@@std@@YAPAUpacket_item@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@0@@Z PROC ; std::_Uninit_move<packet_item *,packet_item *,std::_Wrap_alloc<std::allocator<packet_item> > >, COMDAT

; 482  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 483  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 484  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$1[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUpacket_item@@PAU1@V?$allocator@Upacket_item@@@std@@U1@@std@@YAPAUpacket_item@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<packet_item *,packet_item *,std::allocator<packet_item>,packet_item>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 485  : 	}

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??$_Uninit_move@PAUpacket_item@@PAU1@U?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@@std@@YAPAUpacket_item@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@0@@Z ENDP ; std::_Uninit_move<packet_item *,packet_item *,std::_Wrap_alloc<std::allocator<packet_item> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??$_Unchecked@PAUpacket_item@@@std@@YAPAUpacket_item@@PAU1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAUpacket_item@@@std@@YAPAUpacket_item@@PAU1@@Z PROC ; std::_Unchecked<packet_item *>, COMDAT

; 280  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 281  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 282  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAUpacket_item@@@std@@YAPAUpacket_item@@PAU1@@Z ENDP ; std::_Unchecked<packet_item *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$destroy@Upacket_item@@@?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@QAEXPAUpacket_item@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@Upacket_item@@@?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@QAEXPAUpacket_item@@@Z PROC ; std::_Wrap_alloc<std::allocator<packet_item> >::destroy<packet_item>, COMDAT
; _this$ = ecx

; 878  : 		{	// destroy object at _Ptr
; 879  : 		_Mytraits::destroy(*this, _Ptr);
; 880  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@Upacket_item@@@?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@QAEXPAUpacket_item@@@Z ENDP ; std::_Wrap_alloc<std::allocator<packet_item> >::destroy<packet_item>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUpacket_item@@PAU1@U?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@@std@@YAPAUpacket_item@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUpacket_item@@PAU1@U?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@@std@@YAPAUpacket_item@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@0@@Z PROC ; std::_Uninitialized_move<packet_item *,packet_item *,std::_Wrap_alloc<std::allocator<packet_item> > >, COMDAT

; 492  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 484  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	6a 00		 push	 0
  00008	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000b	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000e	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUpacket_item@@PAU1@V?$allocator@Upacket_item@@@std@@U1@@std@@YAPAUpacket_item@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<packet_item *,packet_item *,std::allocator<packet_item>,packet_item>
  00019	83 c4 18	 add	 esp, 24			; 00000018H

; 493  : 	return (_Rechecked(_Dest,
; 494  : 		_Uninit_move(_Unchecked(_First), _Unchecked(_Last),
; 495  : 			_Unchecked(_Dest), _Al)));
; 496  : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Uninitialized_move@PAUpacket_item@@PAU1@U?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@@std@@YAPAUpacket_item@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<packet_item *,packet_item *,std::_Wrap_alloc<std::allocator<packet_item> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@@std@@YAXPAUpacket_item@@0AAU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@@std@@YAXPAUpacket_item@@0AAU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<packet_item> > >, COMDAT

; 81   : 	for (; _First != _Last; ++_First)
; 82   : 		_Al.destroy(_First);
; 83   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@@std@@YAXPAUpacket_item@@0AAU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<packet_item> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\xmemory
;	COMDAT ??$_Uninit_def_fill_n@PAUpacket_item@@IV?$allocator@Upacket_item@@@std@@U1@@std@@YAXPAUpacket_item@@IAAU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_def_fill_n@PAUpacket_item@@IV?$allocator@Upacket_item@@@std@@U1@@std@@YAXPAUpacket_item@@IAAU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_def_fill_n<packet_item *,unsigned int,std::allocator<packet_item>,packet_item>, COMDAT

; 645  : 	{	// copy _Count * _Valty() to raw _First, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 654  : 	for (; 0 < _Count; --_Count, ++_First)

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 1d		 je	 SHORT $LN4@Uninit_def
  0000b	56		 push	 esi
  0000c	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000f	90		 npad	 1
$LL6@Uninit_def:
; File a:\vs\vc\include\xmemory0

; 588  : 		::new ((void *)_Ptr) _Ty();

  00010	85 f6		 test	 esi, esi
  00012	74 0d		 je	 SHORT $LN5@Uninit_def
  00014	6a 2e		 push	 46			; 0000002eH
  00016	6a 00		 push	 0
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 _memset
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@Uninit_def:
; File a:\vs\vc\include\xmemory

; 654  : 	for (; 0 < _Count; --_Count, ++_First)

  00021	83 c6 2e	 add	 esi, 46			; 0000002eH
  00024	4f		 dec	 edi
  00025	75 e9		 jne	 SHORT $LL6@Uninit_def
  00027	5e		 pop	 esi
$LN4@Uninit_def:
  00028	5f		 pop	 edi

; 655  : 
; 656  : 		_Al.construct(_First);
; 657  : 
; 658  : 	_CATCH_ALL
; 659  : 	for (; _Next != _First; ++_Next)
; 660  : 		_Al.destroy(_Next);
; 661  : 	_RERAISE;
; 662  : 	_CATCH_END
; 663  : 	}

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
??$_Uninit_def_fill_n@PAUpacket_item@@IV?$allocator@Upacket_item@@@std@@U1@@std@@YAXPAUpacket_item@@IAAU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_def_fill_n<packet_item *,unsigned int,std::allocator<packet_item>,packet_item>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??$_Ptr_cat@Upacket_item@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUpacket_item@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@Upacket_item@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUpacket_item@@0@Z PROC ; std::_Ptr_cat<packet_item,packet_item>, COMDAT

; 444  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 445  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 446  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 447  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@Upacket_item@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUpacket_item@@0@Z ENDP ; std::_Ptr_cat<packet_item,packet_item>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??$_Val_type@PAUpacket_item@@@std@@YAPAUpacket_item@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUpacket_item@@@std@@YAPAUpacket_item@@PAU1@@Z PROC ; std::_Val_type<packet_item *>, COMDAT

; 646  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 647  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUpacket_item@@@std@@YAPAUpacket_item@@PAU1@@Z ENDP ; std::_Val_type<packet_item *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$_Allocate@Upacket_item@@@std@@YAPAUpacket_item@@IPAU1@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@Upacket_item@@@std@@YAPAUpacket_item@@IPAU1@@Z PROC ; std::_Allocate<packet_item>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 23   : 	void *_Ptr = 0;
; 24   : 
; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 1e		 je	 SHORT $LN2@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d 16 b2 90 05	 cmp	 eax, 93368854		; 0590b216H
  00011	77 12		 ja	 SHORT $LN1@Allocate
  00013	6b c0 2e	 imul	 eax, eax, 46
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	75 05		 jne	 SHORT $LN2@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00025	e9 00 00 00 00	 jmp	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

  0002a	8b c1		 mov	 eax, ecx

; 32   : 	}

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??$_Allocate@Upacket_item@@@std@@YAPAUpacket_item@@IPAU1@@Z ENDP ; std::_Allocate<packet_item>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\vector
;	COMDAT ??$_Umove@PAUpacket_item@@@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IAEPAUpacket_item@@PAU2@00@Z
_TEXT	SEGMENT
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUpacket_item@@@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IAEPAUpacket_item@@PAU2@00@Z PROC ; std::vector<packet_item,std::allocator<packet_item> >::_Umove<packet_item *>, COMDAT
; _this$ = ecx

; 1644 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File a:\vs\vc\include\xmemory

; 484  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00007	8d 45 ff	 lea	 eax, DWORD PTR __Alval$[ebp]
  0000a	6a 00		 push	 0
  0000c	50		 push	 eax
  0000d	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  00010	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00013	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00016	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUpacket_item@@PAU1@V?$allocator@Upacket_item@@@std@@U1@@std@@YAPAUpacket_item@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<packet_item *,packet_item *,std::allocator<packet_item>,packet_item>
  0001b	83 c4 18	 add	 esp, 24			; 00000018H
; File a:\vs\vc\include\vector

; 1649 : 		}

  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUpacket_item@@@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IAEPAUpacket_item@@PAU2@00@Z ENDP ; std::vector<packet_item,std::allocator<packet_item> >::_Umove<packet_item *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@@std@@YAXPAUpacket_item@@0AAU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@@std@@YAXPAUpacket_item@@0AAU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<packet_item> > >, COMDAT

; 96   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 97   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@@std@@YAXPAUpacket_item@@0AAU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<packet_item> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory
;	COMDAT ??$_Uninitialized_default_fill_n@PAUpacket_item@@IU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@@std@@YAXPAUpacket_item@@IAAU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$1 = -4						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Uninitialized_default_fill_n@PAUpacket_item@@IU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@@std@@YAXPAUpacket_item@@IAAU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@0@@Z PROC ; std::_Uninitialized_default_fill_n<packet_item *,unsigned int,std::_Wrap_alloc<std::allocator<packet_item> > >, COMDAT

; 690  : 	{	// copy _Count * _Val_type(_First)() to raw _First, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 691  : 	_Uninit_def_fill_n(_First, _Count, _Al,
; 692  : 		_Val_type(_First), _Ptr_cat(_First, _First));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$1[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 10	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00012	e8 00 00 00 00	 call	 ??$_Uninit_def_fill_n@PAUpacket_item@@IV?$allocator@Upacket_item@@@std@@U1@@std@@YAXPAUpacket_item@@IAAU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_def_fill_n<packet_item *,unsigned int,std::allocator<packet_item>,packet_item>
  00017	83 c4 14	 add	 esp, 20			; 00000014H

; 693  : 	}

  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Uninitialized_default_fill_n@PAUpacket_item@@IU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@@std@@YAXPAUpacket_item@@IAAU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@0@@Z ENDP ; std::_Uninitialized_default_fill_n<packet_item *,unsigned int,std::_Wrap_alloc<std::allocator<packet_item> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
;	COMDAT ?safeboxGetMallSize@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?safeboxGetMallSize@@YAPAU_object@@PAU1@0@Z PROC	; safeboxGetMallSize, COMDAT

; 309  : 	return Py_BuildValue("i", CPythonSafeBox::Instance().GetMallSize());

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSafeBox@@@@0PAVCPythonSafeBox@@A ; CSingleton<CPythonSafeBox>::ms_singleton
  00006	e8 00 00 00 00	 call	 ?GetMallSize@CPythonSafeBox@@QAEKXZ ; CPythonSafeBox::GetMallSize
  0000b	50		 push	 eax
  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i?$AA@
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00017	83 c4 08	 add	 esp, 8

; 310  : }

  0001a	c3		 ret	 0
?safeboxGetMallSize@@YAPAU_object@@PAU1@0@Z ENDP	; safeboxGetMallSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
;	COMDAT ?safeboxGetMallItemAttribute@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pItemData$1 = -12					; size = 4
_iSlotIndex$ = -8					; size = 4
_iAttrSlotIndex$ = -4					; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?safeboxGetMallItemAttribute@@YAPAU_object@@PAU1@0@Z PROC ; safeboxGetMallItemAttribute, COMDAT

; 289  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 290  : 	int iSlotIndex;
; 291  : 	if (!PyTuple_GetInteger(poArgs, 0, &iSlotIndex))

  00006	8d 45 f8	 lea	 eax, DWORD PTR _iSlotIndex$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 0e		 jne	 SHORT $LN4@safeboxGet
$LN10@safeboxGet:

; 292  : 		return Py_BuildException();

  0001b	6a 00		 push	 0
  0001d	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00022	83 c4 04	 add	 esp, 4

; 305  : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
$LN4@safeboxGet:

; 293  : 	int iAttrSlotIndex;
; 294  : 	if (!PyTuple_GetInteger(poArgs, 1, &iAttrSlotIndex))

  00029	8d 45 fc	 lea	 eax, DWORD PTR _iAttrSlotIndex$[ebp]
  0002c	50		 push	 eax
  0002d	6a 01		 push	 1
  0002f	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  00032	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003a	84 c0		 test	 al, al
  0003c	74 dd		 je	 SHORT $LN10@safeboxGet

; 295  : 		return Py_BuildException();
; 296  : 
; 297  : 	if (iAttrSlotIndex >= 0 && iAttrSlotIndex < ITEM_ATTRIBUTE_SLOT_MAX_NUM)

  0003e	83 7d fc 06	 cmp	 DWORD PTR _iAttrSlotIndex$[ebp], 6
  00042	77 3d		 ja	 SHORT $LN1@safeboxGet

; 298  : 	{
; 299  : 		TItemData * pItemData;
; 300  : 		if (CPythonSafeBox::Instance().GetMallItemDataPtr(iSlotIndex, &pItemData))

  00044	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSafeBox@@@@0PAVCPythonSafeBox@@A ; CSingleton<CPythonSafeBox>::ms_singleton
  0004a	8d 45 f4	 lea	 eax, DWORD PTR _pItemData$1[ebp]
  0004d	50		 push	 eax
  0004e	ff 75 f8	 push	 DWORD PTR _iSlotIndex$[ebp]
  00051	e8 00 00 00 00	 call	 ?GetMallItemDataPtr@CPythonSafeBox@@QAEHKPAPAUpacket_item@@@Z ; CPythonSafeBox::GetMallItemDataPtr
  00056	85 c0		 test	 eax, eax
  00058	74 27		 je	 SHORT $LN1@safeboxGet

; 301  : 			return Py_BuildValue("ii", pItemData->aAttr[iAttrSlotIndex].bType, pItemData->aAttr[iAttrSlotIndex].sValue);

  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _iAttrSlotIndex$[ebp]
  0005d	8b 45 f4	 mov	 eax, DWORD PTR _pItemData$1[ebp]
  00060	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  00063	03 c8		 add	 ecx, eax
  00065	0f bf 41 1a	 movsx	 eax, WORD PTR [ecx+26]
  00069	50		 push	 eax
  0006a	0f b6 41 19	 movzx	 eax, BYTE PTR [ecx+25]
  0006e	50		 push	 eax

; 302  : 	}
; 303  : 
; 304  : 	return Py_BuildValue("ii", 0, 0);

  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_02PDIHAGKM@ii?$AA@
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 305  : }

  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
$LN1@safeboxGet:

; 302  : 	}
; 303  : 
; 304  : 	return Py_BuildValue("ii", 0, 0);

  00081	6a 00		 push	 0
  00083	6a 00		 push	 0
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_02PDIHAGKM@ii?$AA@
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00090	83 c4 0c	 add	 esp, 12			; 0000000cH

; 305  : }

  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c3		 ret	 0
?safeboxGetMallItemAttribute@@YAPAU_object@@PAU1@0@Z ENDP ; safeboxGetMallItemAttribute
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
;	COMDAT ?safeboxGetMallItemMetinSocket@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pItemData$ = -12					; size = 4
_iSlotIndex$ = -8					; size = 4
_iSocketIndex$ = -4					; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?safeboxGetMallItemMetinSocket@@YAPAU_object@@PAU1@0@Z PROC ; safeboxGetMallItemMetinSocket, COMDAT

; 270  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 271  : 	int iSlotIndex;
; 272  : 	if (!PyTuple_GetInteger(poArgs, 0, &iSlotIndex))

  00006	8d 45 f8	 lea	 eax, DWORD PTR _iSlotIndex$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 09		 jne	 SHORT $LN4@safeboxGet
$LN9@safeboxGet:

; 273  : 		return Py_BadArgument();

  0001b	e8 00 00 00 00	 call	 ?Py_BadArgument@@YAPAU_object@@XZ ; Py_BadArgument

; 286  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
$LN4@safeboxGet:

; 274  : 	int iSocketIndex;
; 275  : 	if (!PyTuple_GetInteger(poArgs, 1, &iSocketIndex))

  00024	8d 45 fc	 lea	 eax, DWORD PTR _iSocketIndex$[ebp]
  00027	50		 push	 eax
  00028	6a 01		 push	 1
  0002a	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0002d	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	84 c0		 test	 al, al
  00037	74 e2		 je	 SHORT $LN9@safeboxGet

; 276  : 		return Py_BadArgument();
; 277  : 
; 278  : 	if (iSocketIndex >= ITEM_SOCKET_SLOT_MAX_NUM)

  00039	83 7d fc 03	 cmp	 DWORD PTR _iSocketIndex$[ebp], 3
  0003d	7c 0e		 jl	 SHORT $LN2@safeboxGet
$LN10@safeboxGet:

; 279  : 		return Py_BuildException();

  0003f	6a 00		 push	 0
  00041	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00046	83 c4 04	 add	 esp, 4

; 286  : }

  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
$LN2@safeboxGet:

; 280  : 
; 281  : 	TItemData * pItemData;
; 282  : 	if (!CPythonSafeBox::Instance().GetMallItemDataPtr(iSlotIndex, &pItemData))

  0004d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSafeBox@@@@0PAVCPythonSafeBox@@A ; CSingleton<CPythonSafeBox>::ms_singleton
  00053	8d 45 f4	 lea	 eax, DWORD PTR _pItemData$[ebp]
  00056	50		 push	 eax
  00057	ff 75 f8	 push	 DWORD PTR _iSlotIndex$[ebp]
  0005a	e8 00 00 00 00	 call	 ?GetMallItemDataPtr@CPythonSafeBox@@QAEHKPAPAUpacket_item@@@Z ; CPythonSafeBox::GetMallItemDataPtr
  0005f	85 c0		 test	 eax, eax
  00061	74 dc		 je	 SHORT $LN10@safeboxGet

; 283  : 		return Py_BuildException();
; 284  : 
; 285  : 	return Py_BuildValue("i", pItemData->alSockets[iSocketIndex]);

  00063	8b 4d fc	 mov	 ecx, DWORD PTR _iSocketIndex$[ebp]
  00066	8b 45 f4	 mov	 eax, DWORD PTR _pItemData$[ebp]
  00069	ff 74 88 0d	 push	 DWORD PTR [eax+ecx*4+13]
  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i?$AA@
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00078	83 c4 08	 add	 esp, 8

; 286  : }

  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c3		 ret	 0
?safeboxGetMallItemMetinSocket@@YAPAU_object@@PAU1@0@Z ENDP ; safeboxGetMallItemMetinSocket
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
;	COMDAT ?safeboxGetMallItemCount@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pInstance$ = -8					; size = 4
_ipos$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?safeboxGetMallItemCount@@YAPAU_object@@PAU1@0@Z PROC	; safeboxGetMallItemCount, COMDAT

; 257  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 258  : 	int ipos;
; 259  : 	if (!PyTuple_GetInteger(poArgs, 0, &ipos))

  00006	8d 45 fc	 lea	 eax, DWORD PTR _ipos$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 09		 jne	 SHORT $LN2@safeboxGet

; 260  : 		return Py_BadArgument();

  0001b	e8 00 00 00 00	 call	 ?Py_BadArgument@@YAPAU_object@@XZ ; Py_BadArgument

; 267  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
$LN2@safeboxGet:

; 261  : 
; 262  : 	TItemData * pInstance;
; 263  : 	if (!CPythonSafeBox::Instance().GetMallItemDataPtr(ipos, &pInstance))

  00024	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSafeBox@@@@0PAVCPythonSafeBox@@A ; CSingleton<CPythonSafeBox>::ms_singleton
  0002a	8d 45 f8	 lea	 eax, DWORD PTR _pInstance$[ebp]
  0002d	50		 push	 eax
  0002e	ff 75 fc	 push	 DWORD PTR _ipos$[ebp]
  00031	e8 00 00 00 00	 call	 ?GetMallItemDataPtr@CPythonSafeBox@@QAEHKPAPAUpacket_item@@@Z ; CPythonSafeBox::GetMallItemDataPtr
  00036	85 c0		 test	 eax, eax
  00038	75 0d		 jne	 SHORT $LN1@safeboxGet

; 264  : 		return Py_BuildException();

  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00040	83 c4 04	 add	 esp, 4

; 267  : }

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
$LN1@safeboxGet:

; 265  : 
; 266  : 	return Py_BuildValue("i", pInstance->count);

  00047	8b 45 f8	 mov	 eax, DWORD PTR _pInstance$[ebp]
  0004a	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  0004e	50		 push	 eax
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i?$AA@
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  0005a	83 c4 08	 add	 esp, 8

; 267  : }

  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
?safeboxGetMallItemCount@@YAPAU_object@@PAU1@0@Z ENDP	; safeboxGetMallItemCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
;	COMDAT ?safeboxGetMallItemID@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pInstance$ = -8					; size = 4
_ipos$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?safeboxGetMallItemID@@YAPAU_object@@PAU1@0@Z PROC	; safeboxGetMallItemID, COMDAT

; 244  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 245  : 	int ipos;
; 246  : 	if (!PyTuple_GetInteger(poArgs, 0, &ipos))

  00006	8d 45 fc	 lea	 eax, DWORD PTR _ipos$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 09		 jne	 SHORT $LN2@safeboxGet

; 247  : 		return Py_BadArgument();

  0001b	e8 00 00 00 00	 call	 ?Py_BadArgument@@YAPAU_object@@XZ ; Py_BadArgument

; 254  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
$LN2@safeboxGet:

; 248  : 
; 249  : 	TItemData * pInstance;
; 250  : 	if (!CPythonSafeBox::Instance().GetMallItemDataPtr(ipos, &pInstance))

  00024	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSafeBox@@@@0PAVCPythonSafeBox@@A ; CSingleton<CPythonSafeBox>::ms_singleton
  0002a	8d 45 f8	 lea	 eax, DWORD PTR _pInstance$[ebp]
  0002d	50		 push	 eax
  0002e	ff 75 fc	 push	 DWORD PTR _ipos$[ebp]
  00031	e8 00 00 00 00	 call	 ?GetMallItemDataPtr@CPythonSafeBox@@QAEHKPAPAUpacket_item@@@Z ; CPythonSafeBox::GetMallItemDataPtr
  00036	85 c0		 test	 eax, eax
  00038	75 0d		 jne	 SHORT $LN1@safeboxGet

; 251  : 		return Py_BuildException();

  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00040	83 c4 04	 add	 esp, 4

; 254  : }

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
$LN1@safeboxGet:

; 252  : 
; 253  : 	return Py_BuildValue("i", pInstance->vnum);

  00047	8b 45 f8	 mov	 eax, DWORD PTR _pInstance$[ebp]
  0004a	ff 30		 push	 DWORD PTR [eax]
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i?$AA@
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00057	83 c4 08	 add	 esp, 8

; 254  : }

  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
?safeboxGetMallItemID@@YAPAU_object@@PAU1@0@Z ENDP	; safeboxGetMallItemID
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
;	COMDAT ?safeboxGetMoney@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?safeboxGetMoney@@YAPAU_object@@PAU1@0@Z PROC		; safeboxGetMoney, COMDAT

; 240  : 	return Py_BuildValue("i", CPythonSafeBox::Instance().GetMoney());

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSafeBox@@@@0PAVCPythonSafeBox@@A ; CSingleton<CPythonSafeBox>::ms_singleton
  00006	e8 00 00 00 00	 call	 ?GetMoney@CPythonSafeBox@@QAEKXZ ; CPythonSafeBox::GetMoney
  0000b	50		 push	 eax
  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i?$AA@
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00017	83 c4 08	 add	 esp, 8

; 241  : }

  0001a	c3		 ret	 0
?safeboxGetMoney@@YAPAU_object@@PAU1@0@Z ENDP		; safeboxGetMoney
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
;	COMDAT ?safeboxGetItemAttribute@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pItemData$1 = -12					; size = 4
_iSlotIndex$ = -8					; size = 4
_iAttrSlotIndex$ = -4					; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?safeboxGetItemAttribute@@YAPAU_object@@PAU1@0@Z PROC	; safeboxGetItemAttribute, COMDAT

; 220  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 221  : 	int iSlotIndex;
; 222  : 	if (!PyTuple_GetInteger(poArgs, 0, &iSlotIndex))

  00006	8d 45 f8	 lea	 eax, DWORD PTR _iSlotIndex$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 0e		 jne	 SHORT $LN4@safeboxGet
$LN10@safeboxGet:

; 223  : 		return Py_BuildException();

  0001b	6a 00		 push	 0
  0001d	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00022	83 c4 04	 add	 esp, 4

; 236  : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
$LN4@safeboxGet:

; 224  : 	int iAttrSlotIndex;
; 225  : 	if (!PyTuple_GetInteger(poArgs, 1, &iAttrSlotIndex))

  00029	8d 45 fc	 lea	 eax, DWORD PTR _iAttrSlotIndex$[ebp]
  0002c	50		 push	 eax
  0002d	6a 01		 push	 1
  0002f	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  00032	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003a	84 c0		 test	 al, al
  0003c	74 dd		 je	 SHORT $LN10@safeboxGet

; 226  : 		return Py_BuildException();
; 227  : 
; 228  : 	if (iAttrSlotIndex >= 0 && iAttrSlotIndex < ITEM_ATTRIBUTE_SLOT_MAX_NUM)

  0003e	83 7d fc 06	 cmp	 DWORD PTR _iAttrSlotIndex$[ebp], 6
  00042	77 3d		 ja	 SHORT $LN1@safeboxGet

; 229  : 	{
; 230  : 		TItemData * pItemData;
; 231  : 		if (CPythonSafeBox::Instance().GetItemDataPtr(iSlotIndex, &pItemData))

  00044	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSafeBox@@@@0PAVCPythonSafeBox@@A ; CSingleton<CPythonSafeBox>::ms_singleton
  0004a	8d 45 f4	 lea	 eax, DWORD PTR _pItemData$1[ebp]
  0004d	50		 push	 eax
  0004e	ff 75 f8	 push	 DWORD PTR _iSlotIndex$[ebp]
  00051	e8 00 00 00 00	 call	 ?GetItemDataPtr@CPythonSafeBox@@QAEHKPAPAUpacket_item@@@Z ; CPythonSafeBox::GetItemDataPtr
  00056	85 c0		 test	 eax, eax
  00058	74 27		 je	 SHORT $LN1@safeboxGet

; 232  : 			return Py_BuildValue("ii", pItemData->aAttr[iAttrSlotIndex].bType, pItemData->aAttr[iAttrSlotIndex].sValue);

  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _iAttrSlotIndex$[ebp]
  0005d	8b 45 f4	 mov	 eax, DWORD PTR _pItemData$1[ebp]
  00060	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  00063	03 c8		 add	 ecx, eax
  00065	0f bf 41 1a	 movsx	 eax, WORD PTR [ecx+26]
  00069	50		 push	 eax
  0006a	0f b6 41 19	 movzx	 eax, BYTE PTR [ecx+25]
  0006e	50		 push	 eax

; 233  : 	}
; 234  : 
; 235  : 	return Py_BuildValue("ii", 0, 0);

  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_02PDIHAGKM@ii?$AA@
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 236  : }

  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
$LN1@safeboxGet:

; 233  : 	}
; 234  : 
; 235  : 	return Py_BuildValue("ii", 0, 0);

  00081	6a 00		 push	 0
  00083	6a 00		 push	 0
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_02PDIHAGKM@ii?$AA@
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00090	83 c4 0c	 add	 esp, 12			; 0000000cH

; 236  : }

  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c3		 ret	 0
?safeboxGetItemAttribute@@YAPAU_object@@PAU1@0@Z ENDP	; safeboxGetItemAttribute
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
;	COMDAT ?safeboxGetItemMetinSocket@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pItemData$ = -12					; size = 4
_iSlotIndex$ = -8					; size = 4
_iSocketIndex$ = -4					; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?safeboxGetItemMetinSocket@@YAPAU_object@@PAU1@0@Z PROC	; safeboxGetItemMetinSocket, COMDAT

; 201  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 202  : 	int iSlotIndex;
; 203  : 	if (!PyTuple_GetInteger(poArgs, 0, &iSlotIndex))

  00006	8d 45 f8	 lea	 eax, DWORD PTR _iSlotIndex$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 09		 jne	 SHORT $LN4@safeboxGet
$LN9@safeboxGet:

; 204  : 		return Py_BadArgument();

  0001b	e8 00 00 00 00	 call	 ?Py_BadArgument@@YAPAU_object@@XZ ; Py_BadArgument

; 217  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
$LN4@safeboxGet:

; 205  : 	int iSocketIndex;
; 206  : 	if (!PyTuple_GetInteger(poArgs, 1, &iSocketIndex))

  00024	8d 45 fc	 lea	 eax, DWORD PTR _iSocketIndex$[ebp]
  00027	50		 push	 eax
  00028	6a 01		 push	 1
  0002a	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0002d	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	84 c0		 test	 al, al
  00037	74 e2		 je	 SHORT $LN9@safeboxGet

; 207  : 		return Py_BadArgument();
; 208  : 
; 209  : 	if (iSocketIndex >= ITEM_SOCKET_SLOT_MAX_NUM)

  00039	83 7d fc 03	 cmp	 DWORD PTR _iSocketIndex$[ebp], 3
  0003d	7c 0e		 jl	 SHORT $LN2@safeboxGet
$LN10@safeboxGet:

; 210  : 		return Py_BuildException();

  0003f	6a 00		 push	 0
  00041	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00046	83 c4 04	 add	 esp, 4

; 217  : }

  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
$LN2@safeboxGet:

; 211  : 
; 212  : 	TItemData * pItemData;
; 213  : 	if (!CPythonSafeBox::Instance().GetItemDataPtr(iSlotIndex, &pItemData))

  0004d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSafeBox@@@@0PAVCPythonSafeBox@@A ; CSingleton<CPythonSafeBox>::ms_singleton
  00053	8d 45 f4	 lea	 eax, DWORD PTR _pItemData$[ebp]
  00056	50		 push	 eax
  00057	ff 75 f8	 push	 DWORD PTR _iSlotIndex$[ebp]
  0005a	e8 00 00 00 00	 call	 ?GetItemDataPtr@CPythonSafeBox@@QAEHKPAPAUpacket_item@@@Z ; CPythonSafeBox::GetItemDataPtr
  0005f	85 c0		 test	 eax, eax
  00061	74 dc		 je	 SHORT $LN10@safeboxGet

; 214  : 		return Py_BuildException();
; 215  : 
; 216  : 	return Py_BuildValue("i", pItemData->alSockets[iSocketIndex]);

  00063	8b 4d fc	 mov	 ecx, DWORD PTR _iSocketIndex$[ebp]
  00066	8b 45 f4	 mov	 eax, DWORD PTR _pItemData$[ebp]
  00069	ff 74 88 0d	 push	 DWORD PTR [eax+ecx*4+13]
  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i?$AA@
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00078	83 c4 08	 add	 esp, 8

; 217  : }

  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c3		 ret	 0
?safeboxGetItemMetinSocket@@YAPAU_object@@PAU1@0@Z ENDP	; safeboxGetItemMetinSocket
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
;	COMDAT ?safeboxGetItemFlags@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pInstance$ = -8					; size = 4
_ipos$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?safeboxGetItemFlags@@YAPAU_object@@PAU1@0@Z PROC	; safeboxGetItemFlags, COMDAT

; 188  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 189  : 	int ipos;
; 190  : 	if (!PyTuple_GetInteger(poArgs, 0, &ipos))

  00006	8d 45 fc	 lea	 eax, DWORD PTR _ipos$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 09		 jne	 SHORT $LN2@safeboxGet

; 191  : 		return Py_BadArgument();

  0001b	e8 00 00 00 00	 call	 ?Py_BadArgument@@YAPAU_object@@XZ ; Py_BadArgument

; 198  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
$LN2@safeboxGet:

; 192  : 
; 193  : 	TItemData * pInstance;
; 194  : 	if (!CPythonSafeBox::Instance().GetItemDataPtr(ipos, &pInstance))

  00024	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSafeBox@@@@0PAVCPythonSafeBox@@A ; CSingleton<CPythonSafeBox>::ms_singleton
  0002a	8d 45 f8	 lea	 eax, DWORD PTR _pInstance$[ebp]
  0002d	50		 push	 eax
  0002e	ff 75 fc	 push	 DWORD PTR _ipos$[ebp]
  00031	e8 00 00 00 00	 call	 ?GetItemDataPtr@CPythonSafeBox@@QAEHKPAPAUpacket_item@@@Z ; CPythonSafeBox::GetItemDataPtr
  00036	85 c0		 test	 eax, eax
  00038	75 0d		 jne	 SHORT $LN1@safeboxGet

; 195  : 		return Py_BuildException();

  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00040	83 c4 04	 add	 esp, 4

; 198  : }

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
$LN1@safeboxGet:

; 196  : 
; 197  : 	return Py_BuildValue("i", pInstance->flags);

  00047	8b 45 f8	 mov	 eax, DWORD PTR _pInstance$[ebp]
  0004a	ff 70 05	 push	 DWORD PTR [eax+5]
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i?$AA@
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00058	83 c4 08	 add	 esp, 8

; 198  : }

  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
?safeboxGetItemFlags@@YAPAU_object@@PAU1@0@Z ENDP	; safeboxGetItemFlags
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
;	COMDAT ?safeboxGetItemCount@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pInstance$ = -8					; size = 4
_ipos$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?safeboxGetItemCount@@YAPAU_object@@PAU1@0@Z PROC	; safeboxGetItemCount, COMDAT

; 175  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 176  : 	int ipos;
; 177  : 	if (!PyTuple_GetInteger(poArgs, 0, &ipos))

  00006	8d 45 fc	 lea	 eax, DWORD PTR _ipos$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 09		 jne	 SHORT $LN2@safeboxGet

; 178  : 		return Py_BadArgument();

  0001b	e8 00 00 00 00	 call	 ?Py_BadArgument@@YAPAU_object@@XZ ; Py_BadArgument

; 185  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
$LN2@safeboxGet:

; 179  : 
; 180  : 	TItemData * pInstance;
; 181  : 	if (!CPythonSafeBox::Instance().GetItemDataPtr(ipos, &pInstance))

  00024	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSafeBox@@@@0PAVCPythonSafeBox@@A ; CSingleton<CPythonSafeBox>::ms_singleton
  0002a	8d 45 f8	 lea	 eax, DWORD PTR _pInstance$[ebp]
  0002d	50		 push	 eax
  0002e	ff 75 fc	 push	 DWORD PTR _ipos$[ebp]
  00031	e8 00 00 00 00	 call	 ?GetItemDataPtr@CPythonSafeBox@@QAEHKPAPAUpacket_item@@@Z ; CPythonSafeBox::GetItemDataPtr
  00036	85 c0		 test	 eax, eax
  00038	75 0d		 jne	 SHORT $LN1@safeboxGet

; 182  : 		return Py_BuildException();

  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00040	83 c4 04	 add	 esp, 4

; 185  : }

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
$LN1@safeboxGet:

; 183  : 
; 184  : 	return Py_BuildValue("i", pInstance->count);

  00047	8b 45 f8	 mov	 eax, DWORD PTR _pInstance$[ebp]
  0004a	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  0004e	50		 push	 eax
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i?$AA@
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  0005a	83 c4 08	 add	 esp, 8

; 185  : }

  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
?safeboxGetItemCount@@YAPAU_object@@PAU1@0@Z ENDP	; safeboxGetItemCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
;	COMDAT ?safeboxGetItemID@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pInstance$ = -8					; size = 4
_ipos$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?safeboxGetItemID@@YAPAU_object@@PAU1@0@Z PROC		; safeboxGetItemID, COMDAT

; 162  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 163  : 	int ipos;
; 164  : 	if (!PyTuple_GetInteger(poArgs, 0, &ipos))

  00006	8d 45 fc	 lea	 eax, DWORD PTR _ipos$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 09		 jne	 SHORT $LN2@safeboxGet

; 165  : 		return Py_BadArgument();

  0001b	e8 00 00 00 00	 call	 ?Py_BadArgument@@YAPAU_object@@XZ ; Py_BadArgument

; 172  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
$LN2@safeboxGet:

; 166  : 
; 167  : 	TItemData * pInstance;
; 168  : 	if (!CPythonSafeBox::Instance().GetItemDataPtr(ipos, &pInstance))

  00024	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSafeBox@@@@0PAVCPythonSafeBox@@A ; CSingleton<CPythonSafeBox>::ms_singleton
  0002a	8d 45 f8	 lea	 eax, DWORD PTR _pInstance$[ebp]
  0002d	50		 push	 eax
  0002e	ff 75 fc	 push	 DWORD PTR _ipos$[ebp]
  00031	e8 00 00 00 00	 call	 ?GetItemDataPtr@CPythonSafeBox@@QAEHKPAPAUpacket_item@@@Z ; CPythonSafeBox::GetItemDataPtr
  00036	85 c0		 test	 eax, eax
  00038	75 0d		 jne	 SHORT $LN1@safeboxGet

; 169  : 		return Py_BuildException();

  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00040	83 c4 04	 add	 esp, 4

; 172  : }

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
$LN1@safeboxGet:

; 170  : 
; 171  : 	return Py_BuildValue("i", pInstance->vnum);

  00047	8b 45 f8	 mov	 eax, DWORD PTR _pInstance$[ebp]
  0004a	ff 30		 push	 DWORD PTR [eax]
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i?$AA@
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00057	83 c4 08	 add	 esp, 8

; 172  : }

  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
?safeboxGetItemID@@YAPAU_object@@PAU1@0@Z ENDP		; safeboxGetItemID
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
;	COMDAT ?safeboxGetCurrentSafeboxSize@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?safeboxGetCurrentSafeboxSize@@YAPAU_object@@PAU1@0@Z PROC ; safeboxGetCurrentSafeboxSize, COMDAT

; 158  : 	return Py_BuildValue("i", CPythonSafeBox::Instance().GetCurrentSafeBoxSize());

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSafeBox@@@@0PAVCPythonSafeBox@@A ; CSingleton<CPythonSafeBox>::ms_singleton
  00006	e8 00 00 00 00	 call	 ?GetCurrentSafeBoxSize@CPythonSafeBox@@QAEHXZ ; CPythonSafeBox::GetCurrentSafeBoxSize
  0000b	50		 push	 eax
  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i?$AA@
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00017	83 c4 08	 add	 esp, 8

; 159  : }

  0001a	c3		 ret	 0
?safeboxGetCurrentSafeboxSize@@YAPAU_object@@PAU1@0@Z ENDP ; safeboxGetCurrentSafeboxSize
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCPythonSafeBox@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCPythonSafeBox@@UAEPAXI@Z PROC			; CPythonSafeBox::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CPythonSafeBox@@UAE@XZ ; CPythonSafeBox::~CPythonSafeBox
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCPythonSafeBox@@UAEPAXI@Z ENDP			; CPythonSafeBox::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Xlen@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IBEXXZ PROC ; std::vector<packet_item,std::allocator<packet_item> >::_Xlen, COMDAT
; _this$ = ecx

; 1754 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IBEXXZ ENDP ; std::vector<packet_item,std::allocator<packet_item> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
;	COMDAT ?_Tidy@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IAEXXZ PROC ; std::vector<packet_item,std::allocator<packet_item> >::_Tidy, COMDAT
; _this$ = ecx

; 1622 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1623 : 		if (this->_Myfirst != pointer())

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 1d		 je	 SHORT $LN1@Tidy
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
; File a:\vs\vc\include\vector

; 1629 : 			this->_Myfirst = pointer();

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1630 : 			this->_Mylast = pointer();

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1631 : 			this->_Myend = pointer();

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN1@Tidy:
  00026	5e		 pop	 esi

; 1632 : 			}
; 1633 : 		}

  00027	c3		 ret	 0
?_Tidy@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IAEXXZ ENDP ; std::vector<packet_item,std::allocator<packet_item> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Reserve@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IAEXI@Z PROC ; std::vector<packet_item,std::allocator<packet_item> >::_Reserve, COMDAT
; _this$ = ecx

; 1612 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 1015 : 		return (this->_Myend - this->_Mylast);

  00008	b8 c9 42 16 b2	 mov	 eax, -1307163959	; b21642c9H
  0000d	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
  00010	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
  00013	2b f3		 sub	 esi, ebx
  00015	f7 ee		 imul	 esi
  00017	03 d6		 add	 edx, esi

; 1613 : 		if (_Unused_capacity() < _Count)

  00019	8b 75 08	 mov	 esi, DWORD PTR __Count$[ebp]

; 1015 : 		return (this->_Myend - this->_Mylast);

  0001c	c1 fa 05	 sar	 edx, 5
  0001f	8b ca		 mov	 ecx, edx
  00021	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00024	03 ca		 add	 ecx, edx

; 1613 : 		if (_Unused_capacity() < _Count)

  00026	3b ce		 cmp	 ecx, esi
  00028	73 33		 jae	 SHORT $LN2@Reserve

; 1016 : 		}
; 1017 : 
; 1018 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1019 : 		{	// micro-optimization for capacity() != size()
; 1020 : 		return (this->_Myend != this->_Mylast);
; 1021 : 		}
; 1022 : 
; 1023 : 	iterator begin() _NOEXCEPT
; 1024 : 		{	// return iterator for beginning of mutable sequence
; 1025 : 		return (iterator(this->_Myfirst, this));
; 1026 : 		}
; 1027 : 
; 1028 : 	const_iterator begin() const _NOEXCEPT
; 1029 : 		{	// return iterator for beginning of nonmutable sequence
; 1030 : 		return (const_iterator(this->_Myfirst, this));
; 1031 : 		}
; 1032 : 
; 1033 : 	iterator end() _NOEXCEPT
; 1034 : 		{	// return iterator for end of mutable sequence
; 1035 : 		return (iterator(this->_Mylast, this));
; 1036 : 		}
; 1037 : 
; 1038 : 	const_iterator end() const _NOEXCEPT
; 1039 : 		{	// return iterator for end of nonmutable sequence
; 1040 : 		return (const_iterator(this->_Mylast, this));
; 1041 : 		}
; 1042 : 
; 1043 : 	iterator _Make_iter(const_iterator _Where) const
; 1044 : 		{	// make iterator from const_iterator
; 1045 : 		return (iterator(_Where._Ptr, this));
; 1046 : 		}
; 1047 : 
; 1048 : 	reverse_iterator rbegin() _NOEXCEPT
; 1049 : 		{	// return iterator for beginning of reversed mutable sequence
; 1050 : 		return (reverse_iterator(end()));
; 1051 : 		}
; 1052 : 
; 1053 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1054 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1055 : 		return (const_reverse_iterator(end()));
; 1056 : 		}
; 1057 : 
; 1058 : 	reverse_iterator rend() _NOEXCEPT
; 1059 : 		{	// return iterator for end of reversed mutable sequence
; 1060 : 		return (reverse_iterator(begin()));
; 1061 : 		}
; 1062 : 
; 1063 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1064 : 		{	// return iterator for end of reversed nonmutable sequence
; 1065 : 		return (const_reverse_iterator(begin()));
; 1066 : 		}
; 1067 : 
; 1068 : 	const_iterator cbegin() const _NOEXCEPT
; 1069 : 		{	// return iterator for beginning of nonmutable sequence
; 1070 : 		return (((const _Myt *)this)->begin());
; 1071 : 		}
; 1072 : 
; 1073 : 	const_iterator cend() const _NOEXCEPT
; 1074 : 		{	// return iterator for end of nonmutable sequence
; 1075 : 		return (((const _Myt *)this)->end());
; 1076 : 		}
; 1077 : 
; 1078 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1079 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1080 : 		return (((const _Myt *)this)->rbegin());
; 1081 : 		}
; 1082 : 
; 1083 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1084 : 		{	// return iterator for end of reversed nonmutable sequence
; 1085 : 		return (((const _Myt *)this)->rend());
; 1086 : 		}
; 1087 : 
; 1088 : 	void shrink_to_fit()
; 1089 : 		{	// reduce capacity
; 1090 : 		if (_Has_unused_capacity())
; 1091 : 			{	// worth shrinking, do it
; 1092 : 			if (empty())
; 1093 : 				_Tidy();
; 1094 : 			else
; 1095 : 				_Reallocate(size());
; 1096 : 			}
; 1097 : 		}
; 1098 : 
; 1099 : 	void resize(size_type _Newsize)
; 1100 : 		{	// determine new length, padding as needed
; 1101 : 		if (_Newsize < size())
; 1102 : 			_Pop_back_n(size() - _Newsize);
; 1103 : 		else if (size() < _Newsize)
; 1104 : 			{	// pad as needed
; 1105 : 			_Alty _Alval(this->_Getal());
; 1106 : 			_Reserve(_Newsize - size());
; 1107 : 			_TRY_BEGIN
; 1108 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1109 : 				_Alval);
; 1110 : 			_CATCH_ALL
; 1111 : 			_Tidy();
; 1112 : 			_RERAISE;
; 1113 : 			_CATCH_END
; 1114 : 			this->_Mylast += _Newsize - size();
; 1115 : 			}
; 1116 : 		}
; 1117 : 
; 1118 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1119 : 		{	// determine new length, padding with _Val elements as needed
; 1120 : 		if (_Newsize < size())
; 1121 : 			_Pop_back_n(size() - _Newsize);
; 1122 : 		else if (size() < _Newsize)
; 1123 : 			{	// pad as needed
; 1124 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1125 : 
; 1126 : 			if (_Inside(_Ptr))
; 1127 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1128 : 				const difference_type _Idx = _Ptr
; 1129 : 					- _STD addressof(*this->_Myfirst);
; 1130 : 				_Reserve(_Newsize - size());
; 1131 : 				_Ptr = _STD addressof(*this->_Myfirst) + _Idx;
; 1132 : 				}
; 1133 : 			else
; 1134 : 				_Reserve(_Newsize - size());
; 1135 : 
; 1136 : 			_TRY_BEGIN
; 1137 : 			_Ufill(this->_Mylast, _Newsize - size(), _Ptr);
; 1138 : 			_CATCH_ALL
; 1139 : 			_Tidy();
; 1140 : 			_RERAISE;
; 1141 : 			_CATCH_END
; 1142 : 			this->_Mylast += _Newsize - size();
; 1143 : 			}
; 1144 : 		}
; 1145 : 
; 1146 : 	size_type size() const _NOEXCEPT
; 1147 : 		{	// return length of sequence
; 1148 : 		return (this->_Mylast - this->_Myfirst);

  0002a	2b 1f		 sub	 ebx, DWORD PTR [edi]
  0002c	b8 c9 42 16 b2	 mov	 eax, -1307163959	; b21642c9H
  00031	f7 eb		 imul	 ebx

; 1614 : 			{	// need more room, try to get it
; 1615 : 			if (max_size() - size() < _Count)

  00033	b8 16 b2 90 05	 mov	 eax, 93368854		; 0590b216H

; 1016 : 		}
; 1017 : 
; 1018 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1019 : 		{	// micro-optimization for capacity() != size()
; 1020 : 		return (this->_Myend != this->_Mylast);
; 1021 : 		}
; 1022 : 
; 1023 : 	iterator begin() _NOEXCEPT
; 1024 : 		{	// return iterator for beginning of mutable sequence
; 1025 : 		return (iterator(this->_Myfirst, this));
; 1026 : 		}
; 1027 : 
; 1028 : 	const_iterator begin() const _NOEXCEPT
; 1029 : 		{	// return iterator for beginning of nonmutable sequence
; 1030 : 		return (const_iterator(this->_Myfirst, this));
; 1031 : 		}
; 1032 : 
; 1033 : 	iterator end() _NOEXCEPT
; 1034 : 		{	// return iterator for end of mutable sequence
; 1035 : 		return (iterator(this->_Mylast, this));
; 1036 : 		}
; 1037 : 
; 1038 : 	const_iterator end() const _NOEXCEPT
; 1039 : 		{	// return iterator for end of nonmutable sequence
; 1040 : 		return (const_iterator(this->_Mylast, this));
; 1041 : 		}
; 1042 : 
; 1043 : 	iterator _Make_iter(const_iterator _Where) const
; 1044 : 		{	// make iterator from const_iterator
; 1045 : 		return (iterator(_Where._Ptr, this));
; 1046 : 		}
; 1047 : 
; 1048 : 	reverse_iterator rbegin() _NOEXCEPT
; 1049 : 		{	// return iterator for beginning of reversed mutable sequence
; 1050 : 		return (reverse_iterator(end()));
; 1051 : 		}
; 1052 : 
; 1053 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1054 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1055 : 		return (const_reverse_iterator(end()));
; 1056 : 		}
; 1057 : 
; 1058 : 	reverse_iterator rend() _NOEXCEPT
; 1059 : 		{	// return iterator for end of reversed mutable sequence
; 1060 : 		return (reverse_iterator(begin()));
; 1061 : 		}
; 1062 : 
; 1063 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1064 : 		{	// return iterator for end of reversed nonmutable sequence
; 1065 : 		return (const_reverse_iterator(begin()));
; 1066 : 		}
; 1067 : 
; 1068 : 	const_iterator cbegin() const _NOEXCEPT
; 1069 : 		{	// return iterator for beginning of nonmutable sequence
; 1070 : 		return (((const _Myt *)this)->begin());
; 1071 : 		}
; 1072 : 
; 1073 : 	const_iterator cend() const _NOEXCEPT
; 1074 : 		{	// return iterator for end of nonmutable sequence
; 1075 : 		return (((const _Myt *)this)->end());
; 1076 : 		}
; 1077 : 
; 1078 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1079 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1080 : 		return (((const _Myt *)this)->rbegin());
; 1081 : 		}
; 1082 : 
; 1083 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1084 : 		{	// return iterator for end of reversed nonmutable sequence
; 1085 : 		return (((const _Myt *)this)->rend());
; 1086 : 		}
; 1087 : 
; 1088 : 	void shrink_to_fit()
; 1089 : 		{	// reduce capacity
; 1090 : 		if (_Has_unused_capacity())
; 1091 : 			{	// worth shrinking, do it
; 1092 : 			if (empty())
; 1093 : 				_Tidy();
; 1094 : 			else
; 1095 : 				_Reallocate(size());
; 1096 : 			}
; 1097 : 		}
; 1098 : 
; 1099 : 	void resize(size_type _Newsize)
; 1100 : 		{	// determine new length, padding as needed
; 1101 : 		if (_Newsize < size())
; 1102 : 			_Pop_back_n(size() - _Newsize);
; 1103 : 		else if (size() < _Newsize)
; 1104 : 			{	// pad as needed
; 1105 : 			_Alty _Alval(this->_Getal());
; 1106 : 			_Reserve(_Newsize - size());
; 1107 : 			_TRY_BEGIN
; 1108 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1109 : 				_Alval);
; 1110 : 			_CATCH_ALL
; 1111 : 			_Tidy();
; 1112 : 			_RERAISE;
; 1113 : 			_CATCH_END
; 1114 : 			this->_Mylast += _Newsize - size();
; 1115 : 			}
; 1116 : 		}
; 1117 : 
; 1118 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1119 : 		{	// determine new length, padding with _Val elements as needed
; 1120 : 		if (_Newsize < size())
; 1121 : 			_Pop_back_n(size() - _Newsize);
; 1122 : 		else if (size() < _Newsize)
; 1123 : 			{	// pad as needed
; 1124 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1125 : 
; 1126 : 			if (_Inside(_Ptr))
; 1127 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1128 : 				const difference_type _Idx = _Ptr
; 1129 : 					- _STD addressof(*this->_Myfirst);
; 1130 : 				_Reserve(_Newsize - size());
; 1131 : 				_Ptr = _STD addressof(*this->_Myfirst) + _Idx;
; 1132 : 				}
; 1133 : 			else
; 1134 : 				_Reserve(_Newsize - size());
; 1135 : 
; 1136 : 			_TRY_BEGIN
; 1137 : 			_Ufill(this->_Mylast, _Newsize - size(), _Ptr);
; 1138 : 			_CATCH_ALL
; 1139 : 			_Tidy();
; 1140 : 			_RERAISE;
; 1141 : 			_CATCH_END
; 1142 : 			this->_Mylast += _Newsize - size();
; 1143 : 			}
; 1144 : 		}
; 1145 : 
; 1146 : 	size_type size() const _NOEXCEPT
; 1147 : 		{	// return length of sequence
; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00038	03 d3		 add	 edx, ebx
  0003a	c1 fa 05	 sar	 edx, 5
  0003d	8b ca		 mov	 ecx, edx
  0003f	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00042	03 ca		 add	 ecx, edx

; 1614 : 			{	// need more room, try to get it
; 1615 : 			if (max_size() - size() < _Count)

  00044	2b c1		 sub	 eax, ecx
  00046	3b c6		 cmp	 eax, esi
  00048	72 1a		 jb	 SHORT $LN25@Reserve

; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));

  0004a	8d 04 31	 lea	 eax, DWORD PTR [ecx+esi]
  0004d	8b cf		 mov	 ecx, edi
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IBEII@Z ; std::vector<packet_item,std::allocator<packet_item> >::_Grow_to
  00055	50		 push	 eax
  00056	8b cf		 mov	 ecx, edi
  00058	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IAEXI@Z ; std::vector<packet_item,std::allocator<packet_item> >::_Reallocate
$LN2@Reserve:
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx

; 1618 : 			}
; 1619 : 		}

  00060	5d		 pop	 ebp
  00061	c2 04 00	 ret	 4
$LN25@Reserve:

; 1620 : 
; 1621 : 	void _Tidy()
; 1622 : 		{	// free all storage
; 1623 : 		if (this->_Myfirst != pointer())
; 1624 : 			{	// something to free, destroy and deallocate it
; 1625 : 			this->_Orphan_all();
; 1626 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1627 : 			this->_Getal().deallocate(this->_Myfirst,
; 1628 : 				this->_Myend - this->_Myfirst);
; 1629 : 			this->_Myfirst = pointer();
; 1630 : 			this->_Mylast = pointer();
; 1631 : 			this->_Myend = pointer();
; 1632 : 			}
; 1633 : 		}
; 1634 : 
; 1635 : 	template<class _Iter>
; 1636 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1637 : 		{	// copy initializing [_First, _Last), using allocator
; 1638 : 		_Alty _Alval(this->_Getal());
; 1639 : 		return (_Uninitialized_copy(_First, _Last,
; 1640 : 			_Ptr, _Alval));
; 1641 : 		}
; 1642 : 
; 1643 : 	template<class _Iter>
; 1644 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1645 : 		{	// move initializing [_First, _Last), using allocator
; 1646 : 		_Alty _Alval(this->_Getal());
; 1647 : 		return (_Uninitialized_move(_First, _Last,
; 1648 : 			_Ptr, _Alval));
; 1649 : 		}
; 1650 : 
; 1651 : 	iterator _Insert_n(const_iterator _Where,
; 1652 : 		size_type _Count, const value_type& _Val)
; 1653 : 		{	// insert _Count * _Val at _Where
; 1654 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1655 : 		if (_VICONT(_Where) != this
; 1656 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1657 : 			|| this->_Mylast < _VIPTR(_Where))
; 1658 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1659 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1660 : 
; 1661 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1662 : 		if (_Count == 0)
; 1663 : 			;
; 1664 : 		else if (_Unused_capacity() < _Count)
; 1665 : 			{	// not enough room, reallocate
; 1666 : 			if (max_size() - size() < _Count)
; 1667 : 				_Xlen();	// result too long
; 1668 : 
; 1669 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1670 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1671 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst;
; 1672 : 			int _Ncopied = 0;
; 1673 : 
; 1674 : 			_TRY_BEGIN
; 1675 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1676 : 				_STD addressof(_Val));	// add new stuff
; 1677 : 			++_Ncopied;
; 1678 : 			_Umove(this->_Myfirst, _VIPTR(_Where),
; 1679 : 				_Newvec);	// copy prefix
; 1680 : 			++_Ncopied;
; 1681 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1682 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1683 : 			_CATCH_ALL
; 1684 : 			if (1 < _Ncopied)
; 1685 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1686 : 			if (0 < _Ncopied)
; 1687 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1688 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1689 : 			_RERAISE;
; 1690 : 			_CATCH_END
; 1691 : 
; 1692 : 			_Count += size();
; 1693 : 			if (this->_Myfirst != pointer())
; 1694 : 				{	// destroy and deallocate old array
; 1695 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1696 : 				this->_Getal().deallocate(this->_Myfirst,
; 1697 : 					this->_Myend - this->_Myfirst);
; 1698 : 				}
; 1699 : 
; 1700 : 			this->_Orphan_all();
; 1701 : 			this->_Myend = _Newvec + _Capacity;
; 1702 : 			this->_Mylast = _Newvec + _Count;
; 1703 : 			this->_Myfirst = _Newvec;
; 1704 : 			}
; 1705 : 		else if ((size_type)(this->_Mylast - _VIPTR(_Where))
; 1706 : 			< _Count)
; 1707 : 			{	// new stuff spills off end
; 1708 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1709 : 
; 1710 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1711 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1712 : 
; 1713 : 			_TRY_BEGIN
; 1714 : 			_Ufill(this->_Mylast,
; 1715 : 				_Count - (this->_Mylast - _VIPTR(_Where)),
; 1716 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1717 : 			_CATCH_ALL
; 1718 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1719 : 				this->_Mylast + _Count);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			this->_Mylast += _Count;
; 1724 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1725 : 			_STD fill(_VIPTR(_Where), this->_Mylast - _Count,
; 1726 : 				_Tmp);	// insert up to old end
; 1727 : 			}
; 1728 : 		else
; 1729 : 			{	// new stuff can all be assigned
; 1730 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1731 : 
; 1732 : 			pointer _Oldend = this->_Mylast;
; 1733 : 			this->_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1734 : 				this->_Mylast);	// copy suffix
; 1735 : 
; 1736 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1737 : 			_Copy_backward(_VIPTR(_Where), _Oldend - _Count,
; 1738 : 				_Oldend);	// copy hole
; 1739 : 			_STD fill(_VIPTR(_Where),
; 1740 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1741 : 			}
; 1742 : 		return (begin() + _Off);
; 1743 : 		}
; 1744 : 
; 1745 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1746 : 		{	// copy initializing _Count * _Val, using allocator
; 1747 : 		_Alty _Alval(this->_Getal());
; 1748 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, _Alval);
; 1749 : 		return (_Ptr + _Count);
; 1750 : 		}
; 1751 : 
; 1752 : 	__declspec(noreturn) void _Xlen() const
; 1753 : 		{	// report a length_error
; 1754 : 		_Xlength_error("vector<T> too long");

  00064	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00069	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN27@Reserve:
$LN24@Reserve:
  0006e	cc		 int	 3
?_Reserve@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IAEXI@Z ENDP ; std::vector<packet_item,std::allocator<packet_item> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Ptr$2 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Size$1$ = 8						; size = 4
__Cat$3 = 8						; size = 1
__Count$ = 8						; size = 4
__Alval$4 = 11						; size = 1
?_Reallocate@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IAEXI@Z PROC ; std::vector<packet_item,std::allocator<packet_item> >::_Reallocate, COMDAT
; _this$ = ecx

; 1587 : 		{	// move to array of exactly _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Reallocate@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
; File a:\vs\vc\include\xmemory0

; 25   : 	if (_Count == 0)

  0002d	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00030	33 f6		 xor	 esi, esi
  00032	89 75 ec	 mov	 DWORD PTR __Ptr$2[ebp], esi
  00035	85 db		 test	 ebx, ebx
  00037	74 22		 je	 SHORT $LN16@Reallocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00039	81 fb 16 b2 90
	05		 cmp	 ebx, 93368854		; 0590b216H
  0003f	77 15		 ja	 SHORT $LN15@Reallocate
  00041	6b c3 2e	 imul	 eax, ebx, 46
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0004a	8b f0		 mov	 esi, eax
  0004c	83 c4 04	 add	 esp, 4
  0004f	89 75 ec	 mov	 DWORD PTR __Ptr$2[ebp], esi
  00052	85 f6		 test	 esi, esi
  00054	75 05		 jne	 SHORT $LN16@Reallocate
$LN15@Reallocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00056	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN60@Reallocate:
$LN16@Reallocate:
; File a:\vs\vc\include\xmemory

; 484  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  0005b	ff 75 08	 push	 DWORD PTR __Cat$3[ebp]
  0005e	8d 45 0b	 lea	 eax, DWORD PTR __Alval$4[ebp]
; File a:\vs\vc\include\vector

; 1590 : 		_TRY_BEGIN

  00061	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File a:\vs\vc\include\xmemory

; 484  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00068	6a 00		 push	 0
  0006a	50		 push	 eax
  0006b	56		 push	 esi
  0006c	ff 77 04	 push	 DWORD PTR [edi+4]
  0006f	ff 37		 push	 DWORD PTR [edi]
  00071	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUpacket_item@@PAU1@V?$allocator@Upacket_item@@@std@@U1@@std@@YAPAUpacket_item@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<packet_item *,packet_item *,std::allocator<packet_item>,packet_item>
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00076	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00079	b8 c9 42 16 b2	 mov	 eax, -1307163959	; b21642c9H
  0007e	2b 0f		 sub	 ecx, DWORD PTR [edi]
; File a:\vs\vc\include\xmemory

; 484  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00080	83 c4 18	 add	 esp, 24			; 00000018H
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00083	f7 e9		 imul	 ecx
  00085	03 d1		 add	 edx, ecx
  00087	c1 fa 05	 sar	 edx, 5
  0008a	8b c2		 mov	 eax, edx
  0008c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0008f	03 c2		 add	 eax, edx
  00091	89 45 08	 mov	 DWORD PTR __Size$1$[ebp], eax

; 1595 : 		_CATCH_END
; 1596 : 
; 1597 : 		size_type _Size = size();
; 1598 : 		if (this->_Myfirst != pointer())

  00094	8b 07		 mov	 eax, DWORD PTR [edi]
  00096	85 c0		 test	 eax, eax
  00098	74 09		 je	 SHORT $LN54@Reallocate
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000a0	83 c4 04	 add	 esp, 4
$LN54@Reallocate:
; File a:\vs\vc\include\vector

; 1606 : 		this->_Myend = _Ptr + _Count;

  000a3	6b c3 2e	 imul	 eax, ebx, 46

; 1607 : 		this->_Mylast = _Ptr + _Size;
; 1608 : 		this->_Myfirst = _Ptr;

  000a6	89 37		 mov	 DWORD PTR [edi], esi
  000a8	03 c6		 add	 eax, esi
  000aa	89 47 08	 mov	 DWORD PTR [edi+8], eax
  000ad	6b 45 08 2e	 imul	 eax, DWORD PTR __Size$1$[ebp], 46
  000b1	03 c6		 add	 eax, esi
  000b3	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1609 : 		}

  000b6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000b9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c0	59		 pop	 ecx
  000c1	5f		 pop	 edi
  000c2	5e		 pop	 esi
  000c3	5b		 pop	 ebx
  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c2 04 00	 ret	 4
__catch$?_Reallocate@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IAEXI@Z$0:
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  000ca	ff 75 ec	 push	 DWORD PTR __Ptr$2[ebp]
  000cd	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000d2	83 c4 04	 add	 esp, 4
; File a:\vs\vc\include\vector

; 1594 : 		_RERAISE;

  000d5	6a 00		 push	 0
  000d7	6a 00		 push	 0
  000d9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN61@Reallocate:
$LN59@Reallocate:
  000de	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IAEXI@Z ENDP ; std::vector<packet_item,std::allocator<packet_item> >::_Reallocate
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IBEII@Z PROC ; std::vector<packet_item,std::allocator<packet_item> >::_Grow_to, COMDAT
; _this$ = ecx

; 1571 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1010 : 		return (this->_Myend - this->_Myfirst);

  00004	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00007	b8 c9 42 16 b2	 mov	 eax, -1307163959	; b21642c9H
  0000c	2b 31		 sub	 esi, DWORD PTR [ecx]
  0000e	f7 ee		 imul	 esi

; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00010	b8 16 b2 90 05	 mov	 eax, 93368854		; 0590b216H

; 1010 : 		return (this->_Myend - this->_Myfirst);

  00015	03 d6		 add	 edx, esi
  00017	c1 fa 05	 sar	 edx, 5
  0001a	8b f2		 mov	 esi, edx
  0001c	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0001f	03 f2		 add	 esi, edx

; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00021	8b ce		 mov	 ecx, esi
  00023	d1 e9		 shr	 ecx, 1
  00025	2b c1		 sub	 eax, ecx
  00027	3b c6		 cmp	 eax, esi
  00029	73 10		 jae	 SHORT $LN4@Grow_to
  0002b	33 f6		 xor	 esi, esi

; 1576 : 		if (_Capacity < _Count)

  0002d	3b 75 08	 cmp	 esi, DWORD PTR __Count$[ebp]
  00030	0f 42 75 08	 cmovb	 esi, DWORD PTR __Count$[ebp]

; 1577 : 			_Capacity = _Count;
; 1578 : 		return (_Capacity);

  00034	8b c6		 mov	 eax, esi
  00036	5e		 pop	 esi

; 1579 : 		}

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
$LN4@Grow_to:

; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0003b	03 f1		 add	 esi, ecx

; 1576 : 		if (_Capacity < _Count)

  0003d	3b 75 08	 cmp	 esi, DWORD PTR __Count$[ebp]
  00040	0f 42 75 08	 cmovb	 esi, DWORD PTR __Count$[ebp]

; 1577 : 			_Capacity = _Count;
; 1578 : 		return (_Capacity);

  00044	8b c6		 mov	 eax, esi
  00046	5e		 pop	 esi

; 1579 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?_Grow_to@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IBEII@Z ENDP ; std::vector<packet_item,std::allocator<packet_item> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Destroy@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IAEXPAUpacket_item@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IAEXPAUpacket_item@@0@Z PROC ; std::vector<packet_item,std::allocator<packet_item> >::_Destroy, COMDAT
; _this$ = ecx

; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IAEXPAUpacket_item@@0@Z ENDP ; std::vector<packet_item,std::allocator<packet_item> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?clear@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEXXZ PROC ; std::vector<packet_item,std::allocator<packet_item> >::clear, COMDAT
; _this$ = ecx

; 1508 : 		this->_Orphan_all();
; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1510 : 		this->_Mylast = this->_Myfirst;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1511 : 		}

  00005	c3		 ret	 0
?clear@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEXXZ ENDP ; std::vector<packet_item,std::allocator<packet_item> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Pop_back_n@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Pop_back_n@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEXI@Z PROC ; std::vector<packet_item,std::allocator<packet_item> >::_Pop_back_n, COMDAT
; _this$ = ecx

; 1495 : 		{	// erase _Count elements at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1496 : 		pointer _Ptr = this->_Mylast - _Count;

  00003	6b 45 08 d2	 imul	 eax, DWORD PTR __Count$[ebp], -46

; 1497 : 
; 1498 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1499 : 		_Orphan_range(_Ptr, this->_Mylast);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 
; 1502 : 		_Destroy(_Ptr, this->_Mylast);
; 1503 : 		this->_Mylast = _Ptr;

  00007	01 41 04	 add	 DWORD PTR [ecx+4], eax

; 1504 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?_Pop_back_n@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEXI@Z ENDP ; std::vector<packet_item,std::allocator<packet_item> >::_Pop_back_n
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??A?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEAAUpacket_item@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEAAUpacket_item@@I@Z PROC ; std::vector<packet_item,std::allocator<packet_item> >::operator[], COMDAT
; _this$ = ecx

; 1197 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1198 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1199 : 		if (size() <= _Pos)
; 1200 : 			{	// report error
; 1201 : 			_DEBUG_ERROR("vector subscript out of range");
; 1202 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1203 : 			}
; 1204 : 
; 1205 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1206 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1207 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1208 : 
; 1209 : 		return (*(this->_Myfirst + _Pos));

  00003	6b 45 08 2e	 imul	 eax, DWORD PTR __Pos$[ebp], 46
  00007	03 01		 add	 eax, DWORD PTR [ecx]

; 1210 : 		}

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
??A?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEAAUpacket_item@@I@Z ENDP ; std::vector<packet_item,std::allocator<packet_item> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?max_size@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QBEIXZ PROC ; std::vector<packet_item,std::allocator<packet_item> >::max_size, COMDAT
; _this$ = ecx

; 1153 : 		return (this->_Getal().max_size());

  00000	b8 16 b2 90 05	 mov	 eax, 93368854		; 0590b216H

; 1154 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QBEIXZ ENDP ; std::vector<packet_item,std::allocator<packet_item> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?size@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QBEIXZ PROC ; std::vector<packet_item,std::allocator<packet_item> >::size, COMDAT
; _this$ = ecx

; 1147 : 		{	// return length of sequence

  00000	56		 push	 esi

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00001	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00004	b8 c9 42 16 b2	 mov	 eax, -1307163959	; b21642c9H
  00009	2b 31		 sub	 esi, DWORD PTR [ecx]
  0000b	f7 ee		 imul	 esi
  0000d	03 d6		 add	 edx, esi
  0000f	c1 fa 05	 sar	 edx, 5
  00012	8b c2		 mov	 eax, edx
  00014	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00017	03 c2		 add	 eax, edx
  00019	5e		 pop	 esi

; 1149 : 		}

  0001a	c3		 ret	 0
?size@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QBEIXZ ENDP ; std::vector<packet_item,std::allocator<packet_item> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\vector
;	COMDAT ?resize@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$2 = 8						; size = 1
__Newsize$ = 8						; size = 4
__Alval$3 = 11						; size = 1
?resize@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEXI@Z PROC ; std::vector<packet_item,std::allocator<packet_item> >::resize, COMDAT
; _this$ = ecx

; 1100 : 		{	// determine new length, padding as needed

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?resize@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b d9		 mov	 ebx, ecx
  0002d	89 5d ec	 mov	 DWORD PTR _this$[ebp], ebx

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00030	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00033	b8 c9 42 16 b2	 mov	 eax, -1307163959	; b21642c9H
  00038	2b 33		 sub	 esi, DWORD PTR [ebx]

; 1101 : 		if (_Newsize < size())

  0003a	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  0003d	f7 ee		 imul	 esi
  0003f	03 d6		 add	 edx, esi
  00041	c1 fa 05	 sar	 edx, 5
  00044	8b ca		 mov	 ecx, edx
  00046	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00049	03 ca		 add	 ecx, edx

; 1101 : 		if (_Newsize < size())

  0004b	3b cf		 cmp	 ecx, edi
  0004d	76 1c		 jbe	 SHORT $LN33@resize

; 1149 : 		}
; 1150 : 
; 1151 : 	size_type max_size() const _NOEXCEPT
; 1152 : 		{	// return maximum possible length of sequence
; 1153 : 		return (this->_Getal().max_size());
; 1154 : 		}
; 1155 : 
; 1156 : 	bool empty() const _NOEXCEPT
; 1157 : 		{	// test if sequence is empty
; 1158 : 		return (this->_Myfirst == this->_Mylast);
; 1159 : 		}
; 1160 : 
; 1161 : 	_Alloc get_allocator() const _NOEXCEPT
; 1162 : 		{	// return allocator object for values
; 1163 : 		return (this->_Getal());
; 1164 : 		}
; 1165 : 
; 1166 : 	const_reference at(size_type _Pos) const
; 1167 : 		{	// subscript nonmutable sequence with checking
; 1168 : 		if (size() <= _Pos)
; 1169 : 			_Xran();
; 1170 : 		return (*(this->_Myfirst + _Pos));
; 1171 : 		}
; 1172 : 
; 1173 : 	reference at(size_type _Pos)
; 1174 : 		{	// subscript mutable sequence with checking
; 1175 : 		if (size() <= _Pos)
; 1176 : 			_Xran();
; 1177 : 		return (*(this->_Myfirst + _Pos));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reference operator[](size_type _Pos) const
; 1181 : 		{	// subscript nonmutable sequence
; 1182 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1183 : 		if (size() <= _Pos)
; 1184 : 			{	// report error
; 1185 : 			_DEBUG_ERROR("vector subscript out of range");
; 1186 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1187 : 			}
; 1188 : 
; 1189 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1190 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1191 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1192 : 
; 1193 : 		return (*(this->_Myfirst + _Pos));
; 1194 : 		}
; 1195 : 
; 1196 : 	reference operator[](size_type _Pos)
; 1197 : 		{	// subscript mutable sequence
; 1198 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1199 : 		if (size() <= _Pos)
; 1200 : 			{	// report error
; 1201 : 			_DEBUG_ERROR("vector subscript out of range");
; 1202 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1203 : 			}
; 1204 : 
; 1205 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1206 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1207 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1208 : 
; 1209 : 		return (*(this->_Myfirst + _Pos));
; 1210 : 		}
; 1211 : 
; 1212 : 	pointer data() _NOEXCEPT
; 1213 : 		{	// return address of first element
; 1214 : 		return (this->_Myfirst);
; 1215 : 		}
; 1216 : 
; 1217 : 	const_pointer data() const _NOEXCEPT
; 1218 : 		{	// return address of first element
; 1219 : 		return (this->_Myfirst);
; 1220 : 		}
; 1221 : 
; 1222 : 	reference front()
; 1223 : 		{	// return first element of mutable sequence
; 1224 : 		return (*begin());
; 1225 : 		}
; 1226 : 
; 1227 : 	const_reference front() const
; 1228 : 		{	// return first element of nonmutable sequence
; 1229 : 		return (*begin());
; 1230 : 		}
; 1231 : 
; 1232 : 	reference back()
; 1233 : 		{	// return last element of mutable sequence
; 1234 : 		return (*(end() - 1));
; 1235 : 		}
; 1236 : 
; 1237 : 	const_reference back() const
; 1238 : 		{	// return last element of nonmutable sequence
; 1239 : 		return (*(end() - 1));
; 1240 : 		}
; 1241 : 
; 1242 : 	void push_back(const value_type& _Val)
; 1243 : 		{	// insert element at end
; 1244 : 		if (_Inside(_STD addressof(_Val)))
; 1245 : 			{	// push back an element
; 1246 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1247 : 			if (this->_Mylast == this->_Myend)
; 1248 : 				_Reserve(1);
; 1249 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1250 : 			this->_Getal().construct(this->_Mylast,
; 1251 : 				this->_Myfirst[_Idx]);
; 1252 : 			++this->_Mylast;
; 1253 : 			}
; 1254 : 		else
; 1255 : 			{	// push back a non-element
; 1256 : 			if (this->_Mylast == this->_Myend)
; 1257 : 				_Reserve(1);
; 1258 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1259 : 			this->_Getal().construct(this->_Mylast,
; 1260 : 				_Val);
; 1261 : 			++this->_Mylast;
; 1262 : 			}
; 1263 : 		}
; 1264 : 
; 1265 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1266 : 	void pop_back()
; 1267 : 		{	// erase element at end
; 1268 : 		if (empty())
; 1269 : 			_DEBUG_ERROR("vector empty before pop");
; 1270 : 		else
; 1271 : 			{	// erase last element
; 1272 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1273 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1274 : 			--this->_Mylast;
; 1275 : 			}
; 1276 : 		}
; 1277 : 
; 1278 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1279 : 	void pop_back()
; 1280 : 		{	// erase element at end
; 1281 : 		this->_Getal().destroy(this->_Mylast - 1);
; 1282 : 		--this->_Mylast;
; 1283 : 		}
; 1284 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1285 : 
; 1286 : 	template<class _Iter>
; 1287 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1288 : 			void>::type
; 1289 : 		assign(_Iter _First, _Iter _Last)
; 1290 : 		{	// assign [_First, _Last)
; 1291 : 		clear();
; 1292 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1293 : 		}
; 1294 : 
; 1295 : 	template<class _Iter>
; 1296 : 		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
; 1297 : 		{	// assign [_First, _Last), input iterators
; 1298 : 		for (; _First != _Last; ++_First)
; 1299 : 			emplace_back(*_First);
; 1300 : 		}
; 1301 : 
; 1302 : 	template<class _Iter>
; 1303 : 		void _Assign(_Iter _First, _Iter _Last, forward_iterator_tag)
; 1304 : 		{	// assign [_First, _Last), forward iterators
; 1305 : 		if (_First == _Last)
; 1306 : 			return;	// nothing to do
; 1307 : 
; 1308 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1309 : 
; 1310 : 		if (capacity() < _Newsize)
; 1311 : 			{	// need more room, try to get it
; 1312 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1313 : 			_Tidy();
; 1314 : 			_Buy(_Newcapacity);
; 1315 : 			}
; 1316 : 
; 1317 : 		this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
; 1318 : 		}
; 1319 : 
; 1320 : 	void assign(size_type _Count, const value_type& _Val)
; 1321 : 		{	// assign _Count * _Val
; 1322 : 		clear();
; 1323 : 		insert(begin(), _Count, _Val);
; 1324 : 		}
; 1325 : 
; 1326 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1327 : 		{	// insert _Val at _Where
; 1328 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1329 : 		}
; 1330 : 
; 1331 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1332 : 		const _Ty& _Val)
; 1333 : 		{	// insert _Count * _Val at _Where
; 1334 : 		return (_Insert_n(_Where, _Count, _Val));
; 1335 : 		}
; 1336 : 
; 1337 : 	template<class _Iter>
; 1338 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1339 : 			iterator>::type
; 1340 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1341 : 		{	// insert [_First, _Last) at _Where
; 1342 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1343 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1344 : 		return (begin() + _Off);
; 1345 : 		}
; 1346 : 
; 1347 : 	template<class _Iter>
; 1348 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1349 : 			input_iterator_tag)
; 1350 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1351 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1352 : 
; 1353 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1354 : 		if (size() < _Off)
; 1355 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1356 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1357 : 
; 1358 : 		if (_First != _Last)
; 1359 : 			{	// worth doing, gather at end and rotate into place
; 1360 : 			size_type _Oldsize = size();
; 1361 : 
; 1362 : 			_TRY_BEGIN
; 1363 : 			for (; _First != _Last; ++_First)
; 1364 : 				push_back(*_First);	// append
; 1365 : 
; 1366 : 			_CATCH_ALL
; 1367 : 			erase(begin() + _Oldsize, end());
; 1368 : 			_RERAISE;
; 1369 : 			_CATCH_END
; 1370 : 
; 1371 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1372 : 			}
; 1373 : 		}
; 1374 : 
; 1375 : 	template<class _Iter>
; 1376 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1377 : 			forward_iterator_tag)
; 1378 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_VICONT(_Where) != this
; 1381 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1382 : 			|| this->_Mylast < _VIPTR(_Where))
; 1383 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1384 : 		_DEBUG_RANGE(_First, _Last);
; 1385 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1386 : 
; 1387 : 		size_type _Count = 0;
; 1388 : 		_Distance(_First, _Last, _Count);
; 1389 : 
; 1390 : 		if (_Count == 0)
; 1391 : 			;
; 1392 : 		else if (_Unused_capacity() < _Count)
; 1393 : 			{	// not enough room, reallocate
; 1394 : 			if (max_size() - size() < _Count)
; 1395 : 				_Xlen();	// result too long
; 1396 : 
; 1397 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1398 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1399 : 			pointer _Ptr = _Newvec;
; 1400 : 
; 1401 : 			_TRY_BEGIN
; 1402 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1403 : 				_Newvec);	// copy prefix
; 1404 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1405 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1406 : 				_Ptr);	// copy suffix
; 1407 : 			_CATCH_ALL
; 1408 : 			_Destroy(_Newvec, _Ptr);
; 1409 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1410 : 			_RERAISE;
; 1411 : 			_CATCH_END
; 1412 : 
; 1413 : 			_Count += size();
; 1414 : 			if (this->_Myfirst != pointer())
; 1415 : 				{	// destroy and deallocate old array
; 1416 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1417 : 				this->_Getal().deallocate(this->_Myfirst,
; 1418 : 					this->_Myend - this->_Myfirst);
; 1419 : 				}
; 1420 : 
; 1421 : 			this->_Orphan_all();
; 1422 : 			this->_Myend = _Newvec + _Capacity;
; 1423 : 			this->_Mylast = _Newvec + _Count;
; 1424 : 			this->_Myfirst = _Newvec;
; 1425 : 			}
; 1426 : 		else
; 1427 : 			{	// new stuff fits, append and rotate into place
; 1428 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1429 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1430 : 				this->_Mylast + _Count);
; 1431 : 			this->_Mylast += _Count;
; 1432 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1433 : 			}
; 1434 : 		}
; 1435 : 
; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 	iterator erase(const_iterator _Where)
; 1438 : 		{	// erase element at where
; 1439 : 		if (_VICONT(_Where) != this
; 1440 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1441 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1442 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1443 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1444 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1445 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1446 : 		--this->_Mylast;
; 1447 : 		return (_Make_iter(_Where));
; 1448 : 		}
; 1449 : 
; 1450 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 	iterator erase(const_iterator _Where)
; 1452 : 		{	// erase element at where
; 1453 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1454 : 			_VIPTR(_Where));
; 1455 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1456 : 		--this->_Mylast;
; 1457 : 		return (_Make_iter(_Where));
; 1458 : 		}
; 1459 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1460 : 
; 1461 : 	iterator erase(const_iterator _First_arg,
; 1462 : 		const_iterator _Last_arg)
; 1463 : 		{	// erase [_First, _Last)
; 1464 : 		if (_First_arg == begin() && _Last_arg == end())
; 1465 : 			clear();
; 1466 : 		else if (_First_arg != _Last_arg)
; 1467 : 			{	// clear partial
; 1468 : 			iterator _First = _Make_iter(_First_arg);
; 1469 : 			iterator _Last = _Make_iter(_Last_arg);
; 1470 : 
; 1471 : 			if (_First != _Last)
; 1472 : 				{	// worth doing, copy down over hole
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 				if (_Last < _First || _VICONT(_First) != this
; 1475 : 					|| _VIPTR(_First) < this->_Myfirst
; 1476 : 					|| this->_Mylast < _VIPTR(_Last))
; 1477 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1478 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1479 : 					_VIPTR(_First));
; 1480 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1484 : 					_VIPTR(_First));
; 1485 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1486 : 
; 1487 : 				_Destroy(_Ptr, this->_Mylast);
; 1488 : 				this->_Mylast = _Ptr;
; 1489 : 				}
; 1490 : 			}
; 1491 : 		return (_Make_iter(_First_arg));
; 1492 : 		}
; 1493 : 
; 1494 : 	void _Pop_back_n(size_type _Count)
; 1495 : 		{	// erase _Count elements at end
; 1496 : 		pointer _Ptr = this->_Mylast - _Count;
; 1497 : 
; 1498 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1499 : 		_Orphan_range(_Ptr, this->_Mylast);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 
; 1502 : 		_Destroy(_Ptr, this->_Mylast);
; 1503 : 		this->_Mylast = _Ptr;

  0004f	2b f9		 sub	 edi, ecx
$LN34@resize:

; 1113 : 			_CATCH_END
; 1114 : 			this->_Mylast += _Newsize - size();

  00051	6b c7 2e	 imul	 eax, edi, 46
  00054	01 43 04	 add	 DWORD PTR [ebx+4], eax
$LN2@resize:

; 1115 : 			}
; 1116 : 		}

  00057	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0005a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00061	59		 pop	 ecx
  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
$LN33@resize:

; 1102 : 			_Pop_back_n(size() - _Newsize);
; 1103 : 		else if (size() < _Newsize)

  0006b	73 ea		 jae	 SHORT $LN2@resize

; 1104 : 			{	// pad as needed
; 1105 : 			_Alty _Alval(this->_Getal());
; 1106 : 			_Reserve(_Newsize - size());

  0006d	8b c7		 mov	 eax, edi
  0006f	2b c1		 sub	 eax, ecx
  00071	8b cb		 mov	 ecx, ebx
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 ?_Reserve@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IAEXI@Z ; std::vector<packet_item,std::allocator<packet_item> >::_Reserve

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00079	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  0007c	b8 c9 42 16 b2	 mov	 eax, -1307163959	; b21642c9H
; File a:\vs\vc\include\xmemory

; 692  : 		_Val_type(_First), _Ptr_cat(_First, _First));

  00081	ff 75 08	 push	 DWORD PTR __Cat$2[ebp]
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00084	8b ce		 mov	 ecx, esi

; 1107 : 			_TRY_BEGIN

  00086	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  0008d	2b 0b		 sub	 ecx, DWORD PTR [ebx]
  0008f	f7 e9		 imul	 ecx
; File a:\vs\vc\include\xmemory

; 692  : 		_Val_type(_First), _Ptr_cat(_First, _First));

  00091	6a 00		 push	 0
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00093	03 d1		 add	 edx, ecx

; 1108 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1109 : 				_Alval);

  00095	8b cf		 mov	 ecx, edi

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00097	c1 fa 05	 sar	 edx, 5
  0009a	8b c2		 mov	 eax, edx
  0009c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0009f	03 c2		 add	 eax, edx

; 1108 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1109 : 				_Alval);

  000a1	2b c8		 sub	 ecx, eax
; File a:\vs\vc\include\xmemory

; 692  : 		_Val_type(_First), _Ptr_cat(_First, _First));

  000a3	8d 45 0b	 lea	 eax, DWORD PTR __Alval$3[ebp]
  000a6	50		 push	 eax
  000a7	51		 push	 ecx
  000a8	56		 push	 esi
  000a9	e8 00 00 00 00	 call	 ??$_Uninit_def_fill_n@PAUpacket_item@@IV?$allocator@Upacket_item@@@std@@U1@@std@@YAXPAUpacket_item@@IAAU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_def_fill_n<packet_item *,unsigned int,std::allocator<packet_item>,packet_item>
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  000ae	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000b1	b8 c9 42 16 b2	 mov	 eax, -1307163959	; b21642c9H
  000b6	2b 0b		 sub	 ecx, DWORD PTR [ebx]
; File a:\vs\vc\include\xmemory

; 692  : 		_Val_type(_First), _Ptr_cat(_First, _First));

  000b8	83 c4 14	 add	 esp, 20			; 00000014H
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  000bb	f7 e9		 imul	 ecx
  000bd	03 d1		 add	 edx, ecx
  000bf	c1 fa 05	 sar	 edx, 5
  000c2	8b c2		 mov	 eax, edx
  000c4	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000c7	03 c2		 add	 eax, edx

; 1113 : 			_CATCH_END
; 1114 : 			this->_Mylast += _Newsize - size();

  000c9	2b f8		 sub	 edi, eax
  000cb	eb 84		 jmp	 SHORT $LN34@resize
__catch$?resize@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEXI@Z$0:

; 1110 : 			_CATCH_ALL
; 1111 : 			_Tidy();

  000cd	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000d0	e8 00 00 00 00	 call	 ?_Tidy@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@IAEXXZ ; std::vector<packet_item,std::allocator<packet_item> >::_Tidy

; 1112 : 			_RERAISE;

  000d5	6a 00		 push	 0
  000d7	6a 00		 push	 0
  000d9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN35@resize:
$LN32@resize:
  000de	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?resize@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?resize@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?resize@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEXI@Z ENDP ; std::vector<packet_item,std::allocator<packet_item> >::resize
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QBEIXZ PROC ; std::vector<packet_item,std::allocator<packet_item> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 1014 : 		{	// micro-optimization for capacity() - size()

  00000	56		 push	 esi

; 1015 : 		return (this->_Myend - this->_Mylast);

  00001	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00004	b8 c9 42 16 b2	 mov	 eax, -1307163959	; b21642c9H
  00009	2b 71 04	 sub	 esi, DWORD PTR [ecx+4]
  0000c	f7 ee		 imul	 esi
  0000e	03 d6		 add	 edx, esi
  00010	c1 fa 05	 sar	 edx, 5
  00013	8b c2		 mov	 eax, edx
  00015	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00018	03 c2		 add	 eax, edx
  0001a	5e		 pop	 esi

; 1016 : 		}

  0001b	c3		 ret	 0
?_Unused_capacity@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QBEIXZ ENDP ; std::vector<packet_item,std::allocator<packet_item> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?capacity@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QBEIXZ PROC ; std::vector<packet_item,std::allocator<packet_item> >::capacity, COMDAT
; _this$ = ecx

; 1009 : 		{	// return current length of allocated storage

  00000	56		 push	 esi

; 1010 : 		return (this->_Myend - this->_Myfirst);

  00001	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00004	b8 c9 42 16 b2	 mov	 eax, -1307163959	; b21642c9H
  00009	2b 31		 sub	 esi, DWORD PTR [ecx]
  0000b	f7 ee		 imul	 esi
  0000d	03 d6		 add	 edx, esi
  0000f	c1 fa 05	 sar	 edx, 5
  00012	8b c2		 mov	 eax, edx
  00014	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00017	03 c2		 add	 eax, edx
  00019	5e		 pop	 esi

; 1011 : 		}

  0001a	c3		 ret	 0
?capacity@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QBEIXZ ENDP ; std::vector<packet_item,std::allocator<packet_item> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
;	COMDAT ??1?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAE@XZ PROC ; std::vector<packet_item,std::allocator<packet_item> >::~vector<packet_item,std::allocator<packet_item> >, COMDAT
; _this$ = ecx

; 944  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 947  : 
; 948  : 	_Myt& operator=(const _Myt& _Right)
; 949  : 		{	// assign _Right
; 950  : 		if (this != &_Right)
; 951  : 			{	// different, assign it
; 952  : 			if (this->_Getal() != _Right._Getal()
; 953  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 954  : 				{	// change allocator before copying
; 955  : 				_Tidy();
; 956  : 				this->_Change_alloc(_Right._Getal());
; 957  : 				}
; 958  : 
; 959  : 			this->_Orphan_all();
; 960  : 
; 961  : 			if (_Right.empty())
; 962  : 				clear();	// new sequence empty, erase existing sequence
; 963  : 			else if (_Right.size() <= size())
; 964  : 				{	// enough elements, copy new and destroy old
; 965  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst,
; 966  : 					_Right._Mylast, this->_Myfirst);	// copy new
; 967  : 				_Destroy(_Ptr, this->_Mylast);	// destroy old
; 968  : 				this->_Mylast = this->_Myfirst + _Right.size();
; 969  : 				}
; 970  : 			else if (_Right.size() <= capacity())
; 971  : 				{	// enough room, copy and construct new
; 972  : 				pointer _Ptr = _Right._Myfirst + size();
; 973  : 				_Copy_impl(_Right._Myfirst,
; 974  : 					_Ptr, this->_Myfirst);
; 975  : 				this->_Mylast = _Ucopy(_Ptr, _Right._Mylast, this->_Mylast);
; 976  : 				}
; 977  : 			else
; 978  : 				{	// not enough room, allocate new array and construct new
; 979  : 				if (this->_Myfirst != pointer())
; 980  : 					{	// discard old array
; 981  : 					_Destroy(this->_Myfirst, this->_Mylast);
; 982  : 					this->_Getal().deallocate(this->_Myfirst,
; 983  : 						this->_Myend - this->_Myfirst);
; 984  : 					}
; 985  : 				if (_Buy(_Right.size()))
; 986  : 					_TRY_BEGIN
; 987  : 					this->_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 988  : 						this->_Myfirst);
; 989  : 					_CATCH_ALL
; 990  : 					_Tidy();
; 991  : 					_RERAISE;
; 992  : 					_CATCH_END
; 993  : 				}
; 994  : 			}
; 995  : 		return (*this);
; 996  : 		}
; 997  : 
; 998  : 	void reserve(size_type _Count)
; 999  : 		{	// determine new minimum length of allocated storage
; 1000 : 		if (capacity() < _Count)
; 1001 : 			{	// something to do, check and reallocate
; 1002 : 			if (max_size() < _Count)
; 1003 : 				_Xlen();
; 1004 : 			_Reallocate(_Count);
; 1005 : 			}
; 1006 : 		}
; 1007 : 
; 1008 : 	size_type capacity() const _NOEXCEPT
; 1009 : 		{	// return current length of allocated storage
; 1010 : 		return (this->_Myend - this->_Myfirst);
; 1011 : 		}
; 1012 : 
; 1013 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1014 : 		{	// micro-optimization for capacity() - size()
; 1015 : 		return (this->_Myend - this->_Mylast);
; 1016 : 		}
; 1017 : 
; 1018 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1019 : 		{	// micro-optimization for capacity() != size()
; 1020 : 		return (this->_Myend != this->_Mylast);
; 1021 : 		}
; 1022 : 
; 1023 : 	iterator begin() _NOEXCEPT
; 1024 : 		{	// return iterator for beginning of mutable sequence
; 1025 : 		return (iterator(this->_Myfirst, this));
; 1026 : 		}
; 1027 : 
; 1028 : 	const_iterator begin() const _NOEXCEPT
; 1029 : 		{	// return iterator for beginning of nonmutable sequence
; 1030 : 		return (const_iterator(this->_Myfirst, this));
; 1031 : 		}
; 1032 : 
; 1033 : 	iterator end() _NOEXCEPT
; 1034 : 		{	// return iterator for end of mutable sequence
; 1035 : 		return (iterator(this->_Mylast, this));
; 1036 : 		}
; 1037 : 
; 1038 : 	const_iterator end() const _NOEXCEPT
; 1039 : 		{	// return iterator for end of nonmutable sequence
; 1040 : 		return (const_iterator(this->_Mylast, this));
; 1041 : 		}
; 1042 : 
; 1043 : 	iterator _Make_iter(const_iterator _Where) const
; 1044 : 		{	// make iterator from const_iterator
; 1045 : 		return (iterator(_Where._Ptr, this));
; 1046 : 		}
; 1047 : 
; 1048 : 	reverse_iterator rbegin() _NOEXCEPT
; 1049 : 		{	// return iterator for beginning of reversed mutable sequence
; 1050 : 		return (reverse_iterator(end()));
; 1051 : 		}
; 1052 : 
; 1053 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1054 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1055 : 		return (const_reverse_iterator(end()));
; 1056 : 		}
; 1057 : 
; 1058 : 	reverse_iterator rend() _NOEXCEPT
; 1059 : 		{	// return iterator for end of reversed mutable sequence
; 1060 : 		return (reverse_iterator(begin()));
; 1061 : 		}
; 1062 : 
; 1063 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1064 : 		{	// return iterator for end of reversed nonmutable sequence
; 1065 : 		return (const_reverse_iterator(begin()));
; 1066 : 		}
; 1067 : 
; 1068 : 	const_iterator cbegin() const _NOEXCEPT
; 1069 : 		{	// return iterator for beginning of nonmutable sequence
; 1070 : 		return (((const _Myt *)this)->begin());
; 1071 : 		}
; 1072 : 
; 1073 : 	const_iterator cend() const _NOEXCEPT
; 1074 : 		{	// return iterator for end of nonmutable sequence
; 1075 : 		return (((const _Myt *)this)->end());
; 1076 : 		}
; 1077 : 
; 1078 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1079 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1080 : 		return (((const _Myt *)this)->rbegin());
; 1081 : 		}
; 1082 : 
; 1083 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1084 : 		{	// return iterator for end of reversed nonmutable sequence
; 1085 : 		return (((const _Myt *)this)->rend());
; 1086 : 		}
; 1087 : 
; 1088 : 	void shrink_to_fit()
; 1089 : 		{	// reduce capacity
; 1090 : 		if (_Has_unused_capacity())
; 1091 : 			{	// worth shrinking, do it
; 1092 : 			if (empty())
; 1093 : 				_Tidy();
; 1094 : 			else
; 1095 : 				_Reallocate(size());
; 1096 : 			}
; 1097 : 		}
; 1098 : 
; 1099 : 	void resize(size_type _Newsize)
; 1100 : 		{	// determine new length, padding as needed
; 1101 : 		if (_Newsize < size())
; 1102 : 			_Pop_back_n(size() - _Newsize);
; 1103 : 		else if (size() < _Newsize)
; 1104 : 			{	// pad as needed
; 1105 : 			_Alty _Alval(this->_Getal());
; 1106 : 			_Reserve(_Newsize - size());
; 1107 : 			_TRY_BEGIN
; 1108 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1109 : 				_Alval);
; 1110 : 			_CATCH_ALL
; 1111 : 			_Tidy();
; 1112 : 			_RERAISE;
; 1113 : 			_CATCH_END
; 1114 : 			this->_Mylast += _Newsize - size();
; 1115 : 			}
; 1116 : 		}
; 1117 : 
; 1118 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1119 : 		{	// determine new length, padding with _Val elements as needed
; 1120 : 		if (_Newsize < size())
; 1121 : 			_Pop_back_n(size() - _Newsize);
; 1122 : 		else if (size() < _Newsize)
; 1123 : 			{	// pad as needed
; 1124 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1125 : 
; 1126 : 			if (_Inside(_Ptr))
; 1127 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1128 : 				const difference_type _Idx = _Ptr
; 1129 : 					- _STD addressof(*this->_Myfirst);
; 1130 : 				_Reserve(_Newsize - size());
; 1131 : 				_Ptr = _STD addressof(*this->_Myfirst) + _Idx;
; 1132 : 				}
; 1133 : 			else
; 1134 : 				_Reserve(_Newsize - size());
; 1135 : 
; 1136 : 			_TRY_BEGIN
; 1137 : 			_Ufill(this->_Mylast, _Newsize - size(), _Ptr);
; 1138 : 			_CATCH_ALL
; 1139 : 			_Tidy();
; 1140 : 			_RERAISE;
; 1141 : 			_CATCH_END
; 1142 : 			this->_Mylast += _Newsize - size();
; 1143 : 			}
; 1144 : 		}
; 1145 : 
; 1146 : 	size_type size() const _NOEXCEPT
; 1147 : 		{	// return length of sequence
; 1148 : 		return (this->_Mylast - this->_Myfirst);
; 1149 : 		}
; 1150 : 
; 1151 : 	size_type max_size() const _NOEXCEPT
; 1152 : 		{	// return maximum possible length of sequence
; 1153 : 		return (this->_Getal().max_size());
; 1154 : 		}
; 1155 : 
; 1156 : 	bool empty() const _NOEXCEPT
; 1157 : 		{	// test if sequence is empty
; 1158 : 		return (this->_Myfirst == this->_Mylast);
; 1159 : 		}
; 1160 : 
; 1161 : 	_Alloc get_allocator() const _NOEXCEPT
; 1162 : 		{	// return allocator object for values
; 1163 : 		return (this->_Getal());
; 1164 : 		}
; 1165 : 
; 1166 : 	const_reference at(size_type _Pos) const
; 1167 : 		{	// subscript nonmutable sequence with checking
; 1168 : 		if (size() <= _Pos)
; 1169 : 			_Xran();
; 1170 : 		return (*(this->_Myfirst + _Pos));
; 1171 : 		}
; 1172 : 
; 1173 : 	reference at(size_type _Pos)
; 1174 : 		{	// subscript mutable sequence with checking
; 1175 : 		if (size() <= _Pos)
; 1176 : 			_Xran();
; 1177 : 		return (*(this->_Myfirst + _Pos));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reference operator[](size_type _Pos) const
; 1181 : 		{	// subscript nonmutable sequence
; 1182 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1183 : 		if (size() <= _Pos)
; 1184 : 			{	// report error
; 1185 : 			_DEBUG_ERROR("vector subscript out of range");
; 1186 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1187 : 			}
; 1188 : 
; 1189 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1190 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1191 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1192 : 
; 1193 : 		return (*(this->_Myfirst + _Pos));
; 1194 : 		}
; 1195 : 
; 1196 : 	reference operator[](size_type _Pos)
; 1197 : 		{	// subscript mutable sequence
; 1198 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1199 : 		if (size() <= _Pos)
; 1200 : 			{	// report error
; 1201 : 			_DEBUG_ERROR("vector subscript out of range");
; 1202 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1203 : 			}
; 1204 : 
; 1205 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1206 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1207 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1208 : 
; 1209 : 		return (*(this->_Myfirst + _Pos));
; 1210 : 		}
; 1211 : 
; 1212 : 	pointer data() _NOEXCEPT
; 1213 : 		{	// return address of first element
; 1214 : 		return (this->_Myfirst);
; 1215 : 		}
; 1216 : 
; 1217 : 	const_pointer data() const _NOEXCEPT
; 1218 : 		{	// return address of first element
; 1219 : 		return (this->_Myfirst);
; 1220 : 		}
; 1221 : 
; 1222 : 	reference front()
; 1223 : 		{	// return first element of mutable sequence
; 1224 : 		return (*begin());
; 1225 : 		}
; 1226 : 
; 1227 : 	const_reference front() const
; 1228 : 		{	// return first element of nonmutable sequence
; 1229 : 		return (*begin());
; 1230 : 		}
; 1231 : 
; 1232 : 	reference back()
; 1233 : 		{	// return last element of mutable sequence
; 1234 : 		return (*(end() - 1));
; 1235 : 		}
; 1236 : 
; 1237 : 	const_reference back() const
; 1238 : 		{	// return last element of nonmutable sequence
; 1239 : 		return (*(end() - 1));
; 1240 : 		}
; 1241 : 
; 1242 : 	void push_back(const value_type& _Val)
; 1243 : 		{	// insert element at end
; 1244 : 		if (_Inside(_STD addressof(_Val)))
; 1245 : 			{	// push back an element
; 1246 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1247 : 			if (this->_Mylast == this->_Myend)
; 1248 : 				_Reserve(1);
; 1249 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1250 : 			this->_Getal().construct(this->_Mylast,
; 1251 : 				this->_Myfirst[_Idx]);
; 1252 : 			++this->_Mylast;
; 1253 : 			}
; 1254 : 		else
; 1255 : 			{	// push back a non-element
; 1256 : 			if (this->_Mylast == this->_Myend)
; 1257 : 				_Reserve(1);
; 1258 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1259 : 			this->_Getal().construct(this->_Mylast,
; 1260 : 				_Val);
; 1261 : 			++this->_Mylast;
; 1262 : 			}
; 1263 : 		}
; 1264 : 
; 1265 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1266 : 	void pop_back()
; 1267 : 		{	// erase element at end
; 1268 : 		if (empty())
; 1269 : 			_DEBUG_ERROR("vector empty before pop");
; 1270 : 		else
; 1271 : 			{	// erase last element
; 1272 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1273 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1274 : 			--this->_Mylast;
; 1275 : 			}
; 1276 : 		}
; 1277 : 
; 1278 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1279 : 	void pop_back()
; 1280 : 		{	// erase element at end
; 1281 : 		this->_Getal().destroy(this->_Mylast - 1);
; 1282 : 		--this->_Mylast;
; 1283 : 		}
; 1284 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1285 : 
; 1286 : 	template<class _Iter>
; 1287 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1288 : 			void>::type
; 1289 : 		assign(_Iter _First, _Iter _Last)
; 1290 : 		{	// assign [_First, _Last)
; 1291 : 		clear();
; 1292 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1293 : 		}
; 1294 : 
; 1295 : 	template<class _Iter>
; 1296 : 		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
; 1297 : 		{	// assign [_First, _Last), input iterators
; 1298 : 		for (; _First != _Last; ++_First)
; 1299 : 			emplace_back(*_First);
; 1300 : 		}
; 1301 : 
; 1302 : 	template<class _Iter>
; 1303 : 		void _Assign(_Iter _First, _Iter _Last, forward_iterator_tag)
; 1304 : 		{	// assign [_First, _Last), forward iterators
; 1305 : 		if (_First == _Last)
; 1306 : 			return;	// nothing to do
; 1307 : 
; 1308 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1309 : 
; 1310 : 		if (capacity() < _Newsize)
; 1311 : 			{	// need more room, try to get it
; 1312 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1313 : 			_Tidy();
; 1314 : 			_Buy(_Newcapacity);
; 1315 : 			}
; 1316 : 
; 1317 : 		this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
; 1318 : 		}
; 1319 : 
; 1320 : 	void assign(size_type _Count, const value_type& _Val)
; 1321 : 		{	// assign _Count * _Val
; 1322 : 		clear();
; 1323 : 		insert(begin(), _Count, _Val);
; 1324 : 		}
; 1325 : 
; 1326 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1327 : 		{	// insert _Val at _Where
; 1328 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1329 : 		}
; 1330 : 
; 1331 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1332 : 		const _Ty& _Val)
; 1333 : 		{	// insert _Count * _Val at _Where
; 1334 : 		return (_Insert_n(_Where, _Count, _Val));
; 1335 : 		}
; 1336 : 
; 1337 : 	template<class _Iter>
; 1338 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1339 : 			iterator>::type
; 1340 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1341 : 		{	// insert [_First, _Last) at _Where
; 1342 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1343 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1344 : 		return (begin() + _Off);
; 1345 : 		}
; 1346 : 
; 1347 : 	template<class _Iter>
; 1348 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1349 : 			input_iterator_tag)
; 1350 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1351 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1352 : 
; 1353 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1354 : 		if (size() < _Off)
; 1355 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1356 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1357 : 
; 1358 : 		if (_First != _Last)
; 1359 : 			{	// worth doing, gather at end and rotate into place
; 1360 : 			size_type _Oldsize = size();
; 1361 : 
; 1362 : 			_TRY_BEGIN
; 1363 : 			for (; _First != _Last; ++_First)
; 1364 : 				push_back(*_First);	// append
; 1365 : 
; 1366 : 			_CATCH_ALL
; 1367 : 			erase(begin() + _Oldsize, end());
; 1368 : 			_RERAISE;
; 1369 : 			_CATCH_END
; 1370 : 
; 1371 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1372 : 			}
; 1373 : 		}
; 1374 : 
; 1375 : 	template<class _Iter>
; 1376 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1377 : 			forward_iterator_tag)
; 1378 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_VICONT(_Where) != this
; 1381 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1382 : 			|| this->_Mylast < _VIPTR(_Where))
; 1383 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1384 : 		_DEBUG_RANGE(_First, _Last);
; 1385 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1386 : 
; 1387 : 		size_type _Count = 0;
; 1388 : 		_Distance(_First, _Last, _Count);
; 1389 : 
; 1390 : 		if (_Count == 0)
; 1391 : 			;
; 1392 : 		else if (_Unused_capacity() < _Count)
; 1393 : 			{	// not enough room, reallocate
; 1394 : 			if (max_size() - size() < _Count)
; 1395 : 				_Xlen();	// result too long
; 1396 : 
; 1397 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1398 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1399 : 			pointer _Ptr = _Newvec;
; 1400 : 
; 1401 : 			_TRY_BEGIN
; 1402 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1403 : 				_Newvec);	// copy prefix
; 1404 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1405 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1406 : 				_Ptr);	// copy suffix
; 1407 : 			_CATCH_ALL
; 1408 : 			_Destroy(_Newvec, _Ptr);
; 1409 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1410 : 			_RERAISE;
; 1411 : 			_CATCH_END
; 1412 : 
; 1413 : 			_Count += size();
; 1414 : 			if (this->_Myfirst != pointer())
; 1415 : 				{	// destroy and deallocate old array
; 1416 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1417 : 				this->_Getal().deallocate(this->_Myfirst,
; 1418 : 					this->_Myend - this->_Myfirst);
; 1419 : 				}
; 1420 : 
; 1421 : 			this->_Orphan_all();
; 1422 : 			this->_Myend = _Newvec + _Capacity;
; 1423 : 			this->_Mylast = _Newvec + _Count;
; 1424 : 			this->_Myfirst = _Newvec;
; 1425 : 			}
; 1426 : 		else
; 1427 : 			{	// new stuff fits, append and rotate into place
; 1428 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1429 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1430 : 				this->_Mylast + _Count);
; 1431 : 			this->_Mylast += _Count;
; 1432 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1433 : 			}
; 1434 : 		}
; 1435 : 
; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 	iterator erase(const_iterator _Where)
; 1438 : 		{	// erase element at where
; 1439 : 		if (_VICONT(_Where) != this
; 1440 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1441 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1442 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1443 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1444 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1445 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1446 : 		--this->_Mylast;
; 1447 : 		return (_Make_iter(_Where));
; 1448 : 		}
; 1449 : 
; 1450 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 	iterator erase(const_iterator _Where)
; 1452 : 		{	// erase element at where
; 1453 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1454 : 			_VIPTR(_Where));
; 1455 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1456 : 		--this->_Mylast;
; 1457 : 		return (_Make_iter(_Where));
; 1458 : 		}
; 1459 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1460 : 
; 1461 : 	iterator erase(const_iterator _First_arg,
; 1462 : 		const_iterator _Last_arg)
; 1463 : 		{	// erase [_First, _Last)
; 1464 : 		if (_First_arg == begin() && _Last_arg == end())
; 1465 : 			clear();
; 1466 : 		else if (_First_arg != _Last_arg)
; 1467 : 			{	// clear partial
; 1468 : 			iterator _First = _Make_iter(_First_arg);
; 1469 : 			iterator _Last = _Make_iter(_Last_arg);
; 1470 : 
; 1471 : 			if (_First != _Last)
; 1472 : 				{	// worth doing, copy down over hole
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 				if (_Last < _First || _VICONT(_First) != this
; 1475 : 					|| _VIPTR(_First) < this->_Myfirst
; 1476 : 					|| this->_Mylast < _VIPTR(_Last))
; 1477 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1478 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1479 : 					_VIPTR(_First));
; 1480 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1484 : 					_VIPTR(_First));
; 1485 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1486 : 
; 1487 : 				_Destroy(_Ptr, this->_Mylast);
; 1488 : 				this->_Mylast = _Ptr;
; 1489 : 				}
; 1490 : 			}
; 1491 : 		return (_Make_iter(_First_arg));
; 1492 : 		}
; 1493 : 
; 1494 : 	void _Pop_back_n(size_type _Count)
; 1495 : 		{	// erase _Count elements at end
; 1496 : 		pointer _Ptr = this->_Mylast - _Count;
; 1497 : 
; 1498 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1499 : 		_Orphan_range(_Ptr, this->_Mylast);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 
; 1502 : 		_Destroy(_Ptr, this->_Mylast);
; 1503 : 		this->_Mylast = _Ptr;
; 1504 : 		}
; 1505 : 
; 1506 : 	void clear() _NOEXCEPT
; 1507 : 		{	// erase all
; 1508 : 		this->_Orphan_all();
; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1510 : 		this->_Mylast = this->_Myfirst;
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		{	// exchange contents with _Right
; 1515 : 		if (this == &_Right)
; 1516 : 			;	// same object, do nothing
; 1517 : 		else if (this->_Getal() == _Right._Getal())
; 1518 : 			{	// same allocator, swap control information
; 1519 : 			this->_Swap_all(_Right);
; 1520 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1521 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1522 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1529 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1530 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1531 : 			}
; 1532 : 
; 1533 : 		else
; 1534 : 			{	// containers are incompatible
; 1535 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1536 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1537 : 
; 1538 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1539 : 			_XSTD terminate();
; 1540 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1541 : 			}
; 1542 : 		}
; 1543 : 
; 1544 : protected:
; 1545 : 	bool _Buy(size_type _Capacity)
; 1546 : 		{	// allocate array with _Capacity elements
; 1547 : 		this->_Myfirst = pointer();
; 1548 : 		this->_Mylast = pointer();
; 1549 : 		this->_Myend = pointer();
; 1550 : 
; 1551 : 		if (_Capacity == 0)
; 1552 : 			return (false);
; 1553 : 		else if (max_size() < _Capacity)
; 1554 : 			_Xlen();	// result too long
; 1555 : 		else
; 1556 : 			{	// nonempty array, allocate storage
; 1557 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1558 : 			this->_Mylast = this->_Myfirst;
; 1559 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1560 : 			}
; 1561 : 		return (true);
; 1562 : 		}
; 1563 : 
; 1564 : 	void _Destroy(pointer _First, pointer _Last)
; 1565 : 		{	// destroy [_First, _Last) using allocator
; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}
; 1569 : 
; 1570 : 	size_type _Grow_to(size_type _Count) const
; 1571 : 		{	// grow by 50% or at least to _Count
; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1576 : 		if (_Capacity < _Count)
; 1577 : 			_Capacity = _Count;
; 1578 : 		return (_Capacity);
; 1579 : 		}
; 1580 : 
; 1581 : 	bool _Inside(const value_type *_Ptr) const
; 1582 : 		{	// test if _Ptr points inside vector
; 1583 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);
; 1584 : 		}
; 1585 : 
; 1586 : 	void _Reallocate(size_type _Count)
; 1587 : 		{	// move to array of exactly _Count elements
; 1588 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1589 : 
; 1590 : 		_TRY_BEGIN
; 1591 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);
; 1592 : 		_CATCH_ALL
; 1593 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1594 : 		_RERAISE;
; 1595 : 		_CATCH_END
; 1596 : 
; 1597 : 		size_type _Size = size();
; 1598 : 		if (this->_Myfirst != pointer())
; 1599 : 			{	// destroy and deallocate old array
; 1600 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1601 : 			this->_Getal().deallocate(this->_Myfirst,
; 1602 : 				this->_Myend - this->_Myfirst);
; 1603 : 			}
; 1604 : 
; 1605 : 		this->_Orphan_all();
; 1606 : 		this->_Myend = _Ptr + _Count;
; 1607 : 		this->_Mylast = _Ptr + _Size;
; 1608 : 		this->_Myfirst = _Ptr;
; 1609 : 		}
; 1610 : 
; 1611 : 	void _Reserve(size_type _Count)
; 1612 : 		{	// ensure room for _Count new elements, grow exponentially
; 1613 : 		if (_Unused_capacity() < _Count)
; 1614 : 			{	// need more room, try to get it
; 1615 : 			if (max_size() - size() < _Count)
; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));
; 1618 : 			}
; 1619 : 		}
; 1620 : 
; 1621 : 	void _Tidy()
; 1622 : 		{	// free all storage
; 1623 : 		if (this->_Myfirst != pointer())

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 1d		 je	 SHORT $LN3@vector
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
; File a:\vs\vc\include\vector

; 1629 : 			this->_Myfirst = pointer();

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1630 : 			this->_Mylast = pointer();

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1631 : 			this->_Myend = pointer();

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN3@vector:
  00026	5e		 pop	 esi

; 945  : 		_Tidy();
; 946  : 		}

  00027	c3		 ret	 0
??1?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAE@XZ ENDP ; std::vector<packet_item,std::allocator<packet_item> >::~vector<packet_item,std::allocator<packet_item> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??0?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAE@XZ PROC ; std::vector<packet_item,std::allocator<packet_item> >::vector<packet_item,std::allocator<packet_item> >, COMDAT
; _this$ = ecx

; 482  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 681  : 		}

  00006	8b c1		 mov	 eax, ecx

; 483  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 484  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 681  : 		}

  00016	c3		 ret	 0
??0?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAE@XZ ENDP ; std::vector<packet_item,std::allocator<packet_item> >::vector<packet_item,std::allocator<packet_item> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<packet_item,std::allocator<packet_item> > >::_Getal, COMDAT
; _this$ = ecx

; 641  : 		{	// get reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 642  : 		return (_Alty());

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 643  : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<packet_item,std::allocator<packet_item> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@@std@@QAE@ABV?$allocator@Upacket_item@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@@std@@QAE@ABV?$allocator@Upacket_item@@@1@@Z PROC ; std::_Vector_alloc<0,std::_Vec_base_types<packet_item,std::allocator<packet_item> > >::_Vector_alloc<0,std::_Vec_base_types<packet_item,std::allocator<packet_item> > >, COMDAT
; _this$ = ecx

; 482  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 589  : 		{	// construct allocator from _Al
; 590  : 		}

  00006	8b c1		 mov	 eax, ecx

; 483  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 484  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 589  : 		{	// construct allocator from _Al
; 590  : 		}

  00016	c2 04 00	 ret	 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@@std@@QAE@ABV?$allocator@Upacket_item@@@1@@Z ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<packet_item,std::allocator<packet_item> > >::_Vector_alloc<0,std::_Vec_base_types<packet_item,std::allocator<packet_item> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@Upacket_item@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@Upacket_item@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<packet_item> >::_Vector_val<std::_Simple_types<packet_item> >, COMDAT
; _this$ = ecx

; 481  : 		{	// initialize values
; 482  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 483  : 		_Mylast = pointer();
; 484  : 		_Myend = pointer();
; 485  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@Upacket_item@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<packet_item> >::_Vector_val<std::_Simple_types<packet_item> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<packet_item> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (_Mytraits::max_size(*this));

  00000	b8 16 b2 90 05	 mov	 eax, 93368854		; 0590b216H

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<packet_item> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?construct@?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@QAEXPAUpacket_item@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?construct@?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@QAEXPAUpacket_item@@@Z PROC ; std::_Wrap_alloc<std::allocator<packet_item> >::construct, COMDAT
; _this$ = ecx

; 862  : 		{	// default construct object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 588  : 		::new ((void *)_Ptr) _Ty();

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN7@construct
  0000a	6a 2e		 push	 46			; 0000002eH
  0000c	6a 00		 push	 0
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 _memset
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@construct:

; 863  : 		_Mytraits::construct(*this, _Ptr);
; 864  : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?construct@?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@QAEXPAUpacket_item@@@Z ENDP ; std::_Wrap_alloc<std::allocator<packet_item> >::construct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@QAEXPAUpacket_item@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@QAEXPAUpacket_item@@I@Z PROC ; std::_Wrap_alloc<std::allocator<packet_item> >::deallocate, COMDAT
; _this$ = ecx

; 857  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 858  : 		_Mybase::deallocate(_Ptr, _Count);
; 859  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@QAEXPAUpacket_item@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<packet_item> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@QAEPAUpacket_item@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@QAEPAUpacket_item@@I@Z PROC ; std::_Wrap_alloc<std::allocator<packet_item> >::allocate, COMDAT
; _this$ = ecx

; 846  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 19		 je	 SHORT $LN6@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d 16 b2 90 05	 cmp	 eax, 93368854		; 0590b216H
  00011	77 18		 ja	 SHORT $LN14@allocate
  00013	6b c0 2e	 imul	 eax, eax, 46
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	74 06		 je	 SHORT $LN14@allocate
$LN6@allocate:

; 847  : 		return (_Mybase::allocate(_Count));

  00025	8b c1		 mov	 eax, ecx

; 848  : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN14@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002b	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN16@allocate:
$LN13@allocate:
  00030	cc		 int	 3
?allocate@?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@QAEPAUpacket_item@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<packet_item> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<packet_item> >::_Wrap_alloc<std::allocator<packet_item> >, COMDAT
; _this$ = ecx

; 802  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@Upacket_item@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<packet_item> >::_Wrap_alloc<std::allocator<packet_item> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@Upacket_item@@@std@@@std@@SAIABV?$allocator@Upacket_item@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@Upacket_item@@@std@@@std@@SAIABV?$allocator@Upacket_item@@@2@@Z PROC ; std::allocator_traits<std::allocator<packet_item> >::max_size, COMDAT

; 735  : 		return (_Al.max_size());

  00000	b8 16 b2 90 05	 mov	 eax, 93368854		; 0590b216H

; 736  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@Upacket_item@@@std@@@std@@SAIABV?$allocator@Upacket_item@@@2@@Z ENDP ; std::allocator_traits<std::allocator<packet_item> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@Upacket_item@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@Upacket_item@@@std@@QBEIXZ PROC	; std::allocator<packet_item>::max_size, COMDAT
; _this$ = ecx

; 612  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 16 b2 90 05	 mov	 eax, 93368854		; 0590b216H

; 613  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@Upacket_item@@@std@@QBEIXZ ENDP	; std::allocator<packet_item>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?construct@?$allocator@Upacket_item@@@std@@QAEXPAUpacket_item@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?construct@?$allocator@Upacket_item@@@std@@QAEXPAUpacket_item@@@Z PROC ; std::allocator<packet_item>::construct, COMDAT
; _this$ = ecx

; 587  : 		{	// default construct object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 588  : 		::new ((void *)_Ptr) _Ty();

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN3@construct
  0000a	6a 2e		 push	 46			; 0000002eH
  0000c	6a 00		 push	 0
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 _memset
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@construct:

; 589  : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?construct@?$allocator@Upacket_item@@@std@@QAEXPAUpacket_item@@@Z ENDP ; std::allocator<packet_item>::construct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@Upacket_item@@@std@@QAEPAUpacket_item@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@Upacket_item@@@std@@QAEPAUpacket_item@@I@Z PROC ; std::allocator<packet_item>::allocate, COMDAT
; _this$ = ecx

; 577  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 19		 je	 SHORT $LN4@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d 16 b2 90 05	 cmp	 eax, 93368854		; 0590b216H
  00011	77 18		 ja	 SHORT $LN11@allocate
  00013	6b c0 2e	 imul	 eax, eax, 46
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	74 06		 je	 SHORT $LN11@allocate
$LN4@allocate:

; 578  : 		return (_Allocate(_Count, (pointer)0));

  00025	8b c1		 mov	 eax, ecx

; 579  : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN11@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002b	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN13@allocate:
$LN10@allocate:
  00030	cc		 int	 3
?allocate@?$allocator@Upacket_item@@@std@@QAEPAUpacket_item@@I@Z ENDP ; std::allocator<packet_item>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@Upacket_item@@@std@@QAEXPAUpacket_item@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@Upacket_item@@@std@@QAEXPAUpacket_item@@I@Z PROC ; std::allocator<packet_item>::deallocate, COMDAT
; _this$ = ecx

; 572  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 574  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$allocator@Upacket_item@@@std@@QAEXPAUpacket_item@@I@Z ENDP ; std::allocator<packet_item>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??0?$allocator@Upacket_item@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@Upacket_item@@@std@@QAE@XZ PROC		; std::allocator<packet_item>::allocator<packet_item>, COMDAT
; _this$ = ecx

; 553  : 		{	// construct default allocator (do nothing)
; 554  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@Upacket_item@@@std@@QAE@XZ ENDP		; std::allocator<packet_item>::allocator<packet_item>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
;	COMDAT ?GetMallSize@CPythonSafeBox@@QAEKXZ
_TEXT	SEGMENT
?GetMallSize@CPythonSafeBox@@QAEKXZ PROC		; CPythonSafeBox::GetMallSize, COMDAT
; _this$ = ecx

; 143  : {

  00000	56		 push	 esi
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00001	8b 71 14	 mov	 esi, DWORD PTR [ecx+20]
  00004	b8 c9 42 16 b2	 mov	 eax, -1307163959	; b21642c9H
  00009	2b 71 10	 sub	 esi, DWORD PTR [ecx+16]
  0000c	f7 ee		 imul	 esi
  0000e	03 d6		 add	 edx, esi
  00010	c1 fa 05	 sar	 edx, 5
  00013	8b c2		 mov	 eax, edx
  00015	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00018	03 c2		 add	 eax, edx
  0001a	5e		 pop	 esi
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 145  : }

  0001b	c3		 ret	 0
?GetMallSize@CPythonSafeBox@@QAEKXZ ENDP		; CPythonSafeBox::GetMallSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
;	COMDAT ?GetSlotMallItemID@CPythonSafeBox@@QAEHKPAK@Z
_TEXT	SEGMENT
_dwSlotIndex$ = 8					; size = 4
_pdwItemID$ = 12					; size = 4
?GetSlotMallItemID@CPythonSafeBox@@QAEHKPAK@Z PROC	; CPythonSafeBox::GetSlotMallItemID, COMDAT
; _this$ = ecx

; 130  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00007	b8 c9 42 16 b2	 mov	 eax, -1307163959	; b21642c9H
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 131  : 	if (dwSlotIndex >= m_MallItemInstanceVector.size())

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _dwSlotIndex$[ebp]
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  0000f	8b 77 14	 mov	 esi, DWORD PTR [edi+20]
  00012	2b 77 10	 sub	 esi, DWORD PTR [edi+16]
  00015	f7 ee		 imul	 esi
  00017	03 d6		 add	 edx, esi
  00019	c1 fa 05	 sar	 edx, 5
  0001c	8b c2		 mov	 eax, edx
  0001e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00021	03 c2		 add	 eax, edx
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 131  : 	if (dwSlotIndex >= m_MallItemInstanceVector.size())

  00023	3b c8		 cmp	 ecx, eax
  00025	72 16		 jb	 SHORT $LN1@GetSlotMal

; 132  : 	{
; 133  : 		TraceError("CPythonSafeBox::GetMallSlotItemID(dwSlotIndex=%d) - Strange slot index", dwSlotIndex);

  00027	51		 push	 ecx
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0EH@BNEMANLE@CPythonSafeBox?3?3GetMallSlotItemI@
  0002d	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00032	83 c4 08	 add	 esp, 8

; 134  : 		return FALSE;

  00035	33 c0		 xor	 eax, eax
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi

; 140  : }

  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
$LN1@GetSlotMal:

; 137  : 	*pdwItemID = m_MallItemInstanceVector[dwSlotIndex].vnum;

  0003d	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
; File a:\vs\vc\include\vector

; 1209 : 		return (*(this->_Myfirst + _Pos));

  00040	6b c9 2e	 imul	 ecx, ecx, 46
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 137  : 	*pdwItemID = m_MallItemInstanceVector[dwSlotIndex].vnum;

  00045	8b 0c 01	 mov	 ecx, DWORD PTR [ecx+eax]
  00048	8b 45 0c	 mov	 eax, DWORD PTR _pdwItemID$[ebp]
  0004b	89 08		 mov	 DWORD PTR [eax], ecx

; 138  : 
; 139  : 	return TRUE;

  0004d	b8 01 00 00 00	 mov	 eax, 1

; 140  : }

  00052	5d		 pop	 ebp
  00053	c2 08 00	 ret	 8
?GetSlotMallItemID@CPythonSafeBox@@QAEHKPAK@Z ENDP	; CPythonSafeBox::GetSlotMallItemID
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
;	COMDAT ?GetMallItemDataPtr@CPythonSafeBox@@QAEHKPAPAUpacket_item@@@Z
_TEXT	SEGMENT
_dwSlotIndex$ = 8					; size = 4
_ppInstance$ = 12					; size = 4
?GetMallItemDataPtr@CPythonSafeBox@@QAEHKPAPAUpacket_item@@@Z PROC ; CPythonSafeBox::GetMallItemDataPtr, COMDAT
; _this$ = ecx

; 117  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00007	b8 c9 42 16 b2	 mov	 eax, -1307163959	; b21642c9H
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 118  : 	if (dwSlotIndex >= m_MallItemInstanceVector.size())

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _dwSlotIndex$[ebp]
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  0000f	8b 77 14	 mov	 esi, DWORD PTR [edi+20]
  00012	2b 77 10	 sub	 esi, DWORD PTR [edi+16]
  00015	f7 ee		 imul	 esi
  00017	03 d6		 add	 edx, esi
  00019	c1 fa 05	 sar	 edx, 5
  0001c	8b c2		 mov	 eax, edx
  0001e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00021	03 c2		 add	 eax, edx
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 118  : 	if (dwSlotIndex >= m_MallItemInstanceVector.size())

  00023	3b c8		 cmp	 ecx, eax
  00025	72 16		 jb	 SHORT $LN1@GetMallIte

; 119  : 	{
; 120  : 		TraceError("CPythonSafeBox::GetMallSlotItemID(dwSlotIndex=%d) - Strange slot index", dwSlotIndex);

  00027	51		 push	 ecx
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0EH@BNEMANLE@CPythonSafeBox?3?3GetMallSlotItemI@
  0002d	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00032	83 c4 08	 add	 esp, 8

; 121  : 		return FALSE;

  00035	33 c0		 xor	 eax, eax
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi

; 127  : }

  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
$LN1@GetMallIte:

; 124  : 	*ppInstance = &m_MallItemInstanceVector[dwSlotIndex];

  0003d	8b 45 0c	 mov	 eax, DWORD PTR _ppInstance$[ebp]
; File a:\vs\vc\include\vector

; 1209 : 		return (*(this->_Myfirst + _Pos));

  00040	6b c9 2e	 imul	 ecx, ecx, 46
  00043	03 4f 10	 add	 ecx, DWORD PTR [edi+16]
  00046	5f		 pop	 edi
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 124  : 	*ppInstance = &m_MallItemInstanceVector[dwSlotIndex];

  00047	89 08		 mov	 DWORD PTR [eax], ecx

; 125  : 
; 126  : 	return TRUE;

  00049	b8 01 00 00 00	 mov	 eax, 1
  0004e	5e		 pop	 esi

; 127  : }

  0004f	5d		 pop	 ebp
  00050	c2 08 00	 ret	 8
?GetMallItemDataPtr@CPythonSafeBox@@QAEHKPAPAUpacket_item@@@Z ENDP ; CPythonSafeBox::GetMallItemDataPtr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
;	COMDAT ?DelMallItemData@CPythonSafeBox@@QAEXK@Z
_TEXT	SEGMENT
_dwSlotIndex$ = 8					; size = 4
?DelMallItemData@CPythonSafeBox@@QAEXK@Z PROC		; CPythonSafeBox::DelMallItemData, COMDAT
; _this$ = ecx

; 105  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00007	b8 c9 42 16 b2	 mov	 eax, -1307163959	; b21642c9H
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 106  : 	if (dwSlotIndex >= m_MallItemInstanceVector.size())

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _dwSlotIndex$[ebp]
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  0000f	8b 77 14	 mov	 esi, DWORD PTR [edi+20]
  00012	2b 77 10	 sub	 esi, DWORD PTR [edi+16]
  00015	f7 ee		 imul	 esi
  00017	03 d6		 add	 edx, esi
  00019	c1 fa 05	 sar	 edx, 5
  0001c	8b c2		 mov	 eax, edx
  0001e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00021	03 c2		 add	 eax, edx
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 106  : 	if (dwSlotIndex >= m_MallItemInstanceVector.size())

  00023	3b c8		 cmp	 ecx, eax
  00025	72 14		 jb	 SHORT $LN1@DelMallIte

; 107  : 	{
; 108  : 		TraceError("CPythonSafeBox::DelMallItemData(dwSlotIndex=%d) - Strange slot index", dwSlotIndex);

  00027	51		 push	 ecx
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@MEFPDFOJ@CPythonSafeBox?3?3DelMallItemData?$CI@
  0002d	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00032	83 c4 08	 add	 esp, 8
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi

; 114  : }

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
$LN1@DelMallIte:
; File a:\vs\vc\include\vector

; 1209 : 		return (*(this->_Myfirst + _Pos));

  0003b	6b c1 2e	 imul	 eax, ecx, 46
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 113  : 	ZeroMemory(&rInstance, sizeof(rInstance));

  0003e	6a 2e		 push	 46			; 0000002eH
  00040	6a 00		 push	 0
; File a:\vs\vc\include\vector

; 1209 : 		return (*(this->_Myfirst + _Pos));

  00042	03 47 10	 add	 eax, DWORD PTR [edi+16]
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 113  : 	ZeroMemory(&rInstance, sizeof(rInstance));

  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 _memset
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi

; 114  : }

  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?DelMallItemData@CPythonSafeBox@@QAEXK@Z ENDP		; CPythonSafeBox::DelMallItemData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
;	COMDAT ?SetMallItemData@CPythonSafeBox@@QAEXKABUpacket_item@@@Z
_TEXT	SEGMENT
_dwSlotIndex$ = 8					; size = 4
_rItemData$ = 12					; size = 4
?SetMallItemData@CPythonSafeBox@@QAEXKABUpacket_item@@@Z PROC ; CPythonSafeBox::SetMallItemData, COMDAT
; _this$ = ecx

; 94   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00007	b8 c9 42 16 b2	 mov	 eax, -1307163959	; b21642c9H
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 95   : 	if (dwSlotIndex >= m_MallItemInstanceVector.size())

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _dwSlotIndex$[ebp]
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  0000f	8b 77 14	 mov	 esi, DWORD PTR [edi+20]
  00012	2b 77 10	 sub	 esi, DWORD PTR [edi+16]
  00015	f7 ee		 imul	 esi
  00017	03 d6		 add	 edx, esi
  00019	c1 fa 05	 sar	 edx, 5
  0001c	8b c2		 mov	 eax, edx
  0001e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00021	03 c2		 add	 eax, edx
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 95   : 	if (dwSlotIndex >= m_MallItemInstanceVector.size())

  00023	3b c8		 cmp	 ecx, eax
  00025	72 14		 jb	 SHORT $LN1@SetMallIte

; 96   : 	{
; 97   : 		TraceError("CPythonSafeBox::SetMallItemData(dwSlotIndex=%d) - Strange slot index", dwSlotIndex);

  00027	51		 push	 ecx
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@BFNMLNFN@CPythonSafeBox?3?3SetMallItemData?$CI@
  0002d	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00032	83 c4 08	 add	 esp, 8
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi

; 102  : }

  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
$LN1@SetMallIte:
; File a:\vs\vc\include\vector

; 1209 : 		return (*(this->_Myfirst + _Pos));

  0003b	6b d1 2e	 imul	 edx, ecx, 46
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 101  : 	m_MallItemInstanceVector[dwSlotIndex] = rItemData;

  0003e	8b 4d 0c	 mov	 ecx, DWORD PTR _rItemData$[ebp]
; File a:\vs\vc\include\vector

; 1209 : 		return (*(this->_Myfirst + _Pos));

  00041	03 57 10	 add	 edx, DWORD PTR [edi+16]
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 101  : 	m_MallItemInstanceVector[dwSlotIndex] = rItemData;

  00044	f3 0f 6f 01	 movdqu	 xmm0, XMMWORD PTR [ecx]
  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	f3 0f 7f 02	 movdqu	 XMMWORD PTR [edx], xmm0
  0004e	f3 0f 6f 41 10	 movdqu	 xmm0, XMMWORD PTR [ecx+16]
  00053	f3 0f 7f 42 10	 movdqu	 XMMWORD PTR [edx+16], xmm0
  00058	f3 0f 7e 41 20	 movq	 xmm0, QWORD PTR [ecx+32]
  0005d	66 0f d6 42 20	 movq	 QWORD PTR [edx+32], xmm0
  00062	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
  00065	89 42 28	 mov	 DWORD PTR [edx+40], eax
  00068	66 8b 41 2c	 mov	 ax, WORD PTR [ecx+44]
  0006c	66 89 42 2c	 mov	 WORD PTR [edx+44], ax

; 102  : }

  00070	5d		 pop	 ebp
  00071	c2 08 00	 ret	 8
?SetMallItemData@CPythonSafeBox@@QAEXKABUpacket_item@@@Z ENDP ; CPythonSafeBox::SetMallItemData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
;	COMDAT ?OpenMall@CPythonSafeBox@@QAEXH@Z
_TEXT	SEGMENT
_iSize$ = 8						; size = 4
?OpenMall@CPythonSafeBox@@QAEXH@Z PROC			; CPythonSafeBox::OpenMall, COMDAT
; _this$ = ecx

; 82   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File a:\vs\vc\include\vector

; 1510 : 		this->_Mylast = this->_Myfirst;

  00003	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00006	53		 push	 ebx
  00007	56		 push	 esi
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 83   : 	m_MallItemInstanceVector.clear();

  00008	8d 71 10	 lea	 esi, DWORD PTR [ecx+16]
; File a:\vs\vc\include\vector

; 1510 : 		this->_Mylast = this->_Myfirst;

  0000b	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 84   : 	m_MallItemInstanceVector.resize(SAFEBOX_SLOT_X_COUNT * iSize);

  0000e	8b ce		 mov	 ecx, esi
  00010	8b 45 08	 mov	 eax, DWORD PTR _iSize$[ebp]
  00013	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?resize@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEXI@Z ; std::vector<packet_item,std::allocator<packet_item> >::resize
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  0001c	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001f	b8 c9 42 16 b2	 mov	 eax, -1307163959	; b21642c9H
  00024	2b 0e		 sub	 ecx, DWORD PTR [esi]
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 86   : 	for (DWORD i = 0; i < m_MallItemInstanceVector.size(); ++i)

  00026	33 db		 xor	 ebx, ebx
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00028	f7 e9		 imul	 ecx
  0002a	03 d1		 add	 edx, ecx
  0002c	c1 fa 05	 sar	 edx, 5
  0002f	8b c2		 mov	 eax, edx
  00031	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00034	03 c2		 add	 eax, edx
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 86   : 	for (DWORD i = 0; i < m_MallItemInstanceVector.size(); ++i)

  00036	74 3a		 je	 SHORT $LN1@OpenMall

; 83   : 	m_MallItemInstanceVector.clear();

  00038	57		 push	 edi
  00039	33 ff		 xor	 edi, edi
  0003b	eb 03 8d 49 00	 npad	 5
$LL3@OpenMall:
; File a:\vs\vc\include\vector

; 1209 : 		return (*(this->_Myfirst + _Pos));

  00040	8b 06		 mov	 eax, DWORD PTR [esi]
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 89   : 		ZeroMemory(&rInstance, sizeof(rInstance));

  00042	6a 2e		 push	 46			; 0000002eH
; File a:\vs\vc\include\vector

; 1209 : 		return (*(this->_Myfirst + _Pos));

  00044	03 c7		 add	 eax, edi
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 89   : 		ZeroMemory(&rInstance, sizeof(rInstance));

  00046	6a 00		 push	 0
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 _memset
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  0004e	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00051	b8 c9 42 16 b2	 mov	 eax, -1307163959	; b21642c9H
  00056	2b 0e		 sub	 ecx, DWORD PTR [esi]
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 86   : 	for (DWORD i = 0; i < m_MallItemInstanceVector.size(); ++i)

  00058	43		 inc	 ebx
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00059	f7 e9		 imul	 ecx
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 89   : 		ZeroMemory(&rInstance, sizeof(rInstance));

  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005e	83 c7 2e	 add	 edi, 46			; 0000002eH
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00061	03 d1		 add	 edx, ecx
  00063	c1 fa 05	 sar	 edx, 5
  00066	8b c2		 mov	 eax, edx
  00068	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0006b	03 c2		 add	 eax, edx
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 86   : 	for (DWORD i = 0; i < m_MallItemInstanceVector.size(); ++i)

  0006d	3b d8		 cmp	 ebx, eax
  0006f	72 cf		 jb	 SHORT $LL3@OpenMall
  00071	5f		 pop	 edi
$LN1@OpenMall:
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx

; 90   : 	}
; 91   : }

  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
?OpenMall@CPythonSafeBox@@QAEXH@Z ENDP			; CPythonSafeBox::OpenMall
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
;	COMDAT ?GetItemDataPtr@CPythonSafeBox@@QAEHKPAPAUpacket_item@@@Z
_TEXT	SEGMENT
_dwSlotIndex$ = 8					; size = 4
_ppInstance$ = 12					; size = 4
?GetItemDataPtr@CPythonSafeBox@@QAEHKPAPAUpacket_item@@@Z PROC ; CPythonSafeBox::GetItemDataPtr, COMDAT
; _this$ = ecx

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00007	b8 c9 42 16 b2	 mov	 eax, -1307163959	; b21642c9H
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 70   : 	if (dwSlotIndex >= m_ItemInstanceVector.size())

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _dwSlotIndex$[ebp]
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  0000f	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
  00012	2b 77 04	 sub	 esi, DWORD PTR [edi+4]
  00015	f7 ee		 imul	 esi
  00017	03 d6		 add	 edx, esi
  00019	c1 fa 05	 sar	 edx, 5
  0001c	8b c2		 mov	 eax, edx
  0001e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00021	03 c2		 add	 eax, edx
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 70   : 	if (dwSlotIndex >= m_ItemInstanceVector.size())

  00023	3b c8		 cmp	 ecx, eax
  00025	72 16		 jb	 SHORT $LN1@GetItemDat

; 71   : 	{
; 72   : 		TraceError("CPythonSafeBox::GetItemData(dwSlotIndex=%d) - Strange slot index", dwSlotIndex);

  00027	51		 push	 ecx
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@BNCIHACH@CPythonSafeBox?3?3GetItemData?$CIdwSl@
  0002d	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00032	83 c4 08	 add	 esp, 8

; 73   : 		return FALSE;

  00035	33 c0		 xor	 eax, eax
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi

; 79   : }

  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
$LN1@GetItemDat:

; 76   : 	*ppInstance = &m_ItemInstanceVector[dwSlotIndex];

  0003d	8b 45 0c	 mov	 eax, DWORD PTR _ppInstance$[ebp]
; File a:\vs\vc\include\vector

; 1209 : 		return (*(this->_Myfirst + _Pos));

  00040	6b c9 2e	 imul	 ecx, ecx, 46
  00043	03 4f 04	 add	 ecx, DWORD PTR [edi+4]
  00046	5f		 pop	 edi
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 76   : 	*ppInstance = &m_ItemInstanceVector[dwSlotIndex];

  00047	89 08		 mov	 DWORD PTR [eax], ecx

; 77   : 
; 78   : 	return TRUE;

  00049	b8 01 00 00 00	 mov	 eax, 1
  0004e	5e		 pop	 esi

; 79   : }

  0004f	5d		 pop	 ebp
  00050	c2 08 00	 ret	 8
?GetItemDataPtr@CPythonSafeBox@@QAEHKPAPAUpacket_item@@@Z ENDP ; CPythonSafeBox::GetItemDataPtr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
;	COMDAT ?GetCurrentSafeBoxSize@CPythonSafeBox@@QAEHXZ
_TEXT	SEGMENT
?GetCurrentSafeBoxSize@CPythonSafeBox@@QAEHXZ PROC	; CPythonSafeBox::GetCurrentSafeBoxSize, COMDAT
; _this$ = ecx

; 51   : {

  00000	56		 push	 esi
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00001	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00004	b8 c9 42 16 b2	 mov	 eax, -1307163959	; b21642c9H
  00009	2b 71 04	 sub	 esi, DWORD PTR [ecx+4]
  0000c	f7 ee		 imul	 esi
  0000e	03 d6		 add	 edx, esi
  00010	c1 fa 05	 sar	 edx, 5
  00013	8b c2		 mov	 eax, edx
  00015	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00018	03 c2		 add	 eax, edx
  0001a	5e		 pop	 esi
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 53   : }

  0001b	c3		 ret	 0
?GetCurrentSafeBoxSize@CPythonSafeBox@@QAEHXZ ENDP	; CPythonSafeBox::GetCurrentSafeBoxSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
;	COMDAT ?GetSlotItemID@CPythonSafeBox@@QAEHKPAK@Z
_TEXT	SEGMENT
_dwSlotIndex$ = 8					; size = 4
_pdwItemID$ = 12					; size = 4
?GetSlotItemID@CPythonSafeBox@@QAEHKPAK@Z PROC		; CPythonSafeBox::GetSlotItemID, COMDAT
; _this$ = ecx

; 56   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00007	b8 c9 42 16 b2	 mov	 eax, -1307163959	; b21642c9H
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 57   : 	if (dwSlotIndex >= m_ItemInstanceVector.size())

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _dwSlotIndex$[ebp]
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  0000f	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
  00012	2b 77 04	 sub	 esi, DWORD PTR [edi+4]
  00015	f7 ee		 imul	 esi
  00017	03 d6		 add	 edx, esi
  00019	c1 fa 05	 sar	 edx, 5
  0001c	8b c2		 mov	 eax, edx
  0001e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00021	03 c2		 add	 eax, edx
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 57   : 	if (dwSlotIndex >= m_ItemInstanceVector.size())

  00023	3b c8		 cmp	 ecx, eax
  00025	72 16		 jb	 SHORT $LN1@GetSlotIte

; 58   : 	{
; 59   : 		TraceError("CPythonSafeBox::GetSlotItemID(dwSlotIndex=%d) - Strange slot index", dwSlotIndex);

  00027	51		 push	 ecx
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@OIOPNNLC@CPythonSafeBox?3?3GetSlotItemID?$CIdw@
  0002d	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00032	83 c4 08	 add	 esp, 8

; 60   : 		return FALSE;

  00035	33 c0		 xor	 eax, eax
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi

; 66   : }

  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
$LN1@GetSlotIte:

; 63   : 	*pdwItemID=m_ItemInstanceVector[dwSlotIndex].vnum;

  0003d	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
; File a:\vs\vc\include\vector

; 1209 : 		return (*(this->_Myfirst + _Pos));

  00040	6b c9 2e	 imul	 ecx, ecx, 46
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 63   : 	*pdwItemID=m_ItemInstanceVector[dwSlotIndex].vnum;

  00045	8b 0c 01	 mov	 ecx, DWORD PTR [ecx+eax]
  00048	8b 45 0c	 mov	 eax, DWORD PTR _pdwItemID$[ebp]
  0004b	89 08		 mov	 DWORD PTR [eax], ecx

; 64   : 
; 65   : 	return TRUE;

  0004d	b8 01 00 00 00	 mov	 eax, 1

; 66   : }

  00052	5d		 pop	 ebp
  00053	c2 08 00	 ret	 8
?GetSlotItemID@CPythonSafeBox@@QAEHKPAK@Z ENDP		; CPythonSafeBox::GetSlotItemID
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
;	COMDAT ?GetMoney@CPythonSafeBox@@QAEKXZ
_TEXT	SEGMENT
?GetMoney@CPythonSafeBox@@QAEKXZ PROC			; CPythonSafeBox::GetMoney, COMDAT
; _this$ = ecx

; 47   : 	return m_dwMoney;

  00000	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]

; 48   : }

  00003	c3		 ret	 0
?GetMoney@CPythonSafeBox@@QAEKXZ ENDP			; CPythonSafeBox::GetMoney
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
;	COMDAT ?SetMoney@CPythonSafeBox@@QAEXK@Z
_TEXT	SEGMENT
_dwMoney$ = 8						; size = 4
?SetMoney@CPythonSafeBox@@QAEXK@Z PROC			; CPythonSafeBox::SetMoney, COMDAT
; _this$ = ecx

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 42   : 	m_dwMoney = dwMoney;

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwMoney$[ebp]
  00006	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 43   : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetMoney@CPythonSafeBox@@QAEXK@Z ENDP			; CPythonSafeBox::SetMoney
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
;	COMDAT ?DelItemData@CPythonSafeBox@@QAEXK@Z
_TEXT	SEGMENT
_dwSlotIndex$ = 8					; size = 4
?DelItemData@CPythonSafeBox@@QAEXK@Z PROC		; CPythonSafeBox::DelItemData, COMDAT
; _this$ = ecx

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00007	b8 c9 42 16 b2	 mov	 eax, -1307163959	; b21642c9H
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 30   : 	if (dwSlotIndex >= m_ItemInstanceVector.size())

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _dwSlotIndex$[ebp]
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  0000f	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
  00012	2b 77 04	 sub	 esi, DWORD PTR [edi+4]
  00015	f7 ee		 imul	 esi
  00017	03 d6		 add	 edx, esi
  00019	c1 fa 05	 sar	 edx, 5
  0001c	8b c2		 mov	 eax, edx
  0001e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00021	03 c2		 add	 eax, edx
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 30   : 	if (dwSlotIndex >= m_ItemInstanceVector.size())

  00023	3b c8		 cmp	 ecx, eax
  00025	72 14		 jb	 SHORT $LN1@DelItemDat

; 31   : 	{
; 32   : 		TraceError("CPythonSafeBox::DelItemData(dwSlotIndex=%d) - Strange slot index", dwSlotIndex);

  00027	51		 push	 ecx
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@ILLOPJOM@CPythonSafeBox?3?3DelItemData?$CIdwSl@
  0002d	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00032	83 c4 08	 add	 esp, 8
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi

; 38   : }

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
$LN1@DelItemDat:
; File a:\vs\vc\include\vector

; 1209 : 		return (*(this->_Myfirst + _Pos));

  0003b	6b c1 2e	 imul	 eax, ecx, 46
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 37   : 	ZeroMemory(&rInstance, sizeof(rInstance));

  0003e	6a 2e		 push	 46			; 0000002eH
  00040	6a 00		 push	 0
; File a:\vs\vc\include\vector

; 1209 : 		return (*(this->_Myfirst + _Pos));

  00042	03 47 04	 add	 eax, DWORD PTR [edi+4]
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 37   : 	ZeroMemory(&rInstance, sizeof(rInstance));

  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 _memset
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi

; 38   : }

  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?DelItemData@CPythonSafeBox@@QAEXK@Z ENDP		; CPythonSafeBox::DelItemData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
;	COMDAT ?SetItemData@CPythonSafeBox@@QAEXKABUpacket_item@@@Z
_TEXT	SEGMENT
_dwSlotIndex$ = 8					; size = 4
_rItemInstance$ = 12					; size = 4
?SetItemData@CPythonSafeBox@@QAEXKABUpacket_item@@@Z PROC ; CPythonSafeBox::SetItemData, COMDAT
; _this$ = ecx

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00007	b8 c9 42 16 b2	 mov	 eax, -1307163959	; b21642c9H
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 19   : 	if (dwSlotIndex >= m_ItemInstanceVector.size())

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _dwSlotIndex$[ebp]
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  0000f	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
  00012	2b 77 04	 sub	 esi, DWORD PTR [edi+4]
  00015	f7 ee		 imul	 esi
  00017	03 d6		 add	 edx, esi
  00019	c1 fa 05	 sar	 edx, 5
  0001c	8b c2		 mov	 eax, edx
  0001e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00021	03 c2		 add	 eax, edx
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 19   : 	if (dwSlotIndex >= m_ItemInstanceVector.size())

  00023	3b c8		 cmp	 ecx, eax
  00025	72 14		 jb	 SHORT $LN1@SetItemDat

; 20   : 	{
; 21   : 		TraceError("CPythonSafeBox::SetItemData(dwSlotIndex=%d) - Strange slot index", dwSlotIndex);

  00027	51		 push	 ecx
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@NFGEBKNF@CPythonSafeBox?3?3SetItemData?$CIdwSl@
  0002d	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00032	83 c4 08	 add	 esp, 8
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi

; 26   : }

  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
$LN1@SetItemDat:
; File a:\vs\vc\include\vector

; 1209 : 		return (*(this->_Myfirst + _Pos));

  0003b	6b d1 2e	 imul	 edx, ecx, 46
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 25   : 	m_ItemInstanceVector[dwSlotIndex] = rItemInstance;

  0003e	8b 4d 0c	 mov	 ecx, DWORD PTR _rItemInstance$[ebp]
; File a:\vs\vc\include\vector

; 1209 : 		return (*(this->_Myfirst + _Pos));

  00041	03 57 04	 add	 edx, DWORD PTR [edi+4]
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 25   : 	m_ItemInstanceVector[dwSlotIndex] = rItemInstance;

  00044	f3 0f 6f 01	 movdqu	 xmm0, XMMWORD PTR [ecx]
  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	f3 0f 7f 02	 movdqu	 XMMWORD PTR [edx], xmm0
  0004e	f3 0f 6f 41 10	 movdqu	 xmm0, XMMWORD PTR [ecx+16]
  00053	f3 0f 7f 42 10	 movdqu	 XMMWORD PTR [edx+16], xmm0
  00058	f3 0f 7e 41 20	 movq	 xmm0, QWORD PTR [ecx+32]
  0005d	66 0f d6 42 20	 movq	 QWORD PTR [edx+32], xmm0
  00062	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
  00065	89 42 28	 mov	 DWORD PTR [edx+40], eax
  00068	66 8b 41 2c	 mov	 ax, WORD PTR [ecx+44]
  0006c	66 89 42 2c	 mov	 WORD PTR [edx+44], ax

; 26   : }

  00070	5d		 pop	 ebp
  00071	c2 08 00	 ret	 8
?SetItemData@CPythonSafeBox@@QAEXKABUpacket_item@@@Z ENDP ; CPythonSafeBox::SetItemData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
;	COMDAT ?OpenSafeBox@CPythonSafeBox@@QAEXH@Z
_TEXT	SEGMENT
_iSize$ = 8						; size = 4
?OpenSafeBox@CPythonSafeBox@@QAEXH@Z PROC		; CPythonSafeBox::OpenSafeBox, COMDAT
; _this$ = ecx

; 5    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 7    : 	m_ItemInstanceVector.clear();

  00005	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
  00008	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
; File a:\vs\vc\include\vector

; 1510 : 		this->_Mylast = this->_Myfirst;

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 8    : 	m_ItemInstanceVector.resize(SAFEBOX_SLOT_X_COUNT * iSize);

  00011	8b ce		 mov	 ecx, esi
; File a:\vs\vc\include\vector

; 1510 : 		this->_Mylast = this->_Myfirst;

  00013	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 8    : 	m_ItemInstanceVector.resize(SAFEBOX_SLOT_X_COUNT * iSize);

  00016	8b 45 08	 mov	 eax, DWORD PTR _iSize$[ebp]
  00019	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ?resize@?$vector@Upacket_item@@V?$allocator@Upacket_item@@@std@@@std@@QAEXI@Z ; std::vector<packet_item,std::allocator<packet_item> >::resize
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00022	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00025	b8 c9 42 16 b2	 mov	 eax, -1307163959	; b21642c9H
  0002a	2b 0e		 sub	 ecx, DWORD PTR [esi]
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 10   : 	for (DWORD i = 0; i < m_ItemInstanceVector.size(); ++i)

  0002c	33 db		 xor	 ebx, ebx
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  0002e	f7 e9		 imul	 ecx
  00030	03 d1		 add	 edx, ecx
  00032	c1 fa 05	 sar	 edx, 5
  00035	8b c2		 mov	 eax, edx
  00037	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003a	03 c2		 add	 eax, edx
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 10   : 	for (DWORD i = 0; i < m_ItemInstanceVector.size(); ++i)

  0003c	74 35		 je	 SHORT $LN1@OpenSafeBo

; 6    : 	m_dwMoney = 0;

  0003e	57		 push	 edi
  0003f	33 ff		 xor	 edi, edi
$LL3@OpenSafeBo:
; File a:\vs\vc\include\vector

; 1209 : 		return (*(this->_Myfirst + _Pos));

  00041	8b 06		 mov	 eax, DWORD PTR [esi]
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 13   : 		ZeroMemory(&rInstance, sizeof(rInstance));

  00043	6a 2e		 push	 46			; 0000002eH
; File a:\vs\vc\include\vector

; 1209 : 		return (*(this->_Myfirst + _Pos));

  00045	03 c7		 add	 eax, edi
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 13   : 		ZeroMemory(&rInstance, sizeof(rInstance));

  00047	6a 00		 push	 0
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 _memset
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  0004f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00052	b8 c9 42 16 b2	 mov	 eax, -1307163959	; b21642c9H
  00057	2b 0e		 sub	 ecx, DWORD PTR [esi]
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 10   : 	for (DWORD i = 0; i < m_ItemInstanceVector.size(); ++i)

  00059	43		 inc	 ebx
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  0005a	f7 e9		 imul	 ecx
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 13   : 		ZeroMemory(&rInstance, sizeof(rInstance));

  0005c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005f	83 c7 2e	 add	 edi, 46			; 0000002eH
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00062	03 d1		 add	 edx, ecx
  00064	c1 fa 05	 sar	 edx, 5
  00067	8b c2		 mov	 eax, edx
  00069	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0006c	03 c2		 add	 eax, edx
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 10   : 	for (DWORD i = 0; i < m_ItemInstanceVector.size(); ++i)

  0006e	3b d8		 cmp	 ebx, eax
  00070	72 cf		 jb	 SHORT $LL3@OpenSafeBo
  00072	5f		 pop	 edi
$LN1@OpenSafeBo:
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx

; 14   : 	}
; 15   : }

  00075	5d		 pop	 ebp
  00076	c2 04 00	 ret	 4
?OpenSafeBox@CPythonSafeBox@@QAEXH@Z ENDP		; CPythonSafeBox::OpenSafeBox
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\eterbase\singleton.h
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
;	COMDAT ??1CPythonSafeBox@@UAE@XZ
_TEXT	SEGMENT
??1CPythonSafeBox@@UAE@XZ PROC				; CPythonSafeBox::~CPythonSafeBox, COMDAT
; _this$ = ecx

; 153  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CPythonSafeBox@@6B@
; File a:\vs\vc\include\vector

; 1623 : 		if (this->_Myfirst != pointer())

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	85 c0		 test	 eax, eax
  0000e	74 1e		 je	 SHORT $LN8@CPythonSaf
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
; File a:\vs\vc\include\vector

; 1629 : 			this->_Myfirst = pointer();

  00019	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 1630 : 			this->_Mylast = pointer();

  00020	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1631 : 			this->_Myend = pointer();

  00027	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN8@CPythonSaf:

; 1623 : 		if (this->_Myfirst != pointer())

  0002e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00031	85 c0		 test	 eax, eax
  00033	74 1e		 je	 SHORT $LN34@CPythonSaf
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003b	83 c4 04	 add	 esp, 4
; File a:\vs\vc\include\vector

; 1629 : 			this->_Myfirst = pointer();

  0003e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1630 : 			this->_Mylast = pointer();

  00045	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 1631 : 			this->_Myend = pointer();

  0004c	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN34@CPythonSaf:
; File a:\from c\desktop\serwer\source\source client\client\eterbase\singleton.h

; 19   : 	{ 

  00053	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCPythonSafeBox@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0; 

  00059	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSafeBox@@@@0PAVCPythonSafeBox@@A, 0 ; CSingleton<CPythonSafeBox>::ms_singleton
  00063	5e		 pop	 esi
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 154  : }

  00064	c3		 ret	 0
??1CPythonSafeBox@@UAE@XZ ENDP				; CPythonSafeBox::~CPythonSafeBox
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\from c\desktop\serwer\source\source client\client\eterbase\singleton.h
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
;	COMDAT ??0CPythonSafeBox@@QAE@XZ
_TEXT	SEGMENT
??0CPythonSafeBox@@QAE@XZ PROC				; CPythonSafeBox::CPythonSafeBox, COMDAT
; _this$ = ecx
; File a:\from c\desktop\serwer\source\source client\client\eterbase\singleton.h

; 15   : 		ms_singleton = (T*) ((int) this + offset);

  00000	89 0d 00 00 00
	00		 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSafeBox@@@@0PAVCPythonSafeBox@@A, ecx ; CSingleton<CPythonSafeBox>::ms_singleton
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 150  : }

  00006	8b c1		 mov	 eax, ecx
  00008	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CPythonSafeBox@@6B@
; File a:\vs\vc\include\vector

; 482  : 		_Myfirst = pointer();

  0000e	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 483  : 		_Mylast = pointer();

  00015	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 484  : 		_Myend = pointer();

  0001c	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 482  : 		_Myfirst = pointer();

  00023	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 483  : 		_Mylast = pointer();

  0002a	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 484  : 		_Myend = pointer();

  00031	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp

; 149  : 	m_dwMoney = 0;

  00038	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 150  : }

  0003f	c3		 ret	 0
??0CPythonSafeBox@@QAE@XZ ENDP				; CPythonSafeBox::CPythonSafeBox
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterbase\singleton.h
;	COMDAT ??_G?$CSingleton@VCPythonSafeBox@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CSingleton@VCPythonSafeBox@@@@UAEPAXI@Z PROC	; CSingleton<CPythonSafeBox>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 19   : 	{ 

  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCPythonSafeBox@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0; 

  00010	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSafeBox@@@@0PAVCPythonSafeBox@@A, 0 ; CSingleton<CPythonSafeBox>::ms_singleton
  0001a	74 09		 je	 SHORT $LN6@scalar
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$LN6@scalar:
  00025	8b c6		 mov	 eax, esi
  00027	5e		 pop	 esi
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
??_G?$CSingleton@VCPythonSafeBox@@@@UAEPAXI@Z ENDP	; CSingleton<CPythonSafeBox>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterbase\singleton.h
;	COMDAT ?Instance@?$CSingleton@VCPythonSafeBox@@@@SAAAVCPythonSafeBox@@XZ
_TEXT	SEGMENT
?Instance@?$CSingleton@VCPythonSafeBox@@@@SAAAVCPythonSafeBox@@XZ PROC ; CSingleton<CPythonSafeBox>::Instance, COMDAT

; 26   : 		assert(ms_singleton);
; 27   : 		return (*ms_singleton);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSafeBox@@@@0PAVCPythonSafeBox@@A ; CSingleton<CPythonSafeBox>::ms_singleton

; 28   : 	}

  00005	c3		 ret	 0
?Instance@?$CSingleton@VCPythonSafeBox@@@@SAAAVCPythonSafeBox@@XZ ENDP ; CSingleton<CPythonSafeBox>::Instance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterbase\singleton.h
;	COMDAT ??1?$CSingleton@VCPythonSafeBox@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CSingleton@VCPythonSafeBox@@@@UAE@XZ PROC		; CSingleton<CPythonSafeBox>::~CSingleton<CPythonSafeBox>, COMDAT
; _this$ = ecx

; 19   : 	{ 

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCPythonSafeBox@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0; 

  00006	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSafeBox@@@@0PAVCPythonSafeBox@@A, 0 ; CSingleton<CPythonSafeBox>::ms_singleton

; 22   : 	}

  00010	c3		 ret	 0
??1?$CSingleton@VCPythonSafeBox@@@@UAE@XZ ENDP		; CSingleton<CPythonSafeBox>::~CSingleton<CPythonSafeBox>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterbase\singleton.h
;	COMDAT ??0?$CSingleton@VCPythonSafeBox@@@@QAE@XZ
_TEXT	SEGMENT
??0?$CSingleton@VCPythonSafeBox@@@@QAE@XZ PROC		; CSingleton<CPythonSafeBox>::CSingleton<CPythonSafeBox>, COMDAT
; _this$ = ecx

; 11   : 	CSingleton()

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCPythonSafeBox@@@@6B@

; 12   : 	{ 
; 13   : 		assert(!ms_singleton);
; 14   : 		int offset = (int) (T*) 1 - (int) (CSingleton <T>*) (T*) 1; 
; 15   : 		ms_singleton = (T*) ((int) this + offset);
; 16   : 	} 

  00006	8b c1		 mov	 eax, ecx
  00008	89 0d 00 00 00
	00		 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSafeBox@@@@0PAVCPythonSafeBox@@A, ecx ; CSingleton<CPythonSafeBox>::ms_singleton
  0000e	c3		 ret	 0
??0?$CSingleton@VCPythonSafeBox@@@@QAE@XZ ENDP		; CSingleton<CPythonSafeBox>::CSingleton<CPythonSafeBox>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\userinterface\pythonsafebox.cpp
;	COMDAT ?initsafebox@@YAXXZ
_TEXT	SEGMENT
?initsafebox@@YAXXZ PROC				; initsafebox, COMDAT

; 313  : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 314  : 	static PyMethodDef s_methods[] =
; 315  : 	{
; 316  : 		// SafeBox
; 317  : 		{ "GetCurrentSafeboxSize",		safeboxGetCurrentSafeboxSize,			METH_VARARGS },
; 318  : 		{ "GetItemID",					safeboxGetItemID,						METH_VARARGS },
; 319  : 		{ "GetItemCount",				safeboxGetItemCount,					METH_VARARGS },
; 320  : 		{ "GetItemFlags",				safeboxGetItemFlags,					METH_VARARGS },
; 321  : 		{ "GetItemMetinSocket",			safeboxGetItemMetinSocket,				METH_VARARGS },
; 322  : 		{ "GetItemAttribute",			safeboxGetItemAttribute,				METH_VARARGS },
; 323  : 		{ "GetMoney",					safeboxGetMoney,						METH_VARARGS },
; 324  : 
; 325  : 		// Mall
; 326  : 		{ "GetMallItemID",				safeboxGetMallItemID,					METH_VARARGS },
; 327  : 		{ "GetMallItemCount",			safeboxGetMallItemCount,				METH_VARARGS },
; 328  : 		{ "GetMallItemMetinSocket",		safeboxGetMallItemMetinSocket,			METH_VARARGS },
; 329  : 		{ "GetMallItemAttribute",		safeboxGetMallItemAttribute,			METH_VARARGS },
; 330  : 		{ "GetMallSize",				safeboxGetMallSize,						METH_VARARGS },
; 331  : 		{ NULL,							NULL,									NULL },
; 332  : 	};
; 333  : 
; 334  : 	PyObject * poModule = Py_InitModule("safebox", s_methods);

  00002	68 f5 03 00 00	 push	 1013			; 000003f5H
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	68 00 00 00 00	 push	 OFFSET ?s_methods@?1??initsafebox@@YAXXZ@4PAUPyMethodDef@@A
  00010	68 00 00 00 00	 push	 OFFSET ??_C@_07CPPOKFKF@safebox?$AA@
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_InitModule4

; 335  : 	PyModule_AddIntConstant(poModule, "SAFEBOX_SLOT_X_COUNT", CPythonSafeBox::SAFEBOX_SLOT_X_COUNT);

  0001b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__PyModule_AddIntConstant
  00021	8b f8		 mov	 edi, eax
  00023	6a 05		 push	 5
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@DMABFMEE@SAFEBOX_SLOT_X_COUNT?$AA@
  0002a	57		 push	 edi
  0002b	ff d6		 call	 esi

; 336  : 	PyModule_AddIntConstant(poModule, "SAFEBOX_SLOT_Y_COUNT", CPythonSafeBox::SAFEBOX_SLOT_Y_COUNT);

  0002d	6a 09		 push	 9
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PAKLFMNK@SAFEBOX_SLOT_Y_COUNT?$AA@
  00034	57		 push	 edi
  00035	ff d6		 call	 esi

; 337  : 	PyModule_AddIntConstant(poModule, "SAFEBOX_PAGE_SIZE", CPythonSafeBox::SAFEBOX_PAGE_SIZE);

  00037	6a 2d		 push	 45			; 0000002dH
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@JOOAEPKL@SAFEBOX_PAGE_SIZE?$AA@
  0003e	57		 push	 edi
  0003f	ff d6		 call	 esi
  00041	83 c4 38	 add	 esp, 56			; 00000038H
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi

; 338  : }

  00046	c3		 ret	 0
?initsafebox@@YAXXZ ENDP				; initsafebox
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 44   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 65   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 60   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 61   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
END
