; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	A:\From C\Desktop\Serwer\Source\Source Client\client\scriptLib\PythonMarshal.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?_PyMarshal_ReadObjectFromFile@@YAPAU_object@@PAU_iobuf@@@Z ; _PyMarshal_ReadObjectFromFile
PUBLIC	?_PyMarshal_ReadLastObjectFromFile@@YAPAU_object@@PAU_iobuf@@@Z ; _PyMarshal_ReadLastObjectFromFile
PUBLIC	?_PyMarshal_ReadLongFromFile@@YAJPAU_iobuf@@@Z	; _PyMarshal_ReadLongFromFile
PUBLIC	?_PyMarshal_ReadShortFromFile@@YAHPAU_iobuf@@@Z	; _PyMarshal_ReadShortFromFile
PUBLIC	?_PyMarshal_ReadObjectFromString@@YAPAU_object@@PADH@Z ; _PyMarshal_ReadObjectFromString
PUBLIC	??_C@_0BP@OFPCODJP@EOF?5read?5where?5object?5expected?$AA@ ; `string'
PUBLIC	??_C@_0BB@DCKILJJE@bad?5marshal?5data?$AA@	; `string'
PUBLIC	??_C@_0DL@GCEHJGML@cannot?5unmarshal?5code?5objects?5in@ ; `string'
PUBLIC	??_C@_0CJ@IABJNOI@XXX?5rd_object?5called?5with?5except@ ; `string'
PUBLIC	??_C@_0CK@PCMIHNOG@XXX?5rds_object?5called?5with?5excep@ ; `string'
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_atof:PROC
EXTRN	_free:PROC
EXTRN	_malloc:PROC
EXTRN	___iob_func:PROC
EXTRN	__fileno:PROC
EXTRN	_fprintf:PROC
EXTRN	_fread:PROC
EXTRN	_getc:PROC
EXTRN	__fstat64i32:PROC
EXTRN	__imp__PyUnicodeUCS2_DecodeUTF8:PROC
EXTRN	__imp__PyInt_FromLong:PROC
EXTRN	__imp___PyLong_FromByteArray:PROC
EXTRN	__imp__PyFloat_FromDouble:PROC
EXTRN	__imp__PyComplex_FromCComplex:PROC
EXTRN	__imp__PyString_FromStringAndSize:PROC
EXTRN	__imp__PyTuple_New:PROC
EXTRN	__imp__PyList_New:PROC
EXTRN	__imp__PyList_SetItem:PROC
EXTRN	__imp__PyDict_New:PROC
EXTRN	__imp__PyDict_SetItem:PROC
EXTRN	__imp__PyErr_SetString:PROC
EXTRN	__imp__PyErr_Occurred:PROC
EXTRN	__imp__PyErr_NoMemory:PROC
EXTRN	__imp__PyEval_GetRestricted:PROC
EXTRN	__imp__PyCode_New:PROC
EXTRN	__imp__PyMarshal_ReadObjectFromString:PROC
EXTRN	__imp___PyLong_New:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
EXTRN	__imp___Py_NoneStruct:QWORD
EXTRN	__imp___Py_EllipsisObject:QWORD
EXTRN	__imp__PyExc_StopIteration:DWORD
EXTRN	__imp__PyExc_EOFError:DWORD
EXTRN	__imp__PyExc_RuntimeError:DWORD
EXTRN	__imp__PyExc_ValueError:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ??_C@_0CK@PCMIHNOG@XXX?5rds_object?5called?5with?5excep@
CONST	SEGMENT
??_C@_0CK@PCMIHNOG@XXX?5rds_object?5called?5with?5excep@ DB 'XXX rds_obje'
	DB	'ct called with exception set', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@IABJNOI@XXX?5rd_object?5called?5with?5except@
CONST	SEGMENT
??_C@_0CJ@IABJNOI@XXX?5rd_object?5called?5with?5except@ DB 'XXX rd_object'
	DB	' called with exception set', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@GCEHJGML@cannot?5unmarshal?5code?5objects?5in@
CONST	SEGMENT
??_C@_0DL@GCEHJGML@cannot?5unmarshal?5code?5objects?5in@ DB 'cannot unmar'
	DB	'shal code objects in restricted execution mode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DCKILJJE@bad?5marshal?5data?$AA@
CONST	SEGMENT
??_C@_0BB@DCKILJJE@bad?5marshal?5data?$AA@ DB 'bad marshal data', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@OFPCODJP@EOF?5read?5where?5object?5expected?$AA@
CONST	SEGMENT
??_C@_0BP@OFPCODJP@EOF?5read?5where?5object?5expected?$AA@ DB 'EOF read w'
	DB	'here object expected', 00H			; `string'
CONST	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\scriptlib\pythonmarshal.cpp
;	COMDAT ?_PyMarshal_ReadObjectFromString@@YAPAU_object@@PADH@Z
_TEXT	SEGMENT
_rf$ = -24						; size = 24
_str$ = 8						; size = 4
_len$ = 12						; size = 4
?_PyMarshal_ReadObjectFromString@@YAPAU_object@@PADH@Z PROC ; _PyMarshal_ReadObjectFromString, COMDAT

; 467  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 468  : 	RFILE rf;
; 469  : 	if (PyErr_Occurred()) {

  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyErr_Occurred
  0000c	85 c0		 test	 eax, eax
  0000e	74 1c		 je	 SHORT $LN1@PyMarshal_

; 470  : 		fprintf(stderr, "XXX rds_object called with exception set\n");

  00010	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@PCMIHNOG@XXX?5rds_object?5called?5with?5excep@
  00015	e8 00 00 00 00	 call	 ___iob_func
  0001a	83 c0 40	 add	 eax, 64			; 00000040H
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 _fprintf
  00023	83 c4 08	 add	 esp, 8

; 471  : 		return NULL;

  00026	33 c0		 xor	 eax, eax

; 478  : }

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
$LN1@PyMarshal_:

; 472  : 	}
; 473  : 	rf.fp = NULL;
; 474  : 	rf.str = NULL;
; 475  : 	rf.ptr = str;

  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]

; 476  : 	rf.end = str + len;

  0002f	8b 45 0c	 mov	 eax, DWORD PTR _len$[ebp]
  00032	03 c1		 add	 eax, ecx
  00034	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _rf$[ebp], 0
  0003b	89 45 fc	 mov	 DWORD PTR _rf$[ebp+20], eax

; 477  : 	return r_object(&rf);

  0003e	8d 45 e8	 lea	 eax, DWORD PTR _rf$[ebp]
  00041	50		 push	 eax
  00042	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _rf$[ebp+12], 0
  00049	89 4d f8	 mov	 DWORD PTR _rf$[ebp+16], ecx
  0004c	e8 00 00 00 00	 call	 ?r_object@@YAPAU_object@@PAUWFILE@@@Z ; r_object
  00051	83 c4 04	 add	 esp, 4

; 478  : }

  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
?_PyMarshal_ReadObjectFromString@@YAPAU_object@@PADH@Z ENDP ; _PyMarshal_ReadObjectFromString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\scriptlib\pythonmarshal.cpp
; File a:\vs\vc\include\sys\stat.inl
; File a:\from c\desktop\serwer\source\source client\client\scriptlib\pythonmarshal.cpp
; File a:\vs\vc\include\sys\stat.inl
; File a:\from c\desktop\serwer\source\source client\client\scriptlib\pythonmarshal.cpp
;	COMDAT ?getfilesize@@YAJPAU_iobuf@@@Z
_TEXT	SEGMENT
_st$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_fp$ = 8						; size = 4
?getfilesize@@YAJPAU_iobuf@@@Z PROC			; getfilesize, COMDAT

; 398  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _fp$[ebp]

; 400  : 	if (fstat(fileno(fp), &st) != 0)

  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 __fileno
; File a:\vs\vc\include\sys\stat.inl

; 54   :     return _fstat64i32(_Desc,(struct _stat64i32 *)_Stat);

  00019	8d 4d cc	 lea	 ecx, DWORD PTR _st$[ebp]
  0001c	51		 push	 ecx
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 __fstat64i32
; File a:\from c\desktop\serwer\source\source client\client\scriptlib\pythonmarshal.cpp

; 400  : 	if (fstat(fileno(fp), &st) != 0)

  00023	8b 4d e0	 mov	 ecx, DWORD PTR _st$[ebp+20]
  00026	83 ca ff	 or	 edx, -1
; File a:\vs\vc\include\sys\stat.inl

; 54   :     return _fstat64i32(_Desc,(struct _stat64i32 *)_Stat);

  00029	83 c4 0c	 add	 esp, 12			; 0000000cH
; File a:\from c\desktop\serwer\source\source client\client\scriptlib\pythonmarshal.cpp

; 400  : 	if (fstat(fileno(fp), &st) != 0)

  0002c	85 c0		 test	 eax, eax
  0002e	0f 45 ca	 cmovne	 ecx, edx
  00031	8b c1		 mov	 eax, ecx

; 401  : 		return -1;
; 402  : 	else
; 403  : 		return st.st_size;
; 404  : }

  00033	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00036	33 cd		 xor	 ecx, ebp
  00038	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?getfilesize@@YAJPAU_iobuf@@@Z ENDP			; getfilesize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\scriptlib\pythonmarshal.cpp
;	COMDAT ?_PyMarshal_ReadShortFromFile@@YAHPAU_iobuf@@@Z
_TEXT	SEGMENT
_rf$ = -24						; size = 24
_fp$ = 8						; size = 4
?_PyMarshal_ReadShortFromFile@@YAHPAU_iobuf@@@Z PROC	; _PyMarshal_ReadShortFromFile, COMDAT

; 383  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 384  : 	RFILE rf;
; 385  : 	rf.fp = fp;

  00006	8b 45 08	 mov	 eax, DWORD PTR _fp$[ebp]
  00009	89 45 e8	 mov	 DWORD PTR _rf$[ebp], eax

; 386  : 	return r_short(&rf);

  0000c	8d 45 e8	 lea	 eax, DWORD PTR _rf$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?r_short@@YAHPAUWFILE@@@Z ; r_short
  00015	83 c4 04	 add	 esp, 4

; 387  : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?_PyMarshal_ReadShortFromFile@@YAHPAU_iobuf@@@Z ENDP	; _PyMarshal_ReadShortFromFile
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\scriptlib\pythonmarshal.cpp
;	COMDAT ?r_object@@YAPAU_object@@PAUWFILE@@@Z
_TEXT	SEGMENT
_c$1 = -320						; size = 16
_dx$2 = -312						; size = 8
_argcount$1$ = -308					; size = 4
_stacksize$1$ = -304					; size = 4
_flags$1$ = -300					; size = 4
_nlocals$1$ = -296					; size = 4
_code$1$ = -292						; size = 4
_names$1$ = -288					; size = 4
_consts$1$ = -284					; size = 4
_cellvars$1$ = -280					; size = 4
_varnames$1$ = -276					; size = 4
_firstlineno$1$ = -272					; size = 4
_v$6$ = -272						; size = 4
_lnotab$1$ = -268					; size = 4
_ob$1$ = -268						; size = 4
_n$7$ = -268						; size = 4
_freevars$1$ = -264					; size = 4
_v$5$ = -264						; size = 4
_v$3$ = -264						; size = 4
_n$8$ = -264						; size = 4
_buf$3 = -260						; size = 256
_buf$4 = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_p$ = 8							; size = 4
?r_object@@YAPAU_object@@PAUWFILE@@@Z PROC		; r_object, COMDAT

; 123  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 40 01 00
	00		 sub	 esp, 320		; 00000140H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _p$[ebp]
  00018	57		 push	 edi

; 124  : 	PyObject *v, *v2;
; 125  : 	long i, n;
; 126  : 	int type = r_byte(p);

  00019	8b 06		 mov	 eax, DWORD PTR [esi]
  0001b	85 c0		 test	 eax, eax
  0001d	74 0d		 je	 SHORT $LN186@r_object
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 _getc
  00025	83 c4 04	 add	 esp, 4
  00028	8b c8		 mov	 ecx, eax
  0002a	eb 14		 jmp	 SHORT $LN185@r_object
$LN186@r_object:
  0002c	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0002f	3b 46 14	 cmp	 eax, DWORD PTR [esi+20]
  00032	74 09		 je	 SHORT $LN184@r_object
  00034	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00037	40		 inc	 eax
  00038	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0003b	eb 03		 jmp	 SHORT $LN185@r_object
$LN184@r_object:
  0003d	83 c9 ff	 or	 ecx, -1
$LN185@r_object:

; 127  : 
; 128  : 	switch (type) {

  00040	41		 inc	 ecx
  00041	83 f9 7c	 cmp	 ecx, 124		; 0000007cH
  00044	0f 87 15 08 00
	00		 ja	 $LN1@r_object
  0004a	0f b6 81 00 00
	00 00		 movzx	 eax, BYTE PTR $LN229@r_object[ecx]
  00051	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN242@r_object[eax*4]
$LN179@r_object:

; 129  : 
; 130  : 	case EOF:
; 131  : 		PyErr_SetString(PyExc_EOFError,
; 132  : 				"EOF read where object expected");

  00058	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__PyExc_EOFError
  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OFPCODJP@EOF?5read?5where?5object?5expected?$AA@

; 133  : 		return NULL;

  00062	e9 02 08 00 00	 jmp	 $LN239@r_object
$LN177@r_object:

; 134  : 
; 135  : 	case TYPE_NULL:
; 136  : 		return NULL;
; 137  : 
; 138  : 	case TYPE_NONE:
; 139  : 		Py_INCREF(Py_None);

  00067	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp___Py_NoneStruct
  0006c	ff 00		 inc	 DWORD PTR [eax]

; 140  : 		return Py_None;

  0006e	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp___Py_NoneStruct

; 379  : 	}
; 380  : }

  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx
  00076	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00079	33 cd		 xor	 ecx, ebp
  0007b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
$LN176@r_object:

; 141  : 
; 142  : 	case TYPE_STOPITER:
; 143  : 		Py_INCREF(PyExc_StopIteration);

  00084	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__PyExc_StopIteration
  00089	8b 00		 mov	 eax, DWORD PTR [eax]
  0008b	ff 00		 inc	 DWORD PTR [eax]

; 144  : 		return PyExc_StopIteration;

  0008d	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__PyExc_StopIteration
  00092	8b 00		 mov	 eax, DWORD PTR [eax]

; 379  : 	}
; 380  : }

  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009a	33 cd		 xor	 ecx, ebp
  0009c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
$LN175@r_object:

; 145  : 
; 146  : 	case TYPE_ELLIPSIS:
; 147  : 		Py_INCREF(Py_Ellipsis);

  000a5	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp___Py_EllipsisObject
  000aa	ff 00		 inc	 DWORD PTR [eax]

; 148  : 		return Py_Ellipsis;

  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp___Py_EllipsisObject

; 379  : 	}
; 380  : }

  000b1	5f		 pop	 edi
  000b2	5e		 pop	 esi
  000b3	5b		 pop	 ebx
  000b4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b7	33 cd		 xor	 ecx, ebp
  000b9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c3		 ret	 0
$LN174@r_object:

; 149  : 
; 150  : 	case TYPE_INT:
; 151  : 		return PyInt_FromLong(r_long(p));

  000c2	56		 push	 esi
  000c3	e8 00 00 00 00	 call	 ?r_long@@YAJPAUWFILE@@@Z ; r_long
  000c8	50		 push	 eax
  000c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyInt_FromLong
  000cf	83 c4 08	 add	 esp, 8

; 379  : 	}
; 380  : }

  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	5b		 pop	 ebx
  000d5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d8	33 cd		 xor	 ecx, ebp
  000da	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000df	8b e5		 mov	 esp, ebp
  000e1	5d		 pop	 ebp
  000e2	c3		 ret	 0
$LN173@r_object:

; 152  : 
; 153  : 	case TYPE_INT64:
; 154  : 		return r_long64(p);

  000e3	56		 push	 esi
  000e4	e8 00 00 00 00	 call	 ?r_long64@@YAPAU_object@@PAUWFILE@@@Z ; r_long64
  000e9	83 c4 04	 add	 esp, 4

; 379  : 	}
; 380  : }

  000ec	5f		 pop	 edi
  000ed	5e		 pop	 esi
  000ee	5b		 pop	 ebx
  000ef	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f2	33 cd		 xor	 ecx, ebp
  000f4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c3		 ret	 0
$LN172@r_object:

; 155  : 
; 156  : 	case TYPE_LONG:
; 157  : 		{
; 158  : 			int size;
; 159  : 			PyLongObject* ob;
; 160  : 			n = r_long(p);

  000fd	56		 push	 esi
  000fe	e8 00 00 00 00	 call	 ?r_long@@YAJPAUWFILE@@@Z ; r_long
  00103	8b d8		 mov	 ebx, eax

; 161  : 			size = n<0 ? -n : n;

  00105	99		 cdq
  00106	8b f8		 mov	 edi, eax
  00108	33 fa		 xor	 edi, edx
  0010a	2b fa		 sub	 edi, edx

; 162  : 			ob = _PyLong_New(size);

  0010c	57		 push	 edi
  0010d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___PyLong_New
  00113	83 c4 08	 add	 esp, 8
  00116	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _ob$1$[ebp], eax

; 163  : 			if (ob == NULL)

  0011c	85 c0		 test	 eax, eax
  0011e	0f 84 50 07 00
	00		 je	 $LN178@r_object

; 164  : 				return NULL;
; 165  : 			ob->ob_size = n;

  00124	89 58 08	 mov	 DWORD PTR [eax+8], ebx

; 166  : 			for (i = 0; i < size; i++)

  00127	85 ff		 test	 edi, edi
  00129	0f 8e 47 07 00
	00		 jle	 $LN180@r_object

; 164  : 				return NULL;
; 165  : 			ob->ob_size = n;

  0012f	8d 58 0c	 lea	 ebx, DWORD PTR [eax+12]
$LL170@r_object:

; 167  : 				ob->ob_digit[i] = (short) r_short(p);

  00132	56		 push	 esi
  00133	e8 00 00 00 00	 call	 ?r_short@@YAHPAUWFILE@@@Z ; r_short
  00138	83 c4 04	 add	 esp, 4
  0013b	66 89 03	 mov	 WORD PTR [ebx], ax
  0013e	8d 5b 02	 lea	 ebx, DWORD PTR [ebx+2]
  00141	4f		 dec	 edi
  00142	75 ee		 jne	 SHORT $LL170@r_object
  00144	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _ob$1$[ebp]

; 379  : 	}
; 380  : }

  0014a	5f		 pop	 edi
  0014b	5e		 pop	 esi
  0014c	5b		 pop	 ebx
  0014d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00150	33 cd		 xor	 ecx, ebp
  00152	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00157	8b e5		 mov	 esp, ebp
  00159	5d		 pop	 ebp
  0015a	c3		 ret	 0
$LN167@r_object:

; 168  : 			return (PyObject *) ob;
; 169  : 		}
; 170  : 
; 171  : 	case TYPE_FLOAT:
; 172  : 		{
; 173  : 			char buf[256];
; 174  : 			double dx;
; 175  : 			n = r_byte(p);

  0015b	8b 06		 mov	 eax, DWORD PTR [esi]
  0015d	85 c0		 test	 eax, eax
  0015f	74 0d		 je	 SHORT $LN190@r_object
  00161	50		 push	 eax
  00162	e8 00 00 00 00	 call	 _getc
  00167	83 c4 04	 add	 esp, 4
  0016a	8b f8		 mov	 edi, eax
  0016c	eb 14		 jmp	 SHORT $LN189@r_object
$LN190@r_object:
  0016e	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00171	3b 46 14	 cmp	 eax, DWORD PTR [esi+20]
  00174	74 09		 je	 SHORT $LN188@r_object
  00176	0f b6 38	 movzx	 edi, BYTE PTR [eax]
  00179	40		 inc	 eax
  0017a	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0017d	eb 03		 jmp	 SHORT $LN189@r_object
$LN188@r_object:
  0017f	83 cf ff	 or	 edi, -1
$LN189@r_object:

; 176  : 			if (r_string(buf, (int)n, p) != n) {

  00182	56		 push	 esi
  00183	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buf$4[ebp]
  00189	57		 push	 edi
  0018a	50		 push	 eax
  0018b	e8 00 00 00 00	 call	 ?r_string@@YAHPADHPAUWFILE@@@Z ; r_string
  00190	83 c4 0c	 add	 esp, 12			; 0000000cH
  00193	3b c7		 cmp	 eax, edi
  00195	0f 85 bd fe ff
	ff		 jne	 $LN179@r_object

; 177  : 				PyErr_SetString(PyExc_EOFError,
; 178  : 					"EOF read where object expected");
; 179  : 				return NULL;
; 180  : 			}
; 181  : 			buf[n] = '\0';

  0019b	81 ff 00 01 00
	00		 cmp	 edi, 256		; 00000100H
  001a1	0f 83 e0 06 00
	00		 jae	 $LN241@r_object

; 182  : 			PyFPE_START_PROTECT("atof", return 0)
; 183  : 			dx = atof(buf);

  001a7	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buf$4[ebp]
  001ad	c6 84 3d fc fe
	ff ff 00	 mov	 BYTE PTR _buf$4[ebp+edi], 0
  001b5	50		 push	 eax
  001b6	e8 00 00 00 00	 call	 _atof
  001bb	dd 9d c8 fe ff
	ff		 fstp	 QWORD PTR _dx$2[ebp]

; 184  : 			PyFPE_END_PROTECT(dx)
; 185  : 			return PyFloat_FromDouble(dx);

  001c1	f2 0f 10 85 c8
	fe ff ff	 movsd	 xmm0, QWORD PTR _dx$2[ebp]
  001c9	51		 push	 ecx
  001ca	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  001cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyFloat_FromDouble
  001d5	83 c4 08	 add	 esp, 8

; 379  : 	}
; 380  : }

  001d8	5f		 pop	 edi
  001d9	5e		 pop	 esi
  001da	5b		 pop	 ebx
  001db	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001de	33 cd		 xor	 ecx, ebp
  001e0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e5	8b e5		 mov	 esp, ebp
  001e7	5d		 pop	 ebp
  001e8	c3		 ret	 0
$LN165@r_object:

; 186  : 		}
; 187  : 
; 188  : #ifndef WITHOUT_COMPLEX
; 189  : 	case TYPE_COMPLEX:
; 190  : 		{
; 191  : 			char buf[256];
; 192  : 			Py_complex c;
; 193  : 			n = r_byte(p);

  001e9	8b 06		 mov	 eax, DWORD PTR [esi]
  001eb	85 c0		 test	 eax, eax
  001ed	74 0d		 je	 SHORT $LN196@r_object
  001ef	50		 push	 eax
  001f0	e8 00 00 00 00	 call	 _getc
  001f5	83 c4 04	 add	 esp, 4
  001f8	8b f8		 mov	 edi, eax
  001fa	eb 14		 jmp	 SHORT $LN195@r_object
$LN196@r_object:
  001fc	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  001ff	3b 46 14	 cmp	 eax, DWORD PTR [esi+20]
  00202	74 09		 je	 SHORT $LN194@r_object
  00204	0f b6 38	 movzx	 edi, BYTE PTR [eax]
  00207	40		 inc	 eax
  00208	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0020b	eb 03		 jmp	 SHORT $LN195@r_object
$LN194@r_object:
  0020d	83 cf ff	 or	 edi, -1
$LN195@r_object:

; 194  : 			if (r_string(buf, (int)n, p) != n) {

  00210	56		 push	 esi
  00211	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buf$3[ebp]
  00217	57		 push	 edi
  00218	50		 push	 eax
  00219	e8 00 00 00 00	 call	 ?r_string@@YAHPADHPAUWFILE@@@Z ; r_string
  0021e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00221	3b c7		 cmp	 eax, edi
  00223	0f 85 2f fe ff
	ff		 jne	 $LN179@r_object

; 195  : 				PyErr_SetString(PyExc_EOFError,
; 196  : 					"EOF read where object expected");
; 197  : 				return NULL;
; 198  : 			}
; 199  : 			buf[n] = '\0';

  00229	81 ff 00 01 00
	00		 cmp	 edi, 256		; 00000100H
  0022f	0f 83 52 06 00
	00		 jae	 $LN241@r_object

; 200  : 			PyFPE_START_PROTECT("atof", return 0)
; 201  : 			c.real = atof(buf);

  00235	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buf$3[ebp]
  0023b	c6 84 3d fc fe
	ff ff 00	 mov	 BYTE PTR _buf$3[ebp+edi], 0
  00243	50		 push	 eax
  00244	e8 00 00 00 00	 call	 _atof

; 202  : 			PyFPE_END_PROTECT(c)
; 203  : 			n = r_byte(p);

  00249	8b 06		 mov	 eax, DWORD PTR [esi]
  0024b	83 c4 04	 add	 esp, 4
  0024e	dd 9d c0 fe ff
	ff		 fstp	 QWORD PTR _c$1[ebp]
  00254	85 c0		 test	 eax, eax
  00256	74 0d		 je	 SHORT $LN202@r_object
  00258	50		 push	 eax
  00259	e8 00 00 00 00	 call	 _getc
  0025e	83 c4 04	 add	 esp, 4
  00261	8b f8		 mov	 edi, eax
  00263	eb 14		 jmp	 SHORT $LN201@r_object
$LN202@r_object:
  00265	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00268	3b 46 14	 cmp	 eax, DWORD PTR [esi+20]
  0026b	74 09		 je	 SHORT $LN200@r_object
  0026d	0f b6 38	 movzx	 edi, BYTE PTR [eax]
  00270	40		 inc	 eax
  00271	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00274	eb 03		 jmp	 SHORT $LN201@r_object
$LN200@r_object:
  00276	83 cf ff	 or	 edi, -1
$LN201@r_object:

; 204  : 			if (r_string(buf, (int)n, p) != n) {

  00279	56		 push	 esi
  0027a	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buf$3[ebp]
  00280	57		 push	 edi
  00281	50		 push	 eax
  00282	e8 00 00 00 00	 call	 ?r_string@@YAHPADHPAUWFILE@@@Z ; r_string
  00287	83 c4 0c	 add	 esp, 12			; 0000000cH
  0028a	3b c7		 cmp	 eax, edi
  0028c	0f 85 c6 fd ff
	ff		 jne	 $LN179@r_object

; 205  : 				PyErr_SetString(PyExc_EOFError,
; 206  : 					"EOF read where object expected");
; 207  : 				return NULL;
; 208  : 			}
; 209  : 			buf[n] = '\0';

  00292	81 ff 00 01 00
	00		 cmp	 edi, 256		; 00000100H
  00298	0f 83 e9 05 00
	00		 jae	 $LN241@r_object

; 210  : 			PyFPE_START_PROTECT("atof", return 0)
; 211  : 			c.imag = atof(buf);

  0029e	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buf$3[ebp]
  002a4	c6 84 3d fc fe
	ff ff 00	 mov	 BYTE PTR _buf$3[ebp+edi], 0
  002ac	50		 push	 eax
  002ad	e8 00 00 00 00	 call	 _atof

; 212  : 			PyFPE_END_PROTECT(c)
; 213  : 			return PyComplex_FromCComplex(c);

  002b2	83 ec 0c	 sub	 esp, 12			; 0000000cH
  002b5	8b c4		 mov	 eax, esp
  002b7	dd 9d c8 fe ff
	ff		 fstp	 QWORD PTR _c$1[ebp+8]
  002bd	f3 0f 6f 85 c0
	fe ff ff	 movdqu	 xmm0, XMMWORD PTR _c$1[ebp]
  002c5	f3 0f 7f 00	 movdqu	 XMMWORD PTR [eax], xmm0
  002c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyComplex_FromCComplex
  002cf	83 c4 10	 add	 esp, 16			; 00000010H

; 379  : 	}
; 380  : }

  002d2	5f		 pop	 edi
  002d3	5e		 pop	 esi
  002d4	5b		 pop	 ebx
  002d5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002d8	33 cd		 xor	 ecx, ebp
  002da	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002df	8b e5		 mov	 esp, ebp
  002e1	5d		 pop	 ebp
  002e2	c3		 ret	 0
$LN162@r_object:

; 214  : 		}
; 215  : #endif
; 216  : 
; 217  : 	case TYPE_STRING:
; 218  : 		n = r_long(p);

  002e3	56		 push	 esi
  002e4	e8 00 00 00 00	 call	 ?r_long@@YAJPAUWFILE@@@Z ; r_long
  002e9	8b d8		 mov	 ebx, eax
  002eb	83 c4 04	 add	 esp, 4

; 219  : 		if (n < 0) {

  002ee	85 db		 test	 ebx, ebx
  002f0	0f 88 69 05 00
	00		 js	 $LN1@r_object

; 220  : 			PyErr_SetString(PyExc_ValueError, "bad marshal data");
; 221  : 			return NULL;
; 222  : 		}
; 223  : 		v = PyString_FromStringAndSize((char *)NULL, n);

  002f6	53		 push	 ebx
  002f7	6a 00		 push	 0
  002f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyString_FromStringAndSize
  002ff	8b f8		 mov	 edi, eax
  00301	83 c4 08	 add	 esp, 8

; 224  : 		if (v != NULL) {

  00304	85 ff		 test	 edi, edi
  00306	74 39		 je	 SHORT $LN159@r_object

; 225  : 			if (r_string(PyString_AS_STRING(v), (int)n, p) != n) {

  00308	56		 push	 esi
  00309	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  0030c	53		 push	 ebx
  0030d	51		 push	 ecx
  0030e	e8 00 00 00 00	 call	 ?r_string@@YAHPADHPAUWFILE@@@Z ; r_string
  00313	83 c4 0c	 add	 esp, 12			; 0000000cH
  00316	3b c3		 cmp	 eax, ebx
  00318	74 27		 je	 SHORT $LN159@r_object

; 226  : 				Py_DECREF(v);

  0031a	ff 0f		 dec	 DWORD PTR [edi]
  0031c	75 0c		 jne	 SHORT $LN157@r_object
  0031e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00321	57		 push	 edi
  00322	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00325	ff d0		 call	 eax
  00327	83 c4 04	 add	 esp, 4
$LN157@r_object:

; 227  : 				v = NULL;
; 228  : 				PyErr_SetString(PyExc_EOFError,
; 229  : 					"EOF read where object expected");

  0032a	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__PyExc_EOFError
  0032f	33 ff		 xor	 edi, edi
  00331	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OFPCODJP@EOF?5read?5where?5object?5expected?$AA@
  00336	ff 30		 push	 DWORD PTR [eax]
  00338	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyErr_SetString
  0033e	83 c4 08	 add	 esp, 8
$LN159@r_object:

; 230  : 			}
; 231  : 		}
; 232  : 		return v;

  00341	8b c7		 mov	 eax, edi

; 379  : 	}
; 380  : }

  00343	5f		 pop	 edi
  00344	5e		 pop	 esi
  00345	5b		 pop	 ebx
  00346	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00349	33 cd		 xor	 ecx, ebp
  0034b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00350	8b e5		 mov	 esp, ebp
  00352	5d		 pop	 ebp
  00353	c3		 ret	 0
$LN153@r_object:

; 233  : 
; 234  : #ifdef Py_USING_UNICODE
; 235  : 	case TYPE_UNICODE:
; 236  : 	    {
; 237  : 		char *buffer;
; 238  : 
; 239  : 		n = r_long(p);

  00354	56		 push	 esi
  00355	e8 00 00 00 00	 call	 ?r_long@@YAJPAUWFILE@@@Z ; r_long
  0035a	8b f8		 mov	 edi, eax
  0035c	83 c4 04	 add	 esp, 4

; 240  : 		if (n < 0) {

  0035f	85 ff		 test	 edi, edi
  00361	0f 88 f8 04 00
	00		 js	 $LN1@r_object

; 241  : 			PyErr_SetString(PyExc_ValueError, "bad marshal data");
; 242  : 			return NULL;
; 243  : 		}
; 244  : 		buffer = PyMem_NEW(char, n);

  00367	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  0036d	77 7e		 ja	 SHORT $LN228@r_object
  0036f	85 ff		 test	 edi, edi
  00371	b8 01 00 00 00	 mov	 eax, 1
  00376	0f 45 c7	 cmovne	 eax, edi
  00379	50		 push	 eax
  0037a	e8 00 00 00 00	 call	 _malloc
  0037f	8b d8		 mov	 ebx, eax
  00381	83 c4 04	 add	 esp, 4

; 245  : 		if (buffer == NULL)

  00384	85 db		 test	 ebx, ebx
  00386	74 65		 je	 SHORT $LN228@r_object

; 247  : 		if (r_string(buffer, (int)n, p) != n) {

  00388	56		 push	 esi
  00389	57		 push	 edi
  0038a	53		 push	 ebx
  0038b	e8 00 00 00 00	 call	 ?r_string@@YAHPADHPAUWFILE@@@Z ; r_string
  00390	83 c4 0c	 add	 esp, 12			; 0000000cH
  00393	3b c7		 cmp	 eax, edi
  00395	74 2e		 je	 SHORT $LN150@r_object

; 248  : 			PyMem_DEL(buffer);

  00397	53		 push	 ebx
  00398	e8 00 00 00 00	 call	 _free

; 249  : 			PyErr_SetString(PyExc_EOFError,
; 250  : 				"EOF read where object expected");

  0039d	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__PyExc_EOFError
  003a2	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OFPCODJP@EOF?5read?5where?5object?5expected?$AA@
  003a7	ff 30		 push	 DWORD PTR [eax]
  003a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyErr_SetString
  003af	83 c4 0c	 add	 esp, 12			; 0000000cH

; 378  : 		return NULL;

  003b2	33 c0		 xor	 eax, eax

; 379  : 	}
; 380  : }

  003b4	5f		 pop	 edi
  003b5	5e		 pop	 esi
  003b6	5b		 pop	 ebx
  003b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003ba	33 cd		 xor	 ecx, ebp
  003bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003c1	8b e5		 mov	 esp, ebp
  003c3	5d		 pop	 ebp
  003c4	c3		 ret	 0
$LN150@r_object:

; 251  : 			return NULL;
; 252  : 		}
; 253  : 		v = PyUnicode_DecodeUTF8(buffer, n, NULL);

  003c5	6a 00		 push	 0
  003c7	57		 push	 edi
  003c8	53		 push	 ebx
  003c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyUnicodeUCS2_DecodeUTF8

; 254  : 		PyMem_DEL(buffer);

  003cf	53		 push	 ebx
  003d0	8b f0		 mov	 esi, eax
  003d2	e8 00 00 00 00	 call	 _free
  003d7	83 c4 10	 add	 esp, 16			; 00000010H

; 255  : 		return v;

  003da	8b c6		 mov	 eax, esi

; 379  : 	}
; 380  : }

  003dc	5f		 pop	 edi
  003dd	5e		 pop	 esi
  003de	5b		 pop	 ebx
  003df	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003e2	33 cd		 xor	 ecx, ebp
  003e4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003e9	8b e5		 mov	 esp, ebp
  003eb	5d		 pop	 ebp
  003ec	c3		 ret	 0
$LN228@r_object:

; 246  : 			return PyErr_NoMemory();

  003ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyErr_NoMemory

; 379  : 	}
; 380  : }

  003f3	5f		 pop	 edi
  003f4	5e		 pop	 esi
  003f5	5b		 pop	 ebx
  003f6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003f9	33 cd		 xor	 ecx, ebp
  003fb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00400	8b e5		 mov	 esp, ebp
  00402	5d		 pop	 ebp
  00403	c3		 ret	 0
$LN149@r_object:

; 256  : 	    }
; 257  : #endif
; 258  : 
; 259  : 	case TYPE_TUPLE:
; 260  : 		n = r_long(p);

  00404	56		 push	 esi
  00405	e8 00 00 00 00	 call	 ?r_long@@YAJPAUWFILE@@@Z ; r_long
  0040a	8b d8		 mov	 ebx, eax
  0040c	83 c4 04	 add	 esp, 4
  0040f	89 9d f4 fe ff
	ff		 mov	 DWORD PTR _n$7$[ebp], ebx

; 261  : 		if (n < 0) {

  00415	85 db		 test	 ebx, ebx
  00417	0f 88 42 04 00
	00		 js	 $LN1@r_object

; 262  : 			PyErr_SetString(PyExc_ValueError, "bad marshal data");
; 263  : 			return NULL;
; 264  : 		}
; 265  : 		v = PyTuple_New((int)n);

  0041d	53		 push	 ebx
  0041e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_New
  00424	83 c4 04	 add	 esp, 4
  00427	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _v$3$[ebp], eax

; 266  : 		if (v == NULL)

  0042d	85 c0		 test	 eax, eax
  0042f	0f 84 3f 04 00
	00		 je	 $LN178@r_object

; 267  : 			return v;
; 268  : 		for (i = 0; i < n; i++) {

  00435	33 ff		 xor	 edi, edi
  00437	85 db		 test	 ebx, ebx
  00439	0f 8e 37 04 00
	00		 jle	 $LN180@r_object
  0043f	8d 58 0c	 lea	 ebx, DWORD PTR [eax+12]
$LL146@r_object:

; 269  : 			v2 = r_object(p);

  00442	56		 push	 esi
  00443	e8 00 00 00 00	 call	 ?r_object@@YAPAU_object@@PAUWFILE@@@Z ; r_object
  00448	83 c4 04	 add	 esp, 4

; 270  : 			if ( v2 == NULL ) {

  0044b	85 c0		 test	 eax, eax
  0044d	74 25		 je	 SHORT $LN214@r_object

; 272  : 				v = NULL;
; 273  : 				break;
; 274  : 			}
; 275  : 			PyTuple_SET_ITEM(v, (int)i, v2);

  0044f	89 03		 mov	 DWORD PTR [ebx], eax
  00451	47		 inc	 edi
  00452	83 c3 04	 add	 ebx, 4
  00455	3b bd f4 fe ff
	ff		 cmp	 edi, DWORD PTR _n$7$[ebp]
  0045b	7c e5		 jl	 SHORT $LL146@r_object

; 306  : 			if (key == NULL)

  0045d	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _v$3$[ebp]

; 379  : 	}
; 380  : }

  00463	5f		 pop	 edi
  00464	5e		 pop	 esi
  00465	5b		 pop	 ebx
  00466	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00469	33 cd		 xor	 ecx, ebp
  0046b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00470	8b e5		 mov	 esp, ebp
  00472	5d		 pop	 ebp
  00473	c3		 ret	 0
$LN214@r_object:

; 271  : 				Py_DECREF(v);

  00474	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _v$3$[ebp]
  0047a	ff 09		 dec	 DWORD PTR [ecx]
  0047c	0f 85 f2 03 00
	00		 jne	 $LN178@r_object
  00482	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00485	51		 push	 ecx
  00486	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00489	ff d0		 call	 eax
  0048b	83 c4 04	 add	 esp, 4

; 378  : 		return NULL;

  0048e	33 c0		 xor	 eax, eax

; 379  : 	}
; 380  : }

  00490	5f		 pop	 edi
  00491	5e		 pop	 esi
  00492	5b		 pop	 ebx
  00493	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00496	33 cd		 xor	 ecx, ebp
  00498	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0049d	8b e5		 mov	 esp, ebp
  0049f	5d		 pop	 ebp
  004a0	c3		 ret	 0
$LN137@r_object:

; 276  : 		}
; 277  : 		return v;
; 278  : 
; 279  : 	case TYPE_LIST:
; 280  : 		n = r_long(p);

  004a1	56		 push	 esi
  004a2	e8 00 00 00 00	 call	 ?r_long@@YAJPAUWFILE@@@Z ; r_long
  004a7	83 c4 04	 add	 esp, 4
  004aa	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _n$8$[ebp], eax

; 281  : 		if (n < 0) {

  004b0	85 c0		 test	 eax, eax
  004b2	0f 88 a7 03 00
	00		 js	 $LN1@r_object

; 282  : 			PyErr_SetString(PyExc_ValueError, "bad marshal data");
; 283  : 			return NULL;
; 284  : 		}
; 285  : 		v = PyList_New((int)n);

  004b8	50		 push	 eax
  004b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyList_New
  004bf	8b d8		 mov	 ebx, eax
  004c1	83 c4 04	 add	 esp, 4

; 286  : 		if (v == NULL)

  004c4	85 db		 test	 ebx, ebx
  004c6	0f 84 a8 03 00
	00		 je	 $LN178@r_object

; 287  : 			return v;
; 288  : 		for (i = 0; i < n; i++) {

  004cc	33 ff		 xor	 edi, edi
  004ce	39 bd f8 fe ff
	ff		 cmp	 DWORD PTR _n$8$[ebp], edi
  004d4	7e 47		 jle	 SHORT $LN132@r_object
$LL134@r_object:

; 289  : 			v2 = r_object(p);

  004d6	56		 push	 esi
  004d7	e8 00 00 00 00	 call	 ?r_object@@YAPAU_object@@PAUWFILE@@@Z ; r_object
  004dc	83 c4 04	 add	 esp, 4

; 290  : 			if ( v2 == NULL ) {

  004df	85 c0		 test	 eax, eax
  004e1	74 28		 je	 SHORT $LN215@r_object

; 293  : 				break;
; 294  : 			}
; 295  : 			PyList_SetItem(v, (int)i, v2);

  004e3	50		 push	 eax
  004e4	57		 push	 edi
  004e5	53		 push	 ebx
  004e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyList_SetItem
  004ec	47		 inc	 edi
  004ed	83 c4 0c	 add	 esp, 12			; 0000000cH
  004f0	3b bd f8 fe ff
	ff		 cmp	 edi, DWORD PTR _n$8$[ebp]
  004f6	7c de		 jl	 SHORT $LL134@r_object

; 296  : 		}
; 297  : 		return v;

  004f8	8b c3		 mov	 eax, ebx

; 379  : 	}
; 380  : }

  004fa	5f		 pop	 edi
  004fb	5e		 pop	 esi
  004fc	5b		 pop	 ebx
  004fd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00500	33 cd		 xor	 ecx, ebp
  00502	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00507	8b e5		 mov	 esp, ebp
  00509	5d		 pop	 ebp
  0050a	c3		 ret	 0
$LN215@r_object:

; 291  : 				Py_DECREF(v);

  0050b	ff 0b		 dec	 DWORD PTR [ebx]
  0050d	75 0c		 jne	 SHORT $LN129@r_object
  0050f	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00512	53		 push	 ebx
  00513	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00516	ff d0		 call	 eax
  00518	83 c4 04	 add	 esp, 4
$LN129@r_object:

; 292  : 				v = NULL;

  0051b	33 db		 xor	 ebx, ebx
$LN132@r_object:

; 296  : 		}
; 297  : 		return v;

  0051d	8b c3		 mov	 eax, ebx

; 379  : 	}
; 380  : }

  0051f	5f		 pop	 edi
  00520	5e		 pop	 esi
  00521	5b		 pop	 ebx
  00522	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00525	33 cd		 xor	 ecx, ebp
  00527	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0052c	8b e5		 mov	 esp, ebp
  0052e	5d		 pop	 ebp
  0052f	c3		 ret	 0
$LN125@r_object:

; 298  : 
; 299  : 	case TYPE_DICT:
; 300  : 		v = PyDict_New();

  00530	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyDict_New
  00536	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _v$5$[ebp], eax

; 301  : 		if (v == NULL)

  0053c	85 c0		 test	 eax, eax
  0053e	0f 84 30 03 00
	00		 je	 $LN178@r_object

; 302  : 			return NULL;
; 303  : 		for (;;) {
; 304  : 			PyObject *key, *val;
; 305  : 			key = r_object(p);

  00544	56		 push	 esi
  00545	e8 00 00 00 00	 call	 ?r_object@@YAPAU_object@@PAUWFILE@@@Z ; r_object
  0054a	8b d8		 mov	 ebx, eax
  0054c	83 c4 04	 add	 esp, 4

; 306  : 			if (key == NULL)

  0054f	85 db		 test	 ebx, ebx
  00551	74 53		 je	 SHORT $LN216@r_object
$LL123@r_object:

; 307  : 				break; /* XXX Assume TYPE_NULL, not an error */
; 308  : 			val = r_object(p);

  00553	56		 push	 esi
  00554	e8 00 00 00 00	 call	 ?r_object@@YAPAU_object@@PAUWFILE@@@Z ; r_object
  00559	8b f8		 mov	 edi, eax
  0055b	83 c4 04	 add	 esp, 4

; 309  : 			if (val != NULL)

  0055e	85 ff		 test	 edi, edi
  00560	74 11		 je	 SHORT $LN119@r_object

; 310  : 				PyDict_SetItem(v, key, val);

  00562	57		 push	 edi
  00563	53		 push	 ebx
  00564	ff b5 f8 fe ff
	ff		 push	 DWORD PTR _v$5$[ebp]
  0056a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyDict_SetItem
  00570	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN119@r_object:

; 311  : 			Py_DECREF(key);

  00573	ff 0b		 dec	 DWORD PTR [ebx]
  00575	75 0c		 jne	 SHORT $LN118@r_object
  00577	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0057a	53		 push	 ebx
  0057b	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  0057e	ff d0		 call	 eax
  00580	83 c4 04	 add	 esp, 4
$LN118@r_object:

; 312  : 			Py_XDECREF(val);

  00583	85 ff		 test	 edi, edi
  00585	74 10		 je	 SHORT $LN107@r_object
  00587	ff 0f		 dec	 DWORD PTR [edi]
  00589	75 0c		 jne	 SHORT $LN107@r_object
  0058b	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0058e	57		 push	 edi
  0058f	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00592	ff d0		 call	 eax
  00594	83 c4 04	 add	 esp, 4
$LN107@r_object:

; 302  : 			return NULL;
; 303  : 		for (;;) {
; 304  : 			PyObject *key, *val;
; 305  : 			key = r_object(p);

  00597	56		 push	 esi
  00598	e8 00 00 00 00	 call	 ?r_object@@YAPAU_object@@PAUWFILE@@@Z ; r_object
  0059d	8b d8		 mov	 ebx, eax
  0059f	83 c4 04	 add	 esp, 4

; 306  : 			if (key == NULL)

  005a2	85 db		 test	 ebx, ebx
  005a4	75 ad		 jne	 SHORT $LL123@r_object
$LN216@r_object:

; 313  : 		}
; 314  : 		return v;

  005a6	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _v$5$[ebp]

; 379  : 	}
; 380  : }

  005ac	5f		 pop	 edi
  005ad	5e		 pop	 esi
  005ae	5b		 pop	 ebx
  005af	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  005b2	33 cd		 xor	 ecx, ebp
  005b4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  005b9	8b e5		 mov	 esp, ebp
  005bb	5d		 pop	 ebp
  005bc	c3		 ret	 0
$LN104@r_object:

; 315  : 
; 316  : 	case TYPE_CODE:
; 317  : 		if (PyEval_GetRestricted()) {

  005bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyEval_GetRestricted
  005c3	85 c0		 test	 eax, eax
  005c5	74 0f		 je	 SHORT $LN103@r_object

; 318  : 			PyErr_SetString(PyExc_RuntimeError,
; 319  : 				"cannot unmarshal code objects in "
; 320  : 				"restricted execution mode");

  005c7	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__PyExc_RuntimeError
  005cc	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@GCEHJGML@cannot?5unmarshal?5code?5objects?5in@

; 321  : 			return NULL;

  005d1	e9 93 02 00 00	 jmp	 $LN239@r_object
$LN103@r_object:

; 322  : 		}
; 323  : 		else {
; 324  : 			int argcount = r_short(p);

  005d6	56		 push	 esi
  005d7	e8 00 00 00 00	 call	 ?r_short@@YAHPAUWFILE@@@Z ; r_short

; 325  : 			int nlocals = r_short(p);

  005dc	56		 push	 esi
  005dd	89 85 cc fe ff
	ff		 mov	 DWORD PTR _argcount$1$[ebp], eax
  005e3	e8 00 00 00 00	 call	 ?r_short@@YAHPAUWFILE@@@Z ; r_short

; 326  : 			int stacksize = r_short(p);

  005e8	56		 push	 esi
  005e9	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _nlocals$1$[ebp], eax
  005ef	e8 00 00 00 00	 call	 ?r_short@@YAHPAUWFILE@@@Z ; r_short

; 327  : 			int flags = r_short(p);

  005f4	56		 push	 esi
  005f5	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _stacksize$1$[ebp], eax
  005fb	e8 00 00 00 00	 call	 ?r_short@@YAHPAUWFILE@@@Z ; r_short
  00600	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _flags$1$[ebp], eax

; 328  : 			PyObject *code = NULL;
; 329  : 			PyObject *consts = NULL;
; 330  : 			PyObject *names = NULL;
; 331  : 			PyObject *varnames = NULL;
; 332  : 			PyObject *freevars = NULL;
; 333  : 			PyObject *cellvars = NULL;
; 334  : 			PyObject *filename = NULL;

  00606	33 db		 xor	 ebx, ebx
  00608	33 c0		 xor	 eax, eax
  0060a	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _consts$1$[ebp], 0

; 335  : 			PyObject *name = NULL;
; 336  : 			int firstlineno = 0;
; 337  : 			PyObject *lnotab = NULL;
; 338  : 
; 339  : 			code = r_object(p);

  00614	56		 push	 esi
  00615	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _names$1$[ebp], 0
  0061f	33 ff		 xor	 edi, edi
  00621	c7 85 ec fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _varnames$1$[ebp], 0
  0062b	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _freevars$1$[ebp], 0
  00635	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _cellvars$1$[ebp], eax
  0063b	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _firstlineno$1$[ebp], eax
  00641	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _lnotab$1$[ebp], eax
  00647	e8 00 00 00 00	 call	 ?r_object@@YAPAU_object@@PAUWFILE@@@Z ; r_object
  0064c	83 c4 14	 add	 esp, 20			; 00000014H
  0064f	89 85 dc fe ff
	ff		 mov	 DWORD PTR _code$1$[ebp], eax

; 340  : 			if (code) consts = r_object(p);

  00655	85 c0		 test	 eax, eax
  00657	0f 84 a0 00 00
	00		 je	 $LN237@r_object
  0065d	56		 push	 esi
  0065e	e8 00 00 00 00	 call	 ?r_object@@YAPAU_object@@PAUWFILE@@@Z ; r_object
  00663	83 c4 04	 add	 esp, 4
  00666	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _consts$1$[ebp], eax

; 341  : 			if (consts) names = r_object(p);

  0066c	85 c0		 test	 eax, eax
  0066e	0f 84 89 00 00
	00		 je	 $LN237@r_object
  00674	56		 push	 esi
  00675	e8 00 00 00 00	 call	 ?r_object@@YAPAU_object@@PAUWFILE@@@Z ; r_object
  0067a	83 c4 04	 add	 esp, 4
  0067d	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _names$1$[ebp], eax

; 342  : 			if (names) varnames = r_object(p);

  00683	85 c0		 test	 eax, eax
  00685	74 76		 je	 SHORT $LN237@r_object
  00687	56		 push	 esi
  00688	e8 00 00 00 00	 call	 ?r_object@@YAPAU_object@@PAUWFILE@@@Z ; r_object
  0068d	83 c4 04	 add	 esp, 4
  00690	89 85 ec fe ff
	ff		 mov	 DWORD PTR _varnames$1$[ebp], eax

; 343  : 			if (varnames) freevars = r_object(p);

  00696	85 c0		 test	 eax, eax
  00698	74 63		 je	 SHORT $LN237@r_object
  0069a	56		 push	 esi
  0069b	e8 00 00 00 00	 call	 ?r_object@@YAPAU_object@@PAUWFILE@@@Z ; r_object
  006a0	83 c4 04	 add	 esp, 4
  006a3	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _freevars$1$[ebp], eax

; 344  : 			if (freevars) cellvars = r_object(p);

  006a9	85 c0		 test	 eax, eax
  006ab	74 50		 je	 SHORT $LN237@r_object
  006ad	56		 push	 esi
  006ae	e8 00 00 00 00	 call	 ?r_object@@YAPAU_object@@PAUWFILE@@@Z ; r_object
  006b3	83 c4 04	 add	 esp, 4
  006b6	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _cellvars$1$[ebp], eax

; 345  : 			if (cellvars) filename = r_object(p);

  006bc	85 c0		 test	 eax, eax
  006be	74 3d		 je	 SHORT $LN237@r_object
  006c0	56		 push	 esi
  006c1	e8 00 00 00 00	 call	 ?r_object@@YAPAU_object@@PAUWFILE@@@Z ; r_object
  006c6	8b d8		 mov	 ebx, eax
  006c8	83 c4 04	 add	 esp, 4

; 346  : 			if (filename) name = r_object(p);

  006cb	85 db		 test	 ebx, ebx
  006cd	74 2e		 je	 SHORT $LN237@r_object
  006cf	56		 push	 esi
  006d0	e8 00 00 00 00	 call	 ?r_object@@YAPAU_object@@PAUWFILE@@@Z ; r_object
  006d5	8b f8		 mov	 edi, eax
  006d7	83 c4 04	 add	 esp, 4

; 347  : 			if (name) {

  006da	85 ff		 test	 edi, edi
  006dc	74 1f		 je	 SHORT $LN237@r_object

; 348  : 				firstlineno = r_short(p);

  006de	56		 push	 esi
  006df	e8 00 00 00 00	 call	 ?r_short@@YAHPAUWFILE@@@Z ; r_short

; 349  : 				lnotab = r_object(p);

  006e4	56		 push	 esi
  006e5	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _firstlineno$1$[ebp], eax
  006eb	e8 00 00 00 00	 call	 ?r_object@@YAPAU_object@@PAUWFILE@@@Z ; r_object
  006f0	8b f0		 mov	 esi, eax
  006f2	83 c4 08	 add	 esp, 8
  006f5	89 b5 f4 fe ff
	ff		 mov	 DWORD PTR _lnotab$1$[ebp], esi
  006fb	eb 02		 jmp	 SHORT $LN94@r_object
$LN237@r_object:
  006fd	33 f6		 xor	 esi, esi
$LN94@r_object:

; 350  : 			}
; 351  : 
; 352  : 			if (!PyErr_Occurred()) {

  006ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyErr_Occurred
  00705	85 c0		 test	 eax, eax
  00707	75 57		 jne	 SHORT $LN93@r_object

; 353  : 				v = (PyObject *) PyCode_New(
; 354  : 					argcount, nlocals, stacksize, flags,
; 355  : 					code, consts, names, varnames,
; 356  : 					freevars, cellvars, filename, name,
; 357  : 					firstlineno, lnotab);

  00709	56		 push	 esi
  0070a	ff b5 f0 fe ff
	ff		 push	 DWORD PTR _firstlineno$1$[ebp]
  00710	8b b5 e8 fe ff
	ff		 mov	 esi, DWORD PTR _cellvars$1$[ebp]
  00716	57		 push	 edi
  00717	53		 push	 ebx
  00718	56		 push	 esi
  00719	ff b5 f8 fe ff
	ff		 push	 DWORD PTR _freevars$1$[ebp]
  0071f	ff b5 ec fe ff
	ff		 push	 DWORD PTR _varnames$1$[ebp]
  00725	ff b5 e0 fe ff
	ff		 push	 DWORD PTR _names$1$[ebp]
  0072b	ff b5 e4 fe ff
	ff		 push	 DWORD PTR _consts$1$[ebp]
  00731	ff b5 dc fe ff
	ff		 push	 DWORD PTR _code$1$[ebp]
  00737	ff b5 d4 fe ff
	ff		 push	 DWORD PTR _flags$1$[ebp]
  0073d	ff b5 d0 fe ff
	ff		 push	 DWORD PTR _stacksize$1$[ebp]
  00743	ff b5 d8 fe ff
	ff		 push	 DWORD PTR _nlocals$1$[ebp]
  00749	ff b5 cc fe ff
	ff		 push	 DWORD PTR _argcount$1$[ebp]
  0074f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyCode_New
  00755	83 c4 38	 add	 esp, 56			; 00000038H
  00758	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _v$6$[ebp], eax

; 358  : 			}
; 359  : 			else

  0075e	eb 10		 jmp	 SHORT $LN91@r_object
$LN93@r_object:
  00760	8b b5 e8 fe ff
	ff		 mov	 esi, DWORD PTR _cellvars$1$[ebp]

; 360  : 				v = NULL;

  00766	c7 85 f0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _v$6$[ebp], 0
$LN91@r_object:

; 361  : 			Py_XDECREF(code);

  00770	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _code$1$[ebp]
  00776	85 c9		 test	 ecx, ecx
  00778	74 10		 je	 SHORT $LN84@r_object
  0077a	ff 09		 dec	 DWORD PTR [ecx]
  0077c	75 0c		 jne	 SHORT $LN84@r_object
  0077e	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00781	51		 push	 ecx
  00782	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00785	ff d0		 call	 eax
  00787	83 c4 04	 add	 esp, 4
$LN84@r_object:

; 362  : 			Py_XDECREF(consts);

  0078a	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR _consts$1$[ebp]
  00790	85 c9		 test	 ecx, ecx
  00792	74 10		 je	 SHORT $LN74@r_object
  00794	ff 09		 dec	 DWORD PTR [ecx]
  00796	75 0c		 jne	 SHORT $LN74@r_object
  00798	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0079b	51		 push	 ecx
  0079c	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  0079f	ff d0		 call	 eax
  007a1	83 c4 04	 add	 esp, 4
$LN74@r_object:

; 363  : 			Py_XDECREF(names);

  007a4	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _names$1$[ebp]
  007aa	85 c9		 test	 ecx, ecx
  007ac	74 10		 je	 SHORT $LN64@r_object
  007ae	ff 09		 dec	 DWORD PTR [ecx]
  007b0	75 0c		 jne	 SHORT $LN64@r_object
  007b2	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  007b5	51		 push	 ecx
  007b6	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  007b9	ff d0		 call	 eax
  007bb	83 c4 04	 add	 esp, 4
$LN64@r_object:

; 364  : 			Py_XDECREF(varnames);

  007be	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _varnames$1$[ebp]
  007c4	85 c9		 test	 ecx, ecx
  007c6	74 10		 je	 SHORT $LN54@r_object
  007c8	ff 09		 dec	 DWORD PTR [ecx]
  007ca	75 0c		 jne	 SHORT $LN54@r_object
  007cc	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  007cf	51		 push	 ecx
  007d0	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  007d3	ff d0		 call	 eax
  007d5	83 c4 04	 add	 esp, 4
$LN54@r_object:

; 365  : 			Py_XDECREF(freevars);

  007d8	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _freevars$1$[ebp]
  007de	85 c9		 test	 ecx, ecx
  007e0	74 10		 je	 SHORT $LN44@r_object
  007e2	ff 09		 dec	 DWORD PTR [ecx]
  007e4	75 0c		 jne	 SHORT $LN44@r_object
  007e6	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  007e9	51		 push	 ecx
  007ea	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  007ed	ff d0		 call	 eax
  007ef	83 c4 04	 add	 esp, 4
$LN44@r_object:

; 366  : 			Py_XDECREF(cellvars);

  007f2	85 f6		 test	 esi, esi
  007f4	74 10		 je	 SHORT $LN34@r_object
  007f6	ff 0e		 dec	 DWORD PTR [esi]
  007f8	75 0c		 jne	 SHORT $LN34@r_object
  007fa	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  007fd	56		 push	 esi
  007fe	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00801	ff d0		 call	 eax
  00803	83 c4 04	 add	 esp, 4
$LN34@r_object:

; 367  : 			Py_XDECREF(filename);

  00806	85 db		 test	 ebx, ebx
  00808	74 10		 je	 SHORT $LN24@r_object
  0080a	ff 0b		 dec	 DWORD PTR [ebx]
  0080c	75 0c		 jne	 SHORT $LN24@r_object
  0080e	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00811	53		 push	 ebx
  00812	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00815	ff d0		 call	 eax
  00817	83 c4 04	 add	 esp, 4
$LN24@r_object:

; 368  : 			Py_XDECREF(name);

  0081a	85 ff		 test	 edi, edi
  0081c	74 10		 je	 SHORT $LN14@r_object
  0081e	ff 0f		 dec	 DWORD PTR [edi]
  00820	75 0c		 jne	 SHORT $LN14@r_object
  00822	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00825	57		 push	 edi
  00826	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00829	ff d0		 call	 eax
  0082b	83 c4 04	 add	 esp, 4
$LN14@r_object:

; 369  : 			Py_XDECREF(lnotab);

  0082e	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _lnotab$1$[ebp]
  00834	85 c9		 test	 ecx, ecx
  00836	74 10		 je	 SHORT $LN4@r_object
  00838	ff 09		 dec	 DWORD PTR [ecx]
  0083a	75 0c		 jne	 SHORT $LN4@r_object
  0083c	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0083f	51		 push	 ecx
  00840	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00843	ff d0		 call	 eax
  00845	83 c4 04	 add	 esp, 4
$LN4@r_object:

; 370  : 
; 371  : 		}
; 372  : 		return v;

  00848	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _v$6$[ebp]

; 379  : 	}
; 380  : }

  0084e	5f		 pop	 edi
  0084f	5e		 pop	 esi
  00850	5b		 pop	 ebx
  00851	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00854	33 cd		 xor	 ecx, ebp
  00856	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0085b	8b e5		 mov	 esp, ebp
  0085d	5d		 pop	 ebp
  0085e	c3		 ret	 0
$LN1@r_object:

; 373  : 
; 374  : 	default:
; 375  : 		/* Bogus data got written, which isn't ideal.
; 376  : 		   This will let you keep working and recover. */
; 377  : 		PyErr_SetString(PyExc_ValueError, "bad marshal data");

  0085f	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__PyExc_ValueError
  00864	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@DCKILJJE@bad?5marshal?5data?$AA@
$LN239@r_object:
  00869	ff 30		 push	 DWORD PTR [eax]
  0086b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyErr_SetString
  00871	83 c4 08	 add	 esp, 8
$LN178@r_object:

; 378  : 		return NULL;

  00874	33 c0		 xor	 eax, eax
$LN180@r_object:

; 379  : 	}
; 380  : }

  00876	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00879	5f		 pop	 edi
  0087a	5e		 pop	 esi
  0087b	33 cd		 xor	 ecx, ebp
  0087d	5b		 pop	 ebx
  0087e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00883	8b e5		 mov	 esp, ebp
  00885	5d		 pop	 ebp
  00886	c3		 ret	 0
$LN241@r_object:

; 177  : 				PyErr_SetString(PyExc_EOFError,
; 178  : 					"EOF read where object expected");
; 179  : 				return NULL;
; 180  : 			}
; 181  : 			buf[n] = '\0';

  00887	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN243@r_object:
$LN238@r_object:
$LN242@r_object:

; 379  : 	}
; 380  : }

  0088c	00 00 00 00	 DD	 $LN179@r_object
  00890	00 00 00 00	 DD	 $LN149@r_object
  00894	00 00 00 00	 DD	 $LN175@r_object
  00898	00 00 00 00	 DD	 $LN178@r_object
  0089c	00 00 00 00	 DD	 $LN173@r_object
  008a0	00 00 00 00	 DD	 $LN177@r_object
  008a4	00 00 00 00	 DD	 $LN176@r_object
  008a8	00 00 00 00	 DD	 $LN137@r_object
  008ac	00 00 00 00	 DD	 $LN104@r_object
  008b0	00 00 00 00	 DD	 $LN167@r_object
  008b4	00 00 00 00	 DD	 $LN174@r_object
  008b8	00 00 00 00	 DD	 $LN172@r_object
  008bc	00 00 00 00	 DD	 $LN162@r_object
  008c0	00 00 00 00	 DD	 $LN153@r_object
  008c4	00 00 00 00	 DD	 $LN165@r_object
  008c8	00 00 00 00	 DD	 $LN125@r_object
  008cc	00 00 00 00	 DD	 $LN1@r_object
$LN229@r_object:
  008d0	00		 DB	 0
  008d1	10		 DB	 16			; 00000010H
  008d2	10		 DB	 16			; 00000010H
  008d3	10		 DB	 16			; 00000010H
  008d4	10		 DB	 16			; 00000010H
  008d5	10		 DB	 16			; 00000010H
  008d6	10		 DB	 16			; 00000010H
  008d7	10		 DB	 16			; 00000010H
  008d8	10		 DB	 16			; 00000010H
  008d9	10		 DB	 16			; 00000010H
  008da	10		 DB	 16			; 00000010H
  008db	10		 DB	 16			; 00000010H
  008dc	10		 DB	 16			; 00000010H
  008dd	10		 DB	 16			; 00000010H
  008de	10		 DB	 16			; 00000010H
  008df	10		 DB	 16			; 00000010H
  008e0	10		 DB	 16			; 00000010H
  008e1	10		 DB	 16			; 00000010H
  008e2	10		 DB	 16			; 00000010H
  008e3	10		 DB	 16			; 00000010H
  008e4	10		 DB	 16			; 00000010H
  008e5	10		 DB	 16			; 00000010H
  008e6	10		 DB	 16			; 00000010H
  008e7	10		 DB	 16			; 00000010H
  008e8	10		 DB	 16			; 00000010H
  008e9	10		 DB	 16			; 00000010H
  008ea	10		 DB	 16			; 00000010H
  008eb	10		 DB	 16			; 00000010H
  008ec	10		 DB	 16			; 00000010H
  008ed	10		 DB	 16			; 00000010H
  008ee	10		 DB	 16			; 00000010H
  008ef	10		 DB	 16			; 00000010H
  008f0	10		 DB	 16			; 00000010H
  008f1	10		 DB	 16			; 00000010H
  008f2	10		 DB	 16			; 00000010H
  008f3	10		 DB	 16			; 00000010H
  008f4	10		 DB	 16			; 00000010H
  008f5	10		 DB	 16			; 00000010H
  008f6	10		 DB	 16			; 00000010H
  008f7	10		 DB	 16			; 00000010H
  008f8	10		 DB	 16			; 00000010H
  008f9	01		 DB	 1
  008fa	10		 DB	 16			; 00000010H
  008fb	10		 DB	 16			; 00000010H
  008fc	10		 DB	 16			; 00000010H
  008fd	10		 DB	 16			; 00000010H
  008fe	10		 DB	 16			; 00000010H
  008ff	02		 DB	 2
  00900	10		 DB	 16			; 00000010H
  00901	03		 DB	 3
  00902	10		 DB	 16			; 00000010H
  00903	10		 DB	 16			; 00000010H
  00904	10		 DB	 16			; 00000010H
  00905	10		 DB	 16			; 00000010H
  00906	10		 DB	 16			; 00000010H
  00907	10		 DB	 16			; 00000010H
  00908	10		 DB	 16			; 00000010H
  00909	10		 DB	 16			; 00000010H
  0090a	10		 DB	 16			; 00000010H
  0090b	10		 DB	 16			; 00000010H
  0090c	10		 DB	 16			; 00000010H
  0090d	10		 DB	 16			; 00000010H
  0090e	10		 DB	 16			; 00000010H
  0090f	10		 DB	 16			; 00000010H
  00910	10		 DB	 16			; 00000010H
  00911	10		 DB	 16			; 00000010H
  00912	10		 DB	 16			; 00000010H
  00913	10		 DB	 16			; 00000010H
  00914	10		 DB	 16			; 00000010H
  00915	10		 DB	 16			; 00000010H
  00916	10		 DB	 16			; 00000010H
  00917	10		 DB	 16			; 00000010H
  00918	10		 DB	 16			; 00000010H
  00919	10		 DB	 16			; 00000010H
  0091a	04		 DB	 4
  0091b	10		 DB	 16			; 00000010H
  0091c	10		 DB	 16			; 00000010H
  0091d	10		 DB	 16			; 00000010H
  0091e	10		 DB	 16			; 00000010H
  0091f	05		 DB	 5
  00920	10		 DB	 16			; 00000010H
  00921	10		 DB	 16			; 00000010H
  00922	10		 DB	 16			; 00000010H
  00923	10		 DB	 16			; 00000010H
  00924	06		 DB	 6
  00925	10		 DB	 16			; 00000010H
  00926	10		 DB	 16			; 00000010H
  00927	10		 DB	 16			; 00000010H
  00928	10		 DB	 16			; 00000010H
  00929	10		 DB	 16			; 00000010H
  0092a	10		 DB	 16			; 00000010H
  0092b	10		 DB	 16			; 00000010H
  0092c	07		 DB	 7
  0092d	10		 DB	 16			; 00000010H
  0092e	10		 DB	 16			; 00000010H
  0092f	10		 DB	 16			; 00000010H
  00930	10		 DB	 16			; 00000010H
  00931	10		 DB	 16			; 00000010H
  00932	10		 DB	 16			; 00000010H
  00933	10		 DB	 16			; 00000010H
  00934	08		 DB	 8
  00935	10		 DB	 16			; 00000010H
  00936	10		 DB	 16			; 00000010H
  00937	09		 DB	 9
  00938	10		 DB	 16			; 00000010H
  00939	10		 DB	 16			; 00000010H
  0093a	0a		 DB	 10			; 0000000aH
  0093b	10		 DB	 16			; 00000010H
  0093c	10		 DB	 16			; 00000010H
  0093d	0b		 DB	 11			; 0000000bH
  0093e	10		 DB	 16			; 00000010H
  0093f	10		 DB	 16			; 00000010H
  00940	10		 DB	 16			; 00000010H
  00941	10		 DB	 16			; 00000010H
  00942	10		 DB	 16			; 00000010H
  00943	10		 DB	 16			; 00000010H
  00944	0c		 DB	 12			; 0000000cH
  00945	10		 DB	 16			; 00000010H
  00946	0d		 DB	 13			; 0000000dH
  00947	10		 DB	 16			; 00000010H
  00948	10		 DB	 16			; 00000010H
  00949	0e		 DB	 14			; 0000000eH
  0094a	10		 DB	 16			; 00000010H
  0094b	10		 DB	 16			; 00000010H
  0094c	0f		 DB	 15			; 0000000fH
?r_object@@YAPAU_object@@PAUWFILE@@@Z ENDP		; r_object
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\scriptlib\pythonmarshal.cpp
;	COMDAT ?r_long64@@YAPAU_object@@PAUWFILE@@@Z
_TEXT	SEGMENT
_buf$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
_p$ = 8							; size = 4
?r_long64@@YAPAU_object@@PAUWFILE@@@Z PROC		; r_long64, COMDAT

; 100  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	8b 7d 08	 mov	 edi, DWORD PTR _p$[ebp]

; 101  : 	long lo4 = r_long(p);

  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ?r_long@@YAJPAUWFILE@@@Z ; r_long

; 102  : 	long hi4 = r_long(p);

  0001b	57		 push	 edi
  0001c	8b f0		 mov	 esi, eax
  0001e	e8 00 00 00 00	 call	 ?r_long@@YAJPAUWFILE@@@Z ; r_long

; 103  : #if SIZEOF_LONG > 4
; 104  : 	long x = (hi4 << 32) | (lo4 & 0xFFFFFFFFL);
; 105  : 	return PyInt_FromLong(x);
; 106  : #else
; 107  : 	unsigned char buf[8];
; 108  : 	int one = 1;
; 109  : 	int is_little_endian = (int)*(char*)&one;
; 110  : 	if (is_little_endian) {
; 111  : 		memcpy(buf, &lo4, 4);
; 112  : 		memcpy(buf+4, &hi4, 4);
; 113  : 	}
; 114  : 	else {
; 115  : 		memcpy(buf, &hi4, 4);
; 116  : 		memcpy(buf+4, &lo4, 4);
; 117  : 	}
; 118  : 	return _PyLong_FromByteArray(buf, 8, is_little_endian, 1);

  00023	6a 01		 push	 1
  00025	6a 01		 push	 1
  00027	89 45 f8	 mov	 DWORD PTR _buf$[ebp+4], eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR _buf$[ebp]
  0002d	6a 08		 push	 8
  0002f	50		 push	 eax
  00030	89 75 f4	 mov	 DWORD PTR _buf$[ebp], esi
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___PyLong_FromByteArray

; 119  : #endif
; 120  : }

  00039	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003c	83 c4 18	 add	 esp, 24			; 00000018H
  0003f	33 cd		 xor	 ecx, ebp
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
?r_long64@@YAPAU_object@@PAUWFILE@@@Z ENDP		; r_long64
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\scriptlib\pythonmarshal.cpp
;	COMDAT ?r_long@@YAJPAUWFILE@@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?r_long@@YAJPAUWFILE@@@Z PROC				; r_long, COMDAT

; 70   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 71   : 	register long x;
; 72   : 	register FILE *fp = p->fp;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 39		 mov	 edi, DWORD PTR [ecx]

; 73   : 	if (fp) {

  0000a	85 ff		 test	 edi, edi
  0000c	74 30		 je	 SHORT $LN2@r_long

; 74   : 		x = getc(fp);

  0000e	57		 push	 edi
  0000f	e8 00 00 00 00	 call	 _getc

; 75   : 		x |= (long)getc(fp) << 8;

  00014	57		 push	 edi
  00015	8b f0		 mov	 esi, eax
  00017	e8 00 00 00 00	 call	 _getc
  0001c	c1 e0 08	 shl	 eax, 8

; 76   : 		x |= (long)getc(fp) << 16;

  0001f	57		 push	 edi
  00020	0b f0		 or	 esi, eax
  00022	e8 00 00 00 00	 call	 _getc
  00027	c1 e0 10	 shl	 eax, 16			; 00000010H

; 77   : 		x |= (long)getc(fp) << 24;

  0002a	57		 push	 edi
  0002b	0b f0		 or	 esi, eax
  0002d	e8 00 00 00 00	 call	 _getc
  00032	83 c4 10	 add	 esp, 16			; 00000010H
  00035	c1 e0 18	 shl	 eax, 24			; 00000018H
  00038	0b c6		 or	 eax, esi
  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi

; 90   : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
$LN2@r_long:

; 78   : 	}
; 79   : 	else {
; 80   : 		x = rs_byte(p);

  0003e	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00041	8b 71 14	 mov	 esi, DWORD PTR [ecx+20]
  00044	3b c6		 cmp	 eax, esi
  00046	74 09		 je	 SHORT $LN5@r_long
  00048	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  0004b	40		 inc	 eax
  0004c	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0004f	eb 03		 jmp	 SHORT $LN6@r_long
$LN5@r_long:
  00051	83 ca ff	 or	 edx, -1
$LN6@r_long:

; 81   : 		x |= (long)rs_byte(p) << 8;

  00054	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00057	3b c6		 cmp	 eax, esi
  00059	74 09		 je	 SHORT $LN7@r_long
  0005b	0f b6 38	 movzx	 edi, BYTE PTR [eax]
  0005e	40		 inc	 eax
  0005f	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00062	eb 03		 jmp	 SHORT $LN8@r_long
$LN7@r_long:
  00064	83 cf ff	 or	 edi, -1
$LN8@r_long:

; 82   : 		x |= (long)rs_byte(p) << 16;

  00067	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0006a	c1 e7 08	 shl	 edi, 8
  0006d	0b d7		 or	 edx, edi
  0006f	3b c6		 cmp	 eax, esi
  00071	74 09		 je	 SHORT $LN9@r_long
  00073	0f b6 38	 movzx	 edi, BYTE PTR [eax]
  00076	40		 inc	 eax
  00077	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0007a	eb 03		 jmp	 SHORT $LN10@r_long
$LN9@r_long:
  0007c	83 cf ff	 or	 edi, -1
$LN10@r_long:

; 83   : 		x |= (long)rs_byte(p) << 24;

  0007f	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00082	c1 e7 10	 shl	 edi, 16			; 00000010H
  00085	0b d7		 or	 edx, edi
  00087	3b c6		 cmp	 eax, esi
  00089	74 12		 je	 SHORT $LN11@r_long
  0008b	0f b6 30	 movzx	 esi, BYTE PTR [eax]
  0008e	40		 inc	 eax
  0008f	c1 e6 18	 shl	 esi, 24			; 00000018H
  00092	0b d6		 or	 edx, esi
  00094	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00097	5f		 pop	 edi

; 84   : 	}
; 85   : #if SIZEOF_LONG > 4
; 86   : 	/* Sign extension for 64-bit machines */
; 87   : 	x |= -(x & 0x80000000L);
; 88   : #endif
; 89   : 	return x;

  00098	8b c2		 mov	 eax, edx
  0009a	5e		 pop	 esi

; 90   : }

  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
$LN11@r_long:

; 83   : 		x |= (long)rs_byte(p) << 24;

  0009d	83 ce ff	 or	 esi, -1
  000a0	c1 e6 18	 shl	 esi, 24			; 00000018H
  000a3	0b d6		 or	 edx, esi
  000a5	5f		 pop	 edi

; 84   : 	}
; 85   : #if SIZEOF_LONG > 4
; 86   : 	/* Sign extension for 64-bit machines */
; 87   : 	x |= -(x & 0x80000000L);
; 88   : #endif
; 89   : 	return x;

  000a6	8b c2		 mov	 eax, edx
  000a8	5e		 pop	 esi

; 90   : }

  000a9	5d		 pop	 ebp
  000aa	c3		 ret	 0
?r_long@@YAJPAUWFILE@@@Z ENDP				; r_long
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\scriptlib\pythonmarshal.cpp
;	COMDAT ?r_short@@YAHPAUWFILE@@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?r_short@@YAHPAUWFILE@@@Z PROC				; r_short, COMDAT

; 60   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 61   : 	register short x;
; 62   : 	x = (short) r_byte(p);

  00004	8b 75 08	 mov	 esi, DWORD PTR _p$[ebp]
  00007	57		 push	 edi
  00008	8b 06		 mov	 eax, DWORD PTR [esi]
  0000a	85 c0		 test	 eax, eax
  0000c	74 0e		 je	 SHORT $LN5@r_short
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 _getc
  00014	83 c4 04	 add	 esp, 4
  00017	0f b7 f8	 movzx	 edi, ax
  0001a	eb 16		 jmp	 SHORT $LN4@r_short
$LN5@r_short:
  0001c	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0001f	3b 4e 14	 cmp	 ecx, DWORD PTR [esi+20]
  00022	74 0b		 je	 SHORT $LN3@r_short
  00024	0f b6 39	 movzx	 edi, BYTE PTR [ecx]
  00027	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0002a	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0002d	eb 03		 jmp	 SHORT $LN4@r_short
$LN3@r_short:
  0002f	83 cf ff	 or	 edi, -1
$LN4@r_short:

; 63   : 	x |= (short) r_byte(p) << 8;

  00032	8b 06		 mov	 eax, DWORD PTR [esi]
  00034	85 c0		 test	 eax, eax
  00036	74 0d		 je	 SHORT $LN9@r_short
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 _getc
  0003e	83 c4 04	 add	 esp, 4
  00041	8b c8		 mov	 ecx, eax
  00043	eb 14		 jmp	 SHORT $LN8@r_short
$LN9@r_short:
  00045	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00048	3b 46 14	 cmp	 eax, DWORD PTR [esi+20]
  0004b	74 09		 je	 SHORT $LN7@r_short
  0004d	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00050	40		 inc	 eax
  00051	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00054	eb 03		 jmp	 SHORT $LN8@r_short
$LN7@r_short:
  00056	83 c9 ff	 or	 ecx, -1
$LN8@r_short:
  00059	c1 e1 08	 shl	 ecx, 8
  0005c	0b f9		 or	 edi, ecx

; 64   : 	/* Sign-extension, in case short greater than 16 bits */
; 65   : 	x |= -(x & 0x8000);

  0005e	8b c7		 mov	 eax, edi

; 66   : 	return x;

  00060	0f bf cf	 movsx	 ecx, di
  00063	25 00 80 ff ff	 and	 eax, -32768		; ffff8000H
  00068	f7 d8		 neg	 eax
  0006a	98		 cwde
  0006b	5f		 pop	 edi
  0006c	0b c1		 or	 eax, ecx
  0006e	5e		 pop	 esi

; 67   : }

  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
?r_short@@YAHPAUWFILE@@@Z ENDP				; r_short
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\scriptlib\pythonmarshal.cpp
;	COMDAT ?r_string@@YAHPADHPAUWFILE@@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_n$ = 12						; size = 4
_p$ = 16						; size = 4
?r_string@@YAHPADHPAUWFILE@@@Z PROC			; r_string, COMDAT

; 49   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 50   : 	if (p->fp != NULL)

  00004	8b 7d 10	 mov	 edi, DWORD PTR _p$[ebp]
  00007	8b 07		 mov	 eax, DWORD PTR [edi]
  00009	85 c0		 test	 eax, eax
  0000b	74 14		 je	 SHORT $LN2@r_string

; 51   : 		return fread(s, 1, n, p->fp);

  0000d	50		 push	 eax
  0000e	ff 75 0c	 push	 DWORD PTR _n$[ebp]
  00011	6a 01		 push	 1
  00013	ff 75 08	 push	 DWORD PTR _s$[ebp]
  00016	e8 00 00 00 00	 call	 _fread
  0001b	83 c4 10	 add	 esp, 16			; 00000010H
  0001e	5f		 pop	 edi

; 57   : }

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
$LN2@r_string:

; 52   : 	if (p->end - p->ptr < n)

  00021	8b 57 10	 mov	 edx, DWORD PTR [edi+16]
  00024	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00027	56		 push	 esi
  00028	8b 75 0c	 mov	 esi, DWORD PTR _n$[ebp]
  0002b	2b ca		 sub	 ecx, edx
  0002d	3b ce		 cmp	 ecx, esi
  0002f	0f 4c f1	 cmovl	 esi, ecx

; 53   : 		n = p->end - p->ptr;
; 54   : 	memcpy(s, p->ptr, n);

  00032	56		 push	 esi
  00033	52		 push	 edx
  00034	ff 75 08	 push	 DWORD PTR _s$[ebp]
  00037	e8 00 00 00 00	 call	 _memcpy
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 55   : 	p->ptr += n;
; 56   : 	return n;

  0003f	8b c6		 mov	 eax, esi
  00041	01 77 10	 add	 DWORD PTR [edi+16], esi
  00044	5e		 pop	 esi
  00045	5f		 pop	 edi

; 57   : }

  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
?r_string@@YAHPADHPAUWFILE@@@Z ENDP			; r_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\scriptlib\pythonmarshal.cpp
;	COMDAT ?_PyMarshal_ReadLongFromFile@@YAJPAU_iobuf@@@Z
_TEXT	SEGMENT
_rf$ = -24						; size = 24
_fp$ = 8						; size = 4
?_PyMarshal_ReadLongFromFile@@YAJPAU_iobuf@@@Z PROC	; _PyMarshal_ReadLongFromFile, COMDAT

; 390  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 391  : 	RFILE rf;
; 392  : 	rf.fp = fp;

  00006	8b 45 08	 mov	 eax, DWORD PTR _fp$[ebp]
  00009	89 45 e8	 mov	 DWORD PTR _rf$[ebp], eax

; 393  : 	return r_long(&rf);

  0000c	8d 45 e8	 lea	 eax, DWORD PTR _rf$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?r_long@@YAJPAUWFILE@@@Z ; r_long
  00015	83 c4 04	 add	 esp, 4

; 394  : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?_PyMarshal_ReadLongFromFile@@YAJPAU_iobuf@@@Z ENDP	; _PyMarshal_ReadLongFromFile
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\scriptlib\pythonmarshal.cpp
;	COMDAT ?_PyMarshal_ReadLastObjectFromFile@@YAPAU_object@@PAU_iobuf@@@Z
_TEXT	SEGMENT
_buf$1 = -16388						; size = 16384
__$ArrayPad$ = -4					; size = 4
_fp$ = 8						; size = 4
?_PyMarshal_ReadLastObjectFromFile@@YAPAU_object@@PAU_iobuf@@@Z PROC ; _PyMarshal_ReadLastObjectFromFile, COMDAT

; 413  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	53		 push	 ebx
  00018	8b 5d 08	 mov	 ebx, DWORD PTR _fp$[ebp]

; 414  : 	/* 75% of 2.1's .pyc files can exploit SMALL_FILE_LIMIT.
; 415  : 	 * REASONABLE_FILE_LIMIT is by defn something big enough for Tkinter.pyc.
; 416  : 	 */
; 417  : #define SMALL_FILE_LIMIT (1L << 14)
; 418  : #define REASONABLE_FILE_LIMIT (1L << 18)
; 419  : 
; 420  : 	off_t filesize;
; 421  : 
; 422  : 	if (PyErr_Occurred())

  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyErr_Occurred
  00021	85 c0		 test	 eax, eax
  00023	74 27		 je	 SHORT $LN7@PyMarshal_

; 423  : 	{
; 424  : 		fprintf(stderr, "XXX rd_object called with exception set\n");

  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@IABJNOI@XXX?5rd_object?5called?5with?5except@
  0002a	e8 00 00 00 00	 call	 ___iob_func
  0002f	83 c0 40	 add	 eax, 64			; 00000040H
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 _fprintf
  00038	83 c4 08	 add	 esp, 8

; 425  : 		return NULL;

  0003b	33 c0		 xor	 eax, eax
  0003d	5b		 pop	 ebx

; 451  : #undef SMALL_FILE_LIMIT
; 452  : #undef REASONABLE_FILE_LIMIT
; 453  : }

  0003e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00041	33 cd		 xor	 ecx, ebp
  00043	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
$LN7@PyMarshal_:
  0004c	56		 push	 esi
  0004d	57		 push	 edi

; 426  : 	}
; 427  : 
; 428  : 	filesize = getfilesize(fp);

  0004e	53		 push	 ebx
  0004f	e8 00 00 00 00	 call	 ?getfilesize@@YAJPAU_iobuf@@@Z ; getfilesize
  00054	8b f0		 mov	 esi, eax
  00056	83 c4 04	 add	 esp, 4

; 429  : 	if (filesize > 0) {

  00059	85 f6		 test	 esi, esi
  0005b	7e 6c		 jle	 SHORT $LN2@PyMarshal_

; 430  : 		char buf[SMALL_FILE_LIMIT];
; 431  : 		char* pBuf = NULL;
; 432  : 		if (filesize <= SMALL_FILE_LIMIT)

  0005d	81 fe 00 40 00
	00		 cmp	 esi, 16384		; 00004000H
  00063	7f 08		 jg	 SHORT $LN5@PyMarshal_

; 433  : 			pBuf = buf;

  00065	8d bd fc bf ff
	ff		 lea	 edi, DWORD PTR _buf$1[ebp]
  0006b	eb 1f		 jmp	 SHORT $LN12@PyMarshal_
$LN5@PyMarshal_:

; 434  : 		else if (filesize <= REASONABLE_FILE_LIMIT)

  0006d	81 fe 00 00 04
	00		 cmp	 esi, 262144		; 00040000H
  00073	7f 54		 jg	 SHORT $LN2@PyMarshal_

; 435  : 			pBuf = (char *)PyMem_MALLOC(filesize);

  00075	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  0007b	77 4c		 ja	 SHORT $LN2@PyMarshal_
  0007d	56		 push	 esi
  0007e	e8 00 00 00 00	 call	 _malloc
  00083	8b f8		 mov	 edi, eax
  00085	83 c4 04	 add	 esp, 4

; 436  : 		if (pBuf != NULL) {

  00088	85 ff		 test	 edi, edi
  0008a	74 3d		 je	 SHORT $LN2@PyMarshal_
$LN12@PyMarshal_:

; 437  : 			PyObject* v;
; 438  : 			size_t n = fread(pBuf, 1, filesize, fp);

  0008c	53		 push	 ebx
  0008d	56		 push	 esi
  0008e	6a 01		 push	 1
  00090	57		 push	 edi
  00091	e8 00 00 00 00	 call	 _fread

; 439  : 			v = PyMarshal_ReadObjectFromString(pBuf, n);

  00096	50		 push	 eax
  00097	57		 push	 edi
  00098	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyMarshal_ReadObjectFromString
  0009e	8b f0		 mov	 esi, eax
  000a0	83 c4 18	 add	 esp, 24			; 00000018H

; 440  : 			if (pBuf != buf)

  000a3	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buf$1[ebp]
  000a9	3b f8		 cmp	 edi, eax
  000ab	74 09		 je	 SHORT $LN1@PyMarshal_

; 441  : 				PyMem_FREE(pBuf);

  000ad	57		 push	 edi
  000ae	e8 00 00 00 00	 call	 _free
  000b3	83 c4 04	 add	 esp, 4
$LN1@PyMarshal_:

; 442  : 			return v;

  000b6	5f		 pop	 edi
  000b7	8b c6		 mov	 eax, esi
  000b9	5e		 pop	 esi
  000ba	5b		 pop	 ebx

; 451  : #undef SMALL_FILE_LIMIT
; 452  : #undef REASONABLE_FILE_LIMIT
; 453  : }

  000bb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000be	33 cd		 xor	 ecx, ebp
  000c0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c3		 ret	 0
$LN2@PyMarshal_:

; 443  : 		}
; 444  : 
; 445  : 	}
; 446  : 
; 447  : 	/* We don't have fstat, or we do but the file is larger than
; 448  : 	 * REASONABLE_FILE_LIMIT or malloc failed -- read a byte at a time.
; 449  : 	 */
; 450  : 	return _PyMarshal_ReadObjectFromFile(fp);

  000c9	53		 push	 ebx
  000ca	e8 00 00 00 00	 call	 ?_PyMarshal_ReadObjectFromFile@@YAPAU_object@@PAU_iobuf@@@Z ; _PyMarshal_ReadObjectFromFile

; 451  : #undef SMALL_FILE_LIMIT
; 452  : #undef REASONABLE_FILE_LIMIT
; 453  : }

  000cf	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d2	83 c4 04	 add	 esp, 4
  000d5	33 cd		 xor	 ecx, ebp
  000d7	5f		 pop	 edi
  000d8	5e		 pop	 esi
  000d9	5b		 pop	 ebx
  000da	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000df	8b e5		 mov	 esp, ebp
  000e1	5d		 pop	 ebp
  000e2	c3		 ret	 0
?_PyMarshal_ReadLastObjectFromFile@@YAPAU_object@@PAU_iobuf@@@Z ENDP ; _PyMarshal_ReadLastObjectFromFile
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\scriptlib\pythonmarshal.cpp
;	COMDAT ?_PyMarshal_ReadObjectFromFile@@YAPAU_object@@PAU_iobuf@@@Z
_TEXT	SEGMENT
_rf$ = -24						; size = 24
_fp$ = 8						; size = 4
?_PyMarshal_ReadObjectFromFile@@YAPAU_object@@PAU_iobuf@@@Z PROC ; _PyMarshal_ReadObjectFromFile, COMDAT

; 456  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 457  : 	RFILE rf;
; 458  : 	if (PyErr_Occurred()) {

  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyErr_Occurred
  0000c	85 c0		 test	 eax, eax
  0000e	74 1c		 je	 SHORT $LN1@PyMarshal_

; 459  : 		fprintf(stderr, "XXX rd_object called with exception set\n");

  00010	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@IABJNOI@XXX?5rd_object?5called?5with?5except@
  00015	e8 00 00 00 00	 call	 ___iob_func
  0001a	83 c0 40	 add	 eax, 64			; 00000040H
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 _fprintf
  00023	83 c4 08	 add	 esp, 8

; 460  : 		return NULL;

  00026	33 c0		 xor	 eax, eax

; 464  : }

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
$LN1@PyMarshal_:

; 461  : 	}
; 462  : 	rf.fp = fp;

  0002c	8b 45 08	 mov	 eax, DWORD PTR _fp$[ebp]
  0002f	89 45 e8	 mov	 DWORD PTR _rf$[ebp], eax

; 463  : 	return r_object(&rf);

  00032	8d 45 e8	 lea	 eax, DWORD PTR _rf$[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?r_object@@YAPAU_object@@PAUWFILE@@@Z ; r_object
  0003b	83 c4 04	 add	 esp, 4

; 464  : }

  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?_PyMarshal_ReadObjectFromFile@@YAPAU_object@@PAU_iobuf@@@Z ENDP ; _PyMarshal_ReadObjectFromFile
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\sys\stat.inl
;	COMDAT _fstat
_TEXT	SEGMENT
__Desc$ = 8						; size = 4
__Stat$ = 12						; size = 4
_fstat	PROC						; COMDAT

; 52   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 55   : }

  00003	5d		 pop	 ebp

; 53   :     _STATIC_ASSERT( sizeof(struct stat) == sizeof(struct _stat64i32) );
; 54   :     return _fstat64i32(_Desc,(struct _stat64i32 *)_Stat);

  00004	e9 00 00 00 00	 jmp	 __fstat64i32
_fstat	ENDP
_TEXT	ENDS
END
