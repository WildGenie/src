; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	A:\From C\Desktop\Serwer\Source\Source Client\client\eterPythonLib\PythonGraphic.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?g_isScreenShotKey@@3_NA			; g_isScreenShotKey
_BSS	SEGMENT
?g_isScreenShotKey@@3_NA DB 01H DUP (?)			; g_isScreenShotKey
_BSS	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0D3DXVECTOR2@@QAE@XZ				; D3DXVECTOR2::D3DXVECTOR2
PUBLIC	??0D3DXVECTOR2@@QAE@MM@Z			; D3DXVECTOR2::D3DXVECTOR2
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	??0D3DXCOLOR@@QAE@MMMM@Z			; D3DXCOLOR::D3DXCOLOR
PUBLIC	??BD3DXCOLOR@@QBEKXZ				; D3DXCOLOR::operator unsigned long
PUBLIC	??BD3DXCOLOR@@QAEAAU_D3DCOLORVALUE@@XZ		; D3DXCOLOR::operator _D3DCOLORVALUE &
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
PUBLIC	??0_Container_proxy@std@@QAE@XZ			; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
PUBLIC	??1_Container_base12@std@@QAE@XZ		; std::_Container_base12::~_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	??0_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::_Iterator_base12
PUBLIC	??0_Iterator_base12@std@@QAE@ABU01@@Z		; std::_Iterator_base12::_Iterator_base12
PUBLIC	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z	; std::_Iterator_base12::operator=
PUBLIC	??1_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::~_Iterator_base12
PUBLIC	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
PUBLIC	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
PUBLIC	??0SPDTVertex@@QAE@XZ				; SPDTVertex::SPDTVertex
PUBLIC	??0?$CSingleton@VCPythonGraphic@@@@QAE@XZ	; CSingleton<CPythonGraphic>::CSingleton<CPythonGraphic>
PUBLIC	??1?$CSingleton@VCPythonGraphic@@@@UAE@XZ	; CSingleton<CPythonGraphic>::~CSingleton<CPythonGraphic>
PUBLIC	?Instance@?$CSingleton@VCPythonGraphic@@@@SAAAVCPythonGraphic@@XZ ; CSingleton<CPythonGraphic>::Instance
PUBLIC	??_G?$CSingleton@VCPythonGraphic@@@@UAEPAXI@Z	; CSingleton<CPythonGraphic>::`scalar deleting destructor'
PUBLIC	??0CPythonGraphic@@QAE@XZ			; CPythonGraphic::CPythonGraphic
PUBLIC	??1CPythonGraphic@@UAE@XZ			; CPythonGraphic::~CPythonGraphic
PUBLIC	?Destroy@CPythonGraphic@@QAEXXZ			; CPythonGraphic::Destroy
PUBLIC	?PushState@CPythonGraphic@@QAEXXZ		; CPythonGraphic::PushState
PUBLIC	?PopState@CPythonGraphic@@QAEXXZ		; CPythonGraphic::PopState
PUBLIC	?GetD3D@CPythonGraphic@@QAEPAUIDirect3D8@@XZ	; CPythonGraphic::GetD3D
PUBLIC	?GetOrthoDepth@CPythonGraphic@@QAEMXZ		; CPythonGraphic::GetOrthoDepth
PUBLIC	?SetInterfaceRenderState@CPythonGraphic@@QAEXXZ	; CPythonGraphic::SetInterfaceRenderState
PUBLIC	?SetGameRenderState@CPythonGraphic@@QAEXXZ	; CPythonGraphic::SetGameRenderState
PUBLIC	?SetCursorPosition@CPythonGraphic@@QAEXHH@Z	; CPythonGraphic::SetCursorPosition
PUBLIC	?SetOmniLight@CPythonGraphic@@QAEXXZ		; CPythonGraphic::SetOmniLight
PUBLIC	?SetViewport@CPythonGraphic@@QAEXMMMM@Z		; CPythonGraphic::SetViewport
PUBLIC	?RestoreViewport@CPythonGraphic@@QAEXXZ		; CPythonGraphic::RestoreViewport
PUBLIC	?GenerateColor@CPythonGraphic@@QAEJMMMM@Z	; CPythonGraphic::GenerateColor
PUBLIC	?RenderDownButton@CPythonGraphic@@QAEXMMMM@Z	; CPythonGraphic::RenderDownButton
PUBLIC	?RenderUpButton@CPythonGraphic@@QAEXMMMM@Z	; CPythonGraphic::RenderUpButton
PUBLIC	?RenderImage@CPythonGraphic@@QAEXPAVCGraphicImageInstance@@MM@Z ; CPythonGraphic::RenderImage
PUBLIC	?RenderAlphaImage@CPythonGraphic@@QAEXPAVCGraphicImageInstance@@MMMM@Z ; CPythonGraphic::RenderAlphaImage
PUBLIC	?RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z	; CPythonGraphic::RenderCoolTimeBox
PUBLIC	?SaveJPEG@CPythonGraphic@@QAE_NPBDPAEII@Z	; CPythonGraphic::SaveJPEG
PUBLIC	?SaveScreenShot@CPythonGraphic@@QAE_NPBD@Z	; CPythonGraphic::SaveScreenShot
PUBLIC	?GetAvailableMemory@CPythonGraphic@@QAEKXZ	; CPythonGraphic::GetAvailableMemory
PUBLIC	?SetGamma@CPythonGraphic@@QAEXM@Z		; CPythonGraphic::SetGamma
PUBLIC	??0SState@CPythonGraphic@@QAE@XZ		; CPythonGraphic::SState::SState
PUBLIC	??0?$allocator@USState@CPythonGraphic@@@std@@QAE@XZ ; std::allocator<CPythonGraphic::SState>::allocator<CPythonGraphic::SState>
PUBLIC	?deallocate@?$allocator@USState@CPythonGraphic@@@std@@QAEXPAUSState@CPythonGraphic@@I@Z ; std::allocator<CPythonGraphic::SState>::deallocate
PUBLIC	?allocate@?$allocator@USState@CPythonGraphic@@@std@@QAEPAUSState@CPythonGraphic@@I@Z ; std::allocator<CPythonGraphic::SState>::allocate
PUBLIC	?construct@?$allocator@USState@CPythonGraphic@@@std@@QAEXPAUSState@CPythonGraphic@@ABU34@@Z ; std::allocator<CPythonGraphic::SState>::construct
PUBLIC	?max_size@?$allocator@USState@CPythonGraphic@@@std@@QBEIXZ ; std::allocator<CPythonGraphic::SState>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@USState@CPythonGraphic@@@std@@@std@@SAIABV?$allocator@USState@CPythonGraphic@@@2@@Z ; std::allocator_traits<std::allocator<CPythonGraphic::SState> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<CPythonGraphic::SState> >::_Wrap_alloc<std::allocator<CPythonGraphic::SState> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEPAUSState@CPythonGraphic@@I@Z ; std::_Wrap_alloc<std::allocator<CPythonGraphic::SState> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEXPAUSState@CPythonGraphic@@I@Z ; std::_Wrap_alloc<std::allocator<CPythonGraphic::SState> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<CPythonGraphic::SState> >::max_size
PUBLIC	?deallocate@?$allocator@PAUSState@CPythonGraphic@@@std@@QAEXPAPAUSState@CPythonGraphic@@I@Z ; std::allocator<CPythonGraphic::SState *>::deallocate
PUBLIC	?allocate@?$allocator@PAUSState@CPythonGraphic@@@std@@QAEPAPAUSState@CPythonGraphic@@I@Z ; std::allocator<CPythonGraphic::SState *>::allocate
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@std@@QAEPAPAUSState@CPythonGraphic@@I@Z ; std::_Wrap_alloc<std::allocator<CPythonGraphic::SState *> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@std@@QAEXPAPAUSState@CPythonGraphic@@I@Z ; std::_Wrap_alloc<std::allocator<CPythonGraphic::SState *> >::deallocate
PUBLIC	??0?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@QAE@XZ ; std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> >::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> >
PUBLIC	?_Getblock@?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@QBEII@Z ; std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> >::_Getblock
PUBLIC	??1?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@QAE@XZ ; std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> >::~_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> >
PUBLIC	??0?$_Deque_alloc@$0A@U?$_Deque_base_types@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@ABV?$allocator@USState@CPythonGraphic@@@1@@Z ; std::_Deque_alloc<0,std::_Deque_base_types<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::_Deque_alloc<0,std::_Deque_base_types<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >
PUBLIC	??1?$_Deque_alloc@$0A@U?$_Deque_base_types@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@XZ ; std::_Deque_alloc<0,std::_Deque_base_types<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::~_Deque_alloc<0,std::_Deque_base_types<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >
PUBLIC	?_Alloc_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAEXXZ ; std::_Deque_alloc<0,std::_Deque_base_types<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAEXXZ ; std::_Deque_alloc<0,std::_Deque_base_types<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::_Free_proxy
PUBLIC	?_Getal@?$_Deque_alloc@$0A@U?$_Deque_base_types@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@2@XZ ; std::_Deque_alloc<0,std::_Deque_base_types<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::_Getal
PUBLIC	??0?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE@XZ ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >
PUBLIC	??1?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE@XZ ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::~deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >
PUBLIC	?end@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@2@XZ ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::end
PUBLIC	?max_size@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QBEIXZ ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::max_size
PUBLIC	?empty@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QBE_NXZ ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::empty
PUBLIC	?back@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEAAUSState@CPythonGraphic@@XZ ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::back
PUBLIC	?push_back@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEXABUSState@CPythonGraphic@@@Z ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::push_back
PUBLIC	?pop_back@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEXXZ ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::pop_back
PUBLIC	?_Xlen@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@IBEXXZ ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Xlen
PUBLIC	?_Growmap@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@IAEXI@Z ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Growmap
PUBLIC	?_Tidy@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@IAEXXZ ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Tidy
PUBLIC	??0?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@XZ ; std::stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >
PUBLIC	?empty@?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QBE_NXZ ; std::stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::empty
PUBLIC	?top@?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAEAAUSState@CPythonGraphic@@XZ ; std::stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::top
PUBLIC	?push@?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAEXABUSState@CPythonGraphic@@@Z ; std::stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::push
PUBLIC	?pop@?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAEXXZ ; std::stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::pop
PUBLIC	??1?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@XZ ; std::stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::~stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >
PUBLIC	??_GCPythonGraphic@@UAEPAXI@Z			; CPythonGraphic::`scalar deleting destructor'
PUBLIC	?Instance@?$CSingleton@VCStateManager@@@@SAAAVCStateManager@@XZ ; CSingleton<CStateManager>::Instance
PUBLIC	?GenScreenShotTag@@YAXPBDKPADI@Z		; GenScreenShotTag
PUBLIC	??0?$allocator@USPDTVertex@@@std@@QAE@XZ	; std::allocator<SPDTVertex>::allocator<SPDTVertex>
PUBLIC	?deallocate@?$allocator@USPDTVertex@@@std@@QAEXPAUSPDTVertex@@I@Z ; std::allocator<SPDTVertex>::deallocate
PUBLIC	?allocate@?$allocator@USPDTVertex@@@std@@QAEPAUSPDTVertex@@I@Z ; std::allocator<SPDTVertex>::allocate
PUBLIC	?construct@?$allocator@USPDTVertex@@@std@@QAEXPAUSPDTVertex@@ABU3@@Z ; std::allocator<SPDTVertex>::construct
PUBLIC	?max_size@?$allocator@USPDTVertex@@@std@@QBEIXZ	; std::allocator<SPDTVertex>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@USPDTVertex@@@std@@@std@@SAIABV?$allocator@USPDTVertex@@@2@@Z ; std::allocator_traits<std::allocator<SPDTVertex> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<SPDTVertex> >::_Wrap_alloc<std::allocator<SPDTVertex> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@QAEPAUSPDTVertex@@I@Z ; std::_Wrap_alloc<std::allocator<SPDTVertex> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@QAEXPAUSPDTVertex@@I@Z ; std::_Wrap_alloc<std::allocator<SPDTVertex> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<SPDTVertex> >::max_size
PUBLIC	??0?$_Vector_val@U?$_Simple_types@USPDTVertex@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<SPDTVertex> >::_Vector_val<std::_Simple_types<SPDTVertex> >
PUBLIC	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@@std@@QAE@ABV?$allocator@USPDTVertex@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<SPDTVertex,std::allocator<SPDTVertex> > >::_Vector_alloc<0,std::_Vec_base_types<SPDTVertex,std::allocator<SPDTVertex> > >
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<SPDTVertex,std::allocator<SPDTVertex> > >::_Getal
PUBLIC	??0?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAE@XZ ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::vector<SPDTVertex,std::allocator<SPDTVertex> >
PUBLIC	??1?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAE@XZ ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::~vector<SPDTVertex,std::allocator<SPDTVertex> >
PUBLIC	?capacity@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QBEIXZ ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::capacity
PUBLIC	?_Unused_capacity@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QBEIXZ ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Unused_capacity
PUBLIC	?size@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QBEIXZ ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::size
PUBLIC	?max_size@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QBEIXZ ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::max_size
PUBLIC	?empty@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QBE_NXZ ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::empty
PUBLIC	??A?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAEAAUSPDTVertex@@I@Z ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::operator[]
PUBLIC	?push_back@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAEXABUSPDTVertex@@@Z ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::push_back
PUBLIC	?_Destroy@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IAEXPAUSPDTVertex@@0@Z ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Destroy
PUBLIC	?_Grow_to@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IBEII@Z ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Grow_to
PUBLIC	?_Inside@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IBE_NPBUSPDTVertex@@@Z ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Inside
PUBLIC	?_Reallocate@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IAEXI@Z ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Reallocate
PUBLIC	?_Reserve@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IAEXI@Z ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Reserve
PUBLIC	?_Tidy@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IAEXXZ ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Tidy
PUBLIC	?_Xlen@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IBEXXZ ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Xlen
PUBLIC	?_Orphan_range@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IBEXPAUSPDTVertex@@0@Z ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Orphan_range
PUBLIC	??$addressof@$$CBUSPDTVertex@@@std@@YAPBUSPDTVertex@@ABU1@@Z ; std::addressof<SPDTVertex const >
PUBLIC	??$construct@USPDTVertex@@AAU1@@?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@QAEXPAUSPDTVertex@@AAU2@@Z ; std::_Wrap_alloc<std::allocator<SPDTVertex> >::construct<SPDTVertex,SPDTVertex &>
PUBLIC	??$construct@USPDTVertex@@ABU1@@?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@QAEXPAUSPDTVertex@@ABU2@@Z ; std::_Wrap_alloc<std::allocator<SPDTVertex> >::construct<SPDTVertex,SPDTVertex const &>
PUBLIC	??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >
PUBLIC	??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QBEABUSState@CPythonGraphic@@XZ ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::operator*
PUBLIC	?_Setcont@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QAEXPBV?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@2@@Z ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::_Setcont
PUBLIC	??1?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@XZ ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::~_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >
PUBLIC	??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >
PUBLIC	??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >
PUBLIC	??D?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QBEAAUSState@CPythonGraphic@@XZ ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::operator*
PUBLIC	??Y?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::operator+=
PUBLIC	??Z?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::operator-=
PUBLIC	??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::operator-
PUBLIC	??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@XZ ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::~_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >
PUBLIC	??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >
PUBLIC	??$construct@USState@CPythonGraphic@@ABU12@@?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEXPAUSState@CPythonGraphic@@ABU23@@Z ; std::_Wrap_alloc<std::allocator<CPythonGraphic::SState> >::construct<CPythonGraphic::SState,CPythonGraphic::SState const &>
PUBLIC	??$destroy@USState@CPythonGraphic@@@?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEXPAUSState@CPythonGraphic@@@Z ; std::_Wrap_alloc<std::allocator<CPythonGraphic::SState> >::destroy<CPythonGraphic::SState>
PUBLIC	??$?0U?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@1@@Z ; std::_Wrap_alloc<std::allocator<CPythonGraphic::SState *> >::_Wrap_alloc<std::allocator<CPythonGraphic::SState *> ><std::_Wrap_alloc<std::allocator<CPythonGraphic::SState> > >
PUBLIC	??$?0USState@CPythonGraphic@@@?$allocator@PAUSState@CPythonGraphic@@@std@@QAE@ABV?$allocator@USState@CPythonGraphic@@@1@@Z ; std::allocator<CPythonGraphic::SState *>::allocator<CPythonGraphic::SState *><CPythonGraphic::SState>
PUBLIC	??$destroy@PAUSState@CPythonGraphic@@@?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEXPAPAUSState@CPythonGraphic@@@Z ; std::_Wrap_alloc<std::allocator<CPythonGraphic::SState> >::destroy<CPythonGraphic::SState *>
PUBLIC	??$_Uninitialized_copy@PAPAUSState@CPythonGraphic@@PAPAU12@U?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@std@@@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@00AAU?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@0@@Z ; std::_Uninitialized_copy<CPythonGraphic::SState * *,CPythonGraphic::SState * *,std::_Wrap_alloc<std::allocator<CPythonGraphic::SState *> > >
PUBLIC	??$_Uninitialized_default_fill_n@PAPAUSState@CPythonGraphic@@IU?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@std@@@std@@YAXPAPAUSState@CPythonGraphic@@IAAU?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@0@@Z ; std::_Uninitialized_default_fill_n<CPythonGraphic::SState * *,unsigned int,std::_Wrap_alloc<std::allocator<CPythonGraphic::SState *> > >
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@std@@@std@@YAXPAPAUSState@CPythonGraphic@@0AAU?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPythonGraphic::SState *> > >
PUBLIC	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
PUBLIC	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@@std@@YAXPAUSPDTVertex@@0AAU?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<SPDTVertex> > >
PUBLIC	??$_Umove@PAUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IAEPAUSPDTVertex@@PAU2@00@Z ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Umove<SPDTVertex *>
PUBLIC	??$_Allocate@USState@CPythonGraphic@@@std@@YAPAUSState@CPythonGraphic@@IPAU12@@Z ; std::_Allocate<CPythonGraphic::SState>
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$_Allocate@PAUSState@CPythonGraphic@@@std@@YAPAPAUSState@CPythonGraphic@@IPAPAU12@@Z ; std::_Allocate<CPythonGraphic::SState *>
PUBLIC	??$_Allocate@USPDTVertex@@@std@@YAPAUSPDTVertex@@IPAU1@@Z ; std::_Allocate<SPDTVertex>
PUBLIC	??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>
PUBLIC	??$forward@AAUSPDTVertex@@@std@@YAAAUSPDTVertex@@AAU1@@Z ; std::forward<SPDTVertex &>
PUBLIC	??$construct@USPDTVertex@@AAU1@@?$allocator_traits@V?$allocator@USPDTVertex@@@std@@@std@@SAXAAV?$allocator@USPDTVertex@@@1@PAUSPDTVertex@@AAU3@@Z ; std::allocator_traits<std::allocator<SPDTVertex> >::construct<SPDTVertex,SPDTVertex &>
PUBLIC	??$forward@ABUSPDTVertex@@@std@@YAABUSPDTVertex@@ABU1@@Z ; std::forward<SPDTVertex const &>
PUBLIC	??$construct@USPDTVertex@@ABU1@@?$allocator_traits@V?$allocator@USPDTVertex@@@std@@@std@@SAXAAV?$allocator@USPDTVertex@@@1@PAUSPDTVertex@@ABU3@@Z ; std::allocator_traits<std::allocator<SPDTVertex> >::construct<SPDTVertex,SPDTVertex const &>
PUBLIC	??$forward@ABUSState@CPythonGraphic@@@std@@YAABUSState@CPythonGraphic@@ABU12@@Z ; std::forward<CPythonGraphic::SState const &>
PUBLIC	??$construct@USState@CPythonGraphic@@ABU12@@?$allocator_traits@V?$allocator@USState@CPythonGraphic@@@std@@@std@@SAXAAV?$allocator@USState@CPythonGraphic@@@1@PAUSState@CPythonGraphic@@ABU34@@Z ; std::allocator_traits<std::allocator<CPythonGraphic::SState> >::construct<CPythonGraphic::SState,CPythonGraphic::SState const &>
PUBLIC	??$destroy@USState@CPythonGraphic@@@?$allocator_traits@V?$allocator@USState@CPythonGraphic@@@std@@@std@@SAXAAV?$allocator@USState@CPythonGraphic@@@1@PAUSState@CPythonGraphic@@@Z ; std::allocator_traits<std::allocator<CPythonGraphic::SState> >::destroy<CPythonGraphic::SState>
PUBLIC	??$destroy@PAUSState@CPythonGraphic@@@?$allocator_traits@V?$allocator@USState@CPythonGraphic@@@std@@@std@@SAXAAV?$allocator@USState@CPythonGraphic@@@1@PAPAUSState@CPythonGraphic@@@Z ; std::allocator_traits<std::allocator<CPythonGraphic::SState> >::destroy<CPythonGraphic::SState *>
PUBLIC	??$_Unchecked@PAPAUSState@CPythonGraphic@@@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@@Z ; std::_Unchecked<CPythonGraphic::SState * *>
PUBLIC	??$_Uninit_copy@PAPAUSState@CPythonGraphic@@PAPAU12@U?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@std@@@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@00AAU?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@0@@Z ; std::_Uninit_copy<CPythonGraphic::SState * *,CPythonGraphic::SState * *,std::_Wrap_alloc<std::allocator<CPythonGraphic::SState *> > >
PUBLIC	??$_Rechecked@PAPAUSState@CPythonGraphic@@PAPAU12@@std@@YAAAPAPAUSState@CPythonGraphic@@AAPAPAU12@PAPAU12@@Z ; std::_Rechecked<CPythonGraphic::SState * *,CPythonGraphic::SState * *>
PUBLIC	??$_Val_type@PAPAUSState@CPythonGraphic@@@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@@Z ; std::_Val_type<CPythonGraphic::SState * *>
PUBLIC	??$_Ptr_cat@PAUSState@CPythonGraphic@@PAU12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUSState@CPythonGraphic@@0@Z ; std::_Ptr_cat<CPythonGraphic::SState *,CPythonGraphic::SState *>
PUBLIC	??$_Uninit_def_fill_n@PAUSState@CPythonGraphic@@IPAU12@@std@@YAXPAPAUSState@CPythonGraphic@@IAAU?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_def_fill_n<CPythonGraphic::SState *,unsigned int,CPythonGraphic::SState *>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@std@@@std@@YAXPAPAUSState@CPythonGraphic@@0AAU?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPythonGraphic::SState *> > >
PUBLIC	??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
PUBLIC	??$_Ptr_cat@USPDTVertex@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUSPDTVertex@@0@Z ; std::_Ptr_cat<SPDTVertex,SPDTVertex>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@@std@@YAXPAUSPDTVertex@@0AAU?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<SPDTVertex> > >
PUBLIC	??$_Uninitialized_move@PAUSPDTVertex@@PAU1@U?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@@std@@YAPAUSPDTVertex@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@0@@Z ; std::_Uninitialized_move<SPDTVertex *,SPDTVertex *,std::_Wrap_alloc<std::allocator<SPDTVertex> > >
PUBLIC	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$construct@USPDTVertex@@AAU1@@?$allocator@USPDTVertex@@@std@@QAEXPAUSPDTVertex@@AAU2@@Z ; std::allocator<SPDTVertex>::construct<SPDTVertex,SPDTVertex &>
PUBLIC	??$destroy@USState@CPythonGraphic@@@?$allocator@USState@CPythonGraphic@@@std@@QAEXPAUSState@CPythonGraphic@@@Z ; std::allocator<CPythonGraphic::SState>::destroy<CPythonGraphic::SState>
PUBLIC	??$destroy@PAUSState@CPythonGraphic@@@?$allocator@USState@CPythonGraphic@@@std@@QAEXPAPAUSState@CPythonGraphic@@@Z ; std::allocator<CPythonGraphic::SState>::destroy<CPythonGraphic::SState *>
PUBLIC	??$_Uninit_copy@PAUSState@CPythonGraphic@@PAU12@@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@00AAU?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<CPythonGraphic::SState *,CPythonGraphic::SState *>
PUBLIC	??$_Fill_n@PAPAUSState@CPythonGraphic@@IPAU12@@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@IABQAU12@@Z ; std::_Fill_n<CPythonGraphic::SState * *,unsigned int,CPythonGraphic::SState *>
PUBLIC	??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
PUBLIC	??$destroy@USPDTVertex@@@?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@QAEXPAUSPDTVertex@@@Z ; std::_Wrap_alloc<std::allocator<SPDTVertex> >::destroy<SPDTVertex>
PUBLIC	??$_Unchecked@PAUSPDTVertex@@@std@@YAPAUSPDTVertex@@PAU1@@Z ; std::_Unchecked<SPDTVertex *>
PUBLIC	??$_Uninit_move@PAUSPDTVertex@@PAU1@U?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@@std@@YAPAUSPDTVertex@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@0@@Z ; std::_Uninit_move<SPDTVertex *,SPDTVertex *,std::_Wrap_alloc<std::allocator<SPDTVertex> > >
PUBLIC	??$_Rechecked@PAUSPDTVertex@@PAU1@@std@@YAAAPAUSPDTVertex@@AAPAU1@PAU1@@Z ; std::_Rechecked<SPDTVertex *,SPDTVertex *>
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$destroy@USPDTVertex@@@?$allocator_traits@V?$allocator@USPDTVertex@@@std@@@std@@SAXAAV?$allocator@USPDTVertex@@@1@PAUSPDTVertex@@@Z ; std::allocator_traits<std::allocator<SPDTVertex> >::destroy<SPDTVertex>
PUBLIC	??$_Val_type@PAUSPDTVertex@@@std@@YAPAUSPDTVertex@@PAU1@@Z ; std::_Val_type<SPDTVertex *>
PUBLIC	??$_Uninit_move@PAUSPDTVertex@@PAU1@V?$allocator@USPDTVertex@@@std@@U1@@std@@YAPAUSPDTVertex@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<SPDTVertex *,SPDTVertex *,std::allocator<SPDTVertex>,SPDTVertex>
PUBLIC	??$destroy@USPDTVertex@@@?$allocator@USPDTVertex@@@std@@QAEXPAUSPDTVertex@@@Z ; std::allocator<SPDTVertex>::destroy<SPDTVertex>
PUBLIC	??$construct@USPDTVertex@@U1@@?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@QAEXPAUSPDTVertex@@$$QAU2@@Z ; std::_Wrap_alloc<std::allocator<SPDTVertex> >::construct<SPDTVertex,SPDTVertex>
PUBLIC	??$forward@USPDTVertex@@@std@@YA$$QAUSPDTVertex@@AAU1@@Z ; std::forward<SPDTVertex>
PUBLIC	??$construct@USPDTVertex@@U1@@?$allocator_traits@V?$allocator@USPDTVertex@@@std@@@std@@SAXAAV?$allocator@USPDTVertex@@@1@PAUSPDTVertex@@$$QAU3@@Z ; std::allocator_traits<std::allocator<SPDTVertex> >::construct<SPDTVertex,SPDTVertex>
PUBLIC	??$construct@USPDTVertex@@U1@@?$allocator@USPDTVertex@@@std@@QAEXPAUSPDTVertex@@$$QAU2@@Z ; std::allocator<SPDTVertex>::construct<SPDTVertex,SPDTVertex>
PUBLIC	??_ECPythonGraphic@@W3AEPAXI@Z			; [thunk]:CPythonGraphic::`vector deleting destructor'
PUBLIC	?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A ; CSingleton<CPythonGraphic>::ms_singleton
PUBLIC	??_7?$CSingleton@VCPythonGraphic@@@@6B@		; CSingleton<CPythonGraphic>::`vftable'
PUBLIC	??_7CPythonGraphic@@6BCScreen@@@		; CPythonGraphic::`vftable'
PUBLIC	??_7CPythonGraphic@@6B?$CSingleton@VCPythonGraphic@@@@@ ; CPythonGraphic::`vftable'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_R4?$CSingleton@VCPythonGraphic@@@@6B@	; CSingleton<CPythonGraphic>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CSingleton@VCPythonGraphic@@@@@8	; CSingleton<CPythonGraphic> `RTTI Type Descriptor'
PUBLIC	??_R3?$CSingleton@VCPythonGraphic@@@@8		; CSingleton<CPythonGraphic>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CSingleton@VCPythonGraphic@@@@8		; CSingleton<CPythonGraphic>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CSingleton@VCPythonGraphic@@@@8	; CSingleton<CPythonGraphic>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	??_C@_0DE@BKCCNGJK@CPythonGraphic?3?3SetViewport?$CI?$CFd?0?5@ ; `string'
PUBLIC	??_C@_0BG@HJKBJNEI@YMIR_METIN2?3?$CFs?30x?$CF?48x?$AA@ ; `string'
PUBLIC	??_C@_0CD@MBNJPOAA@Failed?5to?5get?5back?5buffer?5?$CI0x?$CF08@ ; `string'
PUBLIC	??_C@_0CE@NBEFCAIB@Failed?5to?5get?5surface?5desc?5?$CI0x?$CF0@ ; `string'
PUBLIC	??_C@_0EJ@CMPHLGKC@Unsupported?5BackBuffer?5Format?$CI?$CFd@ ; `string'
PUBLIC	??_C@_0CE@GBOBAJOB@Failed?5to?5lock?5the?5surface?5?$CI0x?$CF0@ ; `string'
PUBLIC	??_C@_0CF@KCPFIPM@Failed?5to?5allocate?5screenshot?5bu@ ; `string'
PUBLIC	??_C@_0CH@IOAMCLFA@Failed?5to?5save?5JPEG?5file?4?5?$CI?$CFs?0?5?$CF@ ; `string'
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	??_C@_02GMLFBBN@wb?$AA@				; `string'
PUBLIC	??_C@_0BG@PCGMMCML@Python?5Graphic?5Clear?6?$AA@ ; `string'
PUBLIC	??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_R4CPythonGraphic@@6BCScreen@@@		; CPythonGraphic::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCPythonGraphic@@@8			; CPythonGraphic `RTTI Type Descriptor'
PUBLIC	??_R3CPythonGraphic@@8				; CPythonGraphic::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CPythonGraphic@@8				; CPythonGraphic::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CPythonGraphic@@8			; CPythonGraphic::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CScreen@@8			; CScreen::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCScreen@@@8				; CScreen `RTTI Type Descriptor'
PUBLIC	??_R3CScreen@@8					; CScreen::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CScreen@@8					; CScreen::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicCollisionObject@@8	; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicCollisionObject@@@8		; CGraphicCollisionObject `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicBase@@@8			; CGraphicBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicBase@@8				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicBase@@8				; CGraphicBase::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@?$CSingleton@VCPythonGraphic@@@@8	; CSingleton<CPythonGraphic>::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R4CPythonGraphic@@6B?$CSingleton@VCPythonGraphic@@@@@ ; CPythonGraphic::`RTTI Complete Object Locator'
PUBLIC	__real@00000000
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@41000000
PUBLIC	__real@42480000
PUBLIC	__real@43160000
PUBLIC	__real@43480000
PUBLIC	__real@437f0000
PUBLIC	__real@be19999a
PUBLIC	__real@be99999a
PUBLIC	__xmm@000000003ba3d70a000000003f800000
PUBLIC	__xmm@000000003f8000003f8000003f800000
PUBLIC	__xmm@00000000bf800000bf800000bf800000
PUBLIC	__xmm@3f000000000000000000000000000000
PUBLIC	__xmm@3f800000000000003f800000bf800000
PUBLIC	__xmm@3f8000003dcccccd3dcccccd3dcccccd
PUBLIC	__xmm@3f8000003e99999a3e99999a3e99999a
PUBLIC	__xmm@3f8000003f8000003f8000003f800000
PUBLIC	__xmm@bf80000000000000bf8000003f800000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_free:PROC
EXTRN	_malloc:PROC
EXTRN	_memmove:PROC
EXTRN	_strchr:PROC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	_fputc:PROC
EXTRN	_fread:PROC
EXTRN	_fseek:PROC
EXTRN	_ftell:PROC
EXTRN	_fwrite:PROC
EXTRN	__snprintf:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?Tracef@@YAXPBDZZ:PROC				; Tracef
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	?GetCRC32@@YAKPBDI@Z:PROC			; GetCRC32
EXTRN	?SetOrtho2D@CGraphicBase@@QAEXMMM@Z:PROC	; CGraphicBase::SetOrtho2D
EXTRN	?GetColor@CGraphicBase@@QAEKMMMM@Z:PROC		; CGraphicBase::GetColor
EXTRN	?SetDefaultIndexBuffer@CGraphicBase@@SAXI@Z:PROC ; CGraphicBase::SetDefaultIndexBuffer
EXTRN	?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z:PROC ; CGraphicBase::SetPDTStream
EXTRN	?UpdatePipeLineMatrix@CGraphicBase@@IAEXXZ:PROC	; CGraphicBase::UpdatePipeLineMatrix
EXTRN	?SetTextureStage@CGraphicTexture@@QBEXH@Z:PROC	; CGraphicTexture::SetTextureStage
EXTRN	?GetWidth@CGraphicImageInstance@@QAEHXZ:PROC	; CGraphicImageInstance::GetWidth
EXTRN	?GetHeight@CGraphicImageInstance@@QAEHXZ:PROC	; CGraphicImageInstance::GetHeight
EXTRN	?GetTexturePointer@CGraphicImageInstance@@QAEPAVCGraphicTexture@@XZ:PROC ; CGraphicImageInstance::GetTexturePointer
EXTRN	??0CScreen@@QAE@XZ:PROC				; CScreen::CScreen
EXTRN	??1CScreen@@UAE@XZ:PROC				; CScreen::~CScreen
EXTRN	?RenderLine2d@CScreen@@QAEXMMMMM@Z:PROC		; CScreen::RenderLine2d
EXTRN	?RenderBox2d@CScreen@@QAEXMMMMM@Z:PROC		; CScreen::RenderBox2d
EXTRN	?RenderTextureBox@CScreen@@QAEXMMMMMMMMM@Z:PROC	; CScreen::RenderTextureBox
EXTRN	?SetBlendOperation@CScreen@@QAEXXZ:PROC		; CScreen::SetBlendOperation
EXTRN	?SetDiffuseColor@CScreen@@QAEXK@Z:PROC		; CScreen::SetDiffuseColor
EXTRN	?SetCursorPosition@CScreen@@QAEXHHHH@Z:PROC	; CScreen::SetCursorPosition
EXTRN	??0CCullingManager@@QAE@XZ:PROC			; CCullingManager::CCullingManager
EXTRN	??1CCullingManager@@UAE@XZ:PROC			; CCullingManager::~CCullingManager
EXTRN	??_E?$CSingleton@VCPythonGraphic@@@@UAEPAXI@Z:PROC ; CSingleton<CPythonGraphic>::`vector deleting destructor'
EXTRN	??_ECPythonGraphic@@UAEPAXI@Z:PROC		; CPythonGraphic::`vector deleting destructor'
EXTRN	?SetMaterial@CStateManager@@QAEXPBU_D3DMATERIAL8@@@Z:PROC ; CStateManager::SetMaterial
EXTRN	?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SetRenderState
EXTRN	?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z:PROC ; CStateManager::SetTexture
EXTRN	?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z:PROC ; CStateManager::SaveTextureStageState
EXTRN	?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z:PROC ; CStateManager::RestoreTextureStageState
EXTRN	?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z:PROC ; CStateManager::SetTextureStageState
EXTRN	?SetVertexShader@CStateManager@@QAEXK@Z:PROC	; CStateManager::SetVertexShader
EXTRN	?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z:PROC ; CStateManager::SetTransform
EXTRN	?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z:PROC ; CStateManager::DrawPrimitive
EXTRN	?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z:PROC ; CStateManager::DrawIndexedPrimitive
EXTRN	?jpeg_save@@YAHPAEHHHPBD@Z:PROC			; jpeg_save
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__ftoui3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A:BYTE ; CGraphicBase::ms_matIdentity
EXTRN	?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A:BYTE	; CGraphicBase::ms_matView
EXTRN	?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A:BYTE	; CGraphicBase::ms_matProj
EXTRN	?ms_iWidth@CGraphicBase@@1HA:DWORD		; CGraphicBase::ms_iWidth
EXTRN	?ms_iHeight@CGraphicBase@@1HA:DWORD		; CGraphicBase::ms_iHeight
EXTRN	?ms_lpd3d@CGraphicBase@@1PAUIDirect3D8@@A:DWORD	; CGraphicBase::ms_lpd3d
EXTRN	?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A:DWORD ; CGraphicBase::ms_lpd3dDevice
EXTRN	?ms_pntVS@CGraphicBase@@1KA:DWORD		; CGraphicBase::ms_pntVS
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A DD 01H DUP (?) ; CSingleton<CPythonGraphic>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?color@?3??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A
_BSS	SEGMENT
?color@?3??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A DB 010H DUP (?) ; `CPythonGraphic::RenderCoolTimeBox'::`4'::color
_BSS	ENDS
;	COMDAT ?$S1@?3??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4IA
_BSS	SEGMENT
?$S1@?3??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4IA DD 01H DUP (?) ; S1<`template-parameter-4',CPythonGraphic::derCoolTimeBox,unsigned char * const,void,float,float,float,float>
_BSS	ENDS
;	COMDAT ?s_v2BoxPos@?3??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A
_BSS	SEGMENT
?s_v2BoxPos@?3??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A DQ 08H DUP (?) ; `CPythonGraphic::RenderCoolTimeBox'::`4'::s_v2BoxPos
_BSS	ENDS
;	COMDAT __xmm@bf80000000000000bf8000003f800000
CONST	SEGMENT
__xmm@bf80000000000000bf8000003f800000 DB 00H, 00H, 080H, '?', 00H, 00H, 080H
	DB	0bfH, 00H, 00H, 00H, 00H, 00H, 00H, 080H, 0bfH
CONST	ENDS
;	COMDAT __xmm@3f8000003f8000003f8000003f800000
CONST	SEGMENT
__xmm@3f8000003f8000003f8000003f800000 DB 00H, 00H, 080H, '?', 00H, 00H, 080H
	DB	'?', 00H, 00H, 080H, '?', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@3f8000003e99999a3e99999a3e99999a
CONST	SEGMENT
__xmm@3f8000003e99999a3e99999a3e99999a DB 09aH, 099H, 099H, '>', 09aH, 099H
	DB	099H, '>', 09aH, 099H, 099H, '>', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@3f8000003dcccccd3dcccccd3dcccccd
CONST	SEGMENT
__xmm@3f8000003dcccccd3dcccccd3dcccccd DB 0cdH, 0ccH, 0ccH, '=', 0cdH, 0ccH
	DB	0ccH, '=', 0cdH, 0ccH, 0ccH, '=', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@3f800000000000003f800000bf800000
CONST	SEGMENT
__xmm@3f800000000000003f800000bf800000 DB 00H, 00H, 080H, 0bfH, 00H, 00H, 080H
	DB	'?', 00H, 00H, 00H, 00H, 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@3f000000000000000000000000000000
CONST	SEGMENT
__xmm@3f000000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, '?'
CONST	ENDS
;	COMDAT __xmm@00000000bf800000bf800000bf800000
CONST	SEGMENT
__xmm@00000000bf800000bf800000bf800000 DB 00H, 00H, 080H, 0bfH, 00H, 00H, 080H
	DB	0bfH, 00H, 00H, 080H, 0bfH, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@000000003f8000003f8000003f800000
CONST	SEGMENT
__xmm@000000003f8000003f8000003f800000 DB 00H, 00H, 080H, '?', 00H, 00H, 080H
	DB	'?', 00H, 00H, 080H, '?', 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@000000003ba3d70a000000003f800000
CONST	SEGMENT
__xmm@000000003ba3d70a000000003f800000 DB 00H, 00H, 080H, '?', 00H, 00H, 00H
	DB	00H, 0aH, 0d7H, 0a3H, ';', 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __real@be99999a
CONST	SEGMENT
__real@be99999a DD 0be99999ar			; -0.3
CONST	ENDS
;	COMDAT __real@be19999a
CONST	SEGMENT
__real@be19999a DD 0be19999ar			; -0.15
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@43480000
CONST	SEGMENT
__real@43480000 DD 043480000r			; 200
CONST	ENDS
;	COMDAT __real@43160000
CONST	SEGMENT
__real@43160000 DD 043160000r			; 150
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R4CPythonGraphic@@6B?$CSingleton@VCPythonGraphic@@@@@
rdata$r	SEGMENT
??_R4CPythonGraphic@@6B?$CSingleton@VCPythonGraphic@@@@@ DD 00H ; CPythonGraphic::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCPythonGraphic@@@8
	DD	FLAT:??_R3CPythonGraphic@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EA@?$CSingleton@VCPythonGraphic@@@@8
rdata$r	SEGMENT
??_R13?0A@EA@?$CSingleton@VCPythonGraphic@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCPythonGraphic@@@@@8 ; CSingleton<CPythonGraphic>::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCPythonGraphic@@@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicBase@@8
rdata$r	SEGMENT
??_R2CGraphicBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphicBase@@8 ; CGraphicBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicBase@@8
rdata$r	SEGMENT
??_R3CGraphicBase@@8 DD 00H				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicBase@@@8
data$r	SEGMENT
??_R0?AVCGraphicBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicBase@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R2CGraphicCollisionObject@@8 DD FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8 ; CGraphicCollisionObject::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R3CGraphicCollisionObject@@8 DD 00H			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicCollisionObject@@@8
data$r	SEGMENT
??_R0?AVCGraphicCollisionObject@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicCollisionObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicCollisionObject@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicCollisionObject@@8 DD FLAT:??_R0?AVCGraphicCollisionObject@@@8 ; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CScreen@@8
rdata$r	SEGMENT
??_R2CScreen@@8 DD FLAT:??_R1A@?0A@EA@CScreen@@8	; CScreen::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CScreen@@8
rdata$r	SEGMENT
??_R3CScreen@@8 DD 00H					; CScreen::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CScreen@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCScreen@@@8
data$r	SEGMENT
??_R0?AVCScreen@@@8 DD FLAT:??_7type_info@@6B@		; CScreen `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCScreen@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CScreen@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CScreen@@8 DD FLAT:??_R0?AVCScreen@@@8	; CScreen::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CScreen@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CPythonGraphic@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CPythonGraphic@@8 DD FLAT:??_R0?AVCPythonGraphic@@@8 ; CPythonGraphic::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CPythonGraphic@@8
rdata$r	ENDS
;	COMDAT ??_R2CPythonGraphic@@8
rdata$r	SEGMENT
??_R2CPythonGraphic@@8 DD FLAT:??_R1A@?0A@EA@CPythonGraphic@@8 ; CPythonGraphic::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CScreen@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
	DD	FLAT:??_R13?0A@EA@?$CSingleton@VCPythonGraphic@@@@8
rdata$r	ENDS
;	COMDAT ??_R3CPythonGraphic@@8
rdata$r	SEGMENT
??_R3CPythonGraphic@@8 DD 00H				; CPythonGraphic::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2CPythonGraphic@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCPythonGraphic@@@8
data$r	SEGMENT
??_R0?AVCPythonGraphic@@@8 DD FLAT:??_7type_info@@6B@	; CPythonGraphic `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPythonGraphic@@', 00H
data$r	ENDS
;	COMDAT ??_R4CPythonGraphic@@6BCScreen@@@
rdata$r	SEGMENT
??_R4CPythonGraphic@@6BCScreen@@@ DD 00H		; CPythonGraphic::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCPythonGraphic@@@8
	DD	FLAT:??_R3CPythonGraphic@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@ DB 'deque<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PCGMMCML@Python?5Graphic?5Clear?6?$AA@
CONST	SEGMENT
??_C@_0BG@PCGMMCML@Python?5Graphic?5Clear?6?$AA@ DB 'Python Graphic Clear'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb?$AA@
CONST	SEGMENT
??_C@_02GMLFBBN@wb?$AA@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@IOAMCLFA@Failed?5to?5save?5JPEG?5file?4?5?$CI?$CFs?0?5?$CF@
CONST	SEGMENT
??_C@_0CH@IOAMCLFA@Failed?5to?5save?5JPEG?5file?4?5?$CI?$CFs?0?5?$CF@ DB 'F'
	DB	'ailed to save JPEG file. (%s, %d, %d)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@KCPFIPM@Failed?5to?5allocate?5screenshot?5bu@
CONST	SEGMENT
??_C@_0CF@KCPFIPM@Failed?5to?5allocate?5screenshot?5bu@ DB 'Failed to all'
	DB	'ocate screenshot buffer', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@GBOBAJOB@Failed?5to?5lock?5the?5surface?5?$CI0x?$CF0@
CONST	SEGMENT
??_C@_0CE@GBOBAJOB@Failed?5to?5lock?5the?5surface?5?$CI0x?$CF0@ DB 'Faile'
	DB	'd to lock the surface (0x%08x)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@CMPHLGKC@Unsupported?5BackBuffer?5Format?$CI?$CFd@
CONST	SEGMENT
??_C@_0EJ@CMPHLGKC@Unsupported?5BackBuffer?5Format?$CI?$CFd@ DB 'Unsuppor'
	DB	'ted BackBuffer Format(%d). Please contact Metin 2 Administrat'
	DB	'or.', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@NBEFCAIB@Failed?5to?5get?5surface?5desc?5?$CI0x?$CF0@
CONST	SEGMENT
??_C@_0CE@NBEFCAIB@Failed?5to?5get?5surface?5desc?5?$CI0x?$CF0@ DB 'Faile'
	DB	'd to get surface desc (0x%08x)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@MBNJPOAA@Failed?5to?5get?5back?5buffer?5?$CI0x?$CF08@
CONST	SEGMENT
??_C@_0CD@MBNJPOAA@Failed?5to?5get?5back?5buffer?5?$CI0x?$CF08@ DB 'Faile'
	DB	'd to get back buffer (0x%08x)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HJKBJNEI@YMIR_METIN2?3?$CFs?30x?$CF?48x?$AA@
CONST	SEGMENT
??_C@_0BG@HJKBJNEI@YMIR_METIN2?3?$CFs?30x?$CF?48x?$AA@ DB 'YMIR_METIN2:%s'
	DB	':0x%.8x', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@BKCCNGJK@CPythonGraphic?3?3SetViewport?$CI?$CFd?0?5@
CONST	SEGMENT
??_C@_0DE@BKCCNGJK@CPythonGraphic?3?3SetViewport?$CI?$CFd?0?5@ DB 'CPytho'
	DB	'nGraphic::SetViewport(%d, %d, %d, %d) - Error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CSingleton@VCPythonGraphic@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CSingleton@VCPythonGraphic@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCPythonGraphic@@@@@8 ; CSingleton<CPythonGraphic>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCPythonGraphic@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CSingleton@VCPythonGraphic@@@@8
rdata$r	SEGMENT
??_R2?$CSingleton@VCPythonGraphic@@@@8 DD FLAT:??_R1A@?0A@EA@?$CSingleton@VCPythonGraphic@@@@8 ; CSingleton<CPythonGraphic>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CSingleton@VCPythonGraphic@@@@8
rdata$r	SEGMENT
??_R3?$CSingleton@VCPythonGraphic@@@@8 DD 00H		; CSingleton<CPythonGraphic>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CSingleton@VCPythonGraphic@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CSingleton@VCPythonGraphic@@@@@8
data$r	SEGMENT
??_R0?AV?$CSingleton@VCPythonGraphic@@@@@8 DD FLAT:??_7type_info@@6B@ ; CSingleton<CPythonGraphic> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CSingleton@VCPythonGraphic@@@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$CSingleton@VCPythonGraphic@@@@6B@
rdata$r	SEGMENT
??_R4?$CSingleton@VCPythonGraphic@@@@6B@ DD 00H		; CSingleton<CPythonGraphic>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CSingleton@VCPythonGraphic@@@@@8
	DD	FLAT:??_R3?$CSingleton@VCPythonGraphic@@@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_7CPythonGraphic@@6B?$CSingleton@VCPythonGraphic@@@@@
CONST	SEGMENT
??_7CPythonGraphic@@6B?$CSingleton@VCPythonGraphic@@@@@ DD FLAT:??_R4CPythonGraphic@@6B?$CSingleton@VCPythonGraphic@@@@@ ; CPythonGraphic::`vftable'
	DD	FLAT:??_ECPythonGraphic@@W3AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CPythonGraphic@@6BCScreen@@@
CONST	SEGMENT
??_7CPythonGraphic@@6BCScreen@@@ DD FLAT:??_R4CPythonGraphic@@6BCScreen@@@ ; CPythonGraphic::`vftable'
	DD	FLAT:??_ECPythonGraphic@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CSingleton@VCPythonGraphic@@@@6B@
CONST	SEGMENT
??_7?$CSingleton@VCPythonGraphic@@@@6B@ DD FLAT:??_R4?$CSingleton@VCPythonGraphic@@@@6B@ ; CSingleton<CPythonGraphic>::`vftable'
	DD	FLAT:??_E?$CSingleton@VCPythonGraphic@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IAEXI@Z$2
__ehfuncinfo$?_Reallocate@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z$2
__ehfuncinfo$?RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CPythonGraphic@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CPythonGraphic@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CPythonGraphic@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CPythonGraphic@@UAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CPythonGraphic@@UAE@XZ$3
__ehfuncinfo$??1CPythonGraphic@@UAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??1CPythonGraphic@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CPythonGraphic@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CPythonGraphic@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CPythonGraphic@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CPythonGraphic@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CPythonGraphic@@QAE@XZ$3
__ehfuncinfo$??0CPythonGraphic@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0CPythonGraphic@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_ECPythonGraphic@@W3AEPAXI@Z
_TEXT	SEGMENT
??_ECPythonGraphic@@W3AEPAXI@Z PROC			; [thunk]:CPythonGraphic::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_ECPythonGraphic@@UAEPAXI@Z
??_ECPythonGraphic@@W3AEPAXI@Z ENDP			; [thunk]:CPythonGraphic::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@USPDTVertex@@U1@@?$allocator@USPDTVertex@@@std@@QAEXPAUSPDTVertex@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@USPDTVertex@@U1@@?$allocator@USPDTVertex@@@std@@QAEXPAUSPDTVertex@@$$QAU2@@Z PROC ; std::allocator<SPDTVertex>::construct<SPDTVertex,SPDTVertex>, COMDAT
; _this$ = ecx

; 598  : 		void construct(_Objty *_Ptr, _Types&&... _Args)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 599  : 		{	// construct _Objty(_Types...) at _Ptr
; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 15		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [eax]
  00011	f3 0f 7f 01	 movdqu	 XMMWORD PTR [ecx], xmm0
  00015	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  0001a	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
$LN3@construct:

; 601  : 		}

  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
??$construct@USPDTVertex@@U1@@?$allocator@USPDTVertex@@@std@@QAEXPAUSPDTVertex@@$$QAU2@@Z ENDP ; std::allocator<SPDTVertex>::construct<SPDTVertex,SPDTVertex>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@USPDTVertex@@U1@@?$allocator_traits@V?$allocator@USPDTVertex@@@std@@@std@@SAXAAV?$allocator@USPDTVertex@@@1@PAUSPDTVertex@@$$QAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@USPDTVertex@@U1@@?$allocator_traits@V?$allocator@USPDTVertex@@@std@@@std@@SAXAAV?$allocator@USPDTVertex@@@1@PAUSPDTVertex@@$$QAU3@@Z PROC ; std::allocator_traits<std::allocator<SPDTVertex> >::construct<SPDTVertex,SPDTVertex>, COMDAT

; 720  : 		static void construct(_Alloc& _Al, _Objty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 15		 je	 SHORT $LN7@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [eax]
  00011	f3 0f 7f 01	 movdqu	 XMMWORD PTR [ecx], xmm0
  00015	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  0001a	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
$LN7@construct:

; 721  : 			_Types&&... _Args)
; 722  : 		{	// construct _Objty(_Types...) at _Ptr
; 723  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 724  : 		}

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??$construct@USPDTVertex@@U1@@?$allocator_traits@V?$allocator@USPDTVertex@@@std@@@std@@SAXAAV?$allocator@USPDTVertex@@@1@PAUSPDTVertex@@$$QAU3@@Z ENDP ; std::allocator_traits<std::allocator<SPDTVertex> >::construct<SPDTVertex,SPDTVertex>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\type_traits
;	COMDAT ??$forward@USPDTVertex@@@std@@YA$$QAUSPDTVertex@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@USPDTVertex@@@std@@YA$$QAUSPDTVertex@@AAU1@@Z PROC ; std::forward<SPDTVertex>, COMDAT

; 1504 : 	{	// forward an lvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@USPDTVertex@@@std@@YA$$QAUSPDTVertex@@AAU1@@Z ENDP ; std::forward<SPDTVertex>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@USPDTVertex@@U1@@?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@QAEXPAUSPDTVertex@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@USPDTVertex@@U1@@?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@QAEXPAUSPDTVertex@@$$QAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<SPDTVertex> >::construct<SPDTVertex,SPDTVertex>, COMDAT
; _this$ = ecx

; 868  : 		void construct(_Ty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 15		 je	 SHORT $LN11@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [eax]
  00011	f3 0f 7f 01	 movdqu	 XMMWORD PTR [ecx], xmm0
  00015	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  0001a	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
$LN11@construct:

; 869  : 			_Types&&... _Args)
; 870  : 		{	// construct _Ty(_Types...) at _Ptr
; 871  : 		_Mytraits::construct(*this, _Ptr,
; 872  : 			_STD forward<_Types>(_Args)...);
; 873  : 		}

  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
??$construct@USPDTVertex@@U1@@?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@QAEXPAUSPDTVertex@@$$QAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<SPDTVertex> >::construct<SPDTVertex,SPDTVertex>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$destroy@USPDTVertex@@@?$allocator@USPDTVertex@@@std@@QAEXPAUSPDTVertex@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@USPDTVertex@@@?$allocator@USPDTVertex@@@std@@QAEXPAUSPDTVertex@@@Z PROC ; std::allocator<SPDTVertex>::destroy<SPDTVertex>, COMDAT
; _this$ = ecx

; 606  : 		{	// destroy object at _Ptr
; 607  : 		_Ptr->~_Uty();
; 608  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@USPDTVertex@@@?$allocator@USPDTVertex@@@std@@QAEXPAUSPDTVertex@@@Z ENDP ; std::allocator<SPDTVertex>::destroy<SPDTVertex>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAUSPDTVertex@@PAU1@V?$allocator@USPDTVertex@@@std@@U1@@std@@YAPAUSPDTVertex@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUSPDTVertex@@PAU1@V?$allocator@USPDTVertex@@@std@@U1@@std@@YAPAUSPDTVertex@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<SPDTVertex *,SPDTVertex *,std::allocator<SPDTVertex>,SPDTVertex>, COMDAT

; 437  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 443  : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	3b ca		 cmp	 ecx, edx
  0000e	74 20		 je	 SHORT $LN4@Uninit_mov
$LL6@Uninit_mov:
; File a:\vs\vc\include\xmemory0

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00010	85 c0		 test	 eax, eax
  00012	74 12		 je	 SHORT $LN24@Uninit_mov
  00014	f3 0f 6f 01	 movdqu	 xmm0, XMMWORD PTR [ecx]
  00018	f3 0f 7f 00	 movdqu	 XMMWORD PTR [eax], xmm0
  0001c	f3 0f 7e 41 10	 movq	 xmm0, QWORD PTR [ecx+16]
  00021	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
$LN24@Uninit_mov:
; File a:\vs\vc\include\xmemory

; 443  : 	for (; _First != _Last; ++_Dest, ++_First)

  00026	83 c1 18	 add	 ecx, 24			; 00000018H
  00029	83 c0 18	 add	 eax, 24			; 00000018H
  0002c	3b ca		 cmp	 ecx, edx
  0002e	75 e0		 jne	 SHORT $LL6@Uninit_mov
$LN4@Uninit_mov:

; 444  : 		_Al.construct(_Dest, (_Valty&&)*_First);
; 445  : 	_CATCH_ALL
; 446  : 	for (; _Next != _Dest; ++_Next)
; 447  : 		_Al.destroy(_Next);
; 448  : 	_RERAISE;
; 449  : 	_CATCH_END
; 450  : 	return (_Dest);
; 451  : 	}

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
??$_Uninit_move@PAUSPDTVertex@@PAU1@V?$allocator@USPDTVertex@@@std@@U1@@std@@YAPAUSPDTVertex@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<SPDTVertex *,SPDTVertex *,std::allocator<SPDTVertex>,SPDTVertex>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??$_Val_type@PAUSPDTVertex@@@std@@YAPAUSPDTVertex@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUSPDTVertex@@@std@@YAPAUSPDTVertex@@PAU1@@Z PROC ; std::_Val_type<SPDTVertex *>, COMDAT

; 646  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 647  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUSPDTVertex@@@std@@YAPAUSPDTVertex@@PAU1@@Z ENDP ; std::_Val_type<SPDTVertex *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$destroy@USPDTVertex@@@?$allocator_traits@V?$allocator@USPDTVertex@@@std@@@std@@SAXAAV?$allocator@USPDTVertex@@@1@PAUSPDTVertex@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@USPDTVertex@@@?$allocator_traits@V?$allocator@USPDTVertex@@@std@@@std@@SAXAAV?$allocator@USPDTVertex@@@1@PAUSPDTVertex@@@Z PROC ; std::allocator_traits<std::allocator<SPDTVertex> >::destroy<SPDTVertex>, COMDAT

; 729  : 		{	// destroy object at _Ptr
; 730  : 		_Al.destroy(_Ptr);
; 731  : 		}

  00000	c3		 ret	 0
??$destroy@USPDTVertex@@@?$allocator_traits@V?$allocator@USPDTVertex@@@std@@@std@@SAXAAV?$allocator@USPDTVertex@@@1@PAUSPDTVertex@@@Z ENDP ; std::allocator_traits<std::allocator<SPDTVertex> >::destroy<SPDTVertex>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z PROC ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT
; _this$ = ecx

; 598  : 		void construct(_Objty *_Ptr, _Types&&... _Args)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 599  : 		{	// construct _Objty(_Types...) at _Ptr
; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN3@construct:

; 601  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ENDP ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??$_Rechecked@PAUSPDTVertex@@PAU1@@std@@YAAAPAUSPDTVertex@@AAPAU1@PAU1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAUSPDTVertex@@PAU1@@std@@YAAAPAUSPDTVertex@@AAPAU1@PAU1@@Z PROC ; std::_Rechecked<SPDTVertex *,SPDTVertex *>, COMDAT

; 288  : 	{	// reset checked from unchecked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 289  : 	_Dest = _Src;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 290  : 	return (_Dest);
; 291  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Rechecked@PAUSPDTVertex@@PAU1@@std@@YAAAPAUSPDTVertex@@AAPAU1@PAU1@@Z ENDP ; std::_Rechecked<SPDTVertex *,SPDTVertex *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAUSPDTVertex@@PAU1@U?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@@std@@YAPAUSPDTVertex@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAUSPDTVertex@@PAU1@U?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@@std@@YAPAUSPDTVertex@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@0@@Z PROC ; std::_Uninit_move<SPDTVertex *,SPDTVertex *,std::_Wrap_alloc<std::allocator<SPDTVertex> > >, COMDAT

; 482  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 483  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 484  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$1[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUSPDTVertex@@PAU1@V?$allocator@USPDTVertex@@@std@@U1@@std@@YAPAUSPDTVertex@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<SPDTVertex *,SPDTVertex *,std::allocator<SPDTVertex>,SPDTVertex>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 485  : 	}

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??$_Uninit_move@PAUSPDTVertex@@PAU1@U?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@@std@@YAPAUSPDTVertex@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@0@@Z ENDP ; std::_Uninit_move<SPDTVertex *,SPDTVertex *,std::_Wrap_alloc<std::allocator<SPDTVertex> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??$_Unchecked@PAUSPDTVertex@@@std@@YAPAUSPDTVertex@@PAU1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAUSPDTVertex@@@std@@YAPAUSPDTVertex@@PAU1@@Z PROC ; std::_Unchecked<SPDTVertex *>, COMDAT

; 280  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 281  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 282  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAUSPDTVertex@@@std@@YAPAUSPDTVertex@@PAU1@@Z ENDP ; std::_Unchecked<SPDTVertex *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$destroy@USPDTVertex@@@?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@QAEXPAUSPDTVertex@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@USPDTVertex@@@?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@QAEXPAUSPDTVertex@@@Z PROC ; std::_Wrap_alloc<std::allocator<SPDTVertex> >::destroy<SPDTVertex>, COMDAT
; _this$ = ecx

; 878  : 		{	// destroy object at _Ptr
; 879  : 		_Mytraits::destroy(*this, _Ptr);
; 880  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@USPDTVertex@@@?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@QAEXPAUSPDTVertex@@@Z ENDP ; std::_Wrap_alloc<std::allocator<SPDTVertex> >::destroy<SPDTVertex>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z PROC ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>, COMDAT
; _this$ = ecx

; 606  : 		{	// destroy object at _Ptr
; 607  : 		_Ptr->~_Uty();
; 608  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ENDP ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??$_Fill_n@PAPAUSState@CPythonGraphic@@IPAU12@@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@IABQAU12@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill_n@PAPAUSState@CPythonGraphic@@IPAU12@@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@IABQAU12@@Z PROC ; std::_Fill_n<CPythonGraphic::SState * *,unsigned int,CPythonGraphic::SState *>, COMDAT

; 2631 : 	{	// copy _Val _Count times through [_Dest, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2632 : 	for (; 0 < _Count; --_Count, ++_Dest)

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00009	85 d2		 test	 edx, edx
  0000b	74 0f		 je	 SHORT $LN1@Fill_n
  0000d	56		 push	 esi
  0000e	8b 75 10	 mov	 esi, DWORD PTR __Val$[ebp]
$LL3@Fill_n:

; 2633 : 		*_Dest = _Val;

  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	89 08		 mov	 DWORD PTR [eax], ecx
  00015	83 c0 04	 add	 eax, 4
  00018	4a		 dec	 edx
  00019	75 f6		 jne	 SHORT $LL3@Fill_n
  0001b	5e		 pop	 esi
$LN1@Fill_n:

; 2634 : 	return (_Dest);
; 2635 : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Fill_n@PAPAUSState@CPythonGraphic@@IPAU12@@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@IABQAU12@@Z ENDP ; std::_Fill_n<CPythonGraphic::SState * *,unsigned int,CPythonGraphic::SState *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory
;	COMDAT ??$_Uninit_copy@PAUSState@CPythonGraphic@@PAU12@@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@00AAU?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@PAUSState@CPythonGraphic@@PAU12@@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@00AAU?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<CPythonGraphic::SState *,CPythonGraphic::SState *>, COMDAT

; 401  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 402  : 	_DEBUG_RANGE(_First, _Last);
; 403  : 	_DEBUG_POINTER(_Dest);
; 404  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 405  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 407  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninit_copy@PAUSState@CPythonGraphic@@PAU12@@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@00AAU?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<CPythonGraphic::SState *,CPythonGraphic::SState *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$destroy@PAUSState@CPythonGraphic@@@?$allocator@USState@CPythonGraphic@@@std@@QAEXPAPAUSState@CPythonGraphic@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAUSState@CPythonGraphic@@@?$allocator@USState@CPythonGraphic@@@std@@QAEXPAPAUSState@CPythonGraphic@@@Z PROC ; std::allocator<CPythonGraphic::SState>::destroy<CPythonGraphic::SState *>, COMDAT
; _this$ = ecx

; 606  : 		{	// destroy object at _Ptr
; 607  : 		_Ptr->~_Uty();
; 608  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAUSState@CPythonGraphic@@@?$allocator@USState@CPythonGraphic@@@std@@QAEXPAPAUSState@CPythonGraphic@@@Z ENDP ; std::allocator<CPythonGraphic::SState>::destroy<CPythonGraphic::SState *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$destroy@USState@CPythonGraphic@@@?$allocator@USState@CPythonGraphic@@@std@@QAEXPAUSState@CPythonGraphic@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@USState@CPythonGraphic@@@?$allocator@USState@CPythonGraphic@@@std@@QAEXPAUSState@CPythonGraphic@@@Z PROC ; std::allocator<CPythonGraphic::SState>::destroy<CPythonGraphic::SState>, COMDAT
; _this$ = ecx

; 606  : 		{	// destroy object at _Ptr
; 607  : 		_Ptr->~_Uty();
; 608  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@USState@CPythonGraphic@@@?$allocator@USState@CPythonGraphic@@@std@@QAEXPAUSState@CPythonGraphic@@@Z ENDP ; std::allocator<CPythonGraphic::SState>::destroy<CPythonGraphic::SState>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@USPDTVertex@@AAU1@@?$allocator@USPDTVertex@@@std@@QAEXPAUSPDTVertex@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@USPDTVertex@@AAU1@@?$allocator@USPDTVertex@@@std@@QAEXPAUSPDTVertex@@AAU2@@Z PROC ; std::allocator<SPDTVertex>::construct<SPDTVertex,SPDTVertex &>, COMDAT
; _this$ = ecx

; 598  : 		void construct(_Objty *_Ptr, _Types&&... _Args)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 599  : 		{	// construct _Objty(_Types...) at _Ptr
; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 15		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [eax]
  00011	f3 0f 7f 01	 movdqu	 XMMWORD PTR [ecx], xmm0
  00015	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  0001a	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
$LN3@construct:

; 601  : 		}

  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
??$construct@USPDTVertex@@AAU1@@?$allocator@USPDTVertex@@@std@@QAEXPAUSPDTVertex@@AAU2@@Z ENDP ; std::allocator<SPDTVertex>::construct<SPDTVertex,SPDTVertex &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z PROC ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT

; 720  : 		static void construct(_Alloc& _Al, _Objty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN7@construct
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN7@construct:

; 721  : 			_Types&&... _Args)
; 722  : 		{	// construct _Objty(_Types...) at _Ptr
; 723  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 724  : 		}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z ENDP ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\type_traits
;	COMDAT ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z PROC ; std::forward<std::_Container_proxy>, COMDAT

; 1504 : 	{	// forward an lvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ENDP ; std::forward<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUSPDTVertex@@PAU1@U?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@@std@@YAPAUSPDTVertex@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUSPDTVertex@@PAU1@U?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@@std@@YAPAUSPDTVertex@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@0@@Z PROC ; std::_Uninitialized_move<SPDTVertex *,SPDTVertex *,std::_Wrap_alloc<std::allocator<SPDTVertex> > >, COMDAT

; 492  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 484  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	6a 00		 push	 0
  00008	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000b	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000e	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUSPDTVertex@@PAU1@V?$allocator@USPDTVertex@@@std@@U1@@std@@YAPAUSPDTVertex@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<SPDTVertex *,SPDTVertex *,std::allocator<SPDTVertex>,SPDTVertex>
  00019	83 c4 18	 add	 esp, 24			; 00000018H

; 493  : 	return (_Rechecked(_Dest,
; 494  : 		_Uninit_move(_Unchecked(_First), _Unchecked(_Last),
; 495  : 			_Unchecked(_Dest), _Al)));
; 496  : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Uninitialized_move@PAUSPDTVertex@@PAU1@U?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@@std@@YAPAUSPDTVertex@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<SPDTVertex *,SPDTVertex *,std::_Wrap_alloc<std::allocator<SPDTVertex> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@@std@@YAXPAUSPDTVertex@@0AAU?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@@std@@YAXPAUSPDTVertex@@0AAU?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<SPDTVertex> > >, COMDAT

; 81   : 	for (; _First != _Last; ++_First)
; 82   : 		_Al.destroy(_First);
; 83   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@@std@@YAXPAUSPDTVertex@@0AAU?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<SPDTVertex> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??$_Ptr_cat@USPDTVertex@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUSPDTVertex@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@USPDTVertex@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUSPDTVertex@@0@Z PROC ; std::_Ptr_cat<SPDTVertex,SPDTVertex>, COMDAT

; 444  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 445  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 446  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 447  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@USPDTVertex@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUSPDTVertex@@0@Z ENDP ; std::_Ptr_cat<SPDTVertex,SPDTVertex>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT

; 729  : 		{	// destroy object at _Ptr
; 730  : 		_Al.destroy(_Ptr);
; 731  : 		}

  00000	c3		 ret	 0
??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@std@@@std@@YAXPAPAUSState@CPythonGraphic@@0AAU?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@std@@@std@@YAXPAPAUSState@CPythonGraphic@@0AAU?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPythonGraphic::SState *> > >, COMDAT

; 90   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@std@@@std@@YAXPAPAUSState@CPythonGraphic@@0AAU?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPythonGraphic::SState *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\xmemory
;	COMDAT ??$_Uninit_def_fill_n@PAUSState@CPythonGraphic@@IPAU12@@std@@YAXPAPAUSState@CPythonGraphic@@IAAU?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_def_fill_n@PAUSState@CPythonGraphic@@IPAU12@@std@@YAXPAPAUSState@CPythonGraphic@@IAAU?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_def_fill_n<CPythonGraphic::SState *,unsigned int,CPythonGraphic::SState *>, COMDAT

; 681  : 	{	// copy _Count * _Valty() to raw _First, using _Al, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File a:\vs\vc\include\xutility

; 2632 : 	for (; 0 < _Count; --_Count, ++_Dest)

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 09		 je	 SHORT $LN5@Uninit_def
; File a:\vs\vc\include\xmemory

; 682  : 	_Fill_n(_First, _Count, (_Valty)0);

  0000a	57		 push	 edi
  0000b	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0000e	33 c0		 xor	 eax, eax
  00010	f3 ab		 rep stosd
  00012	5f		 pop	 edi
$LN5@Uninit_def:

; 683  : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$_Uninit_def_fill_n@PAUSState@CPythonGraphic@@IPAU12@@std@@YAXPAPAUSState@CPythonGraphic@@IAAU?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_def_fill_n<CPythonGraphic::SState *,unsigned int,CPythonGraphic::SState *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??$_Ptr_cat@PAUSState@CPythonGraphic@@PAU12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUSState@CPythonGraphic@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUSState@CPythonGraphic@@PAU12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUSState@CPythonGraphic@@0@Z PROC ; std::_Ptr_cat<CPythonGraphic::SState *,CPythonGraphic::SState *>, COMDAT

; 444  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 445  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 446  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 447  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@PAUSState@CPythonGraphic@@PAU12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUSState@CPythonGraphic@@0@Z ENDP ; std::_Ptr_cat<CPythonGraphic::SState *,CPythonGraphic::SState *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??$_Val_type@PAPAUSState@CPythonGraphic@@@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAPAUSState@CPythonGraphic@@@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@@Z PROC ; std::_Val_type<CPythonGraphic::SState * *>, COMDAT

; 646  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 647  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAPAUSState@CPythonGraphic@@@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@@Z ENDP ; std::_Val_type<CPythonGraphic::SState * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??$_Rechecked@PAPAUSState@CPythonGraphic@@PAPAU12@@std@@YAAAPAPAUSState@CPythonGraphic@@AAPAPAU12@PAPAU12@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAPAUSState@CPythonGraphic@@PAPAU12@@std@@YAAAPAPAUSState@CPythonGraphic@@AAPAPAU12@PAPAU12@@Z PROC ; std::_Rechecked<CPythonGraphic::SState * *,CPythonGraphic::SState * *>, COMDAT

; 288  : 	{	// reset checked from unchecked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 289  : 	_Dest = _Src;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 290  : 	return (_Dest);
; 291  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Rechecked@PAPAUSState@CPythonGraphic@@PAPAU12@@std@@YAAAPAPAUSState@CPythonGraphic@@AAPAPAU12@PAPAU12@@Z ENDP ; std::_Rechecked<CPythonGraphic::SState * *,CPythonGraphic::SState * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory
;	COMDAT ??$_Uninit_copy@PAPAUSState@CPythonGraphic@@PAPAU12@U?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@std@@@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@00AAU?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_copy@PAPAUSState@CPythonGraphic@@PAPAU12@U?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@std@@@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@00AAU?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@0@@Z PROC ; std::_Uninit_copy<CPythonGraphic::SState * *,CPythonGraphic::SState * *,std::_Wrap_alloc<std::allocator<CPythonGraphic::SState *> > >, COMDAT

; 414  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 405  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 415  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 416  : 		_Ptr_cat(_First, _Dest)));
; 417  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninit_copy@PAPAUSState@CPythonGraphic@@PAPAU12@U?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@std@@@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@00AAU?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@0@@Z ENDP ; std::_Uninit_copy<CPythonGraphic::SState * *,CPythonGraphic::SState * *,std::_Wrap_alloc<std::allocator<CPythonGraphic::SState *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??$_Unchecked@PAPAUSState@CPythonGraphic@@@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAPAUSState@CPythonGraphic@@@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@@Z PROC ; std::_Unchecked<CPythonGraphic::SState * *>, COMDAT

; 280  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 281  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 282  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAPAUSState@CPythonGraphic@@@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@@Z ENDP ; std::_Unchecked<CPythonGraphic::SState * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$destroy@PAUSState@CPythonGraphic@@@?$allocator_traits@V?$allocator@USState@CPythonGraphic@@@std@@@std@@SAXAAV?$allocator@USState@CPythonGraphic@@@1@PAPAUSState@CPythonGraphic@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAUSState@CPythonGraphic@@@?$allocator_traits@V?$allocator@USState@CPythonGraphic@@@std@@@std@@SAXAAV?$allocator@USState@CPythonGraphic@@@1@PAPAUSState@CPythonGraphic@@@Z PROC ; std::allocator_traits<std::allocator<CPythonGraphic::SState> >::destroy<CPythonGraphic::SState *>, COMDAT

; 729  : 		{	// destroy object at _Ptr
; 730  : 		_Al.destroy(_Ptr);
; 731  : 		}

  00000	c3		 ret	 0
??$destroy@PAUSState@CPythonGraphic@@@?$allocator_traits@V?$allocator@USState@CPythonGraphic@@@std@@@std@@SAXAAV?$allocator@USState@CPythonGraphic@@@1@PAPAUSState@CPythonGraphic@@@Z ENDP ; std::allocator_traits<std::allocator<CPythonGraphic::SState> >::destroy<CPythonGraphic::SState *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$destroy@USState@CPythonGraphic@@@?$allocator_traits@V?$allocator@USState@CPythonGraphic@@@std@@@std@@SAXAAV?$allocator@USState@CPythonGraphic@@@1@PAUSState@CPythonGraphic@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@USState@CPythonGraphic@@@?$allocator_traits@V?$allocator@USState@CPythonGraphic@@@std@@@std@@SAXAAV?$allocator@USState@CPythonGraphic@@@1@PAUSState@CPythonGraphic@@@Z PROC ; std::allocator_traits<std::allocator<CPythonGraphic::SState> >::destroy<CPythonGraphic::SState>, COMDAT

; 729  : 		{	// destroy object at _Ptr
; 730  : 		_Al.destroy(_Ptr);
; 731  : 		}

  00000	c3		 ret	 0
??$destroy@USState@CPythonGraphic@@@?$allocator_traits@V?$allocator@USState@CPythonGraphic@@@std@@@std@@SAXAAV?$allocator@USState@CPythonGraphic@@@1@PAUSState@CPythonGraphic@@@Z ENDP ; std::allocator_traits<std::allocator<CPythonGraphic::SState> >::destroy<CPythonGraphic::SState>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@USState@CPythonGraphic@@ABU12@@?$allocator_traits@V?$allocator@USState@CPythonGraphic@@@std@@@std@@SAXAAV?$allocator@USState@CPythonGraphic@@@1@PAUSState@CPythonGraphic@@ABU34@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@USState@CPythonGraphic@@ABU12@@?$allocator_traits@V?$allocator@USState@CPythonGraphic@@@std@@@std@@SAXAAV?$allocator@USState@CPythonGraphic@@@1@PAUSState@CPythonGraphic@@ABU34@@Z PROC ; std::allocator_traits<std::allocator<CPythonGraphic::SState> >::construct<CPythonGraphic::SState,CPythonGraphic::SState const &>, COMDAT

; 720  : 		static void construct(_Alloc& _Al, _Objty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 593  : 		::new ((void *)_Ptr) _Ty(_Val);

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN7@construct
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR _<_Args_0>$[ebp]
  0000f	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN7@construct:
  00017	5f		 pop	 edi

; 721  : 			_Types&&... _Args)
; 722  : 		{	// construct _Objty(_Types...) at _Ptr
; 723  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 724  : 		}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$construct@USState@CPythonGraphic@@ABU12@@?$allocator_traits@V?$allocator@USState@CPythonGraphic@@@std@@@std@@SAXAAV?$allocator@USState@CPythonGraphic@@@1@PAUSState@CPythonGraphic@@ABU34@@Z ENDP ; std::allocator_traits<std::allocator<CPythonGraphic::SState> >::construct<CPythonGraphic::SState,CPythonGraphic::SState const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\type_traits
;	COMDAT ??$forward@ABUSState@CPythonGraphic@@@std@@YAABUSState@CPythonGraphic@@ABU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUSState@CPythonGraphic@@@std@@YAABUSState@CPythonGraphic@@ABU12@@Z PROC ; std::forward<CPythonGraphic::SState const &>, COMDAT

; 1504 : 	{	// forward an lvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUSState@CPythonGraphic@@@std@@YAABUSState@CPythonGraphic@@ABU12@@Z ENDP ; std::forward<CPythonGraphic::SState const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@USPDTVertex@@ABU1@@?$allocator_traits@V?$allocator@USPDTVertex@@@std@@@std@@SAXAAV?$allocator@USPDTVertex@@@1@PAUSPDTVertex@@ABU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@USPDTVertex@@ABU1@@?$allocator_traits@V?$allocator@USPDTVertex@@@std@@@std@@SAXAAV?$allocator@USPDTVertex@@@1@PAUSPDTVertex@@ABU3@@Z PROC ; std::allocator_traits<std::allocator<SPDTVertex> >::construct<SPDTVertex,SPDTVertex const &>, COMDAT

; 720  : 		static void construct(_Alloc& _Al, _Objty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 593  : 		::new ((void *)_Ptr) _Ty(_Val);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 15		 je	 SHORT $LN7@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [eax]
  00011	f3 0f 7f 01	 movdqu	 XMMWORD PTR [ecx], xmm0
  00015	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  0001a	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
$LN7@construct:

; 721  : 			_Types&&... _Args)
; 722  : 		{	// construct _Objty(_Types...) at _Ptr
; 723  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 724  : 		}

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??$construct@USPDTVertex@@ABU1@@?$allocator_traits@V?$allocator@USPDTVertex@@@std@@@std@@SAXAAV?$allocator@USPDTVertex@@@1@PAUSPDTVertex@@ABU3@@Z ENDP ; std::allocator_traits<std::allocator<SPDTVertex> >::construct<SPDTVertex,SPDTVertex const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\type_traits
;	COMDAT ??$forward@ABUSPDTVertex@@@std@@YAABUSPDTVertex@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUSPDTVertex@@@std@@YAABUSPDTVertex@@ABU1@@Z PROC ; std::forward<SPDTVertex const &>, COMDAT

; 1504 : 	{	// forward an lvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUSPDTVertex@@@std@@YAABUSPDTVertex@@ABU1@@Z ENDP ; std::forward<SPDTVertex const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@USPDTVertex@@AAU1@@?$allocator_traits@V?$allocator@USPDTVertex@@@std@@@std@@SAXAAV?$allocator@USPDTVertex@@@1@PAUSPDTVertex@@AAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@USPDTVertex@@AAU1@@?$allocator_traits@V?$allocator@USPDTVertex@@@std@@@std@@SAXAAV?$allocator@USPDTVertex@@@1@PAUSPDTVertex@@AAU3@@Z PROC ; std::allocator_traits<std::allocator<SPDTVertex> >::construct<SPDTVertex,SPDTVertex &>, COMDAT

; 720  : 		static void construct(_Alloc& _Al, _Objty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 15		 je	 SHORT $LN7@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [eax]
  00011	f3 0f 7f 01	 movdqu	 XMMWORD PTR [ecx], xmm0
  00015	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  0001a	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
$LN7@construct:

; 721  : 			_Types&&... _Args)
; 722  : 		{	// construct _Objty(_Types...) at _Ptr
; 723  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 724  : 		}

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??$construct@USPDTVertex@@AAU1@@?$allocator_traits@V?$allocator@USPDTVertex@@@std@@@std@@SAXAAV?$allocator@USPDTVertex@@@1@PAUSPDTVertex@@AAU3@@Z ENDP ; std::allocator_traits<std::allocator<SPDTVertex> >::construct<SPDTVertex,SPDTVertex &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\type_traits
;	COMDAT ??$forward@AAUSPDTVertex@@@std@@YAAAUSPDTVertex@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUSPDTVertex@@@std@@YAAAUSPDTVertex@@AAU1@@Z PROC ; std::forward<SPDTVertex &>, COMDAT

; 1504 : 	{	// forward an lvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUSPDTVertex@@@std@@YAAAUSPDTVertex@@AAU1@@Z ENDP ; std::forward<SPDTVertex &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z PROC ; std::_Allocate<std::_Container_proxy>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 23   : 	void *_Ptr = 0;
; 24   : 
; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 1e		 je	 SHORT $LN2@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  00011	77 12		 ja	 SHORT $LN1@Allocate
  00013	c1 e0 03	 shl	 eax, 3
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	75 05		 jne	 SHORT $LN2@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00025	e9 00 00 00 00	 jmp	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

  0002a	8b c1		 mov	 eax, ecx

; 32   : 	}

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ENDP ; std::_Allocate<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$_Allocate@USPDTVertex@@@std@@YAPAUSPDTVertex@@IPAU1@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@USPDTVertex@@@std@@YAPAUSPDTVertex@@IPAU1@@Z PROC ; std::_Allocate<SPDTVertex>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 23   : 	void *_Ptr = 0;
; 24   : 
; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 21		 je	 SHORT $LN2@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00011	77 15		 ja	 SHORT $LN1@Allocate
  00013	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00016	c1 e0 03	 shl	 eax, 3
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001f	8b c8		 mov	 ecx, eax
  00021	83 c4 04	 add	 esp, 4
  00024	85 c9		 test	 ecx, ecx
  00026	75 05		 jne	 SHORT $LN2@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00028	e9 00 00 00 00	 jmp	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

  0002d	8b c1		 mov	 eax, ecx

; 32   : 	}

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??$_Allocate@USPDTVertex@@@std@@YAPAUSPDTVertex@@IPAU1@@Z ENDP ; std::_Allocate<SPDTVertex>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$_Allocate@PAUSState@CPythonGraphic@@@std@@YAPAPAUSState@CPythonGraphic@@IPAPAU12@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAUSState@CPythonGraphic@@@std@@YAPAPAUSState@CPythonGraphic@@IPAPAU12@@Z PROC ; std::_Allocate<CPythonGraphic::SState *>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 23   : 	void *_Ptr = 0;
; 24   : 
; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 1e		 je	 SHORT $LN2@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00011	77 12		 ja	 SHORT $LN1@Allocate
  00013	c1 e0 02	 shl	 eax, 2
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	75 05		 jne	 SHORT $LN2@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00025	e9 00 00 00 00	 jmp	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

  0002a	8b c1		 mov	 eax, ecx

; 32   : 	}

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??$_Allocate@PAUSState@CPythonGraphic@@@std@@YAPAPAUSState@CPythonGraphic@@IPAPAU12@@Z ENDP ; std::_Allocate<CPythonGraphic::SState *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT
; _this$ = ecx

; 868  : 		void construct(_Ty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN11@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN11@construct:

; 869  : 			_Types&&... _Args)
; 870  : 		{	// construct _Ty(_Types...) at _Ptr
; 871  : 		_Mytraits::construct(*this, _Ptr,
; 872  : 			_STD forward<_Types>(_Args)...);
; 873  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$_Allocate@USState@CPythonGraphic@@@std@@YAPAUSState@CPythonGraphic@@IPAU12@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@USState@CPythonGraphic@@@std@@YAPAUSState@CPythonGraphic@@IPAU12@@Z PROC ; std::_Allocate<CPythonGraphic::SState>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 23   : 	void *_Ptr = 0;
; 24   : 
; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 1e		 je	 SHORT $LN2@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 01	 cmp	 eax, 33554431		; 01ffffffH
  00011	77 12		 ja	 SHORT $LN1@Allocate
  00013	c1 e0 07	 shl	 eax, 7
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	75 05		 jne	 SHORT $LN2@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00025	e9 00 00 00 00	 jmp	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

  0002a	8b c1		 mov	 eax, ecx

; 32   : 	}

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??$_Allocate@USState@CPythonGraphic@@@std@@YAPAUSState@CPythonGraphic@@IPAU12@@Z ENDP ; std::_Allocate<CPythonGraphic::SState>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\vector
;	COMDAT ??$_Umove@PAUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IAEPAUSPDTVertex@@PAU2@00@Z
_TEXT	SEGMENT
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IAEPAUSPDTVertex@@PAU2@00@Z PROC ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Umove<SPDTVertex *>, COMDAT
; _this$ = ecx

; 1644 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File a:\vs\vc\include\xmemory

; 484  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00007	8d 45 ff	 lea	 eax, DWORD PTR __Alval$[ebp]
  0000a	6a 00		 push	 0
  0000c	50		 push	 eax
  0000d	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  00010	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00013	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00016	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUSPDTVertex@@PAU1@V?$allocator@USPDTVertex@@@std@@U1@@std@@YAPAUSPDTVertex@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<SPDTVertex *,SPDTVertex *,std::allocator<SPDTVertex>,SPDTVertex>
  0001b	83 c4 18	 add	 esp, 24			; 00000018H
; File a:\vs\vc\include\vector

; 1649 : 		}

  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IAEPAUSPDTVertex@@PAU2@00@Z ENDP ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Umove<SPDTVertex *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@@std@@YAXPAUSPDTVertex@@0AAU?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@@std@@YAXPAUSPDTVertex@@0AAU?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<SPDTVertex> > >, COMDAT

; 96   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 97   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@@std@@YAXPAUSPDTVertex@@0AAU?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<SPDTVertex> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT
; _this$ = ecx

; 878  : 		{	// destroy object at _Ptr
; 879  : 		_Mytraits::destroy(*this, _Ptr);
; 880  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate, COMDAT
; _this$ = ecx

; 857  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 858  : 		_Mybase::deallocate(_Ptr, _Count);
; 859  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate, COMDAT
; _this$ = ecx

; 846  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 19		 je	 SHORT $LN6@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  00011	77 18		 ja	 SHORT $LN14@allocate
  00013	c1 e0 03	 shl	 eax, 3
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	74 06		 je	 SHORT $LN14@allocate
$LN6@allocate:

; 847  : 		return (_Mybase::allocate(_Count));

  00025	8b c1		 mov	 eax, ecx

; 848  : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN14@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002b	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN16@allocate:
$LN13@allocate:
  00030	cc		 int	 3
?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 802  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 577  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 19		 je	 SHORT $LN4@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  00011	77 18		 ja	 SHORT $LN11@allocate
  00013	c1 e0 03	 shl	 eax, 3
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	74 06		 je	 SHORT $LN11@allocate
$LN4@allocate:

; 578  : 		return (_Allocate(_Count, (pointer)0));

  00025	8b c1		 mov	 eax, ecx

; 579  : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN11@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002b	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN13@allocate:
$LN10@allocate:
  00030	cc		 int	 3
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::deallocate, COMDAT
; _this$ = ecx

; 572  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 574  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ PROC	; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>, COMDAT
; _this$ = ecx

; 553  : 		{	// construct default allocator (do nothing)
; 554  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ENDP	; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@std@@@std@@YAXPAPAUSState@CPythonGraphic@@0AAU?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@std@@@std@@YAXPAPAUSState@CPythonGraphic@@0AAU?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPythonGraphic::SState *> > >, COMDAT

; 96   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 97   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@std@@@std@@YAXPAPAUSState@CPythonGraphic@@0AAU?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPythonGraphic::SState *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\xmemory
;	COMDAT ??$_Uninitialized_default_fill_n@PAPAUSState@CPythonGraphic@@IU?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@std@@@std@@YAXPAPAUSState@CPythonGraphic@@IAAU?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Uninitialized_default_fill_n@PAPAUSState@CPythonGraphic@@IU?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@std@@@std@@YAXPAPAUSState@CPythonGraphic@@IAAU?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@0@@Z PROC ; std::_Uninitialized_default_fill_n<CPythonGraphic::SState * *,unsigned int,std::_Wrap_alloc<std::allocator<CPythonGraphic::SState *> > >, COMDAT

; 690  : 	{	// copy _Count * _Val_type(_First)() to raw _First, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File a:\vs\vc\include\xutility

; 2632 : 	for (; 0 < _Count; --_Count, ++_Dest)

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 09		 je	 SHORT $LN11@Uninitiali
  0000a	57		 push	 edi
; File a:\vs\vc\include\xmemory

; 682  : 	_Fill_n(_First, _Count, (_Valty)0);

  0000b	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0000e	33 c0		 xor	 eax, eax
  00010	f3 ab		 rep stosd
  00012	5f		 pop	 edi
$LN11@Uninitiali:

; 691  : 	_Uninit_def_fill_n(_First, _Count, _Al,
; 692  : 		_Val_type(_First), _Ptr_cat(_First, _First));
; 693  : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$_Uninitialized_default_fill_n@PAPAUSState@CPythonGraphic@@IU?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@std@@@std@@YAXPAPAUSState@CPythonGraphic@@IAAU?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@0@@Z ENDP ; std::_Uninitialized_default_fill_n<CPythonGraphic::SState * *,unsigned int,std::_Wrap_alloc<std::allocator<CPythonGraphic::SState *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PAPAUSState@CPythonGraphic@@PAPAU12@U?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@std@@@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@00AAU?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAPAUSState@CPythonGraphic@@PAPAU12@U?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@std@@@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@00AAU?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@0@@Z PROC ; std::_Uninitialized_copy<CPythonGraphic::SState * *,CPythonGraphic::SState * *,std::_Wrap_alloc<std::allocator<CPythonGraphic::SState *> > >, COMDAT

; 424  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 405  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 425  : 	return (_Rechecked(_Dest,
; 426  : 		_Uninit_copy(_Unchecked(_First), _Unchecked(_Last),
; 427  : 			_Unchecked(_Dest), _Al)));
; 428  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninitialized_copy@PAPAUSState@CPythonGraphic@@PAPAU12@U?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@std@@@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@00AAU?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@0@@Z ENDP ; std::_Uninitialized_copy<CPythonGraphic::SState * *,CPythonGraphic::SState * *,std::_Wrap_alloc<std::allocator<CPythonGraphic::SState *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$destroy@PAUSState@CPythonGraphic@@@?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEXPAPAUSState@CPythonGraphic@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAUSState@CPythonGraphic@@@?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEXPAPAUSState@CPythonGraphic@@@Z PROC ; std::_Wrap_alloc<std::allocator<CPythonGraphic::SState> >::destroy<CPythonGraphic::SState *>, COMDAT
; _this$ = ecx

; 878  : 		{	// destroy object at _Ptr
; 879  : 		_Mytraits::destroy(*this, _Ptr);
; 880  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAUSState@CPythonGraphic@@@?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEXPAPAUSState@CPythonGraphic@@@Z ENDP ; std::_Wrap_alloc<std::allocator<CPythonGraphic::SState> >::destroy<CPythonGraphic::SState *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$?0USState@CPythonGraphic@@@?$allocator@PAUSState@CPythonGraphic@@@std@@QAE@ABV?$allocator@USState@CPythonGraphic@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0USState@CPythonGraphic@@@?$allocator@PAUSState@CPythonGraphic@@@std@@QAE@ABV?$allocator@USState@CPythonGraphic@@@1@@Z PROC ; std::allocator<CPythonGraphic::SState *>::allocator<CPythonGraphic::SState *><CPythonGraphic::SState>, COMDAT
; _this$ = ecx

; 562  : 		{	// construct from a related allocator (do nothing)
; 563  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0USState@CPythonGraphic@@@?$allocator@PAUSState@CPythonGraphic@@@std@@QAE@ABV?$allocator@USState@CPythonGraphic@@@1@@Z ENDP ; std::allocator<CPythonGraphic::SState *>::allocator<CPythonGraphic::SState *><CPythonGraphic::SState>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0U?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<CPythonGraphic::SState *> >::_Wrap_alloc<std::allocator<CPythonGraphic::SState *> ><std::_Wrap_alloc<std::allocator<CPythonGraphic::SState> > >, COMDAT
; _this$ = ecx

; 818  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0U?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<CPythonGraphic::SState *> >::_Wrap_alloc<std::allocator<CPythonGraphic::SState *> ><std::_Wrap_alloc<std::allocator<CPythonGraphic::SState> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$destroy@USState@CPythonGraphic@@@?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEXPAUSState@CPythonGraphic@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@USState@CPythonGraphic@@@?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEXPAUSState@CPythonGraphic@@@Z PROC ; std::_Wrap_alloc<std::allocator<CPythonGraphic::SState> >::destroy<CPythonGraphic::SState>, COMDAT
; _this$ = ecx

; 878  : 		{	// destroy object at _Ptr
; 879  : 		_Mytraits::destroy(*this, _Ptr);
; 880  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@USState@CPythonGraphic@@@?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEXPAUSState@CPythonGraphic@@@Z ENDP ; std::_Wrap_alloc<std::allocator<CPythonGraphic::SState> >::destroy<CPythonGraphic::SState>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@USState@CPythonGraphic@@ABU12@@?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEXPAUSState@CPythonGraphic@@ABU23@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@USState@CPythonGraphic@@ABU12@@?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEXPAUSState@CPythonGraphic@@ABU23@@Z PROC ; std::_Wrap_alloc<std::allocator<CPythonGraphic::SState> >::construct<CPythonGraphic::SState,CPythonGraphic::SState const &>, COMDAT
; _this$ = ecx

; 868  : 		void construct(_Ty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 593  : 		::new ((void *)_Ptr) _Ty(_Val);

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN11@construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR _<_Args_0>$[ebp]
  0000f	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN11@construct:
  00017	5f		 pop	 edi

; 869  : 			_Types&&... _Args)
; 870  : 		{	// construct _Ty(_Types...) at _Ptr
; 871  : 		_Mytraits::construct(*this, _Ptr,
; 872  : 			_STD forward<_Types>(_Args)...);
; 873  : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
??$construct@USState@CPythonGraphic@@ABU12@@?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEXPAUSState@CPythonGraphic@@ABU23@@Z ENDP ; std::_Wrap_alloc<std::allocator<CPythonGraphic::SState> >::construct<CPythonGraphic::SState,CPythonGraphic::SState const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 125  : 		if (_Myproxy == _Right._Myproxy)

  00003	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]

; 119  : 		{	// copy an iterator

  00006	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0000c	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 125  : 		if (_Myproxy == _Right._Myproxy)

  00013	8b 02		 mov	 eax, DWORD PTR [edx]
  00015	85 c0		 test	 eax, eax
  00017	74 0a		 je	 SHORT $LN13@Deque_iter

; 126  : 			;
; 127  : 		else if (_Right._Myproxy != 0)
; 128  : 			_Adopt(_Right._Myproxy->_Mycont);

  00019	8b 00		 mov	 eax, DWORD PTR [eax]

; 129  : 		else
; 130  : 			{	// becoming invalid, disown current parent
; 131  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 132  : 			_Lockit _Lock(_LOCK_DEBUG);
; 133  : 			_Orphan_me();
; 134  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 135  : 			}
; 136  : 		return (*this);
; 137  : 		}
; 138  : 
; 139  : 	~_Iterator_base12() _NOEXCEPT
; 140  : 		{	// destroy the iterator
; 141  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 142  : 		_Lockit _Lock(_LOCK_DEBUG);
; 143  : 		_Orphan_me();
; 144  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 145  : 		}
; 146  : 
; 147  : 	void _Adopt(const _Container_base12 *_Parent)
; 148  : 		{	// adopt this iterator by parent
; 149  : 		if (_Parent == 0)

  0001b	85 c0		 test	 eax, eax
  0001d	74 04		 je	 SHORT $LN13@Deque_iter

; 150  : 			{	// no future parent, just disown current parent
; 151  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 152  : 			_Lockit _Lock(_LOCK_DEBUG);
; 153  : 			_Orphan_me();
; 154  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 155  : 			}
; 156  : 		else
; 157  : 			{	// have a parent, do adoption
; 158  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 159  : 
; 160  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 161  : 			if (_Myproxy != _Parent_proxy)
; 162  : 				{	// change parentage
; 163  : 				_Lockit _Lock(_LOCK_DEBUG);
; 164  : 				_Orphan_me();
; 165  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 166  : 				_Parent_proxy->_Myfirstiter = this;
; 167  : 				_Myproxy = _Parent_proxy;
; 168  : 				}
; 169  : 
; 170  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 171  : 			_Myproxy = _Parent_proxy;

  0001f	8b 00		 mov	 eax, DWORD PTR [eax]
  00021	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@Deque_iter:
  00023	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00026	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00029	8b c1		 mov	 eax, ecx
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::~_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::~_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
;	COMDAT ??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::operator-, COMDAT
; _this$ = ecx

; 655  : 		{	// return this - integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File a:\vs\vc\include\xutility

; 125  : 		if (_Myproxy == _Right._Myproxy)

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	56		 push	 esi

; 119  : 		{	// copy an iterator

  00006	33 f6		 xor	 esi, esi

; 125  : 		if (_Myproxy == _Right._Myproxy)

  00008	85 c0		 test	 eax, eax
  0000a	74 08		 je	 SHORT $LN15@operator

; 126  : 			;
; 127  : 		else if (_Right._Myproxy != 0)
; 128  : 			_Adopt(_Right._Myproxy->_Mycont);

  0000c	8b 00		 mov	 eax, DWORD PTR [eax]

; 129  : 		else
; 130  : 			{	// becoming invalid, disown current parent
; 131  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 132  : 			_Lockit _Lock(_LOCK_DEBUG);
; 133  : 			_Orphan_me();
; 134  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 135  : 			}
; 136  : 		return (*this);
; 137  : 		}
; 138  : 
; 139  : 	~_Iterator_base12() _NOEXCEPT
; 140  : 		{	// destroy the iterator
; 141  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 142  : 		_Lockit _Lock(_LOCK_DEBUG);
; 143  : 		_Orphan_me();
; 144  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 145  : 		}
; 146  : 
; 147  : 	void _Adopt(const _Container_base12 *_Parent)
; 148  : 		{	// adopt this iterator by parent
; 149  : 		if (_Parent == 0)

  0000e	85 c0		 test	 eax, eax
  00010	74 02		 je	 SHORT $LN15@operator

; 150  : 			{	// no future parent, just disown current parent
; 151  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 152  : 			_Lockit _Lock(_LOCK_DEBUG);
; 153  : 			_Orphan_me();
; 154  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 155  : 			}
; 156  : 		else
; 157  : 			{	// have a parent, do adoption
; 158  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 159  : 
; 160  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 161  : 			if (_Myproxy != _Parent_proxy)
; 162  : 				{	// change parentage
; 163  : 				_Lockit _Lock(_LOCK_DEBUG);
; 164  : 				_Orphan_me();
; 165  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 166  : 				_Parent_proxy->_Myfirstiter = this;
; 167  : 				_Myproxy = _Parent_proxy;
; 168  : 				}
; 169  : 
; 170  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 171  : 			_Myproxy = _Parent_proxy;

  00012	8b 30		 mov	 esi, DWORD PTR [eax]
$LN15@operator:

; 119  : 		{	// copy an iterator

  00014	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File a:\vs\vc\include\deque

; 639  : 		this->_Myoff += _Off;

  00017	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001a	2b 55 0c	 sub	 edx, DWORD PTR __Off$[ebp]
; File a:\vs\vc\include\xutility

; 119  : 		{	// copy an iterator

  0001d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00023	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  0002a	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 125  : 		if (_Myproxy == _Right._Myproxy)

  0002d	85 f6		 test	 esi, esi
  0002f	74 0a		 je	 SHORT $LN35@operator

; 126  : 			;
; 127  : 		else if (_Right._Myproxy != 0)
; 128  : 			_Adopt(_Right._Myproxy->_Mycont);

  00031	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 129  : 		else
; 130  : 			{	// becoming invalid, disown current parent
; 131  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 132  : 			_Lockit _Lock(_LOCK_DEBUG);
; 133  : 			_Orphan_me();
; 134  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 135  : 			}
; 136  : 		return (*this);
; 137  : 		}
; 138  : 
; 139  : 	~_Iterator_base12() _NOEXCEPT
; 140  : 		{	// destroy the iterator
; 141  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 142  : 		_Lockit _Lock(_LOCK_DEBUG);
; 143  : 		_Orphan_me();
; 144  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 145  : 		}
; 146  : 
; 147  : 	void _Adopt(const _Container_base12 *_Parent)
; 148  : 		{	// adopt this iterator by parent
; 149  : 		if (_Parent == 0)

  00033	85 c9		 test	 ecx, ecx
  00035	74 04		 je	 SHORT $LN35@operator

; 150  : 			{	// no future parent, just disown current parent
; 151  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 152  : 			_Lockit _Lock(_LOCK_DEBUG);
; 153  : 			_Orphan_me();
; 154  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 155  : 			}
; 156  : 		else
; 157  : 			{	// have a parent, do adoption
; 158  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 159  : 
; 160  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 161  : 			if (_Myproxy != _Parent_proxy)
; 162  : 				{	// change parentage
; 163  : 				_Lockit _Lock(_LOCK_DEBUG);
; 164  : 				_Orphan_me();
; 165  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 166  : 				_Parent_proxy->_Myfirstiter = this;
; 167  : 				_Myproxy = _Parent_proxy;
; 168  : 				}
; 169  : 
; 170  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 171  : 			_Myproxy = _Parent_proxy;

  00037	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00039	89 08		 mov	 DWORD PTR [eax], ecx
$LN35@operator:
  0003b	5e		 pop	 esi
; File a:\vs\vc\include\deque

; 658  : 		}

  0003c	5d		 pop	 ebp
  0003d	c2 08 00	 ret	 8
??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
;	COMDAT ??Z?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Z?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::operator-=, COMDAT
; _this$ = ecx

; 650  : 		{	// decrement by integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 639  : 		this->_Myoff += _Off;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	29 41 08	 sub	 DWORD PTR [ecx+8], eax

; 651  : 		return (*this += -_Off);

  00009	8b c1		 mov	 eax, ecx

; 652  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??Z?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::operator-=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
;	COMDAT ??Y?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::operator+=, COMDAT
; _this$ = ecx

; 638  : 		{	// increment by integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 639  : 		this->_Myoff += _Off;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	01 41 08	 add	 DWORD PTR [ecx+8], eax

; 640  : 		return (*this);

  00009	8b c1		 mov	 eax, ecx

; 641  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??Y?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
;	COMDAT ??D?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QBEAAUSState@CPythonGraphic@@XZ
_TEXT	SEGMENT
??D?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QBEAAUSState@CPythonGraphic@@XZ PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::operator*, COMDAT
; _this$ = ecx

; 602  : 		{	// return designated object

  00000	8b d1		 mov	 edx, ecx
; File a:\vs\vc\include\xutility

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00002	8b 02		 mov	 eax, DWORD PTR [edx]
  00004	85 c0		 test	 eax, eax
  00006	75 0e		 jne	 SHORT $LN7@operator
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00008	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 603  : 		return ((reference)**(_Mybase *)this);

  0000b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0000e	49		 dec	 ecx
  0000f	23 4a 08	 and	 ecx, DWORD PTR [edx+8]

; 603  : 		return ((reference)**(_Mybase *)this);

  00012	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 604  : 		}

  00015	c3		 ret	 0
$LN7@operator:
; File a:\vs\vc\include\xutility

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00016	8b 00		 mov	 eax, DWORD PTR [eax]
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00018	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 603  : 		return ((reference)**(_Mybase *)this);

  0001b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0001e	49		 dec	 ecx
  0001f	23 4a 08	 and	 ecx, DWORD PTR [edx+8]

; 603  : 		return ((reference)**(_Mybase *)this);

  00022	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 604  : 		}

  00025	c3		 ret	 0
??D?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QBEAAUSState@CPythonGraphic@@XZ ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
;	COMDAT ??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Pdeque$ = 12						; size = 4
??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >, COMDAT
; _this$ = ecx

; 585  : 		{	// construct with offset _Off in *_Pdeque

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File a:\vs\vc\include\xutility

; 149  : 		if (_Parent == 0)

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdeque$[ebp]

; 114  : 		{	// construct orphaned iterator

  00006	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0000c	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 149  : 		if (_Parent == 0)

  00013	85 c0		 test	 eax, eax
  00015	74 04		 je	 SHORT $LN13@Deque_iter

; 150  : 			{	// no future parent, just disown current parent
; 151  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 152  : 			_Lockit _Lock(_LOCK_DEBUG);
; 153  : 			_Orphan_me();
; 154  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 155  : 			}
; 156  : 		else
; 157  : 			{	// have a parent, do adoption
; 158  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 159  : 
; 160  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 161  : 			if (_Myproxy != _Parent_proxy)
; 162  : 				{	// change parentage
; 163  : 				_Lockit _Lock(_LOCK_DEBUG);
; 164  : 				_Orphan_me();
; 165  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 166  : 				_Parent_proxy->_Myfirstiter = this;
; 167  : 				_Myproxy = _Parent_proxy;
; 168  : 				}
; 169  : 
; 170  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 171  : 			_Myproxy = _Parent_proxy;

  00017	8b 00		 mov	 eax, DWORD PTR [eax]
  00019	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@Deque_iter:
; File a:\vs\vc\include\deque

; 305  : 		_Myoff = _Off;

  0001b	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  0001e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 586  : 		}

  00021	8b c1		 mov	 eax, ecx
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 125  : 		if (_Myproxy == _Right._Myproxy)

  00003	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]

; 119  : 		{	// copy an iterator

  00006	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0000c	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 125  : 		if (_Myproxy == _Right._Myproxy)

  00013	8b 02		 mov	 eax, DWORD PTR [edx]
  00015	85 c0		 test	 eax, eax
  00017	74 0a		 je	 SHORT $LN11@Deque_cons

; 126  : 			;
; 127  : 		else if (_Right._Myproxy != 0)
; 128  : 			_Adopt(_Right._Myproxy->_Mycont);

  00019	8b 00		 mov	 eax, DWORD PTR [eax]

; 129  : 		else
; 130  : 			{	// becoming invalid, disown current parent
; 131  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 132  : 			_Lockit _Lock(_LOCK_DEBUG);
; 133  : 			_Orphan_me();
; 134  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 135  : 			}
; 136  : 		return (*this);
; 137  : 		}
; 138  : 
; 139  : 	~_Iterator_base12() _NOEXCEPT
; 140  : 		{	// destroy the iterator
; 141  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 142  : 		_Lockit _Lock(_LOCK_DEBUG);
; 143  : 		_Orphan_me();
; 144  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 145  : 		}
; 146  : 
; 147  : 	void _Adopt(const _Container_base12 *_Parent)
; 148  : 		{	// adopt this iterator by parent
; 149  : 		if (_Parent == 0)

  0001b	85 c0		 test	 eax, eax
  0001d	74 04		 je	 SHORT $LN11@Deque_cons

; 150  : 			{	// no future parent, just disown current parent
; 151  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 152  : 			_Lockit _Lock(_LOCK_DEBUG);
; 153  : 			_Orphan_me();
; 154  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 155  : 			}
; 156  : 		else
; 157  : 			{	// have a parent, do adoption
; 158  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 159  : 
; 160  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 161  : 			if (_Myproxy != _Parent_proxy)
; 162  : 				{	// change parentage
; 163  : 				_Lockit _Lock(_LOCK_DEBUG);
; 164  : 				_Orphan_me();
; 165  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 166  : 				_Parent_proxy->_Myfirstiter = this;
; 167  : 				_Myproxy = _Parent_proxy;
; 168  : 				}
; 169  : 
; 170  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 171  : 			_Myproxy = _Parent_proxy;

  0001f	8b 00		 mov	 eax, DWORD PTR [eax]
  00021	89 01		 mov	 DWORD PTR [ecx], eax
$LN11@Deque_cons:
  00023	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00026	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00029	8b c1		 mov	 eax, ecx
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::~_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::~_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
;	COMDAT ?_Setcont@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QAEXPBV?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@2@@Z
_TEXT	SEGMENT
__Pdeque$ = 8						; size = 4
?_Setcont@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QAEXPBV?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@2@@Z PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::_Setcont, COMDAT
; _this$ = ecx

; 530  : 		{	// set container pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File a:\vs\vc\include\xutility

; 149  : 		if (_Parent == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pdeque$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 04		 je	 SHORT $LN3@Setcont

; 150  : 			{	// no future parent, just disown current parent
; 151  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 152  : 			_Lockit _Lock(_LOCK_DEBUG);
; 153  : 			_Orphan_me();
; 154  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 155  : 			}
; 156  : 		else
; 157  : 			{	// have a parent, do adoption
; 158  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 159  : 
; 160  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 161  : 			if (_Myproxy != _Parent_proxy)
; 162  : 				{	// change parentage
; 163  : 				_Lockit _Lock(_LOCK_DEBUG);
; 164  : 				_Orphan_me();
; 165  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 166  : 				_Parent_proxy->_Myfirstiter = this;
; 167  : 				_Myproxy = _Parent_proxy;
; 168  : 				}
; 169  : 
; 170  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 171  : 			_Myproxy = _Parent_proxy;

  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@Setcont:
; File a:\vs\vc\include\deque

; 532  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Setcont@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QAEXPBV?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@2@@Z ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::_Setcont
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
;	COMDAT ??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QBEABUSState@CPythonGraphic@@XZ
_TEXT	SEGMENT
??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QBEABUSState@CPythonGraphic@@XZ PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::operator*, COMDAT
; _this$ = ecx

; 322  : 		{	// return designated object

  00000	8b d1		 mov	 edx, ecx
; File a:\vs\vc\include\xutility

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00002	8b 02		 mov	 eax, DWORD PTR [edx]
  00004	85 c0		 test	 eax, eax
  00006	75 0e		 jne	 SHORT $LN5@operator
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00008	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 323  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 324  : 
; 325  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 326  : 		if (_Mycont == 0
; 327  : 			|| this->_Myoff < _Mycont->_Myoff
; 328  : 			|| _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
; 329  : 		{	// report error
; 330  : 		_DEBUG_ERROR("deque iterator not dereferencable");
; 331  : 		_SCL_SECURE_OUT_OF_RANGE;
; 332  : 		}
; 333  : 
; 334  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 335  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 336  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff <= this->_Myoff
; 337  : 			&& this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize);
; 338  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 339  : 
; 340  : 		_Analysis_assume_(_Mycont != 0);
; 341  : 
; 342  : 		size_type _Block = _Mycont->_Getblock(_Myoff);
; 343  : 		size_type _Off = _Myoff % _DEQUESIZ;
; 344  : 		return (_Mycont->_Map[_Block][_Off]);

  0000b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0000e	49		 dec	 ecx
  0000f	23 4a 08	 and	 ecx, DWORD PTR [edx+8]

; 323  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 324  : 
; 325  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 326  : 		if (_Mycont == 0
; 327  : 			|| this->_Myoff < _Mycont->_Myoff
; 328  : 			|| _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
; 329  : 		{	// report error
; 330  : 		_DEBUG_ERROR("deque iterator not dereferencable");
; 331  : 		_SCL_SECURE_OUT_OF_RANGE;
; 332  : 		}
; 333  : 
; 334  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 335  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 336  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff <= this->_Myoff
; 337  : 			&& this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize);
; 338  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 339  : 
; 340  : 		_Analysis_assume_(_Mycont != 0);
; 341  : 
; 342  : 		size_type _Block = _Mycont->_Getblock(_Myoff);
; 343  : 		size_type _Off = _Myoff % _DEQUESIZ;
; 344  : 		return (_Mycont->_Map[_Block][_Off]);

  00012	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 345  : 		}

  00015	c3		 ret	 0
$LN5@operator:
; File a:\vs\vc\include\xutility

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00016	8b 00		 mov	 eax, DWORD PTR [eax]
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00018	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 323  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 324  : 
; 325  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 326  : 		if (_Mycont == 0
; 327  : 			|| this->_Myoff < _Mycont->_Myoff
; 328  : 			|| _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
; 329  : 		{	// report error
; 330  : 		_DEBUG_ERROR("deque iterator not dereferencable");
; 331  : 		_SCL_SECURE_OUT_OF_RANGE;
; 332  : 		}
; 333  : 
; 334  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 335  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 336  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff <= this->_Myoff
; 337  : 			&& this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize);
; 338  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 339  : 
; 340  : 		_Analysis_assume_(_Mycont != 0);
; 341  : 
; 342  : 		size_type _Block = _Mycont->_Getblock(_Myoff);
; 343  : 		size_type _Off = _Myoff % _DEQUESIZ;
; 344  : 		return (_Mycont->_Map[_Block][_Off]);

  0001b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0001e	49		 dec	 ecx
  0001f	23 4a 08	 and	 ecx, DWORD PTR [edx+8]

; 323  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 324  : 
; 325  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 326  : 		if (_Mycont == 0
; 327  : 			|| this->_Myoff < _Mycont->_Myoff
; 328  : 			|| _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
; 329  : 		{	// report error
; 330  : 		_DEBUG_ERROR("deque iterator not dereferencable");
; 331  : 		_SCL_SECURE_OUT_OF_RANGE;
; 332  : 		}
; 333  : 
; 334  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 335  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 336  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff <= this->_Myoff
; 337  : 			&& this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize);
; 338  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 339  : 
; 340  : 		_Analysis_assume_(_Mycont != 0);
; 341  : 
; 342  : 		size_type _Block = _Mycont->_Getblock(_Myoff);
; 343  : 		size_type _Off = _Myoff % _DEQUESIZ;
; 344  : 		return (_Mycont->_Map[_Block][_Off]);

  00022	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 345  : 		}

  00025	c3		 ret	 0
??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QBEABUSState@CPythonGraphic@@XZ ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
;	COMDAT ??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Pdeque$ = 12						; size = 4
??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >, COMDAT
; _this$ = ecx

; 302  : 	_Deque_const_iterator(size_type _Off, const _Container_base12 *_Pdeque)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File a:\vs\vc\include\xutility

; 149  : 		if (_Parent == 0)

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdeque$[ebp]

; 114  : 		{	// construct orphaned iterator

  00006	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0000c	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 149  : 		if (_Parent == 0)

  00013	85 c0		 test	 eax, eax
  00015	74 04		 je	 SHORT $LN11@Deque_cons

; 150  : 			{	// no future parent, just disown current parent
; 151  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 152  : 			_Lockit _Lock(_LOCK_DEBUG);
; 153  : 			_Orphan_me();
; 154  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 155  : 			}
; 156  : 		else
; 157  : 			{	// have a parent, do adoption
; 158  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 159  : 
; 160  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 161  : 			if (_Myproxy != _Parent_proxy)
; 162  : 				{	// change parentage
; 163  : 				_Lockit _Lock(_LOCK_DEBUG);
; 164  : 				_Orphan_me();
; 165  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 166  : 				_Parent_proxy->_Myfirstiter = this;
; 167  : 				_Myproxy = _Parent_proxy;
; 168  : 				}
; 169  : 
; 170  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 171  : 			_Myproxy = _Parent_proxy;

  00017	8b 00		 mov	 eax, DWORD PTR [eax]
  00019	89 01		 mov	 DWORD PTR [ecx], eax
$LN11@Deque_cons:
; File a:\vs\vc\include\deque

; 305  : 		_Myoff = _Off;

  0001b	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  0001e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 306  : 		}

  00021	8b c1		 mov	 eax, ecx
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@USPDTVertex@@ABU1@@?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@QAEXPAUSPDTVertex@@ABU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@USPDTVertex@@ABU1@@?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@QAEXPAUSPDTVertex@@ABU2@@Z PROC ; std::_Wrap_alloc<std::allocator<SPDTVertex> >::construct<SPDTVertex,SPDTVertex const &>, COMDAT
; _this$ = ecx

; 868  : 		void construct(_Ty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 593  : 		::new ((void *)_Ptr) _Ty(_Val);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 15		 je	 SHORT $LN11@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [eax]
  00011	f3 0f 7f 01	 movdqu	 XMMWORD PTR [ecx], xmm0
  00015	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  0001a	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
$LN11@construct:

; 869  : 			_Types&&... _Args)
; 870  : 		{	// construct _Ty(_Types...) at _Ptr
; 871  : 		_Mytraits::construct(*this, _Ptr,
; 872  : 			_STD forward<_Types>(_Args)...);
; 873  : 		}

  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
??$construct@USPDTVertex@@ABU1@@?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@QAEXPAUSPDTVertex@@ABU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<SPDTVertex> >::construct<SPDTVertex,SPDTVertex const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??$construct@USPDTVertex@@AAU1@@?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@QAEXPAUSPDTVertex@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@USPDTVertex@@AAU1@@?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@QAEXPAUSPDTVertex@@AAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<SPDTVertex> >::construct<SPDTVertex,SPDTVertex &>, COMDAT
; _this$ = ecx

; 868  : 		void construct(_Ty *_Ptr,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 15		 je	 SHORT $LN11@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [eax]
  00011	f3 0f 7f 01	 movdqu	 XMMWORD PTR [ecx], xmm0
  00015	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  0001a	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
$LN11@construct:

; 869  : 			_Types&&... _Args)
; 870  : 		{	// construct _Ty(_Types...) at _Ptr
; 871  : 		_Mytraits::construct(*this, _Ptr,
; 872  : 			_STD forward<_Types>(_Args)...);
; 873  : 		}

  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
??$construct@USPDTVertex@@AAU1@@?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@QAEXPAUSPDTVertex@@AAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<SPDTVertex> >::construct<SPDTVertex,SPDTVertex &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xstddef
;	COMDAT ??$addressof@$$CBUSPDTVertex@@@std@@YAPBUSPDTVertex@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUSPDTVertex@@@std@@YAPBUSPDTVertex@@ABU1@@Z PROC ; std::addressof<SPDTVertex const >, COMDAT

; 92   : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 93   : 	return (reinterpret_cast<_Ty *>(
; 94   : 		(&const_cast<char&>(
; 95   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 96   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUSPDTVertex@@@std@@YAPBUSPDTVertex@@ABU1@@Z ENDP ; std::addressof<SPDTVertex const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IBEXPAUSPDTVertex@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IBEXPAUSPDTVertex@@0@Z PROC ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1781 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IBEXPAUSPDTVertex@@0@Z ENDP ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Xlen@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IBEXXZ PROC ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Xlen, COMDAT
; _this$ = ecx

; 1754 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IBEXXZ ENDP ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
;	COMDAT ?_Tidy@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IAEXXZ PROC ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Tidy, COMDAT
; _this$ = ecx

; 1622 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1623 : 		if (this->_Myfirst != pointer())

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 1d		 je	 SHORT $LN1@Tidy
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
; File a:\vs\vc\include\vector

; 1629 : 			this->_Myfirst = pointer();

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1630 : 			this->_Mylast = pointer();

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1631 : 			this->_Myend = pointer();

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN1@Tidy:
  00026	5e		 pop	 esi

; 1632 : 			}
; 1633 : 		}

  00027	c3		 ret	 0
?_Tidy@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IAEXXZ ENDP ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Reserve@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IAEXI@Z PROC ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Reserve, COMDAT
; _this$ = ecx

; 1612 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1011 : 		}
; 1012 : 
; 1013 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1014 : 		{	// micro-optimization for capacity() - size()
; 1015 : 		return (this->_Myend - this->_Mylast);

  00004	8b 59 08	 mov	 ebx, DWORD PTR [ecx+8]
  00007	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000c	56		 push	 esi
  0000d	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00010	8b d3		 mov	 edx, ebx
  00012	2b d6		 sub	 edx, esi
  00014	f7 ea		 imul	 edx
  00016	57		 push	 edi

; 1613 : 		if (_Unused_capacity() < _Count)

  00017	8b 7d 08	 mov	 edi, DWORD PTR __Count$[ebp]

; 1011 : 		}
; 1012 : 
; 1013 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1014 : 		{	// micro-optimization for capacity() - size()
; 1015 : 		return (this->_Myend - this->_Mylast);

  0001a	c1 fa 02	 sar	 edx, 2
  0001d	8b c2		 mov	 eax, edx
  0001f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00022	03 c2		 add	 eax, edx

; 1613 : 		if (_Unused_capacity() < _Count)

  00024	3b c7		 cmp	 eax, edi
  00026	73 68		 jae	 SHORT $LN2@Reserve

; 1016 : 		}
; 1017 : 
; 1018 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1019 : 		{	// micro-optimization for capacity() != size()
; 1020 : 		return (this->_Myend != this->_Mylast);
; 1021 : 		}
; 1022 : 
; 1023 : 	iterator begin() _NOEXCEPT
; 1024 : 		{	// return iterator for beginning of mutable sequence
; 1025 : 		return (iterator(this->_Myfirst, this));
; 1026 : 		}
; 1027 : 
; 1028 : 	const_iterator begin() const _NOEXCEPT
; 1029 : 		{	// return iterator for beginning of nonmutable sequence
; 1030 : 		return (const_iterator(this->_Myfirst, this));
; 1031 : 		}
; 1032 : 
; 1033 : 	iterator end() _NOEXCEPT
; 1034 : 		{	// return iterator for end of mutable sequence
; 1035 : 		return (iterator(this->_Mylast, this));
; 1036 : 		}
; 1037 : 
; 1038 : 	const_iterator end() const _NOEXCEPT
; 1039 : 		{	// return iterator for end of nonmutable sequence
; 1040 : 		return (const_iterator(this->_Mylast, this));
; 1041 : 		}
; 1042 : 
; 1043 : 	iterator _Make_iter(const_iterator _Where) const
; 1044 : 		{	// make iterator from const_iterator
; 1045 : 		return (iterator(_Where._Ptr, this));
; 1046 : 		}
; 1047 : 
; 1048 : 	reverse_iterator rbegin() _NOEXCEPT
; 1049 : 		{	// return iterator for beginning of reversed mutable sequence
; 1050 : 		return (reverse_iterator(end()));
; 1051 : 		}
; 1052 : 
; 1053 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1054 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1055 : 		return (const_reverse_iterator(end()));
; 1056 : 		}
; 1057 : 
; 1058 : 	reverse_iterator rend() _NOEXCEPT
; 1059 : 		{	// return iterator for end of reversed mutable sequence
; 1060 : 		return (reverse_iterator(begin()));
; 1061 : 		}
; 1062 : 
; 1063 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1064 : 		{	// return iterator for end of reversed nonmutable sequence
; 1065 : 		return (const_reverse_iterator(begin()));
; 1066 : 		}
; 1067 : 
; 1068 : 	const_iterator cbegin() const _NOEXCEPT
; 1069 : 		{	// return iterator for beginning of nonmutable sequence
; 1070 : 		return (((const _Myt *)this)->begin());
; 1071 : 		}
; 1072 : 
; 1073 : 	const_iterator cend() const _NOEXCEPT
; 1074 : 		{	// return iterator for end of nonmutable sequence
; 1075 : 		return (((const _Myt *)this)->end());
; 1076 : 		}
; 1077 : 
; 1078 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1079 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1080 : 		return (((const _Myt *)this)->rbegin());
; 1081 : 		}
; 1082 : 
; 1083 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1084 : 		{	// return iterator for end of reversed nonmutable sequence
; 1085 : 		return (((const _Myt *)this)->rend());
; 1086 : 		}
; 1087 : 
; 1088 : 	void shrink_to_fit()
; 1089 : 		{	// reduce capacity
; 1090 : 		if (_Has_unused_capacity())
; 1091 : 			{	// worth shrinking, do it
; 1092 : 			if (empty())
; 1093 : 				_Tidy();
; 1094 : 			else
; 1095 : 				_Reallocate(size());
; 1096 : 			}
; 1097 : 		}
; 1098 : 
; 1099 : 	void resize(size_type _Newsize)
; 1100 : 		{	// determine new length, padding as needed
; 1101 : 		if (_Newsize < size())
; 1102 : 			_Pop_back_n(size() - _Newsize);
; 1103 : 		else if (size() < _Newsize)
; 1104 : 			{	// pad as needed
; 1105 : 			_Alty _Alval(this->_Getal());
; 1106 : 			_Reserve(_Newsize - size());
; 1107 : 			_TRY_BEGIN
; 1108 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1109 : 				_Alval);
; 1110 : 			_CATCH_ALL
; 1111 : 			_Tidy();
; 1112 : 			_RERAISE;
; 1113 : 			_CATCH_END
; 1114 : 			this->_Mylast += _Newsize - size();
; 1115 : 			}
; 1116 : 		}
; 1117 : 
; 1118 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1119 : 		{	// determine new length, padding with _Val elements as needed
; 1120 : 		if (_Newsize < size())
; 1121 : 			_Pop_back_n(size() - _Newsize);
; 1122 : 		else if (size() < _Newsize)
; 1123 : 			{	// pad as needed
; 1124 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1125 : 
; 1126 : 			if (_Inside(_Ptr))
; 1127 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1128 : 				const difference_type _Idx = _Ptr
; 1129 : 					- _STD addressof(*this->_Myfirst);
; 1130 : 				_Reserve(_Newsize - size());
; 1131 : 				_Ptr = _STD addressof(*this->_Myfirst) + _Idx;
; 1132 : 				}
; 1133 : 			else
; 1134 : 				_Reserve(_Newsize - size());
; 1135 : 
; 1136 : 			_TRY_BEGIN
; 1137 : 			_Ufill(this->_Mylast, _Newsize - size(), _Ptr);
; 1138 : 			_CATCH_ALL
; 1139 : 			_Tidy();
; 1140 : 			_RERAISE;
; 1141 : 			_CATCH_END
; 1142 : 			this->_Mylast += _Newsize - size();
; 1143 : 			}
; 1144 : 		}
; 1145 : 
; 1146 : 	size_type size() const _NOEXCEPT
; 1147 : 		{	// return length of sequence
; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00028	2b 31		 sub	 esi, DWORD PTR [ecx]
  0002a	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0002f	f7 ee		 imul	 esi

; 1614 : 			{	// need more room, try to get it
; 1615 : 			if (max_size() - size() < _Count)

  00031	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 1016 : 		}
; 1017 : 
; 1018 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1019 : 		{	// micro-optimization for capacity() != size()
; 1020 : 		return (this->_Myend != this->_Mylast);
; 1021 : 		}
; 1022 : 
; 1023 : 	iterator begin() _NOEXCEPT
; 1024 : 		{	// return iterator for beginning of mutable sequence
; 1025 : 		return (iterator(this->_Myfirst, this));
; 1026 : 		}
; 1027 : 
; 1028 : 	const_iterator begin() const _NOEXCEPT
; 1029 : 		{	// return iterator for beginning of nonmutable sequence
; 1030 : 		return (const_iterator(this->_Myfirst, this));
; 1031 : 		}
; 1032 : 
; 1033 : 	iterator end() _NOEXCEPT
; 1034 : 		{	// return iterator for end of mutable sequence
; 1035 : 		return (iterator(this->_Mylast, this));
; 1036 : 		}
; 1037 : 
; 1038 : 	const_iterator end() const _NOEXCEPT
; 1039 : 		{	// return iterator for end of nonmutable sequence
; 1040 : 		return (const_iterator(this->_Mylast, this));
; 1041 : 		}
; 1042 : 
; 1043 : 	iterator _Make_iter(const_iterator _Where) const
; 1044 : 		{	// make iterator from const_iterator
; 1045 : 		return (iterator(_Where._Ptr, this));
; 1046 : 		}
; 1047 : 
; 1048 : 	reverse_iterator rbegin() _NOEXCEPT
; 1049 : 		{	// return iterator for beginning of reversed mutable sequence
; 1050 : 		return (reverse_iterator(end()));
; 1051 : 		}
; 1052 : 
; 1053 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1054 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1055 : 		return (const_reverse_iterator(end()));
; 1056 : 		}
; 1057 : 
; 1058 : 	reverse_iterator rend() _NOEXCEPT
; 1059 : 		{	// return iterator for end of reversed mutable sequence
; 1060 : 		return (reverse_iterator(begin()));
; 1061 : 		}
; 1062 : 
; 1063 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1064 : 		{	// return iterator for end of reversed nonmutable sequence
; 1065 : 		return (const_reverse_iterator(begin()));
; 1066 : 		}
; 1067 : 
; 1068 : 	const_iterator cbegin() const _NOEXCEPT
; 1069 : 		{	// return iterator for beginning of nonmutable sequence
; 1070 : 		return (((const _Myt *)this)->begin());
; 1071 : 		}
; 1072 : 
; 1073 : 	const_iterator cend() const _NOEXCEPT
; 1074 : 		{	// return iterator for end of nonmutable sequence
; 1075 : 		return (((const _Myt *)this)->end());
; 1076 : 		}
; 1077 : 
; 1078 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1079 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1080 : 		return (((const _Myt *)this)->rbegin());
; 1081 : 		}
; 1082 : 
; 1083 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1084 : 		{	// return iterator for end of reversed nonmutable sequence
; 1085 : 		return (((const _Myt *)this)->rend());
; 1086 : 		}
; 1087 : 
; 1088 : 	void shrink_to_fit()
; 1089 : 		{	// reduce capacity
; 1090 : 		if (_Has_unused_capacity())
; 1091 : 			{	// worth shrinking, do it
; 1092 : 			if (empty())
; 1093 : 				_Tidy();
; 1094 : 			else
; 1095 : 				_Reallocate(size());
; 1096 : 			}
; 1097 : 		}
; 1098 : 
; 1099 : 	void resize(size_type _Newsize)
; 1100 : 		{	// determine new length, padding as needed
; 1101 : 		if (_Newsize < size())
; 1102 : 			_Pop_back_n(size() - _Newsize);
; 1103 : 		else if (size() < _Newsize)
; 1104 : 			{	// pad as needed
; 1105 : 			_Alty _Alval(this->_Getal());
; 1106 : 			_Reserve(_Newsize - size());
; 1107 : 			_TRY_BEGIN
; 1108 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1109 : 				_Alval);
; 1110 : 			_CATCH_ALL
; 1111 : 			_Tidy();
; 1112 : 			_RERAISE;
; 1113 : 			_CATCH_END
; 1114 : 			this->_Mylast += _Newsize - size();
; 1115 : 			}
; 1116 : 		}
; 1117 : 
; 1118 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1119 : 		{	// determine new length, padding with _Val elements as needed
; 1120 : 		if (_Newsize < size())
; 1121 : 			_Pop_back_n(size() - _Newsize);
; 1122 : 		else if (size() < _Newsize)
; 1123 : 			{	// pad as needed
; 1124 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1125 : 
; 1126 : 			if (_Inside(_Ptr))
; 1127 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1128 : 				const difference_type _Idx = _Ptr
; 1129 : 					- _STD addressof(*this->_Myfirst);
; 1130 : 				_Reserve(_Newsize - size());
; 1131 : 				_Ptr = _STD addressof(*this->_Myfirst) + _Idx;
; 1132 : 				}
; 1133 : 			else
; 1134 : 				_Reserve(_Newsize - size());
; 1135 : 
; 1136 : 			_TRY_BEGIN
; 1137 : 			_Ufill(this->_Mylast, _Newsize - size(), _Ptr);
; 1138 : 			_CATCH_ALL
; 1139 : 			_Tidy();
; 1140 : 			_RERAISE;
; 1141 : 			_CATCH_END
; 1142 : 			this->_Mylast += _Newsize - size();
; 1143 : 			}
; 1144 : 		}
; 1145 : 
; 1146 : 	size_type size() const _NOEXCEPT
; 1147 : 		{	// return length of sequence
; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00036	c1 fa 02	 sar	 edx, 2
  00039	8b f2		 mov	 esi, edx
  0003b	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0003e	03 f2		 add	 esi, edx

; 1614 : 			{	// need more room, try to get it
; 1615 : 			if (max_size() - size() < _Count)

  00040	2b c6		 sub	 eax, esi
  00042	3b c7		 cmp	 eax, edi
  00044	72 51		 jb	 SHORT $LN43@Reserve

; 1010 : 		return (this->_Myend - this->_Myfirst);

  00046	2b 19		 sub	 ebx, DWORD PTR [ecx]
  00048	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0004d	f7 eb		 imul	 ebx

; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));

  0004f	03 f7		 add	 esi, edi

; 1149 : 		}
; 1150 : 
; 1151 : 	size_type max_size() const _NOEXCEPT
; 1152 : 		{	// return maximum possible length of sequence
; 1153 : 		return (this->_Getal().max_size());
; 1154 : 		}
; 1155 : 
; 1156 : 	bool empty() const _NOEXCEPT
; 1157 : 		{	// test if sequence is empty
; 1158 : 		return (this->_Myfirst == this->_Mylast);
; 1159 : 		}
; 1160 : 
; 1161 : 	_Alloc get_allocator() const _NOEXCEPT
; 1162 : 		{	// return allocator object for values
; 1163 : 		return (this->_Getal());
; 1164 : 		}
; 1165 : 
; 1166 : 	const_reference at(size_type _Pos) const
; 1167 : 		{	// subscript nonmutable sequence with checking
; 1168 : 		if (size() <= _Pos)
; 1169 : 			_Xran();
; 1170 : 		return (*(this->_Myfirst + _Pos));
; 1171 : 		}
; 1172 : 
; 1173 : 	reference at(size_type _Pos)
; 1174 : 		{	// subscript mutable sequence with checking
; 1175 : 		if (size() <= _Pos)
; 1176 : 			_Xran();
; 1177 : 		return (*(this->_Myfirst + _Pos));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reference operator[](size_type _Pos) const
; 1181 : 		{	// subscript nonmutable sequence
; 1182 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1183 : 		if (size() <= _Pos)
; 1184 : 			{	// report error
; 1185 : 			_DEBUG_ERROR("vector subscript out of range");
; 1186 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1187 : 			}
; 1188 : 
; 1189 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1190 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1191 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1192 : 
; 1193 : 		return (*(this->_Myfirst + _Pos));
; 1194 : 		}
; 1195 : 
; 1196 : 	reference operator[](size_type _Pos)
; 1197 : 		{	// subscript mutable sequence
; 1198 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1199 : 		if (size() <= _Pos)
; 1200 : 			{	// report error
; 1201 : 			_DEBUG_ERROR("vector subscript out of range");
; 1202 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1203 : 			}
; 1204 : 
; 1205 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1206 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1207 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1208 : 
; 1209 : 		return (*(this->_Myfirst + _Pos));
; 1210 : 		}
; 1211 : 
; 1212 : 	pointer data() _NOEXCEPT
; 1213 : 		{	// return address of first element
; 1214 : 		return (this->_Myfirst);
; 1215 : 		}
; 1216 : 
; 1217 : 	const_pointer data() const _NOEXCEPT
; 1218 : 		{	// return address of first element
; 1219 : 		return (this->_Myfirst);
; 1220 : 		}
; 1221 : 
; 1222 : 	reference front()
; 1223 : 		{	// return first element of mutable sequence
; 1224 : 		return (*begin());
; 1225 : 		}
; 1226 : 
; 1227 : 	const_reference front() const
; 1228 : 		{	// return first element of nonmutable sequence
; 1229 : 		return (*begin());
; 1230 : 		}
; 1231 : 
; 1232 : 	reference back()
; 1233 : 		{	// return last element of mutable sequence
; 1234 : 		return (*(end() - 1));
; 1235 : 		}
; 1236 : 
; 1237 : 	const_reference back() const
; 1238 : 		{	// return last element of nonmutable sequence
; 1239 : 		return (*(end() - 1));
; 1240 : 		}
; 1241 : 
; 1242 : 	void push_back(const value_type& _Val)
; 1243 : 		{	// insert element at end
; 1244 : 		if (_Inside(_STD addressof(_Val)))
; 1245 : 			{	// push back an element
; 1246 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1247 : 			if (this->_Mylast == this->_Myend)
; 1248 : 				_Reserve(1);
; 1249 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1250 : 			this->_Getal().construct(this->_Mylast,
; 1251 : 				this->_Myfirst[_Idx]);
; 1252 : 			++this->_Mylast;
; 1253 : 			}
; 1254 : 		else
; 1255 : 			{	// push back a non-element
; 1256 : 			if (this->_Mylast == this->_Myend)
; 1257 : 				_Reserve(1);
; 1258 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1259 : 			this->_Getal().construct(this->_Mylast,
; 1260 : 				_Val);
; 1261 : 			++this->_Mylast;
; 1262 : 			}
; 1263 : 		}
; 1264 : 
; 1265 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1266 : 	void pop_back()
; 1267 : 		{	// erase element at end
; 1268 : 		if (empty())
; 1269 : 			_DEBUG_ERROR("vector empty before pop");
; 1270 : 		else
; 1271 : 			{	// erase last element
; 1272 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1273 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1274 : 			--this->_Mylast;
; 1275 : 			}
; 1276 : 		}
; 1277 : 
; 1278 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1279 : 	void pop_back()
; 1280 : 		{	// erase element at end
; 1281 : 		this->_Getal().destroy(this->_Mylast - 1);
; 1282 : 		--this->_Mylast;
; 1283 : 		}
; 1284 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1285 : 
; 1286 : 	template<class _Iter>
; 1287 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1288 : 			void>::type
; 1289 : 		assign(_Iter _First, _Iter _Last)
; 1290 : 		{	// assign [_First, _Last)
; 1291 : 		clear();
; 1292 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1293 : 		}
; 1294 : 
; 1295 : 	template<class _Iter>
; 1296 : 		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
; 1297 : 		{	// assign [_First, _Last), input iterators
; 1298 : 		for (; _First != _Last; ++_First)
; 1299 : 			emplace_back(*_First);
; 1300 : 		}
; 1301 : 
; 1302 : 	template<class _Iter>
; 1303 : 		void _Assign(_Iter _First, _Iter _Last, forward_iterator_tag)
; 1304 : 		{	// assign [_First, _Last), forward iterators
; 1305 : 		if (_First == _Last)
; 1306 : 			return;	// nothing to do
; 1307 : 
; 1308 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1309 : 
; 1310 : 		if (capacity() < _Newsize)
; 1311 : 			{	// need more room, try to get it
; 1312 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1313 : 			_Tidy();
; 1314 : 			_Buy(_Newcapacity);
; 1315 : 			}
; 1316 : 
; 1317 : 		this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
; 1318 : 		}
; 1319 : 
; 1320 : 	void assign(size_type _Count, const value_type& _Val)
; 1321 : 		{	// assign _Count * _Val
; 1322 : 		clear();
; 1323 : 		insert(begin(), _Count, _Val);
; 1324 : 		}
; 1325 : 
; 1326 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1327 : 		{	// insert _Val at _Where
; 1328 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1329 : 		}
; 1330 : 
; 1331 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1332 : 		const _Ty& _Val)
; 1333 : 		{	// insert _Count * _Val at _Where
; 1334 : 		return (_Insert_n(_Where, _Count, _Val));
; 1335 : 		}
; 1336 : 
; 1337 : 	template<class _Iter>
; 1338 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1339 : 			iterator>::type
; 1340 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1341 : 		{	// insert [_First, _Last) at _Where
; 1342 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1343 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1344 : 		return (begin() + _Off);
; 1345 : 		}
; 1346 : 
; 1347 : 	template<class _Iter>
; 1348 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1349 : 			input_iterator_tag)
; 1350 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1351 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1352 : 
; 1353 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1354 : 		if (size() < _Off)
; 1355 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1356 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1357 : 
; 1358 : 		if (_First != _Last)
; 1359 : 			{	// worth doing, gather at end and rotate into place
; 1360 : 			size_type _Oldsize = size();
; 1361 : 
; 1362 : 			_TRY_BEGIN
; 1363 : 			for (; _First != _Last; ++_First)
; 1364 : 				push_back(*_First);	// append
; 1365 : 
; 1366 : 			_CATCH_ALL
; 1367 : 			erase(begin() + _Oldsize, end());
; 1368 : 			_RERAISE;
; 1369 : 			_CATCH_END
; 1370 : 
; 1371 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1372 : 			}
; 1373 : 		}
; 1374 : 
; 1375 : 	template<class _Iter>
; 1376 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1377 : 			forward_iterator_tag)
; 1378 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_VICONT(_Where) != this
; 1381 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1382 : 			|| this->_Mylast < _VIPTR(_Where))
; 1383 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1384 : 		_DEBUG_RANGE(_First, _Last);
; 1385 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1386 : 
; 1387 : 		size_type _Count = 0;
; 1388 : 		_Distance(_First, _Last, _Count);
; 1389 : 
; 1390 : 		if (_Count == 0)
; 1391 : 			;
; 1392 : 		else if (_Unused_capacity() < _Count)
; 1393 : 			{	// not enough room, reallocate
; 1394 : 			if (max_size() - size() < _Count)
; 1395 : 				_Xlen();	// result too long
; 1396 : 
; 1397 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1398 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1399 : 			pointer _Ptr = _Newvec;
; 1400 : 
; 1401 : 			_TRY_BEGIN
; 1402 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1403 : 				_Newvec);	// copy prefix
; 1404 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1405 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1406 : 				_Ptr);	// copy suffix
; 1407 : 			_CATCH_ALL
; 1408 : 			_Destroy(_Newvec, _Ptr);
; 1409 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1410 : 			_RERAISE;
; 1411 : 			_CATCH_END
; 1412 : 
; 1413 : 			_Count += size();
; 1414 : 			if (this->_Myfirst != pointer())
; 1415 : 				{	// destroy and deallocate old array
; 1416 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1417 : 				this->_Getal().deallocate(this->_Myfirst,
; 1418 : 					this->_Myend - this->_Myfirst);
; 1419 : 				}
; 1420 : 
; 1421 : 			this->_Orphan_all();
; 1422 : 			this->_Myend = _Newvec + _Capacity;
; 1423 : 			this->_Mylast = _Newvec + _Count;
; 1424 : 			this->_Myfirst = _Newvec;
; 1425 : 			}
; 1426 : 		else
; 1427 : 			{	// new stuff fits, append and rotate into place
; 1428 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1429 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1430 : 				this->_Mylast + _Count);
; 1431 : 			this->_Mylast += _Count;
; 1432 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1433 : 			}
; 1434 : 		}
; 1435 : 
; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 	iterator erase(const_iterator _Where)
; 1438 : 		{	// erase element at where
; 1439 : 		if (_VICONT(_Where) != this
; 1440 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1441 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1442 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1443 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1444 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1445 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1446 : 		--this->_Mylast;
; 1447 : 		return (_Make_iter(_Where));
; 1448 : 		}
; 1449 : 
; 1450 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 	iterator erase(const_iterator _Where)
; 1452 : 		{	// erase element at where
; 1453 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1454 : 			_VIPTR(_Where));
; 1455 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1456 : 		--this->_Mylast;
; 1457 : 		return (_Make_iter(_Where));
; 1458 : 		}
; 1459 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1460 : 
; 1461 : 	iterator erase(const_iterator _First_arg,
; 1462 : 		const_iterator _Last_arg)
; 1463 : 		{	// erase [_First, _Last)
; 1464 : 		if (_First_arg == begin() && _Last_arg == end())
; 1465 : 			clear();
; 1466 : 		else if (_First_arg != _Last_arg)
; 1467 : 			{	// clear partial
; 1468 : 			iterator _First = _Make_iter(_First_arg);
; 1469 : 			iterator _Last = _Make_iter(_Last_arg);
; 1470 : 
; 1471 : 			if (_First != _Last)
; 1472 : 				{	// worth doing, copy down over hole
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 				if (_Last < _First || _VICONT(_First) != this
; 1475 : 					|| _VIPTR(_First) < this->_Myfirst
; 1476 : 					|| this->_Mylast < _VIPTR(_Last))
; 1477 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1478 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1479 : 					_VIPTR(_First));
; 1480 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1484 : 					_VIPTR(_First));
; 1485 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1486 : 
; 1487 : 				_Destroy(_Ptr, this->_Mylast);
; 1488 : 				this->_Mylast = _Ptr;
; 1489 : 				}
; 1490 : 			}
; 1491 : 		return (_Make_iter(_First_arg));
; 1492 : 		}
; 1493 : 
; 1494 : 	void _Pop_back_n(size_type _Count)
; 1495 : 		{	// erase _Count elements at end
; 1496 : 		pointer _Ptr = this->_Mylast - _Count;
; 1497 : 
; 1498 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1499 : 		_Orphan_range(_Ptr, this->_Mylast);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 
; 1502 : 		_Destroy(_Ptr, this->_Mylast);
; 1503 : 		this->_Mylast = _Ptr;
; 1504 : 		}
; 1505 : 
; 1506 : 	void clear() _NOEXCEPT
; 1507 : 		{	// erase all
; 1508 : 		this->_Orphan_all();
; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1510 : 		this->_Mylast = this->_Myfirst;
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		{	// exchange contents with _Right
; 1515 : 		if (this == &_Right)
; 1516 : 			;	// same object, do nothing
; 1517 : 		else if (this->_Getal() == _Right._Getal())
; 1518 : 			{	// same allocator, swap control information
; 1519 : 			this->_Swap_all(_Right);
; 1520 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1521 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1522 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1529 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1530 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1531 : 			}
; 1532 : 
; 1533 : 		else
; 1534 : 			{	// containers are incompatible
; 1535 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1536 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1537 : 
; 1538 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1539 : 			_XSTD terminate();
; 1540 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1541 : 			}
; 1542 : 		}
; 1543 : 
; 1544 : protected:
; 1545 : 	bool _Buy(size_type _Capacity)
; 1546 : 		{	// allocate array with _Capacity elements
; 1547 : 		this->_Myfirst = pointer();
; 1548 : 		this->_Mylast = pointer();
; 1549 : 		this->_Myend = pointer();
; 1550 : 
; 1551 : 		if (_Capacity == 0)
; 1552 : 			return (false);
; 1553 : 		else if (max_size() < _Capacity)
; 1554 : 			_Xlen();	// result too long
; 1555 : 		else
; 1556 : 			{	// nonempty array, allocate storage
; 1557 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1558 : 			this->_Mylast = this->_Myfirst;
; 1559 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1560 : 			}
; 1561 : 		return (true);
; 1562 : 		}
; 1563 : 
; 1564 : 	void _Destroy(pointer _First, pointer _Last)
; 1565 : 		{	// destroy [_First, _Last) using allocator
; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}
; 1569 : 
; 1570 : 	size_type _Grow_to(size_type _Count) const
; 1571 : 		{	// grow by 50% or at least to _Count
; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00051	bf aa aa aa 0a	 mov	 edi, 178956970		; 0aaaaaaaH

; 1010 : 		return (this->_Myend - this->_Myfirst);

  00056	c1 fa 02	 sar	 edx, 2
  00059	8b c2		 mov	 eax, edx
  0005b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005e	03 c2		 add	 eax, edx

; 1149 : 		}
; 1150 : 
; 1151 : 	size_type max_size() const _NOEXCEPT
; 1152 : 		{	// return maximum possible length of sequence
; 1153 : 		return (this->_Getal().max_size());
; 1154 : 		}
; 1155 : 
; 1156 : 	bool empty() const _NOEXCEPT
; 1157 : 		{	// test if sequence is empty
; 1158 : 		return (this->_Myfirst == this->_Mylast);
; 1159 : 		}
; 1160 : 
; 1161 : 	_Alloc get_allocator() const _NOEXCEPT
; 1162 : 		{	// return allocator object for values
; 1163 : 		return (this->_Getal());
; 1164 : 		}
; 1165 : 
; 1166 : 	const_reference at(size_type _Pos) const
; 1167 : 		{	// subscript nonmutable sequence with checking
; 1168 : 		if (size() <= _Pos)
; 1169 : 			_Xran();
; 1170 : 		return (*(this->_Myfirst + _Pos));
; 1171 : 		}
; 1172 : 
; 1173 : 	reference at(size_type _Pos)
; 1174 : 		{	// subscript mutable sequence with checking
; 1175 : 		if (size() <= _Pos)
; 1176 : 			_Xran();
; 1177 : 		return (*(this->_Myfirst + _Pos));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reference operator[](size_type _Pos) const
; 1181 : 		{	// subscript nonmutable sequence
; 1182 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1183 : 		if (size() <= _Pos)
; 1184 : 			{	// report error
; 1185 : 			_DEBUG_ERROR("vector subscript out of range");
; 1186 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1187 : 			}
; 1188 : 
; 1189 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1190 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1191 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1192 : 
; 1193 : 		return (*(this->_Myfirst + _Pos));
; 1194 : 		}
; 1195 : 
; 1196 : 	reference operator[](size_type _Pos)
; 1197 : 		{	// subscript mutable sequence
; 1198 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1199 : 		if (size() <= _Pos)
; 1200 : 			{	// report error
; 1201 : 			_DEBUG_ERROR("vector subscript out of range");
; 1202 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1203 : 			}
; 1204 : 
; 1205 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1206 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1207 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1208 : 
; 1209 : 		return (*(this->_Myfirst + _Pos));
; 1210 : 		}
; 1211 : 
; 1212 : 	pointer data() _NOEXCEPT
; 1213 : 		{	// return address of first element
; 1214 : 		return (this->_Myfirst);
; 1215 : 		}
; 1216 : 
; 1217 : 	const_pointer data() const _NOEXCEPT
; 1218 : 		{	// return address of first element
; 1219 : 		return (this->_Myfirst);
; 1220 : 		}
; 1221 : 
; 1222 : 	reference front()
; 1223 : 		{	// return first element of mutable sequence
; 1224 : 		return (*begin());
; 1225 : 		}
; 1226 : 
; 1227 : 	const_reference front() const
; 1228 : 		{	// return first element of nonmutable sequence
; 1229 : 		return (*begin());
; 1230 : 		}
; 1231 : 
; 1232 : 	reference back()
; 1233 : 		{	// return last element of mutable sequence
; 1234 : 		return (*(end() - 1));
; 1235 : 		}
; 1236 : 
; 1237 : 	const_reference back() const
; 1238 : 		{	// return last element of nonmutable sequence
; 1239 : 		return (*(end() - 1));
; 1240 : 		}
; 1241 : 
; 1242 : 	void push_back(const value_type& _Val)
; 1243 : 		{	// insert element at end
; 1244 : 		if (_Inside(_STD addressof(_Val)))
; 1245 : 			{	// push back an element
; 1246 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1247 : 			if (this->_Mylast == this->_Myend)
; 1248 : 				_Reserve(1);
; 1249 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1250 : 			this->_Getal().construct(this->_Mylast,
; 1251 : 				this->_Myfirst[_Idx]);
; 1252 : 			++this->_Mylast;
; 1253 : 			}
; 1254 : 		else
; 1255 : 			{	// push back a non-element
; 1256 : 			if (this->_Mylast == this->_Myend)
; 1257 : 				_Reserve(1);
; 1258 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1259 : 			this->_Getal().construct(this->_Mylast,
; 1260 : 				_Val);
; 1261 : 			++this->_Mylast;
; 1262 : 			}
; 1263 : 		}
; 1264 : 
; 1265 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1266 : 	void pop_back()
; 1267 : 		{	// erase element at end
; 1268 : 		if (empty())
; 1269 : 			_DEBUG_ERROR("vector empty before pop");
; 1270 : 		else
; 1271 : 			{	// erase last element
; 1272 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1273 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1274 : 			--this->_Mylast;
; 1275 : 			}
; 1276 : 		}
; 1277 : 
; 1278 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1279 : 	void pop_back()
; 1280 : 		{	// erase element at end
; 1281 : 		this->_Getal().destroy(this->_Mylast - 1);
; 1282 : 		--this->_Mylast;
; 1283 : 		}
; 1284 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1285 : 
; 1286 : 	template<class _Iter>
; 1287 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1288 : 			void>::type
; 1289 : 		assign(_Iter _First, _Iter _Last)
; 1290 : 		{	// assign [_First, _Last)
; 1291 : 		clear();
; 1292 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1293 : 		}
; 1294 : 
; 1295 : 	template<class _Iter>
; 1296 : 		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
; 1297 : 		{	// assign [_First, _Last), input iterators
; 1298 : 		for (; _First != _Last; ++_First)
; 1299 : 			emplace_back(*_First);
; 1300 : 		}
; 1301 : 
; 1302 : 	template<class _Iter>
; 1303 : 		void _Assign(_Iter _First, _Iter _Last, forward_iterator_tag)
; 1304 : 		{	// assign [_First, _Last), forward iterators
; 1305 : 		if (_First == _Last)
; 1306 : 			return;	// nothing to do
; 1307 : 
; 1308 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1309 : 
; 1310 : 		if (capacity() < _Newsize)
; 1311 : 			{	// need more room, try to get it
; 1312 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1313 : 			_Tidy();
; 1314 : 			_Buy(_Newcapacity);
; 1315 : 			}
; 1316 : 
; 1317 : 		this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
; 1318 : 		}
; 1319 : 
; 1320 : 	void assign(size_type _Count, const value_type& _Val)
; 1321 : 		{	// assign _Count * _Val
; 1322 : 		clear();
; 1323 : 		insert(begin(), _Count, _Val);
; 1324 : 		}
; 1325 : 
; 1326 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1327 : 		{	// insert _Val at _Where
; 1328 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1329 : 		}
; 1330 : 
; 1331 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1332 : 		const _Ty& _Val)
; 1333 : 		{	// insert _Count * _Val at _Where
; 1334 : 		return (_Insert_n(_Where, _Count, _Val));
; 1335 : 		}
; 1336 : 
; 1337 : 	template<class _Iter>
; 1338 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1339 : 			iterator>::type
; 1340 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1341 : 		{	// insert [_First, _Last) at _Where
; 1342 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1343 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1344 : 		return (begin() + _Off);
; 1345 : 		}
; 1346 : 
; 1347 : 	template<class _Iter>
; 1348 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1349 : 			input_iterator_tag)
; 1350 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1351 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1352 : 
; 1353 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1354 : 		if (size() < _Off)
; 1355 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1356 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1357 : 
; 1358 : 		if (_First != _Last)
; 1359 : 			{	// worth doing, gather at end and rotate into place
; 1360 : 			size_type _Oldsize = size();
; 1361 : 
; 1362 : 			_TRY_BEGIN
; 1363 : 			for (; _First != _Last; ++_First)
; 1364 : 				push_back(*_First);	// append
; 1365 : 
; 1366 : 			_CATCH_ALL
; 1367 : 			erase(begin() + _Oldsize, end());
; 1368 : 			_RERAISE;
; 1369 : 			_CATCH_END
; 1370 : 
; 1371 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1372 : 			}
; 1373 : 		}
; 1374 : 
; 1375 : 	template<class _Iter>
; 1376 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1377 : 			forward_iterator_tag)
; 1378 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_VICONT(_Where) != this
; 1381 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1382 : 			|| this->_Mylast < _VIPTR(_Where))
; 1383 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1384 : 		_DEBUG_RANGE(_First, _Last);
; 1385 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1386 : 
; 1387 : 		size_type _Count = 0;
; 1388 : 		_Distance(_First, _Last, _Count);
; 1389 : 
; 1390 : 		if (_Count == 0)
; 1391 : 			;
; 1392 : 		else if (_Unused_capacity() < _Count)
; 1393 : 			{	// not enough room, reallocate
; 1394 : 			if (max_size() - size() < _Count)
; 1395 : 				_Xlen();	// result too long
; 1396 : 
; 1397 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1398 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1399 : 			pointer _Ptr = _Newvec;
; 1400 : 
; 1401 : 			_TRY_BEGIN
; 1402 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1403 : 				_Newvec);	// copy prefix
; 1404 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1405 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1406 : 				_Ptr);	// copy suffix
; 1407 : 			_CATCH_ALL
; 1408 : 			_Destroy(_Newvec, _Ptr);
; 1409 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1410 : 			_RERAISE;
; 1411 : 			_CATCH_END
; 1412 : 
; 1413 : 			_Count += size();
; 1414 : 			if (this->_Myfirst != pointer())
; 1415 : 				{	// destroy and deallocate old array
; 1416 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1417 : 				this->_Getal().deallocate(this->_Myfirst,
; 1418 : 					this->_Myend - this->_Myfirst);
; 1419 : 				}
; 1420 : 
; 1421 : 			this->_Orphan_all();
; 1422 : 			this->_Myend = _Newvec + _Capacity;
; 1423 : 			this->_Mylast = _Newvec + _Count;
; 1424 : 			this->_Myfirst = _Newvec;
; 1425 : 			}
; 1426 : 		else
; 1427 : 			{	// new stuff fits, append and rotate into place
; 1428 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1429 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1430 : 				this->_Mylast + _Count);
; 1431 : 			this->_Mylast += _Count;
; 1432 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1433 : 			}
; 1434 : 		}
; 1435 : 
; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 	iterator erase(const_iterator _Where)
; 1438 : 		{	// erase element at where
; 1439 : 		if (_VICONT(_Where) != this
; 1440 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1441 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1442 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1443 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1444 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1445 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1446 : 		--this->_Mylast;
; 1447 : 		return (_Make_iter(_Where));
; 1448 : 		}
; 1449 : 
; 1450 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 	iterator erase(const_iterator _Where)
; 1452 : 		{	// erase element at where
; 1453 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1454 : 			_VIPTR(_Where));
; 1455 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1456 : 		--this->_Mylast;
; 1457 : 		return (_Make_iter(_Where));
; 1458 : 		}
; 1459 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1460 : 
; 1461 : 	iterator erase(const_iterator _First_arg,
; 1462 : 		const_iterator _Last_arg)
; 1463 : 		{	// erase [_First, _Last)
; 1464 : 		if (_First_arg == begin() && _Last_arg == end())
; 1465 : 			clear();
; 1466 : 		else if (_First_arg != _Last_arg)
; 1467 : 			{	// clear partial
; 1468 : 			iterator _First = _Make_iter(_First_arg);
; 1469 : 			iterator _Last = _Make_iter(_Last_arg);
; 1470 : 
; 1471 : 			if (_First != _Last)
; 1472 : 				{	// worth doing, copy down over hole
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 				if (_Last < _First || _VICONT(_First) != this
; 1475 : 					|| _VIPTR(_First) < this->_Myfirst
; 1476 : 					|| this->_Mylast < _VIPTR(_Last))
; 1477 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1478 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1479 : 					_VIPTR(_First));
; 1480 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1484 : 					_VIPTR(_First));
; 1485 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1486 : 
; 1487 : 				_Destroy(_Ptr, this->_Mylast);
; 1488 : 				this->_Mylast = _Ptr;
; 1489 : 				}
; 1490 : 			}
; 1491 : 		return (_Make_iter(_First_arg));
; 1492 : 		}
; 1493 : 
; 1494 : 	void _Pop_back_n(size_type _Count)
; 1495 : 		{	// erase _Count elements at end
; 1496 : 		pointer _Ptr = this->_Mylast - _Count;
; 1497 : 
; 1498 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1499 : 		_Orphan_range(_Ptr, this->_Mylast);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 
; 1502 : 		_Destroy(_Ptr, this->_Mylast);
; 1503 : 		this->_Mylast = _Ptr;
; 1504 : 		}
; 1505 : 
; 1506 : 	void clear() _NOEXCEPT
; 1507 : 		{	// erase all
; 1508 : 		this->_Orphan_all();
; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1510 : 		this->_Mylast = this->_Myfirst;
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		{	// exchange contents with _Right
; 1515 : 		if (this == &_Right)
; 1516 : 			;	// same object, do nothing
; 1517 : 		else if (this->_Getal() == _Right._Getal())
; 1518 : 			{	// same allocator, swap control information
; 1519 : 			this->_Swap_all(_Right);
; 1520 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1521 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1522 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1529 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1530 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1531 : 			}
; 1532 : 
; 1533 : 		else
; 1534 : 			{	// containers are incompatible
; 1535 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1536 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1537 : 
; 1538 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1539 : 			_XSTD terminate();
; 1540 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1541 : 			}
; 1542 : 		}
; 1543 : 
; 1544 : protected:
; 1545 : 	bool _Buy(size_type _Capacity)
; 1546 : 		{	// allocate array with _Capacity elements
; 1547 : 		this->_Myfirst = pointer();
; 1548 : 		this->_Mylast = pointer();
; 1549 : 		this->_Myend = pointer();
; 1550 : 
; 1551 : 		if (_Capacity == 0)
; 1552 : 			return (false);
; 1553 : 		else if (max_size() < _Capacity)
; 1554 : 			_Xlen();	// result too long
; 1555 : 		else
; 1556 : 			{	// nonempty array, allocate storage
; 1557 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1558 : 			this->_Mylast = this->_Myfirst;
; 1559 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1560 : 			}
; 1561 : 		return (true);
; 1562 : 		}
; 1563 : 
; 1564 : 	void _Destroy(pointer _First, pointer _Last)
; 1565 : 		{	// destroy [_First, _Last) using allocator
; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}
; 1569 : 
; 1570 : 	size_type _Grow_to(size_type _Count) const
; 1571 : 		{	// grow by 50% or at least to _Count
; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00060	8b d0		 mov	 edx, eax
  00062	d1 ea		 shr	 edx, 1
  00064	2b fa		 sub	 edi, edx
  00066	3b f8		 cmp	 edi, eax
  00068	73 13		 jae	 SHORT $LN27@Reserve
  0006a	33 c0		 xor	 eax, eax

; 1576 : 		if (_Capacity < _Count)

  0006c	3b c6		 cmp	 eax, esi
  0006e	5f		 pop	 edi
  0006f	0f 42 c6	 cmovb	 eax, esi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx

; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));

  00074	89 45 08	 mov	 DWORD PTR __Count$[ebp], eax

; 1618 : 			}
; 1619 : 		}

  00077	5d		 pop	 ebp

; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));

  00078	e9 00 00 00 00	 jmp	 ?_Reallocate@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IAEXI@Z ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Reallocate
$LN27@Reserve:

; 1149 : 		}
; 1150 : 
; 1151 : 	size_type max_size() const _NOEXCEPT
; 1152 : 		{	// return maximum possible length of sequence
; 1153 : 		return (this->_Getal().max_size());
; 1154 : 		}
; 1155 : 
; 1156 : 	bool empty() const _NOEXCEPT
; 1157 : 		{	// test if sequence is empty
; 1158 : 		return (this->_Myfirst == this->_Mylast);
; 1159 : 		}
; 1160 : 
; 1161 : 	_Alloc get_allocator() const _NOEXCEPT
; 1162 : 		{	// return allocator object for values
; 1163 : 		return (this->_Getal());
; 1164 : 		}
; 1165 : 
; 1166 : 	const_reference at(size_type _Pos) const
; 1167 : 		{	// subscript nonmutable sequence with checking
; 1168 : 		if (size() <= _Pos)
; 1169 : 			_Xran();
; 1170 : 		return (*(this->_Myfirst + _Pos));
; 1171 : 		}
; 1172 : 
; 1173 : 	reference at(size_type _Pos)
; 1174 : 		{	// subscript mutable sequence with checking
; 1175 : 		if (size() <= _Pos)
; 1176 : 			_Xran();
; 1177 : 		return (*(this->_Myfirst + _Pos));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reference operator[](size_type _Pos) const
; 1181 : 		{	// subscript nonmutable sequence
; 1182 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1183 : 		if (size() <= _Pos)
; 1184 : 			{	// report error
; 1185 : 			_DEBUG_ERROR("vector subscript out of range");
; 1186 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1187 : 			}
; 1188 : 
; 1189 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1190 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1191 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1192 : 
; 1193 : 		return (*(this->_Myfirst + _Pos));
; 1194 : 		}
; 1195 : 
; 1196 : 	reference operator[](size_type _Pos)
; 1197 : 		{	// subscript mutable sequence
; 1198 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1199 : 		if (size() <= _Pos)
; 1200 : 			{	// report error
; 1201 : 			_DEBUG_ERROR("vector subscript out of range");
; 1202 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1203 : 			}
; 1204 : 
; 1205 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1206 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1207 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1208 : 
; 1209 : 		return (*(this->_Myfirst + _Pos));
; 1210 : 		}
; 1211 : 
; 1212 : 	pointer data() _NOEXCEPT
; 1213 : 		{	// return address of first element
; 1214 : 		return (this->_Myfirst);
; 1215 : 		}
; 1216 : 
; 1217 : 	const_pointer data() const _NOEXCEPT
; 1218 : 		{	// return address of first element
; 1219 : 		return (this->_Myfirst);
; 1220 : 		}
; 1221 : 
; 1222 : 	reference front()
; 1223 : 		{	// return first element of mutable sequence
; 1224 : 		return (*begin());
; 1225 : 		}
; 1226 : 
; 1227 : 	const_reference front() const
; 1228 : 		{	// return first element of nonmutable sequence
; 1229 : 		return (*begin());
; 1230 : 		}
; 1231 : 
; 1232 : 	reference back()
; 1233 : 		{	// return last element of mutable sequence
; 1234 : 		return (*(end() - 1));
; 1235 : 		}
; 1236 : 
; 1237 : 	const_reference back() const
; 1238 : 		{	// return last element of nonmutable sequence
; 1239 : 		return (*(end() - 1));
; 1240 : 		}
; 1241 : 
; 1242 : 	void push_back(const value_type& _Val)
; 1243 : 		{	// insert element at end
; 1244 : 		if (_Inside(_STD addressof(_Val)))
; 1245 : 			{	// push back an element
; 1246 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1247 : 			if (this->_Mylast == this->_Myend)
; 1248 : 				_Reserve(1);
; 1249 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1250 : 			this->_Getal().construct(this->_Mylast,
; 1251 : 				this->_Myfirst[_Idx]);
; 1252 : 			++this->_Mylast;
; 1253 : 			}
; 1254 : 		else
; 1255 : 			{	// push back a non-element
; 1256 : 			if (this->_Mylast == this->_Myend)
; 1257 : 				_Reserve(1);
; 1258 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1259 : 			this->_Getal().construct(this->_Mylast,
; 1260 : 				_Val);
; 1261 : 			++this->_Mylast;
; 1262 : 			}
; 1263 : 		}
; 1264 : 
; 1265 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1266 : 	void pop_back()
; 1267 : 		{	// erase element at end
; 1268 : 		if (empty())
; 1269 : 			_DEBUG_ERROR("vector empty before pop");
; 1270 : 		else
; 1271 : 			{	// erase last element
; 1272 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1273 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1274 : 			--this->_Mylast;
; 1275 : 			}
; 1276 : 		}
; 1277 : 
; 1278 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1279 : 	void pop_back()
; 1280 : 		{	// erase element at end
; 1281 : 		this->_Getal().destroy(this->_Mylast - 1);
; 1282 : 		--this->_Mylast;
; 1283 : 		}
; 1284 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1285 : 
; 1286 : 	template<class _Iter>
; 1287 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1288 : 			void>::type
; 1289 : 		assign(_Iter _First, _Iter _Last)
; 1290 : 		{	// assign [_First, _Last)
; 1291 : 		clear();
; 1292 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1293 : 		}
; 1294 : 
; 1295 : 	template<class _Iter>
; 1296 : 		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
; 1297 : 		{	// assign [_First, _Last), input iterators
; 1298 : 		for (; _First != _Last; ++_First)
; 1299 : 			emplace_back(*_First);
; 1300 : 		}
; 1301 : 
; 1302 : 	template<class _Iter>
; 1303 : 		void _Assign(_Iter _First, _Iter _Last, forward_iterator_tag)
; 1304 : 		{	// assign [_First, _Last), forward iterators
; 1305 : 		if (_First == _Last)
; 1306 : 			return;	// nothing to do
; 1307 : 
; 1308 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1309 : 
; 1310 : 		if (capacity() < _Newsize)
; 1311 : 			{	// need more room, try to get it
; 1312 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1313 : 			_Tidy();
; 1314 : 			_Buy(_Newcapacity);
; 1315 : 			}
; 1316 : 
; 1317 : 		this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
; 1318 : 		}
; 1319 : 
; 1320 : 	void assign(size_type _Count, const value_type& _Val)
; 1321 : 		{	// assign _Count * _Val
; 1322 : 		clear();
; 1323 : 		insert(begin(), _Count, _Val);
; 1324 : 		}
; 1325 : 
; 1326 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1327 : 		{	// insert _Val at _Where
; 1328 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1329 : 		}
; 1330 : 
; 1331 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1332 : 		const _Ty& _Val)
; 1333 : 		{	// insert _Count * _Val at _Where
; 1334 : 		return (_Insert_n(_Where, _Count, _Val));
; 1335 : 		}
; 1336 : 
; 1337 : 	template<class _Iter>
; 1338 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1339 : 			iterator>::type
; 1340 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1341 : 		{	// insert [_First, _Last) at _Where
; 1342 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1343 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1344 : 		return (begin() + _Off);
; 1345 : 		}
; 1346 : 
; 1347 : 	template<class _Iter>
; 1348 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1349 : 			input_iterator_tag)
; 1350 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1351 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1352 : 
; 1353 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1354 : 		if (size() < _Off)
; 1355 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1356 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1357 : 
; 1358 : 		if (_First != _Last)
; 1359 : 			{	// worth doing, gather at end and rotate into place
; 1360 : 			size_type _Oldsize = size();
; 1361 : 
; 1362 : 			_TRY_BEGIN
; 1363 : 			for (; _First != _Last; ++_First)
; 1364 : 				push_back(*_First);	// append
; 1365 : 
; 1366 : 			_CATCH_ALL
; 1367 : 			erase(begin() + _Oldsize, end());
; 1368 : 			_RERAISE;
; 1369 : 			_CATCH_END
; 1370 : 
; 1371 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1372 : 			}
; 1373 : 		}
; 1374 : 
; 1375 : 	template<class _Iter>
; 1376 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1377 : 			forward_iterator_tag)
; 1378 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_VICONT(_Where) != this
; 1381 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1382 : 			|| this->_Mylast < _VIPTR(_Where))
; 1383 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1384 : 		_DEBUG_RANGE(_First, _Last);
; 1385 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1386 : 
; 1387 : 		size_type _Count = 0;
; 1388 : 		_Distance(_First, _Last, _Count);
; 1389 : 
; 1390 : 		if (_Count == 0)
; 1391 : 			;
; 1392 : 		else if (_Unused_capacity() < _Count)
; 1393 : 			{	// not enough room, reallocate
; 1394 : 			if (max_size() - size() < _Count)
; 1395 : 				_Xlen();	// result too long
; 1396 : 
; 1397 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1398 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1399 : 			pointer _Ptr = _Newvec;
; 1400 : 
; 1401 : 			_TRY_BEGIN
; 1402 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1403 : 				_Newvec);	// copy prefix
; 1404 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1405 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1406 : 				_Ptr);	// copy suffix
; 1407 : 			_CATCH_ALL
; 1408 : 			_Destroy(_Newvec, _Ptr);
; 1409 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1410 : 			_RERAISE;
; 1411 : 			_CATCH_END
; 1412 : 
; 1413 : 			_Count += size();
; 1414 : 			if (this->_Myfirst != pointer())
; 1415 : 				{	// destroy and deallocate old array
; 1416 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1417 : 				this->_Getal().deallocate(this->_Myfirst,
; 1418 : 					this->_Myend - this->_Myfirst);
; 1419 : 				}
; 1420 : 
; 1421 : 			this->_Orphan_all();
; 1422 : 			this->_Myend = _Newvec + _Capacity;
; 1423 : 			this->_Mylast = _Newvec + _Count;
; 1424 : 			this->_Myfirst = _Newvec;
; 1425 : 			}
; 1426 : 		else
; 1427 : 			{	// new stuff fits, append and rotate into place
; 1428 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1429 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1430 : 				this->_Mylast + _Count);
; 1431 : 			this->_Mylast += _Count;
; 1432 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1433 : 			}
; 1434 : 		}
; 1435 : 
; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 	iterator erase(const_iterator _Where)
; 1438 : 		{	// erase element at where
; 1439 : 		if (_VICONT(_Where) != this
; 1440 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1441 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1442 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1443 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1444 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1445 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1446 : 		--this->_Mylast;
; 1447 : 		return (_Make_iter(_Where));
; 1448 : 		}
; 1449 : 
; 1450 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 	iterator erase(const_iterator _Where)
; 1452 : 		{	// erase element at where
; 1453 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1454 : 			_VIPTR(_Where));
; 1455 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1456 : 		--this->_Mylast;
; 1457 : 		return (_Make_iter(_Where));
; 1458 : 		}
; 1459 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1460 : 
; 1461 : 	iterator erase(const_iterator _First_arg,
; 1462 : 		const_iterator _Last_arg)
; 1463 : 		{	// erase [_First, _Last)
; 1464 : 		if (_First_arg == begin() && _Last_arg == end())
; 1465 : 			clear();
; 1466 : 		else if (_First_arg != _Last_arg)
; 1467 : 			{	// clear partial
; 1468 : 			iterator _First = _Make_iter(_First_arg);
; 1469 : 			iterator _Last = _Make_iter(_Last_arg);
; 1470 : 
; 1471 : 			if (_First != _Last)
; 1472 : 				{	// worth doing, copy down over hole
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 				if (_Last < _First || _VICONT(_First) != this
; 1475 : 					|| _VIPTR(_First) < this->_Myfirst
; 1476 : 					|| this->_Mylast < _VIPTR(_Last))
; 1477 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1478 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1479 : 					_VIPTR(_First));
; 1480 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1484 : 					_VIPTR(_First));
; 1485 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1486 : 
; 1487 : 				_Destroy(_Ptr, this->_Mylast);
; 1488 : 				this->_Mylast = _Ptr;
; 1489 : 				}
; 1490 : 			}
; 1491 : 		return (_Make_iter(_First_arg));
; 1492 : 		}
; 1493 : 
; 1494 : 	void _Pop_back_n(size_type _Count)
; 1495 : 		{	// erase _Count elements at end
; 1496 : 		pointer _Ptr = this->_Mylast - _Count;
; 1497 : 
; 1498 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1499 : 		_Orphan_range(_Ptr, this->_Mylast);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 
; 1502 : 		_Destroy(_Ptr, this->_Mylast);
; 1503 : 		this->_Mylast = _Ptr;
; 1504 : 		}
; 1505 : 
; 1506 : 	void clear() _NOEXCEPT
; 1507 : 		{	// erase all
; 1508 : 		this->_Orphan_all();
; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1510 : 		this->_Mylast = this->_Myfirst;
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		{	// exchange contents with _Right
; 1515 : 		if (this == &_Right)
; 1516 : 			;	// same object, do nothing
; 1517 : 		else if (this->_Getal() == _Right._Getal())
; 1518 : 			{	// same allocator, swap control information
; 1519 : 			this->_Swap_all(_Right);
; 1520 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1521 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1522 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1529 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1530 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1531 : 			}
; 1532 : 
; 1533 : 		else
; 1534 : 			{	// containers are incompatible
; 1535 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1536 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1537 : 
; 1538 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1539 : 			_XSTD terminate();
; 1540 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1541 : 			}
; 1542 : 		}
; 1543 : 
; 1544 : protected:
; 1545 : 	bool _Buy(size_type _Capacity)
; 1546 : 		{	// allocate array with _Capacity elements
; 1547 : 		this->_Myfirst = pointer();
; 1548 : 		this->_Mylast = pointer();
; 1549 : 		this->_Myend = pointer();
; 1550 : 
; 1551 : 		if (_Capacity == 0)
; 1552 : 			return (false);
; 1553 : 		else if (max_size() < _Capacity)
; 1554 : 			_Xlen();	// result too long
; 1555 : 		else
; 1556 : 			{	// nonempty array, allocate storage
; 1557 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1558 : 			this->_Mylast = this->_Myfirst;
; 1559 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1560 : 			}
; 1561 : 		return (true);
; 1562 : 		}
; 1563 : 
; 1564 : 	void _Destroy(pointer _First, pointer _Last)
; 1565 : 		{	// destroy [_First, _Last) using allocator
; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}
; 1569 : 
; 1570 : 	size_type _Grow_to(size_type _Count) const
; 1571 : 		{	// grow by 50% or at least to _Count
; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0007d	03 c2		 add	 eax, edx

; 1576 : 		if (_Capacity < _Count)

  0007f	3b c6		 cmp	 eax, esi
  00081	5f		 pop	 edi
  00082	0f 42 c6	 cmovb	 eax, esi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx

; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));

  00087	89 45 08	 mov	 DWORD PTR __Count$[ebp], eax

; 1618 : 			}
; 1619 : 		}

  0008a	5d		 pop	 ebp

; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));

  0008b	e9 00 00 00 00	 jmp	 ?_Reallocate@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IAEXI@Z ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Reallocate
$LN2@Reserve:
  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx

; 1618 : 			}
; 1619 : 		}

  00093	5d		 pop	 ebp
  00094	c2 04 00	 ret	 4
$LN43@Reserve:

; 1620 : 
; 1621 : 	void _Tidy()
; 1622 : 		{	// free all storage
; 1623 : 		if (this->_Myfirst != pointer())
; 1624 : 			{	// something to free, destroy and deallocate it
; 1625 : 			this->_Orphan_all();
; 1626 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1627 : 			this->_Getal().deallocate(this->_Myfirst,
; 1628 : 				this->_Myend - this->_Myfirst);
; 1629 : 			this->_Myfirst = pointer();
; 1630 : 			this->_Mylast = pointer();
; 1631 : 			this->_Myend = pointer();
; 1632 : 			}
; 1633 : 		}
; 1634 : 
; 1635 : 	template<class _Iter>
; 1636 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1637 : 		{	// copy initializing [_First, _Last), using allocator
; 1638 : 		_Alty _Alval(this->_Getal());
; 1639 : 		return (_Uninitialized_copy(_First, _Last,
; 1640 : 			_Ptr, _Alval));
; 1641 : 		}
; 1642 : 
; 1643 : 	template<class _Iter>
; 1644 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1645 : 		{	// move initializing [_First, _Last), using allocator
; 1646 : 		_Alty _Alval(this->_Getal());
; 1647 : 		return (_Uninitialized_move(_First, _Last,
; 1648 : 			_Ptr, _Alval));
; 1649 : 		}
; 1650 : 
; 1651 : 	iterator _Insert_n(const_iterator _Where,
; 1652 : 		size_type _Count, const value_type& _Val)
; 1653 : 		{	// insert _Count * _Val at _Where
; 1654 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1655 : 		if (_VICONT(_Where) != this
; 1656 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1657 : 			|| this->_Mylast < _VIPTR(_Where))
; 1658 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1659 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1660 : 
; 1661 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1662 : 		if (_Count == 0)
; 1663 : 			;
; 1664 : 		else if (_Unused_capacity() < _Count)
; 1665 : 			{	// not enough room, reallocate
; 1666 : 			if (max_size() - size() < _Count)
; 1667 : 				_Xlen();	// result too long
; 1668 : 
; 1669 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1670 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1671 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst;
; 1672 : 			int _Ncopied = 0;
; 1673 : 
; 1674 : 			_TRY_BEGIN
; 1675 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1676 : 				_STD addressof(_Val));	// add new stuff
; 1677 : 			++_Ncopied;
; 1678 : 			_Umove(this->_Myfirst, _VIPTR(_Where),
; 1679 : 				_Newvec);	// copy prefix
; 1680 : 			++_Ncopied;
; 1681 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1682 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1683 : 			_CATCH_ALL
; 1684 : 			if (1 < _Ncopied)
; 1685 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1686 : 			if (0 < _Ncopied)
; 1687 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1688 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1689 : 			_RERAISE;
; 1690 : 			_CATCH_END
; 1691 : 
; 1692 : 			_Count += size();
; 1693 : 			if (this->_Myfirst != pointer())
; 1694 : 				{	// destroy and deallocate old array
; 1695 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1696 : 				this->_Getal().deallocate(this->_Myfirst,
; 1697 : 					this->_Myend - this->_Myfirst);
; 1698 : 				}
; 1699 : 
; 1700 : 			this->_Orphan_all();
; 1701 : 			this->_Myend = _Newvec + _Capacity;
; 1702 : 			this->_Mylast = _Newvec + _Count;
; 1703 : 			this->_Myfirst = _Newvec;
; 1704 : 			}
; 1705 : 		else if ((size_type)(this->_Mylast - _VIPTR(_Where))
; 1706 : 			< _Count)
; 1707 : 			{	// new stuff spills off end
; 1708 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1709 : 
; 1710 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1711 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1712 : 
; 1713 : 			_TRY_BEGIN
; 1714 : 			_Ufill(this->_Mylast,
; 1715 : 				_Count - (this->_Mylast - _VIPTR(_Where)),
; 1716 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1717 : 			_CATCH_ALL
; 1718 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1719 : 				this->_Mylast + _Count);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			this->_Mylast += _Count;
; 1724 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1725 : 			_STD fill(_VIPTR(_Where), this->_Mylast - _Count,
; 1726 : 				_Tmp);	// insert up to old end
; 1727 : 			}
; 1728 : 		else
; 1729 : 			{	// new stuff can all be assigned
; 1730 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1731 : 
; 1732 : 			pointer _Oldend = this->_Mylast;
; 1733 : 			this->_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1734 : 				this->_Mylast);	// copy suffix
; 1735 : 
; 1736 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1737 : 			_Copy_backward(_VIPTR(_Where), _Oldend - _Count,
; 1738 : 				_Oldend);	// copy hole
; 1739 : 			_STD fill(_VIPTR(_Where),
; 1740 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1741 : 			}
; 1742 : 		return (begin() + _Off);
; 1743 : 		}
; 1744 : 
; 1745 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1746 : 		{	// copy initializing _Count * _Val, using allocator
; 1747 : 		_Alty _Alval(this->_Getal());
; 1748 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, _Alval);
; 1749 : 		return (_Ptr + _Count);
; 1750 : 		}
; 1751 : 
; 1752 : 	__declspec(noreturn) void _Xlen() const
; 1753 : 		{	// report a length_error
; 1754 : 		_Xlength_error("vector<T> too long");

  00097	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0009c	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN45@Reserve:
$LN42@Reserve:
  000a1	cc		 int	 3
?_Reserve@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IAEXI@Z ENDP ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Ptr$2 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Size$1$ = 8						; size = 4
__Cat$3 = 8						; size = 1
__Count$ = 8						; size = 4
__Alval$4 = 11						; size = 1
?_Reallocate@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IAEXI@Z PROC ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Reallocate, COMDAT
; _this$ = ecx

; 1587 : 		{	// move to array of exactly _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Reallocate@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b d9		 mov	 ebx, ecx
; File a:\vs\vc\include\xmemory0

; 25   : 	if (_Count == 0)

  0002d	8b 7d 08	 mov	 edi, DWORD PTR __Count$[ebp]
  00030	33 f6		 xor	 esi, esi
  00032	89 75 ec	 mov	 DWORD PTR __Ptr$2[ebp], esi
  00035	85 ff		 test	 edi, edi
  00037	74 25		 je	 SHORT $LN16@Reallocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00039	81 ff aa aa aa
	0a		 cmp	 edi, 178956970		; 0aaaaaaaH
  0003f	77 18		 ja	 SHORT $LN15@Reallocate
  00041	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  00044	c1 e0 03	 shl	 eax, 3
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0004d	8b f0		 mov	 esi, eax
  0004f	83 c4 04	 add	 esp, 4
  00052	89 75 ec	 mov	 DWORD PTR __Ptr$2[ebp], esi
  00055	85 f6		 test	 esi, esi
  00057	75 05		 jne	 SHORT $LN16@Reallocate
$LN15@Reallocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00059	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN60@Reallocate:
$LN16@Reallocate:
; File a:\vs\vc\include\xmemory

; 484  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  0005e	ff 75 08	 push	 DWORD PTR __Cat$3[ebp]
  00061	8d 45 0b	 lea	 eax, DWORD PTR __Alval$4[ebp]
; File a:\vs\vc\include\vector

; 1590 : 		_TRY_BEGIN

  00064	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File a:\vs\vc\include\xmemory

; 484  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  0006b	6a 00		 push	 0
  0006d	50		 push	 eax
  0006e	56		 push	 esi
  0006f	ff 73 04	 push	 DWORD PTR [ebx+4]
  00072	ff 33		 push	 DWORD PTR [ebx]
  00074	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUSPDTVertex@@PAU1@V?$allocator@USPDTVertex@@@std@@U1@@std@@YAPAUSPDTVertex@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<SPDTVertex *,SPDTVertex *,std::allocator<SPDTVertex>,SPDTVertex>
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00079	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0007c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00081	2b 0b		 sub	 ecx, DWORD PTR [ebx]
; File a:\vs\vc\include\xmemory

; 484  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00083	83 c4 18	 add	 esp, 24			; 00000018H
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00086	f7 e9		 imul	 ecx

; 1595 : 		_CATCH_END
; 1596 : 
; 1597 : 		size_type _Size = size();
; 1598 : 		if (this->_Myfirst != pointer())

  00088	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  0008a	c1 fa 02	 sar	 edx, 2
  0008d	8b ca		 mov	 ecx, edx
  0008f	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00092	03 ca		 add	 ecx, edx
  00094	89 4d 08	 mov	 DWORD PTR __Size$1$[ebp], ecx

; 1595 : 		_CATCH_END
; 1596 : 
; 1597 : 		size_type _Size = size();
; 1598 : 		if (this->_Myfirst != pointer())

  00097	85 c0		 test	 eax, eax
  00099	74 0c		 je	 SHORT $LN54@Reallocate
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  0009b	50		 push	 eax
  0009c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000a1	8b 4d 08	 mov	 ecx, DWORD PTR __Size$1$[ebp]
  000a4	83 c4 04	 add	 esp, 4
$LN54@Reallocate:
; File a:\vs\vc\include\vector

; 1606 : 		this->_Myend = _Ptr + _Count;

  000a7	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]

; 1607 : 		this->_Mylast = _Ptr + _Size;
; 1608 : 		this->_Myfirst = _Ptr;

  000aa	89 33		 mov	 DWORD PTR [ebx], esi
  000ac	8d 04 c6	 lea	 eax, DWORD PTR [esi+eax*8]
  000af	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  000b2	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  000b5	8d 04 c6	 lea	 eax, DWORD PTR [esi+eax*8]
  000b8	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 1609 : 		}

  000bb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000be	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c5	59		 pop	 ecx
  000c6	5f		 pop	 edi
  000c7	5e		 pop	 esi
  000c8	5b		 pop	 ebx
  000c9	8b e5		 mov	 esp, ebp
  000cb	5d		 pop	 ebp
  000cc	c2 04 00	 ret	 4
__catch$?_Reallocate@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IAEXI@Z$0:
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  000cf	ff 75 ec	 push	 DWORD PTR __Ptr$2[ebp]
  000d2	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000d7	83 c4 04	 add	 esp, 4
; File a:\vs\vc\include\vector

; 1594 : 		_RERAISE;

  000da	6a 00		 push	 0
  000dc	6a 00		 push	 0
  000de	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN61@Reallocate:
$LN59@Reallocate:
  000e3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IAEXI@Z ENDP ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Reallocate
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Inside@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IBE_NPBUSPDTVertex@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IBE_NPBUSPDTVertex@@@Z PROC ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Inside, COMDAT
; _this$ = ecx

; 1582 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1583 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0a		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 06		 ja	 SHORT $LN3@Inside
  0000f	b0 01		 mov	 al, 1

; 1584 : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
$LN3@Inside:

; 1583 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00015	32 c0		 xor	 al, al

; 1584 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?_Inside@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IBE_NPBUSPDTVertex@@@Z ENDP ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IBEII@Z PROC ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Grow_to, COMDAT
; _this$ = ecx

; 1571 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1010 : 		return (this->_Myend - this->_Myfirst);

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00006	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000b	2b 11		 sub	 edx, DWORD PTR [ecx]
  0000d	f7 ea		 imul	 edx
  0000f	56		 push	 esi
  00010	c1 fa 02	 sar	 edx, 2

; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00013	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 1010 : 		return (this->_Myend - this->_Myfirst);

  00018	8b f2		 mov	 esi, edx
  0001a	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0001d	03 f2		 add	 esi, edx

; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0001f	8b ce		 mov	 ecx, esi
  00021	d1 e9		 shr	 ecx, 1
  00023	2b c1		 sub	 eax, ecx
  00025	3b c6		 cmp	 eax, esi
  00027	73 10		 jae	 SHORT $LN4@Grow_to
  00029	33 f6		 xor	 esi, esi

; 1576 : 		if (_Capacity < _Count)

  0002b	3b 75 08	 cmp	 esi, DWORD PTR __Count$[ebp]
  0002e	0f 42 75 08	 cmovb	 esi, DWORD PTR __Count$[ebp]

; 1577 : 			_Capacity = _Count;
; 1578 : 		return (_Capacity);

  00032	8b c6		 mov	 eax, esi
  00034	5e		 pop	 esi

; 1579 : 		}

  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
$LN4@Grow_to:

; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00039	03 f1		 add	 esi, ecx

; 1576 : 		if (_Capacity < _Count)

  0003b	3b 75 08	 cmp	 esi, DWORD PTR __Count$[ebp]
  0003e	0f 42 75 08	 cmovb	 esi, DWORD PTR __Count$[ebp]

; 1577 : 			_Capacity = _Count;
; 1578 : 		return (_Capacity);

  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi

; 1579 : 		}

  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
?_Grow_to@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IBEII@Z ENDP ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Destroy@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IAEXPAUSPDTVertex@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IAEXPAUSPDTVertex@@0@Z PROC ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Destroy, COMDAT
; _this$ = ecx

; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IAEXPAUSPDTVertex@@0@Z ENDP ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
;	COMDAT ?push_back@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAEXABUSPDTVertex@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAEXABUSPDTVertex@@@Z PROC ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::push_back, COMDAT
; _this$ = ecx

; 1243 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 1264 : 
; 1265 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1266 : 	void pop_back()
; 1267 : 		{	// erase element at end
; 1268 : 		if (empty())
; 1269 : 			_DEBUG_ERROR("vector empty before pop");
; 1270 : 		else
; 1271 : 			{	// erase last element
; 1272 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1273 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1274 : 			--this->_Mylast;
; 1275 : 			}
; 1276 : 		}
; 1277 : 
; 1278 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1279 : 	void pop_back()
; 1280 : 		{	// erase element at end
; 1281 : 		this->_Getal().destroy(this->_Mylast - 1);
; 1282 : 		--this->_Mylast;
; 1283 : 		}
; 1284 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1285 : 
; 1286 : 	template<class _Iter>
; 1287 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1288 : 			void>::type
; 1289 : 		assign(_Iter _First, _Iter _Last)
; 1290 : 		{	// assign [_First, _Last)
; 1291 : 		clear();
; 1292 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1293 : 		}
; 1294 : 
; 1295 : 	template<class _Iter>
; 1296 : 		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
; 1297 : 		{	// assign [_First, _Last), input iterators
; 1298 : 		for (; _First != _Last; ++_First)
; 1299 : 			emplace_back(*_First);
; 1300 : 		}
; 1301 : 
; 1302 : 	template<class _Iter>
; 1303 : 		void _Assign(_Iter _First, _Iter _Last, forward_iterator_tag)
; 1304 : 		{	// assign [_First, _Last), forward iterators
; 1305 : 		if (_First == _Last)
; 1306 : 			return;	// nothing to do
; 1307 : 
; 1308 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1309 : 
; 1310 : 		if (capacity() < _Newsize)
; 1311 : 			{	// need more room, try to get it
; 1312 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1313 : 			_Tidy();
; 1314 : 			_Buy(_Newcapacity);
; 1315 : 			}
; 1316 : 
; 1317 : 		this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
; 1318 : 		}
; 1319 : 
; 1320 : 	void assign(size_type _Count, const value_type& _Val)
; 1321 : 		{	// assign _Count * _Val
; 1322 : 		clear();
; 1323 : 		insert(begin(), _Count, _Val);
; 1324 : 		}
; 1325 : 
; 1326 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1327 : 		{	// insert _Val at _Where
; 1328 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1329 : 		}
; 1330 : 
; 1331 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1332 : 		const _Ty& _Val)
; 1333 : 		{	// insert _Count * _Val at _Where
; 1334 : 		return (_Insert_n(_Where, _Count, _Val));
; 1335 : 		}
; 1336 : 
; 1337 : 	template<class _Iter>
; 1338 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1339 : 			iterator>::type
; 1340 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1341 : 		{	// insert [_First, _Last) at _Where
; 1342 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1343 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1344 : 		return (begin() + _Off);
; 1345 : 		}
; 1346 : 
; 1347 : 	template<class _Iter>
; 1348 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1349 : 			input_iterator_tag)
; 1350 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1351 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1352 : 
; 1353 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1354 : 		if (size() < _Off)
; 1355 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1356 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1357 : 
; 1358 : 		if (_First != _Last)
; 1359 : 			{	// worth doing, gather at end and rotate into place
; 1360 : 			size_type _Oldsize = size();
; 1361 : 
; 1362 : 			_TRY_BEGIN
; 1363 : 			for (; _First != _Last; ++_First)
; 1364 : 				push_back(*_First);	// append
; 1365 : 
; 1366 : 			_CATCH_ALL
; 1367 : 			erase(begin() + _Oldsize, end());
; 1368 : 			_RERAISE;
; 1369 : 			_CATCH_END
; 1370 : 
; 1371 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1372 : 			}
; 1373 : 		}
; 1374 : 
; 1375 : 	template<class _Iter>
; 1376 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1377 : 			forward_iterator_tag)
; 1378 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_VICONT(_Where) != this
; 1381 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1382 : 			|| this->_Mylast < _VIPTR(_Where))
; 1383 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1384 : 		_DEBUG_RANGE(_First, _Last);
; 1385 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1386 : 
; 1387 : 		size_type _Count = 0;
; 1388 : 		_Distance(_First, _Last, _Count);
; 1389 : 
; 1390 : 		if (_Count == 0)
; 1391 : 			;
; 1392 : 		else if (_Unused_capacity() < _Count)
; 1393 : 			{	// not enough room, reallocate
; 1394 : 			if (max_size() - size() < _Count)
; 1395 : 				_Xlen();	// result too long
; 1396 : 
; 1397 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1398 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1399 : 			pointer _Ptr = _Newvec;
; 1400 : 
; 1401 : 			_TRY_BEGIN
; 1402 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1403 : 				_Newvec);	// copy prefix
; 1404 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1405 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1406 : 				_Ptr);	// copy suffix
; 1407 : 			_CATCH_ALL
; 1408 : 			_Destroy(_Newvec, _Ptr);
; 1409 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1410 : 			_RERAISE;
; 1411 : 			_CATCH_END
; 1412 : 
; 1413 : 			_Count += size();
; 1414 : 			if (this->_Myfirst != pointer())
; 1415 : 				{	// destroy and deallocate old array
; 1416 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1417 : 				this->_Getal().deallocate(this->_Myfirst,
; 1418 : 					this->_Myend - this->_Myfirst);
; 1419 : 				}
; 1420 : 
; 1421 : 			this->_Orphan_all();
; 1422 : 			this->_Myend = _Newvec + _Capacity;
; 1423 : 			this->_Mylast = _Newvec + _Count;
; 1424 : 			this->_Myfirst = _Newvec;
; 1425 : 			}
; 1426 : 		else
; 1427 : 			{	// new stuff fits, append and rotate into place
; 1428 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1429 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1430 : 				this->_Mylast + _Count);
; 1431 : 			this->_Mylast += _Count;
; 1432 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1433 : 			}
; 1434 : 		}
; 1435 : 
; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 	iterator erase(const_iterator _Where)
; 1438 : 		{	// erase element at where
; 1439 : 		if (_VICONT(_Where) != this
; 1440 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1441 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1442 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1443 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1444 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1445 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1446 : 		--this->_Mylast;
; 1447 : 		return (_Make_iter(_Where));
; 1448 : 		}
; 1449 : 
; 1450 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 	iterator erase(const_iterator _Where)
; 1452 : 		{	// erase element at where
; 1453 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1454 : 			_VIPTR(_Where));
; 1455 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1456 : 		--this->_Mylast;
; 1457 : 		return (_Make_iter(_Where));
; 1458 : 		}
; 1459 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1460 : 
; 1461 : 	iterator erase(const_iterator _First_arg,
; 1462 : 		const_iterator _Last_arg)
; 1463 : 		{	// erase [_First, _Last)
; 1464 : 		if (_First_arg == begin() && _Last_arg == end())
; 1465 : 			clear();
; 1466 : 		else if (_First_arg != _Last_arg)
; 1467 : 			{	// clear partial
; 1468 : 			iterator _First = _Make_iter(_First_arg);
; 1469 : 			iterator _Last = _Make_iter(_Last_arg);
; 1470 : 
; 1471 : 			if (_First != _Last)
; 1472 : 				{	// worth doing, copy down over hole
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 				if (_Last < _First || _VICONT(_First) != this
; 1475 : 					|| _VIPTR(_First) < this->_Myfirst
; 1476 : 					|| this->_Mylast < _VIPTR(_Last))
; 1477 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1478 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1479 : 					_VIPTR(_First));
; 1480 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1484 : 					_VIPTR(_First));
; 1485 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1486 : 
; 1487 : 				_Destroy(_Ptr, this->_Mylast);
; 1488 : 				this->_Mylast = _Ptr;
; 1489 : 				}
; 1490 : 			}
; 1491 : 		return (_Make_iter(_First_arg));
; 1492 : 		}
; 1493 : 
; 1494 : 	void _Pop_back_n(size_type _Count)
; 1495 : 		{	// erase _Count elements at end
; 1496 : 		pointer _Ptr = this->_Mylast - _Count;
; 1497 : 
; 1498 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1499 : 		_Orphan_range(_Ptr, this->_Mylast);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 
; 1502 : 		_Destroy(_Ptr, this->_Mylast);
; 1503 : 		this->_Mylast = _Ptr;
; 1504 : 		}
; 1505 : 
; 1506 : 	void clear() _NOEXCEPT
; 1507 : 		{	// erase all
; 1508 : 		this->_Orphan_all();
; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1510 : 		this->_Mylast = this->_Myfirst;
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		{	// exchange contents with _Right
; 1515 : 		if (this == &_Right)
; 1516 : 			;	// same object, do nothing
; 1517 : 		else if (this->_Getal() == _Right._Getal())
; 1518 : 			{	// same allocator, swap control information
; 1519 : 			this->_Swap_all(_Right);
; 1520 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1521 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1522 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1529 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1530 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1531 : 			}
; 1532 : 
; 1533 : 		else
; 1534 : 			{	// containers are incompatible
; 1535 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1536 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1537 : 
; 1538 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1539 : 			_XSTD terminate();
; 1540 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1541 : 			}
; 1542 : 		}
; 1543 : 
; 1544 : protected:
; 1545 : 	bool _Buy(size_type _Capacity)
; 1546 : 		{	// allocate array with _Capacity elements
; 1547 : 		this->_Myfirst = pointer();
; 1548 : 		this->_Mylast = pointer();
; 1549 : 		this->_Myend = pointer();
; 1550 : 
; 1551 : 		if (_Capacity == 0)
; 1552 : 			return (false);
; 1553 : 		else if (max_size() < _Capacity)
; 1554 : 			_Xlen();	// result too long
; 1555 : 		else
; 1556 : 			{	// nonempty array, allocate storage
; 1557 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1558 : 			this->_Mylast = this->_Myfirst;
; 1559 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1560 : 			}
; 1561 : 		return (true);
; 1562 : 		}
; 1563 : 
; 1564 : 	void _Destroy(pointer _First, pointer _Last)
; 1565 : 		{	// destroy [_First, _Last) using allocator
; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}
; 1569 : 
; 1570 : 	size_type _Grow_to(size_type _Count) const
; 1571 : 		{	// grow by 50% or at least to _Count
; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1576 : 		if (_Capacity < _Count)
; 1577 : 			_Capacity = _Count;
; 1578 : 		return (_Capacity);
; 1579 : 		}
; 1580 : 
; 1581 : 	bool _Inside(const value_type *_Ptr) const
; 1582 : 		{	// test if _Ptr points inside vector
; 1583 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 52		 jae	 SHORT $LN4@push_back
  00011	8b 06		 mov	 eax, DWORD PTR [esi]
  00013	3b c7		 cmp	 eax, edi
  00015	77 4c		 ja	 SHORT $LN4@push_back

; 1244 : 		if (_Inside(_STD addressof(_Val)))
; 1245 : 			{	// push back an element
; 1246 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f8		 sub	 edi, eax
  00019	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001e	f7 ef		 imul	 edi
  00020	c1 fa 02	 sar	 edx, 2
  00023	8b fa		 mov	 edi, edx
  00025	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00028	03 fa		 add	 edi, edx

; 1247 : 			if (this->_Mylast == this->_Myend)

  0002a	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0002d	75 09		 jne	 SHORT $LN3@push_back

; 1248 : 				_Reserve(1);

  0002f	6a 01		 push	 1
  00031	8b ce		 mov	 ecx, esi
  00033	e8 00 00 00 00	 call	 ?_Reserve@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IAEXI@Z ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Reserve
$LN3@push_back:

; 1249 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1250 : 			this->_Getal().construct(this->_Mylast,
; 1251 : 				this->_Myfirst[_Idx]);

  00038	8b 06		 mov	 eax, DWORD PTR [esi]
  0003a	8d 0c 7f	 lea	 ecx, DWORD PTR [edi+edi*2]
  0003d	8d 0c c8	 lea	 ecx, DWORD PTR [eax+ecx*8]
; File a:\vs\vc\include\xmemory0

; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00040	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00043	85 c0		 test	 eax, eax
  00045	74 43		 je	 SHORT $LN49@push_back
  00047	f3 0f 6f 01	 movdqu	 xmm0, XMMWORD PTR [ecx]
  0004b	5f		 pop	 edi
  0004c	f3 0f 7f 00	 movdqu	 XMMWORD PTR [eax], xmm0
  00050	f3 0f 7e 41 10	 movq	 xmm0, QWORD PTR [ecx+16]

; 593  : 		::new ((void *)_Ptr) _Ty(_Val);

  00055	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
; File a:\vs\vc\include\vector

; 1261 : 			++this->_Mylast;

  0005a	83 46 04 18	 add	 DWORD PTR [esi+4], 24	; 00000018H
  0005e	5e		 pop	 esi

; 1262 : 			}
; 1263 : 		}

  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
$LN4@push_back:

; 1252 : 			++this->_Mylast;
; 1253 : 			}
; 1254 : 		else
; 1255 : 			{	// push back a non-element
; 1256 : 			if (this->_Mylast == this->_Myend)

  00063	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00066	75 09		 jne	 SHORT $LN1@push_back

; 1257 : 				_Reserve(1);

  00068	6a 01		 push	 1
  0006a	8b ce		 mov	 ecx, esi
  0006c	e8 00 00 00 00	 call	 ?_Reserve@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@IAEXI@Z ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Reserve
$LN1@push_back:
; File a:\vs\vc\include\xmemory0

; 593  : 		::new ((void *)_Ptr) _Ty(_Val);

  00071	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00074	85 c0		 test	 eax, eax
  00076	74 12		 je	 SHORT $LN49@push_back
  00078	f3 0f 6f 07	 movdqu	 xmm0, XMMWORD PTR [edi]
  0007c	f3 0f 7f 00	 movdqu	 XMMWORD PTR [eax], xmm0
  00080	f3 0f 7e 47 10	 movq	 xmm0, QWORD PTR [edi+16]
  00085	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
$LN49@push_back:
; File a:\vs\vc\include\vector

; 1261 : 			++this->_Mylast;

  0008a	83 46 04 18	 add	 DWORD PTR [esi+4], 24	; 00000018H
  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi

; 1262 : 			}
; 1263 : 		}

  00090	5d		 pop	 ebp
  00091	c2 04 00	 ret	 4
?push_back@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAEXABUSPDTVertex@@@Z ENDP ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??A?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAEAAUSPDTVertex@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAEAAUSPDTVertex@@I@Z PROC ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::operator[], COMDAT
; _this$ = ecx

; 1197 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1198 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1199 : 		if (size() <= _Pos)
; 1200 : 			{	// report error
; 1201 : 			_DEBUG_ERROR("vector subscript out of range");
; 1202 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1203 : 			}
; 1204 : 
; 1205 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1206 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1207 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1208 : 
; 1209 : 		return (*(this->_Myfirst + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
  00009	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000b	8d 04 d0	 lea	 eax, DWORD PTR [eax+edx*8]

; 1210 : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
??A?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAEAAUSPDTVertex@@I@Z ENDP ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?empty@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QBE_NXZ PROC ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::empty, COMDAT
; _this$ = ecx

; 1158 : 		return (this->_Myfirst == this->_Mylast);

  00000	8b 11		 mov	 edx, DWORD PTR [ecx]
  00002	33 c0		 xor	 eax, eax
  00004	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00007	0f 94 c0	 sete	 al

; 1159 : 		}

  0000a	c3		 ret	 0
?empty@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QBE_NXZ ENDP ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::empty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?max_size@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QBEIXZ PROC ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::max_size, COMDAT
; _this$ = ecx

; 1153 : 		return (this->_Getal().max_size());

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 1154 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QBEIXZ ENDP ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?size@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QBEIXZ PROC ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::size, COMDAT
; _this$ = ecx

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00008	2b 11		 sub	 edx, DWORD PTR [ecx]
  0000a	f7 ea		 imul	 edx
  0000c	c1 fa 02	 sar	 edx, 2
  0000f	8b c2		 mov	 eax, edx
  00011	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00014	03 c2		 add	 eax, edx

; 1149 : 		}

  00016	c3		 ret	 0
?size@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QBEIXZ ENDP ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QBEIXZ PROC ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 1015 : 		return (this->_Myend - this->_Mylast);

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00008	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  0000b	f7 ea		 imul	 edx
  0000d	c1 fa 02	 sar	 edx, 2
  00010	8b c2		 mov	 eax, edx
  00012	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00015	03 c2		 add	 eax, edx

; 1016 : 		}

  00017	c3		 ret	 0
?_Unused_capacity@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QBEIXZ ENDP ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?capacity@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QBEIXZ PROC ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::capacity, COMDAT
; _this$ = ecx

; 1010 : 		return (this->_Myend - this->_Myfirst);

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00008	2b 11		 sub	 edx, DWORD PTR [ecx]
  0000a	f7 ea		 imul	 edx
  0000c	c1 fa 02	 sar	 edx, 2
  0000f	8b c2		 mov	 eax, edx
  00011	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00014	03 c2		 add	 eax, edx

; 1011 : 		}

  00016	c3		 ret	 0
?capacity@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QBEIXZ ENDP ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\vector
;	COMDAT ??1?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAE@XZ PROC ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::~vector<SPDTVertex,std::allocator<SPDTVertex> >, COMDAT
; _this$ = ecx

; 944  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 947  : 
; 948  : 	_Myt& operator=(const _Myt& _Right)
; 949  : 		{	// assign _Right
; 950  : 		if (this != &_Right)
; 951  : 			{	// different, assign it
; 952  : 			if (this->_Getal() != _Right._Getal()
; 953  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 954  : 				{	// change allocator before copying
; 955  : 				_Tidy();
; 956  : 				this->_Change_alloc(_Right._Getal());
; 957  : 				}
; 958  : 
; 959  : 			this->_Orphan_all();
; 960  : 
; 961  : 			if (_Right.empty())
; 962  : 				clear();	// new sequence empty, erase existing sequence
; 963  : 			else if (_Right.size() <= size())
; 964  : 				{	// enough elements, copy new and destroy old
; 965  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst,
; 966  : 					_Right._Mylast, this->_Myfirst);	// copy new
; 967  : 				_Destroy(_Ptr, this->_Mylast);	// destroy old
; 968  : 				this->_Mylast = this->_Myfirst + _Right.size();
; 969  : 				}
; 970  : 			else if (_Right.size() <= capacity())
; 971  : 				{	// enough room, copy and construct new
; 972  : 				pointer _Ptr = _Right._Myfirst + size();
; 973  : 				_Copy_impl(_Right._Myfirst,
; 974  : 					_Ptr, this->_Myfirst);
; 975  : 				this->_Mylast = _Ucopy(_Ptr, _Right._Mylast, this->_Mylast);
; 976  : 				}
; 977  : 			else
; 978  : 				{	// not enough room, allocate new array and construct new
; 979  : 				if (this->_Myfirst != pointer())
; 980  : 					{	// discard old array
; 981  : 					_Destroy(this->_Myfirst, this->_Mylast);
; 982  : 					this->_Getal().deallocate(this->_Myfirst,
; 983  : 						this->_Myend - this->_Myfirst);
; 984  : 					}
; 985  : 				if (_Buy(_Right.size()))
; 986  : 					_TRY_BEGIN
; 987  : 					this->_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 988  : 						this->_Myfirst);
; 989  : 					_CATCH_ALL
; 990  : 					_Tidy();
; 991  : 					_RERAISE;
; 992  : 					_CATCH_END
; 993  : 				}
; 994  : 			}
; 995  : 		return (*this);
; 996  : 		}
; 997  : 
; 998  : 	void reserve(size_type _Count)
; 999  : 		{	// determine new minimum length of allocated storage
; 1000 : 		if (capacity() < _Count)
; 1001 : 			{	// something to do, check and reallocate
; 1002 : 			if (max_size() < _Count)
; 1003 : 				_Xlen();
; 1004 : 			_Reallocate(_Count);
; 1005 : 			}
; 1006 : 		}
; 1007 : 
; 1008 : 	size_type capacity() const _NOEXCEPT
; 1009 : 		{	// return current length of allocated storage
; 1010 : 		return (this->_Myend - this->_Myfirst);
; 1011 : 		}
; 1012 : 
; 1013 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1014 : 		{	// micro-optimization for capacity() - size()
; 1015 : 		return (this->_Myend - this->_Mylast);
; 1016 : 		}
; 1017 : 
; 1018 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1019 : 		{	// micro-optimization for capacity() != size()
; 1020 : 		return (this->_Myend != this->_Mylast);
; 1021 : 		}
; 1022 : 
; 1023 : 	iterator begin() _NOEXCEPT
; 1024 : 		{	// return iterator for beginning of mutable sequence
; 1025 : 		return (iterator(this->_Myfirst, this));
; 1026 : 		}
; 1027 : 
; 1028 : 	const_iterator begin() const _NOEXCEPT
; 1029 : 		{	// return iterator for beginning of nonmutable sequence
; 1030 : 		return (const_iterator(this->_Myfirst, this));
; 1031 : 		}
; 1032 : 
; 1033 : 	iterator end() _NOEXCEPT
; 1034 : 		{	// return iterator for end of mutable sequence
; 1035 : 		return (iterator(this->_Mylast, this));
; 1036 : 		}
; 1037 : 
; 1038 : 	const_iterator end() const _NOEXCEPT
; 1039 : 		{	// return iterator for end of nonmutable sequence
; 1040 : 		return (const_iterator(this->_Mylast, this));
; 1041 : 		}
; 1042 : 
; 1043 : 	iterator _Make_iter(const_iterator _Where) const
; 1044 : 		{	// make iterator from const_iterator
; 1045 : 		return (iterator(_Where._Ptr, this));
; 1046 : 		}
; 1047 : 
; 1048 : 	reverse_iterator rbegin() _NOEXCEPT
; 1049 : 		{	// return iterator for beginning of reversed mutable sequence
; 1050 : 		return (reverse_iterator(end()));
; 1051 : 		}
; 1052 : 
; 1053 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1054 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1055 : 		return (const_reverse_iterator(end()));
; 1056 : 		}
; 1057 : 
; 1058 : 	reverse_iterator rend() _NOEXCEPT
; 1059 : 		{	// return iterator for end of reversed mutable sequence
; 1060 : 		return (reverse_iterator(begin()));
; 1061 : 		}
; 1062 : 
; 1063 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1064 : 		{	// return iterator for end of reversed nonmutable sequence
; 1065 : 		return (const_reverse_iterator(begin()));
; 1066 : 		}
; 1067 : 
; 1068 : 	const_iterator cbegin() const _NOEXCEPT
; 1069 : 		{	// return iterator for beginning of nonmutable sequence
; 1070 : 		return (((const _Myt *)this)->begin());
; 1071 : 		}
; 1072 : 
; 1073 : 	const_iterator cend() const _NOEXCEPT
; 1074 : 		{	// return iterator for end of nonmutable sequence
; 1075 : 		return (((const _Myt *)this)->end());
; 1076 : 		}
; 1077 : 
; 1078 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1079 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1080 : 		return (((const _Myt *)this)->rbegin());
; 1081 : 		}
; 1082 : 
; 1083 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1084 : 		{	// return iterator for end of reversed nonmutable sequence
; 1085 : 		return (((const _Myt *)this)->rend());
; 1086 : 		}
; 1087 : 
; 1088 : 	void shrink_to_fit()
; 1089 : 		{	// reduce capacity
; 1090 : 		if (_Has_unused_capacity())
; 1091 : 			{	// worth shrinking, do it
; 1092 : 			if (empty())
; 1093 : 				_Tidy();
; 1094 : 			else
; 1095 : 				_Reallocate(size());
; 1096 : 			}
; 1097 : 		}
; 1098 : 
; 1099 : 	void resize(size_type _Newsize)
; 1100 : 		{	// determine new length, padding as needed
; 1101 : 		if (_Newsize < size())
; 1102 : 			_Pop_back_n(size() - _Newsize);
; 1103 : 		else if (size() < _Newsize)
; 1104 : 			{	// pad as needed
; 1105 : 			_Alty _Alval(this->_Getal());
; 1106 : 			_Reserve(_Newsize - size());
; 1107 : 			_TRY_BEGIN
; 1108 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1109 : 				_Alval);
; 1110 : 			_CATCH_ALL
; 1111 : 			_Tidy();
; 1112 : 			_RERAISE;
; 1113 : 			_CATCH_END
; 1114 : 			this->_Mylast += _Newsize - size();
; 1115 : 			}
; 1116 : 		}
; 1117 : 
; 1118 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1119 : 		{	// determine new length, padding with _Val elements as needed
; 1120 : 		if (_Newsize < size())
; 1121 : 			_Pop_back_n(size() - _Newsize);
; 1122 : 		else if (size() < _Newsize)
; 1123 : 			{	// pad as needed
; 1124 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1125 : 
; 1126 : 			if (_Inside(_Ptr))
; 1127 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1128 : 				const difference_type _Idx = _Ptr
; 1129 : 					- _STD addressof(*this->_Myfirst);
; 1130 : 				_Reserve(_Newsize - size());
; 1131 : 				_Ptr = _STD addressof(*this->_Myfirst) + _Idx;
; 1132 : 				}
; 1133 : 			else
; 1134 : 				_Reserve(_Newsize - size());
; 1135 : 
; 1136 : 			_TRY_BEGIN
; 1137 : 			_Ufill(this->_Mylast, _Newsize - size(), _Ptr);
; 1138 : 			_CATCH_ALL
; 1139 : 			_Tidy();
; 1140 : 			_RERAISE;
; 1141 : 			_CATCH_END
; 1142 : 			this->_Mylast += _Newsize - size();
; 1143 : 			}
; 1144 : 		}
; 1145 : 
; 1146 : 	size_type size() const _NOEXCEPT
; 1147 : 		{	// return length of sequence
; 1148 : 		return (this->_Mylast - this->_Myfirst);
; 1149 : 		}
; 1150 : 
; 1151 : 	size_type max_size() const _NOEXCEPT
; 1152 : 		{	// return maximum possible length of sequence
; 1153 : 		return (this->_Getal().max_size());
; 1154 : 		}
; 1155 : 
; 1156 : 	bool empty() const _NOEXCEPT
; 1157 : 		{	// test if sequence is empty
; 1158 : 		return (this->_Myfirst == this->_Mylast);
; 1159 : 		}
; 1160 : 
; 1161 : 	_Alloc get_allocator() const _NOEXCEPT
; 1162 : 		{	// return allocator object for values
; 1163 : 		return (this->_Getal());
; 1164 : 		}
; 1165 : 
; 1166 : 	const_reference at(size_type _Pos) const
; 1167 : 		{	// subscript nonmutable sequence with checking
; 1168 : 		if (size() <= _Pos)
; 1169 : 			_Xran();
; 1170 : 		return (*(this->_Myfirst + _Pos));
; 1171 : 		}
; 1172 : 
; 1173 : 	reference at(size_type _Pos)
; 1174 : 		{	// subscript mutable sequence with checking
; 1175 : 		if (size() <= _Pos)
; 1176 : 			_Xran();
; 1177 : 		return (*(this->_Myfirst + _Pos));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reference operator[](size_type _Pos) const
; 1181 : 		{	// subscript nonmutable sequence
; 1182 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1183 : 		if (size() <= _Pos)
; 1184 : 			{	// report error
; 1185 : 			_DEBUG_ERROR("vector subscript out of range");
; 1186 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1187 : 			}
; 1188 : 
; 1189 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1190 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1191 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1192 : 
; 1193 : 		return (*(this->_Myfirst + _Pos));
; 1194 : 		}
; 1195 : 
; 1196 : 	reference operator[](size_type _Pos)
; 1197 : 		{	// subscript mutable sequence
; 1198 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1199 : 		if (size() <= _Pos)
; 1200 : 			{	// report error
; 1201 : 			_DEBUG_ERROR("vector subscript out of range");
; 1202 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1203 : 			}
; 1204 : 
; 1205 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1206 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1207 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1208 : 
; 1209 : 		return (*(this->_Myfirst + _Pos));
; 1210 : 		}
; 1211 : 
; 1212 : 	pointer data() _NOEXCEPT
; 1213 : 		{	// return address of first element
; 1214 : 		return (this->_Myfirst);
; 1215 : 		}
; 1216 : 
; 1217 : 	const_pointer data() const _NOEXCEPT
; 1218 : 		{	// return address of first element
; 1219 : 		return (this->_Myfirst);
; 1220 : 		}
; 1221 : 
; 1222 : 	reference front()
; 1223 : 		{	// return first element of mutable sequence
; 1224 : 		return (*begin());
; 1225 : 		}
; 1226 : 
; 1227 : 	const_reference front() const
; 1228 : 		{	// return first element of nonmutable sequence
; 1229 : 		return (*begin());
; 1230 : 		}
; 1231 : 
; 1232 : 	reference back()
; 1233 : 		{	// return last element of mutable sequence
; 1234 : 		return (*(end() - 1));
; 1235 : 		}
; 1236 : 
; 1237 : 	const_reference back() const
; 1238 : 		{	// return last element of nonmutable sequence
; 1239 : 		return (*(end() - 1));
; 1240 : 		}
; 1241 : 
; 1242 : 	void push_back(const value_type& _Val)
; 1243 : 		{	// insert element at end
; 1244 : 		if (_Inside(_STD addressof(_Val)))
; 1245 : 			{	// push back an element
; 1246 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1247 : 			if (this->_Mylast == this->_Myend)
; 1248 : 				_Reserve(1);
; 1249 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1250 : 			this->_Getal().construct(this->_Mylast,
; 1251 : 				this->_Myfirst[_Idx]);
; 1252 : 			++this->_Mylast;
; 1253 : 			}
; 1254 : 		else
; 1255 : 			{	// push back a non-element
; 1256 : 			if (this->_Mylast == this->_Myend)
; 1257 : 				_Reserve(1);
; 1258 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1259 : 			this->_Getal().construct(this->_Mylast,
; 1260 : 				_Val);
; 1261 : 			++this->_Mylast;
; 1262 : 			}
; 1263 : 		}
; 1264 : 
; 1265 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1266 : 	void pop_back()
; 1267 : 		{	// erase element at end
; 1268 : 		if (empty())
; 1269 : 			_DEBUG_ERROR("vector empty before pop");
; 1270 : 		else
; 1271 : 			{	// erase last element
; 1272 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1273 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1274 : 			--this->_Mylast;
; 1275 : 			}
; 1276 : 		}
; 1277 : 
; 1278 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1279 : 	void pop_back()
; 1280 : 		{	// erase element at end
; 1281 : 		this->_Getal().destroy(this->_Mylast - 1);
; 1282 : 		--this->_Mylast;
; 1283 : 		}
; 1284 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1285 : 
; 1286 : 	template<class _Iter>
; 1287 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1288 : 			void>::type
; 1289 : 		assign(_Iter _First, _Iter _Last)
; 1290 : 		{	// assign [_First, _Last)
; 1291 : 		clear();
; 1292 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1293 : 		}
; 1294 : 
; 1295 : 	template<class _Iter>
; 1296 : 		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
; 1297 : 		{	// assign [_First, _Last), input iterators
; 1298 : 		for (; _First != _Last; ++_First)
; 1299 : 			emplace_back(*_First);
; 1300 : 		}
; 1301 : 
; 1302 : 	template<class _Iter>
; 1303 : 		void _Assign(_Iter _First, _Iter _Last, forward_iterator_tag)
; 1304 : 		{	// assign [_First, _Last), forward iterators
; 1305 : 		if (_First == _Last)
; 1306 : 			return;	// nothing to do
; 1307 : 
; 1308 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1309 : 
; 1310 : 		if (capacity() < _Newsize)
; 1311 : 			{	// need more room, try to get it
; 1312 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1313 : 			_Tidy();
; 1314 : 			_Buy(_Newcapacity);
; 1315 : 			}
; 1316 : 
; 1317 : 		this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
; 1318 : 		}
; 1319 : 
; 1320 : 	void assign(size_type _Count, const value_type& _Val)
; 1321 : 		{	// assign _Count * _Val
; 1322 : 		clear();
; 1323 : 		insert(begin(), _Count, _Val);
; 1324 : 		}
; 1325 : 
; 1326 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1327 : 		{	// insert _Val at _Where
; 1328 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1329 : 		}
; 1330 : 
; 1331 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1332 : 		const _Ty& _Val)
; 1333 : 		{	// insert _Count * _Val at _Where
; 1334 : 		return (_Insert_n(_Where, _Count, _Val));
; 1335 : 		}
; 1336 : 
; 1337 : 	template<class _Iter>
; 1338 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1339 : 			iterator>::type
; 1340 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1341 : 		{	// insert [_First, _Last) at _Where
; 1342 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1343 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1344 : 		return (begin() + _Off);
; 1345 : 		}
; 1346 : 
; 1347 : 	template<class _Iter>
; 1348 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1349 : 			input_iterator_tag)
; 1350 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1351 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1352 : 
; 1353 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1354 : 		if (size() < _Off)
; 1355 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1356 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1357 : 
; 1358 : 		if (_First != _Last)
; 1359 : 			{	// worth doing, gather at end and rotate into place
; 1360 : 			size_type _Oldsize = size();
; 1361 : 
; 1362 : 			_TRY_BEGIN
; 1363 : 			for (; _First != _Last; ++_First)
; 1364 : 				push_back(*_First);	// append
; 1365 : 
; 1366 : 			_CATCH_ALL
; 1367 : 			erase(begin() + _Oldsize, end());
; 1368 : 			_RERAISE;
; 1369 : 			_CATCH_END
; 1370 : 
; 1371 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1372 : 			}
; 1373 : 		}
; 1374 : 
; 1375 : 	template<class _Iter>
; 1376 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1377 : 			forward_iterator_tag)
; 1378 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_VICONT(_Where) != this
; 1381 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1382 : 			|| this->_Mylast < _VIPTR(_Where))
; 1383 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1384 : 		_DEBUG_RANGE(_First, _Last);
; 1385 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1386 : 
; 1387 : 		size_type _Count = 0;
; 1388 : 		_Distance(_First, _Last, _Count);
; 1389 : 
; 1390 : 		if (_Count == 0)
; 1391 : 			;
; 1392 : 		else if (_Unused_capacity() < _Count)
; 1393 : 			{	// not enough room, reallocate
; 1394 : 			if (max_size() - size() < _Count)
; 1395 : 				_Xlen();	// result too long
; 1396 : 
; 1397 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1398 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1399 : 			pointer _Ptr = _Newvec;
; 1400 : 
; 1401 : 			_TRY_BEGIN
; 1402 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1403 : 				_Newvec);	// copy prefix
; 1404 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1405 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1406 : 				_Ptr);	// copy suffix
; 1407 : 			_CATCH_ALL
; 1408 : 			_Destroy(_Newvec, _Ptr);
; 1409 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1410 : 			_RERAISE;
; 1411 : 			_CATCH_END
; 1412 : 
; 1413 : 			_Count += size();
; 1414 : 			if (this->_Myfirst != pointer())
; 1415 : 				{	// destroy and deallocate old array
; 1416 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1417 : 				this->_Getal().deallocate(this->_Myfirst,
; 1418 : 					this->_Myend - this->_Myfirst);
; 1419 : 				}
; 1420 : 
; 1421 : 			this->_Orphan_all();
; 1422 : 			this->_Myend = _Newvec + _Capacity;
; 1423 : 			this->_Mylast = _Newvec + _Count;
; 1424 : 			this->_Myfirst = _Newvec;
; 1425 : 			}
; 1426 : 		else
; 1427 : 			{	// new stuff fits, append and rotate into place
; 1428 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1429 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1430 : 				this->_Mylast + _Count);
; 1431 : 			this->_Mylast += _Count;
; 1432 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1433 : 			}
; 1434 : 		}
; 1435 : 
; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 	iterator erase(const_iterator _Where)
; 1438 : 		{	// erase element at where
; 1439 : 		if (_VICONT(_Where) != this
; 1440 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1441 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1442 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1443 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1444 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1445 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1446 : 		--this->_Mylast;
; 1447 : 		return (_Make_iter(_Where));
; 1448 : 		}
; 1449 : 
; 1450 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 	iterator erase(const_iterator _Where)
; 1452 : 		{	// erase element at where
; 1453 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1454 : 			_VIPTR(_Where));
; 1455 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1456 : 		--this->_Mylast;
; 1457 : 		return (_Make_iter(_Where));
; 1458 : 		}
; 1459 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1460 : 
; 1461 : 	iterator erase(const_iterator _First_arg,
; 1462 : 		const_iterator _Last_arg)
; 1463 : 		{	// erase [_First, _Last)
; 1464 : 		if (_First_arg == begin() && _Last_arg == end())
; 1465 : 			clear();
; 1466 : 		else if (_First_arg != _Last_arg)
; 1467 : 			{	// clear partial
; 1468 : 			iterator _First = _Make_iter(_First_arg);
; 1469 : 			iterator _Last = _Make_iter(_Last_arg);
; 1470 : 
; 1471 : 			if (_First != _Last)
; 1472 : 				{	// worth doing, copy down over hole
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 				if (_Last < _First || _VICONT(_First) != this
; 1475 : 					|| _VIPTR(_First) < this->_Myfirst
; 1476 : 					|| this->_Mylast < _VIPTR(_Last))
; 1477 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1478 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1479 : 					_VIPTR(_First));
; 1480 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1484 : 					_VIPTR(_First));
; 1485 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1486 : 
; 1487 : 				_Destroy(_Ptr, this->_Mylast);
; 1488 : 				this->_Mylast = _Ptr;
; 1489 : 				}
; 1490 : 			}
; 1491 : 		return (_Make_iter(_First_arg));
; 1492 : 		}
; 1493 : 
; 1494 : 	void _Pop_back_n(size_type _Count)
; 1495 : 		{	// erase _Count elements at end
; 1496 : 		pointer _Ptr = this->_Mylast - _Count;
; 1497 : 
; 1498 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1499 : 		_Orphan_range(_Ptr, this->_Mylast);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 
; 1502 : 		_Destroy(_Ptr, this->_Mylast);
; 1503 : 		this->_Mylast = _Ptr;
; 1504 : 		}
; 1505 : 
; 1506 : 	void clear() _NOEXCEPT
; 1507 : 		{	// erase all
; 1508 : 		this->_Orphan_all();
; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1510 : 		this->_Mylast = this->_Myfirst;
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		{	// exchange contents with _Right
; 1515 : 		if (this == &_Right)
; 1516 : 			;	// same object, do nothing
; 1517 : 		else if (this->_Getal() == _Right._Getal())
; 1518 : 			{	// same allocator, swap control information
; 1519 : 			this->_Swap_all(_Right);
; 1520 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1521 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1522 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1529 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1530 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1531 : 			}
; 1532 : 
; 1533 : 		else
; 1534 : 			{	// containers are incompatible
; 1535 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1536 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1537 : 
; 1538 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1539 : 			_XSTD terminate();
; 1540 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1541 : 			}
; 1542 : 		}
; 1543 : 
; 1544 : protected:
; 1545 : 	bool _Buy(size_type _Capacity)
; 1546 : 		{	// allocate array with _Capacity elements
; 1547 : 		this->_Myfirst = pointer();
; 1548 : 		this->_Mylast = pointer();
; 1549 : 		this->_Myend = pointer();
; 1550 : 
; 1551 : 		if (_Capacity == 0)
; 1552 : 			return (false);
; 1553 : 		else if (max_size() < _Capacity)
; 1554 : 			_Xlen();	// result too long
; 1555 : 		else
; 1556 : 			{	// nonempty array, allocate storage
; 1557 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1558 : 			this->_Mylast = this->_Myfirst;
; 1559 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1560 : 			}
; 1561 : 		return (true);
; 1562 : 		}
; 1563 : 
; 1564 : 	void _Destroy(pointer _First, pointer _Last)
; 1565 : 		{	// destroy [_First, _Last) using allocator
; 1566 : 		_Alty _Alval(this->_Getal());
; 1567 : 		_Destroy_range(_First, _Last, _Alval);
; 1568 : 		}
; 1569 : 
; 1570 : 	size_type _Grow_to(size_type _Count) const
; 1571 : 		{	// grow by 50% or at least to _Count
; 1572 : 		size_type _Capacity = capacity();
; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1576 : 		if (_Capacity < _Count)
; 1577 : 			_Capacity = _Count;
; 1578 : 		return (_Capacity);
; 1579 : 		}
; 1580 : 
; 1581 : 	bool _Inside(const value_type *_Ptr) const
; 1582 : 		{	// test if _Ptr points inside vector
; 1583 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);
; 1584 : 		}
; 1585 : 
; 1586 : 	void _Reallocate(size_type _Count)
; 1587 : 		{	// move to array of exactly _Count elements
; 1588 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1589 : 
; 1590 : 		_TRY_BEGIN
; 1591 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);
; 1592 : 		_CATCH_ALL
; 1593 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1594 : 		_RERAISE;
; 1595 : 		_CATCH_END
; 1596 : 
; 1597 : 		size_type _Size = size();
; 1598 : 		if (this->_Myfirst != pointer())
; 1599 : 			{	// destroy and deallocate old array
; 1600 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1601 : 			this->_Getal().deallocate(this->_Myfirst,
; 1602 : 				this->_Myend - this->_Myfirst);
; 1603 : 			}
; 1604 : 
; 1605 : 		this->_Orphan_all();
; 1606 : 		this->_Myend = _Ptr + _Count;
; 1607 : 		this->_Mylast = _Ptr + _Size;
; 1608 : 		this->_Myfirst = _Ptr;
; 1609 : 		}
; 1610 : 
; 1611 : 	void _Reserve(size_type _Count)
; 1612 : 		{	// ensure room for _Count new elements, grow exponentially
; 1613 : 		if (_Unused_capacity() < _Count)
; 1614 : 			{	// need more room, try to get it
; 1615 : 			if (max_size() - size() < _Count)
; 1616 : 				_Xlen();
; 1617 : 			_Reallocate(_Grow_to(size() + _Count));
; 1618 : 			}
; 1619 : 		}
; 1620 : 
; 1621 : 	void _Tidy()
; 1622 : 		{	// free all storage
; 1623 : 		if (this->_Myfirst != pointer())

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 1d		 je	 SHORT $LN3@vector
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
; File a:\vs\vc\include\vector

; 1629 : 			this->_Myfirst = pointer();

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1630 : 			this->_Mylast = pointer();

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1631 : 			this->_Myend = pointer();

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN3@vector:
  00026	5e		 pop	 esi

; 945  : 		_Tidy();
; 946  : 		}

  00027	c3		 ret	 0
??1?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAE@XZ ENDP ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::~vector<SPDTVertex,std::allocator<SPDTVertex> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??0?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAE@XZ PROC ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::vector<SPDTVertex,std::allocator<SPDTVertex> >, COMDAT
; _this$ = ecx

; 482  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 681  : 		}

  00006	8b c1		 mov	 eax, ecx

; 483  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 484  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 681  : 		}

  00016	c3		 ret	 0
??0?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAE@XZ ENDP ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::vector<SPDTVertex,std::allocator<SPDTVertex> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<SPDTVertex,std::allocator<SPDTVertex> > >::_Getal, COMDAT
; _this$ = ecx

; 641  : 		{	// get reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 642  : 		return (_Alty());

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 643  : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<SPDTVertex,std::allocator<SPDTVertex> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@@std@@QAE@ABV?$allocator@USPDTVertex@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@@std@@QAE@ABV?$allocator@USPDTVertex@@@1@@Z PROC ; std::_Vector_alloc<0,std::_Vec_base_types<SPDTVertex,std::allocator<SPDTVertex> > >::_Vector_alloc<0,std::_Vec_base_types<SPDTVertex,std::allocator<SPDTVertex> > >, COMDAT
; _this$ = ecx

; 482  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 589  : 		{	// construct allocator from _Al
; 590  : 		}

  00006	8b c1		 mov	 eax, ecx

; 483  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 484  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 589  : 		{	// construct allocator from _Al
; 590  : 		}

  00016	c2 04 00	 ret	 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@@std@@QAE@ABV?$allocator@USPDTVertex@@@1@@Z ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<SPDTVertex,std::allocator<SPDTVertex> > >::_Vector_alloc<0,std::_Vec_base_types<SPDTVertex,std::allocator<SPDTVertex> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@USPDTVertex@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@USPDTVertex@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<SPDTVertex> >::_Vector_val<std::_Simple_types<SPDTVertex> >, COMDAT
; _this$ = ecx

; 481  : 		{	// initialize values
; 482  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 483  : 		_Mylast = pointer();
; 484  : 		_Myend = pointer();
; 485  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@USPDTVertex@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<SPDTVertex> >::_Vector_val<std::_Simple_types<SPDTVertex> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<SPDTVertex> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (_Mytraits::max_size(*this));

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<SPDTVertex> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@QAEXPAUSPDTVertex@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@QAEXPAUSPDTVertex@@I@Z PROC ; std::_Wrap_alloc<std::allocator<SPDTVertex> >::deallocate, COMDAT
; _this$ = ecx

; 857  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 858  : 		_Mybase::deallocate(_Ptr, _Count);
; 859  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@QAEXPAUSPDTVertex@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<SPDTVertex> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@QAEPAUSPDTVertex@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@QAEPAUSPDTVertex@@I@Z PROC ; std::_Wrap_alloc<std::allocator<SPDTVertex> >::allocate, COMDAT
; _this$ = ecx

; 846  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 1c		 je	 SHORT $LN6@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00011	77 1b		 ja	 SHORT $LN14@allocate
  00013	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00016	c1 e0 03	 shl	 eax, 3
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001f	8b c8		 mov	 ecx, eax
  00021	83 c4 04	 add	 esp, 4
  00024	85 c9		 test	 ecx, ecx
  00026	74 06		 je	 SHORT $LN14@allocate
$LN6@allocate:

; 847  : 		return (_Mybase::allocate(_Count));

  00028	8b c1		 mov	 eax, ecx

; 848  : 		}

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
$LN14@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002e	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN16@allocate:
$LN13@allocate:
  00033	cc		 int	 3
?allocate@?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@QAEPAUSPDTVertex@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<SPDTVertex> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<SPDTVertex> >::_Wrap_alloc<std::allocator<SPDTVertex> >, COMDAT
; _this$ = ecx

; 802  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@USPDTVertex@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<SPDTVertex> >::_Wrap_alloc<std::allocator<SPDTVertex> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@USPDTVertex@@@std@@@std@@SAIABV?$allocator@USPDTVertex@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@USPDTVertex@@@std@@@std@@SAIABV?$allocator@USPDTVertex@@@2@@Z PROC ; std::allocator_traits<std::allocator<SPDTVertex> >::max_size, COMDAT

; 735  : 		return (_Al.max_size());

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 736  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@USPDTVertex@@@std@@@std@@SAIABV?$allocator@USPDTVertex@@@2@@Z ENDP ; std::allocator_traits<std::allocator<SPDTVertex> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@USPDTVertex@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@USPDTVertex@@@std@@QBEIXZ PROC	; std::allocator<SPDTVertex>::max_size, COMDAT
; _this$ = ecx

; 612  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 613  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@USPDTVertex@@@std@@QBEIXZ ENDP	; std::allocator<SPDTVertex>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?construct@?$allocator@USPDTVertex@@@std@@QAEXPAUSPDTVertex@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@USPDTVertex@@@std@@QAEXPAUSPDTVertex@@ABU3@@Z PROC ; std::allocator<SPDTVertex>::construct, COMDAT
; _this$ = ecx

; 592  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 593  : 		::new ((void *)_Ptr) _Ty(_Val);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 15		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0000d	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [eax]
  00011	f3 0f 7f 01	 movdqu	 XMMWORD PTR [ecx], xmm0
  00015	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  0001a	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
$LN3@construct:

; 594  : 		}

  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
?construct@?$allocator@USPDTVertex@@@std@@QAEXPAUSPDTVertex@@ABU3@@Z ENDP ; std::allocator<SPDTVertex>::construct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@USPDTVertex@@@std@@QAEPAUSPDTVertex@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@USPDTVertex@@@std@@QAEPAUSPDTVertex@@I@Z PROC ; std::allocator<SPDTVertex>::allocate, COMDAT
; _this$ = ecx

; 577  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 1c		 je	 SHORT $LN4@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00011	77 1b		 ja	 SHORT $LN11@allocate
  00013	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00016	c1 e0 03	 shl	 eax, 3
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001f	8b c8		 mov	 ecx, eax
  00021	83 c4 04	 add	 esp, 4
  00024	85 c9		 test	 ecx, ecx
  00026	74 06		 je	 SHORT $LN11@allocate
$LN4@allocate:

; 578  : 		return (_Allocate(_Count, (pointer)0));

  00028	8b c1		 mov	 eax, ecx

; 579  : 		}

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
$LN11@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002e	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN13@allocate:
$LN10@allocate:
  00033	cc		 int	 3
?allocate@?$allocator@USPDTVertex@@@std@@QAEPAUSPDTVertex@@I@Z ENDP ; std::allocator<SPDTVertex>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@USPDTVertex@@@std@@QAEXPAUSPDTVertex@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@USPDTVertex@@@std@@QAEXPAUSPDTVertex@@I@Z PROC ; std::allocator<SPDTVertex>::deallocate, COMDAT
; _this$ = ecx

; 572  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 574  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$allocator@USPDTVertex@@@std@@QAEXPAUSPDTVertex@@I@Z ENDP ; std::allocator<SPDTVertex>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??0?$allocator@USPDTVertex@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@USPDTVertex@@@std@@QAE@XZ PROC		; std::allocator<SPDTVertex>::allocator<SPDTVertex>, COMDAT
; _this$ = ecx

; 553  : 		{	// construct default allocator (do nothing)
; 554  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@USPDTVertex@@@std@@QAE@XZ ENDP		; std::allocator<SPDTVertex>::allocator<SPDTVertex>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
;	COMDAT ?GenScreenShotTag@@YAXPBDKPADI@Z
_TEXT	SEGMENT
_src$ = 8						; size = 4
_crc32$ = 12						; size = 4
_leaf$ = 16						; size = 4
_leafLen$ = 20						; size = 4
?GenScreenShotTag@@YAXPBDKPADI@Z PROC			; GenScreenShotTag, COMDAT

; 158  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 159  : 	const char* p = src;

  00004	8b 75 08	 mov	 esi, DWORD PTR _src$[ebp]

; 160  : 	const char* n = p;
; 161  : 	while (n = strchr(p, '\\'))

  00007	6a 5c		 push	 92			; 0000005cH
  00009	56		 push	 esi
  0000a	e8 00 00 00 00	 call	 _strchr
  0000f	83 c4 08	 add	 esp, 8
  00012	85 c0		 test	 eax, eax
  00014	74 12		 je	 SHORT $LN1@GenScreenS
$LL2@GenScreenS:

; 162  : 		p = n + 1;

  00016	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  00019	6a 5c		 push	 92			; 0000005cH
  0001b	56		 push	 esi
  0001c	e8 00 00 00 00	 call	 _strchr
  00021	83 c4 08	 add	 esp, 8
  00024	85 c0		 test	 eax, eax
  00026	75 ee		 jne	 SHORT $LL2@GenScreenS
$LN1@GenScreenS:

; 163  : 
; 164  : 	_snprintf(leaf, leafLen, "YMIR_METIN2:%s:0x%.8x", p, crc32);

  00028	ff 75 0c	 push	 DWORD PTR _crc32$[ebp]
  0002b	56		 push	 esi
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@HJKBJNEI@YMIR_METIN2?3?$CFs?30x?$CF?48x?$AA@
  00031	ff 75 14	 push	 DWORD PTR _leafLen$[ebp]
  00034	ff 75 10	 push	 DWORD PTR _leaf$[ebp]
  00037	e8 00 00 00 00	 call	 __snprintf
  0003c	83 c4 14	 add	 esp, 20			; 00000014H
  0003f	5e		 pop	 esi

; 165  : }

  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?GenScreenShotTag@@YAXPBDKPADI@Z ENDP			; GenScreenShotTag
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterbase\singleton.h
;	COMDAT ?Instance@?$CSingleton@VCStateManager@@@@SAAAVCStateManager@@XZ
_TEXT	SEGMENT
?Instance@?$CSingleton@VCStateManager@@@@SAAAVCStateManager@@XZ PROC ; CSingleton<CStateManager>::Instance, COMDAT

; 26   : 		assert(ms_singleton);
; 27   : 		return (*ms_singleton);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton

; 28   : 	}

  00005	c3		 ret	 0
?Instance@?$CSingleton@VCStateManager@@@@SAAAVCStateManager@@XZ ENDP ; CSingleton<CStateManager>::Instance
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCPythonGraphic@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCPythonGraphic@@UAEPAXI@Z PROC			; CPythonGraphic::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CPythonGraphic@@UAE@XZ ; CPythonGraphic::~CPythonGraphic
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCPythonGraphic@@UAEPAXI@Z ENDP			; CPythonGraphic::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
;	COMDAT ??1?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@XZ PROC ; std::stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::~stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1215 : 		_Tidy();

  00003	e8 00 00 00 00	 call	 ?_Tidy@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@IAEXXZ ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Tidy
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00008	ff 36		 push	 DWORD PTR [esi]
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
; File a:\vs\vc\include\deque

; 907  : 		this->_Myproxy = 0;

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	5e		 pop	 esi
  00019	c3		 ret	 0
??1?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@XZ ENDP ; std::stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::~stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\stack
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\stack
;	COMDAT ?pop@?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?pop@?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAEXXZ PROC ; std::stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::pop, COMDAT
; _this$ = ecx
; File a:\vs\vc\include\deque

; 1491 : 		if (--this->_Mysize == 0)

  00000	ff 49 10	 dec	 DWORD PTR [ecx+16]
  00003	75 07		 jne	 SHORT $LN3@pop

; 1492 : 			this->_Myoff = 0;

  00005	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
$LN3@pop:
; File a:\vs\vc\include\stack

; 146  : 		}

  0000c	c3		 ret	 0
?pop@?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAEXXZ ENDP ; std::stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::pop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\stack
;	COMDAT ?push@?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAEXABUSState@CPythonGraphic@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push@?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAEXABUSState@CPythonGraphic@@@Z PROC ; std::stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::push, COMDAT
; _this$ = ecx

; 139  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 141  : 		}

  00003	5d		 pop	 ebp

; 140  : 		c.push_back(_Val);

  00004	e9 00 00 00 00	 jmp	 ?push_back@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEXABUSState@CPythonGraphic@@@Z ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::push_back
?push@?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAEXABUSState@CPythonGraphic@@@Z ENDP ; std::stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::push
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\stack
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\stack
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\stack
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\stack
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\stack
;	COMDAT ?top@?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAEAAUSState@CPythonGraphic@@XZ
_TEXT	SEGMENT
$T1 = -24						; size = 12
$T2 = -12						; size = 12
?top@?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAEAAUSState@CPythonGraphic@@XZ PROC ; std::stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::top, COMDAT
; _this$ = ecx

; 129  : 		{	// return last element of mutable stack

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
; File a:\vs\vc\include\deque

; 1416 : 		return (*(end() - 1));

  00006	8d 45 f4	 lea	 eax, DWORD PTR $T2[ebp]
  00009	6a 01		 push	 1
  0000b	50		 push	 eax
  0000c	8d 45 e8	 lea	 eax, DWORD PTR $T1[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?end@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@2@XZ ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::end
  00015	8b c8		 mov	 ecx, eax
  00017	e8 00 00 00 00	 call	 ??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::operator-
  0001c	8b d0		 mov	 edx, eax
; File a:\vs\vc\include\xutility

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  0001e	8b 02		 mov	 eax, DWORD PTR [edx]
  00020	85 c0		 test	 eax, eax
  00022	75 11		 jne	 SHORT $LN11@top
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00024	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File a:\vs\vc\include\stack

; 130  : 		return (c.back());

  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0002a	49		 dec	 ecx
  0002b	23 4a 08	 and	 ecx, DWORD PTR [edx+8]
; File a:\vs\vc\include\stack

; 130  : 		return (c.back());

  0002e	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 131  : 		}

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
$LN11@top:
; File a:\vs\vc\include\xutility

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00035	8b 00		 mov	 eax, DWORD PTR [eax]
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00037	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File a:\vs\vc\include\stack

; 130  : 		return (c.back());

  0003a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0003d	49		 dec	 ecx
  0003e	23 4a 08	 and	 ecx, DWORD PTR [edx+8]
; File a:\vs\vc\include\stack

; 130  : 		return (c.back());

  00041	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 131  : 		}

  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
?top@?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAEAAUSState@CPythonGraphic@@XZ ENDP ; std::stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::top
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\stack
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\stack
;	COMDAT ?empty@?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QBE_NXZ PROC ; std::stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::empty, COMDAT
; _this$ = ecx
; File a:\vs\vc\include\deque

; 1362 : 		return (this->_Mysize == 0);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  00005	0f 94 c0	 sete	 al
; File a:\vs\vc\include\stack

; 121  : 		}

  00008	c3		 ret	 0
?empty@?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QBE_NXZ ENDP ; std::stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::empty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\stack
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\stack
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\stack
;	COMDAT ??0?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@XZ PROC ; std::stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >, COMDAT
; _this$ = ecx

; 28   : 		{	// construct with empty container

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File a:\vs\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00003	6a 08		 push	 8
; File a:\vs\vc\include\xutility

; 80   : 		{	// construct childless container

  00005	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File a:\vs\vc\include\deque

; 773  : 		_Map = _Mapptr();

  0000b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 774  : 		_Mapsize = 0;

  00012	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 775  : 		_Myoff = 0;

  00019	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 776  : 		_Mysize = 0;

  00020	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File a:\vs\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00027	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002c	83 c4 04	 add	 esp, 4
  0002f	85 c0		 test	 eax, eax
  00031	74 17		 je	 SHORT $LN52@stack
  00033	89 06		 mov	 DWORD PTR [esi], eax

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);
; 32   : 	}
; 33   : 
; 34   : 		// TEMPLATE FUNCTION _Construct
; 35   : template<class _Ty1,
; 36   : 	class _Ty2> inline
; 37   : 	void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
; 38   : 	{	// construct object at _Ptr with value _Val
; 39   : 	void *_Vptr = _Ptr;
; 40   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));
; 41   : 	}
; 42   : 
; 43   : template<class _Ty1> inline
; 44   : 	void _Construct(_Ty1 *_Ptr)
; 45   : 	{	// construct object at _Ptr with default value
; 46   : 	void *_Vptr = _Ptr;
; 47   : 
; 48   : 	::new (_Vptr) _Ty1();
; 49   : 	}
; 50   : 
; 51   : 		// TEMPLATE FUNCTION _Destroy
; 52   : template<class _Ty> inline
; 53   : 	void _Destroy(_Ty *_Ptr)
; 54   : 	{	// destroy object at _Ptr
; 55   : 	_Ptr->~_Ty();
; 56   : 	}
; 57   : 
; 58   : template<> inline
; 59   : 	void _Destroy(char *)
; 60   : 	{	// destroy a char (do nothing)
; 61   : 	}
; 62   : 
; 63   : template<> inline
; 64   : 	void _Destroy(wchar_t *)
; 65   : 	{	// destroy a wchar_t (do nothing)
; 66   : 	}
; 67   : 
; 68   :  #ifdef _NATIVE_WCHAR_T_DEFINED
; 69   : template<> inline
; 70   : 	void _Destroy(unsigned short *)
; 71   : 	{	// destroy a unsigned short (do nothing)
; 72   : 	}
; 73   :  #endif /* _NATIVE_WCHAR_T_DEFINED */
; 74   : 
; 75   : 		// TEMPLATE FUNCTION _Destroy_range
; 76   : template<class _Alloc> inline
; 77   : 	void _Destroy_range(typename _Alloc::pointer _First,
; 78   : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 79   : 		_Nonscalar_ptr_iterator_tag)
; 80   : 	{	// destroy [_First, _Last), arbitrary type
; 81   : 	for (; _First != _Last; ++_First)
; 82   : 		_Al.destroy(_First);
; 83   : 	}
; 84   : 
; 85   : template<class _Alloc> inline
; 86   : 	void _Destroy_range(typename _Alloc::pointer _First,
; 87   : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 88   : 		_Scalar_ptr_iterator_tag)
; 89   : 	{	// destroy [_First, _Last), scalar type (do nothing)
; 90   : 	}
; 91   : 
; 92   : template<class _Alloc> inline
; 93   : 	void _Destroy_range(typename _Alloc::pointer _First,
; 94   : 		typename _Alloc::pointer _Last, _Alloc& _Al)
; 95   : 	{	// destroy [_First, _Last)
; 96   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 97   : 	}
; 98   : 
; 99   : 		// TEMPLATE CLASS _Is_simple_alloc
; 100  : template<class _Alty>
; 101  : 	struct _Is_simple_alloc
; 102  : 		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
; 103  : 		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
; 104  : 		&& is_same<typename _Alty::pointer,
; 105  : 			typename _Alty::value_type *>::value
; 106  : 		&& is_same<typename _Alty::const_pointer,
; 107  : 			const typename _Alty::value_type *>::value
; 108  : 		&& is_same<typename _Alty::reference,
; 109  : 			typename _Alty::value_type&>::value
; 110  : 		&& is_same<typename _Alty::const_reference,
; 111  : 			const typename _Alty::value_type&>::value>
; 112  : 	{	// tests if allocator has simple addressing
; 113  : 	};
; 114  : 
; 115  : 		// TEMPLATE CLASS _Simple_types
; 116  : template<class _Value_type>
; 117  : 	struct _Simple_types
; 118  : 	{	// wraps types needed by iterators
; 119  : 	typedef _Value_type value_type;
; 120  : 	typedef size_t size_type;
; 121  : 	typedef ptrdiff_t difference_type;
; 122  : 	typedef value_type *pointer;
; 123  : 	typedef const value_type *const_pointer;
; 124  : 	typedef value_type& reference;
; 125  : 	typedef const value_type& const_reference;
; 126  : 	};
; 127  : 
; 128  : 		// TEMPLATE CLASS _Get_voidptr
; 129  : template<class _Alty,
; 130  : 	class _Pointer>
; 131  : 	struct _Get_voidptr
; 132  : 	{	// get void pointer for allocator
; 133  : 	typedef typename _Alty::template rebind<void>::other _Alvoid;
; 134  : 	typedef typename _Alvoid::pointer type;
; 135  : 	};
; 136  : 
; 137  : template<class _Alty,
; 138  : 	class _Ty>
; 139  : 	struct _Get_voidptr<_Alty, _Ty *>
; 140  : 	{	// get raw void pointer for allocator
; 141  : 	typedef void *type;
; 142  : 	};
; 143  : 
; 144  : 		// TEMPLATE CLASS _Is_iterator
; 145  : template<class _Iter>
; 146  : 	struct _Is_iterator
; 147  : 	: public integral_constant<bool, !is_integral<_Iter>::value>
; 148  : 	{	// tests for reasonable iterator candidate
; 149  : 	};
; 150  : 
; 151  : 		// TEMPLATE STRUCT _Get_first_parameter
; 152  : template<class _Ty>
; 153  : 	struct _Get_first_parameter;
; 154  : 
; 155  : template<template<class, class...> class _Ty,
; 156  : 	class _First,
; 157  : 	class... _Rest>
; 158  : 	struct _Get_first_parameter<_Ty<_First, _Rest...> >
; 159  : 	{	// given _Ty<_First, _Rest...>, extract _First
; 160  : 	typedef _First type;
; 161  : 	};
; 162  : 
; 163  : 		// TEMPLATE STRUCT _Replace_first_parameter
; 164  : template<class _Newfirst,
; 165  : 	class _Ty>
; 166  : 	struct _Replace_first_parameter;
; 167  : 
; 168  : template<class _Newfirst,
; 169  : 	template<class, class...> class _Ty,
; 170  : 	class _First,
; 171  : 	class... _Rest>
; 172  : 	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
; 173  : 	{	// given _Ty<_First, _Rest...>, replace _First
; 174  : 	typedef _Ty<_Newfirst, _Rest...> type;
; 175  : 	};
; 176  : 
; 177  : 		// TEMPLATE STRUCT _Get_element_type
; 178  : template<class _Ty>
; 179  : 	struct _Get_element_type
; 180  : 	_GET_TYPE_OR_DEFAULT(element_type,
; 181  : 		typename _Get_first_parameter<_Uty>::type);
; 182  : 
; 183  : 		// TEMPLATE STRUCT _Get_ptr_difference_type
; 184  : template<class _Ty>
; 185  : 	struct _Get_ptr_difference_type
; 186  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 187  : 		ptrdiff_t);
; 188  : 
; 189  : 		// TEMPLATE STRUCT _Get_rebind_type
; 190  : template<class _Ty,
; 191  : 	class _Other>
; 192  : 	struct _Get_rebind_type
; 193  : 	_GET_TYPE_OR_DEFAULT(template rebind<_Other>::other,
; 194  : 		typename _Replace_first_parameter<_Other _COMMA _Uty>::type);
; 195  : 
; 196  : 		// TEMPLATE CLASS pointer_traits
; 197  : template<class _Ty>
; 198  : 	struct pointer_traits
; 199  : 	{	// defines traits for arbitrary pointers
; 200  : 	typedef typename _Get_element_type<_Ty>::type element_type;
; 201  : 	typedef _Ty pointer;
; 202  : 	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;
; 203  : 
; 204  : 	template<class _Other>
; 205  : 		using rebind = typename _Get_rebind_type<_Ty, _Other>::type;
; 206  : 
; 207  : 	typedef typename _If<is_void<element_type>::value,
; 208  : 		char&,
; 209  : 		typename add_reference<element_type>::type>::type _Reftype;
; 210  : 
; 211  : 	static pointer pointer_to(_Reftype _Val)
; 212  : 		{	// convert raw reference to pointer
; 213  : 		return (_Ty::pointer_to(_Val));
; 214  : 		}
; 215  : 	};
; 216  : 
; 217  : 		// TEMPLATE CLASS pointer_traits<_Ty *>
; 218  : template<class _Ty>
; 219  : 	struct pointer_traits<_Ty *>
; 220  : 	{	// defines traits for raw pointers
; 221  : 	typedef _Ty element_type;
; 222  : 	typedef _Ty *pointer;
; 223  : 	typedef ptrdiff_t difference_type;
; 224  : 
; 225  : 	template<class _Other>
; 226  : 		using rebind = _Other *;
; 227  : 
; 228  : 	typedef typename _If<is_void<_Ty>::value,
; 229  : 		char&,
; 230  : 		typename add_reference<_Ty>::type>::type _Reftype;
; 231  : 
; 232  : 	static pointer pointer_to(_Reftype _Val)
; 233  : 		{	// convert raw reference to pointer
; 234  : 		return (_STD addressof(_Val));
; 235  : 		}
; 236  : 	};
; 237  : 
; 238  : 		// TEMPLATE STRUCT _Get_pointer_type
; 239  : template<class _Ty>
; 240  : 	struct _Get_pointer_type
; 241  : 	_GET_TYPE_OR_DEFAULT(pointer,
; 242  : 		typename _Ty::value_type *);
; 243  : 
; 244  : 		// TEMPLATE STRUCT _Get_const_pointer_type
; 245  : template<class _Ty>
; 246  : 	struct _Get_const_pointer_type
; 247  : 	_GET_TYPE_OR_DEFAULT(const_pointer,
; 248  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 249  : 			::template rebind<const typename _Ty::value_type>);
; 250  : 
; 251  : 		// TEMPLATE STRUCT _Get_void_pointer_type
; 252  : template<class _Ty>
; 253  : 	struct _Get_void_pointer_type
; 254  : 	_GET_TYPE_OR_DEFAULT(void_pointer,
; 255  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 256  : 			::template rebind<void>);
; 257  : 
; 258  : 		// TEMPLATE STRUCT _Get_const_void_pointer_type
; 259  : template<class _Ty>
; 260  : 	struct _Get_const_void_pointer_type
; 261  : 	_GET_TYPE_OR_DEFAULT(const_void_pointer,
; 262  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 263  : 			::template rebind<const void>);
; 264  : 
; 265  : 		// TEMPLATE STRUCT _Get_difference_type
; 266  : template<class _Ty>
; 267  : 	struct _Get_difference_type
; 268  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 269  : 		typename _Get_ptr_difference_type<
; 270  : 			typename _Get_pointer_type<_Ty>::type>::type);
; 271  : 
; 272  : 		// TEMPLATE STRUCT _Get_size_type
; 273  : template<class _Ty>
; 274  : 	struct _Get_size_type
; 275  : 	_GET_TYPE_OR_DEFAULT(size_type,
; 276  : 		typename make_unsigned<
; 277  : 			typename _Get_difference_type<_Ty>::type>::type);
; 278  : 
; 279  : 		// TEMPLATE STRUCT _Get_propagate_on_container_copy
; 280  : template<class _Ty>
; 281  : 	struct _Get_propagate_on_container_copy
; 282  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_copy_assignment,
; 283  : 		false_type);
; 284  : 
; 285  : 		// TEMPLATE STRUCT _Get_propagate_on_container_move
; 286  : template<class _Ty>
; 287  : 	struct _Get_propagate_on_container_move
; 288  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_move_assignment,
; 289  : 		false_type);
; 290  : 
; 291  : 		// TEMPLATE STRUCT _Get_propagate_on_container_swap
; 292  : template<class _Ty>
; 293  : 	struct _Get_propagate_on_container_swap
; 294  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_swap,
; 295  : 		false_type);
; 296  : 
; 297  : 		// STRUCT _Alloc_allocate
; 298  : struct _Alloc_allocate
; 299  : 	{	// determines allocator_traits<_Alloc>
; 300  : 		// ::allocate(size_type, const_void_pointer)
; 301  : 
; 302  : 	template<class _Alloc,
; 303  : 		class _Size_type,
; 304  : 		class _Const_void_pointer>
; 305  : 		static auto _Fn(int, _Alloc& _Al,
; 306  : 			_Size_type _Count,
; 307  : 			_Const_void_pointer _Hint)
; 308  : 			-> decltype(_Al.allocate(_Count, _Hint))
; 309  : 		{	// call allocator supplied version
; 310  : 		return (_Al.allocate(_Count, _Hint));
; 311  : 		}
; 312  : 
; 313  : 	template<class _Alloc,
; 314  : 		class _Size_type,
; 315  : 		class _Const_void_pointer>
; 316  : 		static auto _Fn(_Wrap_int, _Alloc& _Al,
; 317  : 			_Size_type _Count,
; 318  : 			_Const_void_pointer)
; 319  : 			-> decltype(_Al.allocate(_Count))
; 320  : 		{	// call default version
; 321  : 		return (_Al.allocate(_Count));
; 322  : 		}
; 323  : 	};
; 324  : 
; 325  : 		// STRUCT _Alloc_construct
; 326  : struct _Alloc_construct
; 327  : 	{	// determines allocator_traits<_Ty>
; 328  : 		// ::construct(_Ty&, _Objty *, _Types...)
; 329  : 
; 330  : 	template<class _Ty,
; 331  : 		class _Objty,
; 332  : 		class... _Types>
; 333  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
; 334  : 			_Types&&... _Args)
; 335  : 			-> decltype(
; 336  : 				_Al.construct(_Ptr, _STD forward<_Types>(_Args)...))
; 337  : 		{	// call allocator supplied version
; 338  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 339  : 		}
; 340  : 
; 341  : 	template<class _Ty,
; 342  : 		class _Objty,
; 343  : 		class... _Types>
; 344  : 		static auto _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
; 345  : 			_Types&&... _Args)
; 346  : 			-> void
; 347  : 		{	// call default version
; 348  : 		::new (static_cast<void *>(_Ptr))
; 349  : 			_Objty(_STD forward<_Types>(_Args)...);
; 350  : 		}
; 351  : 
; 352  : 	};
; 353  : 
; 354  : 		// STRUCT _Alloc_destroy
; 355  : struct _Alloc_destroy
; 356  : 	{	// determines allocator_traits<_Ty>::destroy(_Ty&, _Objty *)
; 357  : 	template<class _Ty,
; 358  : 		class _Objty>
; 359  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
; 360  : 			-> decltype(_Al.destroy(_Ptr))
; 361  : 		{	// call allocator supplied version
; 362  : 		_Al.destroy(_Ptr);
; 363  : 		}
; 364  : 
; 365  : 	template<class _Ty,
; 366  : 		class _Objty>
; 367  : 		static auto _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
; 368  : 			-> void
; 369  : 		{	// call default version
; 370  : 		_Ptr->~_Objty();
; 371  : 		}
; 372  : 	};
; 373  : 
; 374  : 		// STRUCT _Alloc_max_size
; 375  : struct _Alloc_max_size
; 376  : 	{	// determines allocator_traits<_Ty>::max_size(const _Ty&)
; 377  : 	template<class _Ty>
; 378  : 		static auto _Fn(int, const _Ty& _Al)
; 379  : 			-> decltype(_Al.max_size())
; 380  : 		{	// call allocator supplied version
; 381  : 		return (_Al.max_size());
; 382  : 		}
; 383  : 
; 384  : 	template<class _Ty>
; 385  : 		static auto _Fn(_Wrap_int, const _Ty&)
; 386  : 			-> typename _Get_size_type<_Ty>::type
; 387  : 		{	// call default version
; 388  : 		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
; 389  : 		}
; 390  : 	};
; 391  : 
; 392  : 		// STRUCT _Alloc_select
; 393  : struct _Alloc_select
; 394  : 	{	// determines allocator_traits<_Ty>
; 395  : 		// ::select_on_container_copy_construction(const _Alloc&)
; 396  : 
; 397  : 	template<class _Ty>
; 398  : 		static auto _Fn(int, const _Ty& _Al)
; 399  : 			-> decltype((_Ty)_Al.select_on_container_copy_construction())
; 400  : 		{	// call allocator supplied version
; 401  : 		return (_Al.select_on_container_copy_construction());
; 402  : 		}
; 403  : 
; 404  : 	template<class _Ty>
; 405  : 		static auto _Fn(_Wrap_int, const _Ty& _Al)
; 406  : 			-> _Ty
; 407  : 		{	// call default version
; 408  : 		return (_Al);
; 409  : 		}
; 410  : 	};
; 411  : 
; 412  : 		// TEMPLATE CLASS allocator_traits
; 413  : template<class _Alloc>
; 414  : 	struct allocator_traits
; 415  : 	{	// defines traits for allocators
; 416  : 	typedef allocator_traits<_Alloc> other;
; 417  : 
; 418  : 	typedef _Alloc allocator_type;
; 419  : 	typedef typename _Alloc::value_type value_type;
; 420  : 
; 421  : 	typedef typename _Get_pointer_type<_Alloc>::type
; 422  : 		pointer;
; 423  : 	typedef typename _Get_const_pointer_type<_Alloc>::type
; 424  : 		const_pointer;
; 425  : 	typedef typename _Get_void_pointer_type<_Alloc>::type
; 426  : 		void_pointer;
; 427  : 	typedef typename _Get_const_void_pointer_type<_Alloc>::type
; 428  : 		const_void_pointer;
; 429  : 
; 430  : 	typedef typename _Get_size_type<_Alloc>::type size_type;
; 431  : 	typedef typename _Get_difference_type<_Alloc>::type difference_type;
; 432  : 
; 433  : 	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
; 434  : 		propagate_on_container_copy_assignment;
; 435  : 	typedef typename _Get_propagate_on_container_move<_Alloc>::type
; 436  : 		propagate_on_container_move_assignment;
; 437  : 	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
; 438  : 		propagate_on_container_swap;
; 439  : 
; 440  : 	template<class _Other>
; 441  : 		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;
; 442  : 
; 443  : 	template<class _Other>
; 444  : 		using rebind_traits = allocator_traits<rebind_alloc<_Other> >;
; 445  : 
; 446  : 	static pointer allocate(_Alloc& _Al, size_type _Count)
; 447  : 		{	// allocate array of _Count elements
; 448  : 		return (_Al.allocate(_Count));
; 449  : 		}
; 450  : 
; 451  : 	static pointer allocate(_Alloc& _Al, size_type _Count,
; 452  : 		const_void_pointer _Hint)
; 453  : 		{	// allocate array of _Count elements, with hint
; 454  : 		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
; 455  : 		}
; 456  : 
; 457  : 	static void deallocate(_Alloc& _Al,
; 458  : 		pointer _Ptr, size_type _Count)
; 459  : 		{	// deallocate _Count elements at _Ptr
; 460  : 		_Al.deallocate(_Ptr, _Count);
; 461  : 		}
; 462  : 
; 463  : 	template<class _Ty,
; 464  : 		class... _Types>
; 465  : 		static void construct(_Alloc& _Al, _Ty *_Ptr,
; 466  : 			_Types&&... _Args)
; 467  : 		{	// construct _Ty(_Types...) at _Ptr
; 468  : 		_Alloc_construct::_Fn(0, _Al, _Ptr,
; 469  : 			_STD forward<_Types>(_Args)...);
; 470  : 		}
; 471  : 
; 472  : 
; 473  : 	template<class _Ty>
; 474  : 		static void destroy(_Alloc& _Al, _Ty *_Ptr)
; 475  : 		{	// destroy object at _Ptr
; 476  : 		_Alloc_destroy::_Fn(0, _Al, _Ptr);
; 477  : 		}
; 478  : 
; 479  : 	static size_type max_size(const _Alloc& _Al)
; 480  : 		{	// get maximum size
; 481  : 		return (_Alloc_max_size::_Fn(0, _Al));
; 482  : 		}
; 483  : 
; 484  : 	static _Alloc select_on_container_copy_construction(
; 485  : 		const _Alloc& _Al)
; 486  : 		{	// get allocator to use
; 487  : 		return (_Alloc_select::_Fn(0, _Al));
; 488  : 		}
; 489  : 	};
; 490  : 
; 491  : 		// TEMPLATE CLASS _Allocator_base
; 492  : template<class _Ty>
; 493  : 	struct _Allocator_base
; 494  : 	{	// base class for generic allocators
; 495  : 	typedef _Ty value_type;
; 496  : 	};
; 497  : 
; 498  : 		// TEMPLATE CLASS _Allocator_base<const _Ty>
; 499  : template<class _Ty>
; 500  : 	struct _Allocator_base<const _Ty>
; 501  : 	{	// base class for generic allocators for const _Ty
; 502  : 	typedef _Ty value_type;
; 503  : 	};
; 504  : 
; 505  : 		// TEMPLATE CLASS allocator
; 506  : template<class _Ty>
; 507  : 	class allocator
; 508  : 		: public _Allocator_base<_Ty>
; 509  : 	{	// generic allocator for objects of class _Ty
; 510  : public:
; 511  : 	typedef allocator<_Ty> other;
; 512  : 
; 513  : 	typedef _Allocator_base<_Ty> _Mybase;
; 514  : 	typedef typename _Mybase::value_type value_type;
; 515  : 
; 516  : 	typedef value_type *pointer;
; 517  : 	typedef const value_type *const_pointer;
; 518  : 	typedef void *void_pointer;
; 519  : 	typedef const void *const_void_pointer;
; 520  : 
; 521  : 	typedef value_type& reference;
; 522  : 	typedef const value_type& const_reference;
; 523  : 
; 524  : 	typedef size_t size_type;
; 525  : 	typedef ptrdiff_t difference_type;
; 526  : 
; 527  : 	typedef false_type propagate_on_container_copy_assignment;
; 528  : 	typedef false_type propagate_on_container_move_assignment;
; 529  : 	typedef false_type propagate_on_container_swap;
; 530  : 
; 531  : 	allocator<_Ty> select_on_container_copy_construction() const
; 532  : 		{	// return this allocator
; 533  : 		return (*this);
; 534  : 		}
; 535  : 
; 536  : 	template<class _Other>
; 537  : 		struct rebind
; 538  : 		{	// convert this type to allocator<_Other>
; 539  : 		typedef allocator<_Other> other;
; 540  : 		};
; 541  : 
; 542  : 	pointer address(reference _Val) const _NOEXCEPT
; 543  : 		{	// return address of mutable _Val
; 544  : 		return (_STD addressof(_Val));
; 545  : 		}
; 546  : 
; 547  : 	const_pointer address(const_reference _Val) const _NOEXCEPT
; 548  : 		{	// return address of nonmutable _Val
; 549  : 		return (_STD addressof(_Val));
; 550  : 		}
; 551  : 
; 552  : 	allocator() _THROW0()
; 553  : 		{	// construct default allocator (do nothing)
; 554  : 		}
; 555  : 
; 556  : 	allocator(const allocator<_Ty>&) _THROW0()
; 557  : 		{	// construct by copying (do nothing)
; 558  : 		}
; 559  : 
; 560  : 	template<class _Other>
; 561  : 		allocator(const allocator<_Other>&) _THROW0()
; 562  : 		{	// construct from a related allocator (do nothing)
; 563  : 		}
; 564  : 
; 565  : 	template<class _Other>
; 566  : 		allocator<_Ty>& operator=(const allocator<_Other>&)
; 567  : 		{	// assign from a related allocator (do nothing)
; 568  : 		return (*this);
; 569  : 		}
; 570  : 
; 571  : 	void deallocate(pointer _Ptr, size_type)
; 572  : 		{	// deallocate object at _Ptr, ignore size
; 573  : 		::operator delete(_Ptr);
; 574  : 		}
; 575  : 
; 576  : 	pointer allocate(size_type _Count)
; 577  : 		{	// allocate array of _Count elements
; 578  : 		return (_Allocate(_Count, (pointer)0));
; 579  : 		}
; 580  : 
; 581  : 	pointer allocate(size_type _Count, const void *)
; 582  : 		{	// allocate array of _Count elements, ignore hint
; 583  : 		return (allocate(_Count));
; 584  : 		}
; 585  : 
; 586  : 	void construct(_Ty *_Ptr)
; 587  : 		{	// default construct object at _Ptr
; 588  : 		::new ((void *)_Ptr) _Ty();
; 589  : 		}
; 590  : 
; 591  : 	void construct(_Ty *_Ptr, const _Ty& _Val)
; 592  : 		{	// construct object at _Ptr with value _Val
; 593  : 		::new ((void *)_Ptr) _Ty(_Val);
; 594  : 		}
; 595  : 
; 596  : 	template<class _Objty,
; 597  : 		class... _Types>
; 598  : 		void construct(_Objty *_Ptr, _Types&&... _Args)
; 599  : 		{	// construct _Objty(_Types...) at _Ptr
; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00035	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0003b	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File a:\vs\vc\include\deque

; 897  : 		this->_Myproxy->_Mycont = this;

  00042	8b 06		 mov	 eax, DWORD PTR [esi]
  00044	89 30		 mov	 DWORD PTR [eax], esi
; File a:\vs\vc\include\stack

; 29   : 		}

  00046	8b c6		 mov	 eax, esi
  00048	5e		 pop	 esi
  00049	c3		 ret	 0
$LN52@stack:
; File a:\vs\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  0004a	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN54@stack:
$LN51@stack:
  0004f	cc		 int	 3
??0?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@XZ ENDP ; std::stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
;	COMDAT ?_Tidy@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@IAEXXZ PROC ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Tidy, COMDAT
; _this$ = ecx

; 1827 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1362 : 		return (this->_Mysize == 0);

  00003	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00006	85 c0		 test	 eax, eax

; 1828 : 		_Alpty _Almap(this->_Getal());
; 1829 : 		while (!empty())

  00008	74 13		 je	 SHORT $LN5@Tidy
  0000a	8d 9b 00 00 00
	00		 npad	 6
$LL6@Tidy:

; 1363 : 		}
; 1364 : 
; 1365 : 	allocator_type get_allocator() const _NOEXCEPT
; 1366 : 		{	// return allocator object for values
; 1367 : 		return (this->_Getal());
; 1368 : 		}
; 1369 : 
; 1370 : 	const_reference at(size_type _Pos) const
; 1371 : 		{	// subscript nonmutable sequence with checking
; 1372 : 		if (this->_Mysize <= _Pos)
; 1373 : 			_Xran();
; 1374 : 		return (*(begin() + _Pos));
; 1375 : 		}
; 1376 : 
; 1377 : 	reference at(size_type _Pos)
; 1378 : 		{	// subscript mutable sequence with checking
; 1379 : 		if (this->_Mysize <= _Pos)
; 1380 : 			_Xran();
; 1381 : 		return (*(begin() + _Pos));
; 1382 : 		}
; 1383 : 
; 1384 : 	const_reference operator[](size_type _Pos) const
; 1385 : 		{	// subscript nonmutable sequence
; 1386 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1387 : 		if (this->_Mysize <= _Pos)
; 1388 : 			_DEBUG_ERROR("deque subscript out of range");
; 1389 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1390 : 
; 1391 : 		return (*(begin() + _Pos));
; 1392 : 		}
; 1393 : 
; 1394 : 	reference operator[](size_type _Pos)
; 1395 : 		{	// subscript mutable sequence
; 1396 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1397 : 		if (this->_Mysize <= _Pos)
; 1398 : 			_DEBUG_ERROR("deque subscript out of range");
; 1399 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1400 : 
; 1401 : 		return (*(begin() + _Pos));
; 1402 : 		}
; 1403 : 
; 1404 : 	reference front()
; 1405 : 		{	// return first element of mutable sequence
; 1406 : 		return (*begin());
; 1407 : 		}
; 1408 : 
; 1409 : 	const_reference front() const
; 1410 : 		{	// return first element of nonmutable sequence
; 1411 : 		return (*begin());
; 1412 : 		}
; 1413 : 
; 1414 : 	reference back()
; 1415 : 		{	// return last element of mutable sequence
; 1416 : 		return (*(end() - 1));
; 1417 : 		}
; 1418 : 
; 1419 : 	const_reference back() const
; 1420 : 		{	// return last element of nonmutable sequence
; 1421 : 		return (*(end() - 1));
; 1422 : 		}
; 1423 : 
; 1424 : 	void push_front(const value_type& _Val)
; 1425 : 		{	// insert element at beginning
; 1426 : 		this->_Orphan_all();
; 1427 : 		_PUSH_FRONT_BEGIN;
; 1428 : 		this->_Getal().construct(
; 1429 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ, _Val);
; 1430 : 		_PUSH_FRONT_END;
; 1431 : 		}
; 1432 : 
; 1433 : 	void pop_front()
; 1434 : 		{	// erase element at beginning
; 1435 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1436 : 		if (empty())
; 1437 : 			_DEBUG_ERROR("deque empty before pop");
; 1438 : 		else
; 1439 : 			{	// something to erase, do it
; 1440 : 			_Orphan_off(this->_Myoff);
; 1441 : 			size_type _Block = this->_Getblock(this->_Myoff);
; 1442 : 			this->_Getal().destroy(
; 1443 : 				this->_Map[_Block] + this->_Myoff % _DEQUESIZ);
; 1444 : 			if (--this->_Mysize == 0)
; 1445 : 				this->_Myoff = 0;
; 1446 : 			else
; 1447 : 				++this->_Myoff;
; 1448 : 			}
; 1449 : 
; 1450 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 		size_type _Block = this->_Getblock(this->_Myoff);
; 1452 : 		this->_Getal().destroy(
; 1453 : 			this->_Map[_Block] + this->_Myoff % _DEQUESIZ);
; 1454 : 		if (--this->_Mysize == 0)
; 1455 : 			this->_Myoff = 0;
; 1456 : 		else
; 1457 : 			++this->_Myoff;
; 1458 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1459 : 		}
; 1460 : 
; 1461 : 	void push_back(const value_type& _Val)
; 1462 : 		{	// insert element at end
; 1463 : 		this->_Orphan_all();
; 1464 : 		_PUSH_BACK_BEGIN;
; 1465 : 		this->_Getal().construct(
; 1466 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ, _Val);
; 1467 : 		_PUSH_BACK_END;
; 1468 : 		}
; 1469 : 
; 1470 : 	void pop_back()
; 1471 : 		{	// erase element at end
; 1472 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1473 : 		if (empty())
; 1474 : 			_DEBUG_ERROR("deque empty before pop");
; 1475 : 		else
; 1476 : 			{	// something to erase, do it
; 1477 : 			size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1478 : 			_Orphan_off(_Newoff);
; 1479 : 			size_type _Block = this->_Getblock(_Newoff);
; 1480 : 			this->_Getal().destroy(
; 1481 : 				this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1482 : 			if (--this->_Mysize == 0)
; 1483 : 				this->_Myoff = 0;
; 1484 : 			}
; 1485 : 
; 1486 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1487 : 		size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1488 : 		size_type _Block = this->_Getblock(_Newoff);
; 1489 : 		this->_Getal().destroy(
; 1490 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1491 : 		if (--this->_Mysize == 0)

  00010	48		 dec	 eax
  00011	75 03		 jne	 SHORT $LN13@Tidy

; 1492 : 			this->_Myoff = 0;

  00013	89 46 0c	 mov	 DWORD PTR [esi+12], eax
$LN13@Tidy:

; 1362 : 		return (this->_Mysize == 0);

  00016	85 c0		 test	 eax, eax

; 1828 : 		_Alpty _Almap(this->_Getal());
; 1829 : 		while (!empty())

  00018	75 f6		 jne	 SHORT $LL6@Tidy
  0001a	89 46 10	 mov	 DWORD PTR [esi+16], eax
$LN5@Tidy:
  0001d	57		 push	 edi

; 1831 : 		for (size_type _Block = this->_Mapsize; 0 < _Block; )

  0001e	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00021	85 ff		 test	 edi, edi
  00023	74 18		 je	 SHORT $LN3@Tidy
$LL4@Tidy:

; 1832 : 			{	// free storage for a block and destroy pointer
; 1833 : 			if (this->_Map[--_Block] != pointer())

  00025	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00028	4f		 dec	 edi
  00029	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  0002c	85 c0		 test	 eax, eax
  0002e	74 09		 je	 SHORT $LN2@Tidy
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00036	83 c4 04	 add	 esp, 4
$LN2@Tidy:
; File a:\vs\vc\include\deque

; 1831 : 		for (size_type _Block = this->_Mapsize; 0 < _Block; )

  00039	85 ff		 test	 edi, edi
  0003b	75 e8		 jne	 SHORT $LL4@Tidy
$LN3@Tidy:

; 1834 : 				{	// free block and destroy its pointer
; 1835 : 				this->_Getal().deallocate(this->_Map[_Block], _DEQUESIZ);
; 1836 : 				this->_Getal().destroy(&this->_Map[_Block]);
; 1837 : 				}
; 1838 : 			}
; 1839 : 
; 1840 : 		if (this->_Map != _Mapptr())

  0003d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00040	5f		 pop	 edi
  00041	85 c0		 test	 eax, eax
  00043	74 09		 je	 SHORT $LN38@Tidy
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004b	83 c4 04	 add	 esp, 4
$LN38@Tidy:
; File a:\vs\vc\include\deque

; 1844 : 		this->_Map = _Mapptr();

  0004e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00055	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0005c	5e		 pop	 esi

; 1845 : 		}

  0005d	c3		 ret	 0
?_Tidy@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@IAEXXZ ENDP ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
;	COMDAT ?_Growmap@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$1$ = -16						; size = 4
__Count$1$ = -12					; size = 4
__Myptr$1$ = -8						; size = 4
__Myboff$1$ = -4					; size = 4
__Ptr$1$ = 8						; size = 4
__Count$ = 8						; size = 4
?_Growmap@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@IAEXI@Z PROC ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Growmap, COMDAT
; _this$ = ecx

; 1772 : 		{	// grow map by at least _Count pointers, _Mapsize a power of 2

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx

; 1773 : 		static_assert(1 < _DEQUEMAPSIZ,
; 1774 : 			"The _Xlen() test should always be performed.");
; 1775 : 
; 1776 : 		typedef typename _Alpty::pointer _Blockptr;
; 1777 : 		_Alpty _Almap(this->_Getal());
; 1778 : 		size_type _Newsize = 0 < this->_Mapsize ? this->_Mapsize : 1;

  00009	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  0000c	56		 push	 esi
  0000d	be 01 00 00 00	 mov	 esi, 1
  00012	89 5d f0	 mov	 DWORD PTR _this$1$[ebp], ebx
  00015	57		 push	 edi
  00016	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00019	85 d2		 test	 edx, edx
  0001b	0f 45 f2	 cmovne	 esi, edx
  0001e	8b ff		 npad	 2
$LL7@Growmap:

; 1779 : 		while (_Newsize - this->_Mapsize < _Count || _Newsize < _DEQUEMAPSIZ)

  00020	8b c6		 mov	 eax, esi
  00022	2b c2		 sub	 eax, edx
  00024	3b c1		 cmp	 eax, ecx
  00026	72 05		 jb	 SHORT $LN5@Growmap
  00028	83 fe 08	 cmp	 esi, 8
  0002b	73 13		 jae	 SHORT $LN6@Growmap
$LN5@Growmap:

; 1780 : 			{	// scale _Newsize to 2^N >= _Mapsize + _Count
; 1781 : 			if (max_size() / _DEQUESIZ - _Newsize < _Newsize)

  0002d	b8 ff ff ff 01	 mov	 eax, 33554431		; 01ffffffH
  00032	2b c6		 sub	 eax, esi
  00034	3b c6		 cmp	 eax, esi
  00036	0f 82 35 01 00
	00		 jb	 $LN151@Growmap

; 1782 : 				_Xlen();	// result too long
; 1783 : 			_Newsize *= 2;

  0003c	03 f6		 add	 esi, esi

; 1784 : 			}

  0003e	eb e0		 jmp	 SHORT $LL7@Growmap
$LN6@Growmap:

; 1785 : 		_Count = _Newsize - this->_Mapsize;
; 1786 : 
; 1787 : 		size_type _Myboff = this->_Myoff / _DEQUESIZ;

  00040	8b 7b 0c	 mov	 edi, DWORD PTR [ebx+12]
  00043	2b f2		 sub	 esi, edx
  00045	89 7d fc	 mov	 DWORD PTR __Myboff$1$[ebp], edi
; File a:\vs\vc\include\xmemory0

; 23   : 	void *_Ptr = 0;

  00048	c7 45 08 00 00
	00 00		 mov	 DWORD PTR __Ptr$1$[ebp], 0
; File a:\vs\vc\include\deque

; 1788 : 		_Mapptr _Newmap = _Almap.allocate(this->_Mapsize + _Count);

  0004f	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]
; File a:\vs\vc\include\xmemory0

; 25   : 	if (_Count == 0)

  00052	85 c0		 test	 eax, eax
  00054	74 22		 je	 SHORT $LN32@Growmap

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00056	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0005b	0f 87 0b 01 00
	00		 ja	 $LN168@Growmap
  00061	c1 e0 02	 shl	 eax, 2
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0006a	83 c4 04	 add	 esp, 4
  0006d	89 45 08	 mov	 DWORD PTR __Ptr$1$[ebp], eax
  00070	85 c0		 test	 eax, eax
  00072	0f 84 f4 00 00
	00		 je	 $LN168@Growmap
$LN32@Growmap:
; File a:\vs\vc\include\deque

; 1793 : 			_Myptr, _Almap);	// copy initial to end

  00078	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0007b	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0007e	c1 e0 02	 shl	 eax, 2
  00081	8d 14 b9	 lea	 edx, DWORD PTR [ecx+edi*4]
; File a:\vs\vc\include\xmemory

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  00084	2b c2		 sub	 eax, edx
  00086	03 c1		 add	 eax, ecx
; File a:\vs\vc\include\deque

; 1789 : 		_Mapptr _Myptr = _Newmap + _Myboff;

  00088	8b 4d fc	 mov	 ecx, DWORD PTR __Myboff$1$[ebp]
; File a:\vs\vc\include\xmemory

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  0008b	c1 f8 02	 sar	 eax, 2

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0008e	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]
; File a:\vs\vc\include\deque

; 1789 : 		_Mapptr _Myptr = _Newmap + _Myboff;

  00095	8b 45 08	 mov	 eax, DWORD PTR __Ptr$1$[ebp]
; File a:\vs\vc\include\xmemory

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  00098	57		 push	 edi
  00099	52		 push	 edx
; File a:\vs\vc\include\deque

; 1789 : 		_Mapptr _Myptr = _Newmap + _Myboff;

  0009a	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
; File a:\vs\vc\include\xmemory

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 _memmove
; File a:\vs\vc\include\deque

; 1798 : 				_Myptr, _Almap);	// copy rest of old

  000a3	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
; File a:\vs\vc\include\xmemory

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  000a6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a9	8d 14 07	 lea	 edx, DWORD PTR [edi+eax]
; File a:\vs\vc\include\deque

; 1794 : 		if (_Myboff <= _Count)

  000ac	8b 7d fc	 mov	 edi, DWORD PTR __Myboff$1$[ebp]
; File a:\vs\vc\include\xmemory

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  000af	89 55 f8	 mov	 DWORD PTR __Myptr$1$[ebp], edx
; File a:\vs\vc\include\deque

; 1794 : 		if (_Myboff <= _Count)

  000b2	3b fe		 cmp	 edi, esi
  000b4	77 45		 ja	 SHORT $LN3@Growmap
; File a:\vs\vc\include\xmemory

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  000b6	8d 04 bd 00 00
	00 00		 lea	 eax, DWORD PTR [edi*4]
; File a:\vs\vc\include\deque

; 1800 : 				_Almap);	// clear suffix of new

  000bd	8b d6		 mov	 edx, esi
; File a:\vs\vc\include\xmemory

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  000bf	c1 f8 02	 sar	 eax, 2
; File a:\vs\vc\include\deque

; 1800 : 				_Almap);	// clear suffix of new

  000c2	2b d7		 sub	 edx, edi
  000c4	89 55 f4	 mov	 DWORD PTR __Count$1$[ebp], edx
; File a:\vs\vc\include\xmemory

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  000c7	8d 1c 85 00 00
	00 00		 lea	 ebx, DWORD PTR [eax*4]
  000ce	53		 push	 ebx
  000cf	51		 push	 ecx
  000d0	ff 75 f8	 push	 DWORD PTR __Myptr$1$[ebp]
  000d3	e8 00 00 00 00	 call	 _memmove
; File a:\vs\vc\include\xutility

; 2632 : 	for (; 0 < _Count; --_Count, ++_Dest)

  000d8	8b 4d f4	 mov	 ecx, DWORD PTR __Count$1$[ebp]
; File a:\vs\vc\include\xmemory

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  000db	83 c4 0c	 add	 esp, 12			; 0000000cH
  000de	8d 14 03	 lea	 edx, DWORD PTR [ebx+eax]
; File a:\vs\vc\include\xutility

; 2632 : 	for (; 0 < _Count; --_Count, ++_Dest)

  000e1	85 c9		 test	 ecx, ecx
  000e3	74 09		 je	 SHORT $LN81@Growmap
; File a:\vs\vc\include\deque

; 1798 : 				_Myptr, _Almap);	// copy rest of old

  000e5	33 c0		 xor	 eax, eax
  000e7	8b fa		 mov	 edi, edx
  000e9	f3 ab		 rep stosd
  000eb	8b 7d fc	 mov	 edi, DWORD PTR __Myboff$1$[ebp]
$LN81@Growmap:
; File a:\vs\vc\include\xmemory

; 682  : 	_Fill_n(_First, _Count, (_Valty)0);

  000ee	8b 5d 08	 mov	 ebx, DWORD PTR __Ptr$1$[ebp]
; File a:\vs\vc\include\xutility

; 2632 : 	for (; 0 < _Count; --_Count, ++_Dest)

  000f1	85 ff		 test	 edi, edi
  000f3	74 55		 je	 SHORT $LN139@Growmap
; File a:\vs\vc\include\xmemory

; 682  : 	_Fill_n(_First, _Count, (_Valty)0);

  000f5	8b cf		 mov	 ecx, edi
  000f7	8b fb		 mov	 edi, ebx
; File a:\vs\vc\include\deque

; 1804 : 		else

  000f9	eb 4b		 jmp	 SHORT $LN167@Growmap
$LN3@Growmap:

; 1808 : 				_Myptr, _Almap);	// copy more old

  000fb	8d 3c b5 00 00
	00 00		 lea	 edi, DWORD PTR [esi*4]
; File a:\vs\vc\include\xmemory

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  00102	8b c7		 mov	 eax, edi
  00104	83 e0 fc	 and	 eax, -4			; fffffffcH
  00107	50		 push	 eax
  00108	51		 push	 ecx
  00109	52		 push	 edx
  0010a	e8 00 00 00 00	 call	 _memmove
; File a:\vs\vc\include\deque

; 1811 : 				_Newmap, _Almap);	// copy rest of old

  0010f	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00112	8d 0c 07	 lea	 ecx, DWORD PTR [edi+eax]
; File a:\vs\vc\include\xmemory

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  00115	8b 7d fc	 mov	 edi, DWORD PTR __Myboff$1$[ebp]
  00118	8d 14 bd 00 00
	00 00		 lea	 edx, DWORD PTR [edi*4]
  0011f	2b d1		 sub	 edx, ecx
  00121	03 d0		 add	 edx, eax
  00123	c1 fa 02	 sar	 edx, 2

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  00126	8d 1c 95 00 00
	00 00		 lea	 ebx, DWORD PTR [edx*4]
  0012d	53		 push	 ebx
  0012e	51		 push	 ecx
  0012f	ff 75 08	 push	 DWORD PTR __Ptr$1$[ebp]
  00132	e8 00 00 00 00	 call	 _memmove
  00137	83 c4 18	 add	 esp, 24			; 00000018H
  0013a	8d 3c 03	 lea	 edi, DWORD PTR [ebx+eax]
  0013d	8b 5d 08	 mov	 ebx, DWORD PTR __Ptr$1$[ebp]
; File a:\vs\vc\include\xutility

; 2632 : 	for (; 0 < _Count; --_Count, ++_Dest)

  00140	85 f6		 test	 esi, esi
  00142	74 06		 je	 SHORT $LN139@Growmap
; File a:\vs\vc\include\deque

; 1808 : 				_Myptr, _Almap);	// copy more old

  00144	8b ce		 mov	 ecx, esi
$LN167@Growmap:
  00146	33 c0		 xor	 eax, eax
  00148	f3 ab		 rep stosd
$LN139@Growmap:

; 1812 : 			_Uninitialized_default_fill_n(_Myptr, _Count,
; 1813 : 				_Almap);	// clear rest to initial block
; 1814 : 			}
; 1815 : 
; 1816 : 		_Destroy_range(this->_Map + _Myboff, this->_Map + this->_Mapsize,
; 1817 : 			_Almap);
; 1818 : 		if (this->_Map != _Mapptr())

  0014a	8b 7d f0	 mov	 edi, DWORD PTR _this$1$[ebp]
  0014d	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00150	85 c0		 test	 eax, eax
  00152	74 09		 je	 SHORT $LN144@Growmap
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00154	50		 push	 eax
  00155	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0015a	83 c4 04	 add	 esp, 4
$LN144@Growmap:
; File a:\vs\vc\include\deque

; 1823 : 		this->_Mapsize += _Count;

  0015d	01 77 08	 add	 DWORD PTR [edi+8], esi
  00160	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00163	5f		 pop	 edi
  00164	5e		 pop	 esi
  00165	5b		 pop	 ebx

; 1824 : 		}

  00166	8b e5		 mov	 esp, ebp
  00168	5d		 pop	 ebp
  00169	c2 04 00	 ret	 4
$LN168@Growmap:
; File a:\vs\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  0016c	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN170@Growmap:
$LN151@Growmap:
; File a:\vs\vc\include\deque

; 1763 : 		_Xlength_error("deque<T> too long");

  00171	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@
  00176	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN171@Growmap:
$LN166@Growmap:
  0017b	cc		 int	 3
?_Growmap@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@IAEXI@Z ENDP ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Growmap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
;	COMDAT ?_Xlen@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@IBEXXZ PROC ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Xlen, COMDAT
; _this$ = ecx

; 1763 : 		_Xlength_error("deque<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@IBEXXZ ENDP ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
;	COMDAT ?pop_back@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?pop_back@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEXXZ PROC ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::pop_back, COMDAT
; _this$ = ecx

; 1472 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1473 : 		if (empty())
; 1474 : 			_DEBUG_ERROR("deque empty before pop");
; 1475 : 		else
; 1476 : 			{	// something to erase, do it
; 1477 : 			size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1478 : 			_Orphan_off(_Newoff);
; 1479 : 			size_type _Block = this->_Getblock(_Newoff);
; 1480 : 			this->_Getal().destroy(
; 1481 : 				this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1482 : 			if (--this->_Mysize == 0)
; 1483 : 				this->_Myoff = 0;
; 1484 : 			}
; 1485 : 
; 1486 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1487 : 		size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1488 : 		size_type _Block = this->_Getblock(_Newoff);
; 1489 : 		this->_Getal().destroy(
; 1490 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1491 : 		if (--this->_Mysize == 0)

  00000	ff 49 10	 dec	 DWORD PTR [ecx+16]
  00003	75 07		 jne	 SHORT $LN1@pop_back

; 1492 : 			this->_Myoff = 0;

  00005	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
$LN1@pop_back:

; 1493 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1494 : 		}

  0000c	c3		 ret	 0
?pop_back@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEXXZ ENDP ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::pop_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
;	COMDAT ?push_back@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEXABUSState@CPythonGraphic@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEXABUSState@CPythonGraphic@@@Z PROC ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::push_back, COMDAT
; _this$ = ecx

; 1462 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx
  00006	57		 push	 edi

; 1464 : 		_PUSH_BACK_BEGIN;

  00007	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0000a	40		 inc	 eax
  0000b	39 43 08	 cmp	 DWORD PTR [ebx+8], eax
  0000e	77 07		 ja	 SHORT $LN2@push_back
  00010	6a 01		 push	 1
  00012	e8 00 00 00 00	 call	 ?_Growmap@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@IAEXI@Z ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Growmap
$LN2@push_back:
  00017	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0001a	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0001d	49		 dec	 ecx
  0001e	21 4b 0c	 and	 DWORD PTR [ebx+12], ecx
  00021	03 43 0c	 add	 eax, DWORD PTR [ebx+12]

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00024	23 c1		 and	 eax, ecx

; 1464 : 		_PUSH_BACK_BEGIN;

  00026	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]
  0002d	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00030	83 3c 07 00	 cmp	 DWORD PTR [edi+eax], 0
  00034	75 19		 jne	 SHORT $LN1@push_back
; File a:\vs\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00036	68 80 00 00 00	 push	 128			; 00000080H
  0003b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00040	8b c8		 mov	 ecx, eax
  00042	83 c4 04	 add	 esp, 4
  00045	85 c9		 test	 ecx, ecx
  00047	74 25		 je	 SHORT $LN41@push_back
; File a:\vs\vc\include\deque

; 1464 : 		_PUSH_BACK_BEGIN;

  00049	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0004c	89 0c 07	 mov	 DWORD PTR [edi+eax], ecx
$LN1@push_back:
; File a:\vs\vc\include\xmemory0

; 593  : 		::new ((void *)_Ptr) _Ty(_Val);

  0004f	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00052	8b 3c 07	 mov	 edi, DWORD PTR [edi+eax]
  00055	85 ff		 test	 edi, edi
  00057	74 0c		 je	 SHORT $LN36@push_back
  00059	56		 push	 esi
  0005a	8b 75 08	 mov	 esi, DWORD PTR __Val$[ebp]
  0005d	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00062	f3 a5		 rep movsd
  00064	5e		 pop	 esi
$LN36@push_back:
; File a:\vs\vc\include\deque

; 1467 : 		_PUSH_BACK_END;

  00065	ff 43 10	 inc	 DWORD PTR [ebx+16]
  00068	5f		 pop	 edi
  00069	5b		 pop	 ebx

; 1468 : 		}

  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
$LN41@push_back:
; File a:\vs\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  0006e	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN43@push_back:
$LN40@push_back:
  00073	cc		 int	 3
?push_back@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEXABUSState@CPythonGraphic@@@Z ENDP ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
;	COMDAT ?back@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEAAUSState@CPythonGraphic@@XZ
_TEXT	SEGMENT
$T1 = -24						; size = 12
$T2 = -12						; size = 12
?back@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEAAUSState@CPythonGraphic@@XZ PROC ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::back, COMDAT
; _this$ = ecx

; 1415 : 		{	// return last element of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 1416 : 		return (*(end() - 1));

  00006	8d 45 f4	 lea	 eax, DWORD PTR $T2[ebp]
  00009	6a 01		 push	 1
  0000b	50		 push	 eax
  0000c	8d 45 e8	 lea	 eax, DWORD PTR $T1[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?end@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@2@XZ ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::end
  00015	8b c8		 mov	 ecx, eax
  00017	e8 00 00 00 00	 call	 ??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::operator-
  0001c	8b d0		 mov	 edx, eax
; File a:\vs\vc\include\xutility

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  0001e	8b 02		 mov	 eax, DWORD PTR [edx]
  00020	85 c0		 test	 eax, eax
  00022	75 11		 jne	 SHORT $LN9@back
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00024	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 1416 : 		return (*(end() - 1));

  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0002a	49		 dec	 ecx
  0002b	23 4a 08	 and	 ecx, DWORD PTR [edx+8]

; 1416 : 		return (*(end() - 1));

  0002e	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 1417 : 		}

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
$LN9@back:
; File a:\vs\vc\include\xutility

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00035	8b 00		 mov	 eax, DWORD PTR [eax]
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00037	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 1416 : 		return (*(end() - 1));

  0003a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0003d	49		 dec	 ecx
  0003e	23 4a 08	 and	 ecx, DWORD PTR [edx+8]

; 1416 : 		return (*(end() - 1));

  00041	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 1417 : 		}

  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
?back@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEAAUSState@CPythonGraphic@@XZ ENDP ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
;	COMDAT ?empty@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QBE_NXZ PROC ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::empty, COMDAT
; _this$ = ecx

; 1362 : 		return (this->_Mysize == 0);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  00005	0f 94 c0	 sete	 al

; 1363 : 		}

  00008	c3		 ret	 0
?empty@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QBE_NXZ ENDP ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::empty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
;	COMDAT ?max_size@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QBEIXZ PROC ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::max_size, COMDAT
; _this$ = ecx

; 1357 : 		return (this->_Getal().max_size());

  00000	b8 ff ff ff 01	 mov	 eax, 33554431		; 01ffffffH

; 1358 : 		}

  00005	c3		 ret	 0
?max_size@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QBEIXZ ENDP ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
;	COMDAT ?end@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@2@XZ PROC ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::end, COMDAT
; _this$ = ecx

; 1260 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File a:\vs\vc\include\xutility

; 114  : 		{	// construct orphaned iterator

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File a:\vs\vc\include\deque

; 1261 : 		return (iterator(this->_Myoff + this->_Mysize, this));

  00006	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00009	03 51 0c	 add	 edx, DWORD PTR [ecx+12]
; File a:\vs\vc\include\xutility

; 171  : 			_Myproxy = _Parent_proxy;

  0000c	8b 09		 mov	 ecx, DWORD PTR [ecx]

; 114  : 		{	// construct orphaned iterator

  0000e	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 171  : 			_Myproxy = _Parent_proxy;

  00015	89 08		 mov	 DWORD PTR [eax], ecx
; File a:\vs\vc\include\deque

; 305  : 		_Myoff = _Off;

  00017	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1262 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?end@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@2@XZ ENDP ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
;	COMDAT ??1?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE@XZ PROC ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::~deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >, COMDAT
; _this$ = ecx

; 1214 : 		{	// destroy the deque

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1215 : 		_Tidy();

  00003	e8 00 00 00 00	 call	 ?_Tidy@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@IAEXXZ ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Tidy
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00008	ff 36		 push	 DWORD PTR [esi]
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
; File a:\vs\vc\include\deque

; 907  : 		this->_Myproxy = 0;

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	5e		 pop	 esi

; 1216 : 		}

  00019	c3		 ret	 0
??1?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE@XZ ENDP ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::~deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
;	COMDAT ??0?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE@XZ PROC ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >, COMDAT
; _this$ = ecx

; 951  : 		{	// construct empty deque

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File a:\vs\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00003	6a 08		 push	 8
; File a:\vs\vc\include\xutility

; 80   : 		{	// construct childless container

  00005	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File a:\vs\vc\include\deque

; 773  : 		_Map = _Mapptr();

  0000b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 774  : 		_Mapsize = 0;

  00012	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 775  : 		_Myoff = 0;

  00019	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 776  : 		_Mysize = 0;

  00020	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File a:\vs\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00027	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002c	83 c4 04	 add	 esp, 4
  0002f	85 c0		 test	 eax, eax
  00031	74 17		 je	 SHORT $LN48@deque
  00033	89 06		 mov	 DWORD PTR [esi], eax

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);
; 32   : 	}
; 33   : 
; 34   : 		// TEMPLATE FUNCTION _Construct
; 35   : template<class _Ty1,
; 36   : 	class _Ty2> inline
; 37   : 	void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
; 38   : 	{	// construct object at _Ptr with value _Val
; 39   : 	void *_Vptr = _Ptr;
; 40   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));
; 41   : 	}
; 42   : 
; 43   : template<class _Ty1> inline
; 44   : 	void _Construct(_Ty1 *_Ptr)
; 45   : 	{	// construct object at _Ptr with default value
; 46   : 	void *_Vptr = _Ptr;
; 47   : 
; 48   : 	::new (_Vptr) _Ty1();
; 49   : 	}
; 50   : 
; 51   : 		// TEMPLATE FUNCTION _Destroy
; 52   : template<class _Ty> inline
; 53   : 	void _Destroy(_Ty *_Ptr)
; 54   : 	{	// destroy object at _Ptr
; 55   : 	_Ptr->~_Ty();
; 56   : 	}
; 57   : 
; 58   : template<> inline
; 59   : 	void _Destroy(char *)
; 60   : 	{	// destroy a char (do nothing)
; 61   : 	}
; 62   : 
; 63   : template<> inline
; 64   : 	void _Destroy(wchar_t *)
; 65   : 	{	// destroy a wchar_t (do nothing)
; 66   : 	}
; 67   : 
; 68   :  #ifdef _NATIVE_WCHAR_T_DEFINED
; 69   : template<> inline
; 70   : 	void _Destroy(unsigned short *)
; 71   : 	{	// destroy a unsigned short (do nothing)
; 72   : 	}
; 73   :  #endif /* _NATIVE_WCHAR_T_DEFINED */
; 74   : 
; 75   : 		// TEMPLATE FUNCTION _Destroy_range
; 76   : template<class _Alloc> inline
; 77   : 	void _Destroy_range(typename _Alloc::pointer _First,
; 78   : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 79   : 		_Nonscalar_ptr_iterator_tag)
; 80   : 	{	// destroy [_First, _Last), arbitrary type
; 81   : 	for (; _First != _Last; ++_First)
; 82   : 		_Al.destroy(_First);
; 83   : 	}
; 84   : 
; 85   : template<class _Alloc> inline
; 86   : 	void _Destroy_range(typename _Alloc::pointer _First,
; 87   : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 88   : 		_Scalar_ptr_iterator_tag)
; 89   : 	{	// destroy [_First, _Last), scalar type (do nothing)
; 90   : 	}
; 91   : 
; 92   : template<class _Alloc> inline
; 93   : 	void _Destroy_range(typename _Alloc::pointer _First,
; 94   : 		typename _Alloc::pointer _Last, _Alloc& _Al)
; 95   : 	{	// destroy [_First, _Last)
; 96   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 97   : 	}
; 98   : 
; 99   : 		// TEMPLATE CLASS _Is_simple_alloc
; 100  : template<class _Alty>
; 101  : 	struct _Is_simple_alloc
; 102  : 		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
; 103  : 		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
; 104  : 		&& is_same<typename _Alty::pointer,
; 105  : 			typename _Alty::value_type *>::value
; 106  : 		&& is_same<typename _Alty::const_pointer,
; 107  : 			const typename _Alty::value_type *>::value
; 108  : 		&& is_same<typename _Alty::reference,
; 109  : 			typename _Alty::value_type&>::value
; 110  : 		&& is_same<typename _Alty::const_reference,
; 111  : 			const typename _Alty::value_type&>::value>
; 112  : 	{	// tests if allocator has simple addressing
; 113  : 	};
; 114  : 
; 115  : 		// TEMPLATE CLASS _Simple_types
; 116  : template<class _Value_type>
; 117  : 	struct _Simple_types
; 118  : 	{	// wraps types needed by iterators
; 119  : 	typedef _Value_type value_type;
; 120  : 	typedef size_t size_type;
; 121  : 	typedef ptrdiff_t difference_type;
; 122  : 	typedef value_type *pointer;
; 123  : 	typedef const value_type *const_pointer;
; 124  : 	typedef value_type& reference;
; 125  : 	typedef const value_type& const_reference;
; 126  : 	};
; 127  : 
; 128  : 		// TEMPLATE CLASS _Get_voidptr
; 129  : template<class _Alty,
; 130  : 	class _Pointer>
; 131  : 	struct _Get_voidptr
; 132  : 	{	// get void pointer for allocator
; 133  : 	typedef typename _Alty::template rebind<void>::other _Alvoid;
; 134  : 	typedef typename _Alvoid::pointer type;
; 135  : 	};
; 136  : 
; 137  : template<class _Alty,
; 138  : 	class _Ty>
; 139  : 	struct _Get_voidptr<_Alty, _Ty *>
; 140  : 	{	// get raw void pointer for allocator
; 141  : 	typedef void *type;
; 142  : 	};
; 143  : 
; 144  : 		// TEMPLATE CLASS _Is_iterator
; 145  : template<class _Iter>
; 146  : 	struct _Is_iterator
; 147  : 	: public integral_constant<bool, !is_integral<_Iter>::value>
; 148  : 	{	// tests for reasonable iterator candidate
; 149  : 	};
; 150  : 
; 151  : 		// TEMPLATE STRUCT _Get_first_parameter
; 152  : template<class _Ty>
; 153  : 	struct _Get_first_parameter;
; 154  : 
; 155  : template<template<class, class...> class _Ty,
; 156  : 	class _First,
; 157  : 	class... _Rest>
; 158  : 	struct _Get_first_parameter<_Ty<_First, _Rest...> >
; 159  : 	{	// given _Ty<_First, _Rest...>, extract _First
; 160  : 	typedef _First type;
; 161  : 	};
; 162  : 
; 163  : 		// TEMPLATE STRUCT _Replace_first_parameter
; 164  : template<class _Newfirst,
; 165  : 	class _Ty>
; 166  : 	struct _Replace_first_parameter;
; 167  : 
; 168  : template<class _Newfirst,
; 169  : 	template<class, class...> class _Ty,
; 170  : 	class _First,
; 171  : 	class... _Rest>
; 172  : 	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
; 173  : 	{	// given _Ty<_First, _Rest...>, replace _First
; 174  : 	typedef _Ty<_Newfirst, _Rest...> type;
; 175  : 	};
; 176  : 
; 177  : 		// TEMPLATE STRUCT _Get_element_type
; 178  : template<class _Ty>
; 179  : 	struct _Get_element_type
; 180  : 	_GET_TYPE_OR_DEFAULT(element_type,
; 181  : 		typename _Get_first_parameter<_Uty>::type);
; 182  : 
; 183  : 		// TEMPLATE STRUCT _Get_ptr_difference_type
; 184  : template<class _Ty>
; 185  : 	struct _Get_ptr_difference_type
; 186  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 187  : 		ptrdiff_t);
; 188  : 
; 189  : 		// TEMPLATE STRUCT _Get_rebind_type
; 190  : template<class _Ty,
; 191  : 	class _Other>
; 192  : 	struct _Get_rebind_type
; 193  : 	_GET_TYPE_OR_DEFAULT(template rebind<_Other>::other,
; 194  : 		typename _Replace_first_parameter<_Other _COMMA _Uty>::type);
; 195  : 
; 196  : 		// TEMPLATE CLASS pointer_traits
; 197  : template<class _Ty>
; 198  : 	struct pointer_traits
; 199  : 	{	// defines traits for arbitrary pointers
; 200  : 	typedef typename _Get_element_type<_Ty>::type element_type;
; 201  : 	typedef _Ty pointer;
; 202  : 	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;
; 203  : 
; 204  : 	template<class _Other>
; 205  : 		using rebind = typename _Get_rebind_type<_Ty, _Other>::type;
; 206  : 
; 207  : 	typedef typename _If<is_void<element_type>::value,
; 208  : 		char&,
; 209  : 		typename add_reference<element_type>::type>::type _Reftype;
; 210  : 
; 211  : 	static pointer pointer_to(_Reftype _Val)
; 212  : 		{	// convert raw reference to pointer
; 213  : 		return (_Ty::pointer_to(_Val));
; 214  : 		}
; 215  : 	};
; 216  : 
; 217  : 		// TEMPLATE CLASS pointer_traits<_Ty *>
; 218  : template<class _Ty>
; 219  : 	struct pointer_traits<_Ty *>
; 220  : 	{	// defines traits for raw pointers
; 221  : 	typedef _Ty element_type;
; 222  : 	typedef _Ty *pointer;
; 223  : 	typedef ptrdiff_t difference_type;
; 224  : 
; 225  : 	template<class _Other>
; 226  : 		using rebind = _Other *;
; 227  : 
; 228  : 	typedef typename _If<is_void<_Ty>::value,
; 229  : 		char&,
; 230  : 		typename add_reference<_Ty>::type>::type _Reftype;
; 231  : 
; 232  : 	static pointer pointer_to(_Reftype _Val)
; 233  : 		{	// convert raw reference to pointer
; 234  : 		return (_STD addressof(_Val));
; 235  : 		}
; 236  : 	};
; 237  : 
; 238  : 		// TEMPLATE STRUCT _Get_pointer_type
; 239  : template<class _Ty>
; 240  : 	struct _Get_pointer_type
; 241  : 	_GET_TYPE_OR_DEFAULT(pointer,
; 242  : 		typename _Ty::value_type *);
; 243  : 
; 244  : 		// TEMPLATE STRUCT _Get_const_pointer_type
; 245  : template<class _Ty>
; 246  : 	struct _Get_const_pointer_type
; 247  : 	_GET_TYPE_OR_DEFAULT(const_pointer,
; 248  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 249  : 			::template rebind<const typename _Ty::value_type>);
; 250  : 
; 251  : 		// TEMPLATE STRUCT _Get_void_pointer_type
; 252  : template<class _Ty>
; 253  : 	struct _Get_void_pointer_type
; 254  : 	_GET_TYPE_OR_DEFAULT(void_pointer,
; 255  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 256  : 			::template rebind<void>);
; 257  : 
; 258  : 		// TEMPLATE STRUCT _Get_const_void_pointer_type
; 259  : template<class _Ty>
; 260  : 	struct _Get_const_void_pointer_type
; 261  : 	_GET_TYPE_OR_DEFAULT(const_void_pointer,
; 262  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 263  : 			::template rebind<const void>);
; 264  : 
; 265  : 		// TEMPLATE STRUCT _Get_difference_type
; 266  : template<class _Ty>
; 267  : 	struct _Get_difference_type
; 268  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 269  : 		typename _Get_ptr_difference_type<
; 270  : 			typename _Get_pointer_type<_Ty>::type>::type);
; 271  : 
; 272  : 		// TEMPLATE STRUCT _Get_size_type
; 273  : template<class _Ty>
; 274  : 	struct _Get_size_type
; 275  : 	_GET_TYPE_OR_DEFAULT(size_type,
; 276  : 		typename make_unsigned<
; 277  : 			typename _Get_difference_type<_Ty>::type>::type);
; 278  : 
; 279  : 		// TEMPLATE STRUCT _Get_propagate_on_container_copy
; 280  : template<class _Ty>
; 281  : 	struct _Get_propagate_on_container_copy
; 282  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_copy_assignment,
; 283  : 		false_type);
; 284  : 
; 285  : 		// TEMPLATE STRUCT _Get_propagate_on_container_move
; 286  : template<class _Ty>
; 287  : 	struct _Get_propagate_on_container_move
; 288  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_move_assignment,
; 289  : 		false_type);
; 290  : 
; 291  : 		// TEMPLATE STRUCT _Get_propagate_on_container_swap
; 292  : template<class _Ty>
; 293  : 	struct _Get_propagate_on_container_swap
; 294  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_swap,
; 295  : 		false_type);
; 296  : 
; 297  : 		// STRUCT _Alloc_allocate
; 298  : struct _Alloc_allocate
; 299  : 	{	// determines allocator_traits<_Alloc>
; 300  : 		// ::allocate(size_type, const_void_pointer)
; 301  : 
; 302  : 	template<class _Alloc,
; 303  : 		class _Size_type,
; 304  : 		class _Const_void_pointer>
; 305  : 		static auto _Fn(int, _Alloc& _Al,
; 306  : 			_Size_type _Count,
; 307  : 			_Const_void_pointer _Hint)
; 308  : 			-> decltype(_Al.allocate(_Count, _Hint))
; 309  : 		{	// call allocator supplied version
; 310  : 		return (_Al.allocate(_Count, _Hint));
; 311  : 		}
; 312  : 
; 313  : 	template<class _Alloc,
; 314  : 		class _Size_type,
; 315  : 		class _Const_void_pointer>
; 316  : 		static auto _Fn(_Wrap_int, _Alloc& _Al,
; 317  : 			_Size_type _Count,
; 318  : 			_Const_void_pointer)
; 319  : 			-> decltype(_Al.allocate(_Count))
; 320  : 		{	// call default version
; 321  : 		return (_Al.allocate(_Count));
; 322  : 		}
; 323  : 	};
; 324  : 
; 325  : 		// STRUCT _Alloc_construct
; 326  : struct _Alloc_construct
; 327  : 	{	// determines allocator_traits<_Ty>
; 328  : 		// ::construct(_Ty&, _Objty *, _Types...)
; 329  : 
; 330  : 	template<class _Ty,
; 331  : 		class _Objty,
; 332  : 		class... _Types>
; 333  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
; 334  : 			_Types&&... _Args)
; 335  : 			-> decltype(
; 336  : 				_Al.construct(_Ptr, _STD forward<_Types>(_Args)...))
; 337  : 		{	// call allocator supplied version
; 338  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 339  : 		}
; 340  : 
; 341  : 	template<class _Ty,
; 342  : 		class _Objty,
; 343  : 		class... _Types>
; 344  : 		static auto _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
; 345  : 			_Types&&... _Args)
; 346  : 			-> void
; 347  : 		{	// call default version
; 348  : 		::new (static_cast<void *>(_Ptr))
; 349  : 			_Objty(_STD forward<_Types>(_Args)...);
; 350  : 		}
; 351  : 
; 352  : 	};
; 353  : 
; 354  : 		// STRUCT _Alloc_destroy
; 355  : struct _Alloc_destroy
; 356  : 	{	// determines allocator_traits<_Ty>::destroy(_Ty&, _Objty *)
; 357  : 	template<class _Ty,
; 358  : 		class _Objty>
; 359  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
; 360  : 			-> decltype(_Al.destroy(_Ptr))
; 361  : 		{	// call allocator supplied version
; 362  : 		_Al.destroy(_Ptr);
; 363  : 		}
; 364  : 
; 365  : 	template<class _Ty,
; 366  : 		class _Objty>
; 367  : 		static auto _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
; 368  : 			-> void
; 369  : 		{	// call default version
; 370  : 		_Ptr->~_Objty();
; 371  : 		}
; 372  : 	};
; 373  : 
; 374  : 		// STRUCT _Alloc_max_size
; 375  : struct _Alloc_max_size
; 376  : 	{	// determines allocator_traits<_Ty>::max_size(const _Ty&)
; 377  : 	template<class _Ty>
; 378  : 		static auto _Fn(int, const _Ty& _Al)
; 379  : 			-> decltype(_Al.max_size())
; 380  : 		{	// call allocator supplied version
; 381  : 		return (_Al.max_size());
; 382  : 		}
; 383  : 
; 384  : 	template<class _Ty>
; 385  : 		static auto _Fn(_Wrap_int, const _Ty&)
; 386  : 			-> typename _Get_size_type<_Ty>::type
; 387  : 		{	// call default version
; 388  : 		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
; 389  : 		}
; 390  : 	};
; 391  : 
; 392  : 		// STRUCT _Alloc_select
; 393  : struct _Alloc_select
; 394  : 	{	// determines allocator_traits<_Ty>
; 395  : 		// ::select_on_container_copy_construction(const _Alloc&)
; 396  : 
; 397  : 	template<class _Ty>
; 398  : 		static auto _Fn(int, const _Ty& _Al)
; 399  : 			-> decltype((_Ty)_Al.select_on_container_copy_construction())
; 400  : 		{	// call allocator supplied version
; 401  : 		return (_Al.select_on_container_copy_construction());
; 402  : 		}
; 403  : 
; 404  : 	template<class _Ty>
; 405  : 		static auto _Fn(_Wrap_int, const _Ty& _Al)
; 406  : 			-> _Ty
; 407  : 		{	// call default version
; 408  : 		return (_Al);
; 409  : 		}
; 410  : 	};
; 411  : 
; 412  : 		// TEMPLATE CLASS allocator_traits
; 413  : template<class _Alloc>
; 414  : 	struct allocator_traits
; 415  : 	{	// defines traits for allocators
; 416  : 	typedef allocator_traits<_Alloc> other;
; 417  : 
; 418  : 	typedef _Alloc allocator_type;
; 419  : 	typedef typename _Alloc::value_type value_type;
; 420  : 
; 421  : 	typedef typename _Get_pointer_type<_Alloc>::type
; 422  : 		pointer;
; 423  : 	typedef typename _Get_const_pointer_type<_Alloc>::type
; 424  : 		const_pointer;
; 425  : 	typedef typename _Get_void_pointer_type<_Alloc>::type
; 426  : 		void_pointer;
; 427  : 	typedef typename _Get_const_void_pointer_type<_Alloc>::type
; 428  : 		const_void_pointer;
; 429  : 
; 430  : 	typedef typename _Get_size_type<_Alloc>::type size_type;
; 431  : 	typedef typename _Get_difference_type<_Alloc>::type difference_type;
; 432  : 
; 433  : 	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
; 434  : 		propagate_on_container_copy_assignment;
; 435  : 	typedef typename _Get_propagate_on_container_move<_Alloc>::type
; 436  : 		propagate_on_container_move_assignment;
; 437  : 	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
; 438  : 		propagate_on_container_swap;
; 439  : 
; 440  : 	template<class _Other>
; 441  : 		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;
; 442  : 
; 443  : 	template<class _Other>
; 444  : 		using rebind_traits = allocator_traits<rebind_alloc<_Other> >;
; 445  : 
; 446  : 	static pointer allocate(_Alloc& _Al, size_type _Count)
; 447  : 		{	// allocate array of _Count elements
; 448  : 		return (_Al.allocate(_Count));
; 449  : 		}
; 450  : 
; 451  : 	static pointer allocate(_Alloc& _Al, size_type _Count,
; 452  : 		const_void_pointer _Hint)
; 453  : 		{	// allocate array of _Count elements, with hint
; 454  : 		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
; 455  : 		}
; 456  : 
; 457  : 	static void deallocate(_Alloc& _Al,
; 458  : 		pointer _Ptr, size_type _Count)
; 459  : 		{	// deallocate _Count elements at _Ptr
; 460  : 		_Al.deallocate(_Ptr, _Count);
; 461  : 		}
; 462  : 
; 463  : 	template<class _Ty,
; 464  : 		class... _Types>
; 465  : 		static void construct(_Alloc& _Al, _Ty *_Ptr,
; 466  : 			_Types&&... _Args)
; 467  : 		{	// construct _Ty(_Types...) at _Ptr
; 468  : 		_Alloc_construct::_Fn(0, _Al, _Ptr,
; 469  : 			_STD forward<_Types>(_Args)...);
; 470  : 		}
; 471  : 
; 472  : 
; 473  : 	template<class _Ty>
; 474  : 		static void destroy(_Alloc& _Al, _Ty *_Ptr)
; 475  : 		{	// destroy object at _Ptr
; 476  : 		_Alloc_destroy::_Fn(0, _Al, _Ptr);
; 477  : 		}
; 478  : 
; 479  : 	static size_type max_size(const _Alloc& _Al)
; 480  : 		{	// get maximum size
; 481  : 		return (_Alloc_max_size::_Fn(0, _Al));
; 482  : 		}
; 483  : 
; 484  : 	static _Alloc select_on_container_copy_construction(
; 485  : 		const _Alloc& _Al)
; 486  : 		{	// get allocator to use
; 487  : 		return (_Alloc_select::_Fn(0, _Al));
; 488  : 		}
; 489  : 	};
; 490  : 
; 491  : 		// TEMPLATE CLASS _Allocator_base
; 492  : template<class _Ty>
; 493  : 	struct _Allocator_base
; 494  : 	{	// base class for generic allocators
; 495  : 	typedef _Ty value_type;
; 496  : 	};
; 497  : 
; 498  : 		// TEMPLATE CLASS _Allocator_base<const _Ty>
; 499  : template<class _Ty>
; 500  : 	struct _Allocator_base<const _Ty>
; 501  : 	{	// base class for generic allocators for const _Ty
; 502  : 	typedef _Ty value_type;
; 503  : 	};
; 504  : 
; 505  : 		// TEMPLATE CLASS allocator
; 506  : template<class _Ty>
; 507  : 	class allocator
; 508  : 		: public _Allocator_base<_Ty>
; 509  : 	{	// generic allocator for objects of class _Ty
; 510  : public:
; 511  : 	typedef allocator<_Ty> other;
; 512  : 
; 513  : 	typedef _Allocator_base<_Ty> _Mybase;
; 514  : 	typedef typename _Mybase::value_type value_type;
; 515  : 
; 516  : 	typedef value_type *pointer;
; 517  : 	typedef const value_type *const_pointer;
; 518  : 	typedef void *void_pointer;
; 519  : 	typedef const void *const_void_pointer;
; 520  : 
; 521  : 	typedef value_type& reference;
; 522  : 	typedef const value_type& const_reference;
; 523  : 
; 524  : 	typedef size_t size_type;
; 525  : 	typedef ptrdiff_t difference_type;
; 526  : 
; 527  : 	typedef false_type propagate_on_container_copy_assignment;
; 528  : 	typedef false_type propagate_on_container_move_assignment;
; 529  : 	typedef false_type propagate_on_container_swap;
; 530  : 
; 531  : 	allocator<_Ty> select_on_container_copy_construction() const
; 532  : 		{	// return this allocator
; 533  : 		return (*this);
; 534  : 		}
; 535  : 
; 536  : 	template<class _Other>
; 537  : 		struct rebind
; 538  : 		{	// convert this type to allocator<_Other>
; 539  : 		typedef allocator<_Other> other;
; 540  : 		};
; 541  : 
; 542  : 	pointer address(reference _Val) const _NOEXCEPT
; 543  : 		{	// return address of mutable _Val
; 544  : 		return (_STD addressof(_Val));
; 545  : 		}
; 546  : 
; 547  : 	const_pointer address(const_reference _Val) const _NOEXCEPT
; 548  : 		{	// return address of nonmutable _Val
; 549  : 		return (_STD addressof(_Val));
; 550  : 		}
; 551  : 
; 552  : 	allocator() _THROW0()
; 553  : 		{	// construct default allocator (do nothing)
; 554  : 		}
; 555  : 
; 556  : 	allocator(const allocator<_Ty>&) _THROW0()
; 557  : 		{	// construct by copying (do nothing)
; 558  : 		}
; 559  : 
; 560  : 	template<class _Other>
; 561  : 		allocator(const allocator<_Other>&) _THROW0()
; 562  : 		{	// construct from a related allocator (do nothing)
; 563  : 		}
; 564  : 
; 565  : 	template<class _Other>
; 566  : 		allocator<_Ty>& operator=(const allocator<_Other>&)
; 567  : 		{	// assign from a related allocator (do nothing)
; 568  : 		return (*this);
; 569  : 		}
; 570  : 
; 571  : 	void deallocate(pointer _Ptr, size_type)
; 572  : 		{	// deallocate object at _Ptr, ignore size
; 573  : 		::operator delete(_Ptr);
; 574  : 		}
; 575  : 
; 576  : 	pointer allocate(size_type _Count)
; 577  : 		{	// allocate array of _Count elements
; 578  : 		return (_Allocate(_Count, (pointer)0));
; 579  : 		}
; 580  : 
; 581  : 	pointer allocate(size_type _Count, const void *)
; 582  : 		{	// allocate array of _Count elements, ignore hint
; 583  : 		return (allocate(_Count));
; 584  : 		}
; 585  : 
; 586  : 	void construct(_Ty *_Ptr)
; 587  : 		{	// default construct object at _Ptr
; 588  : 		::new ((void *)_Ptr) _Ty();
; 589  : 		}
; 590  : 
; 591  : 	void construct(_Ty *_Ptr, const _Ty& _Val)
; 592  : 		{	// construct object at _Ptr with value _Val
; 593  : 		::new ((void *)_Ptr) _Ty(_Val);
; 594  : 		}
; 595  : 
; 596  : 	template<class _Objty,
; 597  : 		class... _Types>
; 598  : 		void construct(_Objty *_Ptr, _Types&&... _Args)
; 599  : 		{	// construct _Objty(_Types...) at _Ptr
; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00035	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0003b	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File a:\vs\vc\include\deque

; 897  : 		this->_Myproxy->_Mycont = this;

  00042	8b 06		 mov	 eax, DWORD PTR [esi]
  00044	89 30		 mov	 DWORD PTR [eax], esi

; 952  : 		}

  00046	8b c6		 mov	 eax, esi
  00048	5e		 pop	 esi
  00049	c3		 ret	 0
$LN48@deque:
; File a:\vs\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  0004a	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN50@deque:
$LN47@deque:
  0004f	cc		 int	 3
??0?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE@XZ ENDP ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
;	COMDAT ?_Getal@?$_Deque_alloc@$0A@U?$_Deque_base_types@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Deque_alloc@$0A@U?$_Deque_base_types@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@2@XZ PROC ; std::_Deque_alloc<0,std::_Deque_base_types<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::_Getal, COMDAT
; _this$ = ecx

; 911  : 		{	// get reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 912  : 		return (_Alty());

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 913  : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?_Getal@?$_Deque_alloc@$0A@U?$_Deque_base_types@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@2@XZ ENDP ; std::_Deque_alloc<0,std::_Deque_base_types<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
;	COMDAT ?_Free_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Free_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Deque_alloc<0,std::_Deque_base_types<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::_Free_proxy, COMDAT
; _this$ = ecx

; 901  : 		{	// destroy proxy

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00003	ff 36		 push	 DWORD PTR [esi]
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	83 c4 04	 add	 esp, 4
; File a:\vs\vc\include\deque

; 907  : 		this->_Myproxy = 0;

  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00013	5e		 pop	 esi

; 908  : 		}

  00014	c3		 ret	 0
?_Free_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Deque_alloc<0,std::_Deque_base_types<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
;	COMDAT ?_Alloc_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Alloc_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Deque_alloc<0,std::_Deque_base_types<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::_Alloc_proxy, COMDAT
; _this$ = ecx

; 892  : 		{	// construct proxy from _Alval

  00000	56		 push	 esi
; File a:\vs\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00001	6a 08		 push	 8
; File a:\vs\vc\include\deque

; 892  : 		{	// construct proxy from _Alval

  00003	8b f1		 mov	 esi, ecx
; File a:\vs\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 15		 je	 SHORT $LN35@Alloc_prox
  00011	89 06		 mov	 DWORD PTR [esi], eax

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);
; 32   : 	}
; 33   : 
; 34   : 		// TEMPLATE FUNCTION _Construct
; 35   : template<class _Ty1,
; 36   : 	class _Ty2> inline
; 37   : 	void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
; 38   : 	{	// construct object at _Ptr with value _Val
; 39   : 	void *_Vptr = _Ptr;
; 40   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));
; 41   : 	}
; 42   : 
; 43   : template<class _Ty1> inline
; 44   : 	void _Construct(_Ty1 *_Ptr)
; 45   : 	{	// construct object at _Ptr with default value
; 46   : 	void *_Vptr = _Ptr;
; 47   : 
; 48   : 	::new (_Vptr) _Ty1();
; 49   : 	}
; 50   : 
; 51   : 		// TEMPLATE FUNCTION _Destroy
; 52   : template<class _Ty> inline
; 53   : 	void _Destroy(_Ty *_Ptr)
; 54   : 	{	// destroy object at _Ptr
; 55   : 	_Ptr->~_Ty();
; 56   : 	}
; 57   : 
; 58   : template<> inline
; 59   : 	void _Destroy(char *)
; 60   : 	{	// destroy a char (do nothing)
; 61   : 	}
; 62   : 
; 63   : template<> inline
; 64   : 	void _Destroy(wchar_t *)
; 65   : 	{	// destroy a wchar_t (do nothing)
; 66   : 	}
; 67   : 
; 68   :  #ifdef _NATIVE_WCHAR_T_DEFINED
; 69   : template<> inline
; 70   : 	void _Destroy(unsigned short *)
; 71   : 	{	// destroy a unsigned short (do nothing)
; 72   : 	}
; 73   :  #endif /* _NATIVE_WCHAR_T_DEFINED */
; 74   : 
; 75   : 		// TEMPLATE FUNCTION _Destroy_range
; 76   : template<class _Alloc> inline
; 77   : 	void _Destroy_range(typename _Alloc::pointer _First,
; 78   : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 79   : 		_Nonscalar_ptr_iterator_tag)
; 80   : 	{	// destroy [_First, _Last), arbitrary type
; 81   : 	for (; _First != _Last; ++_First)
; 82   : 		_Al.destroy(_First);
; 83   : 	}
; 84   : 
; 85   : template<class _Alloc> inline
; 86   : 	void _Destroy_range(typename _Alloc::pointer _First,
; 87   : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 88   : 		_Scalar_ptr_iterator_tag)
; 89   : 	{	// destroy [_First, _Last), scalar type (do nothing)
; 90   : 	}
; 91   : 
; 92   : template<class _Alloc> inline
; 93   : 	void _Destroy_range(typename _Alloc::pointer _First,
; 94   : 		typename _Alloc::pointer _Last, _Alloc& _Al)
; 95   : 	{	// destroy [_First, _Last)
; 96   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 97   : 	}
; 98   : 
; 99   : 		// TEMPLATE CLASS _Is_simple_alloc
; 100  : template<class _Alty>
; 101  : 	struct _Is_simple_alloc
; 102  : 		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
; 103  : 		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
; 104  : 		&& is_same<typename _Alty::pointer,
; 105  : 			typename _Alty::value_type *>::value
; 106  : 		&& is_same<typename _Alty::const_pointer,
; 107  : 			const typename _Alty::value_type *>::value
; 108  : 		&& is_same<typename _Alty::reference,
; 109  : 			typename _Alty::value_type&>::value
; 110  : 		&& is_same<typename _Alty::const_reference,
; 111  : 			const typename _Alty::value_type&>::value>
; 112  : 	{	// tests if allocator has simple addressing
; 113  : 	};
; 114  : 
; 115  : 		// TEMPLATE CLASS _Simple_types
; 116  : template<class _Value_type>
; 117  : 	struct _Simple_types
; 118  : 	{	// wraps types needed by iterators
; 119  : 	typedef _Value_type value_type;
; 120  : 	typedef size_t size_type;
; 121  : 	typedef ptrdiff_t difference_type;
; 122  : 	typedef value_type *pointer;
; 123  : 	typedef const value_type *const_pointer;
; 124  : 	typedef value_type& reference;
; 125  : 	typedef const value_type& const_reference;
; 126  : 	};
; 127  : 
; 128  : 		// TEMPLATE CLASS _Get_voidptr
; 129  : template<class _Alty,
; 130  : 	class _Pointer>
; 131  : 	struct _Get_voidptr
; 132  : 	{	// get void pointer for allocator
; 133  : 	typedef typename _Alty::template rebind<void>::other _Alvoid;
; 134  : 	typedef typename _Alvoid::pointer type;
; 135  : 	};
; 136  : 
; 137  : template<class _Alty,
; 138  : 	class _Ty>
; 139  : 	struct _Get_voidptr<_Alty, _Ty *>
; 140  : 	{	// get raw void pointer for allocator
; 141  : 	typedef void *type;
; 142  : 	};
; 143  : 
; 144  : 		// TEMPLATE CLASS _Is_iterator
; 145  : template<class _Iter>
; 146  : 	struct _Is_iterator
; 147  : 	: public integral_constant<bool, !is_integral<_Iter>::value>
; 148  : 	{	// tests for reasonable iterator candidate
; 149  : 	};
; 150  : 
; 151  : 		// TEMPLATE STRUCT _Get_first_parameter
; 152  : template<class _Ty>
; 153  : 	struct _Get_first_parameter;
; 154  : 
; 155  : template<template<class, class...> class _Ty,
; 156  : 	class _First,
; 157  : 	class... _Rest>
; 158  : 	struct _Get_first_parameter<_Ty<_First, _Rest...> >
; 159  : 	{	// given _Ty<_First, _Rest...>, extract _First
; 160  : 	typedef _First type;
; 161  : 	};
; 162  : 
; 163  : 		// TEMPLATE STRUCT _Replace_first_parameter
; 164  : template<class _Newfirst,
; 165  : 	class _Ty>
; 166  : 	struct _Replace_first_parameter;
; 167  : 
; 168  : template<class _Newfirst,
; 169  : 	template<class, class...> class _Ty,
; 170  : 	class _First,
; 171  : 	class... _Rest>
; 172  : 	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
; 173  : 	{	// given _Ty<_First, _Rest...>, replace _First
; 174  : 	typedef _Ty<_Newfirst, _Rest...> type;
; 175  : 	};
; 176  : 
; 177  : 		// TEMPLATE STRUCT _Get_element_type
; 178  : template<class _Ty>
; 179  : 	struct _Get_element_type
; 180  : 	_GET_TYPE_OR_DEFAULT(element_type,
; 181  : 		typename _Get_first_parameter<_Uty>::type);
; 182  : 
; 183  : 		// TEMPLATE STRUCT _Get_ptr_difference_type
; 184  : template<class _Ty>
; 185  : 	struct _Get_ptr_difference_type
; 186  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 187  : 		ptrdiff_t);
; 188  : 
; 189  : 		// TEMPLATE STRUCT _Get_rebind_type
; 190  : template<class _Ty,
; 191  : 	class _Other>
; 192  : 	struct _Get_rebind_type
; 193  : 	_GET_TYPE_OR_DEFAULT(template rebind<_Other>::other,
; 194  : 		typename _Replace_first_parameter<_Other _COMMA _Uty>::type);
; 195  : 
; 196  : 		// TEMPLATE CLASS pointer_traits
; 197  : template<class _Ty>
; 198  : 	struct pointer_traits
; 199  : 	{	// defines traits for arbitrary pointers
; 200  : 	typedef typename _Get_element_type<_Ty>::type element_type;
; 201  : 	typedef _Ty pointer;
; 202  : 	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;
; 203  : 
; 204  : 	template<class _Other>
; 205  : 		using rebind = typename _Get_rebind_type<_Ty, _Other>::type;
; 206  : 
; 207  : 	typedef typename _If<is_void<element_type>::value,
; 208  : 		char&,
; 209  : 		typename add_reference<element_type>::type>::type _Reftype;
; 210  : 
; 211  : 	static pointer pointer_to(_Reftype _Val)
; 212  : 		{	// convert raw reference to pointer
; 213  : 		return (_Ty::pointer_to(_Val));
; 214  : 		}
; 215  : 	};
; 216  : 
; 217  : 		// TEMPLATE CLASS pointer_traits<_Ty *>
; 218  : template<class _Ty>
; 219  : 	struct pointer_traits<_Ty *>
; 220  : 	{	// defines traits for raw pointers
; 221  : 	typedef _Ty element_type;
; 222  : 	typedef _Ty *pointer;
; 223  : 	typedef ptrdiff_t difference_type;
; 224  : 
; 225  : 	template<class _Other>
; 226  : 		using rebind = _Other *;
; 227  : 
; 228  : 	typedef typename _If<is_void<_Ty>::value,
; 229  : 		char&,
; 230  : 		typename add_reference<_Ty>::type>::type _Reftype;
; 231  : 
; 232  : 	static pointer pointer_to(_Reftype _Val)
; 233  : 		{	// convert raw reference to pointer
; 234  : 		return (_STD addressof(_Val));
; 235  : 		}
; 236  : 	};
; 237  : 
; 238  : 		// TEMPLATE STRUCT _Get_pointer_type
; 239  : template<class _Ty>
; 240  : 	struct _Get_pointer_type
; 241  : 	_GET_TYPE_OR_DEFAULT(pointer,
; 242  : 		typename _Ty::value_type *);
; 243  : 
; 244  : 		// TEMPLATE STRUCT _Get_const_pointer_type
; 245  : template<class _Ty>
; 246  : 	struct _Get_const_pointer_type
; 247  : 	_GET_TYPE_OR_DEFAULT(const_pointer,
; 248  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 249  : 			::template rebind<const typename _Ty::value_type>);
; 250  : 
; 251  : 		// TEMPLATE STRUCT _Get_void_pointer_type
; 252  : template<class _Ty>
; 253  : 	struct _Get_void_pointer_type
; 254  : 	_GET_TYPE_OR_DEFAULT(void_pointer,
; 255  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 256  : 			::template rebind<void>);
; 257  : 
; 258  : 		// TEMPLATE STRUCT _Get_const_void_pointer_type
; 259  : template<class _Ty>
; 260  : 	struct _Get_const_void_pointer_type
; 261  : 	_GET_TYPE_OR_DEFAULT(const_void_pointer,
; 262  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 263  : 			::template rebind<const void>);
; 264  : 
; 265  : 		// TEMPLATE STRUCT _Get_difference_type
; 266  : template<class _Ty>
; 267  : 	struct _Get_difference_type
; 268  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 269  : 		typename _Get_ptr_difference_type<
; 270  : 			typename _Get_pointer_type<_Ty>::type>::type);
; 271  : 
; 272  : 		// TEMPLATE STRUCT _Get_size_type
; 273  : template<class _Ty>
; 274  : 	struct _Get_size_type
; 275  : 	_GET_TYPE_OR_DEFAULT(size_type,
; 276  : 		typename make_unsigned<
; 277  : 			typename _Get_difference_type<_Ty>::type>::type);
; 278  : 
; 279  : 		// TEMPLATE STRUCT _Get_propagate_on_container_copy
; 280  : template<class _Ty>
; 281  : 	struct _Get_propagate_on_container_copy
; 282  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_copy_assignment,
; 283  : 		false_type);
; 284  : 
; 285  : 		// TEMPLATE STRUCT _Get_propagate_on_container_move
; 286  : template<class _Ty>
; 287  : 	struct _Get_propagate_on_container_move
; 288  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_move_assignment,
; 289  : 		false_type);
; 290  : 
; 291  : 		// TEMPLATE STRUCT _Get_propagate_on_container_swap
; 292  : template<class _Ty>
; 293  : 	struct _Get_propagate_on_container_swap
; 294  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_swap,
; 295  : 		false_type);
; 296  : 
; 297  : 		// STRUCT _Alloc_allocate
; 298  : struct _Alloc_allocate
; 299  : 	{	// determines allocator_traits<_Alloc>
; 300  : 		// ::allocate(size_type, const_void_pointer)
; 301  : 
; 302  : 	template<class _Alloc,
; 303  : 		class _Size_type,
; 304  : 		class _Const_void_pointer>
; 305  : 		static auto _Fn(int, _Alloc& _Al,
; 306  : 			_Size_type _Count,
; 307  : 			_Const_void_pointer _Hint)
; 308  : 			-> decltype(_Al.allocate(_Count, _Hint))
; 309  : 		{	// call allocator supplied version
; 310  : 		return (_Al.allocate(_Count, _Hint));
; 311  : 		}
; 312  : 
; 313  : 	template<class _Alloc,
; 314  : 		class _Size_type,
; 315  : 		class _Const_void_pointer>
; 316  : 		static auto _Fn(_Wrap_int, _Alloc& _Al,
; 317  : 			_Size_type _Count,
; 318  : 			_Const_void_pointer)
; 319  : 			-> decltype(_Al.allocate(_Count))
; 320  : 		{	// call default version
; 321  : 		return (_Al.allocate(_Count));
; 322  : 		}
; 323  : 	};
; 324  : 
; 325  : 		// STRUCT _Alloc_construct
; 326  : struct _Alloc_construct
; 327  : 	{	// determines allocator_traits<_Ty>
; 328  : 		// ::construct(_Ty&, _Objty *, _Types...)
; 329  : 
; 330  : 	template<class _Ty,
; 331  : 		class _Objty,
; 332  : 		class... _Types>
; 333  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
; 334  : 			_Types&&... _Args)
; 335  : 			-> decltype(
; 336  : 				_Al.construct(_Ptr, _STD forward<_Types>(_Args)...))
; 337  : 		{	// call allocator supplied version
; 338  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 339  : 		}
; 340  : 
; 341  : 	template<class _Ty,
; 342  : 		class _Objty,
; 343  : 		class... _Types>
; 344  : 		static auto _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
; 345  : 			_Types&&... _Args)
; 346  : 			-> void
; 347  : 		{	// call default version
; 348  : 		::new (static_cast<void *>(_Ptr))
; 349  : 			_Objty(_STD forward<_Types>(_Args)...);
; 350  : 		}
; 351  : 
; 352  : 	};
; 353  : 
; 354  : 		// STRUCT _Alloc_destroy
; 355  : struct _Alloc_destroy
; 356  : 	{	// determines allocator_traits<_Ty>::destroy(_Ty&, _Objty *)
; 357  : 	template<class _Ty,
; 358  : 		class _Objty>
; 359  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
; 360  : 			-> decltype(_Al.destroy(_Ptr))
; 361  : 		{	// call allocator supplied version
; 362  : 		_Al.destroy(_Ptr);
; 363  : 		}
; 364  : 
; 365  : 	template<class _Ty,
; 366  : 		class _Objty>
; 367  : 		static auto _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
; 368  : 			-> void
; 369  : 		{	// call default version
; 370  : 		_Ptr->~_Objty();
; 371  : 		}
; 372  : 	};
; 373  : 
; 374  : 		// STRUCT _Alloc_max_size
; 375  : struct _Alloc_max_size
; 376  : 	{	// determines allocator_traits<_Ty>::max_size(const _Ty&)
; 377  : 	template<class _Ty>
; 378  : 		static auto _Fn(int, const _Ty& _Al)
; 379  : 			-> decltype(_Al.max_size())
; 380  : 		{	// call allocator supplied version
; 381  : 		return (_Al.max_size());
; 382  : 		}
; 383  : 
; 384  : 	template<class _Ty>
; 385  : 		static auto _Fn(_Wrap_int, const _Ty&)
; 386  : 			-> typename _Get_size_type<_Ty>::type
; 387  : 		{	// call default version
; 388  : 		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
; 389  : 		}
; 390  : 	};
; 391  : 
; 392  : 		// STRUCT _Alloc_select
; 393  : struct _Alloc_select
; 394  : 	{	// determines allocator_traits<_Ty>
; 395  : 		// ::select_on_container_copy_construction(const _Alloc&)
; 396  : 
; 397  : 	template<class _Ty>
; 398  : 		static auto _Fn(int, const _Ty& _Al)
; 399  : 			-> decltype((_Ty)_Al.select_on_container_copy_construction())
; 400  : 		{	// call allocator supplied version
; 401  : 		return (_Al.select_on_container_copy_construction());
; 402  : 		}
; 403  : 
; 404  : 	template<class _Ty>
; 405  : 		static auto _Fn(_Wrap_int, const _Ty& _Al)
; 406  : 			-> _Ty
; 407  : 		{	// call default version
; 408  : 		return (_Al);
; 409  : 		}
; 410  : 	};
; 411  : 
; 412  : 		// TEMPLATE CLASS allocator_traits
; 413  : template<class _Alloc>
; 414  : 	struct allocator_traits
; 415  : 	{	// defines traits for allocators
; 416  : 	typedef allocator_traits<_Alloc> other;
; 417  : 
; 418  : 	typedef _Alloc allocator_type;
; 419  : 	typedef typename _Alloc::value_type value_type;
; 420  : 
; 421  : 	typedef typename _Get_pointer_type<_Alloc>::type
; 422  : 		pointer;
; 423  : 	typedef typename _Get_const_pointer_type<_Alloc>::type
; 424  : 		const_pointer;
; 425  : 	typedef typename _Get_void_pointer_type<_Alloc>::type
; 426  : 		void_pointer;
; 427  : 	typedef typename _Get_const_void_pointer_type<_Alloc>::type
; 428  : 		const_void_pointer;
; 429  : 
; 430  : 	typedef typename _Get_size_type<_Alloc>::type size_type;
; 431  : 	typedef typename _Get_difference_type<_Alloc>::type difference_type;
; 432  : 
; 433  : 	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
; 434  : 		propagate_on_container_copy_assignment;
; 435  : 	typedef typename _Get_propagate_on_container_move<_Alloc>::type
; 436  : 		propagate_on_container_move_assignment;
; 437  : 	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
; 438  : 		propagate_on_container_swap;
; 439  : 
; 440  : 	template<class _Other>
; 441  : 		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;
; 442  : 
; 443  : 	template<class _Other>
; 444  : 		using rebind_traits = allocator_traits<rebind_alloc<_Other> >;
; 445  : 
; 446  : 	static pointer allocate(_Alloc& _Al, size_type _Count)
; 447  : 		{	// allocate array of _Count elements
; 448  : 		return (_Al.allocate(_Count));
; 449  : 		}
; 450  : 
; 451  : 	static pointer allocate(_Alloc& _Al, size_type _Count,
; 452  : 		const_void_pointer _Hint)
; 453  : 		{	// allocate array of _Count elements, with hint
; 454  : 		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
; 455  : 		}
; 456  : 
; 457  : 	static void deallocate(_Alloc& _Al,
; 458  : 		pointer _Ptr, size_type _Count)
; 459  : 		{	// deallocate _Count elements at _Ptr
; 460  : 		_Al.deallocate(_Ptr, _Count);
; 461  : 		}
; 462  : 
; 463  : 	template<class _Ty,
; 464  : 		class... _Types>
; 465  : 		static void construct(_Alloc& _Al, _Ty *_Ptr,
; 466  : 			_Types&&... _Args)
; 467  : 		{	// construct _Ty(_Types...) at _Ptr
; 468  : 		_Alloc_construct::_Fn(0, _Al, _Ptr,
; 469  : 			_STD forward<_Types>(_Args)...);
; 470  : 		}
; 471  : 
; 472  : 
; 473  : 	template<class _Ty>
; 474  : 		static void destroy(_Alloc& _Al, _Ty *_Ptr)
; 475  : 		{	// destroy object at _Ptr
; 476  : 		_Alloc_destroy::_Fn(0, _Al, _Ptr);
; 477  : 		}
; 478  : 
; 479  : 	static size_type max_size(const _Alloc& _Al)
; 480  : 		{	// get maximum size
; 481  : 		return (_Alloc_max_size::_Fn(0, _Al));
; 482  : 		}
; 483  : 
; 484  : 	static _Alloc select_on_container_copy_construction(
; 485  : 		const _Alloc& _Al)
; 486  : 		{	// get allocator to use
; 487  : 		return (_Alloc_select::_Fn(0, _Al));
; 488  : 		}
; 489  : 	};
; 490  : 
; 491  : 		// TEMPLATE CLASS _Allocator_base
; 492  : template<class _Ty>
; 493  : 	struct _Allocator_base
; 494  : 	{	// base class for generic allocators
; 495  : 	typedef _Ty value_type;
; 496  : 	};
; 497  : 
; 498  : 		// TEMPLATE CLASS _Allocator_base<const _Ty>
; 499  : template<class _Ty>
; 500  : 	struct _Allocator_base<const _Ty>
; 501  : 	{	// base class for generic allocators for const _Ty
; 502  : 	typedef _Ty value_type;
; 503  : 	};
; 504  : 
; 505  : 		// TEMPLATE CLASS allocator
; 506  : template<class _Ty>
; 507  : 	class allocator
; 508  : 		: public _Allocator_base<_Ty>
; 509  : 	{	// generic allocator for objects of class _Ty
; 510  : public:
; 511  : 	typedef allocator<_Ty> other;
; 512  : 
; 513  : 	typedef _Allocator_base<_Ty> _Mybase;
; 514  : 	typedef typename _Mybase::value_type value_type;
; 515  : 
; 516  : 	typedef value_type *pointer;
; 517  : 	typedef const value_type *const_pointer;
; 518  : 	typedef void *void_pointer;
; 519  : 	typedef const void *const_void_pointer;
; 520  : 
; 521  : 	typedef value_type& reference;
; 522  : 	typedef const value_type& const_reference;
; 523  : 
; 524  : 	typedef size_t size_type;
; 525  : 	typedef ptrdiff_t difference_type;
; 526  : 
; 527  : 	typedef false_type propagate_on_container_copy_assignment;
; 528  : 	typedef false_type propagate_on_container_move_assignment;
; 529  : 	typedef false_type propagate_on_container_swap;
; 530  : 
; 531  : 	allocator<_Ty> select_on_container_copy_construction() const
; 532  : 		{	// return this allocator
; 533  : 		return (*this);
; 534  : 		}
; 535  : 
; 536  : 	template<class _Other>
; 537  : 		struct rebind
; 538  : 		{	// convert this type to allocator<_Other>
; 539  : 		typedef allocator<_Other> other;
; 540  : 		};
; 541  : 
; 542  : 	pointer address(reference _Val) const _NOEXCEPT
; 543  : 		{	// return address of mutable _Val
; 544  : 		return (_STD addressof(_Val));
; 545  : 		}
; 546  : 
; 547  : 	const_pointer address(const_reference _Val) const _NOEXCEPT
; 548  : 		{	// return address of nonmutable _Val
; 549  : 		return (_STD addressof(_Val));
; 550  : 		}
; 551  : 
; 552  : 	allocator() _THROW0()
; 553  : 		{	// construct default allocator (do nothing)
; 554  : 		}
; 555  : 
; 556  : 	allocator(const allocator<_Ty>&) _THROW0()
; 557  : 		{	// construct by copying (do nothing)
; 558  : 		}
; 559  : 
; 560  : 	template<class _Other>
; 561  : 		allocator(const allocator<_Other>&) _THROW0()
; 562  : 		{	// construct from a related allocator (do nothing)
; 563  : 		}
; 564  : 
; 565  : 	template<class _Other>
; 566  : 		allocator<_Ty>& operator=(const allocator<_Other>&)
; 567  : 		{	// assign from a related allocator (do nothing)
; 568  : 		return (*this);
; 569  : 		}
; 570  : 
; 571  : 	void deallocate(pointer _Ptr, size_type)
; 572  : 		{	// deallocate object at _Ptr, ignore size
; 573  : 		::operator delete(_Ptr);
; 574  : 		}
; 575  : 
; 576  : 	pointer allocate(size_type _Count)
; 577  : 		{	// allocate array of _Count elements
; 578  : 		return (_Allocate(_Count, (pointer)0));
; 579  : 		}
; 580  : 
; 581  : 	pointer allocate(size_type _Count, const void *)
; 582  : 		{	// allocate array of _Count elements, ignore hint
; 583  : 		return (allocate(_Count));
; 584  : 		}
; 585  : 
; 586  : 	void construct(_Ty *_Ptr)
; 587  : 		{	// default construct object at _Ptr
; 588  : 		::new ((void *)_Ptr) _Ty();
; 589  : 		}
; 590  : 
; 591  : 	void construct(_Ty *_Ptr, const _Ty& _Val)
; 592  : 		{	// construct object at _Ptr with value _Val
; 593  : 		::new ((void *)_Ptr) _Ty(_Val);
; 594  : 		}
; 595  : 
; 596  : 	template<class _Objty,
; 597  : 		class... _Types>
; 598  : 		void construct(_Objty *_Ptr, _Types&&... _Args)
; 599  : 		{	// construct _Objty(_Types...) at _Ptr
; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00013	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00019	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File a:\vs\vc\include\deque

; 897  : 		this->_Myproxy->_Mycont = this;

  00020	8b 06		 mov	 eax, DWORD PTR [esi]
  00022	89 30		 mov	 DWORD PTR [eax], esi
  00024	5e		 pop	 esi

; 898  : 		}

  00025	c3		 ret	 0
$LN35@Alloc_prox:
; File a:\vs\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  00026	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN37@Alloc_prox:
$LN34@Alloc_prox:
  0002b	cc		 int	 3
?_Alloc_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Deque_alloc<0,std::_Deque_base_types<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
;	COMDAT ??1?$_Deque_alloc@$0A@U?$_Deque_base_types@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Deque_alloc@$0A@U?$_Deque_base_types@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Deque_alloc<0,std::_Deque_base_types<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::~_Deque_alloc<0,std::_Deque_base_types<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >, COMDAT
; _this$ = ecx

; 878  : 		{	// destroy proxy

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  00003	ff 36		 push	 DWORD PTR [esi]
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	83 c4 04	 add	 esp, 4
; File a:\vs\vc\include\deque

; 907  : 		this->_Myproxy = 0;

  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00013	5e		 pop	 esi

; 879  : 		_Free_proxy();
; 880  : 		}

  00014	c3		 ret	 0
??1?$_Deque_alloc@$0A@U?$_Deque_base_types@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Deque_alloc<0,std::_Deque_base_types<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::~_Deque_alloc<0,std::_Deque_base_types<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
;	COMDAT ??0?$_Deque_alloc@$0A@U?$_Deque_base_types@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@ABV?$allocator@USState@CPythonGraphic@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$_Deque_alloc@$0A@U?$_Deque_base_types@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@ABV?$allocator@USState@CPythonGraphic@@@1@@Z PROC ; std::_Deque_alloc<0,std::_Deque_base_types<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::_Deque_alloc<0,std::_Deque_base_types<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >, COMDAT
; _this$ = ecx

; 872  : 	_Deque_alloc(const _Alloc& = _Alloc())

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File a:\vs\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00003	6a 08		 push	 8
; File a:\vs\vc\include\xutility

; 80   : 		{	// construct childless container

  00005	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File a:\vs\vc\include\deque

; 773  : 		_Map = _Mapptr();

  0000b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 774  : 		_Mapsize = 0;

  00012	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 775  : 		_Myoff = 0;

  00019	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 776  : 		_Mysize = 0;

  00020	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File a:\vs\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00027	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002c	83 c4 04	 add	 esp, 4
  0002f	85 c0		 test	 eax, eax
  00031	74 19		 je	 SHORT $LN42@Deque_allo
  00033	89 06		 mov	 DWORD PTR [esi], eax

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);
; 32   : 	}
; 33   : 
; 34   : 		// TEMPLATE FUNCTION _Construct
; 35   : template<class _Ty1,
; 36   : 	class _Ty2> inline
; 37   : 	void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
; 38   : 	{	// construct object at _Ptr with value _Val
; 39   : 	void *_Vptr = _Ptr;
; 40   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));
; 41   : 	}
; 42   : 
; 43   : template<class _Ty1> inline
; 44   : 	void _Construct(_Ty1 *_Ptr)
; 45   : 	{	// construct object at _Ptr with default value
; 46   : 	void *_Vptr = _Ptr;
; 47   : 
; 48   : 	::new (_Vptr) _Ty1();
; 49   : 	}
; 50   : 
; 51   : 		// TEMPLATE FUNCTION _Destroy
; 52   : template<class _Ty> inline
; 53   : 	void _Destroy(_Ty *_Ptr)
; 54   : 	{	// destroy object at _Ptr
; 55   : 	_Ptr->~_Ty();
; 56   : 	}
; 57   : 
; 58   : template<> inline
; 59   : 	void _Destroy(char *)
; 60   : 	{	// destroy a char (do nothing)
; 61   : 	}
; 62   : 
; 63   : template<> inline
; 64   : 	void _Destroy(wchar_t *)
; 65   : 	{	// destroy a wchar_t (do nothing)
; 66   : 	}
; 67   : 
; 68   :  #ifdef _NATIVE_WCHAR_T_DEFINED
; 69   : template<> inline
; 70   : 	void _Destroy(unsigned short *)
; 71   : 	{	// destroy a unsigned short (do nothing)
; 72   : 	}
; 73   :  #endif /* _NATIVE_WCHAR_T_DEFINED */
; 74   : 
; 75   : 		// TEMPLATE FUNCTION _Destroy_range
; 76   : template<class _Alloc> inline
; 77   : 	void _Destroy_range(typename _Alloc::pointer _First,
; 78   : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 79   : 		_Nonscalar_ptr_iterator_tag)
; 80   : 	{	// destroy [_First, _Last), arbitrary type
; 81   : 	for (; _First != _Last; ++_First)
; 82   : 		_Al.destroy(_First);
; 83   : 	}
; 84   : 
; 85   : template<class _Alloc> inline
; 86   : 	void _Destroy_range(typename _Alloc::pointer _First,
; 87   : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 88   : 		_Scalar_ptr_iterator_tag)
; 89   : 	{	// destroy [_First, _Last), scalar type (do nothing)
; 90   : 	}
; 91   : 
; 92   : template<class _Alloc> inline
; 93   : 	void _Destroy_range(typename _Alloc::pointer _First,
; 94   : 		typename _Alloc::pointer _Last, _Alloc& _Al)
; 95   : 	{	// destroy [_First, _Last)
; 96   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 97   : 	}
; 98   : 
; 99   : 		// TEMPLATE CLASS _Is_simple_alloc
; 100  : template<class _Alty>
; 101  : 	struct _Is_simple_alloc
; 102  : 		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
; 103  : 		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
; 104  : 		&& is_same<typename _Alty::pointer,
; 105  : 			typename _Alty::value_type *>::value
; 106  : 		&& is_same<typename _Alty::const_pointer,
; 107  : 			const typename _Alty::value_type *>::value
; 108  : 		&& is_same<typename _Alty::reference,
; 109  : 			typename _Alty::value_type&>::value
; 110  : 		&& is_same<typename _Alty::const_reference,
; 111  : 			const typename _Alty::value_type&>::value>
; 112  : 	{	// tests if allocator has simple addressing
; 113  : 	};
; 114  : 
; 115  : 		// TEMPLATE CLASS _Simple_types
; 116  : template<class _Value_type>
; 117  : 	struct _Simple_types
; 118  : 	{	// wraps types needed by iterators
; 119  : 	typedef _Value_type value_type;
; 120  : 	typedef size_t size_type;
; 121  : 	typedef ptrdiff_t difference_type;
; 122  : 	typedef value_type *pointer;
; 123  : 	typedef const value_type *const_pointer;
; 124  : 	typedef value_type& reference;
; 125  : 	typedef const value_type& const_reference;
; 126  : 	};
; 127  : 
; 128  : 		// TEMPLATE CLASS _Get_voidptr
; 129  : template<class _Alty,
; 130  : 	class _Pointer>
; 131  : 	struct _Get_voidptr
; 132  : 	{	// get void pointer for allocator
; 133  : 	typedef typename _Alty::template rebind<void>::other _Alvoid;
; 134  : 	typedef typename _Alvoid::pointer type;
; 135  : 	};
; 136  : 
; 137  : template<class _Alty,
; 138  : 	class _Ty>
; 139  : 	struct _Get_voidptr<_Alty, _Ty *>
; 140  : 	{	// get raw void pointer for allocator
; 141  : 	typedef void *type;
; 142  : 	};
; 143  : 
; 144  : 		// TEMPLATE CLASS _Is_iterator
; 145  : template<class _Iter>
; 146  : 	struct _Is_iterator
; 147  : 	: public integral_constant<bool, !is_integral<_Iter>::value>
; 148  : 	{	// tests for reasonable iterator candidate
; 149  : 	};
; 150  : 
; 151  : 		// TEMPLATE STRUCT _Get_first_parameter
; 152  : template<class _Ty>
; 153  : 	struct _Get_first_parameter;
; 154  : 
; 155  : template<template<class, class...> class _Ty,
; 156  : 	class _First,
; 157  : 	class... _Rest>
; 158  : 	struct _Get_first_parameter<_Ty<_First, _Rest...> >
; 159  : 	{	// given _Ty<_First, _Rest...>, extract _First
; 160  : 	typedef _First type;
; 161  : 	};
; 162  : 
; 163  : 		// TEMPLATE STRUCT _Replace_first_parameter
; 164  : template<class _Newfirst,
; 165  : 	class _Ty>
; 166  : 	struct _Replace_first_parameter;
; 167  : 
; 168  : template<class _Newfirst,
; 169  : 	template<class, class...> class _Ty,
; 170  : 	class _First,
; 171  : 	class... _Rest>
; 172  : 	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
; 173  : 	{	// given _Ty<_First, _Rest...>, replace _First
; 174  : 	typedef _Ty<_Newfirst, _Rest...> type;
; 175  : 	};
; 176  : 
; 177  : 		// TEMPLATE STRUCT _Get_element_type
; 178  : template<class _Ty>
; 179  : 	struct _Get_element_type
; 180  : 	_GET_TYPE_OR_DEFAULT(element_type,
; 181  : 		typename _Get_first_parameter<_Uty>::type);
; 182  : 
; 183  : 		// TEMPLATE STRUCT _Get_ptr_difference_type
; 184  : template<class _Ty>
; 185  : 	struct _Get_ptr_difference_type
; 186  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 187  : 		ptrdiff_t);
; 188  : 
; 189  : 		// TEMPLATE STRUCT _Get_rebind_type
; 190  : template<class _Ty,
; 191  : 	class _Other>
; 192  : 	struct _Get_rebind_type
; 193  : 	_GET_TYPE_OR_DEFAULT(template rebind<_Other>::other,
; 194  : 		typename _Replace_first_parameter<_Other _COMMA _Uty>::type);
; 195  : 
; 196  : 		// TEMPLATE CLASS pointer_traits
; 197  : template<class _Ty>
; 198  : 	struct pointer_traits
; 199  : 	{	// defines traits for arbitrary pointers
; 200  : 	typedef typename _Get_element_type<_Ty>::type element_type;
; 201  : 	typedef _Ty pointer;
; 202  : 	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;
; 203  : 
; 204  : 	template<class _Other>
; 205  : 		using rebind = typename _Get_rebind_type<_Ty, _Other>::type;
; 206  : 
; 207  : 	typedef typename _If<is_void<element_type>::value,
; 208  : 		char&,
; 209  : 		typename add_reference<element_type>::type>::type _Reftype;
; 210  : 
; 211  : 	static pointer pointer_to(_Reftype _Val)
; 212  : 		{	// convert raw reference to pointer
; 213  : 		return (_Ty::pointer_to(_Val));
; 214  : 		}
; 215  : 	};
; 216  : 
; 217  : 		// TEMPLATE CLASS pointer_traits<_Ty *>
; 218  : template<class _Ty>
; 219  : 	struct pointer_traits<_Ty *>
; 220  : 	{	// defines traits for raw pointers
; 221  : 	typedef _Ty element_type;
; 222  : 	typedef _Ty *pointer;
; 223  : 	typedef ptrdiff_t difference_type;
; 224  : 
; 225  : 	template<class _Other>
; 226  : 		using rebind = _Other *;
; 227  : 
; 228  : 	typedef typename _If<is_void<_Ty>::value,
; 229  : 		char&,
; 230  : 		typename add_reference<_Ty>::type>::type _Reftype;
; 231  : 
; 232  : 	static pointer pointer_to(_Reftype _Val)
; 233  : 		{	// convert raw reference to pointer
; 234  : 		return (_STD addressof(_Val));
; 235  : 		}
; 236  : 	};
; 237  : 
; 238  : 		// TEMPLATE STRUCT _Get_pointer_type
; 239  : template<class _Ty>
; 240  : 	struct _Get_pointer_type
; 241  : 	_GET_TYPE_OR_DEFAULT(pointer,
; 242  : 		typename _Ty::value_type *);
; 243  : 
; 244  : 		// TEMPLATE STRUCT _Get_const_pointer_type
; 245  : template<class _Ty>
; 246  : 	struct _Get_const_pointer_type
; 247  : 	_GET_TYPE_OR_DEFAULT(const_pointer,
; 248  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 249  : 			::template rebind<const typename _Ty::value_type>);
; 250  : 
; 251  : 		// TEMPLATE STRUCT _Get_void_pointer_type
; 252  : template<class _Ty>
; 253  : 	struct _Get_void_pointer_type
; 254  : 	_GET_TYPE_OR_DEFAULT(void_pointer,
; 255  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 256  : 			::template rebind<void>);
; 257  : 
; 258  : 		// TEMPLATE STRUCT _Get_const_void_pointer_type
; 259  : template<class _Ty>
; 260  : 	struct _Get_const_void_pointer_type
; 261  : 	_GET_TYPE_OR_DEFAULT(const_void_pointer,
; 262  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 263  : 			::template rebind<const void>);
; 264  : 
; 265  : 		// TEMPLATE STRUCT _Get_difference_type
; 266  : template<class _Ty>
; 267  : 	struct _Get_difference_type
; 268  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 269  : 		typename _Get_ptr_difference_type<
; 270  : 			typename _Get_pointer_type<_Ty>::type>::type);
; 271  : 
; 272  : 		// TEMPLATE STRUCT _Get_size_type
; 273  : template<class _Ty>
; 274  : 	struct _Get_size_type
; 275  : 	_GET_TYPE_OR_DEFAULT(size_type,
; 276  : 		typename make_unsigned<
; 277  : 			typename _Get_difference_type<_Ty>::type>::type);
; 278  : 
; 279  : 		// TEMPLATE STRUCT _Get_propagate_on_container_copy
; 280  : template<class _Ty>
; 281  : 	struct _Get_propagate_on_container_copy
; 282  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_copy_assignment,
; 283  : 		false_type);
; 284  : 
; 285  : 		// TEMPLATE STRUCT _Get_propagate_on_container_move
; 286  : template<class _Ty>
; 287  : 	struct _Get_propagate_on_container_move
; 288  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_move_assignment,
; 289  : 		false_type);
; 290  : 
; 291  : 		// TEMPLATE STRUCT _Get_propagate_on_container_swap
; 292  : template<class _Ty>
; 293  : 	struct _Get_propagate_on_container_swap
; 294  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_swap,
; 295  : 		false_type);
; 296  : 
; 297  : 		// STRUCT _Alloc_allocate
; 298  : struct _Alloc_allocate
; 299  : 	{	// determines allocator_traits<_Alloc>
; 300  : 		// ::allocate(size_type, const_void_pointer)
; 301  : 
; 302  : 	template<class _Alloc,
; 303  : 		class _Size_type,
; 304  : 		class _Const_void_pointer>
; 305  : 		static auto _Fn(int, _Alloc& _Al,
; 306  : 			_Size_type _Count,
; 307  : 			_Const_void_pointer _Hint)
; 308  : 			-> decltype(_Al.allocate(_Count, _Hint))
; 309  : 		{	// call allocator supplied version
; 310  : 		return (_Al.allocate(_Count, _Hint));
; 311  : 		}
; 312  : 
; 313  : 	template<class _Alloc,
; 314  : 		class _Size_type,
; 315  : 		class _Const_void_pointer>
; 316  : 		static auto _Fn(_Wrap_int, _Alloc& _Al,
; 317  : 			_Size_type _Count,
; 318  : 			_Const_void_pointer)
; 319  : 			-> decltype(_Al.allocate(_Count))
; 320  : 		{	// call default version
; 321  : 		return (_Al.allocate(_Count));
; 322  : 		}
; 323  : 	};
; 324  : 
; 325  : 		// STRUCT _Alloc_construct
; 326  : struct _Alloc_construct
; 327  : 	{	// determines allocator_traits<_Ty>
; 328  : 		// ::construct(_Ty&, _Objty *, _Types...)
; 329  : 
; 330  : 	template<class _Ty,
; 331  : 		class _Objty,
; 332  : 		class... _Types>
; 333  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
; 334  : 			_Types&&... _Args)
; 335  : 			-> decltype(
; 336  : 				_Al.construct(_Ptr, _STD forward<_Types>(_Args)...))
; 337  : 		{	// call allocator supplied version
; 338  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 339  : 		}
; 340  : 
; 341  : 	template<class _Ty,
; 342  : 		class _Objty,
; 343  : 		class... _Types>
; 344  : 		static auto _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
; 345  : 			_Types&&... _Args)
; 346  : 			-> void
; 347  : 		{	// call default version
; 348  : 		::new (static_cast<void *>(_Ptr))
; 349  : 			_Objty(_STD forward<_Types>(_Args)...);
; 350  : 		}
; 351  : 
; 352  : 	};
; 353  : 
; 354  : 		// STRUCT _Alloc_destroy
; 355  : struct _Alloc_destroy
; 356  : 	{	// determines allocator_traits<_Ty>::destroy(_Ty&, _Objty *)
; 357  : 	template<class _Ty,
; 358  : 		class _Objty>
; 359  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
; 360  : 			-> decltype(_Al.destroy(_Ptr))
; 361  : 		{	// call allocator supplied version
; 362  : 		_Al.destroy(_Ptr);
; 363  : 		}
; 364  : 
; 365  : 	template<class _Ty,
; 366  : 		class _Objty>
; 367  : 		static auto _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
; 368  : 			-> void
; 369  : 		{	// call default version
; 370  : 		_Ptr->~_Objty();
; 371  : 		}
; 372  : 	};
; 373  : 
; 374  : 		// STRUCT _Alloc_max_size
; 375  : struct _Alloc_max_size
; 376  : 	{	// determines allocator_traits<_Ty>::max_size(const _Ty&)
; 377  : 	template<class _Ty>
; 378  : 		static auto _Fn(int, const _Ty& _Al)
; 379  : 			-> decltype(_Al.max_size())
; 380  : 		{	// call allocator supplied version
; 381  : 		return (_Al.max_size());
; 382  : 		}
; 383  : 
; 384  : 	template<class _Ty>
; 385  : 		static auto _Fn(_Wrap_int, const _Ty&)
; 386  : 			-> typename _Get_size_type<_Ty>::type
; 387  : 		{	// call default version
; 388  : 		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
; 389  : 		}
; 390  : 	};
; 391  : 
; 392  : 		// STRUCT _Alloc_select
; 393  : struct _Alloc_select
; 394  : 	{	// determines allocator_traits<_Ty>
; 395  : 		// ::select_on_container_copy_construction(const _Alloc&)
; 396  : 
; 397  : 	template<class _Ty>
; 398  : 		static auto _Fn(int, const _Ty& _Al)
; 399  : 			-> decltype((_Ty)_Al.select_on_container_copy_construction())
; 400  : 		{	// call allocator supplied version
; 401  : 		return (_Al.select_on_container_copy_construction());
; 402  : 		}
; 403  : 
; 404  : 	template<class _Ty>
; 405  : 		static auto _Fn(_Wrap_int, const _Ty& _Al)
; 406  : 			-> _Ty
; 407  : 		{	// call default version
; 408  : 		return (_Al);
; 409  : 		}
; 410  : 	};
; 411  : 
; 412  : 		// TEMPLATE CLASS allocator_traits
; 413  : template<class _Alloc>
; 414  : 	struct allocator_traits
; 415  : 	{	// defines traits for allocators
; 416  : 	typedef allocator_traits<_Alloc> other;
; 417  : 
; 418  : 	typedef _Alloc allocator_type;
; 419  : 	typedef typename _Alloc::value_type value_type;
; 420  : 
; 421  : 	typedef typename _Get_pointer_type<_Alloc>::type
; 422  : 		pointer;
; 423  : 	typedef typename _Get_const_pointer_type<_Alloc>::type
; 424  : 		const_pointer;
; 425  : 	typedef typename _Get_void_pointer_type<_Alloc>::type
; 426  : 		void_pointer;
; 427  : 	typedef typename _Get_const_void_pointer_type<_Alloc>::type
; 428  : 		const_void_pointer;
; 429  : 
; 430  : 	typedef typename _Get_size_type<_Alloc>::type size_type;
; 431  : 	typedef typename _Get_difference_type<_Alloc>::type difference_type;
; 432  : 
; 433  : 	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
; 434  : 		propagate_on_container_copy_assignment;
; 435  : 	typedef typename _Get_propagate_on_container_move<_Alloc>::type
; 436  : 		propagate_on_container_move_assignment;
; 437  : 	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
; 438  : 		propagate_on_container_swap;
; 439  : 
; 440  : 	template<class _Other>
; 441  : 		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;
; 442  : 
; 443  : 	template<class _Other>
; 444  : 		using rebind_traits = allocator_traits<rebind_alloc<_Other> >;
; 445  : 
; 446  : 	static pointer allocate(_Alloc& _Al, size_type _Count)
; 447  : 		{	// allocate array of _Count elements
; 448  : 		return (_Al.allocate(_Count));
; 449  : 		}
; 450  : 
; 451  : 	static pointer allocate(_Alloc& _Al, size_type _Count,
; 452  : 		const_void_pointer _Hint)
; 453  : 		{	// allocate array of _Count elements, with hint
; 454  : 		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
; 455  : 		}
; 456  : 
; 457  : 	static void deallocate(_Alloc& _Al,
; 458  : 		pointer _Ptr, size_type _Count)
; 459  : 		{	// deallocate _Count elements at _Ptr
; 460  : 		_Al.deallocate(_Ptr, _Count);
; 461  : 		}
; 462  : 
; 463  : 	template<class _Ty,
; 464  : 		class... _Types>
; 465  : 		static void construct(_Alloc& _Al, _Ty *_Ptr,
; 466  : 			_Types&&... _Args)
; 467  : 		{	// construct _Ty(_Types...) at _Ptr
; 468  : 		_Alloc_construct::_Fn(0, _Al, _Ptr,
; 469  : 			_STD forward<_Types>(_Args)...);
; 470  : 		}
; 471  : 
; 472  : 
; 473  : 	template<class _Ty>
; 474  : 		static void destroy(_Alloc& _Al, _Ty *_Ptr)
; 475  : 		{	// destroy object at _Ptr
; 476  : 		_Alloc_destroy::_Fn(0, _Al, _Ptr);
; 477  : 		}
; 478  : 
; 479  : 	static size_type max_size(const _Alloc& _Al)
; 480  : 		{	// get maximum size
; 481  : 		return (_Alloc_max_size::_Fn(0, _Al));
; 482  : 		}
; 483  : 
; 484  : 	static _Alloc select_on_container_copy_construction(
; 485  : 		const _Alloc& _Al)
; 486  : 		{	// get allocator to use
; 487  : 		return (_Alloc_select::_Fn(0, _Al));
; 488  : 		}
; 489  : 	};
; 490  : 
; 491  : 		// TEMPLATE CLASS _Allocator_base
; 492  : template<class _Ty>
; 493  : 	struct _Allocator_base
; 494  : 	{	// base class for generic allocators
; 495  : 	typedef _Ty value_type;
; 496  : 	};
; 497  : 
; 498  : 		// TEMPLATE CLASS _Allocator_base<const _Ty>
; 499  : template<class _Ty>
; 500  : 	struct _Allocator_base<const _Ty>
; 501  : 	{	// base class for generic allocators for const _Ty
; 502  : 	typedef _Ty value_type;
; 503  : 	};
; 504  : 
; 505  : 		// TEMPLATE CLASS allocator
; 506  : template<class _Ty>
; 507  : 	class allocator
; 508  : 		: public _Allocator_base<_Ty>
; 509  : 	{	// generic allocator for objects of class _Ty
; 510  : public:
; 511  : 	typedef allocator<_Ty> other;
; 512  : 
; 513  : 	typedef _Allocator_base<_Ty> _Mybase;
; 514  : 	typedef typename _Mybase::value_type value_type;
; 515  : 
; 516  : 	typedef value_type *pointer;
; 517  : 	typedef const value_type *const_pointer;
; 518  : 	typedef void *void_pointer;
; 519  : 	typedef const void *const_void_pointer;
; 520  : 
; 521  : 	typedef value_type& reference;
; 522  : 	typedef const value_type& const_reference;
; 523  : 
; 524  : 	typedef size_t size_type;
; 525  : 	typedef ptrdiff_t difference_type;
; 526  : 
; 527  : 	typedef false_type propagate_on_container_copy_assignment;
; 528  : 	typedef false_type propagate_on_container_move_assignment;
; 529  : 	typedef false_type propagate_on_container_swap;
; 530  : 
; 531  : 	allocator<_Ty> select_on_container_copy_construction() const
; 532  : 		{	// return this allocator
; 533  : 		return (*this);
; 534  : 		}
; 535  : 
; 536  : 	template<class _Other>
; 537  : 		struct rebind
; 538  : 		{	// convert this type to allocator<_Other>
; 539  : 		typedef allocator<_Other> other;
; 540  : 		};
; 541  : 
; 542  : 	pointer address(reference _Val) const _NOEXCEPT
; 543  : 		{	// return address of mutable _Val
; 544  : 		return (_STD addressof(_Val));
; 545  : 		}
; 546  : 
; 547  : 	const_pointer address(const_reference _Val) const _NOEXCEPT
; 548  : 		{	// return address of nonmutable _Val
; 549  : 		return (_STD addressof(_Val));
; 550  : 		}
; 551  : 
; 552  : 	allocator() _THROW0()
; 553  : 		{	// construct default allocator (do nothing)
; 554  : 		}
; 555  : 
; 556  : 	allocator(const allocator<_Ty>&) _THROW0()
; 557  : 		{	// construct by copying (do nothing)
; 558  : 		}
; 559  : 
; 560  : 	template<class _Other>
; 561  : 		allocator(const allocator<_Other>&) _THROW0()
; 562  : 		{	// construct from a related allocator (do nothing)
; 563  : 		}
; 564  : 
; 565  : 	template<class _Other>
; 566  : 		allocator<_Ty>& operator=(const allocator<_Other>&)
; 567  : 		{	// assign from a related allocator (do nothing)
; 568  : 		return (*this);
; 569  : 		}
; 570  : 
; 571  : 	void deallocate(pointer _Ptr, size_type)
; 572  : 		{	// deallocate object at _Ptr, ignore size
; 573  : 		::operator delete(_Ptr);
; 574  : 		}
; 575  : 
; 576  : 	pointer allocate(size_type _Count)
; 577  : 		{	// allocate array of _Count elements
; 578  : 		return (_Allocate(_Count, (pointer)0));
; 579  : 		}
; 580  : 
; 581  : 	pointer allocate(size_type _Count, const void *)
; 582  : 		{	// allocate array of _Count elements, ignore hint
; 583  : 		return (allocate(_Count));
; 584  : 		}
; 585  : 
; 586  : 	void construct(_Ty *_Ptr)
; 587  : 		{	// default construct object at _Ptr
; 588  : 		::new ((void *)_Ptr) _Ty();
; 589  : 		}
; 590  : 
; 591  : 	void construct(_Ty *_Ptr, const _Ty& _Val)
; 592  : 		{	// construct object at _Ptr with value _Val
; 593  : 		::new ((void *)_Ptr) _Ty(_Val);
; 594  : 		}
; 595  : 
; 596  : 	template<class _Objty,
; 597  : 		class... _Types>
; 598  : 		void construct(_Objty *_Ptr, _Types&&... _Args)
; 599  : 		{	// construct _Objty(_Types...) at _Ptr
; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00035	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0003b	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File a:\vs\vc\include\deque

; 897  : 		this->_Myproxy->_Mycont = this;

  00042	8b 06		 mov	 eax, DWORD PTR [esi]
  00044	89 30		 mov	 DWORD PTR [eax], esi

; 875  : 		}

  00046	8b c6		 mov	 eax, esi
  00048	5e		 pop	 esi
  00049	c2 04 00	 ret	 4
$LN42@Deque_allo:
; File a:\vs\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  0004c	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN44@Deque_allo:
$LN41@Deque_allo:
  00051	cc		 int	 3
??0?$_Deque_alloc@$0A@U?$_Deque_base_types@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@ABV?$allocator@USState@CPythonGraphic@@@1@@Z ENDP ; std::_Deque_alloc<0,std::_Deque_base_types<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::_Deque_alloc<0,std::_Deque_base_types<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@QAE@XZ PROC ; std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> >::~_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> >, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@QAE@XZ ENDP ; std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> >::~_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
;	COMDAT ?_Getblock@?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@QBEII@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?_Getblock@?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@QBEII@Z PROC ; std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> >::_Getblock, COMDAT
; _this$ = ecx

; 780  : 		{	// determine block from offset

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 781  : 			// NB: _Mapsize and _DEQUESIZ are guaranteed to be powers of 2
; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	48		 dec	 eax
  00007	23 45 08	 and	 eax, DWORD PTR __Off$[ebp]

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?_Getblock@?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@QBEII@Z ENDP ; std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> >::_Getblock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
;	COMDAT ??0?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@QAE@XZ PROC ; std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> >::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> >, COMDAT
; _this$ = ecx
; File a:\vs\vc\include\xutility

; 80   : 		{	// construct childless container

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File a:\vs\vc\include\deque

; 777  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  0001d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  00024	c3		 ret	 0
??0?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@QAE@XZ ENDP ; std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> >::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@std@@QAEXPAPAUSState@CPythonGraphic@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@std@@QAEXPAPAUSState@CPythonGraphic@@I@Z PROC ; std::_Wrap_alloc<std::allocator<CPythonGraphic::SState *> >::deallocate, COMDAT
; _this$ = ecx

; 857  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 858  : 		_Mybase::deallocate(_Ptr, _Count);
; 859  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@std@@QAEXPAPAUSState@CPythonGraphic@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<CPythonGraphic::SState *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@std@@QAEPAPAUSState@CPythonGraphic@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@std@@QAEPAPAUSState@CPythonGraphic@@I@Z PROC ; std::_Wrap_alloc<std::allocator<CPythonGraphic::SState *> >::allocate, COMDAT
; _this$ = ecx

; 846  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 19		 je	 SHORT $LN6@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00011	77 18		 ja	 SHORT $LN14@allocate
  00013	c1 e0 02	 shl	 eax, 2
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	74 06		 je	 SHORT $LN14@allocate
$LN6@allocate:

; 847  : 		return (_Mybase::allocate(_Count));

  00025	8b c1		 mov	 eax, ecx

; 848  : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN14@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002b	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN16@allocate:
$LN13@allocate:
  00030	cc		 int	 3
?allocate@?$_Wrap_alloc@V?$allocator@PAUSState@CPythonGraphic@@@std@@@std@@QAEPAPAUSState@CPythonGraphic@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<CPythonGraphic::SState *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@PAUSState@CPythonGraphic@@@std@@QAEPAPAUSState@CPythonGraphic@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PAUSState@CPythonGraphic@@@std@@QAEPAPAUSState@CPythonGraphic@@I@Z PROC ; std::allocator<CPythonGraphic::SState *>::allocate, COMDAT
; _this$ = ecx

; 577  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 19		 je	 SHORT $LN4@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00011	77 18		 ja	 SHORT $LN11@allocate
  00013	c1 e0 02	 shl	 eax, 2
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	74 06		 je	 SHORT $LN11@allocate
$LN4@allocate:

; 578  : 		return (_Allocate(_Count, (pointer)0));

  00025	8b c1		 mov	 eax, ecx

; 579  : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN11@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002b	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN13@allocate:
$LN10@allocate:
  00030	cc		 int	 3
?allocate@?$allocator@PAUSState@CPythonGraphic@@@std@@QAEPAPAUSState@CPythonGraphic@@I@Z ENDP ; std::allocator<CPythonGraphic::SState *>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@PAUSState@CPythonGraphic@@@std@@QAEXPAPAUSState@CPythonGraphic@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAUSState@CPythonGraphic@@@std@@QAEXPAPAUSState@CPythonGraphic@@I@Z PROC ; std::allocator<CPythonGraphic::SState *>::deallocate, COMDAT
; _this$ = ecx

; 572  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 574  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$allocator@PAUSState@CPythonGraphic@@@std@@QAEXPAPAUSState@CPythonGraphic@@I@Z ENDP ; std::allocator<CPythonGraphic::SState *>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<CPythonGraphic::SState> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (_Mytraits::max_size(*this));

  00000	b8 ff ff ff 01	 mov	 eax, 33554431		; 01ffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<CPythonGraphic::SState> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEXPAUSState@CPythonGraphic@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEXPAUSState@CPythonGraphic@@I@Z PROC ; std::_Wrap_alloc<std::allocator<CPythonGraphic::SState> >::deallocate, COMDAT
; _this$ = ecx

; 857  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 858  : 		_Mybase::deallocate(_Ptr, _Count);
; 859  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEXPAUSState@CPythonGraphic@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<CPythonGraphic::SState> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEPAUSState@CPythonGraphic@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEPAUSState@CPythonGraphic@@I@Z PROC ; std::_Wrap_alloc<std::allocator<CPythonGraphic::SState> >::allocate, COMDAT
; _this$ = ecx

; 846  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 19		 je	 SHORT $LN6@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 01	 cmp	 eax, 33554431		; 01ffffffH
  00011	77 18		 ja	 SHORT $LN14@allocate
  00013	c1 e0 07	 shl	 eax, 7
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	74 06		 je	 SHORT $LN14@allocate
$LN6@allocate:

; 847  : 		return (_Mybase::allocate(_Count));

  00025	8b c1		 mov	 eax, ecx

; 848  : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN14@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002b	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN16@allocate:
$LN13@allocate:
  00030	cc		 int	 3
?allocate@?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEPAUSState@CPythonGraphic@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<CPythonGraphic::SState> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<CPythonGraphic::SState> >::_Wrap_alloc<std::allocator<CPythonGraphic::SState> >, COMDAT
; _this$ = ecx

; 802  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<CPythonGraphic::SState> >::_Wrap_alloc<std::allocator<CPythonGraphic::SState> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@USState@CPythonGraphic@@@std@@@std@@SAIABV?$allocator@USState@CPythonGraphic@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@USState@CPythonGraphic@@@std@@@std@@SAIABV?$allocator@USState@CPythonGraphic@@@2@@Z PROC ; std::allocator_traits<std::allocator<CPythonGraphic::SState> >::max_size, COMDAT

; 735  : 		return (_Al.max_size());

  00000	b8 ff ff ff 01	 mov	 eax, 33554431		; 01ffffffH

; 736  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@USState@CPythonGraphic@@@std@@@std@@SAIABV?$allocator@USState@CPythonGraphic@@@2@@Z ENDP ; std::allocator_traits<std::allocator<CPythonGraphic::SState> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@USState@CPythonGraphic@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@USState@CPythonGraphic@@@std@@QBEIXZ PROC ; std::allocator<CPythonGraphic::SState>::max_size, COMDAT
; _this$ = ecx

; 612  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 ff ff ff 01	 mov	 eax, 33554431		; 01ffffffH

; 613  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@USState@CPythonGraphic@@@std@@QBEIXZ ENDP ; std::allocator<CPythonGraphic::SState>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?construct@?$allocator@USState@CPythonGraphic@@@std@@QAEXPAUSState@CPythonGraphic@@ABU34@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@USState@CPythonGraphic@@@std@@QAEXPAUSState@CPythonGraphic@@ABU34@@Z PROC ; std::allocator<CPythonGraphic::SState>::construct, COMDAT
; _this$ = ecx

; 592  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 593  : 		::new ((void *)_Ptr) _Ty(_Val);

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN3@construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN3@construct:
  00017	5f		 pop	 edi

; 594  : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
?construct@?$allocator@USState@CPythonGraphic@@@std@@QAEXPAUSState@CPythonGraphic@@ABU34@@Z ENDP ; std::allocator<CPythonGraphic::SState>::construct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@USState@CPythonGraphic@@@std@@QAEPAUSState@CPythonGraphic@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@USState@CPythonGraphic@@@std@@QAEPAUSState@CPythonGraphic@@I@Z PROC ; std::allocator<CPythonGraphic::SState>::allocate, COMDAT
; _this$ = ecx

; 577  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 19		 je	 SHORT $LN4@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 01	 cmp	 eax, 33554431		; 01ffffffH
  00011	77 18		 ja	 SHORT $LN11@allocate
  00013	c1 e0 07	 shl	 eax, 7
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	74 06		 je	 SHORT $LN11@allocate
$LN4@allocate:

; 578  : 		return (_Allocate(_Count, (pointer)0));

  00025	8b c1		 mov	 eax, ecx

; 579  : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN11@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002b	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN13@allocate:
$LN10@allocate:
  00030	cc		 int	 3
?allocate@?$allocator@USState@CPythonGraphic@@@std@@QAEPAUSState@CPythonGraphic@@I@Z ENDP ; std::allocator<CPythonGraphic::SState>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@USState@CPythonGraphic@@@std@@QAEXPAUSState@CPythonGraphic@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@USState@CPythonGraphic@@@std@@QAEXPAUSState@CPythonGraphic@@I@Z PROC ; std::allocator<CPythonGraphic::SState>::deallocate, COMDAT
; _this$ = ecx

; 572  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 574  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$allocator@USState@CPythonGraphic@@@std@@QAEXPAUSState@CPythonGraphic@@I@Z ENDP ; std::allocator<CPythonGraphic::SState>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xmemory0
;	COMDAT ??0?$allocator@USState@CPythonGraphic@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@USState@CPythonGraphic@@@std@@QAE@XZ PROC ; std::allocator<CPythonGraphic::SState>::allocator<CPythonGraphic::SState>, COMDAT
; _this$ = ecx

; 553  : 		{	// construct default allocator (do nothing)
; 554  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@USState@CPythonGraphic@@@std@@QAE@XZ ENDP ; std::allocator<CPythonGraphic::SState>::allocator<CPythonGraphic::SState>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0SState@CPythonGraphic@@QAE@XZ
_TEXT	SEGMENT
??0SState@CPythonGraphic@@QAE@XZ PROC			; CPythonGraphic::SState::SState, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0SState@CPythonGraphic@@QAE@XZ ENDP			; CPythonGraphic::SState::SState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
;	COMDAT ?SetGamma@CPythonGraphic@@QAEXM@Z
_TEXT	SEGMENT
_NewRamp$ = -1752					; size = 1536
_d3dCaps$ = -216					; size = 212
__$ArrayPad$ = -4					; size = 4
_fGammaFactor$ = 8					; size = 4
?SetGamma@CPythonGraphic@@QAEXM@Z PROC			; CPythonGraphic::SetGamma, COMDAT
; _this$ = ecx

; 125  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 06 00
	00		 sub	 esp, 1752		; 000006d8H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 126  : 	D3DCAPS8		d3dCaps;
; 127  : 	D3DGAMMARAMP	NewRamp;
; 128  : 	int				ui, val;
; 129  : 	
; 130  : 	ms_lpd3dDevice->GetDeviceCaps(&d3dCaps);

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00018	8d 95 28 ff ff
	ff		 lea	 edx, DWORD PTR _d3dCaps$[ebp]
  0001e	52		 push	 edx
  0001f	50		 push	 eax
  00020	8b 08		 mov	 ecx, DWORD PTR [eax]
  00022	ff 51 1c	 call	 DWORD PTR [ecx+28]

; 131  : 
; 132  : 	if (D3DCAPS2_FULLSCREENGAMMA != (d3dCaps.Caps2 & D3DCAPS2_FULLSCREENGAMMA))

  00025	f7 85 34 ff ff
	ff 00 00 02 00	 test	 DWORD PTR _d3dCaps$[ebp+12], 131072 ; 00020000H
  0002f	74 7e		 je	 SHORT $LN7@SetGamma

; 133  : 		return;
; 134  : 
; 135  : 	for (int i = 0; i < 256; ++i)

  00031	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fGammaFactor$[ebp]
  00036	33 d2		 xor	 edx, edx
  00038	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@437f0000
  00040	56		 push	 esi
  00041	be ff 7f 00 00	 mov	 esi, 32767		; 00007fffH
$LL5@SetGamma:

; 136  : 	{
; 137  : 		val	= (int) (i * fGammaFactor * 255.0f);
; 138  : 		ui = 0;

  00046	66 0f 6e c2	 movd	 xmm0, edx
  0004a	33 c9		 xor	 ecx, ecx
  0004c	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0004f	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00053	f3 0f 59 c2	 mulss	 xmm0, xmm2
  00057	f3 0f 2c c0	 cvttss2si eax, xmm0

; 139  : 		
; 140  : 		if (val > 32767)

  0005b	3d ff 7f 00 00	 cmp	 eax, 32767		; 00007fffH
  00060	7e 12		 jle	 SHORT $LN1@SetGamma

; 141  : 		{
; 142  : 			val = val - 32767;

  00062	2d ff 7f 00 00	 sub	 eax, 32767		; 00007fffH

; 143  : 			ui = 1;

  00067	b9 01 00 00 00	 mov	 ecx, 1

; 144  : 		}
; 145  : 
; 146  : 		if (val > 32767)

  0006c	3d ff 7f 00 00	 cmp	 eax, 32767		; 00007fffH
  00071	0f 4f c6	 cmovg	 eax, esi
$LN1@SetGamma:

; 147  : 			val = 32767;
; 148  : 		
; 149  : 		NewRamp.red[i] = (WORD) (val | (32768 * ui));

  00074	c1 e1 0f	 shl	 ecx, 15			; 0000000fH
  00077	0b c8		 or	 ecx, eax
  00079	66 89 8c 55 28
	f9 ff ff	 mov	 WORD PTR _NewRamp$[ebp+edx*2], cx

; 150  : 		NewRamp.green[i] = (WORD) (val | (32768 * ui));

  00081	66 89 8c 55 28
	fb ff ff	 mov	 WORD PTR _NewRamp$[ebp+edx*2+512], cx

; 151  : 		NewRamp.blue[i] = (WORD) (val | (32768 * ui));

  00089	66 89 8c 55 28
	fd ff ff	 mov	 WORD PTR _NewRamp$[ebp+edx*2+1024], cx
  00091	42		 inc	 edx
  00092	81 fa 00 01 00
	00		 cmp	 edx, 256		; 00000100H
  00098	7c ac		 jl	 SHORT $LL5@SetGamma

; 152  : 	}
; 153  : 
; 154  : 	ms_lpd3dDevice->SetGammaRamp(D3DSGR_NO_CALIBRATION, &NewRamp);

  0009a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  0009f	8d 95 28 f9 ff
	ff		 lea	 edx, DWORD PTR _NewRamp$[ebp]
  000a5	52		 push	 edx
  000a6	6a 00		 push	 0
  000a8	50		 push	 eax
  000a9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ab	ff 51 48	 call	 DWORD PTR [ecx+72]
  000ae	5e		 pop	 esi
$LN7@SetGamma:

; 155  : }

  000af	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b2	33 cd		 xor	 ecx, ebp
  000b4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c2 04 00	 ret	 4
?SetGamma@CPythonGraphic@@QAEXM@Z ENDP			; CPythonGraphic::SetGamma
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
;	COMDAT ?GetAvailableMemory@CPythonGraphic@@QAEKXZ
_TEXT	SEGMENT
?GetAvailableMemory@CPythonGraphic@@QAEKXZ PROC		; CPythonGraphic::GetAvailableMemory, COMDAT
; _this$ = ecx

; 608  : 	return ms_lpd3dDevice->GetAvailableTextureMem();

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00005	50		 push	 eax
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	ff 51 10	 call	 DWORD PTR [ecx+16]

; 609  : }

  0000b	c3		 ret	 0
?GetAvailableMemory@CPythonGraphic@@QAEKXZ ENDP		; CPythonGraphic::GetAvailableMemory
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
;	COMDAT ?SaveScreenShot@CPythonGraphic@@QAE_NPBD@Z
_TEXT	SEGMENT
_lockRect$ = -204					; size = 8
_pbyBuffer$1$ = -196					; size = 4
_uWidth$1$ = -192					; size = 4
tv759 = -188						; size = 4
_imgDescLen$1$ = -184					; size = 4
_this$1$ = -184						; size = 4
_tailSize$1$ = -180					; size = 4
_uHeight$1$ = -180					; size = 4
_uColor$1$ = -176					; size = 4
_uColor$1$ = -176					; size = 4
_c_pszFileName$GSCopy$1$ = -172				; size = 4
_pbySource$1$ = -168					; size = 4
_lpSurface$ = -164					; size = 4
_stSurfaceDesc$ = -160					; size = 32
_imgDesc$1 = -128					; size = 64
_head$2 = -64						; size = 21
_exifHeader$3 = -40					; size = 35
__$ArrayPad$ = -4					; size = 4
_c_pszFileName$ = 8					; size = 4
?SaveScreenShot@CPythonGraphic@@QAE_NPBD@Z PROC		; CPythonGraphic::SaveScreenShot, COMDAT
; _this$ = ecx

; 173  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 174  : 	HRESULT hr;
; 175  : 	LPDIRECT3DSURFACE8 lpSurface;
; 176  : 	D3DSURFACE_DESC stSurfaceDesc;
; 177  : 
; 178  : 	if (FAILED(hr = ms_lpd3dDevice->GetBackBuffer(0, D3DBACKBUFFER_TYPE_MONO, &lpSurface)))

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00018	53		 push	 ebx
  00019	8b 5d 08	 mov	 ebx, DWORD PTR _c_pszFileName$[ebp]
  0001c	89 8d 48 ff ff
	ff		 mov	 DWORD PTR _this$1$[ebp], ecx
  00022	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR _lpSurface$[ebp]
  00028	8b 10		 mov	 edx, DWORD PTR [eax]
  0002a	51		 push	 ecx
  0002b	6a 00		 push	 0
  0002d	6a 00		 push	 0
  0002f	50		 push	 eax
  00030	89 9d 54 ff ff
	ff		 mov	 DWORD PTR _c_pszFileName$GSCopy$1$[ebp], ebx
  00036	ff 52 40	 call	 DWORD PTR [edx+64]
  00039	85 c0		 test	 eax, eax
  0003b	79 21		 jns	 SHORT $LN38@SaveScreen

; 179  : 	{
; 180  : 		TraceError("Failed to get back buffer (0x%08x)", hr);

  0003d	50		 push	 eax
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@MBNJPOAA@Failed?5to?5get?5back?5buffer?5?$CI0x?$CF08@
  00043	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00048	83 c4 08	 add	 esp, 8

; 181  : 		return false;

  0004b	32 c0		 xor	 al, al
  0004d	5b		 pop	 ebx

; 382  : 		}
; 383  : 	}
; 384  : 	return true;
; 385  : }

  0004e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00051	33 cd		 xor	 ecx, ebp
  00053	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
$LN38@SaveScreen:

; 182  : 	}
; 183  : 
; 184  : 	if (FAILED(hr = lpSurface->GetDesc(&stSurfaceDesc)))

  0005e	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _lpSurface$[ebp]
  00064	8d 95 60 ff ff
	ff		 lea	 edx, DWORD PTR _stSurfaceDesc$[ebp]
  0006a	52		 push	 edx
  0006b	50		 push	 eax
  0006c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006e	ff 51 20	 call	 DWORD PTR [ecx+32]
  00071	85 c0		 test	 eax, eax
  00073	79 31		 jns	 SHORT $LN37@SaveScreen

; 185  : 	{
; 186  : 		TraceError("Failed to get surface desc (0x%08x)", hr);

  00075	50		 push	 eax
  00076	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@NBEFCAIB@Failed?5to?5get?5surface?5desc?5?$CI0x?$CF0@
  0007b	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError

; 187  : 		SAFE_RELEASE(lpSurface);

  00080	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _lpSurface$[ebp]
  00086	83 c4 08	 add	 esp, 8
  00089	85 c9		 test	 ecx, ecx
  0008b	74 06		 je	 SHORT $LN36@SaveScreen
  0008d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0008f	51		 push	 ecx
  00090	ff 50 08	 call	 DWORD PTR [eax+8]
$LN36@SaveScreen:

; 188  : 		return false;

  00093	32 c0		 xor	 al, al
  00095	5b		 pop	 ebx

; 382  : 		}
; 383  : 	}
; 384  : 	return true;
; 385  : }

  00096	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00099	33 cd		 xor	 ecx, ebp
  0009b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c2 04 00	 ret	 4
$LN37@SaveScreen:

; 189  : 	}
; 190  : 
; 191  : 	UINT uWidth = stSurfaceDesc.Width;
; 192  : 	UINT uHeight = stSurfaceDesc.Height;
; 193  : 
; 194  : 	switch( stSurfaceDesc.Format ) {

  000a6	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _stSurfaceDesc$[ebp]
  000ac	56		 push	 esi
  000ad	8b b5 7c ff ff
	ff		 mov	 esi, DWORD PTR _stSurfaceDesc$[ebp+28]
  000b3	57		 push	 edi
  000b4	8b bd 78 ff ff
	ff		 mov	 edi, DWORD PTR _stSurfaceDesc$[ebp+24]
  000ba	8d 41 e6	 lea	 eax, DWORD PTR [ecx-26]
  000bd	89 bd 40 ff ff
	ff		 mov	 DWORD PTR _uWidth$1$[ebp], edi
  000c3	89 b5 4c ff ff
	ff		 mov	 DWORD PTR _uHeight$1$[ebp], esi
  000c9	83 f8 05	 cmp	 eax, 5
  000cc	77 16		 ja	 SHORT $LN34@SaveScreen
  000ce	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN61@SaveScreen[eax]
  000d5	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN68@SaveScreen[eax*4]
$LN32@SaveScreen:

; 195  : 	case D3DFMT_R8G8B8 :
; 196  : 	case D3DFMT_A8R8G8B8 :
; 197  : 	case D3DFMT_X8R8G8B8 :
; 198  : 	case D3DFMT_R5G6B5 :
; 199  : 	case D3DFMT_X1R5G5B5 :
; 200  : 	case D3DFMT_A1R5G5B5 :
; 201  : 		break;
; 202  : 	case D3DFMT_A4R4G4B4 :
; 203  : 	case D3DFMT_R3G3B2 :
; 204  : 	case D3DFMT_A8R3G3B2 :
; 205  : 	case D3DFMT_X4R4G4B4 :
; 206  : 	case D3DFMT_A2B10G10R10 :
; 207  : 		TraceError("Unsupported BackBuffer Format(%d). Please contact Metin 2 Administrator.", stSurfaceDesc.Format);

  000dc	51		 push	 ecx
  000dd	68 00 00 00 00	 push	 OFFSET ??_C@_0EJ@CMPHLGKC@Unsupported?5BackBuffer?5Format?$CI?$CFd@

; 208  : 		SAFE_RELEASE(lpSurface);
; 209  : 		return false;

  000e2	eb 24		 jmp	 SHORT $LN66@SaveScreen
$LN34@SaveScreen:

; 210  : 	}
; 211  : 
; 212  : 	D3DLOCKED_RECT lockRect;
; 213  : 	if (FAILED(hr = lpSurface->LockRect(&lockRect, NULL, D3DLOCK_NO_DIRTY_UPDATE | D3DLOCK_READONLY | D3DLOCK_NOSYSLOCK)))

  000e4	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _lpSurface$[ebp]
  000ea	8d 95 34 ff ff
	ff		 lea	 edx, DWORD PTR _lockRect$[ebp]
  000f0	68 10 88 00 00	 push	 34832			; 00008810H
  000f5	6a 00		 push	 0
  000f7	52		 push	 edx
  000f8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fa	50		 push	 eax
  000fb	ff 51 24	 call	 DWORD PTR [ecx+36]
  000fe	85 c0		 test	 eax, eax
  00100	79 33		 jns	 SHORT $LN30@SaveScreen

; 214  : 	{
; 215  : 		TraceError("Failed to lock the surface (0x%08x)", hr);

  00102	50		 push	 eax
  00103	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@GBOBAJOB@Failed?5to?5lock?5the?5surface?5?$CI0x?$CF0@
$LN66@SaveScreen:
  00108	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError

; 216  : 		SAFE_RELEASE(lpSurface);

  0010d	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _lpSurface$[ebp]
  00113	83 c4 08	 add	 esp, 8
  00116	85 c9		 test	 ecx, ecx
  00118	74 06		 je	 SHORT $LN29@SaveScreen
  0011a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0011c	51		 push	 ecx
  0011d	ff 50 08	 call	 DWORD PTR [eax+8]
$LN29@SaveScreen:

; 217  : 		return false;

  00120	5f		 pop	 edi
  00121	5e		 pop	 esi
  00122	32 c0		 xor	 al, al
  00124	5b		 pop	 ebx

; 382  : 		}
; 383  : 	}
; 384  : 	return true;
; 385  : }

  00125	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00128	33 cd		 xor	 ecx, ebp
  0012a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0012f	8b e5		 mov	 esp, ebp
  00131	5d		 pop	 ebp
  00132	c2 04 00	 ret	 4
$LN30@SaveScreen:

; 218  : 	}
; 219  : 
; 220  : 	BYTE* pbyBuffer = new BYTE[uWidth * uHeight * 3];

  00135	8b c6		 mov	 eax, esi
  00137	0f af c7	 imul	 eax, edi
  0013a	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0013d	50		 push	 eax
  0013e	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00143	83 c4 04	 add	 esp, 4
  00146	89 85 3c ff ff
	ff		 mov	 DWORD PTR _pbyBuffer$1$[ebp], eax

; 221  : 	if (pbyBuffer == NULL) {

  0014c	85 c0		 test	 eax, eax
  0014e	75 44		 jne	 SHORT $LN28@SaveScreen

; 222  : 		lpSurface->UnlockRect();

  00150	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _lpSurface$[ebp]
  00156	50		 push	 eax
  00157	8b 08		 mov	 ecx, DWORD PTR [eax]
  00159	ff 51 28	 call	 DWORD PTR [ecx+40]

; 223  : 		lpSurface->Release();

  0015c	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _lpSurface$[ebp]
  00162	50		 push	 eax
  00163	8b 08		 mov	 ecx, DWORD PTR [eax]
  00165	ff 51 08	 call	 DWORD PTR [ecx+8]

; 224  : 		lpSurface = NULL;
; 225  : 		TraceError("Failed to allocate screenshot buffer");

  00168	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@KCPFIPM@Failed?5to?5allocate?5screenshot?5bu@
  0016d	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _lpSurface$[ebp], 0
  00177	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  0017c	83 c4 04	 add	 esp, 4

; 226  : 		return false;

  0017f	32 c0		 xor	 al, al
  00181	5f		 pop	 edi
  00182	5e		 pop	 esi
  00183	5b		 pop	 ebx

; 382  : 		}
; 383  : 	}
; 384  : 	return true;
; 385  : }

  00184	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00187	33 cd		 xor	 ecx, ebp
  00189	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0018e	8b e5		 mov	 esp, ebp
  00190	5d		 pop	 ebp
  00191	c2 04 00	 ret	 4
$LN28@SaveScreen:

; 227  : 	}
; 228  : 	BYTE* pbySource = (BYTE*) lockRect.pBits;

  00194	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR _lockRect$[ebp+4]
  0019a	89 8d 58 ff ff
	ff		 mov	 DWORD PTR _pbySource$1$[ebp], ecx

; 229  : 	BYTE* pbyDestination = (BYTE*) pbyBuffer;
; 230  : 	for(UINT y = 0; y < uHeight; ++y) {

  001a0	85 f6		 test	 esi, esi
  001a2	0f 84 6e 01 00
	00		 je	 $LN25@SaveScreen

; 227  : 	}
; 228  : 	BYTE* pbySource = (BYTE*) lockRect.pBits;

  001a8	89 b5 44 ff ff
	ff		 mov	 DWORD PTR tv759[ebp], esi
  001ae	8b ff		 npad	 2
$LL27@SaveScreen:

; 231  : 		BYTE *pRow = pbySource;

  001b0	8b f1		 mov	 esi, ecx

; 232  : 
; 233  : 		switch( stSurfaceDesc.Format ) {

  001b2	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _stSurfaceDesc$[ebp]
  001b8	83 c1 ec	 add	 ecx, -20		; ffffffecH
  001bb	83 f9 05	 cmp	 ecx, 5
  001be	0f 87 28 01 00
	00		 ja	 $LN7@SaveScreen
  001c4	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN69@SaveScreen[ecx*4]
$LN22@SaveScreen:

; 234  : 		case D3DFMT_R8G8B8 :
; 235  : 			for(UINT x = 0; x < uWidth; ++x) {

  001cb	85 ff		 test	 edi, edi
  001cd	0f 84 19 01 00
	00		 je	 $LN7@SaveScreen
  001d3	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR _pbySource$1$[ebp]
  001d9	8b f7		 mov	 esi, edi
  001db	42		 inc	 edx
  001dc	8d 64 24 00	 npad	 4
$LL21@SaveScreen:

; 236  : 				*pbyDestination++ = pRow[2];	// Blue

  001e0	0f b6 4a 01	 movzx	 ecx, BYTE PTR [edx+1]

; 237  : 				*pbyDestination++ = pRow[1];	// Green
; 238  : 				*pbyDestination++ = pRow[0];	// Red
; 239  : 				pRow += 3;

  001e4	8d 52 03	 lea	 edx, DWORD PTR [edx+3]
  001e7	88 08		 mov	 BYTE PTR [eax], cl
  001e9	0f b6 4a fd	 movzx	 ecx, BYTE PTR [edx-3]
  001ed	88 48 01	 mov	 BYTE PTR [eax+1], cl
  001f0	0f b6 4a fc	 movzx	 ecx, BYTE PTR [edx-4]
  001f4	88 48 02	 mov	 BYTE PTR [eax+2], cl
  001f7	83 c0 03	 add	 eax, 3
  001fa	4e		 dec	 esi
  001fb	75 e3		 jne	 SHORT $LL21@SaveScreen

; 240  : 			}
; 241  : 			break;

  001fd	e9 ea 00 00 00	 jmp	 $LN7@SaveScreen
$LN18@SaveScreen:

; 242  : 		case D3DFMT_A8R8G8B8 :
; 243  : 		case D3DFMT_X8R8G8B8 :
; 244  : 			for(UINT x = 0; x < uWidth; ++x) {

  00202	85 ff		 test	 edi, edi
  00204	0f 84 e2 00 00
	00		 je	 $LN7@SaveScreen
  0020a	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR _pbySource$1$[ebp]
  00210	8b f7		 mov	 esi, edi
  00212	42		 inc	 edx
$LL17@SaveScreen:

; 245  : 				*pbyDestination++ = pRow[2];	// Blue

  00213	0f b6 4a 01	 movzx	 ecx, BYTE PTR [edx+1]

; 246  : 				*pbyDestination++ = pRow[1];	// Green
; 247  : 				*pbyDestination++ = pRow[0];	// Red
; 248  : 				pRow += 4;

  00217	8d 52 04	 lea	 edx, DWORD PTR [edx+4]
  0021a	88 08		 mov	 BYTE PTR [eax], cl
  0021c	0f b6 4a fc	 movzx	 ecx, BYTE PTR [edx-4]
  00220	88 48 01	 mov	 BYTE PTR [eax+1], cl
  00223	0f b6 4a fb	 movzx	 ecx, BYTE PTR [edx-5]
  00227	88 48 02	 mov	 BYTE PTR [eax+2], cl
  0022a	83 c0 03	 add	 eax, 3
  0022d	4e		 dec	 esi
  0022e	75 e3		 jne	 SHORT $LL17@SaveScreen

; 249  : 			}
; 250  : 			break;

  00230	e9 b7 00 00 00	 jmp	 $LN7@SaveScreen
$LN14@SaveScreen:

; 251  : 		case D3DFMT_R5G6B5 :
; 252  : 			{
; 253  : 				for(UINT x = 0; x < uWidth; ++x) {

  00235	85 ff		 test	 edi, edi
  00237	0f 84 af 00 00
	00		 je	 $LN7@SaveScreen
  0023d	8d 49 00	 npad	 3
$LL13@SaveScreen:

; 254  : 					UINT uColor		= *((UINT *) pRow);

  00240	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 255  : 					BYTE byBlue		= (uColor >> 11) & 0x1F;
; 256  : 					BYTE byGreen	= (uColor >> 5) & 0x3F;
; 257  : 					BYTE byRed		= uColor & 0x1F;
; 258  : 
; 259  : 					*pbyDestination++ = (byBlue << 3)	| (byBlue >> 2);		// Blue
; 260  : 					*pbyDestination++ = (byGreen << 2)	| (byGreen >> 2);		// Green
; 261  : 					*pbyDestination++ = (byRed << 3)	| (byRed >> 2);			// Red
; 262  : 					pRow += 2;

  00242	8d 76 02	 lea	 esi, DWORD PTR [esi+2]
  00245	8b d1		 mov	 edx, ecx
  00247	8b d9		 mov	 ebx, ecx
  00249	80 e1 1f	 and	 cl, 31			; 0000001fH
  0024c	c1 ea 0b	 shr	 edx, 11			; 0000000bH
  0024f	89 8d 50 ff ff
	ff		 mov	 DWORD PTR _uColor$1$[ebp], ecx
  00255	80 e2 1f	 and	 dl, 31			; 0000001fH
  00258	8a ca		 mov	 cl, dl
  0025a	c1 eb 05	 shr	 ebx, 5
  0025d	c0 e9 02	 shr	 cl, 2
  00260	80 e3 3f	 and	 bl, 63			; 0000003fH
  00263	c0 e2 03	 shl	 dl, 3
  00266	0a ca		 or	 cl, dl
  00268	8b 95 50 ff ff
	ff		 mov	 edx, DWORD PTR _uColor$1$[ebp]
  0026e	88 08		 mov	 BYTE PTR [eax], cl
  00270	8a cb		 mov	 cl, bl
  00272	c0 e9 02	 shr	 cl, 2
  00275	c0 e3 02	 shl	 bl, 2
  00278	0a cb		 or	 cl, bl
  0027a	88 48 01	 mov	 BYTE PTR [eax+1], cl
  0027d	8a ca		 mov	 cl, dl
  0027f	c0 e9 02	 shr	 cl, 2
  00282	c0 e2 03	 shl	 dl, 3
  00285	0a ca		 or	 cl, dl
  00287	88 48 02	 mov	 BYTE PTR [eax+2], cl
  0028a	83 c0 03	 add	 eax, 3
  0028d	4f		 dec	 edi
  0028e	75 b0		 jne	 SHORT $LL13@SaveScreen

; 263  : 				}
; 264  : 			}
; 265  : 			break;

  00290	eb 54		 jmp	 SHORT $LN65@SaveScreen
$LN10@SaveScreen:

; 266  : 		case D3DFMT_X1R5G5B5 :
; 267  : 		case D3DFMT_A1R5G5B5 :
; 268  : 			{
; 269  : 				for(UINT x = 0; x < uWidth; ++x) {

  00292	85 ff		 test	 edi, edi
  00294	74 56		 je	 SHORT $LN7@SaveScreen
$LL9@SaveScreen:

; 270  : 					UINT uColor		= *((UINT *) pRow);

  00296	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 271  : 					BYTE byBlue		= (uColor >> 10) & 0x1F;
; 272  : 					BYTE byGreen	= (uColor >> 5) & 0x1F;
; 273  : 					BYTE byRed		= uColor & 0x1F;
; 274  : 
; 275  : 					*pbyDestination++ = (byBlue << 3)	| (byBlue >> 2);		// Blue
; 276  : 					*pbyDestination++ = (byGreen << 3)	| (byGreen >> 2);		// Green
; 277  : 					*pbyDestination++ = (byRed << 3)	| (byRed >> 2);			// Red
; 278  : 					pRow += 2;

  00298	8d 76 02	 lea	 esi, DWORD PTR [esi+2]
  0029b	8b d1		 mov	 edx, ecx
  0029d	8b d9		 mov	 ebx, ecx
  0029f	80 e1 1f	 and	 cl, 31			; 0000001fH
  002a2	c1 ea 0a	 shr	 edx, 10			; 0000000aH
  002a5	89 8d 50 ff ff
	ff		 mov	 DWORD PTR _uColor$1$[ebp], ecx
  002ab	80 e2 1f	 and	 dl, 31			; 0000001fH
  002ae	8a ca		 mov	 cl, dl
  002b0	c1 eb 05	 shr	 ebx, 5
  002b3	c0 e9 02	 shr	 cl, 2
  002b6	80 e3 1f	 and	 bl, 31			; 0000001fH
  002b9	c0 e2 03	 shl	 dl, 3
  002bc	0a ca		 or	 cl, dl
  002be	8b 95 50 ff ff
	ff		 mov	 edx, DWORD PTR _uColor$1$[ebp]
  002c4	88 08		 mov	 BYTE PTR [eax], cl
  002c6	8a cb		 mov	 cl, bl
  002c8	c0 e9 02	 shr	 cl, 2
  002cb	c0 e3 03	 shl	 bl, 3
  002ce	0a cb		 or	 cl, bl
  002d0	88 48 01	 mov	 BYTE PTR [eax+1], cl
  002d3	8a ca		 mov	 cl, dl
  002d5	c0 e9 02	 shr	 cl, 2
  002d8	c0 e2 03	 shl	 dl, 3
  002db	0a ca		 or	 cl, dl
  002dd	88 48 02	 mov	 BYTE PTR [eax+2], cl
  002e0	83 c0 03	 add	 eax, 3
  002e3	4f		 dec	 edi
  002e4	75 b0		 jne	 SHORT $LL9@SaveScreen
$LN65@SaveScreen:
  002e6	8b bd 40 ff ff
	ff		 mov	 edi, DWORD PTR _uWidth$1$[ebp]
$LN7@SaveScreen:

; 279  : 				}
; 280  : 			}
; 281  : 			break;
; 282  : 		}
; 283  : 
; 284  : 		// increase by one line
; 285  : 		pbySource += lockRect.Pitch;

  002ec	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _pbySource$1$[ebp]
  002f2	03 8d 34 ff ff
	ff		 add	 ecx, DWORD PTR _lockRect$[ebp]
  002f8	ff 8d 44 ff ff
	ff		 dec	 DWORD PTR tv759[ebp]
  002fe	89 8d 58 ff ff
	ff		 mov	 DWORD PTR _pbySource$1$[ebp], ecx
  00304	0f 85 a6 fe ff
	ff		 jne	 $LL27@SaveScreen
  0030a	8b b5 4c ff ff
	ff		 mov	 esi, DWORD PTR _uHeight$1$[ebp]
  00310	8b 9d 54 ff ff
	ff		 mov	 ebx, DWORD PTR _c_pszFileName$GSCopy$1$[ebp]
$LN25@SaveScreen:

; 286  : 	}
; 287  : 
; 288  : 	if(lpSurface) {

  00316	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _lpSurface$[ebp]
  0031c	85 c9		 test	 ecx, ecx
  0031e	74 1c		 je	 SHORT $LN6@SaveScreen

; 289  : 		lpSurface->UnlockRect();

  00320	8b 01		 mov	 eax, DWORD PTR [ecx]
  00322	51		 push	 ecx
  00323	ff 50 28	 call	 DWORD PTR [eax+40]

; 290  : 		lpSurface->Release();

  00326	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _lpSurface$[ebp]
  0032c	50		 push	 eax
  0032d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0032f	ff 51 08	 call	 DWORD PTR [ecx+8]

; 291  : 		lpSurface = NULL;

  00332	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _lpSurface$[ebp], 0
$LN6@SaveScreen:

; 292  : 	}
; 293  : 
; 294  : 	bool bSaved = SaveJPEG(c_pszFileName, pbyBuffer, uWidth, uHeight);

  0033c	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _this$1$[ebp]
  00342	56		 push	 esi
  00343	57		 push	 edi
  00344	ff b5 3c ff ff
	ff		 push	 DWORD PTR _pbyBuffer$1$[ebp]
  0034a	53		 push	 ebx
  0034b	e8 00 00 00 00	 call	 ?SaveJPEG@CPythonGraphic@@QAE_NPBDPAEII@Z ; CPythonGraphic::SaveJPEG

; 295  : 
; 296  : 	if(pbyBuffer) {
; 297  : 		delete [] pbyBuffer;

  00350	ff b5 3c ff ff
	ff		 push	 DWORD PTR _pbyBuffer$1$[ebp]
  00356	8a d8		 mov	 bl, al
  00358	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0035d	83 c4 04	 add	 esp, 4

; 298  : 		pbyBuffer = NULL;
; 299  : 	}
; 300  : 
; 301  : 	if(bSaved == false) {

  00360	84 db		 test	 bl, bl
  00362	75 2a		 jne	 SHORT $LN4@SaveScreen

; 302  : 		TraceError("Failed to save JPEG file. (%s, %d, %d)", c_pszFileName, uWidth, uHeight);

  00364	56		 push	 esi
  00365	57		 push	 edi
  00366	ff b5 54 ff ff
	ff		 push	 DWORD PTR _c_pszFileName$GSCopy$1$[ebp]
  0036c	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@IOAMCLFA@Failed?5to?5save?5JPEG?5file?4?5?$CI?$CFs?0?5?$CF@
  00371	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00376	83 c4 10	 add	 esp, 16			; 00000010H

; 303  : 		return false;

  00379	32 c0		 xor	 al, al
  0037b	5f		 pop	 edi
  0037c	5e		 pop	 esi
  0037d	5b		 pop	 ebx

; 382  : 		}
; 383  : 	}
; 384  : 	return true;
; 385  : }

  0037e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00381	33 cd		 xor	 ecx, ebp
  00383	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00388	8b e5		 mov	 esp, ebp
  0038a	5d		 pop	 ebp
  0038b	c2 04 00	 ret	 4
$LN4@SaveScreen:

; 304  : 	}
; 305  : 
; 306  : 	if (g_isScreenShotKey)

  0038e	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?g_isScreenShotKey@@3_NA, 0 ; g_isScreenShotKey
  00395	0f 84 69 01 00
	00		 je	 $LN2@SaveScreen

; 307  : 	{
; 308  : 		FILE* srcFilePtr = fopen(c_pszFileName, "rb");

  0039b	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb?$AA@
  003a0	ff b5 54 ff ff
	ff		 push	 DWORD PTR _c_pszFileName$GSCopy$1$[ebp]
  003a6	e8 00 00 00 00	 call	 _fopen
  003ab	8b f8		 mov	 edi, eax
  003ad	83 c4 08	 add	 esp, 8

; 309  : 		if (srcFilePtr)

  003b0	85 ff		 test	 edi, edi
  003b2	0f 84 4c 01 00
	00		 je	 $LN2@SaveScreen

; 310  : 		{
; 311  : 			fseek(srcFilePtr, 0, SEEK_END);		

  003b8	6a 02		 push	 2
  003ba	6a 00		 push	 0
  003bc	57		 push	 edi
  003bd	e8 00 00 00 00	 call	 _fseek

; 312  : 			size_t fileSize = ftell(srcFilePtr);

  003c2	57		 push	 edi
  003c3	e8 00 00 00 00	 call	 _ftell

; 313  : 			fseek(srcFilePtr, 0, SEEK_SET);

  003c8	6a 00		 push	 0
  003ca	6a 00		 push	 0
  003cc	57		 push	 edi
  003cd	8b f0		 mov	 esi, eax
  003cf	e8 00 00 00 00	 call	 _fseek

; 314  : 
; 315  : 			char head[21];
; 316  : 			size_t tailSize = fileSize - sizeof(head);

  003d4	83 c6 eb	 add	 esi, -21		; ffffffebH

; 317  : 			char* tail = (char*)malloc(tailSize);

  003d7	56		 push	 esi
  003d8	89 b5 4c ff ff
	ff		 mov	 DWORD PTR _tailSize$1$[ebp], esi
  003de	e8 00 00 00 00	 call	 _malloc

; 318  : 			
; 319  : 			fread(head, sizeof(head), 1, srcFilePtr);

  003e3	57		 push	 edi
  003e4	6a 01		 push	 1
  003e6	8b d8		 mov	 ebx, eax
  003e8	8d 45 c0	 lea	 eax, DWORD PTR _head$2[ebp]
  003eb	6a 15		 push	 21			; 00000015H
  003ed	50		 push	 eax
  003ee	e8 00 00 00 00	 call	 _fread

; 320  : 			fread(tail, tailSize, 1, srcFilePtr);

  003f3	57		 push	 edi
  003f4	6a 01		 push	 1
  003f6	56		 push	 esi
  003f7	53		 push	 ebx
  003f8	e8 00 00 00 00	 call	 _fread
  003fd	83 c4 40	 add	 esp, 64			; 00000040H

; 321  : 			fclose(srcFilePtr);

  00400	57		 push	 edi
  00401	e8 00 00 00 00	 call	 _fclose
  00406	83 c4 04	 add	 esp, 4

; 322  : 
; 323  : 			char imgDesc[64];
; 324  : 			GenScreenShotTag(c_pszFileName, GetCRC32(tail, tailSize), imgDesc, sizeof(imgDesc));

  00409	8d 45 80	 lea	 eax, DWORD PTR _imgDesc$1[ebp]
  0040c	6a 40		 push	 64			; 00000040H
  0040e	50		 push	 eax
  0040f	56		 push	 esi
  00410	53		 push	 ebx
  00411	e8 00 00 00 00	 call	 ?GetCRC32@@YAKPBDI@Z	; GetCRC32
  00416	8b b5 54 ff ff
	ff		 mov	 esi, DWORD PTR _c_pszFileName$GSCopy$1$[ebp]
  0041c	83 c4 08	 add	 esp, 8
  0041f	50		 push	 eax
  00420	56		 push	 esi
  00421	e8 00 00 00 00	 call	 ?GenScreenShotTag@@YAXPBDKPADI@Z ; GenScreenShotTag

; 325  : 
; 326  : 			int imgDescLen = strlen(imgDesc) + 1;

  00426	8d 4d 80	 lea	 ecx, DWORD PTR _imgDesc$1[ebp]
  00429	83 c4 10	 add	 esp, 16			; 00000010H
  0042c	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0042f	90		 npad	 1
$LL62@SaveScreen:
  00430	8a 01		 mov	 al, BYTE PTR [ecx]
  00432	41		 inc	 ecx
  00433	84 c0		 test	 al, al
  00435	75 f9		 jne	 SHORT $LL62@SaveScreen
  00437	2b ca		 sub	 ecx, edx

; 327  : 			
; 328  : 			unsigned char exifHeader[] = {
; 329  : 				0xe1,
; 330  : 				0, // blockLen[1],
; 331  : 				0, // blockLen[0],
; 332  : 				0x45,
; 333  : 				0x78,
; 334  : 				0x69,
; 335  : 				0x66,
; 336  : 				0x0,
; 337  : 				0x0,
; 338  : 				0x49,
; 339  : 				0x49,
; 340  : 				0x2a,
; 341  : 				0x0,
; 342  : 				0x8,
; 343  : 				0x0,
; 344  : 				0x0,
; 345  : 				0x0,
; 346  : 				0x1,
; 347  : 				0x0,
; 348  : 				0xe,
; 349  : 				0x1,
; 350  : 				0x2,
; 351  : 				0x0,
; 352  : 				imgDescLen, // textLen[0],
; 353  : 				0, // textLen[1],
; 354  : 				0, // textLen[2],
; 355  : 				0, // textLen[3],
; 356  : 				0x1a,
; 357  : 				0x0,
; 358  : 				0x0,
; 359  : 				0x0,
; 360  : 				0x0,
; 361  : 				0x0,
; 362  : 				0x0,
; 363  : 				0x0,
; 364  : 			};

  00439	66 c7 45 d8 e1
	00		 mov	 WORD PTR _exifHeader$3[ebp], 225 ; 000000e1H

; 365  : 
; 366  : 			exifHeader[2] = sizeof(exifHeader) + imgDescLen;
; 367  : 
; 368  : 			FILE* dstFilePtr = fopen(c_pszFileName, "wb");

  0043f	68 00 00 00 00	 push	 OFFSET ??_C@_02GMLFBBN@wb?$AA@
  00444	56		 push	 esi
  00445	c7 45 db 45 78
	69 66		 mov	 DWORD PTR _exifHeader$3[ebp+3], 1718188101 ; 66697845H
  0044c	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0044f	c7 45 df 00 00
	49 49		 mov	 DWORD PTR _exifHeader$3[ebp+7], 1229520896 ; 49490000H
  00456	89 85 48 ff ff
	ff		 mov	 DWORD PTR _imgDescLen$1$[ebp], eax
  0045c	88 45 ef	 mov	 BYTE PTR _exifHeader$3[ebp+23], al
  0045f	04 23		 add	 al, 35			; 00000023H
  00461	c7 45 e3 2a 00
	08 00		 mov	 DWORD PTR _exifHeader$3[ebp+11], 524330 ; 0008002aH
  00468	c7 45 e7 00 00
	01 00		 mov	 DWORD PTR _exifHeader$3[ebp+15], 65536 ; 00010000H
  0046f	c7 45 eb 0e 01
	02 00		 mov	 DWORD PTR _exifHeader$3[ebp+19], 131342 ; 0002010eH
  00476	c7 45 f0 00 00
	00 1a		 mov	 DWORD PTR _exifHeader$3[ebp+24], 436207616 ; 1a000000H
  0047d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _exifHeader$3[ebp+28], 0
  00484	66 c7 45 f8 00
	00		 mov	 WORD PTR _exifHeader$3[ebp+32], 0
  0048a	c6 45 fa 00	 mov	 BYTE PTR _exifHeader$3[ebp+34], 0
  0048e	88 45 da	 mov	 BYTE PTR _exifHeader$3[ebp+2], al
  00491	e8 00 00 00 00	 call	 _fopen
  00496	8b f0		 mov	 esi, eax
  00498	83 c4 08	 add	 esp, 8

; 369  : 			//FILE* dstFilePtr = fopen("temp.jpg", "wb");
; 370  : 			if (dstFilePtr)

  0049b	85 f6		 test	 esi, esi
  0049d	74 5c		 je	 SHORT $LN1@SaveScreen

; 371  : 			{
; 372  : 				fwrite(head, sizeof(head), 1, dstFilePtr);

  0049f	56		 push	 esi
  004a0	6a 01		 push	 1
  004a2	8d 45 c0	 lea	 eax, DWORD PTR _head$2[ebp]
  004a5	6a 15		 push	 21			; 00000015H
  004a7	50		 push	 eax
  004a8	e8 00 00 00 00	 call	 _fwrite

; 373  : 				fwrite(exifHeader, sizeof(exifHeader), 1, dstFilePtr);

  004ad	56		 push	 esi
  004ae	6a 01		 push	 1
  004b0	8d 45 d8	 lea	 eax, DWORD PTR _exifHeader$3[ebp]
  004b3	6a 23		 push	 35			; 00000023H
  004b5	50		 push	 eax
  004b6	e8 00 00 00 00	 call	 _fwrite

; 374  : 				fwrite(imgDesc, imgDescLen, 1, dstFilePtr);

  004bb	56		 push	 esi
  004bc	6a 01		 push	 1
  004be	ff b5 48 ff ff
	ff		 push	 DWORD PTR _imgDescLen$1$[ebp]
  004c4	8d 45 80	 lea	 eax, DWORD PTR _imgDesc$1[ebp]
  004c7	50		 push	 eax
  004c8	e8 00 00 00 00	 call	 _fwrite

; 375  : 				fputc(0x00, dstFilePtr);

  004cd	56		 push	 esi
  004ce	6a 00		 push	 0
  004d0	e8 00 00 00 00	 call	 _fputc

; 376  : 				fputc(0xff, dstFilePtr);

  004d5	56		 push	 esi
  004d6	68 ff 00 00 00	 push	 255			; 000000ffH
  004db	e8 00 00 00 00	 call	 _fputc
  004e0	83 c4 40	 add	 esp, 64			; 00000040H

; 377  : 				fwrite(tail, tailSize, 1, dstFilePtr);

  004e3	56		 push	 esi
  004e4	6a 01		 push	 1
  004e6	ff b5 4c ff ff
	ff		 push	 DWORD PTR _tailSize$1$[ebp]
  004ec	53		 push	 ebx
  004ed	e8 00 00 00 00	 call	 _fwrite

; 378  : 				fclose(dstFilePtr);

  004f2	56		 push	 esi
  004f3	e8 00 00 00 00	 call	 _fclose
  004f8	83 c4 14	 add	 esp, 20			; 00000014H
$LN1@SaveScreen:

; 379  : 			}
; 380  : 
; 381  : 			free(tail);

  004fb	53		 push	 ebx
  004fc	e8 00 00 00 00	 call	 _free
  00501	83 c4 04	 add	 esp, 4
$LN2@SaveScreen:

; 382  : 		}
; 383  : 	}
; 384  : 	return true;
; 385  : }

  00504	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00507	b0 01		 mov	 al, 1
  00509	5f		 pop	 edi
  0050a	5e		 pop	 esi
  0050b	33 cd		 xor	 ecx, ebp
  0050d	5b		 pop	 ebx
  0050e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00513	8b e5		 mov	 esp, ebp
  00515	5d		 pop	 ebp
  00516	c2 04 00	 ret	 4
  00519	8d 49 00	 npad	 3
$LN68@SaveScreen:
  0051c	00 00 00 00	 DD	 $LN32@SaveScreen
  00520	00 00 00 00	 DD	 $LN34@SaveScreen
$LN61@SaveScreen:
  00524	00		 DB	 0
  00525	00		 DB	 0
  00526	01		 DB	 1
  00527	00		 DB	 0
  00528	00		 DB	 0
  00529	00		 DB	 0
  0052a	8b ff		 npad	 2
$LN69@SaveScreen:
  0052c	00 00 00 00	 DD	 $LN22@SaveScreen
  00530	00 00 00 00	 DD	 $LN18@SaveScreen
  00534	00 00 00 00	 DD	 $LN18@SaveScreen
  00538	00 00 00 00	 DD	 $LN14@SaveScreen
  0053c	00 00 00 00	 DD	 $LN10@SaveScreen
  00540	00 00 00 00	 DD	 $LN10@SaveScreen
?SaveScreenShot@CPythonGraphic@@QAE_NPBD@Z ENDP		; CPythonGraphic::SaveScreenShot
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
;	COMDAT ?SaveJPEG@CPythonGraphic@@QAE_NPBDPAEII@Z
_TEXT	SEGMENT
_pszFileName$ = 8					; size = 4
_pbyBuffer$ = 12					; size = 4
_uWidth$ = 16						; size = 4
_uHeight$ = 20						; size = 4
?SaveJPEG@CPythonGraphic@@QAE_NPBDPAEII@Z PROC		; CPythonGraphic::SaveJPEG, COMDAT
; _this$ = ecx

; 168  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 169  : 	return jpeg_save(pbyBuffer, uWidth, uHeight, 85, pszFileName) != 0;

  00003	ff 75 08	 push	 DWORD PTR _pszFileName$[ebp]
  00006	6a 55		 push	 85			; 00000055H
  00008	ff 75 14	 push	 DWORD PTR _uHeight$[ebp]
  0000b	ff 75 10	 push	 DWORD PTR _uWidth$[ebp]
  0000e	ff 75 0c	 push	 DWORD PTR _pbyBuffer$[ebp]
  00011	e8 00 00 00 00	 call	 ?jpeg_save@@YAHPAEHHHPBD@Z ; jpeg_save
  00016	83 c4 14	 add	 esp, 20			; 00000014H
  00019	f7 d8		 neg	 eax
  0001b	1b c0		 sbb	 eax, eax
  0001d	f7 d8		 neg	 eax

; 170  : }

  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
?SaveJPEG@CPythonGraphic@@QAE_NPBDPAEII@Z ENDP		; CPythonGraphic::SaveJPEG
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\vs\vc\include\vector
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\vs\vc\include\vector
; File a:\vs\vc\include\xmemory0
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
;	COMDAT ?RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z
_TEXT	SEGMENT
_fLastPercentage$1$ = -60				; size = 4
_vertices$ = -56					; size = 12
_dwR$1$ = -44						; size = 4
_dwR$1$ = -44						; size = 4
_vertex$ = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_fxCenter$ = 8						; size = 4
_fyCenter$ = 12						; size = 4
_fRadius$ = 16						; size = 4
_fTime$ = 20						; size = 4
?RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z PROC	; CPythonGraphic::RenderCoolTimeBox, COMDAT
; _this$ = ecx

; 492  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 493  : 	if (fTime >= 1.0f)

  0002b	f3 0f 10 5d 14	 movss	 xmm3, DWORD PTR _fTime$[ebp]
  00030	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3f800000
  00038	0f 2f dc	 comiss	 xmm3, xmm4
  0003b	0f 83 26 05 00
	00		 jae	 $LN112@RenderCool

; 494  : 		return;
; 495  : 
; 496  : 	fTime = max(0.0f, fTime);

  00041	0f 57 d2	 xorps	 xmm2, xmm2
  00044	0f 2f d3	 comiss	 xmm2, xmm3
  00047	76 03		 jbe	 SHORT $LN12@RenderCool
  00049	0f 28 da	 movaps	 xmm3, xmm2
$LN12@RenderCool:

; 497  : 
; 498  : 	static D3DXCOLOR color = D3DXCOLOR(0.0f, 0.0f, 0.0f, 0.5f);

  0004c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$S1@?3??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4IA
  00051	a8 01		 test	 al, 1
  00053	75 18		 jne	 SHORT $LN139@RenderCool
  00055	0f 28 0d 00 00
	00 00		 movaps	 xmm1, XMMWORD PTR __xmm@3f000000000000000000000000000000
  0005c	83 c8 01	 or	 eax, 1
  0005f	a3 00 00 00 00	 mov	 DWORD PTR ?$S1@?3??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4IA, eax
  00064	0f 11 0d 00 00
	00 00		 movups	 XMMWORD PTR ?color@?3??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A, xmm1
  0006b	eb 07		 jmp	 SHORT $LN18@RenderCool
$LN139@RenderCool:
  0006d	0f 10 0d 00 00
	00 00		 movups	 xmm1, XMMWORD PTR ?color@?3??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A
$LN18@RenderCool:

; 499  : 	static WORD s_wBoxIndicies[10] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
; 500  : 	static D3DXVECTOR2 s_v2BoxPos[8] =
; 501  : 	{
; 502  : 		D3DXVECTOR2( -1.0f, -1.0f ),
; 503  : 		D3DXVECTOR2( -1.0f,  0.0f ),
; 504  : 		D3DXVECTOR2( -1.0f, +1.0f ),
; 505  : 		D3DXVECTOR2(  0.0f, +1.0f ),
; 506  : 		D3DXVECTOR2( +1.0f, +1.0f ),
; 507  : 		D3DXVECTOR2( +1.0f,  0.0f ),
; 508  : 		D3DXVECTOR2( +1.0f, -1.0f ),
; 509  : 		D3DXVECTOR2(  0.0f, -1.0f ),
; 510  : 	};

  00074	a8 02		 test	 al, 2
  00076	75 40		 jne	 SHORT $LN34@RenderCool
  00078	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00000000bf800000bf800000bf800000
  0007f	83 c8 02	 or	 eax, 2
  00082	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?s_v2BoxPos@?3??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A, xmm0
  00089	a3 00 00 00 00	 mov	 DWORD PTR ?$S1@?3??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4IA, eax
  0008e	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@3f800000000000003f800000bf800000
  00095	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?s_v2BoxPos@?3??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A+16, xmm0
  0009c	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@000000003f8000003f8000003f800000
  000a3	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?s_v2BoxPos@?3??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A+32, xmm0
  000aa	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@bf80000000000000bf8000003f800000
  000b1	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?s_v2BoxPos@?3??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A+48, xmm0
$LN34@RenderCool:

; 512  : 	int iTriCount = int(8 - 8.0f * fTime);

  000b8	f3 0f 10 2d 00
	00 00 00	 movss	 xmm5, DWORD PTR __real@41000000
  000c0	f3 0f 59 dd	 mulss	 xmm3, xmm5
; File a:\vs\vc\include\vector

; 482  : 		_Myfirst = pointer();

  000c4	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp], 0

; 483  : 		_Mylast = pointer();

  000cb	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+4], 0

; 484  : 		_Myend = pointer();

  000d2	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+8], 0
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 512  : 	int iTriCount = int(8 - 8.0f * fTime);

  000d9	f3 0f 5c eb	 subss	 xmm5, xmm3
  000dd	f3 0f 2c dd	 cvttss2si ebx, xmm5
  000e1	66 0f 6e c3	 movd	 xmm0, ebx

; 513  : 	float fLastPercentage = (8 - 8.0f * fTime) - iTriCount;

  000e5	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000e8	f3 0f 5c e8	 subss	 xmm5, xmm0
  000ec	f3 0f 11 6d c4	 movss	 DWORD PTR _fLastPercentage$1$[ebp], xmm5
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  000f1	0f 2f cc	 comiss	 xmm1, xmm4
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 515  : 	std::vector<TPDTVertex> vertices;

  000f4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 519  : 	vertex.position.z = 0.0f;

  000fb	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _vertex$[ebp+8], 0
  00102	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fxCenter$[ebp]
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00107	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@437f0000
  0010f	f3 0f 10 2d 00
	00 00 00	 movss	 xmm5, DWORD PTR __real@3f000000
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 517  : 	vertex.position.x = fxCenter;

  00117	f3 0f 11 45 d8	 movss	 DWORD PTR _vertex$[ebp], xmm0

; 518  : 	vertex.position.y = fyCenter;

  0011c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fyCenter$[ebp]
  00121	f3 0f 11 45 dc	 movss	 DWORD PTR _vertex$[ebp+4], xmm0
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00126	72 09		 jb	 SHORT $LN48@RenderCool
  00128	c7 45 d4 ff 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 255 ; 000000ffH
  0012f	eb 3c		 jmp	 SHORT $LN47@RenderCool
$LN48@RenderCool:
  00131	0f 2f d1	 comiss	 xmm2, xmm1
  00134	72 09		 jb	 SHORT $LN46@RenderCool
  00136	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 0
  0013d	eb 2e		 jmp	 SHORT $LN47@RenderCool
$LN46@RenderCool:
  0013f	f3 0f 59 cb	 mulss	 xmm1, xmm3
  00143	f3 0f 58 cd	 addss	 xmm1, xmm5
  00147	0f 28 c1	 movaps	 xmm0, xmm1
  0014a	e8 00 00 00 00	 call	 __ftoui3
  0014f	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3f800000
  00157	0f 57 d2	 xorps	 xmm2, xmm2
  0015a	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@437f0000
  00162	f3 0f 10 2d 00
	00 00 00	 movss	 xmm5, DWORD PTR __real@3f000000
  0016a	89 45 d4	 mov	 DWORD PTR _dwR$1$[ebp], eax
$LN47@RenderCool:

; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  0016d	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?color@?3??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A+4
  00175	0f 2f c4	 comiss	 xmm0, xmm4
  00178	72 07		 jb	 SHORT $LN52@RenderCool
  0017a	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  0017f	eb 20		 jmp	 SHORT $LN51@RenderCool
$LN52@RenderCool:
  00181	0f 2f d0	 comiss	 xmm2, xmm0
  00184	72 04		 jb	 SHORT $LN50@RenderCool
  00186	33 ff		 xor	 edi, edi
  00188	eb 17		 jmp	 SHORT $LN51@RenderCool
$LN50@RenderCool:
  0018a	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0018e	f3 0f 58 c5	 addss	 xmm0, xmm5
  00192	e8 00 00 00 00	 call	 __ftoui3
  00197	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3f800000
  0019f	8b f8		 mov	 edi, eax
$LN51@RenderCool:

; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  001a1	f3 0f 10 0d 08
	00 00 00	 movss	 xmm1, DWORD PTR ?color@?3??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A+8
  001a9	0f 57 c0	 xorps	 xmm0, xmm0
  001ac	0f 2f cc	 comiss	 xmm1, xmm4
  001af	72 07		 jb	 SHORT $LN56@RenderCool
  001b1	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  001b6	eb 2e		 jmp	 SHORT $LN55@RenderCool
$LN56@RenderCool:
  001b8	0f 2f c1	 comiss	 xmm0, xmm1
  001bb	72 04		 jb	 SHORT $LN54@RenderCool
  001bd	33 f6		 xor	 esi, esi
  001bf	eb 25		 jmp	 SHORT $LN55@RenderCool
$LN54@RenderCool:
  001c1	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@437f0000
  001c9	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f000000
  001d1	0f 28 c1	 movaps	 xmm0, xmm1
  001d4	e8 00 00 00 00	 call	 __ftoui3
  001d9	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3f800000
  001e1	8b f0		 mov	 esi, eax
  001e3	0f 57 c0	 xorps	 xmm0, xmm0
$LN55@RenderCool:

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  001e6	f3 0f 10 0d 0c
	00 00 00	 movss	 xmm1, DWORD PTR ?color@?3??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A+12
  001ee	0f 2f cc	 comiss	 xmm1, xmm4
  001f1	72 07		 jb	 SHORT $LN60@RenderCool
  001f3	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  001f8	eb 21		 jmp	 SHORT $LN59@RenderCool
$LN60@RenderCool:
  001fa	0f 2f c1	 comiss	 xmm0, xmm1
  001fd	72 04		 jb	 SHORT $LN58@RenderCool
  001ff	33 c0		 xor	 eax, eax
  00201	eb 18		 jmp	 SHORT $LN59@RenderCool
$LN58@RenderCool:
  00203	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@437f0000
  0020b	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f000000
  00213	0f 28 c1	 movaps	 xmm0, xmm1
  00216	e8 00 00 00 00	 call	 __ftoui3
$LN59@RenderCool:
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 520  : 	vertex.diffuse = color;

  0021b	c1 e0 08	 shl	 eax, 8

; 523  : 	vertices.push_back(vertex);

  0021e	8d 4d c8	 lea	 ecx, DWORD PTR _vertices$[ebp]
  00221	0b 45 d4	 or	 eax, DWORD PTR _dwR$1$[ebp]
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00224	c1 e0 08	 shl	 eax, 8
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 520  : 	vertex.diffuse = color;

  00227	0b c7		 or	 eax, edi

; 521  : 	vertex.texCoord.x = 0.0f;
; 522  : 	vertex.texCoord.x = 0.0f;

  00229	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _vertex$[ebp+16], 0
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00230	c1 e0 08	 shl	 eax, 8
  00233	0b c6		 or	 eax, esi
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 520  : 	vertex.diffuse = color;

  00235	89 45 e4	 mov	 DWORD PTR _vertex$[ebp+12], eax

; 523  : 	vertices.push_back(vertex);

  00238	8d 45 d8	 lea	 eax, DWORD PTR _vertex$[ebp]
  0023b	50		 push	 eax
  0023c	e8 00 00 00 00	 call	 ?push_back@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAEXABUSPDTVertex@@@Z ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::push_back

; 524  : 	vertex.position.x = fxCenter;

  00241	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fxCenter$[ebp]
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00246	0f 10 0d 00 00
	00 00		 movups	 xmm1, XMMWORD PTR ?color@?3??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 526  : 	vertex.position.z = 0.0f;

  0024d	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _vertex$[ebp+8], 0
  00254	f3 0f 11 45 d8	 movss	 DWORD PTR _vertex$[ebp], xmm0
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00259	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 525  : 	vertex.position.y = fyCenter - fRadius;

  00260	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fyCenter$[ebp]
  00265	f3 0f 5c 45 10	 subss	 xmm0, DWORD PTR _fRadius$[ebp]
  0026a	f3 0f 11 45 dc	 movss	 DWORD PTR _vertex$[ebp+4], xmm0
  0026f	0f 57 c0	 xorps	 xmm0, xmm0
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00272	72 09		 jb	 SHORT $LN66@RenderCool
  00274	c7 45 d4 ff 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 255 ; 000000ffH
  0027b	eb 2c		 jmp	 SHORT $LN65@RenderCool
$LN66@RenderCool:
  0027d	0f 2f c1	 comiss	 xmm0, xmm1
  00280	72 09		 jb	 SHORT $LN64@RenderCool
  00282	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 0
  00289	eb 1e		 jmp	 SHORT $LN65@RenderCool
$LN64@RenderCool:
  0028b	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@437f0000
  00293	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f000000
  0029b	0f 28 c1	 movaps	 xmm0, xmm1
  0029e	e8 00 00 00 00	 call	 __ftoui3
  002a3	89 45 d4	 mov	 DWORD PTR _dwR$1$[ebp], eax
  002a6	0f 57 c0	 xorps	 xmm0, xmm0
$LN65@RenderCool:

; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  002a9	f3 0f 10 0d 04
	00 00 00	 movss	 xmm1, DWORD PTR ?color@?3??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A+4
  002b1	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  002b8	72 07		 jb	 SHORT $LN70@RenderCool
  002ba	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  002bf	eb 23		 jmp	 SHORT $LN69@RenderCool
$LN70@RenderCool:
  002c1	0f 2f c1	 comiss	 xmm0, xmm1
  002c4	72 04		 jb	 SHORT $LN68@RenderCool
  002c6	33 ff		 xor	 edi, edi
  002c8	eb 1a		 jmp	 SHORT $LN69@RenderCool
$LN68@RenderCool:
  002ca	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@437f0000
  002d2	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f000000
  002da	0f 28 c1	 movaps	 xmm0, xmm1
  002dd	e8 00 00 00 00	 call	 __ftoui3
  002e2	8b f8		 mov	 edi, eax
$LN69@RenderCool:

; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  002e4	f3 0f 10 0d 08
	00 00 00	 movss	 xmm1, DWORD PTR ?color@?3??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A+8
  002ec	0f 57 c0	 xorps	 xmm0, xmm0
  002ef	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  002f6	72 07		 jb	 SHORT $LN74@RenderCool
  002f8	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  002fd	eb 26		 jmp	 SHORT $LN73@RenderCool
$LN74@RenderCool:
  002ff	0f 2f c1	 comiss	 xmm0, xmm1
  00302	72 04		 jb	 SHORT $LN72@RenderCool
  00304	33 f6		 xor	 esi, esi
  00306	eb 1d		 jmp	 SHORT $LN73@RenderCool
$LN72@RenderCool:
  00308	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@437f0000
  00310	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f000000
  00318	0f 28 c1	 movaps	 xmm0, xmm1
  0031b	e8 00 00 00 00	 call	 __ftoui3
  00320	8b f0		 mov	 esi, eax
  00322	0f 57 c0	 xorps	 xmm0, xmm0
$LN73@RenderCool:

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  00325	f3 0f 10 0d 0c
	00 00 00	 movss	 xmm1, DWORD PTR ?color@?3??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A+12
  0032d	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  00334	72 07		 jb	 SHORT $LN78@RenderCool
  00336	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  0033b	eb 21		 jmp	 SHORT $LN77@RenderCool
$LN78@RenderCool:
  0033d	0f 2f c1	 comiss	 xmm0, xmm1
  00340	72 04		 jb	 SHORT $LN76@RenderCool
  00342	33 c0		 xor	 eax, eax
  00344	eb 18		 jmp	 SHORT $LN77@RenderCool
$LN76@RenderCool:
  00346	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@437f0000
  0034e	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f000000
  00356	0f 28 c1	 movaps	 xmm0, xmm1
  00359	e8 00 00 00 00	 call	 __ftoui3
$LN77@RenderCool:
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 527  : 	vertex.diffuse = color;

  0035e	c1 e0 08	 shl	 eax, 8

; 530  : 	vertices.push_back(vertex);

  00361	8d 4d c8	 lea	 ecx, DWORD PTR _vertices$[ebp]
  00364	0b 45 d4	 or	 eax, DWORD PTR _dwR$1$[ebp]
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00367	c1 e0 08	 shl	 eax, 8
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 527  : 	vertex.diffuse = color;

  0036a	0b c7		 or	 eax, edi

; 528  : 	vertex.texCoord.x = 0.0f;
; 529  : 	vertex.texCoord.x = 0.0f;

  0036c	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _vertex$[ebp+16], 0
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00373	c1 e0 08	 shl	 eax, 8
  00376	0b c6		 or	 eax, esi
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 527  : 	vertex.diffuse = color;

  00378	89 45 e4	 mov	 DWORD PTR _vertex$[ebp+12], eax

; 530  : 	vertices.push_back(vertex);

  0037b	8d 45 d8	 lea	 eax, DWORD PTR _vertex$[ebp]
  0037e	50		 push	 eax
  0037f	e8 00 00 00 00	 call	 ?push_back@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAEXABUSPDTVertex@@@Z ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::push_back

; 531  : 
; 532  : 	for (int j = 0; j < iTriCount; ++j)

  00384	33 f6		 xor	 esi, esi
  00386	85 db		 test	 ebx, ebx
  00388	7e 47		 jle	 SHORT $LN4@RenderCool
  0038a	8d 9b 00 00 00
	00		 npad	 6
$LL6@RenderCool:

; 533  : 	{
; 534  : 		vertex.position.x = fxCenter + s_v2BoxPos[j].x * fRadius;

  00390	f3 0f 10 04 f5
	00 00 00 00	 movss	 xmm0, DWORD PTR ?s_v2BoxPos@?3??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A[esi*8]

; 535  : 		vertex.position.y = fyCenter + s_v2BoxPos[j].y * fRadius;
; 536  : 		vertices.push_back(vertex);

  00399	8d 45 d8	 lea	 eax, DWORD PTR _vertex$[ebp]
  0039c	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _fRadius$[ebp]
  003a1	8d 4d c8	 lea	 ecx, DWORD PTR _vertices$[ebp]
  003a4	50		 push	 eax
  003a5	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _fxCenter$[ebp]
  003aa	f3 0f 11 45 d8	 movss	 DWORD PTR _vertex$[ebp], xmm0
  003af	f3 0f 10 04 f5
	04 00 00 00	 movss	 xmm0, DWORD PTR ?s_v2BoxPos@?3??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A[esi*8+4]
  003b8	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _fRadius$[ebp]
  003bd	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR _fyCenter$[ebp]
  003c2	f3 0f 11 45 dc	 movss	 DWORD PTR _vertex$[ebp+4], xmm0
  003c7	e8 00 00 00 00	 call	 ?push_back@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAEXABUSPDTVertex@@@Z ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::push_back
  003cc	46		 inc	 esi
  003cd	3b f3		 cmp	 esi, ebx
  003cf	7c bf		 jl	 SHORT $LL6@RenderCool
$LN4@RenderCool:

; 537  : 	}
; 538  : 
; 539  : 	if (fLastPercentage > 0.0f)

  003d1	f3 0f 10 5d c4	 movss	 xmm3, DWORD PTR _fLastPercentage$1$[ebp]
  003d6	0f 2f 1d 00 00
	00 00		 comiss	 xmm3, DWORD PTR __real@00000000
  003dd	0f 86 86 00 00
	00		 jbe	 $LN3@RenderCool

; 540  : 	{
; 541  : 		D3DXVECTOR2 * pv2Pos;
; 542  : 		D3DXVECTOR2 * pv2LastPos;
; 543  : 
; 544  : 		assert((iTriCount-1+8)%8 >= 0 && (iTriCount-1+8)%8 < 8);
; 545  : 		assert((iTriCount+8)%8 >= 0 && (iTriCount+8)%8 < 8);
; 546  : 		pv2LastPos = &s_v2BoxPos[(iTriCount-1+8)%8];

  003e3	8d 4b 07	 lea	 ecx, DWORD PTR [ebx+7]
  003e6	81 e1 07 00 00
	80		 and	 ecx, -2147483641	; 80000007H
  003ec	79 05		 jns	 SHORT $LN141@RenderCool
  003ee	49		 dec	 ecx
  003ef	83 c9 f8	 or	 ecx, -8			; fffffff8H
  003f2	41		 inc	 ecx
$LN141@RenderCool:

; 547  : 		pv2Pos = &s_v2BoxPos[(iTriCount+8)%8];

  003f3	8d 43 08	 lea	 eax, DWORD PTR [ebx+8]
  003f6	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  003fb	79 05		 jns	 SHORT $LN142@RenderCool
  003fd	48		 dec	 eax
  003fe	83 c8 f8	 or	 eax, -8			; fffffff8H
  00401	40		 inc	 eax
$LN142@RenderCool:

; 548  : 
; 549  : 		vertex.position.x = fxCenter + ((pv2Pos->x-pv2LastPos->x) * fLastPercentage + pv2LastPos->x) * fRadius;

  00402	f3 0f 10 04 cd
	00 00 00 00	 movss	 xmm0, DWORD PTR ?s_v2BoxPos@?3??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A[ecx*8]
  0040b	f3 0f 10 0c c5
	00 00 00 00	 movss	 xmm1, DWORD PTR ?s_v2BoxPos@?3??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A[eax*8]
  00414	f3 0f 5c c8	 subss	 xmm1, xmm0
  00418	f3 0f 59 cb	 mulss	 xmm1, xmm3
  0041c	f3 0f 58 c8	 addss	 xmm1, xmm0

; 550  : 		vertex.position.y = fyCenter + ((pv2Pos->y-pv2LastPos->y) * fLastPercentage + pv2LastPos->y) * fRadius;

  00420	f3 0f 10 04 cd
	04 00 00 00	 movss	 xmm0, DWORD PTR ?s_v2BoxPos@?3??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A[ecx*8+4]

; 551  : 		vertices.push_back(vertex);

  00429	8d 4d c8	 lea	 ecx, DWORD PTR _vertices$[ebp]
  0042c	f3 0f 59 4d 10	 mulss	 xmm1, DWORD PTR _fRadius$[ebp]
  00431	f3 0f 58 4d 08	 addss	 xmm1, DWORD PTR _fxCenter$[ebp]
  00436	f3 0f 11 4d d8	 movss	 DWORD PTR _vertex$[ebp], xmm1
  0043b	f3 0f 10 0c c5
	04 00 00 00	 movss	 xmm1, DWORD PTR ?s_v2BoxPos@?3??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A[eax*8+4]
  00444	8d 45 d8	 lea	 eax, DWORD PTR _vertex$[ebp]
  00447	f3 0f 5c c8	 subss	 xmm1, xmm0
  0044b	50		 push	 eax
  0044c	f3 0f 59 cb	 mulss	 xmm1, xmm3
  00450	f3 0f 58 c8	 addss	 xmm1, xmm0
  00454	f3 0f 59 4d 10	 mulss	 xmm1, DWORD PTR _fRadius$[ebp]
  00459	f3 0f 58 4d 0c	 addss	 xmm1, DWORD PTR _fyCenter$[ebp]
  0045e	f3 0f 11 4d dc	 movss	 DWORD PTR _vertex$[ebp+4], xmm1
  00463	e8 00 00 00 00	 call	 ?push_back@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAEXABUSPDTVertex@@@Z ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::push_back

; 552  : 		++iTriCount;

  00468	43		 inc	 ebx
$LN3@RenderCool:
; File a:\vs\vc\include\vector

; 1158 : 		return (this->_Myfirst == this->_Mylast);

  00469	8b 75 c8	 mov	 esi, DWORD PTR _vertices$[ebp]
  0046c	8b 4d cc	 mov	 ecx, DWORD PTR _vertices$[ebp+4]
  0046f	3b f1		 cmp	 esi, ecx
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 555  : 	if (vertices.empty())

  00471	0f 84 e3 00 00
	00		 je	 $LN1@RenderCool
; File a:\vs\vc\include\vector

; 1148 : 		return (this->_Mylast - this->_Myfirst);

  00477	2b ce		 sub	 ecx, esi
  00479	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0047e	f7 e9		 imul	 ecx
  00480	c1 fa 02	 sar	 edx, 2
  00483	8b c2		 mov	 eax, edx
  00485	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00488	03 c2		 add	 eax, edx
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 558  : 	if (SetPDTStream(&vertices[0], vertices.size()))

  0048a	50		 push	 eax
  0048b	56		 push	 esi
  0048c	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z ; CGraphicBase::SetPDTStream
  00491	83 c4 08	 add	 esp, 8
  00494	84 c0		 test	 al, al
  00496	0f 84 be 00 00
	00		 je	 $LN1@RenderCool

; 559  : 	{
; 560  : 		STATEMANAGER.SaveTextureStageState(0, D3DTSS_COLORARG1,	D3DTA_DIFFUSE);

  0049c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  004a2	6a 00		 push	 0
  004a4	6a 02		 push	 2
  004a6	6a 00		 push	 0
  004a8	e8 00 00 00 00	 call	 ?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SaveTextureStageState

; 561  : 		STATEMANAGER.SaveTextureStageState(0, D3DTSS_COLOROP,	D3DTOP_SELECTARG1);

  004ad	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  004b3	6a 02		 push	 2
  004b5	6a 01		 push	 1
  004b7	6a 00		 push	 0
  004b9	e8 00 00 00 00	 call	 ?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SaveTextureStageState

; 562  : 		STATEMANAGER.SaveTextureStageState(0, D3DTSS_ALPHAARG1,	D3DTA_DIFFUSE);

  004be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  004c4	6a 00		 push	 0
  004c6	6a 05		 push	 5
  004c8	6a 00		 push	 0
  004ca	e8 00 00 00 00	 call	 ?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SaveTextureStageState

; 563  : 		STATEMANAGER.SaveTextureStageState(0, D3DTSS_ALPHAOP,	D3DTOP_SELECTARG1);

  004cf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  004d5	6a 02		 push	 2
  004d7	6a 04		 push	 4
  004d9	6a 00		 push	 0
  004db	e8 00 00 00 00	 call	 ?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SaveTextureStageState

; 564  : 		STATEMANAGER.SetTexture(0, NULL);

  004e0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  004e6	6a 00		 push	 0
  004e8	6a 00		 push	 0
  004ea	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 565  : 		STATEMANAGER.SetTexture(1, NULL);

  004ef	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  004f5	6a 00		 push	 0
  004f7	6a 01		 push	 1
  004f9	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 566  : 		STATEMANAGER.SetVertexShader(D3DFVF_XYZ|D3DFVF_DIFFUSE|D3DFVF_TEX1);

  004fe	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00504	68 42 01 00 00	 push	 322			; 00000142H
  00509	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 567  : 		STATEMANAGER.DrawPrimitive(D3DPT_TRIANGLEFAN, 0, iTriCount);

  0050e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00514	53		 push	 ebx
  00515	6a 00		 push	 0
  00517	6a 06		 push	 6
  00519	e8 00 00 00 00	 call	 ?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z ; CStateManager::DrawPrimitive

; 568  : 		STATEMANAGER.RestoreTextureStageState(0, D3DTSS_COLORARG1);

  0051e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00524	6a 02		 push	 2
  00526	6a 00		 push	 0
  00528	e8 00 00 00 00	 call	 ?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z ; CStateManager::RestoreTextureStageState

; 569  : 		STATEMANAGER.RestoreTextureStageState(0, D3DTSS_COLOROP);

  0052d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00533	6a 01		 push	 1
  00535	6a 00		 push	 0
  00537	e8 00 00 00 00	 call	 ?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z ; CStateManager::RestoreTextureStageState

; 570  : 		STATEMANAGER.RestoreTextureStageState(0, D3DTSS_ALPHAARG1);

  0053c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00542	6a 05		 push	 5
  00544	6a 00		 push	 0
  00546	e8 00 00 00 00	 call	 ?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z ; CStateManager::RestoreTextureStageState

; 571  : 		STATEMANAGER.RestoreTextureStageState(0, D3DTSS_ALPHAOP);

  0054b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00551	6a 04		 push	 4
  00553	6a 00		 push	 0
  00555	e8 00 00 00 00	 call	 ?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z ; CStateManager::RestoreTextureStageState
$LN1@RenderCool:
; File a:\vs\vc\include\vector

; 1623 : 		if (this->_Myfirst != pointer())

  0055a	85 f6		 test	 esi, esi
  0055c	74 09		 je	 SHORT $LN112@RenderCool
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  0055e	56		 push	 esi
  0055f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00564	83 c4 04	 add	 esp, 4
$LN112@RenderCool:
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 573  : }

  00567	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0056a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00571	59		 pop	 ecx
  00572	5f		 pop	 edi
  00573	5e		 pop	 esi
  00574	5b		 pop	 ebx
  00575	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00578	33 cd		 xor	 ecx, ebp
  0057a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0057f	8b e5		 mov	 esp, ebp
  00581	5d		 pop	 ebp
  00582	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z$2:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR _vertices$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAE@XZ ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::~vector<SPDTVertex,std::allocator<SPDTVertex> >
__ehhandler$?RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a c0	 mov	 ecx, DWORD PTR [edx-64]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z ENDP	; CPythonGraphic::RenderCoolTimeBox
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
;	COMDAT ?RenderAlphaImage@CPythonGraphic@@QAEXPAVCGraphicImageInstance@@MMMM@Z
_TEXT	SEGMENT
$T1 = -136						; size = 12
$T2 = -132						; size = 8
$T3 = -124						; size = 8
$T4 = -116						; size = 4
$T5 = -112						; size = 12
$T6 = -112						; size = 12
$T7 = -112						; size = 12
$T8 = -108						; size = 8
$T9 = -108						; size = 8
$T10 = -108						; size = 8
$T11 = -108						; size = 8
_vertices$ = -100					; size = 96
__$ArrayPad$ = -4					; size = 4
_pImageInstance$ = 8					; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_aLeft$ = 20						; size = 4
_aRight$ = 24						; size = 4
?RenderAlphaImage@CPythonGraphic@@QAEXPAVCGraphicImageInstance@@MMMM@Z PROC ; CPythonGraphic::RenderAlphaImage, COMDAT
; _this$ = ecx

; 443  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _pImageInstance$[ebp]

; 444  : 	assert(pImageInstance != NULL);
; 445  : 
; 446  : 	D3DXCOLOR DiffuseColor1 = D3DXCOLOR(1.0f, 1.0f, 1.0f, aLeft);
; 447  : 	D3DXCOLOR DiffuseColor2 = D3DXCOLOR(1.0f, 1.0f, 1.0f, aRight);
; 448  : 
; 449  : 	const CGraphicTexture * c_pTexture = pImageInstance->GetTexturePointer();

  00017	8b ce		 mov	 ecx, esi
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ?GetTexturePointer@CGraphicImageInstance@@QAEPAVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTexturePointer

; 450  : 
; 451  : 	float width = (float) pImageInstance->GetWidth();

  0001f	8b ce		 mov	 ecx, esi
  00021	8b f8		 mov	 edi, eax
  00023	e8 00 00 00 00	 call	 ?GetWidth@CGraphicImageInstance@@QAEHXZ ; CGraphicImageInstance::GetWidth

; 452  : 	float height = (float) pImageInstance->GetHeight();

  00028	8b ce		 mov	 ecx, esi
  0002a	66 0f 6e c0	 movd	 xmm0, eax
  0002e	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00031	66 0f d6 45 84	 movq	 QWORD PTR $T3[ebp], xmm0
  00036	e8 00 00 00 00	 call	 ?GetHeight@CGraphicImageInstance@@QAEHXZ ; CGraphicImageInstance::GetHeight

; 453  : 
; 454  : 	c_pTexture->SetTextureStage(0);

  0003b	6a 00		 push	 0
  0003d	8b cf		 mov	 ecx, edi
  0003f	66 0f 6e c0	 movd	 xmm0, eax
  00043	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00046	f3 0f 11 45 8c	 movss	 DWORD PTR $T4[ebp], xmm0
  0004b	e8 00 00 00 00	 call	 ?SetTextureStage@CGraphicTexture@@QBEXH@Z ; CGraphicTexture::SetTextureStage

; 455  : 
; 456  : 	float sx = x;
; 457  : 	float sy = y;
; 458  : 	float ex = x + width;

  00050	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _x$[ebp]
  00055	f3 0f 7e 45 84	 movq	 xmm0, QWORD PTR $T3[ebp]

; 459  : 	float ey = y + height;

  0005a	f3 0f 10 55 10	 movss	 xmm2, DWORD PTR _y$[ebp]
  0005f	f3 0f 58 c1	 addss	 xmm0, xmm1
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  00063	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f000000

; 182  :     z = fz;

  0006b	c7 45 98 00 00
	00 00		 mov	 DWORD PTR $T7[ebp+8], 0
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 468  : 	vertices[0].position = TPosition(sx, sy, z);

  00072	8b 45 98	 mov	 eax, DWORD PTR $T7[ebp+8]
  00075	5f		 pop	 edi
  00076	66 0f d6 45 84	 movq	 QWORD PTR $T3[ebp], xmm0
  0007b	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR $T4[ebp]
  00080	f3 0f 58 c2	 addss	 xmm0, xmm2
  00084	66 0f d6 8d 7c
	ff ff ff	 movq	 QWORD PTR $T2[ebp], xmm1
  0008c	89 45 a4	 mov	 DWORD PTR _vertices$[ebp+8], eax
  0008f	5e		 pop	 esi
  00090	f3 0f 11 45 8c	 movss	 DWORD PTR $T4[ebp], xmm0
  00095	0f 28 c1	 movaps	 xmm0, xmm1
  00098	0f 14 c2	 unpcklps xmm0, xmm2
  0009b	0f 57 c9	 xorps	 xmm1, xmm1
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  0009e	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@437f0000
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 468  : 	vertices[0].position = TPosition(sx, sy, z);

  000a6	66 0f d6 45 9c	 movq	 QWORD PTR _vertices$[ebp], xmm0
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  000ab	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _aLeft$[ebp]
  000b0	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  000b7	72 07		 jb	 SHORT $LN30@RenderAlph
  000b9	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  000be	eb 29		 jmp	 SHORT $LN29@RenderAlph
$LN30@RenderAlph:
  000c0	0f 2f c8	 comiss	 xmm1, xmm0
  000c3	72 04		 jb	 SHORT $LN28@RenderAlph
  000c5	33 c0		 xor	 eax, eax
  000c7	eb 20		 jmp	 SHORT $LN29@RenderAlph
$LN28@RenderAlph:
  000c9	f3 0f 59 c2	 mulss	 xmm0, xmm2
  000cd	f3 0f 58 c3	 addss	 xmm0, xmm3
  000d1	e8 00 00 00 00	 call	 __ftoui3
  000d6	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@437f0000
  000de	0f 57 c9	 xorps	 xmm1, xmm1
  000e1	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f000000
$LN29@RenderAlph:
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 472  : 	vertices[1].position = TPosition(ex, sy, z);

  000e9	f3 0f 7e 45 84	 movq	 xmm0, QWORD PTR $T3[ebp]
  000ee	f3 0f 10 65 10	 movss	 xmm4, DWORD PTR _y$[ebp]
  000f3	c1 e0 18	 shl	 eax, 24			; 00000018H
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  000f6	0d ff ff ff 00	 or	 eax, 16777215		; 00ffffffH
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 472  : 	vertices[1].position = TPosition(ex, sy, z);

  000fb	0f 14 c4	 unpcklps xmm0, xmm4
  000fe	89 45 a8	 mov	 DWORD PTR _vertices$[ebp+12], eax
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 41   :     x = fx;

  00101	c7 45 94 00 00
	00 00		 mov	 DWORD PTR $T11[ebp], 0
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 470  : 	vertices[0].texCoord = TTextureCoordinate(su, sv);

  00108	8b 45 94	 mov	 eax, DWORD PTR $T11[ebp]
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 42   :     y = fy;

  0010b	c7 45 98 00 00
	00 00		 mov	 DWORD PTR $T11[ebp+4], 0
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 470  : 	vertices[0].texCoord = TTextureCoordinate(su, sv);

  00112	89 45 ac	 mov	 DWORD PTR _vertices$[ebp+16], eax
  00115	8b 45 98	 mov	 eax, DWORD PTR $T11[ebp+4]

; 472  : 	vertices[1].position = TPosition(ex, sy, z);

  00118	66 0f d6 45 b4	 movq	 QWORD PTR _vertices$[ebp+24], xmm0
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  0011d	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _aRight$[ebp]
  00122	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 470  : 	vertices[0].texCoord = TTextureCoordinate(su, sv);

  00129	89 45 b0	 mov	 DWORD PTR _vertices$[ebp+20], eax
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  0012c	c7 45 98 00 00
	00 00		 mov	 DWORD PTR $T6[ebp+8], 0
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 472  : 	vertices[1].position = TPosition(ex, sy, z);

  00133	8b 45 98	 mov	 eax, DWORD PTR $T6[ebp+8]
  00136	89 45 bc	 mov	 DWORD PTR _vertices$[ebp+32], eax
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  00139	72 07		 jb	 SHORT $LN52@RenderAlph
  0013b	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00140	eb 16		 jmp	 SHORT $LN51@RenderAlph
$LN52@RenderAlph:
  00142	0f 2f c8	 comiss	 xmm1, xmm0
  00145	72 04		 jb	 SHORT $LN50@RenderAlph
  00147	33 c0		 xor	 eax, eax
  00149	eb 0d		 jmp	 SHORT $LN51@RenderAlph
$LN50@RenderAlph:
  0014b	f3 0f 59 c2	 mulss	 xmm0, xmm2
  0014f	f3 0f 58 c3	 addss	 xmm0, xmm3
  00153	e8 00 00 00 00	 call	 __ftoui3
$LN51@RenderAlph:
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 476  : 	vertices[2].position = TPosition(sx, ey, z);

  00158	f3 0f 7e 85 7c
	ff ff ff	 movq	 xmm0, QWORD PTR $T2[ebp]
  00160	f3 0f 10 4d 8c	 movss	 xmm1, DWORD PTR $T4[ebp]
  00165	c1 e0 18	 shl	 eax, 24			; 00000018H
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00168	0d ff ff ff 00	 or	 eax, 16777215		; 00ffffffH
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 476  : 	vertices[2].position = TPosition(sx, ey, z);

  0016d	0f 14 c1	 unpcklps xmm0, xmm1
  00170	89 45 c0	 mov	 DWORD PTR _vertices$[ebp+36], eax
  00173	0f 57 c9	 xorps	 xmm1, xmm1
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 41   :     x = fx;

  00176	c7 45 94 00 00
	80 3f		 mov	 DWORD PTR $T10[ebp], 1065353216 ; 3f800000H
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 474  : 	vertices[1].texCoord = TTextureCoordinate(eu, sv);

  0017d	8b 45 94	 mov	 eax, DWORD PTR $T10[ebp]
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 42   :     y = fy;

  00180	c7 45 98 00 00
	00 00		 mov	 DWORD PTR $T10[ebp+4], 0
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 474  : 	vertices[1].texCoord = TTextureCoordinate(eu, sv);

  00187	89 45 c4	 mov	 DWORD PTR _vertices$[ebp+40], eax
  0018a	8b 45 98	 mov	 eax, DWORD PTR $T10[ebp+4]

; 476  : 	vertices[2].position = TPosition(sx, ey, z);

  0018d	66 0f d6 45 cc	 movq	 QWORD PTR _vertices$[ebp+48], xmm0
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  00192	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _aLeft$[ebp]
  00197	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 474  : 	vertices[1].texCoord = TTextureCoordinate(eu, sv);

  0019e	89 45 c8	 mov	 DWORD PTR _vertices$[ebp+44], eax
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  001a1	c7 45 98 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+8], 0
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 476  : 	vertices[2].position = TPosition(sx, ey, z);

  001a8	8b 45 98	 mov	 eax, DWORD PTR $T5[ebp+8]
  001ab	89 45 d4	 mov	 DWORD PTR _vertices$[ebp+56], eax
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  001ae	72 07		 jb	 SHORT $LN74@RenderAlph
  001b0	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  001b5	eb 21		 jmp	 SHORT $LN73@RenderAlph
$LN74@RenderAlph:
  001b7	0f 2f c8	 comiss	 xmm1, xmm0
  001ba	72 04		 jb	 SHORT $LN72@RenderAlph
  001bc	33 c0		 xor	 eax, eax
  001be	eb 18		 jmp	 SHORT $LN73@RenderAlph
$LN72@RenderAlph:
  001c0	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  001c8	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  001d0	e8 00 00 00 00	 call	 __ftoui3
  001d5	0f 57 c9	 xorps	 xmm1, xmm1
$LN73@RenderAlph:
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 480  : 	vertices[3].position = TPosition(ex, ey, z);

  001d8	f3 0f 7e 45 84	 movq	 xmm0, QWORD PTR $T3[ebp]
  001dd	f3 0f 10 55 8c	 movss	 xmm2, DWORD PTR $T4[ebp]
  001e2	c1 e0 18	 shl	 eax, 24			; 00000018H
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  001e5	0d ff ff ff 00	 or	 eax, 16777215		; 00ffffffH
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 480  : 	vertices[3].position = TPosition(ex, ey, z);

  001ea	0f 14 c2	 unpcklps xmm0, xmm2
  001ed	89 45 d8	 mov	 DWORD PTR _vertices$[ebp+60], eax
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 41   :     x = fx;

  001f0	c7 45 94 00 00
	00 00		 mov	 DWORD PTR $T9[ebp], 0
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 478  : 	vertices[2].texCoord = TTextureCoordinate(su, ev);

  001f7	8b 45 94	 mov	 eax, DWORD PTR $T9[ebp]
  001fa	89 45 dc	 mov	 DWORD PTR _vertices$[ebp+64], eax
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 42   :     y = fy;

  001fd	c7 45 98 00 00
	80 3f		 mov	 DWORD PTR $T9[ebp+4], 1065353216 ; 3f800000H
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 478  : 	vertices[2].texCoord = TTextureCoordinate(su, ev);

  00204	8b 45 98	 mov	 eax, DWORD PTR $T9[ebp+4]

; 480  : 	vertices[3].position = TPosition(ex, ey, z);

  00207	66 0f d6 45 e4	 movq	 QWORD PTR _vertices$[ebp+72], xmm0
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  0020c	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _aRight$[ebp]
  00211	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 478  : 	vertices[2].texCoord = TTextureCoordinate(su, ev);

  00218	89 45 e0	 mov	 DWORD PTR _vertices$[ebp+68], eax
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  0021b	c7 45 80 00 00
	00 00		 mov	 DWORD PTR $T1[ebp+8], 0
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 480  : 	vertices[3].position = TPosition(ex, ey, z);

  00222	8b 45 80	 mov	 eax, DWORD PTR $T1[ebp+8]
  00225	89 45 ec	 mov	 DWORD PTR _vertices$[ebp+80], eax
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  00228	72 07		 jb	 SHORT $LN96@RenderAlph
  0022a	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  0022f	eb 1e		 jmp	 SHORT $LN95@RenderAlph
$LN96@RenderAlph:
  00231	0f 2f c8	 comiss	 xmm1, xmm0
  00234	72 04		 jb	 SHORT $LN94@RenderAlph
  00236	33 c0		 xor	 eax, eax
  00238	eb 15		 jmp	 SHORT $LN95@RenderAlph
$LN94@RenderAlph:
  0023a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00242	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  0024a	e8 00 00 00 00	 call	 __ftoui3
$LN95@RenderAlph:
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 484  : 	STATEMANAGER.SetVertexShader(ms_pntVS);

  0024f	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_pntVS@CGraphicBase@@1KA ; CGraphicBase::ms_pntVS
  00255	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0025b	c1 e0 18	 shl	 eax, 24			; 00000018H
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  0025e	0d ff ff ff 00	 or	 eax, 16777215		; 00ffffffH

; 41   :     x = fx;

  00263	c7 45 94 00 00
	80 3f		 mov	 DWORD PTR $T8[ebp], 1065353216 ; 3f800000H
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 481  : 	vertices[3].diffuse = DiffuseColor2;

  0026a	89 45 f0	 mov	 DWORD PTR _vertices$[ebp+84], eax

; 482  : 	vertices[3].texCoord = TTextureCoordinate(eu, ev);

  0026d	8b 45 94	 mov	 eax, DWORD PTR $T8[ebp]
  00270	89 45 f4	 mov	 DWORD PTR _vertices$[ebp+88], eax
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 42   :     y = fy;

  00273	c7 45 98 00 00
	80 3f		 mov	 DWORD PTR $T8[ebp+4], 1065353216 ; 3f800000H
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 482  : 	vertices[3].texCoord = TTextureCoordinate(eu, ev);

  0027a	8b 45 98	 mov	 eax, DWORD PTR $T8[ebp+4]
  0027d	89 45 f8	 mov	 DWORD PTR _vertices$[ebp+92], eax

; 484  : 	STATEMANAGER.SetVertexShader(ms_pntVS);

  00280	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 485  : 	// 2004.11.18.myevan.DrawIndexPrimitiveUP -> DynamicVertexBuffer
; 486  : 	CGraphicBase::SetDefaultIndexBuffer(DEFAULT_IB_FILL_RECT);

  00285	6a 05		 push	 5
  00287	e8 00 00 00 00	 call	 ?SetDefaultIndexBuffer@CGraphicBase@@SAXI@Z ; CGraphicBase::SetDefaultIndexBuffer

; 487  : 	if (CGraphicBase::SetPDTStream(vertices, 4))

  0028c	8d 45 9c	 lea	 eax, DWORD PTR _vertices$[ebp]
  0028f	6a 04		 push	 4
  00291	50		 push	 eax
  00292	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z ; CGraphicBase::SetPDTStream
  00297	83 c4 0c	 add	 esp, 12			; 0000000cH
  0029a	84 c0		 test	 al, al
  0029c	74 15		 je	 SHORT $LN1@RenderAlph

; 488  : 		STATEMANAGER.DrawIndexedPrimitive(D3DPT_TRIANGLELIST, 0, 4, 0, 2);

  0029e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002a4	6a 02		 push	 2
  002a6	6a 00		 push	 0
  002a8	6a 04		 push	 4
  002aa	6a 00		 push	 0
  002ac	6a 04		 push	 4
  002ae	e8 00 00 00 00	 call	 ?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z ; CStateManager::DrawIndexedPrimitive
$LN1@RenderAlph:

; 489  : }

  002b3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002b6	33 cd		 xor	 ecx, ebp
  002b8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002bd	8b e5		 mov	 esp, ebp
  002bf	5d		 pop	 ebp
  002c0	c2 14 00	 ret	 20			; 00000014H
?RenderAlphaImage@CPythonGraphic@@QAEXPAVCGraphicImageInstance@@MMMM@Z ENDP ; CPythonGraphic::RenderAlphaImage
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
;	COMDAT ?RenderImage@CPythonGraphic@@QAEXPAVCGraphicImageInstance@@MM@Z
_TEXT	SEGMENT
_width$1$ = -4						; size = 4
_height$1$ = 8						; size = 4
_pImageInstance$ = 8					; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?RenderImage@CPythonGraphic@@QAEXPAVCGraphicImageInstance@@MM@Z PROC ; CPythonGraphic::RenderImage, COMDAT
; _this$ = ecx

; 420  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi

; 421  : 	assert(pImageInstance != NULL);
; 422  : 
; 423  : 	//SetColorRenderState();
; 424  : 	const CGraphicTexture * c_pTexture = pImageInstance->GetTexturePointer();

  00006	8b 75 08	 mov	 esi, DWORD PTR _pImageInstance$[ebp]
  00009	8b d9		 mov	 ebx, ecx
  0000b	57		 push	 edi
  0000c	8b ce		 mov	 ecx, esi
  0000e	e8 00 00 00 00	 call	 ?GetTexturePointer@CGraphicImageInstance@@QAEPAVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTexturePointer

; 425  : 
; 426  : 	float width = (float) pImageInstance->GetWidth();

  00013	8b ce		 mov	 ecx, esi
  00015	8b f8		 mov	 edi, eax
  00017	e8 00 00 00 00	 call	 ?GetWidth@CGraphicImageInstance@@QAEHXZ ; CGraphicImageInstance::GetWidth

; 427  : 	float height = (float) pImageInstance->GetHeight();

  0001c	8b ce		 mov	 ecx, esi
  0001e	66 0f 6e c0	 movd	 xmm0, eax
  00022	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00025	f3 0f 11 45 fc	 movss	 DWORD PTR _width$1$[ebp], xmm0
  0002a	e8 00 00 00 00	 call	 ?GetHeight@CGraphicImageInstance@@QAEHXZ ; CGraphicImageInstance::GetHeight

; 428  : 
; 429  : 	c_pTexture->SetTextureStage(0);

  0002f	6a 00		 push	 0
  00031	8b cf		 mov	 ecx, edi
  00033	66 0f 6e c0	 movd	 xmm0, eax
  00037	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0003a	f3 0f 11 45 08	 movss	 DWORD PTR _height$1$[ebp], xmm0
  0003f	e8 00 00 00 00	 call	 ?SetTextureStage@CGraphicTexture@@QBEXH@Z ; CGraphicTexture::SetTextureStage

; 430  : 
; 431  : 	RenderTextureBox(x,
; 432  : 					 y,
; 433  : 					 x + width,
; 434  : 					 y + height,
; 435  : 					 0.0f,
; 436  : 					 0.5f / width, 
; 437  : 					 0.5f / height, 
; 438  : 					 (width + 0.5f) / width, 
; 439  : 					 (height + 0.5f) / height);

  00044	f3 0f 10 55 08	 movss	 xmm2, DWORD PTR _height$1$[ebp]
  00049	83 ec 24	 sub	 esp, 36			; 00000024H
  0004c	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
  00054	0f 28 c2	 movaps	 xmm0, xmm2
  00057	f3 0f 58 c1	 addss	 xmm0, xmm1
  0005b	f3 0f 10 5d fc	 movss	 xmm3, DWORD PTR _width$1$[ebp]
  00060	8b cb		 mov	 ecx, ebx
  00062	f3 0f 5e c2	 divss	 xmm0, xmm2
  00066	f3 0f 11 44 24
	20		 movss	 DWORD PTR [esp+32], xmm0
  0006c	0f 28 c3	 movaps	 xmm0, xmm3
  0006f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00073	f3 0f 5e c3	 divss	 xmm0, xmm3
  00077	f3 0f 11 44 24
	1c		 movss	 DWORD PTR [esp+28], xmm0
  0007d	0f 28 c1	 movaps	 xmm0, xmm1
  00080	f3 0f 5e c2	 divss	 xmm0, xmm2
  00084	f3 0f 5e cb	 divss	 xmm1, xmm3
  00088	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  0008e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _x$[ebp]
  00093	f3 0f 11 4c 24
	14		 movss	 DWORD PTR [esp+20], xmm1
  00099	f3 0f 58 d8	 addss	 xmm3, xmm0
  0009d	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _y$[ebp]
  000a2	f3 0f 58 d1	 addss	 xmm2, xmm1
  000a6	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR [esp+16], 0
  000ae	f3 0f 11 54 24
	0c		 movss	 DWORD PTR [esp+12], xmm2
  000b4	f3 0f 11 5c 24
	08		 movss	 DWORD PTR [esp+8], xmm3
  000ba	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  000c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c5	e8 00 00 00 00	 call	 ?RenderTextureBox@CScreen@@QAEXMMMMMMMMM@Z ; CScreen::RenderTextureBox
  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx

; 440  : }

  000cd	8b e5		 mov	 esp, ebp
  000cf	5d		 pop	 ebp
  000d0	c2 0c 00	 ret	 12			; 0000000cH
?RenderImage@CPythonGraphic@@QAEXPAVCGraphicImageInstance@@MM@Z ENDP ; CPythonGraphic::RenderImage
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
;	COMDAT ?RenderUpButton@CPythonGraphic@@QAEXMMMM@Z
_TEXT	SEGMENT
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_ex$ = 16						; size = 4
_ey$ = 20						; size = 4
?RenderUpButton@CPythonGraphic@@QAEXMMMM@Z PROC		; CPythonGraphic::RenderUpButton, COMDAT
; _this$ = ecx

; 594  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 595  : 	RenderBox2d(sx, sy, ex, ey);

  00003	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ey$[ebp]
  00008	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _sy$[ebp]
  0000d	56		 push	 esi
  0000e	83 ec 14	 sub	 esp, 20			; 00000014H
  00011	8b f1		 mov	 esi, ecx
  00013	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR [esp+16], 0
  0001b	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00021	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _ex$[ebp]
  00026	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0002c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _sx$[ebp]
  00031	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  00037	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003c	e8 00 00 00 00	 call	 ?RenderBox2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderBox2d

; 596  : 
; 597  : 	SetDiffuseColor(m_lightColor);

  00041	ff 76 08	 push	 DWORD PTR [esi+8]
  00044	8b ce		 mov	 ecx, esi
  00046	e8 00 00 00 00	 call	 ?SetDiffuseColor@CScreen@@QAEXK@Z ; CScreen::SetDiffuseColor

; 598  : 	RenderLine2d(sx, sy, ex, sy);

  0004b	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _sy$[ebp]
  00050	83 ec 14	 sub	 esp, 20			; 00000014H
  00053	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _ex$[ebp]
  00058	8b ce		 mov	 ecx, esi
  0005a	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR [esp+16], 0
  00062	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00068	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  0006e	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00074	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _sx$[ebp]
  00079	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007e	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d

; 599  : 	RenderLine2d(sx, sy, sx, ey);

  00083	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ey$[ebp]
  00088	83 ec 14	 sub	 esp, 20			; 00000014H
  0008b	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _sy$[ebp]
  00090	8b ce		 mov	 ecx, esi
  00092	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR [esp+16], 0
  0009a	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  000a0	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _sx$[ebp]
  000a5	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  000ab	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  000b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b6	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d

; 600  : 
; 601  : 	SetDiffuseColor(m_darkColor);

  000bb	ff 76 0c	 push	 DWORD PTR [esi+12]
  000be	8b ce		 mov	 ecx, esi
  000c0	e8 00 00 00 00	 call	 ?SetDiffuseColor@CScreen@@QAEXK@Z ; CScreen::SetDiffuseColor

; 602  : 	RenderLine2d(sx, ey, ex, ey);

  000c5	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ey$[ebp]
  000ca	83 ec 14	 sub	 esp, 20			; 00000014H
  000cd	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _ex$[ebp]
  000d2	8b ce		 mov	 ecx, esi
  000d4	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR [esp+16], 0
  000dc	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  000e2	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  000e8	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000ee	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _sx$[ebp]
  000f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f8	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d

; 603  : 	RenderLine2d(ex, sy, ex, ey);

  000fd	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ey$[ebp]
  00102	83 ec 14	 sub	 esp, 20			; 00000014H
  00105	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _ex$[ebp]
  0010a	8b ce		 mov	 ecx, esi
  0010c	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR [esp+16], 0
  00114	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  0011a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _sy$[ebp]
  0011f	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  00125	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0012b	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00130	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d
  00135	5e		 pop	 esi

; 604  : }

  00136	5d		 pop	 ebp
  00137	c2 10 00	 ret	 16			; 00000010H
?RenderUpButton@CPythonGraphic@@QAEXMMMM@Z ENDP		; CPythonGraphic::RenderUpButton
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
;	COMDAT ?RenderDownButton@CPythonGraphic@@QAEXMMMM@Z
_TEXT	SEGMENT
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_ex$ = 16						; size = 4
_ey$ = 20						; size = 4
?RenderDownButton@CPythonGraphic@@QAEXMMMM@Z PROC	; CPythonGraphic::RenderDownButton, COMDAT
; _this$ = ecx

; 581  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 582  : 	RenderBox2d(sx, sy, ex, ey);

  00003	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ey$[ebp]
  00008	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _sy$[ebp]
  0000d	56		 push	 esi
  0000e	83 ec 14	 sub	 esp, 20			; 00000014H
  00011	8b f1		 mov	 esi, ecx
  00013	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR [esp+16], 0
  0001b	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00021	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _ex$[ebp]
  00026	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0002c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _sx$[ebp]
  00031	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  00037	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003c	e8 00 00 00 00	 call	 ?RenderBox2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderBox2d

; 583  : 
; 584  : 	SetDiffuseColor(m_darkColor);

  00041	ff 76 0c	 push	 DWORD PTR [esi+12]
  00044	8b ce		 mov	 ecx, esi
  00046	e8 00 00 00 00	 call	 ?SetDiffuseColor@CScreen@@QAEXK@Z ; CScreen::SetDiffuseColor

; 585  : 	RenderLine2d(sx, sy, ex, sy);

  0004b	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _sy$[ebp]
  00050	83 ec 14	 sub	 esp, 20			; 00000014H
  00053	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _ex$[ebp]
  00058	8b ce		 mov	 ecx, esi
  0005a	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR [esp+16], 0
  00062	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00068	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  0006e	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00074	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _sx$[ebp]
  00079	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007e	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d

; 586  : 	RenderLine2d(sx, sy, sx, ey);

  00083	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ey$[ebp]
  00088	83 ec 14	 sub	 esp, 20			; 00000014H
  0008b	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _sy$[ebp]
  00090	8b ce		 mov	 ecx, esi
  00092	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR [esp+16], 0
  0009a	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  000a0	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _sx$[ebp]
  000a5	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  000ab	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  000b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b6	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d

; 587  : 
; 588  : 	SetDiffuseColor(m_lightColor);

  000bb	ff 76 08	 push	 DWORD PTR [esi+8]
  000be	8b ce		 mov	 ecx, esi
  000c0	e8 00 00 00 00	 call	 ?SetDiffuseColor@CScreen@@QAEXK@Z ; CScreen::SetDiffuseColor

; 589  : 	RenderLine2d(sx, ey, ex, ey);

  000c5	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ey$[ebp]
  000ca	83 ec 14	 sub	 esp, 20			; 00000014H
  000cd	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _ex$[ebp]
  000d2	8b ce		 mov	 ecx, esi
  000d4	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR [esp+16], 0
  000dc	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  000e2	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  000e8	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000ee	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _sx$[ebp]
  000f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f8	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d

; 590  : 	RenderLine2d(ex, sy, ex, ey);

  000fd	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ey$[ebp]
  00102	83 ec 14	 sub	 esp, 20			; 00000014H
  00105	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _ex$[ebp]
  0010a	8b ce		 mov	 ecx, esi
  0010c	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR [esp+16], 0
  00114	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  0011a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _sy$[ebp]
  0011f	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  00125	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0012b	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00130	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d
  00135	5e		 pop	 esi

; 591  : }

  00136	5d		 pop	 ebp
  00137	c2 10 00	 ret	 16			; 00000010H
?RenderDownButton@CPythonGraphic@@QAEXMMMM@Z ENDP	; CPythonGraphic::RenderDownButton
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
;	COMDAT ?GenerateColor@CPythonGraphic@@QAEJMMMM@Z
_TEXT	SEGMENT
_r$ = 8							; size = 4
_g$ = 12						; size = 4
_b$ = 16						; size = 4
_a$ = 20						; size = 4
?GenerateColor@CPythonGraphic@@QAEJMMMM@Z PROC		; CPythonGraphic::GenerateColor, COMDAT
; _this$ = ecx

; 576  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 577  : 	return GetColor(r, g, b, a);

  00003	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _a$[ebp]
  00008	83 ec 10	 sub	 esp, 16			; 00000010H
  0000b	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00011	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _b$[ebp]
  00016	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0001c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _g$[ebp]
  00021	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00027	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _r$[ebp]
  0002c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00031	e8 00 00 00 00	 call	 ?GetColor@CGraphicBase@@QAEKMMMM@Z ; CGraphicBase::GetColor

; 578  : }

  00036	5d		 pop	 ebp
  00037	c2 10 00	 ret	 16			; 00000010H
?GenerateColor@CPythonGraphic@@QAEJMMMM@Z ENDP		; CPythonGraphic::GenerateColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
;	COMDAT ?RestoreViewport@CPythonGraphic@@QAEXXZ
_TEXT	SEGMENT
?RestoreViewport@CPythonGraphic@@QAEXXZ PROC		; CPythonGraphic::RestoreViewport, COMDAT
; _this$ = ecx

; 121  : 	ms_lpd3dDevice->SetViewport(&m_backupViewport);

  00000	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00006	8d 81 84 00 00
	00		 lea	 eax, DWORD PTR [ecx+132]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	52		 push	 edx
  0000f	8b 32		 mov	 esi, DWORD PTR [edx]
  00011	ff 96 a0 00 00
	00		 call	 DWORD PTR [esi+160]
  00017	5e		 pop	 esi

; 122  : }

  00018	c3		 ret	 0
?RestoreViewport@CPythonGraphic@@QAEXXZ ENDP		; CPythonGraphic::RestoreViewport
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
;	COMDAT ?SetViewport@CPythonGraphic@@QAEXMMMM@Z
_TEXT	SEGMENT
_ViewPort$ = -28					; size = 24
__$ArrayPad$ = -4					; size = 4
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fWidth$ = 16						; size = 4
_fHeight$ = 20						; size = 4
?SetViewport@CPythonGraphic@@QAEXMMMM@Z PROC		; CPythonGraphic::SetViewport, COMDAT
; _this$ = ecx

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 99   : 	ms_lpd3dDevice->GetViewport(&m_backupViewport);

  00010	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00016	8d 81 84 00 00
	00		 lea	 eax, DWORD PTR [ecx+132]
  0001c	56		 push	 esi
  0001d	50		 push	 eax
  0001e	52		 push	 edx
  0001f	8b 32		 mov	 esi, DWORD PTR [edx]
  00021	ff 96 a4 00 00
	00		 call	 DWORD PTR [esi+164]

; 100  : 
; 101  : 	D3DVIEWPORT8 ViewPort;
; 102  : 	ViewPort.X = fx;

  00027	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  0002c	e8 00 00 00 00	 call	 __ftoui3

; 103  : 	ViewPort.Y = fy;

  00031	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00036	89 45 e4	 mov	 DWORD PTR _ViewPort$[ebp], eax
  00039	e8 00 00 00 00	 call	 __ftoui3

; 104  : 	ViewPort.Width = fWidth;

  0003e	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fWidth$[ebp]
  00043	89 45 e8	 mov	 DWORD PTR _ViewPort$[ebp+4], eax
  00046	e8 00 00 00 00	 call	 __ftoui3

; 105  : 	ViewPort.Height = fHeight;

  0004b	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _fHeight$[ebp]
  00050	89 45 ec	 mov	 DWORD PTR _ViewPort$[ebp+8], eax
  00053	e8 00 00 00 00	 call	 __ftoui3
  00058	89 45 f0	 mov	 DWORD PTR _ViewPort$[ebp+12], eax

; 106  : 	ViewPort.MinZ = 0.0f;
; 107  : 	ViewPort.MaxZ = 1.0f;
; 108  : 	if (FAILED(
; 109  : 		ms_lpd3dDevice->SetViewport(&ViewPort)
; 110  : 	))

  0005b	8d 55 e4	 lea	 edx, DWORD PTR _ViewPort$[ebp]
  0005e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00063	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _ViewPort$[ebp+16], 0
  0006a	c7 45 f8 00 00
	80 3f		 mov	 DWORD PTR _ViewPort$[ebp+20], 1065353216 ; 3f800000H
  00071	52		 push	 edx
  00072	8b 08		 mov	 ecx, DWORD PTR [eax]
  00074	50		 push	 eax
  00075	ff 91 a0 00 00
	00		 call	 DWORD PTR [ecx+160]
  0007b	5e		 pop	 esi
  0007c	85 c0		 test	 eax, eax
  0007e	79 19		 jns	 SHORT $LN1@SetViewpor

; 111  : 	{
; 112  : 		Tracef("CPythonGraphic::SetViewport(%d, %d, %d, %d) - Error", 
; 113  : 			ViewPort.X, ViewPort.Y,
; 114  : 			ViewPort.Width, ViewPort.Height
; 115  : 		);

  00080	ff 75 f0	 push	 DWORD PTR _ViewPort$[ebp+12]
  00083	ff 75 ec	 push	 DWORD PTR _ViewPort$[ebp+8]
  00086	ff 75 e8	 push	 DWORD PTR _ViewPort$[ebp+4]
  00089	ff 75 e4	 push	 DWORD PTR _ViewPort$[ebp]
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@BKCCNGJK@CPythonGraphic?3?3SetViewport?$CI?$CFd?0?5@
  00091	e8 00 00 00 00	 call	 ?Tracef@@YAXPBDZZ	; Tracef
  00096	83 c4 14	 add	 esp, 20			; 00000014H
$LN1@SetViewpor:

; 116  : 	}
; 117  : }

  00099	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009c	33 cd		 xor	 ecx, ebp
  0009e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c2 10 00	 ret	 16			; 00000010H
?SetViewport@CPythonGraphic@@QAEXMMMM@Z ENDP		; CPythonGraphic::SetViewport
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
;	COMDAT ?SetOmniLight@CPythonGraphic@@QAEXXZ
_TEXT	SEGMENT
$T1 = -188						; size = 12
$T2 = -188						; size = 12
$T3 = -188						; size = 12
_Material$ = -176					; size = 68
_Light$ = -108						; size = 104
__$ArrayPad$ = -4					; size = 4
?SetOmniLight@CPythonGraphic@@QAEXXZ PROC		; CPythonGraphic::SetOmniLight, COMDAT
; _this$ = ecx

; 58   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec bc 00 00
	00		 sub	 esp, 188		; 000000bcH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@3f8000003e99999a3e99999a3e99999a

; 59   :     // Set up a material
; 60   :     D3DMATERIAL8 Material;
; 61   : 	Material.Ambient = D3DXCOLOR(0.3f, 0.3f, 0.3f, 1.0f);
; 62   : 	Material.Diffuse = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);
; 63   : 	Material.Emissive = D3DXCOLOR(0.1f, 0.1f, 0.1f, 1.0f);
; 64   :     STATEMANAGER.SetMaterial(&Material);

  0001a	8d 85 50 ff ff
	ff		 lea	 eax, DWORD PTR _Material$[ebp]
  00020	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00026	f3 0f 7f 85 60
	ff ff ff	 movdqu	 XMMWORD PTR _Material$[ebp+16], xmm0
  0002e	50		 push	 eax
  0002f	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
  00036	0f 11 85 50 ff
	ff ff		 movups	 XMMWORD PTR _Material$[ebp], xmm0
  0003d	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@3f8000003dcccccd3dcccccd3dcccccd
  00044	f3 0f 7f 45 80	 movdqu	 XMMWORD PTR _Material$[ebp+48], xmm0
  00049	e8 00 00 00 00	 call	 ?SetMaterial@CStateManager@@QAEXPBU_D3DMATERIAL8@@@Z ; CStateManager::SetMaterial
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  0004e	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42480000
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 85   : 	ms_lpd3dDevice->SetLight(0, &Light);

  00056	8d 55 94	 lea	 edx, DWORD PTR _Light$[ebp]
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 181  :     y = fy;

  00059	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43160000
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 68   :     Light.Position = D3DXVECTOR3(50.0f, 150.0f, 350.0f);

  00061	0f 14 c8	 unpcklps xmm1, xmm0
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 181  :     y = fy;

  00064	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 68   :     Light.Position = D3DXVECTOR3(50.0f, 150.0f, 350.0f);

  0006c	66 0f d6 4d c8	 movq	 QWORD PTR _Light$[ebp+52], xmm1
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00071	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@be19999a
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 69   :     Light.Direction = D3DXVECTOR3(-0.15f, -0.3f, -0.9f);

  00079	0f 14 c8	 unpcklps xmm1, xmm0
  0007c	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@000000003ba3d70a000000003f800000
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00083	c7 85 4c ff ff
	ff 00 00 af 43	 mov	 DWORD PTR $T3[ebp+8], 1135542272 ; 43af0000H
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 68   :     Light.Position = D3DXVECTOR3(50.0f, 150.0f, 350.0f);

  0008d	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR $T3[ebp+8]
  00093	89 45 d0	 mov	 DWORD PTR _Light$[ebp+60], eax
  00096	0f 11 45 e4	 movups	 XMMWORD PTR _Light$[ebp+80], xmm0
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  0009a	c7 85 4c ff ff
	ff 66 66 66 bf	 mov	 DWORD PTR $T2[ebp+8], -1083808154 ; bf666666H
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 69   :     Light.Direction = D3DXVECTOR3(-0.15f, -0.3f, -0.9f);

  000a4	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp+8]
  000aa	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
  000b1	89 45 dc	 mov	 DWORD PTR _Light$[ebp+72], eax

; 85   : 	ms_lpd3dDevice->SetLight(0, &Light);

  000b4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  000b9	0f 11 45 98	 movups	 XMMWORD PTR _Light$[ebp+4], xmm0
  000bd	52		 push	 edx
  000be	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
  000c5	c7 45 94 02 00
	00 00		 mov	 DWORD PTR _Light$[ebp], 2
  000cc	66 0f d6 4d d4	 movq	 QWORD PTR _Light$[ebp+64], xmm1
  000d1	c7 45 f4 92 0a
	06 3f		 mov	 DWORD PTR _Light$[ebp+96], 1057360530 ; 3f060a92H
  000d8	c7 45 f8 db 0f
	49 3f		 mov	 DWORD PTR _Light$[ebp+100], 1061752795 ; 3f490fdbH
  000df	0f 11 45 b8	 movups	 XMMWORD PTR _Light$[ebp+36], xmm0
  000e3	c7 45 e0 00 00
	fa 43		 mov	 DWORD PTR _Light$[ebp+76], 1140457472 ; 43fa0000H
  000ea	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ec	6a 00		 push	 0
  000ee	50		 push	 eax
  000ef	ff 91 b0 00 00
	00		 call	 DWORD PTR [ecx+176]

; 86   : 	ms_lpd3dDevice->LightEnable(0, TRUE);

  000f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  000fa	6a 01		 push	 1
  000fc	6a 00		 push	 0
  000fe	50		 push	 eax
  000ff	8b 08		 mov	 ecx, DWORD PTR [eax]
  00101	ff 91 b8 00 00
	00		 call	 DWORD PTR [ecx+184]
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 181  :     y = fy;

  00107	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43480000
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 93   : 	ms_lpd3dDevice->SetLight(1, &Light);

  0010f	8d 55 94	 lea	 edx, DWORD PTR _Light$[ebp]
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00112	c7 85 4c ff ff
	ff 00 00 48 43	 mov	 DWORD PTR $T1[ebp+8], 1128792064 ; 43480000H
  0011c	0f 57 c9	 xorps	 xmm1, xmm1
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 89   : 	Light.Position = D3DXVECTOR3(0.0f, 200.0f, 200.0f);

  0011f	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR $T1[ebp+8]
  00125	89 45 d0	 mov	 DWORD PTR _Light$[ebp+60], eax

; 93   : 	ms_lpd3dDevice->SetLight(1, &Light);

  00128	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  0012d	0f 14 c8	 unpcklps xmm1, xmm0
  00130	52		 push	 edx
  00131	c7 45 94 01 00
	00 00		 mov	 DWORD PTR _Light$[ebp], 1
  00138	66 0f d6 4d c8	 movq	 QWORD PTR _Light$[ebp+52], xmm1
  0013d	c7 45 e8 cd cc
	cc 3d		 mov	 DWORD PTR _Light$[ebp+84], 1036831949 ; 3dcccccdH
  00144	c7 45 ec 0a d7
	23 3c		 mov	 DWORD PTR _Light$[ebp+88], 1008981770 ; 3c23d70aH
  0014b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _Light$[ebp+92], 0
  00152	8b 08		 mov	 ecx, DWORD PTR [eax]
  00154	6a 01		 push	 1
  00156	50		 push	 eax
  00157	ff 91 b0 00 00
	00		 call	 DWORD PTR [ecx+176]

; 94   : 	ms_lpd3dDevice->LightEnable(1, TRUE);

  0015d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00162	6a 01		 push	 1
  00164	6a 01		 push	 1
  00166	50		 push	 eax
  00167	8b 08		 mov	 ecx, DWORD PTR [eax]
  00169	ff 91 b8 00 00
	00		 call	 DWORD PTR [ecx+184]

; 95   : }

  0016f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00172	33 cd		 xor	 ecx, ebp
  00174	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00179	8b e5		 mov	 esp, ebp
  0017b	5d		 pop	 ebp
  0017c	c3		 ret	 0
?SetOmniLight@CPythonGraphic@@QAEXXZ ENDP		; CPythonGraphic::SetOmniLight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
;	COMDAT ?SetCursorPosition@CPythonGraphic@@QAEXHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?SetCursorPosition@CPythonGraphic@@QAEXHH@Z PROC	; CPythonGraphic::SetCursorPosition, COMDAT
; _this$ = ecx

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 54   : 	CScreen::SetCursorPosition(x, y, ms_iWidth, ms_iHeight);

  00003	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_iHeight@CGraphicBase@@1HA ; CGraphicBase::ms_iHeight
  00009	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_iWidth@CGraphicBase@@1HA ; CGraphicBase::ms_iWidth
  0000f	ff 75 0c	 push	 DWORD PTR _y$[ebp]
  00012	ff 75 08	 push	 DWORD PTR _x$[ebp]
  00015	e8 00 00 00 00	 call	 ?SetCursorPosition@CScreen@@QAEXHHHH@Z ; CScreen::SetCursorPosition

; 55   : }

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
?SetCursorPosition@CPythonGraphic@@QAEXHH@Z ENDP	; CPythonGraphic::SetCursorPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
;	COMDAT ?SetGameRenderState@CPythonGraphic@@QAEXXZ
_TEXT	SEGMENT
?SetGameRenderState@CPythonGraphic@@QAEXXZ PROC		; CPythonGraphic::SetGameRenderState, COMDAT
; _this$ = ecx

; 44   : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_MINFILTER, D3DTEXF_LINEAR);

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00006	6a 02		 push	 2
  00008	6a 11		 push	 17			; 00000011H
  0000a	6a 00		 push	 0
  0000c	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 45   : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_MAGFILTER, D3DTEXF_LINEAR);

  00011	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00017	6a 02		 push	 2
  00019	6a 10		 push	 16			; 00000010H
  0001b	6a 00		 push	 0
  0001d	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 46   : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_MIPFILTER, D3DTEXF_LINEAR);

  00022	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00028	6a 02		 push	 2
  0002a	6a 12		 push	 18			; 00000012H
  0002c	6a 00		 push	 0
  0002e	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 47   : 
; 48   : 	STATEMANAGER.SetRenderState(D3DRS_ALPHABLENDENABLE, FALSE);

  00033	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00039	6a 00		 push	 0
  0003b	6a 1b		 push	 27			; 0000001bH
  0003d	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 49   : 	STATEMANAGER.SetRenderState(D3DRS_LIGHTING, TRUE);

  00042	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00048	6a 01		 push	 1
  0004a	68 89 00 00 00	 push	 137			; 00000089H
  0004f	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 50   : }

  00054	c3		 ret	 0
?SetGameRenderState@CPythonGraphic@@QAEXXZ ENDP		; CPythonGraphic::SetGameRenderState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
;	COMDAT ?SetInterfaceRenderState@CPythonGraphic@@QAEXXZ
_TEXT	SEGMENT
?SetInterfaceRenderState@CPythonGraphic@@QAEXXZ PROC	; CPythonGraphic::SetInterfaceRenderState, COMDAT
; _this$ = ecx

; 23   : {

  00000	56		 push	 esi

; 24   : 	STATEMANAGER.SetTransform(D3DTS_PROJECTION, &ms_matIdentity);

  00001	68 00 00 00 00	 push	 OFFSET ?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matIdentity
  00006	8b f1		 mov	 esi, ecx
  00008	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0000e	6a 03		 push	 3
  00010	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 25   :  	STATEMANAGER.SetTransform(D3DTS_VIEW, &ms_matIdentity);

  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0001b	68 00 00 00 00	 push	 OFFSET ?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matIdentity
  00020	6a 02		 push	 2
  00022	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 26   : 	STATEMANAGER.SetTransform(D3DTS_WORLD, &ms_matIdentity);

  00027	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0002d	68 00 00 00 00	 push	 OFFSET ?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matIdentity
  00032	68 00 01 00 00	 push	 256			; 00000100H
  00037	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 27   : 
; 28   : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_MINFILTER, D3DTEXF_NONE);

  0003c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00042	6a 00		 push	 0
  00044	6a 11		 push	 17			; 00000011H
  00046	6a 00		 push	 0
  00048	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 29   : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_MAGFILTER, D3DTEXF_NONE);

  0004d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00053	6a 00		 push	 0
  00055	6a 10		 push	 16			; 00000010H
  00057	6a 00		 push	 0
  00059	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 30   : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_MIPFILTER, D3DTEXF_NONE);

  0005e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00064	6a 00		 push	 0
  00066	6a 12		 push	 18			; 00000012H
  00068	6a 00		 push	 0
  0006a	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 31   : 
; 32   : 	STATEMANAGER.SetRenderState(D3DRS_ALPHABLENDENABLE, TRUE);

  0006f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00075	6a 01		 push	 1
  00077	6a 1b		 push	 27			; 0000001bH
  00079	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 33   : 	STATEMANAGER.SetRenderState(D3DRS_SRCBLEND,	D3DBLEND_SRCALPHA);

  0007e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00084	6a 05		 push	 5
  00086	6a 13		 push	 19			; 00000013H
  00088	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 34   : 	STATEMANAGER.SetRenderState(D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA);

  0008d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00093	6a 06		 push	 6
  00095	6a 14		 push	 20			; 00000014H
  00097	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 35   : 
; 36   : 	CPythonGraphic::Instance().SetBlendOperation();

  0009c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A ; CSingleton<CPythonGraphic>::ms_singleton
  000a2	e8 00 00 00 00	 call	 ?SetBlendOperation@CScreen@@QAEXXZ ; CScreen::SetBlendOperation

; 37   : 	CPythonGraphic::Instance().SetOrtho2D(ms_iWidth, ms_iHeight, GetOrthoDepth());

  000a7	8b ce		 mov	 ecx, esi
  000a9	e8 00 00 00 00	 call	 ?GetOrthoDepth@CPythonGraphic@@QAEMXZ ; CPythonGraphic::GetOrthoDepth
  000ae	66 0f 6e 05 00
	00 00 00	 movd	 xmm0, DWORD PTR ?ms_iHeight@CGraphicBase@@1HA ; CGraphicBase::ms_iHeight
  000b6	83 ec 0c	 sub	 esp, 12			; 0000000cH
  000b9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A ; CSingleton<CPythonGraphic>::ms_singleton
  000bf	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000c2	d9 5c 24 08	 fstp	 DWORD PTR [esp+8]
  000c6	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000cc	66 0f 6e 05 00
	00 00 00	 movd	 xmm0, DWORD PTR ?ms_iWidth@CGraphicBase@@1HA ; CGraphicBase::ms_iWidth
  000d4	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000dc	e8 00 00 00 00	 call	 ?SetOrtho2D@CGraphicBase@@QAEXMMM@Z ; CGraphicBase::SetOrtho2D

; 38   : 
; 39   : 	STATEMANAGER.SetRenderState(D3DRS_LIGHTING, FALSE);

  000e1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000e7	6a 00		 push	 0
  000e9	68 89 00 00 00	 push	 137			; 00000089H
  000ee	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState
  000f3	5e		 pop	 esi

; 40   : }

  000f4	c3		 ret	 0
?SetInterfaceRenderState@CPythonGraphic@@QAEXXZ ENDP	; CPythonGraphic::SetInterfaceRenderState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
;	COMDAT ?GetOrthoDepth@CPythonGraphic@@QAEMXZ
_TEXT	SEGMENT
?GetOrthoDepth@CPythonGraphic@@QAEMXZ PROC		; CPythonGraphic::GetOrthoDepth, COMDAT
; _this$ = ecx

; 19   : 	return m_fOrthoDepth;

  00000	d9 81 9c 00 00
	00		 fld	 DWORD PTR [ecx+156]

; 20   : }

  00006	c3		 ret	 0
?GetOrthoDepth@CPythonGraphic@@QAEMXZ ENDP		; CPythonGraphic::GetOrthoDepth
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
;	COMDAT ?GetD3D@CPythonGraphic@@QAEPAUIDirect3D8@@XZ
_TEXT	SEGMENT
?GetD3D@CPythonGraphic@@QAEPAUIDirect3D8@@XZ PROC	; CPythonGraphic::GetD3D, COMDAT
; _this$ = ecx

; 14   : 	return ms_lpd3d;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3d@CGraphicBase@@1PAUIDirect3D8@@A ; CGraphicBase::ms_lpd3d

; 15   : }

  00005	c3		 ret	 0
?GetD3D@CPythonGraphic@@QAEPAUIDirect3D8@@XZ ENDP	; CPythonGraphic::GetD3D
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\vs\vc\include\deque
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\vs\vc\include\deque
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\vs\vc\include\deque
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
;	COMDAT ?PopState@CPythonGraphic@@QAEXXZ
_TEXT	SEGMENT
$T1 = -24						; size = 12
$T2 = -12						; size = 12
?PopState@CPythonGraphic@@QAEXXZ PROC			; CPythonGraphic::PopState, COMDAT
; _this$ = ecx

; 400  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
; File a:\vs\vc\include\deque

; 1362 : 		return (this->_Mysize == 0);

  00009	83 7e 20 00	 cmp	 DWORD PTR [esi+32], 0
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 401  : 	if (m_stateStack.empty())

  0000d	0f 84 b0 00 00
	00		 je	 $LN24@PopState
  00013	57		 push	 edi
; File a:\vs\vc\include\deque

; 1416 : 		return (*(end() - 1));

  00014	6a 01		 push	 1
  00016	8d 45 f4	 lea	 eax, DWORD PTR $T2[ebp]
  00019	50		 push	 eax
  0001a	8d 45 e8	 lea	 eax, DWORD PTR $T1[ebp]
  0001d	50		 push	 eax
  0001e	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00021	e8 00 00 00 00	 call	 ?end@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@2@XZ ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::end
  00026	8b c8		 mov	 ecx, eax
  00028	e8 00 00 00 00	 call	 ??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::operator-
  0002d	8b d0		 mov	 edx, eax
; File a:\vs\vc\include\xutility

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  0002f	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00031	85 c9		 test	 ecx, ecx
  00033	75 04		 jne	 SHORT $LN18@PopState
  00035	33 c0		 xor	 eax, eax
  00037	eb 02		 jmp	 SHORT $LN19@PopState
$LN18@PopState:
  00039	8b 01		 mov	 eax, DWORD PTR [ecx]
$LN19@PopState:
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0003b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 407  : 	TState & rState = m_stateStack.top();

  0003e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File a:\vs\vc\include\deque

; 782  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00041	49		 dec	 ecx
  00042	23 4a 08	 and	 ecx, DWORD PTR [edx+8]
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 407  : 	TState & rState = m_stateStack.top();

  00045	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 408  : 
; 409  : 	//STATEMANAGER.RestoreTransform(D3DTS_WORLD);
; 410  : 	ms_matProj = rState.matProj;
; 411  : 	ms_matView = rState.matView;
; 412  : 	
; 413  : 	UpdatePipeLineMatrix();

  00048	8b ce		 mov	 ecx, esi
  0004a	f3 0f 6f 40 40	 movdqu	 xmm0, XMMWORD PTR [eax+64]
  0004f	f3 0f 7f 05 00
	00 00 00	 movdqu	 XMMWORD PTR ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A, xmm0
  00057	f3 0f 6f 40 50	 movdqu	 xmm0, XMMWORD PTR [eax+80]
  0005c	f3 0f 7f 05 10
	00 00 00	 movdqu	 XMMWORD PTR ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A+16, xmm0
  00064	f3 0f 6f 40 60	 movdqu	 xmm0, XMMWORD PTR [eax+96]
  00069	f3 0f 7f 05 20
	00 00 00	 movdqu	 XMMWORD PTR ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A+32, xmm0
  00071	f3 0f 6f 40 70	 movdqu	 xmm0, XMMWORD PTR [eax+112]
  00076	f3 0f 7f 05 30
	00 00 00	 movdqu	 XMMWORD PTR ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A+48, xmm0
  0007e	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [eax]
  00082	f3 0f 7f 05 00
	00 00 00	 movdqu	 XMMWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A, xmm0
  0008a	f3 0f 6f 40 10	 movdqu	 xmm0, XMMWORD PTR [eax+16]
  0008f	f3 0f 7f 05 10
	00 00 00	 movdqu	 XMMWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A+16, xmm0
  00097	f3 0f 6f 40 20	 movdqu	 xmm0, XMMWORD PTR [eax+32]
  0009c	f3 0f 7f 05 20
	00 00 00	 movdqu	 XMMWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A+32, xmm0
  000a4	f3 0f 6f 40 30	 movdqu	 xmm0, XMMWORD PTR [eax+48]
  000a9	f3 0f 7f 05 30
	00 00 00	 movdqu	 XMMWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A+48, xmm0
  000b1	e8 00 00 00 00	 call	 ?UpdatePipeLineMatrix@CGraphicBase@@IAEXXZ ; CGraphicBase::UpdatePipeLineMatrix
; File a:\vs\vc\include\deque

; 1491 : 		if (--this->_Mysize == 0)

  000b6	ff 4e 20	 dec	 DWORD PTR [esi+32]
  000b9	75 07		 jne	 SHORT $LN31@PopState

; 1492 : 			this->_Myoff = 0;

  000bb	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
$LN31@PopState:
  000c2	5f		 pop	 edi
$LN24@PopState:
  000c3	5e		 pop	 esi
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 417  : }

  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c3		 ret	 0
?PopState@CPythonGraphic@@QAEXXZ ENDP			; CPythonGraphic::PopState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\vs\vc\include\stack
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\vs\vc\include\stack
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
;	COMDAT ?PushState@CPythonGraphic@@QAEXXZ
_TEXT	SEGMENT
_curState$ = -128					; size = 128
?PushState@CPythonGraphic@@QAEXXZ PROC			; CPythonGraphic::PushState, COMDAT
; _this$ = ecx

; 388  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H

; 391  : 	curState.matProj = ms_matProj;

  00009	f3 0f 6f 05 00
	00 00 00	 movdqu	 xmm0, XMMWORD PTR ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A
; File a:\vs\vc\include\stack

; 140  : 		c.push_back(_Val);

  00011	8d 45 80	 lea	 eax, DWORD PTR _curState$[ebp]
  00014	83 c1 10	 add	 ecx, 16			; 00000010H
  00017	50		 push	 eax
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 391  : 	curState.matProj = ms_matProj;

  00018	f3 0f 7f 45 c0	 movdqu	 XMMWORD PTR _curState$[ebp+64], xmm0
  0001d	f3 0f 6f 05 10
	00 00 00	 movdqu	 xmm0, XMMWORD PTR ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A+16
  00025	f3 0f 7f 45 d0	 movdqu	 XMMWORD PTR _curState$[ebp+80], xmm0
  0002a	f3 0f 6f 05 20
	00 00 00	 movdqu	 xmm0, XMMWORD PTR ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A+32
  00032	f3 0f 7f 45 e0	 movdqu	 XMMWORD PTR _curState$[ebp+96], xmm0
  00037	f3 0f 6f 05 30
	00 00 00	 movdqu	 xmm0, XMMWORD PTR ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A+48
  0003f	f3 0f 7f 45 f0	 movdqu	 XMMWORD PTR _curState$[ebp+112], xmm0

; 392  : 	curState.matView = ms_matView;

  00044	f3 0f 6f 05 00
	00 00 00	 movdqu	 xmm0, XMMWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A
  0004c	f3 0f 7f 45 80	 movdqu	 XMMWORD PTR _curState$[ebp], xmm0
  00051	f3 0f 6f 05 10
	00 00 00	 movdqu	 xmm0, XMMWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A+16
  00059	f3 0f 7f 45 90	 movdqu	 XMMWORD PTR _curState$[ebp+16], xmm0
  0005e	f3 0f 6f 05 20
	00 00 00	 movdqu	 xmm0, XMMWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A+32
  00066	f3 0f 7f 45 a0	 movdqu	 XMMWORD PTR _curState$[ebp+32], xmm0
  0006b	f3 0f 6f 05 30
	00 00 00	 movdqu	 xmm0, XMMWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A+48
  00073	f3 0f 7f 45 b0	 movdqu	 XMMWORD PTR _curState$[ebp+48], xmm0
; File a:\vs\vc\include\stack

; 140  : 		c.push_back(_Val);

  00078	e8 00 00 00 00	 call	 ?push_back@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEXABUSState@CPythonGraphic@@@Z ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::push_back
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 397  : }

  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
?PushState@CPythonGraphic@@QAEXXZ ENDP			; CPythonGraphic::PushState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
;	COMDAT ?Destroy@CPythonGraphic@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CPythonGraphic@@QAEXXZ PROC			; CPythonGraphic::Destroy, COMDAT
; _this$ = ecx

; 10   : }

  00000	c3		 ret	 0
?Destroy@CPythonGraphic@@QAEXXZ ENDP			; CPythonGraphic::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
; File a:\from c\desktop\serwer\source\source client\client\eterbase\singleton.h
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\client\eterbase\singleton.h
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
;	COMDAT ??1CPythonGraphic@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CPythonGraphic@@UAE@XZ PROC				; CPythonGraphic::~CPythonGraphic, COMDAT
; _this$ = ecx

; 622  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CPythonGraphic@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002a	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CPythonGraphic@@6BCScreen@@@
  00030	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], OFFSET ??_7CPythonGraphic@@6B?$CSingleton@VCPythonGraphic@@@@@

; 623  : 	Tracef("Python Graphic Clear\n");

  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@PCGMMCML@Python?5Graphic?5Clear?6?$AA@
  0003c	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  00043	e8 00 00 00 00	 call	 ?Tracef@@YAXPBDZZ	; Tracef
  00048	83 c4 04	 add	 esp, 4

; 624  : }

  0004b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0004f	8d 4f 64	 lea	 ecx, DWORD PTR [edi+100]
  00052	e8 00 00 00 00	 call	 ??1CCullingManager@@UAE@XZ ; CCullingManager::~CCullingManager
; File a:\vs\vc\include\deque

; 1215 : 		_Tidy();

  00057	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  0005a	e8 00 00 00 00	 call	 ?_Tidy@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@IAEXXZ ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Tidy
; File a:\vs\vc\include\xmemory0

; 573  : 		::operator delete(_Ptr);

  0005f	ff 77 10	 push	 DWORD PTR [edi+16]
  00062	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00067	83 c4 04	 add	 esp, 4
; File a:\vs\vc\include\deque

; 907  : 		this->_Myproxy = 0;

  0006a	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File a:\from c\desktop\serwer\source\source client\client\eterbase\singleton.h

; 19   : 	{ 

  00071	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], OFFSET ??_7?$CSingleton@VCPythonGraphic@@@@6B@
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 624  : }

  00078	8b cf		 mov	 ecx, edi
; File a:\from c\desktop\serwer\source\source client\client\eterbase\singleton.h

; 21   : 		ms_singleton = 0; 

  0007a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A, 0 ; CSingleton<CPythonGraphic>::ms_singleton
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 624  : }

  00084	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008b	e8 00 00 00 00	 call	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
  00090	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00093	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009a	59		 pop	 ecx
  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CPythonGraphic@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
__unwindfunclet$??1CPythonGraphic@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$CSingleton@VCPythonGraphic@@@@UAE@XZ ; CSingleton<CPythonGraphic>::~CSingleton<CPythonGraphic>
__unwindfunclet$??1CPythonGraphic@@UAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 10	 add	 ecx, 16			; 00000010H
  00019	e9 00 00 00 00	 jmp	 ??1?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CPythonGraphic@@UAE@XZ$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 64	 add	 ecx, 100		; 00000064H
  00024	e9 00 00 00 00	 jmp	 ??1CCullingManager@@UAE@XZ ; CCullingManager::~CCullingManager
__ehhandler$??1CPythonGraphic@@UAE@XZ:
  00029	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00030	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CPythonGraphic@@UAE@XZ
  0003f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CPythonGraphic@@UAE@XZ ENDP				; CPythonGraphic::~CPythonGraphic
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\client\eterbase\singleton.h
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\from c\desktop\serwer\source\source client\client\eterbase\singleton.h
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\vs\vc\include\xmemory0
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
; File a:\vs\vc\include\xutility
; File a:\vs\vc\include\deque
; File a:\vs\vc\include\xmemory0
; File a:\vs\vc\include\deque
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp
;	COMDAT ??0CPythonGraphic@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CPythonGraphic@@QAE@XZ PROC				; CPythonGraphic::CPythonGraphic, COMDAT
; _this$ = ecx

; 612  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CPythonGraphic@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002a	e8 00 00 00 00	 call	 ??0CScreen@@QAE@XZ	; CScreen::CScreen
; File a:\from c\desktop\serwer\source\source client\client\eterbase\singleton.h

; 15   : 		ms_singleton = (T*) ((int) this + offset);

  0002f	8b c6		 mov	 eax, esi
  00031	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$CSingleton@VCPythonGraphic@@@@6B@
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 612  : {

  00038	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File a:\from c\desktop\serwer\source\source client\client\eterbase\singleton.h

; 15   : 		ms_singleton = (T*) ((int) this + offset);

  0003f	a3 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A, eax ; CSingleton<CPythonGraphic>::ms_singleton
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 612  : {

  00044	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CPythonGraphic@@6BCScreen@@@
  0004a	8d 7e 10	 lea	 edi, DWORD PTR [esi+16]
  0004d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7CPythonGraphic@@6B?$CSingleton@VCPythonGraphic@@@@@
; File a:\vs\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00054	6a 08		 push	 8
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 612  : {

  00056	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File a:\vs\vc\include\xutility

; 80   : 		{	// construct childless container

  0005a	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File a:\vs\vc\include\deque

; 773  : 		_Map = _Mapptr();

  00060	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 774  : 		_Mapsize = 0;

  00067	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 775  : 		_Myoff = 0;

  0006e	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0

; 776  : 		_Mysize = 0;

  00075	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File a:\vs\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0007c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00081	83 c4 04	 add	 esp, 4
  00084	85 c0		 test	 eax, eax
  00086	75 05		 jne	 SHORT $LN32@CPythonGra

; 29   : 		_Xbad_alloc();	// report no memory

  00088	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN66@CPythonGra:
$LN32@CPythonGra:
  0008d	89 07		 mov	 DWORD PTR [edi], eax

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);
; 32   : 	}
; 33   : 
; 34   : 		// TEMPLATE FUNCTION _Construct
; 35   : template<class _Ty1,
; 36   : 	class _Ty2> inline
; 37   : 	void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
; 38   : 	{	// construct object at _Ptr with value _Val
; 39   : 	void *_Vptr = _Ptr;
; 40   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));
; 41   : 	}
; 42   : 
; 43   : template<class _Ty1> inline
; 44   : 	void _Construct(_Ty1 *_Ptr)
; 45   : 	{	// construct object at _Ptr with default value
; 46   : 	void *_Vptr = _Ptr;
; 47   : 
; 48   : 	::new (_Vptr) _Ty1();
; 49   : 	}
; 50   : 
; 51   : 		// TEMPLATE FUNCTION _Destroy
; 52   : template<class _Ty> inline
; 53   : 	void _Destroy(_Ty *_Ptr)
; 54   : 	{	// destroy object at _Ptr
; 55   : 	_Ptr->~_Ty();
; 56   : 	}
; 57   : 
; 58   : template<> inline
; 59   : 	void _Destroy(char *)
; 60   : 	{	// destroy a char (do nothing)
; 61   : 	}
; 62   : 
; 63   : template<> inline
; 64   : 	void _Destroy(wchar_t *)
; 65   : 	{	// destroy a wchar_t (do nothing)
; 66   : 	}
; 67   : 
; 68   :  #ifdef _NATIVE_WCHAR_T_DEFINED
; 69   : template<> inline
; 70   : 	void _Destroy(unsigned short *)
; 71   : 	{	// destroy a unsigned short (do nothing)
; 72   : 	}
; 73   :  #endif /* _NATIVE_WCHAR_T_DEFINED */
; 74   : 
; 75   : 		// TEMPLATE FUNCTION _Destroy_range
; 76   : template<class _Alloc> inline
; 77   : 	void _Destroy_range(typename _Alloc::pointer _First,
; 78   : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 79   : 		_Nonscalar_ptr_iterator_tag)
; 80   : 	{	// destroy [_First, _Last), arbitrary type
; 81   : 	for (; _First != _Last; ++_First)
; 82   : 		_Al.destroy(_First);
; 83   : 	}
; 84   : 
; 85   : template<class _Alloc> inline
; 86   : 	void _Destroy_range(typename _Alloc::pointer _First,
; 87   : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 88   : 		_Scalar_ptr_iterator_tag)
; 89   : 	{	// destroy [_First, _Last), scalar type (do nothing)
; 90   : 	}
; 91   : 
; 92   : template<class _Alloc> inline
; 93   : 	void _Destroy_range(typename _Alloc::pointer _First,
; 94   : 		typename _Alloc::pointer _Last, _Alloc& _Al)
; 95   : 	{	// destroy [_First, _Last)
; 96   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 97   : 	}
; 98   : 
; 99   : 		// TEMPLATE CLASS _Is_simple_alloc
; 100  : template<class _Alty>
; 101  : 	struct _Is_simple_alloc
; 102  : 		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
; 103  : 		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
; 104  : 		&& is_same<typename _Alty::pointer,
; 105  : 			typename _Alty::value_type *>::value
; 106  : 		&& is_same<typename _Alty::const_pointer,
; 107  : 			const typename _Alty::value_type *>::value
; 108  : 		&& is_same<typename _Alty::reference,
; 109  : 			typename _Alty::value_type&>::value
; 110  : 		&& is_same<typename _Alty::const_reference,
; 111  : 			const typename _Alty::value_type&>::value>
; 112  : 	{	// tests if allocator has simple addressing
; 113  : 	};
; 114  : 
; 115  : 		// TEMPLATE CLASS _Simple_types
; 116  : template<class _Value_type>
; 117  : 	struct _Simple_types
; 118  : 	{	// wraps types needed by iterators
; 119  : 	typedef _Value_type value_type;
; 120  : 	typedef size_t size_type;
; 121  : 	typedef ptrdiff_t difference_type;
; 122  : 	typedef value_type *pointer;
; 123  : 	typedef const value_type *const_pointer;
; 124  : 	typedef value_type& reference;
; 125  : 	typedef const value_type& const_reference;
; 126  : 	};
; 127  : 
; 128  : 		// TEMPLATE CLASS _Get_voidptr
; 129  : template<class _Alty,
; 130  : 	class _Pointer>
; 131  : 	struct _Get_voidptr
; 132  : 	{	// get void pointer for allocator
; 133  : 	typedef typename _Alty::template rebind<void>::other _Alvoid;
; 134  : 	typedef typename _Alvoid::pointer type;
; 135  : 	};
; 136  : 
; 137  : template<class _Alty,
; 138  : 	class _Ty>
; 139  : 	struct _Get_voidptr<_Alty, _Ty *>
; 140  : 	{	// get raw void pointer for allocator
; 141  : 	typedef void *type;
; 142  : 	};
; 143  : 
; 144  : 		// TEMPLATE CLASS _Is_iterator
; 145  : template<class _Iter>
; 146  : 	struct _Is_iterator
; 147  : 	: public integral_constant<bool, !is_integral<_Iter>::value>
; 148  : 	{	// tests for reasonable iterator candidate
; 149  : 	};
; 150  : 
; 151  : 		// TEMPLATE STRUCT _Get_first_parameter
; 152  : template<class _Ty>
; 153  : 	struct _Get_first_parameter;
; 154  : 
; 155  : template<template<class, class...> class _Ty,
; 156  : 	class _First,
; 157  : 	class... _Rest>
; 158  : 	struct _Get_first_parameter<_Ty<_First, _Rest...> >
; 159  : 	{	// given _Ty<_First, _Rest...>, extract _First
; 160  : 	typedef _First type;
; 161  : 	};
; 162  : 
; 163  : 		// TEMPLATE STRUCT _Replace_first_parameter
; 164  : template<class _Newfirst,
; 165  : 	class _Ty>
; 166  : 	struct _Replace_first_parameter;
; 167  : 
; 168  : template<class _Newfirst,
; 169  : 	template<class, class...> class _Ty,
; 170  : 	class _First,
; 171  : 	class... _Rest>
; 172  : 	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
; 173  : 	{	// given _Ty<_First, _Rest...>, replace _First
; 174  : 	typedef _Ty<_Newfirst, _Rest...> type;
; 175  : 	};
; 176  : 
; 177  : 		// TEMPLATE STRUCT _Get_element_type
; 178  : template<class _Ty>
; 179  : 	struct _Get_element_type
; 180  : 	_GET_TYPE_OR_DEFAULT(element_type,
; 181  : 		typename _Get_first_parameter<_Uty>::type);
; 182  : 
; 183  : 		// TEMPLATE STRUCT _Get_ptr_difference_type
; 184  : template<class _Ty>
; 185  : 	struct _Get_ptr_difference_type
; 186  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 187  : 		ptrdiff_t);
; 188  : 
; 189  : 		// TEMPLATE STRUCT _Get_rebind_type
; 190  : template<class _Ty,
; 191  : 	class _Other>
; 192  : 	struct _Get_rebind_type
; 193  : 	_GET_TYPE_OR_DEFAULT(template rebind<_Other>::other,
; 194  : 		typename _Replace_first_parameter<_Other _COMMA _Uty>::type);
; 195  : 
; 196  : 		// TEMPLATE CLASS pointer_traits
; 197  : template<class _Ty>
; 198  : 	struct pointer_traits
; 199  : 	{	// defines traits for arbitrary pointers
; 200  : 	typedef typename _Get_element_type<_Ty>::type element_type;
; 201  : 	typedef _Ty pointer;
; 202  : 	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;
; 203  : 
; 204  : 	template<class _Other>
; 205  : 		using rebind = typename _Get_rebind_type<_Ty, _Other>::type;
; 206  : 
; 207  : 	typedef typename _If<is_void<element_type>::value,
; 208  : 		char&,
; 209  : 		typename add_reference<element_type>::type>::type _Reftype;
; 210  : 
; 211  : 	static pointer pointer_to(_Reftype _Val)
; 212  : 		{	// convert raw reference to pointer
; 213  : 		return (_Ty::pointer_to(_Val));
; 214  : 		}
; 215  : 	};
; 216  : 
; 217  : 		// TEMPLATE CLASS pointer_traits<_Ty *>
; 218  : template<class _Ty>
; 219  : 	struct pointer_traits<_Ty *>
; 220  : 	{	// defines traits for raw pointers
; 221  : 	typedef _Ty element_type;
; 222  : 	typedef _Ty *pointer;
; 223  : 	typedef ptrdiff_t difference_type;
; 224  : 
; 225  : 	template<class _Other>
; 226  : 		using rebind = _Other *;
; 227  : 
; 228  : 	typedef typename _If<is_void<_Ty>::value,
; 229  : 		char&,
; 230  : 		typename add_reference<_Ty>::type>::type _Reftype;
; 231  : 
; 232  : 	static pointer pointer_to(_Reftype _Val)
; 233  : 		{	// convert raw reference to pointer
; 234  : 		return (_STD addressof(_Val));
; 235  : 		}
; 236  : 	};
; 237  : 
; 238  : 		// TEMPLATE STRUCT _Get_pointer_type
; 239  : template<class _Ty>
; 240  : 	struct _Get_pointer_type
; 241  : 	_GET_TYPE_OR_DEFAULT(pointer,
; 242  : 		typename _Ty::value_type *);
; 243  : 
; 244  : 		// TEMPLATE STRUCT _Get_const_pointer_type
; 245  : template<class _Ty>
; 246  : 	struct _Get_const_pointer_type
; 247  : 	_GET_TYPE_OR_DEFAULT(const_pointer,
; 248  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 249  : 			::template rebind<const typename _Ty::value_type>);
; 250  : 
; 251  : 		// TEMPLATE STRUCT _Get_void_pointer_type
; 252  : template<class _Ty>
; 253  : 	struct _Get_void_pointer_type
; 254  : 	_GET_TYPE_OR_DEFAULT(void_pointer,
; 255  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 256  : 			::template rebind<void>);
; 257  : 
; 258  : 		// TEMPLATE STRUCT _Get_const_void_pointer_type
; 259  : template<class _Ty>
; 260  : 	struct _Get_const_void_pointer_type
; 261  : 	_GET_TYPE_OR_DEFAULT(const_void_pointer,
; 262  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 263  : 			::template rebind<const void>);
; 264  : 
; 265  : 		// TEMPLATE STRUCT _Get_difference_type
; 266  : template<class _Ty>
; 267  : 	struct _Get_difference_type
; 268  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 269  : 		typename _Get_ptr_difference_type<
; 270  : 			typename _Get_pointer_type<_Ty>::type>::type);
; 271  : 
; 272  : 		// TEMPLATE STRUCT _Get_size_type
; 273  : template<class _Ty>
; 274  : 	struct _Get_size_type
; 275  : 	_GET_TYPE_OR_DEFAULT(size_type,
; 276  : 		typename make_unsigned<
; 277  : 			typename _Get_difference_type<_Ty>::type>::type);
; 278  : 
; 279  : 		// TEMPLATE STRUCT _Get_propagate_on_container_copy
; 280  : template<class _Ty>
; 281  : 	struct _Get_propagate_on_container_copy
; 282  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_copy_assignment,
; 283  : 		false_type);
; 284  : 
; 285  : 		// TEMPLATE STRUCT _Get_propagate_on_container_move
; 286  : template<class _Ty>
; 287  : 	struct _Get_propagate_on_container_move
; 288  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_move_assignment,
; 289  : 		false_type);
; 290  : 
; 291  : 		// TEMPLATE STRUCT _Get_propagate_on_container_swap
; 292  : template<class _Ty>
; 293  : 	struct _Get_propagate_on_container_swap
; 294  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_swap,
; 295  : 		false_type);
; 296  : 
; 297  : 		// STRUCT _Alloc_allocate
; 298  : struct _Alloc_allocate
; 299  : 	{	// determines allocator_traits<_Alloc>
; 300  : 		// ::allocate(size_type, const_void_pointer)
; 301  : 
; 302  : 	template<class _Alloc,
; 303  : 		class _Size_type,
; 304  : 		class _Const_void_pointer>
; 305  : 		static auto _Fn(int, _Alloc& _Al,
; 306  : 			_Size_type _Count,
; 307  : 			_Const_void_pointer _Hint)
; 308  : 			-> decltype(_Al.allocate(_Count, _Hint))
; 309  : 		{	// call allocator supplied version
; 310  : 		return (_Al.allocate(_Count, _Hint));
; 311  : 		}
; 312  : 
; 313  : 	template<class _Alloc,
; 314  : 		class _Size_type,
; 315  : 		class _Const_void_pointer>
; 316  : 		static auto _Fn(_Wrap_int, _Alloc& _Al,
; 317  : 			_Size_type _Count,
; 318  : 			_Const_void_pointer)
; 319  : 			-> decltype(_Al.allocate(_Count))
; 320  : 		{	// call default version
; 321  : 		return (_Al.allocate(_Count));
; 322  : 		}
; 323  : 	};
; 324  : 
; 325  : 		// STRUCT _Alloc_construct
; 326  : struct _Alloc_construct
; 327  : 	{	// determines allocator_traits<_Ty>
; 328  : 		// ::construct(_Ty&, _Objty *, _Types...)
; 329  : 
; 330  : 	template<class _Ty,
; 331  : 		class _Objty,
; 332  : 		class... _Types>
; 333  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
; 334  : 			_Types&&... _Args)
; 335  : 			-> decltype(
; 336  : 				_Al.construct(_Ptr, _STD forward<_Types>(_Args)...))
; 337  : 		{	// call allocator supplied version
; 338  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 339  : 		}
; 340  : 
; 341  : 	template<class _Ty,
; 342  : 		class _Objty,
; 343  : 		class... _Types>
; 344  : 		static auto _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
; 345  : 			_Types&&... _Args)
; 346  : 			-> void
; 347  : 		{	// call default version
; 348  : 		::new (static_cast<void *>(_Ptr))
; 349  : 			_Objty(_STD forward<_Types>(_Args)...);
; 350  : 		}
; 351  : 
; 352  : 	};
; 353  : 
; 354  : 		// STRUCT _Alloc_destroy
; 355  : struct _Alloc_destroy
; 356  : 	{	// determines allocator_traits<_Ty>::destroy(_Ty&, _Objty *)
; 357  : 	template<class _Ty,
; 358  : 		class _Objty>
; 359  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
; 360  : 			-> decltype(_Al.destroy(_Ptr))
; 361  : 		{	// call allocator supplied version
; 362  : 		_Al.destroy(_Ptr);
; 363  : 		}
; 364  : 
; 365  : 	template<class _Ty,
; 366  : 		class _Objty>
; 367  : 		static auto _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
; 368  : 			-> void
; 369  : 		{	// call default version
; 370  : 		_Ptr->~_Objty();
; 371  : 		}
; 372  : 	};
; 373  : 
; 374  : 		// STRUCT _Alloc_max_size
; 375  : struct _Alloc_max_size
; 376  : 	{	// determines allocator_traits<_Ty>::max_size(const _Ty&)
; 377  : 	template<class _Ty>
; 378  : 		static auto _Fn(int, const _Ty& _Al)
; 379  : 			-> decltype(_Al.max_size())
; 380  : 		{	// call allocator supplied version
; 381  : 		return (_Al.max_size());
; 382  : 		}
; 383  : 
; 384  : 	template<class _Ty>
; 385  : 		static auto _Fn(_Wrap_int, const _Ty&)
; 386  : 			-> typename _Get_size_type<_Ty>::type
; 387  : 		{	// call default version
; 388  : 		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
; 389  : 		}
; 390  : 	};
; 391  : 
; 392  : 		// STRUCT _Alloc_select
; 393  : struct _Alloc_select
; 394  : 	{	// determines allocator_traits<_Ty>
; 395  : 		// ::select_on_container_copy_construction(const _Alloc&)
; 396  : 
; 397  : 	template<class _Ty>
; 398  : 		static auto _Fn(int, const _Ty& _Al)
; 399  : 			-> decltype((_Ty)_Al.select_on_container_copy_construction())
; 400  : 		{	// call allocator supplied version
; 401  : 		return (_Al.select_on_container_copy_construction());
; 402  : 		}
; 403  : 
; 404  : 	template<class _Ty>
; 405  : 		static auto _Fn(_Wrap_int, const _Ty& _Al)
; 406  : 			-> _Ty
; 407  : 		{	// call default version
; 408  : 		return (_Al);
; 409  : 		}
; 410  : 	};
; 411  : 
; 412  : 		// TEMPLATE CLASS allocator_traits
; 413  : template<class _Alloc>
; 414  : 	struct allocator_traits
; 415  : 	{	// defines traits for allocators
; 416  : 	typedef allocator_traits<_Alloc> other;
; 417  : 
; 418  : 	typedef _Alloc allocator_type;
; 419  : 	typedef typename _Alloc::value_type value_type;
; 420  : 
; 421  : 	typedef typename _Get_pointer_type<_Alloc>::type
; 422  : 		pointer;
; 423  : 	typedef typename _Get_const_pointer_type<_Alloc>::type
; 424  : 		const_pointer;
; 425  : 	typedef typename _Get_void_pointer_type<_Alloc>::type
; 426  : 		void_pointer;
; 427  : 	typedef typename _Get_const_void_pointer_type<_Alloc>::type
; 428  : 		const_void_pointer;
; 429  : 
; 430  : 	typedef typename _Get_size_type<_Alloc>::type size_type;
; 431  : 	typedef typename _Get_difference_type<_Alloc>::type difference_type;
; 432  : 
; 433  : 	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
; 434  : 		propagate_on_container_copy_assignment;
; 435  : 	typedef typename _Get_propagate_on_container_move<_Alloc>::type
; 436  : 		propagate_on_container_move_assignment;
; 437  : 	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
; 438  : 		propagate_on_container_swap;
; 439  : 
; 440  : 	template<class _Other>
; 441  : 		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;
; 442  : 
; 443  : 	template<class _Other>
; 444  : 		using rebind_traits = allocator_traits<rebind_alloc<_Other> >;
; 445  : 
; 446  : 	static pointer allocate(_Alloc& _Al, size_type _Count)
; 447  : 		{	// allocate array of _Count elements
; 448  : 		return (_Al.allocate(_Count));
; 449  : 		}
; 450  : 
; 451  : 	static pointer allocate(_Alloc& _Al, size_type _Count,
; 452  : 		const_void_pointer _Hint)
; 453  : 		{	// allocate array of _Count elements, with hint
; 454  : 		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
; 455  : 		}
; 456  : 
; 457  : 	static void deallocate(_Alloc& _Al,
; 458  : 		pointer _Ptr, size_type _Count)
; 459  : 		{	// deallocate _Count elements at _Ptr
; 460  : 		_Al.deallocate(_Ptr, _Count);
; 461  : 		}
; 462  : 
; 463  : 	template<class _Ty,
; 464  : 		class... _Types>
; 465  : 		static void construct(_Alloc& _Al, _Ty *_Ptr,
; 466  : 			_Types&&... _Args)
; 467  : 		{	// construct _Ty(_Types...) at _Ptr
; 468  : 		_Alloc_construct::_Fn(0, _Al, _Ptr,
; 469  : 			_STD forward<_Types>(_Args)...);
; 470  : 		}
; 471  : 
; 472  : 
; 473  : 	template<class _Ty>
; 474  : 		static void destroy(_Alloc& _Al, _Ty *_Ptr)
; 475  : 		{	// destroy object at _Ptr
; 476  : 		_Alloc_destroy::_Fn(0, _Al, _Ptr);
; 477  : 		}
; 478  : 
; 479  : 	static size_type max_size(const _Alloc& _Al)
; 480  : 		{	// get maximum size
; 481  : 		return (_Alloc_max_size::_Fn(0, _Al));
; 482  : 		}
; 483  : 
; 484  : 	static _Alloc select_on_container_copy_construction(
; 485  : 		const _Alloc& _Al)
; 486  : 		{	// get allocator to use
; 487  : 		return (_Alloc_select::_Fn(0, _Al));
; 488  : 		}
; 489  : 	};
; 490  : 
; 491  : 		// TEMPLATE CLASS _Allocator_base
; 492  : template<class _Ty>
; 493  : 	struct _Allocator_base
; 494  : 	{	// base class for generic allocators
; 495  : 	typedef _Ty value_type;
; 496  : 	};
; 497  : 
; 498  : 		// TEMPLATE CLASS _Allocator_base<const _Ty>
; 499  : template<class _Ty>
; 500  : 	struct _Allocator_base<const _Ty>
; 501  : 	{	// base class for generic allocators for const _Ty
; 502  : 	typedef _Ty value_type;
; 503  : 	};
; 504  : 
; 505  : 		// TEMPLATE CLASS allocator
; 506  : template<class _Ty>
; 507  : 	class allocator
; 508  : 		: public _Allocator_base<_Ty>
; 509  : 	{	// generic allocator for objects of class _Ty
; 510  : public:
; 511  : 	typedef allocator<_Ty> other;
; 512  : 
; 513  : 	typedef _Allocator_base<_Ty> _Mybase;
; 514  : 	typedef typename _Mybase::value_type value_type;
; 515  : 
; 516  : 	typedef value_type *pointer;
; 517  : 	typedef const value_type *const_pointer;
; 518  : 	typedef void *void_pointer;
; 519  : 	typedef const void *const_void_pointer;
; 520  : 
; 521  : 	typedef value_type& reference;
; 522  : 	typedef const value_type& const_reference;
; 523  : 
; 524  : 	typedef size_t size_type;
; 525  : 	typedef ptrdiff_t difference_type;
; 526  : 
; 527  : 	typedef false_type propagate_on_container_copy_assignment;
; 528  : 	typedef false_type propagate_on_container_move_assignment;
; 529  : 	typedef false_type propagate_on_container_swap;
; 530  : 
; 531  : 	allocator<_Ty> select_on_container_copy_construction() const
; 532  : 		{	// return this allocator
; 533  : 		return (*this);
; 534  : 		}
; 535  : 
; 536  : 	template<class _Other>
; 537  : 		struct rebind
; 538  : 		{	// convert this type to allocator<_Other>
; 539  : 		typedef allocator<_Other> other;
; 540  : 		};
; 541  : 
; 542  : 	pointer address(reference _Val) const _NOEXCEPT
; 543  : 		{	// return address of mutable _Val
; 544  : 		return (_STD addressof(_Val));
; 545  : 		}
; 546  : 
; 547  : 	const_pointer address(const_reference _Val) const _NOEXCEPT
; 548  : 		{	// return address of nonmutable _Val
; 549  : 		return (_STD addressof(_Val));
; 550  : 		}
; 551  : 
; 552  : 	allocator() _THROW0()
; 553  : 		{	// construct default allocator (do nothing)
; 554  : 		}
; 555  : 
; 556  : 	allocator(const allocator<_Ty>&) _THROW0()
; 557  : 		{	// construct by copying (do nothing)
; 558  : 		}
; 559  : 
; 560  : 	template<class _Other>
; 561  : 		allocator(const allocator<_Other>&) _THROW0()
; 562  : 		{	// construct from a related allocator (do nothing)
; 563  : 		}
; 564  : 
; 565  : 	template<class _Other>
; 566  : 		allocator<_Ty>& operator=(const allocator<_Other>&)
; 567  : 		{	// assign from a related allocator (do nothing)
; 568  : 		return (*this);
; 569  : 		}
; 570  : 
; 571  : 	void deallocate(pointer _Ptr, size_type)
; 572  : 		{	// deallocate object at _Ptr, ignore size
; 573  : 		::operator delete(_Ptr);
; 574  : 		}
; 575  : 
; 576  : 	pointer allocate(size_type _Count)
; 577  : 		{	// allocate array of _Count elements
; 578  : 		return (_Allocate(_Count, (pointer)0));
; 579  : 		}
; 580  : 
; 581  : 	pointer allocate(size_type _Count, const void *)
; 582  : 		{	// allocate array of _Count elements, ignore hint
; 583  : 		return (allocate(_Count));
; 584  : 		}
; 585  : 
; 586  : 	void construct(_Ty *_Ptr)
; 587  : 		{	// default construct object at _Ptr
; 588  : 		::new ((void *)_Ptr) _Ty();
; 589  : 		}
; 590  : 
; 591  : 	void construct(_Ty *_Ptr, const _Ty& _Val)
; 592  : 		{	// construct object at _Ptr with value _Val
; 593  : 		::new ((void *)_Ptr) _Ty(_Val);
; 594  : 		}
; 595  : 
; 596  : 	template<class _Objty,
; 597  : 		class... _Types>
; 598  : 		void construct(_Objty *_Ptr, _Types&&... _Args)
; 599  : 		{	// construct _Objty(_Types...) at _Ptr
; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  0008f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00095	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File a:\vs\vc\include\deque

; 897  : 		this->_Myproxy->_Mycont = this;

  0009c	8b 07		 mov	 eax, DWORD PTR [edi]
  0009e	89 38		 mov	 DWORD PTR [eax], edi
; File a:\from c\desktop\serwer\source\source client\client\eterpythonlib\pythongraphic.cpp

; 612  : {

  000a0	8d 4e 64	 lea	 ecx, DWORD PTR [esi+100]
  000a3	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000a7	e8 00 00 00 00	 call	 ??0CCullingManager@@QAE@XZ ; CCullingManager::CCullingManager

; 613  : 	m_lightColor = GetColor(1.0f, 1.0f, 1.0f);

  000ac	83 ec 10	 sub	 esp, 16			; 00000010H
  000af	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000b3	8b ce		 mov	 ecx, esi
  000b5	c7 44 24 0c 00
	00 80 3f	 mov	 DWORD PTR [esp+12], 1065353216 ; 3f800000H
  000bd	c7 44 24 08 00
	00 80 3f	 mov	 DWORD PTR [esp+8], 1065353216 ; 3f800000H
  000c5	c7 44 24 04 00
	00 80 3f	 mov	 DWORD PTR [esp+4], 1065353216 ; 3f800000H
  000cd	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  000d4	e8 00 00 00 00	 call	 ?GetColor@CGraphicBase@@QAEKMMMM@Z ; CGraphicBase::GetColor

; 614  : 	m_darkColor = GetColor(0.0f, 0.0f, 0.0f);

  000d9	83 ec 10	 sub	 esp, 16			; 00000010H
  000dc	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000df	8b ce		 mov	 ecx, esi
  000e1	c7 44 24 0c 00
	00 80 3f	 mov	 DWORD PTR [esp+12], 1065353216 ; 3f800000H
  000e9	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR [esp+8], 0
  000f1	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR [esp+4], 0
  000f9	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  00100	e8 00 00 00 00	 call	 ?GetColor@CGraphicBase@@QAEKMMMM@Z ; CGraphicBase::GetColor
  00105	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00108	0f 57 c0	 xorps	 xmm0, xmm0

; 615  : 	
; 616  : 	memset(&m_backupViewport, 0, sizeof(D3DVIEWPORT8));

  0010b	f3 0f 7f 86 84
	00 00 00	 movdqu	 XMMWORD PTR [esi+132], xmm0

; 617  : 
; 618  : 	m_fOrthoDepth = 1000.0f;
; 619  : }

  00113	8b c6		 mov	 eax, esi
  00115	66 0f d6 86 94
	00 00 00	 movq	 QWORD PTR [esi+148], xmm0
  0011d	c7 86 9c 00 00
	00 00 00 7a 44	 mov	 DWORD PTR [esi+156], 1148846080 ; 447a0000H
  00127	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0012a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00131	59		 pop	 ecx
  00132	5f		 pop	 edi
  00133	5e		 pop	 esi
  00134	8b e5		 mov	 esp, ebp
  00136	5d		 pop	 ebp
  00137	c3		 ret	 0
$LN65@CPythonGra:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CPythonGraphic@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
__unwindfunclet$??0CPythonGraphic@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$CSingleton@VCPythonGraphic@@@@UAE@XZ ; CSingleton<CPythonGraphic>::~CSingleton<CPythonGraphic>
__unwindfunclet$??0CPythonGraphic@@QAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 10	 add	 ecx, 16			; 00000010H
  00019	e9 00 00 00 00	 jmp	 ??1?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??0CPythonGraphic@@QAE@XZ$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 64	 add	 ecx, 100		; 00000064H
  00024	e9 00 00 00 00	 jmp	 ??1CCullingManager@@UAE@XZ ; CCullingManager::~CCullingManager
__ehhandler$??0CPythonGraphic@@QAE@XZ:
  00029	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00030	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CPythonGraphic@@QAE@XZ
  0003f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CPythonGraphic@@QAE@XZ ENDP				; CPythonGraphic::CPythonGraphic
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterbase\singleton.h
;	COMDAT ??_G?$CSingleton@VCPythonGraphic@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CSingleton@VCPythonGraphic@@@@UAEPAXI@Z PROC	; CSingleton<CPythonGraphic>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 19   : 	{ 

  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCPythonGraphic@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0; 

  00010	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A, 0 ; CSingleton<CPythonGraphic>::ms_singleton
  0001a	74 09		 je	 SHORT $LN6@scalar
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$LN6@scalar:
  00025	8b c6		 mov	 eax, esi
  00027	5e		 pop	 esi
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
??_G?$CSingleton@VCPythonGraphic@@@@UAEPAXI@Z ENDP	; CSingleton<CPythonGraphic>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterbase\singleton.h
;	COMDAT ?Instance@?$CSingleton@VCPythonGraphic@@@@SAAAVCPythonGraphic@@XZ
_TEXT	SEGMENT
?Instance@?$CSingleton@VCPythonGraphic@@@@SAAAVCPythonGraphic@@XZ PROC ; CSingleton<CPythonGraphic>::Instance, COMDAT

; 26   : 		assert(ms_singleton);
; 27   : 		return (*ms_singleton);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A ; CSingleton<CPythonGraphic>::ms_singleton

; 28   : 	}

  00005	c3		 ret	 0
?Instance@?$CSingleton@VCPythonGraphic@@@@SAAAVCPythonGraphic@@XZ ENDP ; CSingleton<CPythonGraphic>::Instance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterbase\singleton.h
;	COMDAT ??1?$CSingleton@VCPythonGraphic@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CSingleton@VCPythonGraphic@@@@UAE@XZ PROC		; CSingleton<CPythonGraphic>::~CSingleton<CPythonGraphic>, COMDAT
; _this$ = ecx

; 19   : 	{ 

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCPythonGraphic@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0; 

  00006	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A, 0 ; CSingleton<CPythonGraphic>::ms_singleton

; 22   : 	}

  00010	c3		 ret	 0
??1?$CSingleton@VCPythonGraphic@@@@UAE@XZ ENDP		; CSingleton<CPythonGraphic>::~CSingleton<CPythonGraphic>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\eterbase\singleton.h
;	COMDAT ??0?$CSingleton@VCPythonGraphic@@@@QAE@XZ
_TEXT	SEGMENT
??0?$CSingleton@VCPythonGraphic@@@@QAE@XZ PROC		; CSingleton<CPythonGraphic>::CSingleton<CPythonGraphic>, COMDAT
; _this$ = ecx

; 12   : 	{ 
; 13   : 		assert(!ms_singleton);
; 14   : 		int offset = (int) (T*) 1 - (int) (CSingleton <T>*) (T*) 1; 
; 15   : 		ms_singleton = (T*) ((int) this + offset);

  00000	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCPythonGraphic@@@@6B@
  00009	a3 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A, eax ; CSingleton<CPythonGraphic>::ms_singleton

; 16   : 	} 

  0000e	8b c1		 mov	 eax, ecx
  00010	c3		 ret	 0
??0?$CSingleton@VCPythonGraphic@@@@QAE@XZ ENDP		; CSingleton<CPythonGraphic>::CSingleton<CPythonGraphic>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0SPDTVertex@@QAE@XZ
_TEXT	SEGMENT
??0SPDTVertex@@QAE@XZ PROC				; SPDTVertex::SPDTVertex, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0SPDTVertex@@QAE@XZ ENDP				; SPDTVertex::SPDTVertex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
_TEXT	SEGMENT
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ PROC ; std::_Iterator_base12::_Getcont, COMDAT
; _this$ = ecx

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	85 c0		 test	 eax, eax
  00004	75 01		 jne	 SHORT $LN3@Getcont

; 184  : 		}

  00006	c3		 ret	 0
$LN3@Getcont:

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00007	8b 00		 mov	 eax, DWORD PTR [eax]

; 184  : 		}

  00009	c3		 ret	 0
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ENDP ; std::_Iterator_base12::_Getcont
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
__Parent$ = 8						; size = 4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt, COMDAT
; _this$ = ecx

; 148  : 		{	// adopt this iterator by parent

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 149  : 		if (_Parent == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parent$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 04		 je	 SHORT $LN1@Adopt

; 150  : 			{	// no future parent, just disown current parent
; 151  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 152  : 			_Lockit _Lock(_LOCK_DEBUG);
; 153  : 			_Orphan_me();
; 154  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 155  : 			}
; 156  : 		else
; 157  : 			{	// have a parent, do adoption
; 158  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 159  : 
; 160  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 161  : 			if (_Myproxy != _Parent_proxy)
; 162  : 				{	// change parentage
; 163  : 				_Lockit _Lock(_LOCK_DEBUG);
; 164  : 				_Orphan_me();
; 165  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 166  : 				_Parent_proxy->_Myfirstiter = this;
; 167  : 				_Myproxy = _Parent_proxy;
; 168  : 				}
; 169  : 
; 170  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 171  : 			_Myproxy = _Parent_proxy;

  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	89 01		 mov	 DWORD PTR [ecx], eax
$LN1@Adopt:

; 172  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 173  : 			}
; 174  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??1_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
??1_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::~_Iterator_base12, COMDAT
; _this$ = ecx

; 141  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 142  : 		_Lockit _Lock(_LOCK_DEBUG);
; 143  : 		_Orphan_me();
; 144  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 145  : 		}

  00000	c3		 ret	 0
??1_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::~_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z PROC		; std::_Iterator_base12::operator=, COMDAT
; _this$ = ecx

; 124  : 		{	// assign an iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 125  : 		if (_Myproxy == _Right._Myproxy)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	39 01		 cmp	 DWORD PTR [ecx], eax
  0000a	74 0e		 je	 SHORT $LN12@operator

; 126  : 			;
; 127  : 		else if (_Right._Myproxy != 0)

  0000c	85 c0		 test	 eax, eax
  0000e	74 0a		 je	 SHORT $LN12@operator

; 128  : 			_Adopt(_Right._Myproxy->_Mycont);

  00010	8b 00		 mov	 eax, DWORD PTR [eax]

; 138  : 
; 139  : 	~_Iterator_base12() _NOEXCEPT
; 140  : 		{	// destroy the iterator
; 141  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 142  : 		_Lockit _Lock(_LOCK_DEBUG);
; 143  : 		_Orphan_me();
; 144  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 145  : 		}
; 146  : 
; 147  : 	void _Adopt(const _Container_base12 *_Parent)
; 148  : 		{	// adopt this iterator by parent
; 149  : 		if (_Parent == 0)

  00012	85 c0		 test	 eax, eax
  00014	74 04		 je	 SHORT $LN12@operator

; 150  : 			{	// no future parent, just disown current parent
; 151  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 152  : 			_Lockit _Lock(_LOCK_DEBUG);
; 153  : 			_Orphan_me();
; 154  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 155  : 			}
; 156  : 		else
; 157  : 			{	// have a parent, do adoption
; 158  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 159  : 
; 160  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 161  : 			if (_Myproxy != _Parent_proxy)
; 162  : 				{	// change parentage
; 163  : 				_Lockit _Lock(_LOCK_DEBUG);
; 164  : 				_Orphan_me();
; 165  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 166  : 				_Parent_proxy->_Myfirstiter = this;
; 167  : 				_Myproxy = _Parent_proxy;
; 168  : 				}
; 169  : 
; 170  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 171  : 			_Myproxy = _Parent_proxy;

  00016	8b 00		 mov	 eax, DWORD PTR [eax]
  00018	89 01		 mov	 DWORD PTR [ecx], eax
$LN12@operator:

; 129  : 		else
; 130  : 			{	// becoming invalid, disown current parent
; 131  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 132  : 			_Lockit _Lock(_LOCK_DEBUG);
; 133  : 			_Orphan_me();
; 134  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 135  : 			}
; 136  : 		return (*this);

  0001a	8b c1		 mov	 eax, ecx

; 137  : 		}

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ENDP		; std::_Iterator_base12::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??0_Iterator_base12@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0_Iterator_base12@std@@QAE@ABU01@@Z PROC		; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 119  : 		{	// copy an iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 122  : 
; 123  : 	_Iterator_base12& operator=(const _Iterator_base12& _Right)
; 124  : 		{	// assign an iterator
; 125  : 		if (_Myproxy == _Right._Myproxy)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]

; 119  : 		{	// copy an iterator

  00006	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0000c	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 122  : 
; 123  : 	_Iterator_base12& operator=(const _Iterator_base12& _Right)
; 124  : 		{	// assign an iterator
; 125  : 		if (_Myproxy == _Right._Myproxy)

  00013	8b 00		 mov	 eax, DWORD PTR [eax]
  00015	85 c0		 test	 eax, eax
  00017	74 0a		 je	 SHORT $LN15@Iterator_b

; 126  : 			;
; 127  : 		else if (_Right._Myproxy != 0)
; 128  : 			_Adopt(_Right._Myproxy->_Mycont);

  00019	8b 00		 mov	 eax, DWORD PTR [eax]

; 129  : 		else
; 130  : 			{	// becoming invalid, disown current parent
; 131  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 132  : 			_Lockit _Lock(_LOCK_DEBUG);
; 133  : 			_Orphan_me();
; 134  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 135  : 			}
; 136  : 		return (*this);
; 137  : 		}
; 138  : 
; 139  : 	~_Iterator_base12() _NOEXCEPT
; 140  : 		{	// destroy the iterator
; 141  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 142  : 		_Lockit _Lock(_LOCK_DEBUG);
; 143  : 		_Orphan_me();
; 144  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 145  : 		}
; 146  : 
; 147  : 	void _Adopt(const _Container_base12 *_Parent)
; 148  : 		{	// adopt this iterator by parent
; 149  : 		if (_Parent == 0)

  0001b	85 c0		 test	 eax, eax
  0001d	74 04		 je	 SHORT $LN15@Iterator_b

; 150  : 			{	// no future parent, just disown current parent
; 151  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 152  : 			_Lockit _Lock(_LOCK_DEBUG);
; 153  : 			_Orphan_me();
; 154  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 155  : 			}
; 156  : 		else
; 157  : 			{	// have a parent, do adoption
; 158  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 159  : 
; 160  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 161  : 			if (_Myproxy != _Parent_proxy)
; 162  : 				{	// change parentage
; 163  : 				_Lockit _Lock(_LOCK_DEBUG);
; 164  : 				_Orphan_me();
; 165  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 166  : 				_Parent_proxy->_Myfirstiter = this;
; 167  : 				_Myproxy = _Parent_proxy;
; 168  : 				}
; 169  : 
; 170  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 171  : 			_Myproxy = _Parent_proxy;

  0001f	8b 00		 mov	 eax, DWORD PTR [eax]
  00021	89 01		 mov	 DWORD PTR [ecx], eax
$LN15@Iterator_b:

; 120  : 		*this = _Right;
; 121  : 		}

  00023	8b c1		 mov	 eax, ecx
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??0_Iterator_base12@std@@QAE@ABU01@@Z ENDP		; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??0_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
??0_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 114  : 		{	// construct orphaned iterator

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 115  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c3		 ret	 0
??0_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx

; 215  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 216  : 	if (_Myproxy != 0)
; 217  : 		{	// proxy allocated, drain it
; 218  : 		_Lockit _Lock(_LOCK_DEBUG);
; 219  : 
; 220  : 		for (_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;
; 221  : 			*_Pnext != 0; *_Pnext = (*_Pnext)->_Mynextiter)
; 222  : 			(*_Pnext)->_Myproxy = 0;
; 223  : 		_Myproxy->_Myfirstiter = 0;
; 224  : 		}
; 225  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 226  : 	}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??1_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
??1_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::~_Container_base12, COMDAT
; _this$ = ecx

; 95   : 		_Orphan_all();
; 96   : 		}

  00000	c3		 ret	 0
??1_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::~_Container_base12
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx

; 80   : 		{	// construct childless container

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 81   : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ??0_Container_proxy@std@@QAE@XZ
_TEXT	SEGMENT
??0_Container_proxy@std@@QAE@XZ PROC			; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 68   : 		{	// construct from pointers

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 69   : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c3		 ret	 0
??0_Container_proxy@std@@QAE@XZ ENDP			; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 44   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 65   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\vs\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 60   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 61   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
;	COMDAT ??BD3DXCOLOR@@QAEAAU_D3DCOLORVALUE@@XZ
_TEXT	SEGMENT
??BD3DXCOLOR@@QAEAAU_D3DCOLORVALUE@@XZ PROC		; D3DXCOLOR::operator _D3DCOLORVALUE &, COMDAT
; _this$ = ecx

; 969  :     return *((D3DCOLORVALUE *) &r);

  00000	8b c1		 mov	 eax, ecx

; 970  : }

  00002	c3		 ret	 0
??BD3DXCOLOR@@QAEAAU_D3DCOLORVALUE@@XZ ENDP		; D3DXCOLOR::operator _D3DCOLORVALUE &
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
;	COMDAT ??BD3DXCOLOR@@QBEKXZ
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
??BD3DXCOLOR@@QBEKXZ PROC				; D3DXCOLOR::operator unsigned long, COMDAT
; _this$ = ecx

; 930  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00004	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@437f0000
  0000c	0f 57 c9	 xorps	 xmm1, xmm1
  0000f	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3f000000
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	8b f1		 mov	 esi, ecx
  0001b	57		 push	 edi
  0001c	89 75 fc	 mov	 DWORD PTR _this$1$[ebp], esi
  0001f	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00023	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  0002a	72 07		 jb	 SHORT $LN5@operator
  0002c	bb ff 00 00 00	 mov	 ebx, 255		; 000000ffH
  00031	eb 2b		 jmp	 SHORT $LN4@operator
$LN5@operator:
  00033	0f 2f c8	 comiss	 xmm1, xmm0
  00036	72 04		 jb	 SHORT $LN3@operator
  00038	33 db		 xor	 ebx, ebx
  0003a	eb 22		 jmp	 SHORT $LN4@operator
$LN3@operator:
  0003c	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00040	f3 0f 58 c4	 addss	 xmm0, xmm4
  00044	e8 00 00 00 00	 call	 __ftoui3
  00049	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@437f0000
  00051	8b d8		 mov	 ebx, eax
  00053	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3f000000
  0005b	0f 57 c9	 xorps	 xmm1, xmm1
$LN4@operator:

; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  0005e	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  00063	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  0006a	72 07		 jb	 SHORT $LN9@operator
  0006c	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  00071	eb 18		 jmp	 SHORT $LN8@operator
$LN9@operator:
  00073	0f 2f c8	 comiss	 xmm1, xmm0
  00076	72 04		 jb	 SHORT $LN7@operator
  00078	33 ff		 xor	 edi, edi
  0007a	eb 0f		 jmp	 SHORT $LN8@operator
$LN7@operator:
  0007c	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00080	f3 0f 58 c4	 addss	 xmm0, xmm4
  00084	e8 00 00 00 00	 call	 __ftoui3
  00089	8b f8		 mov	 edi, eax
$LN8@operator:

; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  0008b	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  00090	0f 57 c9	 xorps	 xmm1, xmm1
  00093	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  0009a	72 07		 jb	 SHORT $LN13@operator
  0009c	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  000a1	eb 23		 jmp	 SHORT $LN12@operator
$LN13@operator:
  000a3	0f 2f c8	 comiss	 xmm1, xmm0
  000a6	72 04		 jb	 SHORT $LN11@operator
  000a8	33 f6		 xor	 esi, esi
  000aa	eb 1a		 jmp	 SHORT $LN12@operator
$LN11@operator:
  000ac	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  000b4	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  000bc	e8 00 00 00 00	 call	 __ftoui3
  000c1	8b f0		 mov	 esi, eax
  000c3	0f 57 c9	 xorps	 xmm1, xmm1
$LN12@operator:

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  000c6	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  000c9	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  000ce	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  000d5	72 07		 jb	 SHORT $LN17@operator
  000d7	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  000dc	eb 1e		 jmp	 SHORT $LN16@operator
$LN17@operator:
  000de	0f 2f c8	 comiss	 xmm1, xmm0
  000e1	72 04		 jb	 SHORT $LN15@operator
  000e3	33 c0		 xor	 eax, eax
  000e5	eb 15		 jmp	 SHORT $LN16@operator
$LN15@operator:
  000e7	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  000ef	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  000f7	e8 00 00 00 00	 call	 __ftoui3
$LN16@operator:

; 935  : 
; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  000fc	c1 e0 08	 shl	 eax, 8
  000ff	0b c3		 or	 eax, ebx
  00101	c1 e0 08	 shl	 eax, 8
  00104	0b c7		 or	 eax, edi
  00106	c1 e0 08	 shl	 eax, 8
  00109	5f		 pop	 edi
  0010a	0b c6		 or	 eax, esi
  0010c	5e		 pop	 esi
  0010d	5b		 pop	 ebx

; 937  : }

  0010e	8b e5		 mov	 esp, ebp
  00110	5d		 pop	 ebp
  00111	c3		 ret	 0
??BD3DXCOLOR@@QBEKXZ ENDP				; D3DXCOLOR::operator unsigned long
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
;	COMDAT ??0D3DXCOLOR@@QAE@MMMM@Z
_TEXT	SEGMENT
_fr$ = 8						; size = 4
_fg$ = 12						; size = 4
_fb$ = 16						; size = 4
_fa$ = 20						; size = 4
??0D3DXCOLOR@@QAE@MMMM@Z PROC				; D3DXCOLOR::D3DXCOLOR, COMDAT
; _this$ = ecx

; 919  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 920  :     r = fr;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fr$[ebp]

; 921  :     g = fg;
; 922  :     b = fb;
; 923  :     a = fa;
; 924  : }

  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fg$[ebp]
  00013	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0
  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fb$[ebp]
  0001d	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0
  00022	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _fa$[ebp]
  00027	f3 0f 11 41 0c	 movss	 DWORD PTR [ecx+12], xmm0
  0002c	5d		 pop	 ebp
  0002d	c2 10 00	 ret	 16			; 00000010H
??0D3DXCOLOR@@QAE@MMMM@Z ENDP				; D3DXCOLOR::D3DXCOLOR
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 177  :     D3DXMATRIX() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 179  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 180  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]

; 181  :     y = fy;
; 182  :     z = fz;
; 183  : }

  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0
  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 89   :     D3DXVECTOR3() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.inl
;	COMDAT ??0D3DXVECTOR2@@QAE@MM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
??0D3DXVECTOR2@@QAE@MM@Z PROC				; D3DXVECTOR2::D3DXVECTOR2, COMDAT
; _this$ = ecx

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 41   :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]

; 42   :     y = fy;
; 43   : }

  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0
  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
??0D3DXVECTOR2@@QAE@MM@Z ENDP				; D3DXVECTOR2::D3DXVECTOR2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\extern\include\d3dx8math.h
;	COMDAT ??0D3DXVECTOR2@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR2@@QAE@XZ PROC				; D3DXVECTOR2::D3DXVECTOR2, COMDAT
; _this$ = ecx

; 46   :     D3DXVECTOR2() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR2@@QAE@XZ ENDP				; D3DXVECTOR2::D3DXVECTOR2
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	4e		 dec	 esi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	57		 push	 edi
  0000f	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b cf		 mov	 ecx, edi
  00014	ff d3		 call	 ebx
  00016	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  00019	4e		 dec	 esi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5f		 pop	 edi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
