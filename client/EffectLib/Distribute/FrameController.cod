; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	A:\From C\Desktop\Serwer\Source\Source Client\client\EffectLib\FrameController.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0CFrameController@@QAE@XZ			; CFrameController::CFrameController
PUBLIC	??1CFrameController@@UAE@XZ			; CFrameController::~CFrameController
PUBLIC	?Clear@CFrameController@@QAEXXZ			; CFrameController::Clear
PUBLIC	?Update@CFrameController@@QAEXM@Z		; CFrameController::Update
PUBLIC	?SetCurrentFrame@CFrameController@@QAEXK@Z	; CFrameController::SetCurrentFrame
PUBLIC	?GetCurrentFrame@CFrameController@@QAEEXZ	; CFrameController::GetCurrentFrame
PUBLIC	?SetMaxFrame@CFrameController@@QAEXK@Z		; CFrameController::SetMaxFrame
PUBLIC	?SetFrameTime@CFrameController@@QAEXM@Z		; CFrameController::SetFrameTime
PUBLIC	?SetStartFrame@CFrameController@@QAEXK@Z	; CFrameController::SetStartFrame
PUBLIC	?SetLoopFlag@CFrameController@@QAEXH@Z		; CFrameController::SetLoopFlag
PUBLIC	?SetLoopCount@CFrameController@@QAEXH@Z		; CFrameController::SetLoopCount
PUBLIC	?SetActive@CFrameController@@QAEXH@Z		; CFrameController::SetActive
PUBLIC	?isActive@CFrameController@@QAEHK@Z		; CFrameController::isActive
PUBLIC	??_GCFrameController@@UAEPAXI@Z			; CFrameController::`scalar deleting destructor'
PUBLIC	??_7CFrameController@@6B@			; CFrameController::`vftable'
PUBLIC	??_R4CFrameController@@6B@			; CFrameController::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCFrameController@@@8			; CFrameController `RTTI Type Descriptor'
PUBLIC	??_R3CFrameController@@8			; CFrameController::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CFrameController@@8			; CFrameController::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CFrameController@@8		; CFrameController::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??_ECFrameController@@UAEPAXI@Z:PROC		; CFrameController::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__fltused:DWORD
;	COMDAT ??_R1A@?0A@EA@CFrameController@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CFrameController@@8 DD FLAT:??_R0?AVCFrameController@@@8 ; CFrameController::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CFrameController@@8
rdata$r	ENDS
;	COMDAT ??_R2CFrameController@@8
rdata$r	SEGMENT
??_R2CFrameController@@8 DD FLAT:??_R1A@?0A@EA@CFrameController@@8 ; CFrameController::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CFrameController@@8
rdata$r	SEGMENT
??_R3CFrameController@@8 DD 00H				; CFrameController::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CFrameController@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCFrameController@@@8
data$r	SEGMENT
??_R0?AVCFrameController@@@8 DD FLAT:??_7type_info@@6B@	; CFrameController `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCFrameController@@', 00H
data$r	ENDS
;	COMDAT ??_R4CFrameController@@6B@
rdata$r	SEGMENT
??_R4CFrameController@@6B@ DD 00H			; CFrameController::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCFrameController@@@8
	DD	FLAT:??_R3CFrameController@@8
rdata$r	ENDS
;	COMDAT ??_7CFrameController@@6B@
CONST	SEGMENT
??_7CFrameController@@6B@ DD FLAT:??_R4CFrameController@@6B@ ; CFrameController::`vftable'
	DD	FLAT:??_ECFrameController@@UAEPAXI@Z
CONST	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCFrameController@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCFrameController@@UAEPAXI@Z PROC			; CFrameController::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CFrameController@@UAE@XZ ; CFrameController::~CFrameController
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCFrameController@@UAEPAXI@Z ENDP			; CFrameController::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\effectlib\framecontroller.cpp
;	COMDAT ?isActive@CFrameController@@QAEHK@Z
_TEXT	SEGMENT
_dwMainFrame$ = 8					; size = 4
?isActive@CFrameController@@QAEHK@Z PROC		; CFrameController::isActive, COMDAT
; _this$ = ecx

; 79   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 80   : 	if (dwMainFrame < m_dwStartFrame)

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwMainFrame$[ebp]
  00006	3b 41 20	 cmp	 eax, DWORD PTR [ecx+32]
  00009	73 06		 jae	 SHORT $LN1@isActive

; 81   : 		return FALSE;

  0000b	33 c0		 xor	 eax, eax

; 84   : }

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
$LN1@isActive:

; 82   : 
; 83   : 	return m_isActive;

  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 84   : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
?isActive@CFrameController@@QAEHK@Z ENDP		; CFrameController::isActive
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\effectlib\framecontroller.cpp
;	COMDAT ?SetActive@CFrameController@@QAEXH@Z
_TEXT	SEGMENT
_bFlag$ = 8						; size = 4
?SetActive@CFrameController@@QAEXH@Z PROC		; CFrameController::SetActive, COMDAT
; _this$ = ecx

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 75   : 	m_isActive = bFlag;

  00003	8b 45 08	 mov	 eax, DWORD PTR _bFlag$[ebp]
  00006	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 76   : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetActive@CFrameController@@QAEXH@Z ENDP		; CFrameController::SetActive
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\effectlib\framecontroller.cpp
;	COMDAT ?SetLoopCount@CFrameController@@QAEXH@Z
_TEXT	SEGMENT
_iLoopCount$ = 8					; size = 4
?SetLoopCount@CFrameController@@QAEXH@Z PROC		; CFrameController::SetLoopCount, COMDAT
; _this$ = ecx

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 70   : 	m_iLoopCount = iLoopCount;

  00003	8b 45 08	 mov	 eax, DWORD PTR _iLoopCount$[ebp]
  00006	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 71   : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetLoopCount@CFrameController@@QAEXH@Z ENDP		; CFrameController::SetLoopCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\effectlib\framecontroller.cpp
;	COMDAT ?SetLoopFlag@CFrameController@@QAEXH@Z
_TEXT	SEGMENT
_bFlag$ = 8						; size = 4
?SetLoopFlag@CFrameController@@QAEXH@Z PROC		; CFrameController::SetLoopFlag, COMDAT
; _this$ = ecx

; 64   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 65   : 	m_isLoop = bFlag;

  00003	8b 45 08	 mov	 eax, DWORD PTR _bFlag$[ebp]
  00006	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 66   : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetLoopFlag@CFrameController@@QAEXH@Z ENDP		; CFrameController::SetLoopFlag
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\effectlib\framecontroller.cpp
;	COMDAT ?SetStartFrame@CFrameController@@QAEXK@Z
_TEXT	SEGMENT
_dwStartFrame$ = 8					; size = 4
?SetStartFrame@CFrameController@@QAEXK@Z PROC		; CFrameController::SetStartFrame, COMDAT
; _this$ = ecx

; 59   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 60   : 	m_dwStartFrame = dwStartFrame;

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwStartFrame$[ebp]
  00006	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 61   : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetStartFrame@CFrameController@@QAEXK@Z ENDP		; CFrameController::SetStartFrame
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\effectlib\framecontroller.cpp
;	COMDAT ?SetFrameTime@CFrameController@@QAEXM@Z
_TEXT	SEGMENT
_fTime$ = 8						; size = 4
?SetFrameTime@CFrameController@@QAEXM@Z PROC		; CFrameController::SetFrameTime, COMDAT
; _this$ = ecx

; 54   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 55   : 	m_fFrameTime = fTime;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTime$[ebp]
  00008	f3 0f 11 41 1c	 movss	 DWORD PTR [ecx+28], xmm0

; 56   : 	m_fLastFrameTime = fTime;

  0000d	f3 0f 11 41 0c	 movss	 DWORD PTR [ecx+12], xmm0

; 57   : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?SetFrameTime@CFrameController@@QAEXM@Z ENDP		; CFrameController::SetFrameTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\effectlib\framecontroller.cpp
;	COMDAT ?SetMaxFrame@CFrameController@@QAEXK@Z
_TEXT	SEGMENT
_dwMaxFrame$ = 8					; size = 4
?SetMaxFrame@CFrameController@@QAEXK@Z PROC		; CFrameController::SetMaxFrame, COMDAT
; _this$ = ecx

; 50   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 51   : 	m_dwMaxFrame = dwMaxFrame;

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwMaxFrame$[ebp]
  00006	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 52   : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetMaxFrame@CFrameController@@QAEXK@Z ENDP		; CFrameController::SetMaxFrame
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\effectlib\framecontroller.cpp
;	COMDAT ?GetCurrentFrame@CFrameController@@QAEEXZ
_TEXT	SEGMENT
?GetCurrentFrame@CFrameController@@QAEEXZ PROC		; CFrameController::GetCurrentFrame, COMDAT
; _this$ = ecx

; 46   : 	return m_dwcurFrame;

  00000	8a 41 08	 mov	 al, BYTE PTR [ecx+8]

; 47   : }

  00003	c3		 ret	 0
?GetCurrentFrame@CFrameController@@QAEEXZ ENDP		; CFrameController::GetCurrentFrame
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\effectlib\framecontroller.cpp
;	COMDAT ?SetCurrentFrame@CFrameController@@QAEXK@Z
_TEXT	SEGMENT
_dwFrame$ = 8						; size = 4
?SetCurrentFrame@CFrameController@@QAEXK@Z PROC		; CFrameController::SetCurrentFrame, COMDAT
; _this$ = ecx

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 41   : 	m_dwcurFrame = dwFrame;

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwFrame$[ebp]
  00006	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 42   : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetCurrentFrame@CFrameController@@QAEXK@Z ENDP		; CFrameController::SetCurrentFrame
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\effectlib\framecontroller.cpp
;	COMDAT ?Update@CFrameController@@QAEXM@Z
_TEXT	SEGMENT
_fElapsedTime$ = 8					; size = 4
?Update@CFrameController@@QAEXM@Z PROC			; CFrameController::Update, COMDAT
; _this$ = ecx

; 5    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 6    : 	m_fLastFrameTime -= fElapsedTime;

  00003	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [ecx+12]

; 7    : 
; 8    : 	for (int i = 0; i < 20; ++i)

  00008	33 d2		 xor	 edx, edx
  0000a	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _fElapsedTime$[ebp]
  0000f	0f 57 d2	 xorps	 xmm2, xmm2
  00012	f3 0f 11 41 0c	 movss	 DWORD PTR [ecx+12], xmm0
  00017	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL9@Update:

; 9    : 	{
; 10   : 		if (m_fLastFrameTime < 0.0f)

  00020	f3 0f 10 49 0c	 movss	 xmm1, DWORD PTR [ecx+12]
  00025	0f 2f d1	 comiss	 xmm2, xmm1
  00028	76 57		 jbe	 SHORT $LN16@Update

; 11   : 		{
; 12   : 			m_fLastFrameTime += m_fFrameTime;

  0002a	f3 0f 10 41 1c	 movss	 xmm0, DWORD PTR [ecx+28]

; 13   : 			++m_dwcurFrame;

  0002f	ff 41 08	 inc	 DWORD PTR [ecx+8]
  00032	f3 0f 58 c1	 addss	 xmm0, xmm1
  00036	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00039	f3 0f 11 41 0c	 movss	 DWORD PTR [ecx+12], xmm0

; 14   : 
; 15   : 			if (m_dwcurFrame >= m_dwMaxFrame)

  0003e	3b 41 18	 cmp	 eax, DWORD PTR [ecx+24]
  00041	72 1f		 jb	 SHORT $LN8@Update

; 16   : 			{
; 17   : 				if (m_isLoop && --m_iLoopCount!=0)

  00043	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  00047	74 23		 je	 SHORT $LN4@Update
  00049	ff 49 10	 dec	 DWORD PTR [ecx+16]
  0004c	74 1e		 je	 SHORT $LN4@Update

; 18   : 				{
; 19   : 					if (m_iLoopCount<0)

  0004e	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00052	7d 07		 jge	 SHORT $LN3@Update

; 20   : 						m_iLoopCount = 0;

  00054	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
$LN3@Update:

; 21   : 					m_dwcurFrame = 0;

  0005b	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
$LN8@Update:

; 7    : 
; 8    : 	for (int i = 0; i < 20; ++i)

  00062	42		 inc	 edx
  00063	83 fa 14	 cmp	 edx, 20			; 00000014H
  00066	7c b8		 jl	 SHORT $LL9@Update

; 28   : 					return;
; 29   : 				}
; 30   : 			}
; 31   : 		}
; 32   : 		else
; 33   : 		{
; 34   : 			break;
; 35   : 		}
; 36   : 	}
; 37   : }

  00068	5d		 pop	 ebp
  00069	c2 04 00	 ret	 4
$LN4@Update:

; 22   : 				}
; 23   : 				else
; 24   : 				{
; 25   : 					m_iLoopCount = 1;

  0006c	c7 41 10 01 00
	00 00		 mov	 DWORD PTR [ecx+16], 1

; 26   : 					m_dwcurFrame = 0;

  00073	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 27   : 					m_isActive = FALSE;

  0007a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
$LN16@Update:

; 28   : 					return;
; 29   : 				}
; 30   : 			}
; 31   : 		}
; 32   : 		else
; 33   : 		{
; 34   : 			break;
; 35   : 		}
; 36   : 	}
; 37   : }

  00081	5d		 pop	 ebp
  00082	c2 04 00	 ret	 4
?Update@CFrameController@@QAEXM@Z ENDP			; CFrameController::Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\effectlib\framecontroller.cpp
;	COMDAT ?Clear@CFrameController@@QAEXXZ
_TEXT	SEGMENT
?Clear@CFrameController@@QAEXXZ PROC			; CFrameController::Clear, COMDAT
; _this$ = ecx

; 88   : 	m_isActive = TRUE;

  00000	c7 41 04 01 00
	00 00		 mov	 DWORD PTR [ecx+4], 1

; 89   : 	m_dwcurFrame = 0;

  00007	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 90   : 	m_fLastFrameTime = 0.0f;

  0000e	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 91   : }

  00015	c3		 ret	 0
?Clear@CFrameController@@QAEXXZ ENDP			; CFrameController::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\effectlib\framecontroller.cpp
;	COMDAT ??1CFrameController@@UAE@XZ
_TEXT	SEGMENT
??1CFrameController@@UAE@XZ PROC			; CFrameController::~CFrameController, COMDAT
; _this$ = ecx

; 105  : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CFrameController@@6B@

; 106  : }

  00006	c3		 ret	 0
??1CFrameController@@UAE@XZ ENDP			; CFrameController::~CFrameController
_TEXT	ENDS
; Function compile flags: /Ogtp
; File a:\from c\desktop\serwer\source\source client\client\effectlib\framecontroller.cpp
;	COMDAT ??0CFrameController@@QAE@XZ
_TEXT	SEGMENT
??0CFrameController@@QAE@XZ PROC			; CFrameController::CFrameController, COMDAT
; _this$ = ecx

; 94   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CFrameController@@6B@

; 95   : 	m_isActive = TRUE;
; 96   : 	m_dwcurFrame = 0;
; 97   : 	m_fLastFrameTime = 0.0f;
; 98   : 
; 99   : 	m_isLoop = FALSE;
; 100  : 	m_dwMaxFrame = 0;
; 101  : 	m_fFrameTime = 0.0f;
; 102  : 	m_dwStartFrame = 0;
; 103  : }

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 01 00
	00 00		 mov	 DWORD PTR [ecx+4], 1
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  0001d	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00024	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
  0002b	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
  00032	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0
  00039	c3		 ret	 0
??0CFrameController@@QAE@XZ ENDP			; CFrameController::CFrameController
_TEXT	ENDS
END
